/*
#############################################################################################
# RocketLeague (1.0.10897.0) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: Engine_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function Engine.Actor.GetActorSpriteComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USpriteComponent*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class USpriteComponent* AActor::GetActorSpriteComponent ( )
{
	static UFunction* pFnGetActorSpriteComponent = NULL;

	if ( ! pFnGetActorSpriteComponent )
		pFnGetActorSpriteComponent = (UFunction*) UObject::GObjObjects()->Data[ 7439 ];

	AActor_execGetActorSpriteComponent_Parms GetActorSpriteComponent_Parms;

	pFnGetActorSpriteComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorSpriteComponent, &GetActorSpriteComponent_Parms, NULL );

	pFnGetActorSpriteComponent->FunctionFlags |= 0x400;

	return GetActorSpriteComponent_Parms.ReturnValue;
};

// Function Engine.Actor.GetComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm | CPF_EditInline )
// class UClass*                  ComponentClass                 ( CPF_Parm )

class UActorComponent* AActor::GetComponent ( class UClass* ComponentClass )
{
	static UFunction* pFnGetComponent = NULL;

	if ( ! pFnGetComponent )
		pFnGetComponent = (UFunction*) UObject::GObjObjects()->Data[ 7436 ];

	AActor_execGetComponent_Parms GetComponent_Parms;
	GetComponent_Parms.ComponentClass = ComponentClass;

	pFnGetComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComponent, &GetComponent_Parms, NULL );

	pFnGetComponent->FunctionFlags |= 0x400;

	return GetComponent_Parms.ReturnValue;
};

// Function Engine.Actor.SpawnInstance
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* AActor::SpawnInstance ( class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawnInstance = NULL;

	if ( ! pFnSpawnInstance )
		pFnSpawnInstance = (UFunction*) UObject::GObjObjects()->Data[ 7429 ];

	AActor_execSpawnInstance_Parms SpawnInstance_Parms;
	SpawnInstance_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &SpawnInstance_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &SpawnInstance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnInstance_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnInstance_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnSpawnInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnInstance, &SpawnInstance_Parms, NULL );

	pFnSpawnInstance->FunctionFlags |= 0x400;

	return SpawnInstance_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorMetrics
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MetricsType                    ( CPF_Parm )

int AActor::GetActorMetrics ( unsigned char MetricsType )
{
	static UFunction* pFnGetActorMetrics = NULL;

	if ( ! pFnGetActorMetrics )
		pFnGetActorMetrics = (UFunction*) UObject::GObjObjects()->Data[ 7426 ];

	AActor_execGetActorMetrics_Parms GetActorMetrics_Parms;
	GetActorMetrics_Parms.MetricsType = MetricsType;

	pFnGetActorMetrics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorMetrics, &GetActorMetrics_Parms, NULL );

	pFnGetActorMetrics->FunctionFlags |= 0x400;

	return GetActorMetrics_Parms.ReturnValue;
};

// Function Engine.Actor.OnMobileTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       InPC                           ( CPF_Parm )
// struct FVector2D               TouchLocation                  ( CPF_Parm )

bool AActor::eventOnMobileTouch ( class APlayerController* InPC, struct FVector2D TouchLocation )
{
	static UFunction* pFnOnMobileTouch = NULL;

	if ( ! pFnOnMobileTouch )
		pFnOnMobileTouch = (UFunction*) UObject::GObjObjects()->Data[ 7421 ];

	AActor_eventOnMobileTouch_Parms OnMobileTouch_Parms;
	OnMobileTouch_Parms.InPC = InPC;
	memcpy ( &OnMobileTouch_Parms.TouchLocation, &TouchLocation, 0x8 );

	this->ProcessEvent ( pFnOnMobileTouch, &OnMobileTouch_Parms, NULL );

	return OnMobileTouch_Parms.ReturnValue;
};

// Function Engine.Actor.IsMobileTouchEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsMobileTouchEnabled ( )
{
	static UFunction* pFnIsMobileTouchEnabled = NULL;

	if ( ! pFnIsMobileTouchEnabled )
		pFnIsMobileTouchEnabled = (UFunction*) UObject::GObjObjects()->Data[ 7418 ];

	AActor_execIsMobileTouchEnabled_Parms IsMobileTouchEnabled_Parms;

	this->ProcessEvent ( pFnIsMobileTouchEnabled, &IsMobileTouchEnabled_Parms, NULL );

	return IsMobileTouchEnabled_Parms.ReturnValue;
};

// Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::ShouldBeHiddenBySHOW_NavigationNodes ( )
{
	static UFunction* pFnShouldBeHiddenBySHOW_NavigationNodes = NULL;

	if ( ! pFnShouldBeHiddenBySHOW_NavigationNodes )
		pFnShouldBeHiddenBySHOW_NavigationNodes = (UFunction*) UObject::GObjObjects()->Data[ 7416 ];

	AActor_execShouldBeHiddenBySHOW_NavigationNodes_Parms ShouldBeHiddenBySHOW_NavigationNodes_Parms;

	pFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldBeHiddenBySHOW_NavigationNodes, &ShouldBeHiddenBySHOW_NavigationNodes_Parms, NULL );

	pFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags |= 0x400;

	return ShouldBeHiddenBySHOW_NavigationNodes_Parms.ReturnValue;
};

// Function Engine.Actor.PrintDebugInfo
// [0x00020102] 
// Parameters infos:
// class UDebugDrawer*            Drawer                         ( CPF_Parm )

void AActor::PrintDebugInfo ( class UDebugDrawer* Drawer )
{
	static UFunction* pFnPrintDebugInfo = NULL;

	if ( ! pFnPrintDebugInfo )
		pFnPrintDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 7413 ];

	AActor_execPrintDebugInfo_Parms PrintDebugInfo_Parms;
	PrintDebugInfo_Parms.Drawer = Drawer;

	this->ProcessEvent ( pFnPrintDebugInfo, &PrintDebugInfo_Parms, NULL );
};

// Function Engine.Actor.ForceNetUpdatePacket
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::ForceNetUpdatePacket ( )
{
	static UFunction* pFnForceNetUpdatePacket = NULL;

	if ( ! pFnForceNetUpdatePacket )
		pFnForceNetUpdatePacket = (UFunction*) UObject::GObjObjects()->Data[ 7415 ];

	AActor_execForceNetUpdatePacket_Parms ForceNetUpdatePacket_Parms;

	pFnForceNetUpdatePacket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceNetUpdatePacket, &ForceNetUpdatePacket_Parms, NULL );

	pFnForceNetUpdatePacket->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ForceNetUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::ForceNetUpdate ( )
{
	static UFunction* pFnForceNetUpdate = NULL;

	if ( ! pFnForceNetUpdate )
		pFnForceNetUpdate = (UFunction*) UObject::GObjObjects()->Data[ 7157 ];

	AActor_execForceNetUpdate_Parms ForceNetUpdate_Parms;

	pFnForceNetUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceNetUpdate, &ForceNetUpdate_Parms, NULL );

	pFnForceNetUpdate->FunctionFlags |= 0x400;
};

// Function Engine.Actor.WillOverlap
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PosA                           ( CPF_Parm )
// struct FVector                 VelA                           ( CPF_Parm )
// struct FVector                 PosB                           ( CPF_Parm )
// struct FVector                 VelB                           ( CPF_Parm )
// float                          StepSize                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm | CPF_OutParm )

bool AActor::WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time )
{
	static UFunction* pFnWillOverlap = NULL;

	if ( ! pFnWillOverlap )
		pFnWillOverlap = (UFunction*) UObject::GObjObjects()->Data[ 7404 ];

	AActor_execWillOverlap_Parms WillOverlap_Parms;
	memcpy ( &WillOverlap_Parms.PosA, &PosA, 0xC );
	memcpy ( &WillOverlap_Parms.VelA, &VelA, 0xC );
	memcpy ( &WillOverlap_Parms.PosB, &PosB, 0xC );
	memcpy ( &WillOverlap_Parms.VelB, &VelB, 0xC );
	WillOverlap_Parms.StepSize = StepSize;
	WillOverlap_Parms.Radius = Radius;

	pFnWillOverlap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWillOverlap, &WillOverlap_Parms, NULL );

	pFnWillOverlap->FunctionFlags |= 0x400;

	if ( Time )
		*Time = WillOverlap_Parms.Time;

	return WillOverlap_Parms.ReturnValue;
};

// Function Engine.Actor.GetAvoidanceVector
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 GoalLocation                   ( CPF_Parm )
// float                          CollisionRadius                ( CPF_Parm )
// float                          MaxSpeed                       ( CPF_Parm )
// int                            NumSamples                     ( CPF_OptionalParm | CPF_Parm )
// float                          VelocityStepRate               ( CPF_OptionalParm | CPF_Parm )
// float                          MaxTimeTilOverlap              ( CPF_OptionalParm | CPF_Parm )
// TArray< class AActor* >        Obstacles                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FVector AActor::GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles )
{
	static UFunction* pFnGetAvoidanceVector = NULL;

	if ( ! pFnGetAvoidanceVector )
		pFnGetAvoidanceVector = (UFunction*) UObject::GObjObjects()->Data[ 7394 ];

	AActor_execGetAvoidanceVector_Parms GetAvoidanceVector_Parms;
	memcpy ( &GetAvoidanceVector_Parms.GoalLocation, &GoalLocation, 0xC );
	GetAvoidanceVector_Parms.CollisionRadius = CollisionRadius;
	GetAvoidanceVector_Parms.MaxSpeed = MaxSpeed;
	GetAvoidanceVector_Parms.NumSamples = NumSamples;
	GetAvoidanceVector_Parms.VelocityStepRate = VelocityStepRate;
	GetAvoidanceVector_Parms.MaxTimeTilOverlap = MaxTimeTilOverlap;

	pFnGetAvoidanceVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAvoidanceVector, &GetAvoidanceVector_Parms, NULL );

	pFnGetAvoidanceVector->FunctionFlags |= 0x400;

	if ( Obstacles )
		memcpy ( Obstacles, &GetAvoidanceVector_Parms.Obstacles, 0xC );

	return GetAvoidanceVector_Parms.ReturnValue;
};

// Function Engine.Actor.ReplicationEnded
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AActor::eventReplicationEnded ( )
{
	static UFunction* pFnReplicationEnded = NULL;

	if ( ! pFnReplicationEnded )
		pFnReplicationEnded = (UFunction*) UObject::GObjObjects()->Data[ 7393 ];

	AActor_eventReplicationEnded_Parms ReplicationEnded_Parms;

	this->ProcessEvent ( pFnReplicationEnded, &ReplicationEnded_Parms, NULL );
};

// Function Engine.Actor.PostDemoRewind
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AActor::eventPostDemoRewind ( )
{
	static UFunction* pFnPostDemoRewind = NULL;

	if ( ! pFnPostDemoRewind )
		pFnPostDemoRewind = (UFunction*) UObject::GObjObjects()->Data[ 7392 ];

	AActor_eventPostDemoRewind_Parms PostDemoRewind_Parms;

	this->ProcessEvent ( pFnPostDemoRewind, &PostDemoRewind_Parms, NULL );
};

// Function Engine.Actor.AnimTreeUpdated
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void AActor::eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnAnimTreeUpdated = NULL;

	if ( ! pFnAnimTreeUpdated )
		pFnAnimTreeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 7390 ];

	AActor_eventAnimTreeUpdated_Parms AnimTreeUpdated_Parms;
	AnimTreeUpdated_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnAnimTreeUpdated, &AnimTreeUpdated_Parms, NULL );
};

// Function Engine.Actor.SupportsKismetModification
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USequenceOp*             AskingOp                       ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason )
{
	static UFunction* pFnSupportsKismetModification = NULL;

	if ( ! pFnSupportsKismetModification )
		pFnSupportsKismetModification = (UFunction*) UObject::GObjObjects()->Data[ 7386 ];

	AActor_execSupportsKismetModification_Parms SupportsKismetModification_Parms;
	SupportsKismetModification_Parms.AskingOp = AskingOp;

	pFnSupportsKismetModification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSupportsKismetModification, &SupportsKismetModification_Parms, NULL );

	pFnSupportsKismetModification->FunctionFlags |= 0x400;

	if ( Reason )
		memcpy ( Reason, &SupportsKismetModification_Parms.Reason, 0xC );

	return SupportsKismetModification_Parms.ReturnValue;
};

// Function Engine.Actor.GetAnimTrailParticleSystem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

class UParticleSystem* AActor::GetAnimTrailParticleSystem ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnGetAnimTrailParticleSystem = NULL;

	if ( ! pFnGetAnimTrailParticleSystem )
		pFnGetAnimTrailParticleSystem = (UFunction*) UObject::GObjObjects()->Data[ 7383 ];

	AActor_execGetAnimTrailParticleSystem_Parms GetAnimTrailParticleSystem_Parms;
	GetAnimTrailParticleSystem_Parms.AnimNotifyData = AnimNotifyData;

	pFnGetAnimTrailParticleSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimTrailParticleSystem, &GetAnimTrailParticleSystem_Parms, NULL );

	pFnGetAnimTrailParticleSystem->FunctionFlags |= 0x400;

	return GetAnimTrailParticleSystem_Parms.ReturnValue;
};

// Function Engine.Actor.TrailsNotifyEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnTrailsNotifyEnd = NULL;

	if ( ! pFnTrailsNotifyEnd )
		pFnTrailsNotifyEnd = (UFunction*) UObject::GObjObjects()->Data[ 7381 ];

	AActor_eventTrailsNotifyEnd_Parms TrailsNotifyEnd_Parms;
	TrailsNotifyEnd_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnTrailsNotifyEnd, &TrailsNotifyEnd_Parms, NULL );
};

// Function Engine.Actor.TrailsNotifyTick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnTrailsNotifyTick = NULL;

	if ( ! pFnTrailsNotifyTick )
		pFnTrailsNotifyTick = (UFunction*) UObject::GObjObjects()->Data[ 7379 ];

	AActor_eventTrailsNotifyTick_Parms TrailsNotifyTick_Parms;
	TrailsNotifyTick_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnTrailsNotifyTick, &TrailsNotifyTick_Parms, NULL );
};

// Function Engine.Actor.TrailsNotify
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Trails*      AnimNotifyData                 ( CPF_Const | CPF_Parm )

void AActor::eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData )
{
	static UFunction* pFnTrailsNotify = NULL;

	if ( ! pFnTrailsNotify )
		pFnTrailsNotify = (UFunction*) UObject::GObjObjects()->Data[ 7377 ];

	AActor_eventTrailsNotify_Parms TrailsNotify_Parms;
	TrailsNotify_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnTrailsNotify, &TrailsNotify_Parms, NULL );
};

// Function Engine.Actor.CreateForceField
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_ForceField*  AnimNotifyData                 ( CPF_Const | CPF_Parm )

bool AActor::eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData )
{
	static UFunction* pFnCreateForceField = NULL;

	if ( ! pFnCreateForceField )
		pFnCreateForceField = (UFunction*) UObject::GObjObjects()->Data[ 7374 ];

	AActor_eventCreateForceField_Parms CreateForceField_Parms;
	CreateForceField_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnCreateForceField, &CreateForceField_Parms, NULL );

	return CreateForceField_Parms.ReturnValue;
};

// Function Engine.Actor.PlayParticleEffect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 ( CPF_Const | CPF_Parm )

bool AActor::eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = (UFunction*) UObject::GObjObjects()->Data[ 7371 ];

	AActor_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;
	PlayParticleEffect_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );

	return PlayParticleEffect_Parms.ReturnValue;
};

// Function Engine.Actor.GetAimAdhesionExtent
// [0x00420102] 
// Parameters infos:
// float                          Width                          ( CPF_Parm | CPF_OutParm )
// float                          Height                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Center                         ( CPF_Parm | CPF_OutParm )

void AActor::GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center )
{
	static UFunction* pFnGetAimAdhesionExtent = NULL;

	if ( ! pFnGetAimAdhesionExtent )
		pFnGetAimAdhesionExtent = (UFunction*) UObject::GObjObjects()->Data[ 7366 ];

	AActor_execGetAimAdhesionExtent_Parms GetAimAdhesionExtent_Parms;

	this->ProcessEvent ( pFnGetAimAdhesionExtent, &GetAimAdhesionExtent_Parms, NULL );

	if ( Width )
		*Width = GetAimAdhesionExtent_Parms.Width;

	if ( Height )
		*Height = GetAimAdhesionExtent_Parms.Height;

	if ( Center )
		memcpy ( Center, &GetAimAdhesionExtent_Parms.Center, 0xC );
};

// Function Engine.Actor.GetAimFrictionExtent
// [0x00420102] 
// Parameters infos:
// float                          Width                          ( CPF_Parm | CPF_OutParm )
// float                          Height                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Center                         ( CPF_Parm | CPF_OutParm )

void AActor::GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center )
{
	static UFunction* pFnGetAimFrictionExtent = NULL;

	if ( ! pFnGetAimFrictionExtent )
		pFnGetAimFrictionExtent = (UFunction*) UObject::GObjObjects()->Data[ 7361 ];

	AActor_execGetAimFrictionExtent_Parms GetAimFrictionExtent_Parms;

	this->ProcessEvent ( pFnGetAimFrictionExtent, &GetAimFrictionExtent_Parms, NULL );

	if ( Width )
		*Width = GetAimFrictionExtent_Parms.Width;

	if ( Height )
		*Height = GetAimFrictionExtent_Parms.Height;

	if ( Center )
		memcpy ( Center, &GetAimFrictionExtent_Parms.Center, 0xC );
};

// Function Engine.Actor.IsInPersistentLevel
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIncludeLevelStreamingPersistent ( CPF_OptionalParm | CPF_Parm )

bool AActor::IsInPersistentLevel ( unsigned long bIncludeLevelStreamingPersistent )
{
	static UFunction* pFnIsInPersistentLevel = NULL;

	if ( ! pFnIsInPersistentLevel )
		pFnIsInPersistentLevel = (UFunction*) UObject::GObjObjects()->Data[ 7358 ];

	AActor_execIsInPersistentLevel_Parms IsInPersistentLevel_Parms;
	IsInPersistentLevel_Parms.bIncludeLevelStreamingPersistent = bIncludeLevelStreamingPersistent;

	pFnIsInPersistentLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInPersistentLevel, &IsInPersistentLevel_Parms, NULL );

	pFnIsInPersistentLevel->FunctionFlags |= 0x400;

	return IsInPersistentLevel_Parms.ReturnValue;
};

// Function Engine.Actor.OnRigidBodySpringOverextension
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class URB_BodyInstance*        BodyInstance                   ( CPF_Parm )

void AActor::eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance )
{
	static UFunction* pFnOnRigidBodySpringOverextension = NULL;

	if ( ! pFnOnRigidBodySpringOverextension )
		pFnOnRigidBodySpringOverextension = (UFunction*) UObject::GObjObjects()->Data[ 7356 ];

	AActor_eventOnRigidBodySpringOverextension_Parms OnRigidBodySpringOverextension_Parms;
	OnRigidBodySpringOverextension_Parms.BodyInstance = BodyInstance;

	this->ProcessEvent ( pFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Parms, NULL );
};

// Function Engine.Actor.GetPackageGuid
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FGuid                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PackageName                    ( CPF_Parm )

struct FGuid AActor::GetPackageGuid ( struct FName PackageName )
{
	static UFunction* pFnGetPackageGuid = NULL;

	if ( ! pFnGetPackageGuid )
		pFnGetPackageGuid = (UFunction*) UObject::GObjObjects()->Data[ 7353 ];

	AActor_execGetPackageGuid_Parms GetPackageGuid_Parms;
	memcpy ( &GetPackageGuid_Parms.PackageName, &PackageName, 0x8 );

	pFnGetPackageGuid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPackageGuid, &GetPackageGuid_Parms, NULL );

	pFnGetPackageGuid->FunctionFlags |= 0x400;

	return GetPackageGuid_Parms.ReturnValue;
};

// Function Engine.Actor.PostInitAnimTree
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 7351 ];

	AActor_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.Actor.RootMotionExtracted
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )
// struct FBoneAtom               ExtractedRootMotionDelta       ( CPF_Parm | CPF_OutParm )

void AActor::eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta )
{
	static UFunction* pFnRootMotionExtracted = NULL;

	if ( ! pFnRootMotionExtracted )
		pFnRootMotionExtracted = (UFunction*) UObject::GObjObjects()->Data[ 7348 ];

	AActor_eventRootMotionExtracted_Parms RootMotionExtracted_Parms;
	RootMotionExtracted_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionExtracted, &RootMotionExtracted_Parms, NULL );

	if ( ExtractedRootMotionDelta )
		memcpy ( ExtractedRootMotionDelta, &RootMotionExtracted_Parms.ExtractedRootMotionDelta, 0x20 );
};

// Function Engine.Actor.RootMotionProcessed
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventRootMotionProcessed ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionProcessed = NULL;

	if ( ! pFnRootMotionProcessed )
		pFnRootMotionProcessed = (UFunction*) UObject::GObjObjects()->Data[ 7346 ];

	AActor_eventRootMotionProcessed_Parms RootMotionProcessed_Parms;
	RootMotionProcessed_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionProcessed, &RootMotionProcessed_Parms, NULL );
};

// Function Engine.Actor.RootMotionModeChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionModeChanged = NULL;

	if ( ! pFnRootMotionModeChanged )
		pFnRootMotionModeChanged = (UFunction*) UObject::GObjObjects()->Data[ 7344 ];

	AActor_eventRootMotionModeChanged_Parms RootMotionModeChanged_Parms;
	RootMotionModeChanged_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionModeChanged, &RootMotionModeChanged_Parms, NULL );
};

// Function Engine.Actor.PostRenderFor
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 7339 ];

	AActor_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function Engine.Actor.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void AActor::NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 7334 ];

	AActor_execNativePostRenderFor_Parms NativePostRenderFor_Parms;
	NativePostRenderFor_Parms.PC = PC;
	NativePostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &NativePostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &NativePostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHUDLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewHUDLocation                 ( CPF_Parm )

void AActor::SetHUDLocation ( struct FVector NewHUDLocation )
{
	static UFunction* pFnSetHUDLocation = NULL;

	if ( ! pFnSetHUDLocation )
		pFnSetHUDLocation = (UFunction*) UObject::GObjObjects()->Data[ 7332 ];

	AActor_execSetHUDLocation_Parms SetHUDLocation_Parms;
	memcpy ( &SetHUDLocation_Parms.NewHUDLocation, &NewHUDLocation, 0xC );

	pFnSetHUDLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHUDLocation, &SetHUDLocation_Parms, NULL );

	pFnSetHUDLocation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.OnRanOver
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ASVehicle*               Vehicle                        ( CPF_Parm )
// class UPrimitiveComponent*     RunOverComponent               ( CPF_Parm | CPF_EditInline )
// int                            WheelIndex                     ( CPF_Parm )

void AActor::eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex )
{
	static UFunction* pFnOnRanOver = NULL;

	if ( ! pFnOnRanOver )
		pFnOnRanOver = (UFunction*) UObject::GObjObjects()->Data[ 7328 ];

	AActor_eventOnRanOver_Parms OnRanOver_Parms;
	OnRanOver_Parms.Vehicle = Vehicle;
	OnRanOver_Parms.RunOverComponent = RunOverComponent;
	OnRanOver_Parms.WheelIndex = WheelIndex;

	this->ProcessEvent ( pFnOnRanOver, &OnRanOver_Parms, NULL );
};

// Function Engine.Actor.RigidBodyCollision
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AActor::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 7323 ];

	AActor_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Engine.Actor.InterpolationChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = (UFunction*) UObject::GObjObjects()->Data[ 7321 ];

	AActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.Actor.InterpolationFinished
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 7319 ];

	AActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Actor.InterpolationStarted
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void AActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 7316 ];

	AActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Actor.SpawnedByKismet
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 7315 ];

	AActor_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Actor.GetTargetLocation
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AActor::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 7311 ];

	AActor_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.FindGoodEndView
// [0x00420102] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FRotator                GoodRotation                   ( CPF_Parm | CPF_OutParm )

void AActor::FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation )
{
	static UFunction* pFnFindGoodEndView = NULL;

	if ( ! pFnFindGoodEndView )
		pFnFindGoodEndView = (UFunction*) UObject::GObjObjects()->Data[ 7308 ];

	AActor_execFindGoodEndView_Parms FindGoodEndView_Parms;
	FindGoodEndView_Parms.PC = PC;

	this->ProcessEvent ( pFnFindGoodEndView, &FindGoodEndView_Parms, NULL );

	if ( GoodRotation )
		memcpy ( GoodRotation, &FindGoodEndView_Parms.GoodRotation, 0xC );
};

// Function Engine.Actor.ScriptGetTeamNum
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::eventScriptGetTeamNum ( )
{
	static UFunction* pFnScriptGetTeamNum = NULL;

	if ( ! pFnScriptGetTeamNum )
		pFnScriptGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 7306 ];

	AActor_eventScriptGetTeamNum_Parms ScriptGetTeamNum_Parms;

	this->ProcessEvent ( pFnScriptGetTeamNum, &ScriptGetTeamNum_Parms, NULL );

	return ScriptGetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AActor::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 7304 ];

	AActor_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Actor.PawnBaseDied
// [0x00020000] 
// Parameters infos:

void AActor::PawnBaseDied ( )
{
	static UFunction* pFnPawnBaseDied = NULL;

	if ( ! pFnPawnBaseDied )
		pFnPawnBaseDied = (UFunction*) UObject::GObjObjects()->Data[ 7303 ];

	AActor_execPawnBaseDied_Parms PawnBaseDied_Parms;

	this->ProcessEvent ( pFnPawnBaseDied, &PawnBaseDied_Parms, NULL );
};

// Function Engine.Actor.IsPlayerOwned
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsPlayerOwned ( )
{
	static UFunction* pFnIsPlayerOwned = NULL;

	if ( ! pFnIsPlayerOwned )
		pFnIsPlayerOwned = (UFunction*) UObject::GObjObjects()->Data[ 7301 ];

	AActor_execIsPlayerOwned_Parms IsPlayerOwned_Parms;

	pFnIsPlayerOwned->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerOwned, &IsPlayerOwned_Parms, NULL );

	pFnIsPlayerOwned->FunctionFlags |= 0x400;

	return IsPlayerOwned_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AActor::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 7298 ];

	AActor_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Actor.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 7296 ];

	AActor_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Actor.GetActorFaceFXAsset
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* AActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 7294 ];

	AActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.Actor.CanActorPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CanActorPlayFaceFXAnim ( )
{
	static UFunction* pFnCanActorPlayFaceFXAnim = NULL;

	if ( ! pFnCanActorPlayFaceFXAnim )
		pFnCanActorPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7292 ];

	AActor_execCanActorPlayFaceFXAnim_Parms CanActorPlayFaceFXAnim_Parms;

	this->ProcessEvent ( pFnCanActorPlayFaceFXAnim, &CanActorPlayFaceFXAnim_Parms, NULL );

	return CanActorPlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7290 ];

	AActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.TickSkelControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )
// class USkelControlBase*        SkelCtrl                       ( CPF_Parm )

void AActor::eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl )
{
	static UFunction* pFnTickSkelControl = NULL;

	if ( ! pFnTickSkelControl )
		pFnTickSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 7286 ];

	AActor_eventTickSkelControl_Parms TickSkelControl_Parms;
	TickSkelControl_Parms.DeltaTime = DeltaTime;
	TickSkelControl_Parms.SkelComp = SkelComp;
	TickSkelControl_Parms.SkelCtrl = SkelCtrl;

	this->ProcessEvent ( pFnTickSkelControl, &TickSkelControl_Parms, NULL );
};

// Function Engine.Actor.SetSkelControlScale
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AActor::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 7283 ];

	AActor_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Actor.SetMorphWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void AActor::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 7280 ];

	AActor_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Actor.StopActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7279 ];

	AActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.Actor.PlayActorFaceFXAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )
// class UAkEvent*                AkEventToPlay                  ( CPF_Parm )

bool AActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 7272 ];

	AActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;
	PlayActorFaceFXAnim_Parms.AkEventToPlay = AkEventToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Actor.FinishAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AActor::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 7270 ];

	AActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Actor.SetAnimPosition
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void AActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 7262 ];

	AActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;
	SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Actor.BeginAnimControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AActor::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 7260 ];

	AActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Actor.OnAnimPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )

void AActor::eventOnAnimPlay ( class UAnimNodeSequence* SeqNode )
{
	static UFunction* pFnOnAnimPlay = NULL;

	if ( ! pFnOnAnimPlay )
		pFnOnAnimPlay = (UFunction*) UObject::GObjObjects()->Data[ 7258 ];

	AActor_eventOnAnimPlay_Parms OnAnimPlay_Parms;
	OnAnimPlay_Parms.SeqNode = SeqNode;

	this->ProcessEvent ( pFnOnAnimPlay, &OnAnimPlay_Parms, NULL );
};

// Function Engine.Actor.OnAnimEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void AActor::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 7254 ];

	AActor_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function Engine.Actor.DoKismetAttachment
// [0x00820102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 7241 ];

	AActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Actor.OnAttachToActor
// [0x00020102] 
// Parameters infos:
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AActor::OnAttachToActor ( class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnOnAttachToActor = NULL;

	if ( ! pFnOnAttachToActor )
		pFnOnAttachToActor = (UFunction*) UObject::GObjObjects()->Data[ 7232 ];

	AActor_execOnAttachToActor_Parms OnAttachToActor_Parms;
	OnAttachToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAttachToActor, &OnAttachToActor_Parms, NULL );
};

// Function Engine.Actor.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AActor::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 7224 ];

	AActor_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Actor.OnChangeCollision
// [0x00020002] 
// Parameters infos:
// class USeqAct_ChangeCollision* Action                         ( CPF_Parm )

void AActor::OnChangeCollision ( class USeqAct_ChangeCollision* Action )
{
	static UFunction* pFnOnChangeCollision = NULL;

	if ( ! pFnOnChangeCollision )
		pFnOnChangeCollision = (UFunction*) UObject::GObjObjects()->Data[ 7214 ];

	AActor_execOnChangeCollision_Parms OnChangeCollision_Parms;
	OnChangeCollision_Parms.Action = Action;

	this->ProcessEvent ( pFnOnChangeCollision, &OnChangeCollision_Parms, NULL );
};

// Function Engine.Actor.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void AActor::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 7210 ];

	AActor_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function Engine.Actor.OnSetBlockRigidBody
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetBlockRigidBody* Action                         ( CPF_Parm )

void AActor::OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action )
{
	static UFunction* pFnOnSetBlockRigidBody = NULL;

	if ( ! pFnOnSetBlockRigidBody )
		pFnOnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 7205 ];

	AActor_execOnSetBlockRigidBody_Parms OnSetBlockRigidBody_Parms;
	OnSetBlockRigidBody_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetBlockRigidBody, &OnSetBlockRigidBody_Parms, NULL );
};

// Function Engine.Actor.OnSetVelocity
// [0x00820102] 
// Parameters infos:
// class USeqAct_SetVelocity*     Action                         ( CPF_Parm )

void AActor::OnSetVelocity ( class USeqAct_SetVelocity* Action )
{
	static UFunction* pFnOnSetVelocity = NULL;

	if ( ! pFnOnSetVelocity )
		pFnOnSetVelocity = (UFunction*) UObject::GObjObjects()->Data[ 7196 ];

	AActor_execOnSetVelocity_Parms OnSetVelocity_Parms;
	OnSetVelocity_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetVelocity, &OnSetVelocity_Parms, NULL );
};

// Function Engine.Actor.OnTeleport
// [0x00820102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AActor::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 7171 ];

	AActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Actor.OnModifyHealth
// [0x00020102] 
// Parameters infos:
// class USeqAct_ModifyHealth*    Action                         ( CPF_Parm )

void AActor::OnModifyHealth ( class USeqAct_ModifyHealth* Action )
{
	static UFunction* pFnOnModifyHealth = NULL;

	if ( ! pFnOnModifyHealth )
		pFnOnModifyHealth = (UFunction*) UObject::GObjObjects()->Data[ 7162 ];

	AActor_execOnModifyHealth_Parms OnModifyHealth_Parms;
	OnModifyHealth_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyHealth, &OnModifyHealth_Parms, NULL );
};

// Function Engine.Actor.PrestreamTextures
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )
// unsigned long                  bEnableStreaming               ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void AActor::PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups )
{
	static UFunction* pFnPrestreamTextures = NULL;

	if ( ! pFnPrestreamTextures )
		pFnPrestreamTextures = (UFunction*) UObject::GObjObjects()->Data[ 7158 ];

	AActor_execPrestreamTextures_Parms PrestreamTextures_Parms;
	PrestreamTextures_Parms.Seconds = Seconds;
	PrestreamTextures_Parms.bEnableStreaming = bEnableStreaming;
	PrestreamTextures_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnPrestreamTextures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrestreamTextures, &PrestreamTextures_Parms, NULL );

	pFnPrestreamTextures->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 7152 ];

	AActor_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.Actor.SetNetUpdateTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewUpdateTime                  ( CPF_Parm )

void AActor::SetNetUpdateTime ( float NewUpdateTime )
{
	static UFunction* pFnSetNetUpdateTime = NULL;

	if ( ! pFnSetNetUpdateTime )
		pFnSetNetUpdateTime = (UFunction*) UObject::GObjObjects()->Data[ 7150 ];

	AActor_execSetNetUpdateTime_Parms SetNetUpdateTime_Parms;
	SetNetUpdateTime_Parms.NewUpdateTime = NewUpdateTime;

	pFnSetNetUpdateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetUpdateTime, &SetNetUpdateTime_Parms, NULL );

	pFnSetNetUpdateTime->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ForceNetRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 7149 ];

	AActor_eventForceNetRelevant_Parms ForceNetRelevant_Parms;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );
};

// Function Engine.Actor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void AActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 7140 ];

	AActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.Actor.ClearLatentAction
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// class UClass*                  actionClass                    ( CPF_Parm )
// unsigned long                  bAborted                       ( CPF_OptionalParm | CPF_Parm )
// class USeqAct_Latent*          exceptionAction                ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction )
{
	static UFunction* pFnClearLatentAction = NULL;

	if ( ! pFnClearLatentAction )
		pFnClearLatentAction = (UFunction*) UObject::GObjObjects()->Data[ 7134 ];

	AActor_execClearLatentAction_Parms ClearLatentAction_Parms;
	ClearLatentAction_Parms.actionClass = actionClass;
	ClearLatentAction_Parms.bAborted = bAborted;
	ClearLatentAction_Parms.exceptionAction = exceptionAction;

	this->ProcessEvent ( pFnClearLatentAction, &ClearLatentAction_Parms, NULL );
};

// Function Engine.Actor.FindEventsOfClass
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EventClass                     ( CPF_Parm )
// unsigned long                  bIncludeDisabled               ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > out_EventList                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList )
{
	static UFunction* pFnFindEventsOfClass = NULL;

	if ( ! pFnFindEventsOfClass )
		pFnFindEventsOfClass = (UFunction*) UObject::GObjObjects()->Data[ 7123 ];

	AActor_execFindEventsOfClass_Parms FindEventsOfClass_Parms;
	FindEventsOfClass_Parms.EventClass = EventClass;
	FindEventsOfClass_Parms.bIncludeDisabled = bIncludeDisabled;

	this->ProcessEvent ( pFnFindEventsOfClass, &FindEventsOfClass_Parms, NULL );

	if ( out_EventList )
		memcpy ( out_EventList, &FindEventsOfClass_Parms.out_EventList, 0xC );

	return FindEventsOfClass_Parms.ReturnValue;
};

// Function Engine.Actor.ActivateEventClass
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InClass                        ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > EventList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class USequenceEvent* > ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents )
{
	static UFunction* pFnActivateEventClass = NULL;

	if ( ! pFnActivateEventClass )
		pFnActivateEventClass = (UFunction*) UObject::GObjObjects()->Data[ 7092 ];

	AActor_execActivateEventClass_Parms ActivateEventClass_Parms;
	ActivateEventClass_Parms.InClass = InClass;
	ActivateEventClass_Parms.InInstigator = InInstigator;
	ActivateEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnActivateEventClass, &ActivateEventClass_Parms, NULL );

	if ( EventList )
		memcpy ( EventList, &ActivateEventClass_Parms.EventList, 0xC );

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &ActivateEventClass_Parms.ActivateIndices, 0xC );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &ActivateEventClass_Parms.ActivatedEvents, 0xC );

	return ActivateEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.TriggerGlobalEventClass
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// int                            ActivateIndex                  ( CPF_OptionalParm | CPF_Parm )

bool AActor::TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex )
{
	static UFunction* pFnTriggerGlobalEventClass = NULL;

	if ( ! pFnTriggerGlobalEventClass )
		pFnTriggerGlobalEventClass = (UFunction*) UObject::GObjObjects()->Data[ 7095 ];

	AActor_execTriggerGlobalEventClass_Parms TriggerGlobalEventClass_Parms;
	TriggerGlobalEventClass_Parms.InEventClass = InEventClass;
	TriggerGlobalEventClass_Parms.InInstigator = InInstigator;
	TriggerGlobalEventClass_Parms.ActivateIndex = ActivateIndex;

	this->ProcessEvent ( pFnTriggerGlobalEventClass, &TriggerGlobalEventClass_Parms, NULL );

	return TriggerGlobalEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.ReceivedNewEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USequenceEvent*          Evt                            ( CPF_Parm )

void AActor::eventReceivedNewEvent ( class USequenceEvent* Evt )
{
	static UFunction* pFnReceivedNewEvent = NULL;

	if ( ! pFnReceivedNewEvent )
		pFnReceivedNewEvent = (UFunction*) UObject::GObjObjects()->Data[ 7093 ];

	AActor_eventReceivedNewEvent_Parms ReceivedNewEvent_Parms;
	ReceivedNewEvent_Parms.Evt = Evt;

	this->ProcessEvent ( pFnReceivedNewEvent, &ReceivedNewEvent_Parms, NULL );
};

// Function Engine.Actor.TriggerEventClass
// [0x00424102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  InEventClass                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// int                            ActivateIndex                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceEvent* > ActivatedEvents                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents )
{
	static UFunction* pFnTriggerEventClass = NULL;

	if ( ! pFnTriggerEventClass )
		pFnTriggerEventClass = (UFunction*) UObject::GObjObjects()->Data[ 7082 ];

	AActor_execTriggerEventClass_Parms TriggerEventClass_Parms;
	TriggerEventClass_Parms.InEventClass = InEventClass;
	TriggerEventClass_Parms.InInstigator = InInstigator;
	TriggerEventClass_Parms.ActivateIndex = ActivateIndex;
	TriggerEventClass_Parms.bTest = bTest;

	this->ProcessEvent ( pFnTriggerEventClass, &TriggerEventClass_Parms, NULL );

	if ( ActivatedEvents )
		memcpy ( ActivatedEvents, &TriggerEventClass_Parms.ActivatedEvents, 0xC );

	return TriggerEventClass_Parms.ReturnValue;
};

// Function Engine.Actor.DebugMessagePlayer
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AActor::eventDebugMessagePlayer ( struct FString msg )
{
	static UFunction* pFnDebugMessagePlayer = NULL;

	if ( ! pFnDebugMessagePlayer )
		pFnDebugMessagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 7053 ];

	AActor_eventDebugMessagePlayer_Parms DebugMessagePlayer_Parms;
	memcpy ( &DebugMessagePlayer_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnDebugMessagePlayer, &DebugMessagePlayer_Parms, NULL );
};

// Function Engine.Actor.ImpactEffectIsRelevant
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   EffectInstigator               ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          VisibleCullDistance            ( CPF_OptionalParm | CPF_Parm )
// float                          HiddenCullDistance             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipLOSCheck                  ( CPF_OptionalParm | CPF_Parm )

bool AActor::ImpactEffectIsRelevant ( class APawn* EffectInstigator, struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, unsigned long bSkipLOSCheck )
{
	static UFunction* pFnImpactEffectIsRelevant = NULL;

	if ( ! pFnImpactEffectIsRelevant )
		pFnImpactEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 7065 ];

	AActor_execImpactEffectIsRelevant_Parms ImpactEffectIsRelevant_Parms;
	ImpactEffectIsRelevant_Parms.EffectInstigator = EffectInstigator;
	memcpy ( &ImpactEffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	ImpactEffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	ImpactEffectIsRelevant_Parms.VisibleCullDistance = VisibleCullDistance;
	ImpactEffectIsRelevant_Parms.HiddenCullDistance = HiddenCullDistance;
	ImpactEffectIsRelevant_Parms.bSkipLOSCheck = bSkipLOSCheck;

	this->ProcessEvent ( pFnImpactEffectIsRelevant, &ImpactEffectIsRelevant_Parms, NULL );

	return ImpactEffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.ActorEffectIsRelevant
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   EffectInstigator               ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          VisibleCullDistance            ( CPF_OptionalParm | CPF_Parm )
// float                          HiddenCullDistance             ( CPF_OptionalParm | CPF_Parm )

bool AActor::ActorEffectIsRelevant ( class APawn* EffectInstigator, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance )
{
	static UFunction* pFnActorEffectIsRelevant = NULL;

	if ( ! pFnActorEffectIsRelevant )
		pFnActorEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 7042 ];

	AActor_execActorEffectIsRelevant_Parms ActorEffectIsRelevant_Parms;
	ActorEffectIsRelevant_Parms.EffectInstigator = EffectInstigator;
	ActorEffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	ActorEffectIsRelevant_Parms.VisibleCullDistance = VisibleCullDistance;
	ActorEffectIsRelevant_Parms.HiddenCullDistance = HiddenCullDistance;

	this->ProcessEvent ( pFnActorEffectIsRelevant, &ActorEffectIsRelevant_Parms, NULL );

	return ActorEffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.EffectIsRelevant
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          VisibleCullDistance            ( CPF_OptionalParm | CPF_Parm )
// float                          HiddenCullDistance             ( CPF_OptionalParm | CPF_Parm )

bool AActor::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 7036 ];

	AActor_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.VisibleCullDistance = VisibleCullDistance;
	EffectIsRelevant_Parms.HiddenCullDistance = HiddenCullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.Actor.ApplyFluidSurfaceImpact
// [0x00020102] 
// Parameters infos:
// class AFluidSurfaceActor*      Fluid                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AActor::ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation )
{
	static UFunction* pFnApplyFluidSurfaceImpact = NULL;

	if ( ! pFnApplyFluidSurfaceImpact )
		pFnApplyFluidSurfaceImpact = (UFunction*) UObject::GObjObjects()->Data[ 7026 ];

	AActor_execApplyFluidSurfaceImpact_Parms ApplyFluidSurfaceImpact_Parms;
	ApplyFluidSurfaceImpact_Parms.Fluid = Fluid;
	memcpy ( &ApplyFluidSurfaceImpact_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnApplyFluidSurfaceImpact, &ApplyFluidSurfaceImpact_Parms, NULL );
};

// Function Engine.Actor.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 7024 ];

	AActor_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Actor.PlayTeleportEffect
// [0x00020000] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void AActor::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = (UFunction*) UObject::GObjObjects()->Data[ 7021 ];

	AActor_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Actor.IsInPain
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::IsInPain ( )
{
	static UFunction* pFnIsInPain = NULL;

	if ( ! pFnIsInPain )
		pFnIsInPain = (UFunction*) UObject::GObjObjects()->Data[ 7016 ];

	AActor_execIsInPain_Parms IsInPain_Parms;

	this->ProcessEvent ( pFnIsInPain, &IsInPain_Parms, NULL );

	return IsInPain_Parms.ReturnValue;
};

// Function Engine.Actor.Reset
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 7015 ];

	AActor_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Actor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* AActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 7013 ];

	AActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.ModifyHearSoundComponent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void AActor::eventModifyHearSoundComponent ( class UAudioComponent* AC )
{
	static UFunction* pFnModifyHearSoundComponent = NULL;

	if ( ! pFnModifyHearSoundComponent )
		pFnModifyHearSoundComponent = (UFunction*) UObject::GObjObjects()->Data[ 7011 ];

	AActor_eventModifyHearSoundComponent_Parms ModifyHearSoundComponent_Parms;
	ModifyHearSoundComponent_Parms.AC = AC;

	this->ProcessEvent ( pFnModifyHearSoundComponent, &ModifyHearSoundComponent_Parms, NULL );
};

// Function Engine.Actor.GetPhysicsName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetPhysicsName ( )
{
	static UFunction* pFnGetPhysicsName = NULL;

	if ( ! pFnGetPhysicsName )
		pFnGetPhysicsName = (UFunction*) UObject::GObjObjects()->Data[ 7008 ];

	AActor_execGetPhysicsName_Parms GetPhysicsName_Parms;

	this->ProcessEvent ( pFnGetPhysicsName, &GetPhysicsName_Parms, NULL );

	return GetPhysicsName_Parms.ReturnValue;
};

// Function Engine.Actor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 6975 ];

	AActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Actor.GetDebugName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetDebugName ( )
{
	static UFunction* pFnGetDebugName = NULL;

	if ( ! pFnGetDebugName )
		pFnGetDebugName = (UFunction*) UObject::GObjObjects()->Data[ 6973 ];

	AActor_execGetDebugName_Parms GetDebugName_Parms;

	this->ProcessEvent ( pFnGetDebugName, &GetDebugName_Parms, NULL );

	return GetDebugName_Parms.ReturnValue;
};

// Function Engine.Actor.MatchStarting
// [0x00020000] 
// Parameters infos:

void AActor::MatchStarting ( )
{
	static UFunction* pFnMatchStarting = NULL;

	if ( ! pFnMatchStarting )
		pFnMatchStarting = (UFunction*) UObject::GObjObjects()->Data[ 6972 ];

	AActor_execMatchStarting_Parms MatchStarting_Parms;

	this->ProcessEvent ( pFnMatchStarting, &MatchStarting_Parms, NULL );
};

// Function Engine.Actor.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 6967 ];

	AActor_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Actor.ReplaceText
// [0x00422002] 
// Parameters infos:
// struct FString                 Replace                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 With                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AActor::ReplaceText ( struct FString Replace, struct FString With, struct FString* Text )
{
	static UFunction* pFnReplaceText = NULL;

	if ( ! pFnReplaceText )
		pFnReplaceText = (UFunction*) UObject::GObjObjects()->Data[ 6961 ];

	AActor_execReplaceText_Parms ReplaceText_Parms;
	memcpy ( &ReplaceText_Parms.Replace, &Replace, 0xC );
	memcpy ( &ReplaceText_Parms.With, &With, 0xC );

	this->ProcessEvent ( pFnReplaceText, &ReplaceText_Parms, NULL );

	if ( Text )
		memcpy ( Text, &ReplaceText_Parms.Text, 0xC );
};

// Function Engine.Actor.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 6959 ];

	AActor_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Actor.GetItemName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 FullName                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString AActor::GetItemName ( struct FString FullName )
{
	static UFunction* pFnGetItemName = NULL;

	if ( ! pFnGetItemName )
		pFnGetItemName = (UFunction*) UObject::GObjObjects()->Data[ 6955 ];

	AActor_execGetItemName_Parms GetItemName_Parms;
	memcpy ( &GetItemName_Parms.FullName, &FullName, 0xC );

	this->ProcessEvent ( pFnGetItemName, &GetItemName_Parms, NULL );

	return GetItemName_Parms.ReturnValue;
};

// Function Engine.Actor.CalcCamera
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool AActor::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 6946 ];

	AActor_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.Actor.EndViewTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AActor::eventEndViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnEndViewTarget = NULL;

	if ( ! pFnEndViewTarget )
		pFnEndViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 6944 ];

	AActor_eventEndViewTarget_Parms EndViewTarget_Parms;
	EndViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnEndViewTarget, &EndViewTarget_Parms, NULL );
};

// Function Engine.Actor.BecomeViewTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AActor::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 6942 ];

	AActor_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Engine.Actor.CheckForErrors
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = (UFunction*) UObject::GObjObjects()->Data[ 6940 ];

	AActor_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.Actor.DebugFreezeGame
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ActorToLookAt                  ( CPF_OptionalParm | CPF_Parm )

void AActor::eventDebugFreezeGame ( class AActor* ActorToLookAt )
{
	static UFunction* pFnDebugFreezeGame = NULL;

	if ( ! pFnDebugFreezeGame )
		pFnDebugFreezeGame = (UFunction*) UObject::GObjObjects()->Data[ 6938 ];

	AActor_eventDebugFreezeGame_Parms DebugFreezeGame_Parms;
	DebugFreezeGame_Parms.ActorToLookAt = ActorToLookAt;

	this->ProcessEvent ( pFnDebugFreezeGame, &DebugFreezeGame_Parms, NULL );
};

// Function Engine.Actor.GetGravityAcceleration
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AActor::GetGravityAcceleration ( )
{
	static UFunction* pFnGetGravityAcceleration = NULL;

	if ( ! pFnGetGravityAcceleration )
		pFnGetGravityAcceleration = (UFunction*) UObject::GObjObjects()->Data[ 6936 ];

	AActor_execGetGravityAcceleration_Parms GetGravityAcceleration_Parms;

	pFnGetGravityAcceleration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityAcceleration, &GetGravityAcceleration_Parms, NULL );

	pFnGetGravityAcceleration->FunctionFlags |= 0x400;

	return GetGravityAcceleration_Parms.ReturnValue;
};

// Function Engine.Actor.GetGravityDirection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AActor::GetGravityDirection ( )
{
	static UFunction* pFnGetGravityDirection = NULL;

	if ( ! pFnGetGravityDirection )
		pFnGetGravityDirection = (UFunction*) UObject::GObjObjects()->Data[ 6934 ];

	AActor_execGetGravityDirection_Parms GetGravityDirection_Parms;

	pFnGetGravityDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityDirection, &GetGravityDirection_Parms, NULL );

	pFnGetGravityDirection->FunctionFlags |= 0x400;

	return GetGravityDirection_Parms.ReturnValue;
};

// Function Engine.Actor.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 6932 ];

	AActor_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.Actor.CheckHitInfo
// [0x00C20103] ( FUNC_Final )
// Parameters infos:
// class UPrimitiveComponent*     FallBackComponent              ( CPF_Parm | CPF_EditInline )
// struct FVector                 Dir                            ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitLocation                ( CPF_Parm | CPF_OutParm )

void AActor::CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation )
{
	static UFunction* pFnCheckHitInfo = NULL;

	if ( ! pFnCheckHitInfo )
		pFnCheckHitInfo = (UFunction*) UObject::GObjObjects()->Data[ 6921 ];

	AActor_execCheckHitInfo_Parms CheckHitInfo_Parms;
	CheckHitInfo_Parms.FallBackComponent = FallBackComponent;
	memcpy ( &CheckHitInfo_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnCheckHitInfo, &CheckHitInfo_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &CheckHitInfo_Parms.HitInfo, 0x1C );

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &CheckHitInfo_Parms.out_HitLocation, 0xC );
};

// Function Engine.Actor.TakeRadiusDamage
// [0x00824102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 6904 ];

	AActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Actor.HealDamage
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool AActor::eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 6899 ];

	AActor_eventHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Actor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AActor::eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 6888 ];

	AActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Actor.KilledBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void AActor::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = (UFunction*) UObject::GObjObjects()->Data[ 6886 ];

	AActor_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Actor.HurtRadius
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AActor::HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 6862 ];

	AActor_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.BaseDamage = BaseDamage;
	HurtRadius_Parms.DamageRadius = DamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Actor.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )

bool AActor::StopsProjectile ( class AActor* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 6857 ];

	AActor_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Actor.NotifySkelControlBeyondLimit
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USkelControlLookAt*      LookAt                         ( CPF_Parm )

void AActor::eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt )
{
	static UFunction* pFnNotifySkelControlBeyondLimit = NULL;

	if ( ! pFnNotifySkelControlBeyondLimit )
		pFnNotifySkelControlBeyondLimit = (UFunction*) UObject::GObjObjects()->Data[ 6855 ];

	AActor_eventNotifySkelControlBeyondLimit_Parms NotifySkelControlBeyondLimit_Parms;
	NotifySkelControlBeyondLimit_Parms.LookAt = LookAt;

	this->ProcessEvent ( pFnNotifySkelControlBeyondLimit, &NotifySkelControlBeyondLimit_Parms, NULL );
};

// Function Engine.Actor.ConstraintBrokenNotify
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ConOwner                       ( CPF_Parm )
// class URB_ConstraintSetup*     ConSetup                       ( CPF_Parm )
// class URB_ConstraintInstance*  ConInstance                    ( CPF_Parm )

void AActor::eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance )
{
	static UFunction* pFnConstraintBrokenNotify = NULL;

	if ( ! pFnConstraintBrokenNotify )
		pFnConstraintBrokenNotify = (UFunction*) UObject::GObjObjects()->Data[ 6851 ];

	AActor_eventConstraintBrokenNotify_Parms ConstraintBrokenNotify_Parms;
	ConstraintBrokenNotify_Parms.ConOwner = ConOwner;
	ConstraintBrokenNotify_Parms.ConSetup = ConSetup;
	ConstraintBrokenNotify_Parms.ConInstance = ConInstance;

	this->ProcessEvent ( pFnConstraintBrokenNotify, &ConstraintBrokenNotify_Parms, NULL );
};

// Function Engine.Actor.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 6848 ];

	AActor_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.Actor.PostBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 6847 ];

	AActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedTeamMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeamMessage = NULL;

	if ( ! pFnBroadcastLocalizedTeamMessage )
		pFnBroadcastLocalizedTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 6840 ];

	AActor_eventBroadcastLocalizedTeamMessage_Parms BroadcastLocalizedTeamMessage_Parms;
	BroadcastLocalizedTeamMessage_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeamMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedTeamMessage_Parms.Switch = Switch;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeamMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeamMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeamMessage, &BroadcastLocalizedTeamMessage_Parms, NULL );
};

// Function Engine.Actor.BroadcastLocalizedMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AActor::eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedMessage = NULL;

	if ( ! pFnBroadcastLocalizedMessage )
		pFnBroadcastLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 6833 ];

	AActor_eventBroadcastLocalizedMessage_Parms BroadcastLocalizedMessage_Parms;
	BroadcastLocalizedMessage_Parms.InMessageClass = InMessageClass;
	BroadcastLocalizedMessage_Parms.Switch = Switch;
	BroadcastLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedMessage, &BroadcastLocalizedMessage_Parms, NULL );
};

// Function Engine.Actor.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 6824 ];

	AActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Actor.GetALocalPlayerController
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* AActor::GetALocalPlayerController ( )
{
	static UFunction* pFnGetALocalPlayerController = NULL;

	if ( ! pFnGetALocalPlayerController )
		pFnGetALocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 6822 ];

	AActor_execGetALocalPlayerController_Parms GetALocalPlayerController_Parms;

	pFnGetALocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetALocalPlayerController, &GetALocalPlayerController_Parms, NULL );

	pFnGetALocalPlayerController->FunctionFlags |= 0x400;

	return GetALocalPlayerController_Parms.ReturnValue;
};

// Function Engine.Actor.LocalPlayerControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm | CPF_OutParm )

void AActor::LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC )
{
	static UFunction* pFnLocalPlayerControllers = NULL;

	if ( ! pFnLocalPlayerControllers )
		pFnLocalPlayerControllers = (UFunction*) UObject::GObjObjects()->Data[ 6819 ];

	AActor_execLocalPlayerControllers_Parms LocalPlayerControllers_Parms;
	LocalPlayerControllers_Parms.BaseClass = BaseClass;

	pFnLocalPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalPlayerControllers, &LocalPlayerControllers_Parms, NULL );

	pFnLocalPlayerControllers->FunctionFlags |= 0x400;

	if ( PC )
		*PC = LocalPlayerControllers_Parms.PC;
};

// Function Engine.Actor.AllOwnedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void AActor::AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAllOwnedComponents = NULL;

	if ( ! pFnAllOwnedComponents )
		pFnAllOwnedComponents = (UFunction*) UObject::GObjObjects()->Data[ 6816 ];

	AActor_execAllOwnedComponents_Parms AllOwnedComponents_Parms;
	AllOwnedComponents_Parms.BaseClass = BaseClass;

	pFnAllOwnedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllOwnedComponents, &AllOwnedComponents_Parms, NULL );

	pFnAllOwnedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AllOwnedComponents_Parms.OutComponent;
};

// Function Engine.Actor.ComponentList
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         out_Component                  ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void AActor::ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component )
{
	static UFunction* pFnComponentList = NULL;

	if ( ! pFnComponentList )
		pFnComponentList = (UFunction*) UObject::GObjObjects()->Data[ 6813 ];

	AActor_execComponentList_Parms ComponentList_Parms;
	ComponentList_Parms.BaseClass = BaseClass;

	pFnComponentList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComponentList, &ComponentList_Parms, NULL );

	pFnComponentList->FunctionFlags |= 0x400;

	if ( out_Component )
		*out_Component = ComponentList_Parms.out_Component;
};

// Function Engine.Actor.OverlappingActors
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  out_Actor                      ( CPF_Parm | CPF_OutParm )

void AActor::OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor )
{
	static UFunction* pFnOverlappingActors = NULL;

	if ( ! pFnOverlappingActors )
		pFnOverlappingActors = (UFunction*) UObject::GObjObjects()->Data[ 6807 ];

	AActor_execOverlappingActors_Parms OverlappingActors_Parms;
	OverlappingActors_Parms.BaseClass = BaseClass;
	OverlappingActors_Parms.Radius = Radius;
	memcpy ( &OverlappingActors_Parms.Loc, &Loc, 0xC );
	OverlappingActors_Parms.bIgnoreHidden = bIgnoreHidden;

	pFnOverlappingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverlappingActors, &OverlappingActors_Parms, NULL );

	pFnOverlappingActors->FunctionFlags |= 0x400;

	if ( out_Actor )
		*out_Actor = OverlappingActors_Parms.out_Actor;
};

// Function Engine.Actor.CollidingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0141]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseOverlapCheck               ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnCollidingActors = NULL;

	if ( ! pFnCollidingActors )
		pFnCollidingActors = (UFunction*) UObject::GObjObjects()->Data[ 6799 ];

	AActor_execCollidingActors_Parms CollidingActors_Parms;
	CollidingActors_Parms.BaseClass = BaseClass;
	CollidingActors_Parms.Radius = Radius;
	memcpy ( &CollidingActors_Parms.Loc, &Loc, 0xC );
	CollidingActors_Parms.bUseOverlapCheck = bUseOverlapCheck;
	CollidingActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnCollidingActors->iNative;
	pFnCollidingActors->iNative = 0;

	pFnCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCollidingActors, &CollidingActors_Parms, NULL );

	pFnCollidingActors->FunctionFlags |= 0x400;

	pFnCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = CollidingActors_Parms.Actor;

	if ( HitInfo )
		memcpy ( HitInfo, &CollidingActors_Parms.HitInfo, 0x1C );
};

// Function Engine.Actor.VisibleCollidingActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0138]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreHidden                  ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceActors                   ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnVisibleCollidingActors = NULL;

	if ( ! pFnVisibleCollidingActors )
		pFnVisibleCollidingActors = (UFunction*) UObject::GObjObjects()->Data[ 6789 ];

	AActor_execVisibleCollidingActors_Parms VisibleCollidingActors_Parms;
	VisibleCollidingActors_Parms.BaseClass = BaseClass;
	VisibleCollidingActors_Parms.Radius = Radius;
	memcpy ( &VisibleCollidingActors_Parms.Loc, &Loc, 0xC );
	VisibleCollidingActors_Parms.bIgnoreHidden = bIgnoreHidden;
	memcpy ( &VisibleCollidingActors_Parms.Extent, &Extent, 0xC );
	VisibleCollidingActors_Parms.bTraceActors = bTraceActors;
	VisibleCollidingActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnVisibleCollidingActors->iNative;
	pFnVisibleCollidingActors->iNative = 0;

	pFnVisibleCollidingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleCollidingActors, &VisibleCollidingActors_Parms, NULL );

	pFnVisibleCollidingActors->FunctionFlags |= 0x400;

	pFnVisibleCollidingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleCollidingActors_Parms.Actor;

	if ( HitInfo )
		memcpy ( HitInfo, &VisibleCollidingActors_Parms.HitInfo, 0x1C );
};

// Function Engine.Actor.VisibleActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0137]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Loc                            ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor )
{
	static UFunction* pFnVisibleActors = NULL;

	if ( ! pFnVisibleActors )
		pFnVisibleActors = (UFunction*) UObject::GObjObjects()->Data[ 6784 ];

	AActor_execVisibleActors_Parms VisibleActors_Parms;
	VisibleActors_Parms.BaseClass = BaseClass;
	VisibleActors_Parms.Radius = Radius;
	memcpy ( &VisibleActors_Parms.Loc, &Loc, 0xC );

	unsigned short NativeIndex = pFnVisibleActors->iNative;
	pFnVisibleActors->iNative = 0;

	pFnVisibleActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVisibleActors, &VisibleActors_Parms, NULL );

	pFnVisibleActors->FunctionFlags |= 0x400;

	pFnVisibleActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = VisibleActors_Parms.Actor;
};

// Function Engine.Actor.TraceActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0135]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Start                          ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLoc                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNorm                        ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AActor::TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceActors = NULL;

	if ( ! pFnTraceActors )
		pFnTraceActors = (UFunction*) UObject::GObjObjects()->Data[ 6774 ];

	AActor_execTraceActors_Parms TraceActors_Parms;
	TraceActors_Parms.BaseClass = BaseClass;
	memcpy ( &TraceActors_Parms.End, &End, 0xC );
	memcpy ( &TraceActors_Parms.Start, &Start, 0xC );
	memcpy ( &TraceActors_Parms.Extent, &Extent, 0xC );
	TraceActors_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned short NativeIndex = pFnTraceActors->iNative;
	pFnTraceActors->iNative = 0;

	pFnTraceActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceActors, &TraceActors_Parms, NULL );

	pFnTraceActors->FunctionFlags |= 0x400;

	pFnTraceActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TraceActors_Parms.Actor;

	if ( HitLoc )
		memcpy ( HitLoc, &TraceActors_Parms.HitLoc, 0xC );

	if ( HitNorm )
		memcpy ( HitNorm, &TraceActors_Parms.HitNorm, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceActors_Parms.HitInfo, 0x1C );
};

// Function Engine.Actor.TouchingActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0133]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::TouchingActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnTouchingActors = NULL;

	if ( ! pFnTouchingActors )
		pFnTouchingActors = (UFunction*) UObject::GObjObjects()->Data[ 6771 ];

	AActor_execTouchingActors_Parms TouchingActors_Parms;
	TouchingActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnTouchingActors->iNative;
	pFnTouchingActors->iNative = 0;

	pFnTouchingActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchingActors, &TouchingActors_Parms, NULL );

	pFnTouchingActors->FunctionFlags |= 0x400;

	pFnTouchingActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = TouchingActors_Parms.Actor;
};

// Function Engine.Actor.BasedActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0132]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::BasedActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnBasedActors = NULL;

	if ( ! pFnBasedActors )
		pFnBasedActors = (UFunction*) UObject::GObjObjects()->Data[ 6768 ];

	AActor_execBasedActors_Parms BasedActors_Parms;
	BasedActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnBasedActors->iNative;
	pFnBasedActors->iNative = 0;

	pFnBasedActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBasedActors, &BasedActors_Parms, NULL );

	pFnBasedActors->FunctionFlags |= 0x400;

	pFnBasedActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = BasedActors_Parms.Actor;
};

// Function Engine.Actor.ChildActors
// [0x00420405] ( FUNC_Final | FUNC_Native ) iNative [0x0131]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::ChildActors ( class UClass* BaseClass, class AActor** Actor )
{
	static UFunction* pFnChildActors = NULL;

	if ( ! pFnChildActors )
		pFnChildActors = (UFunction*) UObject::GObjObjects()->Data[ 6765 ];

	AActor_execChildActors_Parms ChildActors_Parms;
	ChildActors_Parms.BaseClass = BaseClass;

	unsigned short NativeIndex = pFnChildActors->iNative;
	pFnChildActors->iNative = 0;

	pFnChildActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChildActors, &ChildActors_Parms, NULL );

	pFnChildActors->FunctionFlags |= 0x400;

	pFnChildActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = ChildActors_Parms.Actor;
};

// Function Engine.Actor.DynamicActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0139]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor )
{
	static UFunction* pFnDynamicActors = NULL;

	if ( ! pFnDynamicActors )
		pFnDynamicActors = (UFunction*) UObject::GObjObjects()->Data[ 6761 ];

	AActor_execDynamicActors_Parms DynamicActors_Parms;
	DynamicActors_Parms.BaseClass = BaseClass;
	DynamicActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnDynamicActors->iNative;
	pFnDynamicActors->iNative = 0;

	pFnDynamicActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDynamicActors, &DynamicActors_Parms, NULL );

	pFnDynamicActors->FunctionFlags |= 0x400;

	pFnDynamicActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = DynamicActors_Parms.Actor;
};

// Function Engine.Actor.AllActors
// [0x00424405] ( FUNC_Final | FUNC_Native ) iNative [0x0130]
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UClass*                  InterfaceClass                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm | CPF_OutParm )

void AActor::AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor )
{
	static UFunction* pFnAllActors = NULL;

	if ( ! pFnAllActors )
		pFnAllActors = (UFunction*) UObject::GObjObjects()->Data[ 6757 ];

	AActor_execAllActors_Parms AllActors_Parms;
	AllActors_Parms.BaseClass = BaseClass;
	AllActors_Parms.InterfaceClass = InterfaceClass;

	unsigned short NativeIndex = pFnAllActors->iNative;
	pFnAllActors->iNative = 0;

	pFnAllActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllActors, &AllActors_Parms, NULL );

	pFnAllActors->FunctionFlags |= 0x400;

	pFnAllActors->iNative = NativeIndex;

	if ( Actor )
		*Actor = AllActors_Parms.Actor;
};

// Function Engine.Actor.GetURLMap
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0223]
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AActor::GetURLMap ( )
{
	static UFunction* pFnGetURLMap = NULL;

	if ( ! pFnGetURLMap )
		pFnGetURLMap = (UFunction*) UObject::GObjObjects()->Data[ 6755 ];

	AActor_execGetURLMap_Parms GetURLMap_Parms;

	unsigned short NativeIndex = pFnGetURLMap->iNative;
	pFnGetURLMap->iNative = 0;

	pFnGetURLMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetURLMap, &GetURLMap_Parms, NULL );

	pFnGetURLMap->FunctionFlags |= 0x400;

	pFnGetURLMap->iNative = NativeIndex;

	return GetURLMap_Parms.ReturnValue;
};

// Function Engine.Actor.PostTeleport
// [0x00020000] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void AActor::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = (UFunction*) UObject::GObjObjects()->Data[ 6753 ];

	AActor_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.Actor.PreTeleport
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ATeleporter*             InTeleporter                   ( CPF_Parm )

bool AActor::PreTeleport ( class ATeleporter* InTeleporter )
{
	static UFunction* pFnPreTeleport = NULL;

	if ( ! pFnPreTeleport )
		pFnPreTeleport = (UFunction*) UObject::GObjObjects()->Data[ 6750 ];

	AActor_execPreTeleport_Parms PreTeleport_Parms;
	PreTeleport_Parms.InTeleporter = InTeleporter;

	this->ProcessEvent ( pFnPreTeleport, &PreTeleport_Parms, NULL );

	return PreTeleport_Parms.ReturnValue;
};

// Function Engine.Actor.GetDestination
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

struct FVector AActor::GetDestination ( class AController* C )
{
	static UFunction* pFnGetDestination = NULL;

	if ( ! pFnGetDestination )
		pFnGetDestination = (UFunction*) UObject::GObjObjects()->Data[ 6747 ];

	AActor_execGetDestination_Parms GetDestination_Parms;
	GetDestination_Parms.C = C;

	pFnGetDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestination, &GetDestination_Parms, NULL );

	pFnGetDestination->FunctionFlags |= 0x400;

	return GetDestination_Parms.ReturnValue;
};

// Function Engine.Actor.CalculateMinSpeedTrajectory
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// float                          MaxTossSpeed                   ( CPF_Parm )
// float                          MinTossSpeed                   ( CPF_Parm )
// struct FVector                 CollisionSize                  ( CPF_OptionalParm | CPF_Parm )
// float                          TerminalVelocity               ( CPF_OptionalParm | CPF_Parm )
// float                          GravityZ                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTraceUp                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 out_Velocity                   ( CPF_Parm | CPF_OutParm )

bool AActor::CalculateMinSpeedTrajectory ( struct FVector End, struct FVector Start, float MaxTossSpeed, float MinTossSpeed, struct FVector CollisionSize, float TerminalVelocity, float GravityZ, unsigned long bOnlyTraceUp, struct FVector* out_Velocity )
{
	static UFunction* pFnCalculateMinSpeedTrajectory = NULL;

	if ( ! pFnCalculateMinSpeedTrajectory )
		pFnCalculateMinSpeedTrajectory = (UFunction*) UObject::GObjObjects()->Data[ 6736 ];

	AActor_execCalculateMinSpeedTrajectory_Parms CalculateMinSpeedTrajectory_Parms;
	memcpy ( &CalculateMinSpeedTrajectory_Parms.End, &End, 0xC );
	memcpy ( &CalculateMinSpeedTrajectory_Parms.Start, &Start, 0xC );
	CalculateMinSpeedTrajectory_Parms.MaxTossSpeed = MaxTossSpeed;
	CalculateMinSpeedTrajectory_Parms.MinTossSpeed = MinTossSpeed;
	memcpy ( &CalculateMinSpeedTrajectory_Parms.CollisionSize, &CollisionSize, 0xC );
	CalculateMinSpeedTrajectory_Parms.TerminalVelocity = TerminalVelocity;
	CalculateMinSpeedTrajectory_Parms.GravityZ = GravityZ;
	CalculateMinSpeedTrajectory_Parms.bOnlyTraceUp = bOnlyTraceUp;

	pFnCalculateMinSpeedTrajectory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateMinSpeedTrajectory, &CalculateMinSpeedTrajectory_Parms, NULL );

	pFnCalculateMinSpeedTrajectory->FunctionFlags |= 0x400;

	if ( out_Velocity )
		memcpy ( out_Velocity, &CalculateMinSpeedTrajectory_Parms.out_Velocity, 0xC );

	return CalculateMinSpeedTrajectory_Parms.ReturnValue;
};

// Function Engine.Actor.SuggestTossVelocity
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// float                          TossSpeed                      ( CPF_Parm )
// float                          BaseTossZ                      ( CPF_OptionalParm | CPF_Parm )
// float                          DesiredZPct                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 CollisionSize                  ( CPF_OptionalParm | CPF_Parm )
// float                          TerminalVelocity               ( CPF_OptionalParm | CPF_Parm )
// float                          OverrideGravityZ               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTraceUp                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 TossVelocity                   ( CPF_Parm | CPF_OutParm )

bool AActor::SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity )
{
	static UFunction* pFnSuggestTossVelocity = NULL;

	if ( ! pFnSuggestTossVelocity )
		pFnSuggestTossVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6724 ];

	AActor_execSuggestTossVelocity_Parms SuggestTossVelocity_Parms;
	memcpy ( &SuggestTossVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestTossVelocity_Parms.Start, &Start, 0xC );
	SuggestTossVelocity_Parms.TossSpeed = TossSpeed;
	SuggestTossVelocity_Parms.BaseTossZ = BaseTossZ;
	SuggestTossVelocity_Parms.DesiredZPct = DesiredZPct;
	memcpy ( &SuggestTossVelocity_Parms.CollisionSize, &CollisionSize, 0xC );
	SuggestTossVelocity_Parms.TerminalVelocity = TerminalVelocity;
	SuggestTossVelocity_Parms.OverrideGravityZ = OverrideGravityZ;
	SuggestTossVelocity_Parms.bOnlyTraceUp = bOnlyTraceUp;

	pFnSuggestTossVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestTossVelocity, &SuggestTossVelocity_Parms, NULL );

	pFnSuggestTossVelocity->FunctionFlags |= 0x400;

	if ( TossVelocity )
		memcpy ( TossVelocity, &SuggestTossVelocity_Parms.TossVelocity, 0xC );

	return SuggestTossVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.PlayerCanSeeMe
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0214]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceLOSCheck                 ( CPF_OptionalParm | CPF_Parm )

bool AActor::PlayerCanSeeMe ( unsigned long bForceLOSCheck )
{
	static UFunction* pFnPlayerCanSeeMe = NULL;

	if ( ! pFnPlayerCanSeeMe )
		pFnPlayerCanSeeMe = (UFunction*) UObject::GObjObjects()->Data[ 6721 ];

	AActor_execPlayerCanSeeMe_Parms PlayerCanSeeMe_Parms;
	PlayerCanSeeMe_Parms.bForceLOSCheck = bForceLOSCheck;

	unsigned short NativeIndex = pFnPlayerCanSeeMe->iNative;
	pFnPlayerCanSeeMe->iNative = 0;

	pFnPlayerCanSeeMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayerCanSeeMe, &PlayerCanSeeMe_Parms, NULL );

	pFnPlayerCanSeeMe->FunctionFlags |= 0x400;

	pFnPlayerCanSeeMe->iNative = NativeIndex;

	return PlayerCanSeeMe_Parms.ReturnValue;
};

// Function Engine.Actor.MakeNoise
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0200]
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AActor::MakeNoise ( float Loudness, struct FName NoiseType )
{
	static UFunction* pFnMakeNoise = NULL;

	if ( ! pFnMakeNoise )
		pFnMakeNoise = (UFunction*) UObject::GObjObjects()->Data[ 6718 ];

	AActor_execMakeNoise_Parms MakeNoise_Parms;
	MakeNoise_Parms.Loudness = Loudness;
	memcpy ( &MakeNoise_Parms.NoiseType, &NoiseType, 0x8 );

	unsigned short NativeIndex = pFnMakeNoise->iNative;
	pFnMakeNoise->iNative = 0;

	pFnMakeNoise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeNoise, &MakeNoise_Parms, NULL );

	pFnMakeNoise->FunctionFlags |= 0x400;

	pFnMakeNoise->iNative = NativeIndex;
};

// Function Engine.Actor.ActivateOcclusion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInActivate                    ( CPF_Parm )

void AActor::ActivateOcclusion ( unsigned long bInActivate )
{
	static UFunction* pFnActivateOcclusion = NULL;

	if ( ! pFnActivateOcclusion )
		pFnActivateOcclusion = (UFunction*) UObject::GObjObjects()->Data[ 6716 ];

	AActor_execActivateOcclusion_Parms ActivateOcclusion_Parms;
	ActivateOcclusion_Parms.bInActivate = bInActivate;

	pFnActivateOcclusion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateOcclusion, &ActivateOcclusion_Parms, NULL );

	pFnActivateOcclusion->FunctionFlags |= 0x400;
};

// Function Engine.Actor.PostTrigger
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InTrigger                      ( CPF_Parm )

void AActor::PostTrigger ( struct FName InTrigger )
{
	static UFunction* pFnPostTrigger = NULL;

	if ( ! pFnPostTrigger )
		pFnPostTrigger = (UFunction*) UObject::GObjObjects()->Data[ 6714 ];

	AActor_execPostTrigger_Parms PostTrigger_Parms;
	memcpy ( &PostTrigger_Parms.InTrigger, &InTrigger, 0x8 );

	pFnPostTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostTrigger, &PostTrigger_Parms, NULL );

	pFnPostTrigger->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetSwitch
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InSwitchGroup                  ( CPF_Parm )
// struct FName                   InSwitch                       ( CPF_Parm )

void AActor::SetSwitch ( struct FName InSwitchGroup, struct FName InSwitch )
{
	static UFunction* pFnSetSwitch = NULL;

	if ( ! pFnSetSwitch )
		pFnSetSwitch = (UFunction*) UObject::GObjObjects()->Data[ 6711 ];

	AActor_execSetSwitch_Parms SetSwitch_Parms;
	memcpy ( &SetSwitch_Parms.InSwitchGroup, &InSwitchGroup, 0x8 );
	memcpy ( &SetSwitch_Parms.InSwitch, &InSwitch, 0x8 );

	pFnSetSwitch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSwitch, &SetSwitch_Parms, NULL );

	pFnSetSwitch->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InStateGroup                   ( CPF_Parm )
// struct FName                   InState                        ( CPF_Parm )

void AActor::SetState ( struct FName InStateGroup, struct FName InState )
{
	static UFunction* pFnSetState = NULL;

	if ( ! pFnSetState )
		pFnSetState = (UFunction*) UObject::GObjObjects()->Data[ 6708 ];

	AActor_execSetState_Parms SetState_Parms;
	memcpy ( &SetState_Parms.InStateGroup, &InStateGroup, 0x8 );
	memcpy ( &SetState_Parms.InState, &InState, 0x8 );

	pFnSetState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetState, &SetState_Parms, NULL );

	pFnSetState->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetRTPCValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InRTPC                         ( CPF_Parm )
// float                          TargetValue                    ( CPF_Parm )

void AActor::SetRTPCValue ( struct FName InRTPC, float TargetValue )
{
	static UFunction* pFnSetRTPCValue = NULL;

	if ( ! pFnSetRTPCValue )
		pFnSetRTPCValue = (UFunction*) UObject::GObjObjects()->Data[ 6705 ];

	AActor_execSetRTPCValue_Parms SetRTPCValue_Parms;
	memcpy ( &SetRTPCValue_Parms.InRTPC, &InRTPC, 0x8 );
	SetRTPCValue_Parms.TargetValue = TargetValue;

	pFnSetRTPCValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRTPCValue, &SetRTPCValue_Parms, NULL );

	pFnSetRTPCValue->FunctionFlags |= 0x400;
};

// Function Engine.Actor.PostAkEventOnBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAkEvent*                InAkEvent                      ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

void AActor::PostAkEventOnBone ( class UAkEvent* InAkEvent, struct FName BoneName )
{
	static UFunction* pFnPostAkEventOnBone = NULL;

	if ( ! pFnPostAkEventOnBone )
		pFnPostAkEventOnBone = (UFunction*) UObject::GObjObjects()->Data[ 6702 ];

	AActor_execPostAkEventOnBone_Parms PostAkEventOnBone_Parms;
	PostAkEventOnBone_Parms.InAkEvent = InAkEvent;
	memcpy ( &PostAkEventOnBone_Parms.BoneName, &BoneName, 0x8 );

	pFnPostAkEventOnBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostAkEventOnBone, &PostAkEventOnBone_Parms, NULL );

	pFnPostAkEventOnBone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.PostAkEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAkEvent*                InAkEvent                      ( CPF_Parm )

void AActor::PostAkEvent ( class UAkEvent* InAkEvent )
{
	static UFunction* pFnPostAkEvent = NULL;

	if ( ! pFnPostAkEvent )
		pFnPostAkEvent = (UFunction*) UObject::GObjObjects()->Data[ 6700 ];

	AActor_execPostAkEvent_Parms PostAkEvent_Parms;
	PostAkEvent_Parms.InAkEvent = InAkEvent;

	pFnPostAkEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostAkEvent, &PostAkEvent_Parms, NULL );

	pFnPostAkEvent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.PlaySoundBase
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAkBaseSoundObject*      InSoundCue                     ( CPF_Parm )
// unsigned long                  bNotReplicated                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToOwner                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToRelevant               ( CPF_OptionalParm | CPF_Parm )

void AActor::PlaySoundBase ( class UAkBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant )
{
	static UFunction* pFnPlaySoundBase = NULL;

	if ( ! pFnPlaySoundBase )
		pFnPlaySoundBase = (UFunction*) UObject::GObjObjects()->Data[ 6693 ];

	AActor_execPlaySoundBase_Parms PlaySoundBase_Parms;
	PlaySoundBase_Parms.InSoundCue = InSoundCue;
	PlaySoundBase_Parms.bNotReplicated = bNotReplicated;
	PlaySoundBase_Parms.bNoRepToOwner = bNoRepToOwner;
	PlaySoundBase_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	memcpy ( &PlaySoundBase_Parms.SoundLocation, &SoundLocation, 0xC );
	PlaySoundBase_Parms.bNoRepToRelevant = bNoRepToRelevant;

	pFnPlaySoundBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySoundBase, &PlaySoundBase_Parms, NULL );

	pFnPlaySoundBase->FunctionFlags |= 0x400;
};

// Function Engine.Actor.PlayAkEvent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAkEvent*                InSoundCue                     ( CPF_Parm )
// unsigned long                  bNotReplicated                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToOwner                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToRelevant               ( CPF_OptionalParm | CPF_Parm )

void AActor::PlayAkEvent ( class UAkEvent* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant )
{
	static UFunction* pFnPlayAkEvent = NULL;

	if ( ! pFnPlayAkEvent )
		pFnPlayAkEvent = (UFunction*) UObject::GObjObjects()->Data[ 6686 ];

	AActor_execPlayAkEvent_Parms PlayAkEvent_Parms;
	PlayAkEvent_Parms.InSoundCue = InSoundCue;
	PlayAkEvent_Parms.bNotReplicated = bNotReplicated;
	PlayAkEvent_Parms.bNoRepToOwner = bNoRepToOwner;
	PlayAkEvent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	memcpy ( &PlayAkEvent_Parms.SoundLocation, &SoundLocation, 0xC );
	PlayAkEvent_Parms.bNoRepToRelevant = bNoRepToRelevant;

	pFnPlayAkEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAkEvent, &PlayAkEvent_Parms, NULL );

	pFnPlayAkEvent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.PlaySound
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bReplicated                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToOwner                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoRepToRelevant               ( CPF_OptionalParm | CPF_Parm )

void AActor::PlaySound ( class USoundCue* InSoundCue, unsigned long bReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 6679 ];

	AActor_execPlaySound_Parms PlaySound_Parms;
	PlaySound_Parms.InSoundCue = InSoundCue;
	PlaySound_Parms.bReplicated = bReplicated;
	PlaySound_Parms.bNoRepToOwner = bNoRepToOwner;
	PlaySound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	memcpy ( &PlaySound_Parms.SoundLocation, &SoundLocation, 0xC );
	PlaySound_Parms.bNoRepToRelevant = bNoRepToRelevant;

	pFnPlaySound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );

	pFnPlaySound->FunctionFlags |= 0x400;
};

// Function Engine.Actor.CreateAudioComponent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               InSoundCue                     ( CPF_Parm )
// unsigned long                  bPlay                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAttachToSelf                  ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* AActor::CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf )
{
	static UFunction* pFnCreateAudioComponent = NULL;

	if ( ! pFnCreateAudioComponent )
		pFnCreateAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 6671 ];

	AActor_execCreateAudioComponent_Parms CreateAudioComponent_Parms;
	CreateAudioComponent_Parms.InSoundCue = InSoundCue;
	CreateAudioComponent_Parms.bPlay = bPlay;
	CreateAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	CreateAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &CreateAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );
	CreateAudioComponent_Parms.bAttachToSelf = bAttachToSelf;

	pFnCreateAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateAudioComponent, &CreateAudioComponent_Parms, NULL );

	pFnCreateAudioComponent->FunctionFlags |= 0x400;

	return CreateAudioComponent_Parms.ReturnValue;
};

// Function Engine.Actor.ResetTimerTimeDilation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   TimerName                      ( CPF_Const | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj )
{
	static UFunction* pFnResetTimerTimeDilation = NULL;

	if ( ! pFnResetTimerTimeDilation )
		pFnResetTimerTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 6668 ];

	AActor_execResetTimerTimeDilation_Parms ResetTimerTimeDilation_Parms;
	memcpy ( &ResetTimerTimeDilation_Parms.TimerName, &TimerName, 0x8 );
	ResetTimerTimeDilation_Parms.inObj = inObj;

	pFnResetTimerTimeDilation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetTimerTimeDilation, &ResetTimerTimeDilation_Parms, NULL );

	pFnResetTimerTimeDilation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ModifyTimerTimeDilation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   TimerName                      ( CPF_Const | CPF_Parm )
// float                          InTimerTimeDilation            ( CPF_Const | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj )
{
	static UFunction* pFnModifyTimerTimeDilation = NULL;

	if ( ! pFnModifyTimerTimeDilation )
		pFnModifyTimerTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 6664 ];

	AActor_execModifyTimerTimeDilation_Parms ModifyTimerTimeDilation_Parms;
	memcpy ( &ModifyTimerTimeDilation_Parms.TimerName, &TimerName, 0x8 );
	ModifyTimerTimeDilation_Parms.InTimerTimeDilation = InTimerTimeDilation;
	ModifyTimerTimeDilation_Parms.inObj = inObj;

	pFnModifyTimerTimeDilation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyTimerTimeDilation, &ModifyTimerTimeDilation_Parms, NULL );

	pFnModifyTimerTimeDilation->FunctionFlags |= 0x400;
};

// Function Engine.Actor.GetRemainingTimeForTimer
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TimerFuncName                  ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj )
{
	static UFunction* pFnGetRemainingTimeForTimer = NULL;

	if ( ! pFnGetRemainingTimeForTimer )
		pFnGetRemainingTimeForTimer = (UFunction*) UObject::GObjObjects()->Data[ 6658 ];

	AActor_execGetRemainingTimeForTimer_Parms GetRemainingTimeForTimer_Parms;
	memcpy ( &GetRemainingTimeForTimer_Parms.TimerFuncName, &TimerFuncName, 0x8 );
	GetRemainingTimeForTimer_Parms.inObj = inObj;

	this->ProcessEvent ( pFnGetRemainingTimeForTimer, &GetRemainingTimeForTimer_Parms, NULL );

	return GetRemainingTimeForTimer_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerRate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TimerFuncName                  ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerRate ( struct FName TimerFuncName, class UObject* inObj )
{
	static UFunction* pFnGetTimerRate = NULL;

	if ( ! pFnGetTimerRate )
		pFnGetTimerRate = (UFunction*) UObject::GObjObjects()->Data[ 6654 ];

	AActor_execGetTimerRate_Parms GetTimerRate_Parms;
	memcpy ( &GetTimerRate_Parms.TimerFuncName, &TimerFuncName, 0x8 );
	GetTimerRate_Parms.inObj = inObj;

	pFnGetTimerRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerRate, &GetTimerRate_Parms, NULL );

	pFnGetTimerRate->FunctionFlags |= 0x400;

	return GetTimerRate_Parms.ReturnValue;
};

// Function Engine.Actor.GetTimerCount
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

float AActor::GetTimerCount ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnGetTimerCount = NULL;

	if ( ! pFnGetTimerCount )
		pFnGetTimerCount = (UFunction*) UObject::GObjObjects()->Data[ 6650 ];

	AActor_execGetTimerCount_Parms GetTimerCount_Parms;
	memcpy ( &GetTimerCount_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	GetTimerCount_Parms.inObj = inObj;

	pFnGetTimerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerCount, &GetTimerCount_Parms, NULL );

	pFnGetTimerCount->FunctionFlags |= 0x400;

	return GetTimerCount_Parms.ReturnValue;
};

// Function Engine.Actor.IsTimerActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

bool AActor::IsTimerActive ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnIsTimerActive = NULL;

	if ( ! pFnIsTimerActive )
		pFnIsTimerActive = (UFunction*) UObject::GObjObjects()->Data[ 6646 ];

	AActor_execIsTimerActive_Parms IsTimerActive_Parms;
	memcpy ( &IsTimerActive_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	IsTimerActive_Parms.inObj = inObj;

	pFnIsTimerActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTimerActive, &IsTimerActive_Parms, NULL );

	pFnIsTimerActive->FunctionFlags |= 0x400;

	return IsTimerActive_Parms.ReturnValue;
};

// Function Engine.Actor.PauseTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnPauseTimer = NULL;

	if ( ! pFnPauseTimer )
		pFnPauseTimer = (UFunction*) UObject::GObjObjects()->Data[ 6642 ];

	AActor_execPauseTimer_Parms PauseTimer_Parms;
	PauseTimer_Parms.bPause = bPause;
	memcpy ( &PauseTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	PauseTimer_Parms.inObj = inObj;

	pFnPauseTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPauseTimer, &PauseTimer_Parms, NULL );

	pFnPauseTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClearAllTimers
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearAllTimers ( class UObject* inObj )
{
	static UFunction* pFnClearAllTimers = NULL;

	if ( ! pFnClearAllTimers )
		pFnClearAllTimers = (UFunction*) UObject::GObjObjects()->Data[ 6640 ];

	AActor_execClearAllTimers_Parms ClearAllTimers_Parms;
	ClearAllTimers_Parms.inObj = inObj;

	pFnClearAllTimers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllTimers, &ClearAllTimers_Parms, NULL );

	pFnClearAllTimers->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ClearTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::ClearTimer ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnClearTimer = NULL;

	if ( ! pFnClearTimer )
		pFnClearTimer = (UFunction*) UObject::GObjObjects()->Data[ 6637 ];

	AActor_execClearTimer_Parms ClearTimer_Parms;
	memcpy ( &ClearTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	ClearTimer_Parms.inObj = inObj;

	pFnClearTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearTimer, &ClearTimer_Parms, NULL );

	pFnClearTimer->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetStateTimer
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x011A]
// Parameters infos:
// float                          InRate                         ( CPF_Parm )
// unsigned long                  inbLoop                        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )

void AActor::SetStateTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc )
{
	static UFunction* pFnSetStateTimer = NULL;

	if ( ! pFnSetStateTimer )
		pFnSetStateTimer = (UFunction*) UObject::GObjObjects()->Data[ 6633 ];

	AActor_execSetStateTimer_Parms SetStateTimer_Parms;
	SetStateTimer_Parms.InRate = InRate;
	SetStateTimer_Parms.inbLoop = inbLoop;
	memcpy ( &SetStateTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );

	unsigned short NativeIndex = pFnSetStateTimer->iNative;
	pFnSetStateTimer->iNative = 0;

	pFnSetStateTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStateTimer, &SetStateTimer_Parms, NULL );

	pFnSetStateTimer->FunctionFlags |= 0x400;

	pFnSetStateTimer->iNative = NativeIndex;
};

// Function Engine.Actor.SetTimer
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0118]
// Parameters infos:
// float                          InRate                         ( CPF_Parm )
// unsigned long                  inbLoop                        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnSetTimer = NULL;

	if ( ! pFnSetTimer )
		pFnSetTimer = (UFunction*) UObject::GObjObjects()->Data[ 6628 ];

	AActor_execSetTimer_Parms SetTimer_Parms;
	SetTimer_Parms.InRate = InRate;
	SetTimer_Parms.inbLoop = inbLoop;
	memcpy ( &SetTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	SetTimer_Parms.inObj = inObj;

	unsigned short NativeIndex = pFnSetTimer->iNative;
	pFnSetTimer->iNative = 0;

	pFnSetTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTimer, &SetTimer_Parms, NULL );

	pFnSetTimer->FunctionFlags |= 0x400;

	pFnSetTimer->iNative = NativeIndex;
};

// Function Engine.Actor.TornOff
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 6627 ];

	AActor_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Actor.Destroy
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0117]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AActor::Destroy ( )
{
	static UFunction* pFnDestroy = NULL;

	if ( ! pFnDestroy )
		pFnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 6625 ];

	AActor_execDestroy_Parms Destroy_Parms;

	unsigned short NativeIndex = pFnDestroy->iNative;
	pFnDestroy->iNative = 0;

	pFnDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroy, &Destroy_Parms, NULL );

	pFnDestroy->FunctionFlags |= 0x400;

	pFnDestroy->iNative = NativeIndex;

	return Destroy_Parms.ReturnValue;
};

// Function Engine.Actor.Spawn
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SpawnClass                     ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  ActorTemplate                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* AActor::Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawn = NULL;

	if ( ! pFnSpawn )
		pFnSpawn = (UFunction*) UObject::GObjObjects()->Data[ 6616 ];

	AActor_execSpawn_Parms Spawn_Parms;
	Spawn_Parms.SpawnClass = SpawnClass;
	Spawn_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &Spawn_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &Spawn_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &Spawn_Parms.SpawnRotation, &SpawnRotation, 0xC );
	Spawn_Parms.ActorTemplate = ActorTemplate;
	Spawn_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawn, &Spawn_Parms, NULL );

	pFnSpawn->FunctionFlags |= 0x400;

	return Spawn_Parms.ReturnValue;
};

// Function Engine.Actor.IsBlockedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Const | CPF_Parm )

bool AActor::IsBlockedBy ( class AActor* Other )
{
	static UFunction* pFnIsBlockedBy = NULL;

	if ( ! pFnIsBlockedBy )
		pFnIsBlockedBy = (UFunction*) UObject::GObjObjects()->Data[ 6613 ];

	AActor_execIsBlockedBy_Parms IsBlockedBy_Parms;
	IsBlockedBy_Parms.Other = Other;

	pFnIsBlockedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBlockedBy, &IsBlockedBy_Parms, NULL );

	pFnIsBlockedBy->FunctionFlags |= 0x400;

	return IsBlockedBy_Parms.ReturnValue;
};

// Function Engine.Actor.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void AActor::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 6610 ];

	AActor_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Actor.GetComponentsBoundingBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBox                    ActorBox                       ( CPF_Parm | CPF_OutParm )

void AActor::GetComponentsBoundingBox ( struct FBox* ActorBox )
{
	static UFunction* pFnGetComponentsBoundingBox = NULL;

	if ( ! pFnGetComponentsBoundingBox )
		pFnGetComponentsBoundingBox = (UFunction*) UObject::GObjObjects()->Data[ 6608 ];

	AActor_execGetComponentsBoundingBox_Parms GetComponentsBoundingBox_Parms;

	pFnGetComponentsBoundingBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComponentsBoundingBox, &GetComponentsBoundingBox_Parms, NULL );

	pFnGetComponentsBoundingBox->FunctionFlags |= 0x400;

	if ( ActorBox )
		memcpy ( ActorBox, &GetComponentsBoundingBox_Parms.ActorBox, 0x1C );
};

// Function Engine.Actor.IsOverlapping
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool AActor::IsOverlapping ( class AActor* A )
{
	static UFunction* pFnIsOverlapping = NULL;

	if ( ! pFnIsOverlapping )
		pFnIsOverlapping = (UFunction*) UObject::GObjObjects()->Data[ 6605 ];

	AActor_execIsOverlapping_Parms IsOverlapping_Parms;
	IsOverlapping_Parms.A = A;

	pFnIsOverlapping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOverlapping, &IsOverlapping_Parms, NULL );

	pFnIsOverlapping->FunctionFlags |= 0x400;

	return IsOverlapping_Parms.ReturnValue;
};

// Function Engine.Actor.ContainsPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Spot                           ( CPF_Parm )

bool AActor::ContainsPoint ( struct FVector Spot )
{
	static UFunction* pFnContainsPoint = NULL;

	if ( ! pFnContainsPoint )
		pFnContainsPoint = (UFunction*) UObject::GObjObjects()->Data[ 6602 ];

	AActor_execContainsPoint_Parms ContainsPoint_Parms;
	memcpy ( &ContainsPoint_Parms.Spot, &Spot, 0xC );

	pFnContainsPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnContainsPoint, &ContainsPoint_Parms, NULL );

	pFnContainsPoint->FunctionFlags |= 0x400;

	return ContainsPoint_Parms.ReturnValue;
};

// Function Engine.Actor.FindSpot
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 BoxExtent                      ( CPF_Parm )
// struct FVector                 SpotLocation                   ( CPF_Parm | CPF_OutParm )

bool AActor::FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation )
{
	static UFunction* pFnFindSpot = NULL;

	if ( ! pFnFindSpot )
		pFnFindSpot = (UFunction*) UObject::GObjObjects()->Data[ 6598 ];

	AActor_execFindSpot_Parms FindSpot_Parms;
	memcpy ( &FindSpot_Parms.BoxExtent, &BoxExtent, 0xC );

	pFnFindSpot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSpot, &FindSpot_Parms, NULL );

	pFnFindSpot->FunctionFlags |= 0x400;

	if ( SpotLocation )
		memcpy ( SpotLocation, &FindSpot_Parms.SpotLocation, 0xC );

	return FindSpot_Parms.ReturnValue;
};

// Function Engine.Actor.TraceAllPhysicsAssetInteractions
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   out_Hits                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AActor::TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits )
{
	static UFunction* pFnTraceAllPhysicsAssetInteractions = NULL;

	if ( ! pFnTraceAllPhysicsAssetInteractions )
		pFnTraceAllPhysicsAssetInteractions = (UFunction*) UObject::GObjObjects()->Data[ 6583 ];

	AActor_execTraceAllPhysicsAssetInteractions_Parms TraceAllPhysicsAssetInteractions_Parms;
	TraceAllPhysicsAssetInteractions_Parms.SkelMeshComp = SkelMeshComp;
	memcpy ( &TraceAllPhysicsAssetInteractions_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &TraceAllPhysicsAssetInteractions_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &TraceAllPhysicsAssetInteractions_Parms.Extent, &Extent, 0xC );

	pFnTraceAllPhysicsAssetInteractions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceAllPhysicsAssetInteractions, &TraceAllPhysicsAssetInteractions_Parms, NULL );

	pFnTraceAllPhysicsAssetInteractions->FunctionFlags |= 0x400;

	if ( out_Hits )
		memcpy ( out_Hits, &TraceAllPhysicsAssetInteractions_Parms.out_Hits, 0xC );

	return TraceAllPhysicsAssetInteractions_Parms.ReturnValue;
};

// Function Engine.Actor.FastTrace
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0224]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoxExtent                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceBullet                   ( CPF_OptionalParm | CPF_Parm )

bool AActor::FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet )
{
	static UFunction* pFnFastTrace = NULL;

	if ( ! pFnFastTrace )
		pFnFastTrace = (UFunction*) UObject::GObjObjects()->Data[ 6577 ];

	AActor_execFastTrace_Parms FastTrace_Parms;
	memcpy ( &FastTrace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &FastTrace_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &FastTrace_Parms.BoxExtent, &BoxExtent, 0xC );
	FastTrace_Parms.bTraceBullet = bTraceBullet;

	unsigned short NativeIndex = pFnFastTrace->iNative;
	pFnFastTrace->iNative = 0;

	pFnFastTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastTrace, &FastTrace_Parms, NULL );

	pFnFastTrace->FunctionFlags |= 0x400;

	pFnFastTrace->iNative = NativeIndex;

	return FastTrace_Parms.ReturnValue;
};

// Function Engine.Actor.PointCheckComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm | CPF_EditInline )
// struct FVector                 PointLocation                  ( CPF_Parm )
// struct FVector                 PointExtent                    ( CPF_Parm )

bool AActor::PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent )
{
	static UFunction* pFnPointCheckComponent = NULL;

	if ( ! pFnPointCheckComponent )
		pFnPointCheckComponent = (UFunction*) UObject::GObjObjects()->Data[ 6572 ];

	AActor_execPointCheckComponent_Parms PointCheckComponent_Parms;
	PointCheckComponent_Parms.InComponent = InComponent;
	memcpy ( &PointCheckComponent_Parms.PointLocation, &PointLocation, 0xC );
	memcpy ( &PointCheckComponent_Parms.PointExtent, &PointExtent, 0xC );

	pFnPointCheckComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointCheckComponent, &PointCheckComponent_Parms, NULL );

	pFnPointCheckComponent->FunctionFlags |= 0x400;

	return PointCheckComponent_Parms.ReturnValue;
};

// Function Engine.Actor.TraceComponent
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     InComponent                    ( CPF_Parm | CPF_EditInline )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bComplexCollision              ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool AActor::TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTraceComponent = NULL;

	if ( ! pFnTraceComponent )
		pFnTraceComponent = (UFunction*) UObject::GObjObjects()->Data[ 6562 ];

	AActor_execTraceComponent_Parms TraceComponent_Parms;
	TraceComponent_Parms.InComponent = InComponent;
	memcpy ( &TraceComponent_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &TraceComponent_Parms.TraceStart, &TraceStart, 0xC );
	memcpy ( &TraceComponent_Parms.Extent, &Extent, 0xC );
	TraceComponent_Parms.bComplexCollision = bComplexCollision;

	pFnTraceComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceComponent, &TraceComponent_Parms, NULL );

	pFnTraceComponent->FunctionFlags |= 0x400;

	if ( HitLocation )
		memcpy ( HitLocation, &TraceComponent_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &TraceComponent_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &TraceComponent_Parms.HitInfo, 0x1C );

	return TraceComponent_Parms.ReturnValue;
};

// Function Engine.Actor.Trace
// [0x00424401] ( FUNC_Final | FUNC_Native ) iNative [0x0115]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTraceActors                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

class AActor* AActor::Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnTrace = NULL;

	if ( ! pFnTrace )
		pFnTrace = (UFunction*) UObject::GObjObjects()->Data[ 6544 ];

	AActor_execTrace_Parms Trace_Parms;
	memcpy ( &Trace_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &Trace_Parms.TraceStart, &TraceStart, 0xC );
	Trace_Parms.bTraceActors = bTraceActors;
	memcpy ( &Trace_Parms.Extent, &Extent, 0xC );
	Trace_Parms.ExtraTraceFlags = ExtraTraceFlags;

	unsigned short NativeIndex = pFnTrace->iNative;
	pFnTrace->iNative = 0;

	pFnTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTrace, &Trace_Parms, NULL );

	pFnTrace->FunctionFlags |= 0x400;

	pFnTrace->iNative = NativeIndex;

	if ( HitLocation )
		memcpy ( HitLocation, &Trace_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &Trace_Parms.HitNormal, 0xC );

	if ( HitInfo )
		memcpy ( HitInfo, &Trace_Parms.HitInfo, 0x1C );

	return Trace_Parms.ReturnValue;
};

// Function Engine.Actor.VolumeBasedDestroy
// [0x00020102] 
// Parameters infos:
// class APhysicsVolume*          PV                             ( CPF_Parm )

void AActor::VolumeBasedDestroy ( class APhysicsVolume* PV )
{
	static UFunction* pFnVolumeBasedDestroy = NULL;

	if ( ! pFnVolumeBasedDestroy )
		pFnVolumeBasedDestroy = (UFunction*) UObject::GObjObjects()->Data[ 6542 ];

	AActor_execVolumeBasedDestroy_Parms VolumeBasedDestroy_Parms;
	VolumeBasedDestroy_Parms.PV = PV;

	this->ProcessEvent ( pFnVolumeBasedDestroy, &VolumeBasedDestroy_Parms, NULL );
};

// Function Engine.Actor.OutsideWorldBounds
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AActor::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 6541 ];

	AActor_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Actor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 6539 ];

	AActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Actor.UsedBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   User                           ( CPF_Parm )

bool AActor::UsedBy ( class APawn* User )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = (UFunction*) UObject::GObjObjects()->Data[ 6536 ];

	AActor_execUsedBy_Parms UsedBy_Parms;
	UsedBy_Parms.User = User;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );

	return UsedBy_Parms.ReturnValue;
};

// Function Engine.Actor.OverRotated
// [0x00420900] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                out_Desired                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Actual                     ( CPF_Parm | CPF_OutParm )

bool AActor::eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual )
{
	static UFunction* pFnOverRotated = NULL;

	if ( ! pFnOverRotated )
		pFnOverRotated = (UFunction*) UObject::GObjObjects()->Data[ 6532 ];

	AActor_eventOverRotated_Parms OverRotated_Parms;

	this->ProcessEvent ( pFnOverRotated, &OverRotated_Parms, NULL );

	if ( out_Desired )
		memcpy ( out_Desired, &OverRotated_Parms.out_Desired, 0xC );

	if ( out_Actual )
		memcpy ( out_Actual, &OverRotated_Parms.out_Actual, 0xC );

	return OverRotated_Parms.ReturnValue;
};

// Function Engine.Actor.ClampRotation
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                rBase                          ( CPF_Parm )
// struct FRotator                rUpperLimits                   ( CPF_Parm )
// struct FRotator                rLowerLimits                   ( CPF_Parm )
// struct FRotator                out_Rot                        ( CPF_Parm | CPF_OutParm )

bool AActor::ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot )
{
	static UFunction* pFnClampRotation = NULL;

	if ( ! pFnClampRotation )
		pFnClampRotation = (UFunction*) UObject::GObjObjects()->Data[ 6526 ];

	AActor_execClampRotation_Parms ClampRotation_Parms;
	memcpy ( &ClampRotation_Parms.rBase, &rBase, 0xC );
	memcpy ( &ClampRotation_Parms.rUpperLimits, &rUpperLimits, 0xC );
	memcpy ( &ClampRotation_Parms.rLowerLimits, &rLowerLimits, 0xC );

	pFnClampRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClampRotation, &ClampRotation_Parms, NULL );

	pFnClampRotation->FunctionFlags |= 0x400;

	if ( out_Rot )
		memcpy ( out_Rot, &ClampRotation_Parms.out_Rot, 0xC );

	return ClampRotation_Parms.ReturnValue;
};

// Function Engine.Actor.OnSleepRBPhysics
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6525 ];

	AActor_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function Engine.Actor.OnWakeRBPhysics
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventOnWakeRBPhysics ( )
{
	static UFunction* pFnOnWakeRBPhysics = NULL;

	if ( ! pFnOnWakeRBPhysics )
		pFnOnWakeRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6524 ];

	AActor_eventOnWakeRBPhysics_Parms OnWakeRBPhysics_Parms;

	this->ProcessEvent ( pFnOnWakeRBPhysics, &OnWakeRBPhysics_Parms, NULL );
};

// Function Engine.Actor.RanInto
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 6522 ];

	AActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.Actor.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 6520 ];

	AActor_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Actor.EncroachingOn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 6517 ];

	AActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Actor.CollisionChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 6516 ];

	AActor_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Actor.SpecialHandling
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* AActor::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 6513 ];

	AActor_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Actor.Detach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 6511 ];

	AActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.Actor.Attach
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 6509 ];

	AActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.Actor.BaseChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 6508 ];

	AActor_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Actor.Bump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = (UFunction*) UObject::GObjObjects()->Data[ 6504 ];

	AActor_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function Engine.Actor.UnTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 6502 ];

	AActor_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.Actor.PostTouch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventPostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 6500 ];

	AActor_eventPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function Engine.Actor.Touch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 6495 ];

	AActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Actor.PhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AActor::eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnPhysicsVolumeChange = NULL;

	if ( ! pFnPhysicsVolumeChange )
		pFnPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 6493 ];

	AActor_eventPhysicsVolumeChange_Parms PhysicsVolumeChange_Parms;
	PhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnPhysicsVolumeChange, &PhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Actor.Landed
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void AActor::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 6490 ];

	AActor_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.Actor.Falling
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 6489 ];

	AActor_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function Engine.Actor.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AActor::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 6484 ];

	AActor_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Actor.Timer
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 6483 ];

	AActor_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.Actor.OnOwnerChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventOnOwnerChanged ( )
{
	static UFunction* pFnOnOwnerChanged = NULL;

	if ( ! pFnOnOwnerChanged )
		pFnOnOwnerChanged = (UFunction*) UObject::GObjObjects()->Data[ 6482 ];

	AActor_eventOnOwnerChanged_Parms OnOwnerChanged_Parms;

	this->ProcessEvent ( pFnOnOwnerChanged, &OnOwnerChanged_Parms, NULL );
};

// Function Engine.Actor.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AActor::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 6480 ];

	AActor_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Actor.LostChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventLostChild ( class AActor* Other )
{
	static UFunction* pFnLostChild = NULL;

	if ( ! pFnLostChild )
		pFnLostChild = (UFunction*) UObject::GObjObjects()->Data[ 6478 ];

	AActor_eventLostChild_Parms LostChild_Parms;
	LostChild_Parms.Other = Other;

	this->ProcessEvent ( pFnLostChild, &LostChild_Parms, NULL );
};

// Function Engine.Actor.GainedChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AActor::eventGainedChild ( class AActor* Other )
{
	static UFunction* pFnGainedChild = NULL;

	if ( ! pFnGainedChild )
		pFnGainedChild = (UFunction*) UObject::GObjObjects()->Data[ 6476 ];

	AActor_eventGainedChild_Parms GainedChild_Parms;
	GainedChild_Parms.Other = Other;

	this->ProcessEvent ( pFnGainedChild, &GainedChild_Parms, NULL );
};

// Function Engine.Actor.Destroyed
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 6475 ];

	AActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Actor.SetTickIsDisabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInDisabled                    ( CPF_Parm )

void AActor::SetTickIsDisabled ( unsigned long bInDisabled )
{
	static UFunction* pFnSetTickIsDisabled = NULL;

	if ( ! pFnSetTickIsDisabled )
		pFnSetTickIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 6473 ];

	AActor_execSetTickIsDisabled_Parms SetTickIsDisabled_Parms;
	SetTickIsDisabled_Parms.bInDisabled = bInDisabled;

	pFnSetTickIsDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickIsDisabled, &SetTickIsDisabled_Parms, NULL );

	pFnSetTickIsDisabled->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void AActor::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 6471 ];

	AActor_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ReattachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ComponentToReattach            ( CPF_Parm | CPF_EditInline )

void AActor::ReattachComponent ( class UActorComponent* ComponentToReattach )
{
	static UFunction* pFnReattachComponent = NULL;

	if ( ! pFnReattachComponent )
		pFnReattachComponent = (UFunction*) UObject::GObjObjects()->Data[ 6469 ];

	AActor_execReattachComponent_Parms ReattachComponent_Parms;
	ReattachComponent_Parms.ComponentToReattach = ComponentToReattach;

	pFnReattachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReattachComponent, &ReattachComponent_Parms, NULL );

	pFnReattachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ExComponent                    ( CPF_Parm | CPF_EditInline )

void AActor::DetachComponent ( class UActorComponent* ExComponent )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = (UFunction*) UObject::GObjObjects()->Data[ 6467 ];

	AActor_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.ExComponent = ExComponent;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.AttachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         NewComponent                   ( CPF_Parm | CPF_EditInline )

void AActor::AttachComponent ( class UActorComponent* NewComponent )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = (UFunction*) UObject::GObjObjects()->Data[ 6465 ];

	AActor_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.NewComponent = NewComponent;

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.Actor.UnClock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::UnClock ( float* Time )
{
	static UFunction* pFnUnClock = NULL;

	if ( ! pFnUnClock )
		pFnUnClock = (UFunction*) UObject::GObjObjects()->Data[ 6463 ];

	AActor_execUnClock_Parms UnClock_Parms;

	pFnUnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnClock, &UnClock_Parms, NULL );

	pFnUnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = UnClock_Parms.Time;
};

// Function Engine.Actor.Clock
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Time                           ( CPF_Parm | CPF_OutParm )

void AActor::Clock ( float* Time )
{
	static UFunction* pFnClock = NULL;

	if ( ! pFnClock )
		pFnClock = (UFunction*) UObject::GObjObjects()->Data[ 6461 ];

	AActor_execClock_Parms Clock_Parms;

	pFnClock->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClock, &Clock_Parms, NULL );

	pFnClock->FunctionFlags |= 0x400;

	if ( Time )
		*Time = Clock_Parms.Time;
};

// Function Engine.Actor.SetPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F82]
// Parameters infos:
// unsigned char                  newPhysics                     ( CPF_Parm )

void AActor::SetPhysics ( unsigned char newPhysics )
{
	static UFunction* pFnSetPhysics = NULL;

	if ( ! pFnSetPhysics )
		pFnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6459 ];

	AActor_execSetPhysics_Parms SetPhysics_Parms;
	SetPhysics_Parms.newPhysics = newPhysics;

	unsigned short NativeIndex = pFnSetPhysics->iNative;
	pFnSetPhysics->iNative = 0;

	pFnSetPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysics, &SetPhysics_Parms, NULL );

	pFnSetPhysics->FunctionFlags |= 0x400;

	pFnSetPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void AActor::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 6457 ];

	AActor_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHidden                     ( CPF_Parm )

void AActor::SetHidden ( unsigned long bNewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 6455 ];

	AActor_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.bNewHidden = bNewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ChartData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 DataName                       ( CPF_Parm | CPF_NeedCtorLink )
// float                          DataValue                      ( CPF_Parm )

void AActor::ChartData ( struct FString DataName, float DataValue )
{
	static UFunction* pFnChartData = NULL;

	if ( ! pFnChartData )
		pFnChartData = (UFunction*) UObject::GObjObjects()->Data[ 6452 ];

	AActor_execChartData_Parms ChartData_Parms;
	memcpy ( &ChartData_Parms.DataName, &DataName, 0xC );
	ChartData_Parms.DataValue = DataValue;

	pFnChartData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChartData, &ChartData_Parms, NULL );

	pFnChartData->FunctionFlags |= 0x400;
};

// Function Engine.Actor.FlushDebugStrings
// [0x00022601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void AActor::FlushDebugStrings ( )
{
	static UFunction* pFnFlushDebugStrings = NULL;

	if ( ! pFnFlushDebugStrings )
		pFnFlushDebugStrings = (UFunction*) UObject::GObjObjects()->Data[ 6451 ];

	AActor_execFlushDebugStrings_Parms FlushDebugStrings_Parms;

	pFnFlushDebugStrings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushDebugStrings, &FlushDebugStrings_Parms, NULL );

	pFnFlushDebugStrings->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugFrustrum
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )
// struct FMatrix                 FrustumToWorld                 ( CPF_Const | CPF_Parm | CPF_OutParm )

void AActor::DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld )
{
	static UFunction* pFnDrawDebugFrustrum = NULL;

	if ( ! pFnDrawDebugFrustrum )
		pFnDrawDebugFrustrum = (UFunction*) UObject::GObjObjects()->Data[ 6445 ];

	AActor_execDrawDebugFrustrum_Parms DrawDebugFrustrum_Parms;
	DrawDebugFrustrum_Parms.R = R;
	DrawDebugFrustrum_Parms.G = G;
	DrawDebugFrustrum_Parms.B = B;
	DrawDebugFrustrum_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugFrustrum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugFrustrum, &DrawDebugFrustrum_Parms, NULL );

	pFnDrawDebugFrustrum->FunctionFlags |= 0x400;

	if ( FrustumToWorld )
		memcpy ( FrustumToWorld, &DrawDebugFrustrum_Parms.FrustumToWorld, 0x40 );
};

// Function Engine.Actor.DrawDebugString
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 TextLocation                   ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// class AActor*                  TestBaseActor                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  TextColor                      ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration )
{
	static UFunction* pFnDrawDebugString = NULL;

	if ( ! pFnDrawDebugString )
		pFnDrawDebugString = (UFunction*) UObject::GObjObjects()->Data[ 6439 ];

	AActor_execDrawDebugString_Parms DrawDebugString_Parms;
	memcpy ( &DrawDebugString_Parms.TextLocation, &TextLocation, 0xC );
	memcpy ( &DrawDebugString_Parms.Text, &Text, 0xC );
	DrawDebugString_Parms.TestBaseActor = TestBaseActor;
	memcpy ( &DrawDebugString_Parms.TextColor, &TextColor, 0x4 );
	DrawDebugString_Parms.Duration = Duration;

	pFnDrawDebugString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugString, &DrawDebugString_Parms, NULL );

	pFnDrawDebugString->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCone
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// struct FVector                 Direction                      ( CPF_Parm )
// float                          Length                         ( CPF_Parm )
// float                          AngleWidth                     ( CPF_Parm )
// float                          AngleHeight                    ( CPF_Parm )
// int                            NumSides                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCone = NULL;

	if ( ! pFnDrawDebugCone )
		pFnDrawDebugCone = (UFunction*) UObject::GObjObjects()->Data[ 6430 ];

	AActor_execDrawDebugCone_Parms DrawDebugCone_Parms;
	memcpy ( &DrawDebugCone_Parms.Origin, &Origin, 0xC );
	memcpy ( &DrawDebugCone_Parms.Direction, &Direction, 0xC );
	DrawDebugCone_Parms.Length = Length;
	DrawDebugCone_Parms.AngleWidth = AngleWidth;
	DrawDebugCone_Parms.AngleHeight = AngleHeight;
	DrawDebugCone_Parms.NumSides = NumSides;
	memcpy ( &DrawDebugCone_Parms.DrawColor, &DrawColor, 0x4 );
	DrawDebugCone_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCone, &DrawDebugCone_Parms, NULL );

	pFnDrawDebugCone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCylinder
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCylinder = NULL;

	if ( ! pFnDrawDebugCylinder )
		pFnDrawDebugCylinder = (UFunction*) UObject::GObjObjects()->Data[ 6421 ];

	AActor_execDrawDebugCylinder_Parms DrawDebugCylinder_Parms;
	memcpy ( &DrawDebugCylinder_Parms.Start, &Start, 0xC );
	memcpy ( &DrawDebugCylinder_Parms.End, &End, 0xC );
	DrawDebugCylinder_Parms.Radius = Radius;
	DrawDebugCylinder_Parms.Segments = Segments;
	DrawDebugCylinder_Parms.R = R;
	DrawDebugCylinder_Parms.G = G;
	DrawDebugCylinder_Parms.B = B;
	DrawDebugCylinder_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCylinder, &DrawDebugCylinder_Parms, NULL );

	pFnDrawDebugCylinder->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugSphere
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            Segments                       ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugSphere = NULL;

	if ( ! pFnDrawDebugSphere )
		pFnDrawDebugSphere = (UFunction*) UObject::GObjObjects()->Data[ 6413 ];

	AActor_execDrawDebugSphere_Parms DrawDebugSphere_Parms;
	memcpy ( &DrawDebugSphere_Parms.Center, &Center, 0xC );
	DrawDebugSphere_Parms.Radius = Radius;
	DrawDebugSphere_Parms.Segments = Segments;
	DrawDebugSphere_Parms.R = R;
	DrawDebugSphere_Parms.G = G;
	DrawDebugSphere_Parms.B = B;
	DrawDebugSphere_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugSphere->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugSphere, &DrawDebugSphere_Parms, NULL );

	pFnDrawDebugSphere->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugCoordinateSystem
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 AxisLoc                        ( CPF_Parm )
// struct FRotator                AxisRot                        ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugCoordinateSystem = NULL;

	if ( ! pFnDrawDebugCoordinateSystem )
		pFnDrawDebugCoordinateSystem = (UFunction*) UObject::GObjObjects()->Data[ 6408 ];

	AActor_execDrawDebugCoordinateSystem_Parms DrawDebugCoordinateSystem_Parms;
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisLoc, &AxisLoc, 0xC );
	memcpy ( &DrawDebugCoordinateSystem_Parms.AxisRot, &AxisRot, 0xC );
	DrawDebugCoordinateSystem_Parms.Scale = Scale;
	DrawDebugCoordinateSystem_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugCoordinateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugCoordinateSystem, &DrawDebugCoordinateSystem_Parms, NULL );

	pFnDrawDebugCoordinateSystem->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugStar
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Position                       ( CPF_Parm )
// float                          Size                           ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugStar = NULL;

	if ( ! pFnDrawDebugStar )
		pFnDrawDebugStar = (UFunction*) UObject::GObjObjects()->Data[ 6401 ];

	AActor_execDrawDebugStar_Parms DrawDebugStar_Parms;
	memcpy ( &DrawDebugStar_Parms.Position, &Position, 0xC );
	DrawDebugStar_Parms.Size = Size;
	DrawDebugStar_Parms.R = R;
	DrawDebugStar_Parms.G = G;
	DrawDebugStar_Parms.B = B;
	DrawDebugStar_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugStar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugStar, &DrawDebugStar_Parms, NULL );

	pFnDrawDebugStar->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugBox
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Center                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugBox = NULL;

	if ( ! pFnDrawDebugBox )
		pFnDrawDebugBox = (UFunction*) UObject::GObjObjects()->Data[ 6394 ];

	AActor_execDrawDebugBox_Parms DrawDebugBox_Parms;
	memcpy ( &DrawDebugBox_Parms.Center, &Center, 0xC );
	memcpy ( &DrawDebugBox_Parms.Extent, &Extent, 0xC );
	DrawDebugBox_Parms.R = R;
	DrawDebugBox_Parms.G = G;
	DrawDebugBox_Parms.B = B;
	DrawDebugBox_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugBox, &DrawDebugBox_Parms, NULL );

	pFnDrawDebugBox->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugPoint
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Position                       ( CPF_Parm )
// float                          Size                           ( CPF_Parm )
// struct FLinearColor            PointColor                     ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugPoint = NULL;

	if ( ! pFnDrawDebugPoint )
		pFnDrawDebugPoint = (UFunction*) UObject::GObjObjects()->Data[ 6389 ];

	AActor_execDrawDebugPoint_Parms DrawDebugPoint_Parms;
	memcpy ( &DrawDebugPoint_Parms.Position, &Position, 0xC );
	DrawDebugPoint_Parms.Size = Size;
	memcpy ( &DrawDebugPoint_Parms.PointColor, &PointColor, 0x10 );
	DrawDebugPoint_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugPoint, &DrawDebugPoint_Parms, NULL );

	pFnDrawDebugPoint->FunctionFlags |= 0x400;
};

// Function Engine.Actor.DrawDebugLine
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 LineStart                      ( CPF_Parm )
// struct FVector                 LineEnd                        ( CPF_Parm )
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned long                  bPersistentLines               ( CPF_OptionalParm | CPF_Parm )

void AActor::DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines )
{
	static UFunction* pFnDrawDebugLine = NULL;

	if ( ! pFnDrawDebugLine )
		pFnDrawDebugLine = (UFunction*) UObject::GObjObjects()->Data[ 6382 ];

	AActor_execDrawDebugLine_Parms DrawDebugLine_Parms;
	memcpy ( &DrawDebugLine_Parms.LineStart, &LineStart, 0xC );
	memcpy ( &DrawDebugLine_Parms.LineEnd, &LineEnd, 0xC );
	DrawDebugLine_Parms.R = R;
	DrawDebugLine_Parms.G = G;
	DrawDebugLine_Parms.B = B;
	DrawDebugLine_Parms.bPersistentLines = bPersistentLines;

	pFnDrawDebugLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugLine, &DrawDebugLine_Parms, NULL );

	pFnDrawDebugLine->FunctionFlags |= 0x400;
};

// Function Engine.Actor.FlushPersistentDebugLines
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AActor::FlushPersistentDebugLines ( )
{
	static UFunction* pFnFlushPersistentDebugLines = NULL;

	if ( ! pFnFlushPersistentDebugLines )
		pFnFlushPersistentDebugLines = (UFunction*) UObject::GObjObjects()->Data[ 6381 ];

	AActor_execFlushPersistentDebugLines_Parms FlushPersistentDebugLines_Parms;

	pFnFlushPersistentDebugLines->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushPersistentDebugLines, &FlushPersistentDebugLines_Parms, NULL );

	pFnFlushPersistentDebugLines->FunctionFlags |= 0x400;
};

// Function Engine.Actor.GetBasedPosition
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBasedPosition          BP                             ( CPF_Parm )

struct FVector AActor::GetBasedPosition ( struct FBasedPosition BP )
{
	static UFunction* pFnGetBasedPosition = NULL;

	if ( ! pFnGetBasedPosition )
		pFnGetBasedPosition = (UFunction*) UObject::GObjObjects()->Data[ 6378 ];

	AActor_execGetBasedPosition_Parms GetBasedPosition_Parms;
	memcpy ( &GetBasedPosition_Parms.BP, &BP, 0x34 );

	pFnGetBasedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBasedPosition, &GetBasedPosition_Parms, NULL );

	pFnGetBasedPosition->FunctionFlags |= 0x400;

	return GetBasedPosition_Parms.ReturnValue;
};

// Function Engine.Actor.SetBasedPosition
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// class AActor*                  ForcedBase                     ( CPF_OptionalParm | CPF_Parm )
// struct FBasedPosition          BP                             ( CPF_Parm | CPF_OutParm )

void AActor::SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP )
{
	static UFunction* pFnSetBasedPosition = NULL;

	if ( ! pFnSetBasedPosition )
		pFnSetBasedPosition = (UFunction*) UObject::GObjObjects()->Data[ 6374 ];

	AActor_execSetBasedPosition_Parms SetBasedPosition_Parms;
	memcpy ( &SetBasedPosition_Parms.pos, &pos, 0xC );
	SetBasedPosition_Parms.ForcedBase = ForcedBase;

	pFnSetBasedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBasedPosition, &SetBasedPosition_Parms, NULL );

	pFnSetBasedPosition->FunctionFlags |= 0x400;

	if ( BP )
		memcpy ( BP, &SetBasedPosition_Parms.BP, 0x34 );
};

// Function Engine.Actor.BP2Vect
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBasedPosition          BP                             ( CPF_Parm )

struct FVector AActor::BP2Vect ( struct FBasedPosition BP )
{
	static UFunction* pFnBP2Vect = NULL;

	if ( ! pFnBP2Vect )
		pFnBP2Vect = (UFunction*) UObject::GObjObjects()->Data[ 6371 ];

	AActor_execBP2Vect_Parms BP2Vect_Parms;
	memcpy ( &BP2Vect_Parms.BP, &BP, 0x34 );

	pFnBP2Vect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBP2Vect, &BP2Vect_Parms, NULL );

	pFnBP2Vect->FunctionFlags |= 0x400;

	return BP2Vect_Parms.ReturnValue;
};

// Function Engine.Actor.Vect2BP
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// class AActor*                  ForcedBase                     ( CPF_OptionalParm | CPF_Parm )
// struct FBasedPosition          BP                             ( CPF_Parm | CPF_OutParm )

void AActor::Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP )
{
	static UFunction* pFnVect2BP = NULL;

	if ( ! pFnVect2BP )
		pFnVect2BP = (UFunction*) UObject::GObjObjects()->Data[ 6367 ];

	AActor_execVect2BP_Parms Vect2BP_Parms;
	memcpy ( &Vect2BP_Parms.pos, &pos, 0xC );
	Vect2BP_Parms.ForcedBase = ForcedBase;

	pFnVect2BP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVect2BP, &Vect2BP_Parms, NULL );

	pFnVect2BP->FunctionFlags |= 0x400;

	if ( BP )
		memcpy ( BP, &Vect2BP_Parms.BP, 0x34 );
};

// Function Engine.Actor.SetForcedInitialReplicatedProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UProperty*               PropToReplicate                ( CPF_Parm )
// unsigned long                  bAdd                           ( CPF_Parm )

void AActor::SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd )
{
	static UFunction* pFnSetForcedInitialReplicatedProperty = NULL;

	if ( ! pFnSetForcedInitialReplicatedProperty )
		pFnSetForcedInitialReplicatedProperty = (UFunction*) UObject::GObjObjects()->Data[ 6364 ];

	AActor_execSetForcedInitialReplicatedProperty_Parms SetForcedInitialReplicatedProperty_Parms;
	SetForcedInitialReplicatedProperty_Parms.PropToReplicate = PropToReplicate;
	SetForcedInitialReplicatedProperty_Parms.bAdd = bAdd;

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForcedInitialReplicatedProperty, &SetForcedInitialReplicatedProperty_Parms, NULL );

	pFnSetForcedInitialReplicatedProperty->FunctionFlags |= 0x400;
};

// Function Engine.Actor.ReplicatedEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 6362 ];

	AActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Actor.GetAggregateBaseVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestBase                       ( CPF_OptionalParm | CPF_Parm )

struct FVector AActor::GetAggregateBaseVelocity ( class AActor* TestBase )
{
	static UFunction* pFnGetAggregateBaseVelocity = NULL;

	if ( ! pFnGetAggregateBaseVelocity )
		pFnGetAggregateBaseVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6359 ];

	AActor_execGetAggregateBaseVelocity_Parms GetAggregateBaseVelocity_Parms;
	GetAggregateBaseVelocity_Parms.TestBase = TestBase;

	pFnGetAggregateBaseVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAggregateBaseVelocity, &GetAggregateBaseVelocity_Parms, NULL );

	pFnGetAggregateBaseVelocity->FunctionFlags |= 0x400;

	return GetAggregateBaseVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.IsOwnedBy
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsOwnedBy ( class AActor* TestActor )
{
	static UFunction* pFnIsOwnedBy = NULL;

	if ( ! pFnIsOwnedBy )
		pFnIsOwnedBy = (UFunction*) UObject::GObjObjects()->Data[ 6356 ];

	AActor_execIsOwnedBy_Parms IsOwnedBy_Parms;
	IsOwnedBy_Parms.TestActor = TestActor;

	pFnIsOwnedBy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOwnedBy, &IsOwnedBy_Parms, NULL );

	pFnIsOwnedBy->FunctionFlags |= 0x400;

	return IsOwnedBy_Parms.ReturnValue;
};

// Function Engine.Actor.GetBaseMost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AActor::GetBaseMost ( )
{
	static UFunction* pFnGetBaseMost = NULL;

	if ( ! pFnGetBaseMost )
		pFnGetBaseMost = (UFunction*) UObject::GObjObjects()->Data[ 6354 ];

	AActor_execGetBaseMost_Parms GetBaseMost_Parms;

	pFnGetBaseMost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMost, &GetBaseMost_Parms, NULL );

	pFnGetBaseMost->FunctionFlags |= 0x400;

	return GetBaseMost_Parms.ReturnValue;
};

// Function Engine.Actor.IsBasedOn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool AActor::IsBasedOn ( class AActor* TestActor )
{
	static UFunction* pFnIsBasedOn = NULL;

	if ( ! pFnIsBasedOn )
		pFnIsBasedOn = (UFunction*) UObject::GObjObjects()->Data[ 6351 ];

	AActor_execIsBasedOn_Parms IsBasedOn_Parms;
	IsBasedOn_Parms.TestActor = TestActor;

	pFnIsBasedOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBasedOn, &IsBasedOn_Parms, NULL );

	pFnIsBasedOn->FunctionFlags |= 0x400;

	return IsBasedOn_Parms.ReturnValue;
};

// Function Engine.Actor.SearchForBaseBelow
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          HeightBelow                    ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )

void AActor::SearchForBaseBelow ( float HeightBelow, class AActor** NewBase, struct FVector* HitNormal )
{
	static UFunction* pFnSearchForBaseBelow = NULL;

	if ( ! pFnSearchForBaseBelow )
		pFnSearchForBaseBelow = (UFunction*) UObject::GObjObjects()->Data[ 6347 ];

	AActor_execSearchForBaseBelow_Parms SearchForBaseBelow_Parms;
	SearchForBaseBelow_Parms.HeightBelow = HeightBelow;

	pFnSearchForBaseBelow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSearchForBaseBelow, &SearchForBaseBelow_Parms, NULL );

	pFnSearchForBaseBelow->FunctionFlags |= 0x400;

	if ( NewBase )
		*NewBase = SearchForBaseBelow_Parms.NewBase;

	if ( HitNormal )
		memcpy ( HitNormal, &SearchForBaseBelow_Parms.HitNormal, 0xC );
};

// Function Engine.Actor.FindBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AActor::FindBase ( )
{
	static UFunction* pFnFindBase = NULL;

	if ( ! pFnFindBase )
		pFnFindBase = (UFunction*) UObject::GObjObjects()->Data[ 6346 ];

	AActor_execFindBase_Parms FindBase_Parms;

	pFnFindBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBase, &FindBase_Parms, NULL );

	pFnFindBase->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetOwner
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0110]
// Parameters infos:
// class AActor*                  NewOwner                       ( CPF_Parm )

void AActor::SetOwner ( class AActor* NewOwner )
{
	static UFunction* pFnSetOwner = NULL;

	if ( ! pFnSetOwner )
		pFnSetOwner = (UFunction*) UObject::GObjObjects()->Data[ 6344 ];

	AActor_execSetOwner_Parms SetOwner_Parms;
	SetOwner_Parms.NewOwner = NewOwner;

	unsigned short NativeIndex = pFnSetOwner->iNative;
	pFnSetOwner->iNative = 0;

	pFnSetOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwner, &SetOwner_Parms, NULL );

	pFnSetOwner->FunctionFlags |= 0x400;

	pFnSetOwner->iNative = NativeIndex;
};

// Function Engine.Actor.SetBase
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x012A]
// Parameters infos:
// class AActor*                  NewBase                        ( CPF_Parm )
// struct FVector                 NewFloor                       ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// struct FName                   AttachName                     ( CPF_OptionalParm | CPF_Parm )

void AActor::SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName )
{
	static UFunction* pFnSetBase = NULL;

	if ( ! pFnSetBase )
		pFnSetBase = (UFunction*) UObject::GObjObjects()->Data[ 6339 ];

	AActor_execSetBase_Parms SetBase_Parms;
	SetBase_Parms.NewBase = NewBase;
	memcpy ( &SetBase_Parms.NewFloor, &NewFloor, 0xC );
	SetBase_Parms.SkelComp = SkelComp;
	memcpy ( &SetBase_Parms.AttachName, &AttachName, 0x8 );

	unsigned short NativeIndex = pFnSetBase->iNative;
	pFnSetBase->iNative = 0;

	pFnSetBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBase, &SetBase_Parms, NULL );

	pFnSetBase->FunctionFlags |= 0x400;

	pFnSetBase->iNative = NativeIndex;
};

// Function Engine.Actor.GetTerminalVelocity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AActor::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = (UFunction*) UObject::GObjObjects()->Data[ 6337 ];

	AActor_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	pFnGetTerminalVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );

	pFnGetTerminalVelocity->FunctionFlags |= 0x400;

	return GetTerminalVelocity_Parms.ReturnValue;
};

// Function Engine.Actor.AutonomousPhysics
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F83]
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void AActor::AutonomousPhysics ( float DeltaSeconds )
{
	static UFunction* pFnAutonomousPhysics = NULL;

	if ( ! pFnAutonomousPhysics )
		pFnAutonomousPhysics = (UFunction*) UObject::GObjObjects()->Data[ 6335 ];

	AActor_execAutonomousPhysics_Parms AutonomousPhysics_Parms;
	AutonomousPhysics_Parms.DeltaSeconds = DeltaSeconds;

	unsigned short NativeIndex = pFnAutonomousPhysics->iNative;
	pFnAutonomousPhysics->iNative = 0;

	pFnAutonomousPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutonomousPhysics, &AutonomousPhysics_Parms, NULL );

	pFnAutonomousPhysics->FunctionFlags |= 0x400;

	pFnAutonomousPhysics->iNative = NativeIndex;
};

// Function Engine.Actor.MoveSmooth
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0F81]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::MoveSmooth ( struct FVector Delta )
{
	static UFunction* pFnMoveSmooth = NULL;

	if ( ! pFnMoveSmooth )
		pFnMoveSmooth = (UFunction*) UObject::GObjObjects()->Data[ 6332 ];

	AActor_execMoveSmooth_Parms MoveSmooth_Parms;
	memcpy ( &MoveSmooth_Parms.Delta, &Delta, 0xC );

	unsigned short NativeIndex = pFnMoveSmooth->iNative;
	pFnMoveSmooth->iNative = 0;

	pFnMoveSmooth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveSmooth, &MoveSmooth_Parms, NULL );

	pFnMoveSmooth->FunctionFlags |= 0x400;

	pFnMoveSmooth->iNative = NativeIndex;

	return MoveSmooth_Parms.ReturnValue;
};

// Function Engine.Actor.fixedTurn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Current                        ( CPF_Parm )
// int                            Desired                        ( CPF_Parm )
// int                            DeltaRate                      ( CPF_Parm )

int AActor::fixedTurn ( int Current, int Desired, int DeltaRate )
{
	static UFunction* pFnfixedTurn = NULL;

	if ( ! pFnfixedTurn )
		pFnfixedTurn = (UFunction*) UObject::GObjObjects()->Data[ 6327 ];

	AActor_execfixedTurn_Parms fixedTurn_Parms;
	fixedTurn_Parms.Current = Current;
	fixedTurn_Parms.Desired = Desired;
	fixedTurn_Parms.DeltaRate = DeltaRate;

	pFnfixedTurn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnfixedTurn, &fixedTurn_Parms, NULL );

	pFnfixedTurn->FunctionFlags |= 0x400;

	return fixedTurn_Parms.ReturnValue;
};

// Function Engine.Actor.SetShadowParentOnAllAttachedComponents
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     MyPrimComp                     ( CPF_Parm | CPF_EditInline )
// class ULightEnvironmentComponent* MyLightEnv                     ( CPF_Parm | CPF_EditInline )

void AActor::SetShadowParentOnAllAttachedComponents ( class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv )
{
	static UFunction* pFnSetShadowParentOnAllAttachedComponents = NULL;

	if ( ! pFnSetShadowParentOnAllAttachedComponents )
		pFnSetShadowParentOnAllAttachedComponents = (UFunction*) UObject::GObjObjects()->Data[ 6324 ];

	AActor_execSetShadowParentOnAllAttachedComponents_Parms SetShadowParentOnAllAttachedComponents_Parms;
	SetShadowParentOnAllAttachedComponents_Parms.MyPrimComp = MyPrimComp;
	SetShadowParentOnAllAttachedComponents_Parms.MyLightEnv = MyLightEnv;

	pFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParentOnAllAttachedComponents, &SetShadowParentOnAllAttachedComponents_Parms, NULL );

	pFnSetShadowParentOnAllAttachedComponents->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetHardAttach
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewHardAttach                 ( CPF_OptionalParm | CPF_Parm )

void AActor::SetHardAttach ( unsigned long bNewHardAttach )
{
	static UFunction* pFnSetHardAttach = NULL;

	if ( ! pFnSetHardAttach )
		pFnSetHardAttach = (UFunction*) UObject::GObjObjects()->Data[ 6322 ];

	AActor_execSetHardAttach_Parms SetHardAttach_Parms;
	SetHardAttach_Parms.bNewHardAttach = bNewHardAttach;

	pFnSetHardAttach->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHardAttach, &SetHardAttach_Parms, NULL );

	pFnSetHardAttach->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetRelativeLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetRelativeLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetRelativeLocation = NULL;

	if ( ! pFnSetRelativeLocation )
		pFnSetRelativeLocation = (UFunction*) UObject::GObjObjects()->Data[ 6319 ];

	AActor_execSetRelativeLocation_Parms SetRelativeLocation_Parms;
	memcpy ( &SetRelativeLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetRelativeLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeLocation, &SetRelativeLocation_Parms, NULL );

	pFnSetRelativeLocation->FunctionFlags |= 0x400;

	return SetRelativeLocation_Parms.ReturnValue;
};

// Function Engine.Actor.SetRelativeRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRelativeRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRelativeRotation = NULL;

	if ( ! pFnSetRelativeRotation )
		pFnSetRelativeRotation = (UFunction*) UObject::GObjObjects()->Data[ 6316 ];

	AActor_execSetRelativeRotation_Parms SetRelativeRotation_Parms;
	memcpy ( &SetRelativeRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRelativeRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRelativeRotation, &SetRelativeRotation_Parms, NULL );

	pFnSetRelativeRotation->FunctionFlags |= 0x400;

	return SetRelativeRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetZone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bForceRefresh                  ( CPF_Parm )

void AActor::SetZone ( unsigned long bForceRefresh )
{
	static UFunction* pFnSetZone = NULL;

	if ( ! pFnSetZone )
		pFnSetZone = (UFunction*) UObject::GObjObjects()->Data[ 6314 ];

	AActor_execSetZone_Parms SetZone_Parms;
	SetZone_Parms.bForceRefresh = bForceRefresh;

	pFnSetZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetZone, &SetZone_Parms, NULL );

	pFnSetZone->FunctionFlags |= 0x400;
};

// Function Engine.Actor.MovingWhichWay
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Amount                         ( CPF_Parm | CPF_OutParm )

unsigned char AActor::MovingWhichWay ( float* Amount )
{
	static UFunction* pFnMovingWhichWay = NULL;

	if ( ! pFnMovingWhichWay )
		pFnMovingWhichWay = (UFunction*) UObject::GObjObjects()->Data[ 6311 ];

	AActor_execMovingWhichWay_Parms MovingWhichWay_Parms;

	pFnMovingWhichWay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovingWhichWay, &MovingWhichWay_Parms, NULL );

	pFnMovingWhichWay->FunctionFlags |= 0x400;

	if ( Amount )
		*Amount = MovingWhichWay_Parms.Amount;

	return MovingWhichWay_Parms.ReturnValue;
};

// Function Engine.Actor.SetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x012B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool AActor::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 6308 ];

	AActor_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	unsigned short NativeIndex = pFnSetRotation->iNative;
	pFnSetRotation->iNative = 0;

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;

	pFnSetRotation->iNative = NativeIndex;

	return SetRotation_Parms.ReturnValue;
};

// Function Engine.Actor.SetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010B]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 NewLocation                    ( CPF_Parm )

bool AActor::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 6305 ];

	AActor_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	unsigned short NativeIndex = pFnSetLocation->iNative;
	pFnSetLocation->iNative = 0;

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;

	pFnSetLocation->iNative = NativeIndex;

	return SetLocation_Parms.ReturnValue;
};

// Function Engine.Actor.Move
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x010A]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Delta                          ( CPF_Parm )

bool AActor::Move ( struct FVector Delta )
{
	static UFunction* pFnMove = NULL;

	if ( ! pFnMove )
		pFnMove = (UFunction*) UObject::GObjObjects()->Data[ 6302 ];

	AActor_execMove_Parms Move_Parms;
	memcpy ( &Move_Parms.Delta, &Delta, 0xC );

	unsigned short NativeIndex = pFnMove->iNative;
	pFnMove->iNative = 0;

	pFnMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMove, &Move_Parms, NULL );

	pFnMove->FunctionFlags |= 0x400;

	pFnMove->iNative = NativeIndex;

	return Move_Parms.ReturnValue;
};

// Function Engine.Actor.SetDrawScale3D
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void AActor::SetDrawScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetDrawScale3D = NULL;

	if ( ! pFnSetDrawScale3D )
		pFnSetDrawScale3D = (UFunction*) UObject::GObjObjects()->Data[ 6300 ];

	AActor_execSetDrawScale3D_Parms SetDrawScale3D_Parms;
	memcpy ( &SetDrawScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetDrawScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale3D, &SetDrawScale3D_Parms, NULL );

	pFnSetDrawScale3D->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetDrawScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void AActor::SetDrawScale ( float NewScale )
{
	static UFunction* pFnSetDrawScale = NULL;

	if ( ! pFnSetDrawScale )
		pFnSetDrawScale = (UFunction*) UObject::GObjObjects()->Data[ 6298 ];

	AActor_execSetDrawScale_Parms SetDrawScale_Parms;
	SetDrawScale_Parms.NewScale = NewScale;

	pFnSetDrawScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawScale, &SetDrawScale_Parms, NULL );

	pFnSetDrawScale->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionType
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewCollisionType               ( CPF_Parm )

void AActor::SetCollisionType ( unsigned char NewCollisionType )
{
	static UFunction* pFnSetCollisionType = NULL;

	if ( ! pFnSetCollisionType )
		pFnSetCollisionType = (UFunction*) UObject::GObjObjects()->Data[ 6296 ];

	AActor_execSetCollisionType_Parms SetCollisionType_Parms;
	SetCollisionType_Parms.NewCollisionType = NewCollisionType;

	pFnSetCollisionType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionType, &SetCollisionType_Parms, NULL );

	pFnSetCollisionType->FunctionFlags |= 0x400;
};

// Function Engine.Actor.SetCollisionSize
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x011B]
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void AActor::SetCollisionSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCollisionSize = NULL;

	if ( ! pFnSetCollisionSize )
		pFnSetCollisionSize = (UFunction*) UObject::GObjObjects()->Data[ 6293 ];

	AActor_execSetCollisionSize_Parms SetCollisionSize_Parms;
	SetCollisionSize_Parms.NewRadius = NewRadius;
	SetCollisionSize_Parms.NewHeight = NewHeight;

	unsigned short NativeIndex = pFnSetCollisionSize->iNative;
	pFnSetCollisionSize->iNative = 0;

	pFnSetCollisionSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollisionSize, &SetCollisionSize_Parms, NULL );

	pFnSetCollisionSize->FunctionFlags |= 0x400;

	pFnSetCollisionSize->iNative = NativeIndex;
};

// Function Engine.Actor.SetCollision
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0106]
// Parameters infos:
// unsigned long                  bNewColActors                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewBlockActors                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewIgnoreEncroachers          ( CPF_OptionalParm | CPF_Parm )

void AActor::SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers )
{
	static UFunction* pFnSetCollision = NULL;

	if ( ! pFnSetCollision )
		pFnSetCollision = (UFunction*) UObject::GObjObjects()->Data[ 6289 ];

	AActor_execSetCollision_Parms SetCollision_Parms;
	SetCollision_Parms.bNewColActors = bNewColActors;
	SetCollision_Parms.bNewBlockActors = bNewBlockActors;
	SetCollision_Parms.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	unsigned short NativeIndex = pFnSetCollision->iNative;
	pFnSetCollision->iNative = 0;

	pFnSetCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCollision, &SetCollision_Parms, NULL );

	pFnSetCollision->FunctionFlags |= 0x400;

	pFnSetCollision->iNative = NativeIndex;
};

// Function Engine.Actor.FinishAnim
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x0105]
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// unsigned long                  bFinishOnBlendOut              ( CPF_OptionalParm | CPF_Parm )

void AActor::FinishAnim ( class UAnimNodeSequence* SeqNode, unsigned long bFinishOnBlendOut )
{
	static UFunction* pFnFinishAnim = NULL;

	if ( ! pFnFinishAnim )
		pFnFinishAnim = (UFunction*) UObject::GObjObjects()->Data[ 6286 ];

	AActor_execFinishAnim_Parms FinishAnim_Parms;
	FinishAnim_Parms.SeqNode = SeqNode;
	FinishAnim_Parms.bFinishOnBlendOut = bFinishOnBlendOut;

	unsigned short NativeIndex = pFnFinishAnim->iNative;
	pFnFinishAnim->iNative = 0;

	pFnFinishAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishAnim, &FinishAnim_Parms, NULL );

	pFnFinishAnim->FunctionFlags |= 0x400;

	pFnFinishAnim->iNative = NativeIndex;
};

// Function Engine.Actor.Sleep
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x0100]
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )

void AActor::Sleep ( float Seconds )
{
	static UFunction* pFnSleep = NULL;

	if ( ! pFnSleep )
		pFnSleep = (UFunction*) UObject::GObjObjects()->Data[ 6284 ];

	AActor_execSleep_Parms Sleep_Parms;
	Sleep_Parms.Seconds = Seconds;

	unsigned short NativeIndex = pFnSleep->iNative;
	pFnSleep->iNative = 0;

	pFnSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSleep, &Sleep_Parms, NULL );

	pFnSleep->FunctionFlags |= 0x400;

	pFnSleep->iNative = NativeIndex;
};

// Function Engine.Actor.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString AActor::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 6280 ];

	AActor_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.Actor.ForceUpdateComponents
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCollisionUpdate               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTransformOnly                 ( CPF_OptionalParm | CPF_Parm )

void AActor::ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdateComponents = NULL;

	if ( ! pFnForceUpdateComponents )
		pFnForceUpdateComponents = (UFunction*) UObject::GObjObjects()->Data[ 6276 ];

	AActor_execForceUpdateComponents_Parms ForceUpdateComponents_Parms;
	ForceUpdateComponents_Parms.bCollisionUpdate = bCollisionUpdate;
	ForceUpdateComponents_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdateComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdateComponents, &ForceUpdateComponents_Parms, NULL );

	pFnForceUpdateComponents->FunctionFlags |= 0x400;
};

// Function Engine.Actor.EventHiddenChanged
// [0x00120000] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void AActor::EventHiddenChanged ( class AActor* Target )
{
	static UFunction* pFnEventHiddenChanged = NULL;

	if ( ! pFnEventHiddenChanged )
		pFnEventHiddenChanged = (UFunction*) UObject::GObjObjects()->Data[ 6279 ];

	AActor_execEventHiddenChanged_Parms EventHiddenChanged_Parms;
	EventHiddenChanged_Parms.Target = Target;

	this->ProcessEvent ( pFnEventHiddenChanged, &EventHiddenChanged_Parms, NULL );
};

// Function Engine.Actor.OnTimer
// [0x00140001] ( FUNC_Final )
// Parameters infos:

void AActor::OnTimer ( )
{
	static UFunction* pFnOnTimer = NULL;

	if ( ! pFnOnTimer )
		pFnOnTimer = (UFunction*) UObject::GObjObjects()->Data[ 7446 ];

	AActor_execOnTimer_Parms OnTimer_Parms;

	this->ProcessEvent ( pFnOnTimer, &OnTimer_Parms, NULL );
};

// Function Engine.WorldInfo.PrintDebugInfo
// [0x00020102] 
// Parameters infos:
// class UDebugDrawer*            Drawer                         ( CPF_Parm )

void AWorldInfo::PrintDebugInfo ( class UDebugDrawer* Drawer )
{
	static UFunction* pFnPrintDebugInfo = NULL;

	if ( ! pFnPrintDebugInfo )
		pFnPrintDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 20553 ];

	AWorldInfo_execPrintDebugInfo_Parms PrintDebugInfo_Parms;
	PrintDebugInfo_Parms.Drawer = Drawer;

	this->ProcessEvent ( pFnPrintDebugInfo, &PrintDebugInfo_Parms, NULL );
};

// Function Engine.WorldInfo.NeedsLightingRebuild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::NeedsLightingRebuild ( )
{
	static UFunction* pFnNeedsLightingRebuild = NULL;

	if ( ! pFnNeedsLightingRebuild )
		pFnNeedsLightingRebuild = (UFunction*) UObject::GObjObjects()->Data[ 20551 ];

	AWorldInfo_execNeedsLightingRebuild_Parms NeedsLightingRebuild_Parms;

	pFnNeedsLightingRebuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedsLightingRebuild, &NeedsLightingRebuild_Parms, NULL );

	pFnNeedsLightingRebuild->FunctionFlags |= 0x400;

	return NeedsLightingRebuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.EventTimeDilationChanged
// [0x00120000] 
// Parameters infos:
// class AWorldInfo*              WI                             ( CPF_Parm )

void AWorldInfo::EventTimeDilationChanged ( class AWorldInfo* WI )
{
	static UFunction* pFnEventTimeDilationChanged = NULL;

	if ( ! pFnEventTimeDilationChanged )
		pFnEventTimeDilationChanged = (UFunction*) UObject::GObjObjects()->Data[ 20549 ];

	AWorldInfo_execEventTimeDilationChanged_Parms EventTimeDilationChanged_Parms;
	EventTimeDilationChanged_Parms.WI = WI;

	this->ProcessEvent ( pFnEventTimeDilationChanged, &EventTimeDilationChanged_Parms, NULL );
};

// Function Engine.WorldInfo.SetTimeDilation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          NewVal                         ( CPF_Parm )

void AWorldInfo::eventSetTimeDilation ( float NewVal )
{
	static UFunction* pFnSetTimeDilation = NULL;

	if ( ! pFnSetTimeDilation )
		pFnSetTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 20546 ];

	AWorldInfo_eventSetTimeDilation_Parms SetTimeDilation_Parms;
	SetTimeDilation_Parms.NewVal = NewVal;

	this->ProcessEvent ( pFnSetTimeDilation, &SetTimeDilation_Parms, NULL );
};

// Function Engine.WorldInfo.ClearObjectPools
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::ClearObjectPools ( )
{
	static UFunction* pFnClearObjectPools = NULL;

	if ( ! pFnClearObjectPools )
		pFnClearObjectPools = (UFunction*) UObject::GObjObjects()->Data[ 20545 ];

	AWorldInfo_execClearObjectPools_Parms ClearObjectPools_Parms;

	pFnClearObjectPools->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearObjectPools, &ClearObjectPools_Parms, NULL );

	pFnClearObjectPools->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ToggleHostMigration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void AWorldInfo::ToggleHostMigration ( unsigned long bEnabled )
{
	static UFunction* pFnToggleHostMigration = NULL;

	if ( ! pFnToggleHostMigration )
		pFnToggleHostMigration = (UFunction*) UObject::GObjObjects()->Data[ 20543 ];

	AWorldInfo_execToggleHostMigration_Parms ToggleHostMigration_Parms;
	ToggleHostMigration_Parms.bEnabled = bEnabled;

	pFnToggleHostMigration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleHostMigration, &ToggleHostMigration_Parms, NULL );

	pFnToggleHostMigration->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.NotifyHostMigrationStateChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )
// unsigned char                  OldState                       ( CPF_Parm )

void AWorldInfo::eventNotifyHostMigrationStateChanged ( unsigned char NewState, unsigned char OldState )
{
	static UFunction* pFnNotifyHostMigrationStateChanged = NULL;

	if ( ! pFnNotifyHostMigrationStateChanged )
		pFnNotifyHostMigrationStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 20539 ];

	AWorldInfo_eventNotifyHostMigrationStateChanged_Parms NotifyHostMigrationStateChanged_Parms;
	NotifyHostMigrationStateChanged_Parms.NewState = NewState;
	NotifyHostMigrationStateChanged_Parms.OldState = OldState;

	this->ProcessEvent ( pFnNotifyHostMigrationStateChanged, &NotifyHostMigrationStateChanged_Parms, NULL );
};

// Function Engine.WorldInfo.BeginHostMigration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::BeginHostMigration ( )
{
	static UFunction* pFnBeginHostMigration = NULL;

	if ( ! pFnBeginHostMigration )
		pFnBeginHostMigration = (UFunction*) UObject::GObjObjects()->Data[ 20537 ];

	AWorldInfo_execBeginHostMigration_Parms BeginHostMigration_Parms;

	pFnBeginHostMigration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginHostMigration, &BeginHostMigration_Parms, NULL );

	pFnBeginHostMigration->FunctionFlags |= 0x400;

	return BeginHostMigration_Parms.ReturnValue;
};

// Function Engine.WorldInfo.CanBeginHostMigration
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::eventCanBeginHostMigration ( )
{
	static UFunction* pFnCanBeginHostMigration = NULL;

	if ( ! pFnCanBeginHostMigration )
		pFnCanBeginHostMigration = (UFunction*) UObject::GObjObjects()->Data[ 20534 ];

	AWorldInfo_eventCanBeginHostMigration_Parms CanBeginHostMigration_Parms;

	this->ProcessEvent ( pFnCanBeginHostMigration, &CanBeginHostMigration_Parms, NULL );

	return CanBeginHostMigration_Parms.ReturnValue;
};

// Function Engine.WorldInfo.FindEnvironmentVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AEnvironmentVolume*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )

class AEnvironmentVolume* AWorldInfo::FindEnvironmentVolume ( struct FVector TestLocation )
{
	static UFunction* pFnFindEnvironmentVolume = NULL;

	if ( ! pFnFindEnvironmentVolume )
		pFnFindEnvironmentVolume = (UFunction*) UObject::GObjObjects()->Data[ 20531 ];

	AWorldInfo_execFindEnvironmentVolume_Parms FindEnvironmentVolume_Parms;
	memcpy ( &FindEnvironmentVolume_Parms.TestLocation, &TestLocation, 0xC );

	pFnFindEnvironmentVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEnvironmentVolume, &FindEnvironmentVolume_Parms, NULL );

	pFnFindEnvironmentVolume->FunctionFlags |= 0x400;

	return FindEnvironmentVolume_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetWorldInfo
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* AWorldInfo::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 8785 ];

	AWorldInfo_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetWorldFractureSettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FWorldFractureSettings  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FWorldFractureSettings AWorldInfo::GetWorldFractureSettings ( )
{
	static UFunction* pFnGetWorldFractureSettings = NULL;

	if ( ! pFnGetWorldFractureSettings )
		pFnGetWorldFractureSettings = (UFunction*) UObject::GObjObjects()->Data[ 20520 ];

	AWorldInfo_execGetWorldFractureSettings_Parms GetWorldFractureSettings_Parms;

	pFnGetWorldFractureSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldFractureSettings, &GetWorldFractureSettings_Parms, NULL );

	pFnGetWorldFractureSettings->FunctionFlags |= 0x400;

	return GetWorldFractureSettings_Parms.ReturnValue;
};

// Function Engine.WorldInfo.DoMemoryTracking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::DoMemoryTracking ( )
{
	static UFunction* pFnDoMemoryTracking = NULL;

	if ( ! pFnDoMemoryTracking )
		pFnDoMemoryTracking = (UFunction*) UObject::GObjObjects()->Data[ 20519 ];

	AWorldInfo_execDoMemoryTracking_Parms DoMemoryTracking_Parms;

	pFnDoMemoryTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoMemoryTracking, &DoMemoryTracking_Parms, NULL );

	pFnDoMemoryTracking->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetDemoRewindPoints
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< int >                  OutRewindPoints                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AWorldInfo::GetDemoRewindPoints ( TArray< int >* OutRewindPoints )
{
	static UFunction* pFnGetDemoRewindPoints = NULL;

	if ( ! pFnGetDemoRewindPoints )
		pFnGetDemoRewindPoints = (UFunction*) UObject::GObjObjects()->Data[ 20515 ];

	AWorldInfo_execGetDemoRewindPoints_Parms GetDemoRewindPoints_Parms;

	pFnGetDemoRewindPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDemoRewindPoints, &GetDemoRewindPoints_Parms, NULL );

	pFnGetDemoRewindPoints->FunctionFlags |= 0x400;

	if ( OutRewindPoints )
		memcpy ( OutRewindPoints, &GetDemoRewindPoints_Parms.OutRewindPoints, 0xC );

	return GetDemoRewindPoints_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetDemoFrameInfo
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            CurrentFrame                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// int                            TotalFrames                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AWorldInfo::GetDemoFrameInfo ( int* CurrentFrame, int* TotalFrames )
{
	static UFunction* pFnGetDemoFrameInfo = NULL;

	if ( ! pFnGetDemoFrameInfo )
		pFnGetDemoFrameInfo = (UFunction*) UObject::GObjObjects()->Data[ 20512 ];

	AWorldInfo_execGetDemoFrameInfo_Parms GetDemoFrameInfo_Parms;

	pFnGetDemoFrameInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDemoFrameInfo, &GetDemoFrameInfo_Parms, NULL );

	pFnGetDemoFrameInfo->FunctionFlags |= 0x400;

	if ( CurrentFrame )
		*CurrentFrame = GetDemoFrameInfo_Parms.CurrentFrame;

	if ( TotalFrames )
		*TotalFrames = GetDemoFrameInfo_Parms.TotalFrames;
};

// Function Engine.WorldInfo.IsPlayingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayingDemo ( )
{
	static UFunction* pFnIsPlayingDemo = NULL;

	if ( ! pFnIsPlayingDemo )
		pFnIsPlayingDemo = (UFunction*) UObject::GObjObjects()->Data[ 20510 ];

	AWorldInfo_execIsPlayingDemo_Parms IsPlayingDemo_Parms;

	pFnIsPlayingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingDemo, &IsPlayingDemo_Parms, NULL );

	pFnIsPlayingDemo->FunctionFlags |= 0x400;

	return IsPlayingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsRecordingDemo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsRecordingDemo ( )
{
	static UFunction* pFnIsRecordingDemo = NULL;

	if ( ! pFnIsRecordingDemo )
		pFnIsRecordingDemo = (UFunction*) UObject::GObjObjects()->Data[ 20508 ];

	AWorldInfo_execIsRecordingDemo_Parms IsRecordingDemo_Parms;

	pFnIsRecordingDemo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRecordingDemo, &IsRecordingDemo_Parms, NULL );

	pFnIsRecordingDemo->FunctionFlags |= 0x400;

	return IsRecordingDemo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetDetailMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AWorldInfo::GetDetailMode ( )
{
	static UFunction* pFnGetDetailMode = NULL;

	if ( ! pFnGetDetailMode )
		pFnGetDetailMode = (UFunction*) UObject::GObjObjects()->Data[ 20506 ];

	AWorldInfo_execGetDetailMode_Parms GetDetailMode_Parms;

	pFnGetDetailMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDetailMode, &GetDetailMode_Parms, NULL );

	pFnGetDetailMode->FunctionFlags |= 0x400;

	return GetDetailMode_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetMapName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bIncludePrefix                 ( CPF_OptionalParm | CPF_Parm )

struct FString AWorldInfo::GetMapName ( unsigned long bIncludePrefix )
{
	static UFunction* pFnGetMapName = NULL;

	if ( ! pFnGetMapName )
		pFnGetMapName = (UFunction*) UObject::GObjObjects()->Data[ 11202 ];

	AWorldInfo_execGetMapName_Parms GetMapName_Parms;
	GetMapName_Parms.bIncludePrefix = bIncludePrefix;

	pFnGetMapName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapName, &GetMapName_Parms, NULL );

	pFnGetMapName->FunctionFlags |= 0x400;

	return GetMapName_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                NewMapInfo                     ( CPF_Parm )

void AWorldInfo::SetMapInfo ( class UMapInfo* NewMapInfo )
{
	static UFunction* pFnSetMapInfo = NULL;

	if ( ! pFnSetMapInfo )
		pFnSetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 20503 ];

	AWorldInfo_execSetMapInfo_Parms SetMapInfo_Parms;
	SetMapInfo_Parms.NewMapInfo = NewMapInfo;

	pFnSetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMapInfo, &SetMapInfo_Parms, NULL );

	pFnSetMapInfo->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.GetMapInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMapInfo*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMapInfo* AWorldInfo::GetMapInfo ( )
{
	static UFunction* pFnGetMapInfo = NULL;

	if ( ! pFnGetMapInfo )
		pFnGetMapInfo = (UFunction*) UObject::GObjObjects()->Data[ 20501 ];

	AWorldInfo_execGetMapInfo_Parms GetMapInfo_Parms;

	pFnGetMapInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapInfo, &GetMapInfo_Parms, NULL );

	pFnGetMapInfo->FunctionFlags |= 0x400;

	return GetMapInfo_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowPaused                     ( CPF_Parm )

void AWorldInfo::SetSeamlessTravelMidpointPause ( unsigned long bNowPaused )
{
	static UFunction* pFnSetSeamlessTravelMidpointPause = NULL;

	if ( ! pFnSetSeamlessTravelMidpointPause )
		pFnSetSeamlessTravelMidpointPause = (UFunction*) UObject::GObjObjects()->Data[ 20499 ];

	AWorldInfo_execSetSeamlessTravelMidpointPause_Parms SetSeamlessTravelMidpointPause_Parms;
	SetSeamlessTravelMidpointPause_Parms.bNowPaused = bNowPaused;

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSeamlessTravelMidpointPause, &SetSeamlessTravelMidpointPause_Parms, NULL );

	pFnSetSeamlessTravelMidpointPause->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsInSeamlessTravel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsInSeamlessTravel ( )
{
	static UFunction* pFnIsInSeamlessTravel = NULL;

	if ( ! pFnIsInSeamlessTravel )
		pFnIsInSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 20443 ];

	AWorldInfo_execIsInSeamlessTravel_Parms IsInSeamlessTravel_Parms;

	pFnIsInSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSeamlessTravel, &IsInSeamlessTravel_Parms, NULL );

	pFnIsInSeamlessTravel->FunctionFlags |= 0x400;

	return IsInSeamlessTravel_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SeamlessTravel
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid )
{
	static UFunction* pFnSeamlessTravel = NULL;

	if ( ! pFnSeamlessTravel )
		pFnSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 20494 ];

	AWorldInfo_execSeamlessTravel_Parms SeamlessTravel_Parms;
	memcpy ( &SeamlessTravel_Parms.URL, &URL, 0xC );
	SeamlessTravel_Parms.bAbsolute = bAbsolute;
	memcpy ( &SeamlessTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnSeamlessTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeamlessTravel, &SeamlessTravel_Parms, NULL );

	pFnSeamlessTravel->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.CommitMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::CommitMapChange ( )
{
	static UFunction* pFnCommitMapChange = NULL;

	if ( ! pFnCommitMapChange )
		pFnCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12599 ];

	AWorldInfo_execCommitMapChange_Parms CommitMapChange_Parms;

	pFnCommitMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommitMapChange, &CommitMapChange_Parms, NULL );

	pFnCommitMapChange->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.CancelPendingMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::CancelPendingMapChange ( )
{
	static UFunction* pFnCancelPendingMapChange = NULL;

	if ( ! pFnCancelPendingMapChange )
		pFnCancelPendingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12601 ];

	AWorldInfo_execCancelPendingMapChange_Parms CancelPendingMapChange_Parms;

	pFnCancelPendingMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelPendingMapChange, &CancelPendingMapChange_Parms, NULL );

	pFnCancelPendingMapChange->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsMapChangeReady
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsMapChangeReady ( )
{
	static UFunction* pFnIsMapChangeReady = NULL;

	if ( ! pFnIsMapChangeReady )
		pFnIsMapChangeReady = (UFunction*) UObject::GObjObjects()->Data[ 20492 ];

	AWorldInfo_execIsMapChangeReady_Parms IsMapChangeReady_Parms;

	pFnIsMapChangeReady->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMapChangeReady, &IsMapChangeReady_Parms, NULL );

	pFnIsMapChangeReady->FunctionFlags |= 0x400;

	return IsMapChangeReady_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsPreparingMapChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPreparingMapChange ( )
{
	static UFunction* pFnIsPreparingMapChange = NULL;

	if ( ! pFnIsPreparingMapChange )
		pFnIsPreparingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12595 ];

	AWorldInfo_execIsPreparingMapChange_Parms IsPreparingMapChange_Parms;

	pFnIsPreparingMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPreparingMapChange, &IsPreparingMapChange_Parms, NULL );

	pFnIsPreparingMapChange->FunctionFlags |= 0x400;

	return IsPreparingMapChange_Parms.ReturnValue;
};

// Function Engine.WorldInfo.PrepareMapChange
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FName >         LevelNames                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWorldInfo::PrepareMapChange ( TArray< struct FName >* LevelNames )
{
	static UFunction* pFnPrepareMapChange = NULL;

	if ( ! pFnPrepareMapChange )
		pFnPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12597 ];

	AWorldInfo_execPrepareMapChange_Parms PrepareMapChange_Parms;

	pFnPrepareMapChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrepareMapChange, &PrepareMapChange_Parms, NULL );

	pFnPrepareMapChange->FunctionFlags |= 0x400;

	if ( LevelNames )
		memcpy ( LevelNames, &PrepareMapChange_Parms.LevelNames, 0xC );
};

// Function Engine.WorldInfo.NotifyMatchStarted
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldActivateLevelStartupEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelBeginningEvents ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldActivateLevelLoadedEvents ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents )
{
	static UFunction* pFnNotifyMatchStarted = NULL;

	if ( ! pFnNotifyMatchStarted )
		pFnNotifyMatchStarted = (UFunction*) UObject::GObjObjects()->Data[ 20486 ];

	AWorldInfo_execNotifyMatchStarted_Parms NotifyMatchStarted_Parms;
	NotifyMatchStarted_Parms.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	NotifyMatchStarted_Parms.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	pFnNotifyMatchStarted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyMatchStarted, &NotifyMatchStarted_Parms, NULL );

	pFnNotifyMatchStarted->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.AllClientConnections
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm | CPF_OutParm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm | CPF_OutParm )
// int                            ClientPort                     ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllClientConnections ( class UPlayer** ClientConnection, struct FIpAddr* ClientIP, int* ClientPort )
{
	static UFunction* pFnAllClientConnections = NULL;

	if ( ! pFnAllClientConnections )
		pFnAllClientConnections = (UFunction*) UObject::GObjObjects()->Data[ 8670 ];

	AWorldInfo_execAllClientConnections_Parms AllClientConnections_Parms;

	pFnAllClientConnections->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllClientConnections, &AllClientConnections_Parms, NULL );

	pFnAllClientConnections->FunctionFlags |= 0x400;

	if ( ClientConnection )
		*ClientConnection = AllClientConnections_Parms.ClientConnection;

	if ( ClientIP )
		memcpy ( ClientIP, &AllClientConnections_Parms.ClientIP, 0x14 );

	if ( ClientPort )
		*ClientPort = AllClientConnections_Parms.ClientPort;
};

// Function Engine.WorldInfo.AllPawns
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_OptionalParm | CPF_Parm )
// float                          TestRadius                     ( CPF_OptionalParm | CPF_Parm )
// class APawn*                   P                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P )
{
	static UFunction* pFnAllPawns = NULL;

	if ( ! pFnAllPawns )
		pFnAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 20478 ];

	AWorldInfo_execAllPawns_Parms AllPawns_Parms;
	AllPawns_Parms.BaseClass = BaseClass;
	memcpy ( &AllPawns_Parms.TestLocation, &TestLocation, 0xC );
	AllPawns_Parms.TestRadius = TestRadius;

	pFnAllPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllPawns, &AllPawns_Parms, NULL );

	pFnAllPawns->FunctionFlags |= 0x400;

	if ( P )
		*P = AllPawns_Parms.P;
};

// Function Engine.WorldInfo.AllControllers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllControllers ( class UClass* BaseClass, class AController** C )
{
	static UFunction* pFnAllControllers = NULL;

	if ( ! pFnAllControllers )
		pFnAllControllers = (UFunction*) UObject::GObjObjects()->Data[ 8568 ];

	AWorldInfo_execAllControllers_Parms AllControllers_Parms;
	AllControllers_Parms.BaseClass = BaseClass;

	pFnAllControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllControllers, &AllControllers_Parms, NULL );

	pFnAllControllers->FunctionFlags |= 0x400;

	if ( C )
		*C = AllControllers_Parms.C;
};

// Function Engine.WorldInfo.NavigationPointCheck
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Point                          ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// TArray< class ANavigationPoint* > Navs                           ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class UReachSpec* >    Specs                          ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWorldInfo::NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs )
{
	static UFunction* pFnNavigationPointCheck = NULL;

	if ( ! pFnNavigationPointCheck )
		pFnNavigationPointCheck = (UFunction*) UObject::GObjObjects()->Data[ 20469 ];

	AWorldInfo_execNavigationPointCheck_Parms NavigationPointCheck_Parms;
	memcpy ( &NavigationPointCheck_Parms.Point, &Point, 0xC );
	memcpy ( &NavigationPointCheck_Parms.Extent, &Extent, 0xC );

	pFnNavigationPointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNavigationPointCheck, &NavigationPointCheck_Parms, NULL );

	pFnNavigationPointCheck->FunctionFlags |= 0x400;

	if ( Navs )
		memcpy ( Navs, &NavigationPointCheck_Parms.Navs, 0xC );

	if ( Specs )
		memcpy ( Specs, &NavigationPointCheck_Parms.Specs, 0xC );
};

// Function Engine.WorldInfo.RadiusNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N )
{
	static UFunction* pFnRadiusNavigationPoints = NULL;

	if ( ! pFnRadiusNavigationPoints )
		pFnRadiusNavigationPoints = (UFunction*) UObject::GObjObjects()->Data[ 20464 ];

	AWorldInfo_execRadiusNavigationPoints_Parms RadiusNavigationPoints_Parms;
	RadiusNavigationPoints_Parms.BaseClass = BaseClass;
	memcpy ( &RadiusNavigationPoints_Parms.Point, &Point, 0xC );
	RadiusNavigationPoints_Parms.Radius = Radius;

	pFnRadiusNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRadiusNavigationPoints, &RadiusNavigationPoints_Parms, NULL );

	pFnRadiusNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = RadiusNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.AllNavigationPoints
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class ANavigationPoint*        N                              ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N )
{
	static UFunction* pFnAllNavigationPoints = NULL;

	if ( ! pFnAllNavigationPoints )
		pFnAllNavigationPoints = (UFunction*) UObject::GObjObjects()->Data[ 11841 ];

	AWorldInfo_execAllNavigationPoints_Parms AllNavigationPoints_Parms;
	AllNavigationPoints_Parms.BaseClass = BaseClass;

	pFnAllNavigationPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllNavigationPoints, &AllNavigationPoints_Parms, NULL );

	pFnAllNavigationPoints->FunctionFlags |= 0x400;

	if ( N )
		*N = AllNavigationPoints_Parms.N;
};

// Function Engine.WorldInfo.Reset
// [0x00020002] 
// Parameters infos:

void AWorldInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 20461 ];

	AWorldInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.WorldInfo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20459 ];

	AWorldInfo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.PreBeginPlay
// [0x00020102] 
// Parameters infos:

void AWorldInfo::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20447 ];

	AWorldInfo_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.WorldInfo.ThisIsNeverExecuted
// [0x00020002] 
// Parameters infos:
// class ADefaultPhysicsVolume*   P                              ( CPF_Parm )

void AWorldInfo::ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P )
{
	static UFunction* pFnThisIsNeverExecuted = NULL;

	if ( ! pFnThisIsNeverExecuted )
		pFnThisIsNeverExecuted = (UFunction*) UObject::GObjObjects()->Data[ 20445 ];

	AWorldInfo_execThisIsNeverExecuted_Parms ThisIsNeverExecuted_Parms;
	ThisIsNeverExecuted_Parms.P = P;

	this->ProcessEvent ( pFnThisIsNeverExecuted, &ThisIsNeverExecuted_Parms, NULL );
};

// Function Engine.WorldInfo.ServerTravel
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldSkipGameNotify          ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::eventServerTravel ( struct FString URL, unsigned long bAbsolute, unsigned long bShouldSkipGameNotify )
{
	static UFunction* pFnServerTravel = NULL;

	if ( ! pFnServerTravel )
		pFnServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 20437 ];

	AWorldInfo_eventServerTravel_Parms ServerTravel_Parms;
	memcpy ( &ServerTravel_Parms.URL, &URL, 0xC );
	ServerTravel_Parms.bAbsolute = bAbsolute;
	ServerTravel_Parms.bShouldSkipGameNotify = bShouldSkipGameNotify;

	this->ProcessEvent ( pFnServerTravel, &ServerTravel_Parms, NULL );
};

// Function Engine.WorldInfo.GetGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWorldInfo::GetGameClass ( )
{
	static UFunction* pFnGetGameClass = NULL;

	if ( ! pFnGetGameClass )
		pFnGetGameClass = (UFunction*) UObject::GObjObjects()->Data[ 11204 ];

	AWorldInfo_execGetGameClass_Parms GetGameClass_Parms;

	this->ProcessEvent ( pFnGetGameClass, &GetGameClass_Parms, NULL );

	return GetGameClass_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetAddressURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AWorldInfo::GetAddressURL ( )
{
	static UFunction* pFnGetAddressURL = NULL;

	if ( ! pFnGetAddressURL )
		pFnGetAddressURL = (UFunction*) UObject::GObjObjects()->Data[ 20435 ];

	AWorldInfo_execGetAddressURL_Parms GetAddressURL_Parms;

	pFnGetAddressURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAddressURL, &GetAddressURL_Parms, NULL );

	pFnGetAddressURL->FunctionFlags |= 0x400;

	return GetAddressURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.VerifyNavList
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AWorldInfo::VerifyNavList ( )
{
	static UFunction* pFnVerifyNavList = NULL;

	if ( ! pFnVerifyNavList )
		pFnVerifyNavList = (UFunction*) UObject::GObjObjects()->Data[ 20434 ];

	AWorldInfo_execVerifyNavList_Parms VerifyNavList_Parms;

	pFnVerifyNavList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavList, &VerifyNavList_Parms, NULL );

	pFnVerifyNavList->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ForceGarbageCollection
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFullPurge                     ( CPF_OptionalParm | CPF_Parm )

void AWorldInfo::ForceGarbageCollection ( unsigned long bFullPurge )
{
	static UFunction* pFnForceGarbageCollection = NULL;

	if ( ! pFnForceGarbageCollection )
		pFnForceGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 12573 ];

	AWorldInfo_execForceGarbageCollection_Parms ForceGarbageCollection_Parms;
	ForceGarbageCollection_Parms.bFullPurge = bFullPurge;

	pFnForceGarbageCollection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGarbageCollection, &ForceGarbageCollection_Parms, NULL );

	pFnForceGarbageCollection->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsPlayInMobilePreview
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayInMobilePreview ( )
{
	static UFunction* pFnIsPlayInMobilePreview = NULL;

	if ( ! pFnIsPlayInMobilePreview )
		pFnIsPlayInMobilePreview = (UFunction*) UObject::GObjObjects()->Data[ 20431 ];

	AWorldInfo_execIsPlayInMobilePreview_Parms IsPlayInMobilePreview_Parms;

	pFnIsPlayInMobilePreview->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayInMobilePreview, &IsPlayInMobilePreview_Parms, NULL );

	pFnIsPlayInMobilePreview->FunctionFlags |= 0x400;

	return IsPlayInMobilePreview_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsPlayInPreview
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayInPreview ( )
{
	static UFunction* pFnIsPlayInPreview = NULL;

	if ( ! pFnIsPlayInPreview )
		pFnIsPlayInPreview = (UFunction*) UObject::GObjObjects()->Data[ 20429 ];

	AWorldInfo_execIsPlayInPreview_Parms IsPlayInPreview_Parms;

	pFnIsPlayInPreview->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayInPreview, &IsPlayInPreview_Parms, NULL );

	pFnIsPlayInPreview->FunctionFlags |= 0x400;

	return IsPlayInPreview_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsPlayInEditor
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsPlayInEditor ( )
{
	static UFunction* pFnIsPlayInEditor = NULL;

	if ( ! pFnIsPlayInEditor )
		pFnIsPlayInEditor = (UFunction*) UObject::GObjObjects()->Data[ 20427 ];

	AWorldInfo_execIsPlayInEditor_Parms IsPlayInEditor_Parms;

	pFnIsPlayInEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayInEditor, &IsPlayInEditor_Parms, NULL );

	pFnIsPlayInEditor->FunctionFlags |= 0x400;

	return IsPlayInEditor_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsWithGFx
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsWithGFx ( )
{
	static UFunction* pFnIsWithGFx = NULL;

	if ( ! pFnIsWithGFx )
		pFnIsWithGFx = (UFunction*) UObject::GObjObjects()->Data[ 20425 ];

	AWorldInfo_execIsWithGFx_Parms IsWithGFx_Parms;

	pFnIsWithGFx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWithGFx, &IsWithGFx_Parms, NULL );

	pFnIsWithGFx->FunctionFlags |= 0x400;

	return IsWithGFx_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsConsoleBuild
// [0x00026501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConsoleType                    ( CPF_OptionalParm | CPF_Parm )

bool AWorldInfo::IsConsoleBuild ( unsigned char ConsoleType )
{
	static UFunction* pFnIsConsoleBuild = NULL;

	if ( ! pFnIsConsoleBuild )
		pFnIsConsoleBuild = (UFunction*) UObject::GObjObjects()->Data[ 8581 ];

	AWorldInfo_execIsConsoleBuild_Parms IsConsoleBuild_Parms;
	IsConsoleBuild_Parms.ConsoleType = ConsoleType;

	pFnIsConsoleBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsConsoleBuild, &IsConsoleBuild_Parms, NULL );

	pFnIsConsoleBuild->FunctionFlags |= 0x400;

	return IsConsoleBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.IsDemoBuild
// [0x00022501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWorldInfo::IsDemoBuild ( )
{
	static UFunction* pFnIsDemoBuild = NULL;

	if ( ! pFnIsDemoBuild )
		pFnIsDemoBuild = (UFunction*) UObject::GObjObjects()->Data[ 20420 ];

	AWorldInfo_execIsDemoBuild_Parms IsDemoBuild_Parms;

	pFnIsDemoBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDemoBuild, &IsDemoBuild_Parms, NULL );

	pFnIsDemoBuild->FunctionFlags |= 0x400;

	return IsDemoBuild_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetLocalURL
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AWorldInfo::GetLocalURL ( )
{
	static UFunction* pFnGetLocalURL = NULL;

	if ( ! pFnGetLocalURL )
		pFnGetLocalURL = (UFunction*) UObject::GObjObjects()->Data[ 20418 ];

	AWorldInfo_execGetLocalURL_Parms GetLocalURL_Parms;

	pFnGetLocalURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalURL, &GetLocalURL_Parms, NULL );

	pFnGetLocalURL->FunctionFlags |= 0x400;

	return GetLocalURL_Parms.ReturnValue;
};

// Function Engine.WorldInfo.SetLevelRBGravity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewGrav                        ( CPF_Parm )

void AWorldInfo::SetLevelRBGravity ( struct FVector NewGrav )
{
	static UFunction* pFnSetLevelRBGravity = NULL;

	if ( ! pFnSetLevelRBGravity )
		pFnSetLevelRBGravity = (UFunction*) UObject::GObjObjects()->Data[ 20416 ];

	AWorldInfo_execSetLevelRBGravity_Parms SetLevelRBGravity_Parms;
	memcpy ( &SetLevelRBGravity_Parms.NewGrav, &NewGrav, 0xC );

	pFnSetLevelRBGravity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLevelRBGravity, &SetLevelRBGravity_Parms, NULL );

	pFnSetLevelRBGravity->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.AllSequenceObjects
// [0x00420505] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  SeqClass                       ( CPF_Parm )
// class USequenceObject*         OutObj                         ( CPF_Parm | CPF_OutParm )

void AWorldInfo::AllSequenceObjects ( class UClass* SeqClass, class USequenceObject** OutObj )
{
	static UFunction* pFnAllSequenceObjects = NULL;

	if ( ! pFnAllSequenceObjects )
		pFnAllSequenceObjects = (UFunction*) UObject::GObjObjects()->Data[ 20413 ];

	AWorldInfo_execAllSequenceObjects_Parms AllSequenceObjects_Parms;
	AllSequenceObjects_Parms.SeqClass = SeqClass;

	pFnAllSequenceObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllSequenceObjects, &AllSequenceObjects_Parms, NULL );

	pFnAllSequenceObjects->FunctionFlags |= 0x400;

	if ( OutObj )
		*OutObj = AllSequenceObjects_Parms.OutObj;
};

// Function Engine.WorldInfo.GetAllRootSequences
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class USequence* >     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< class USequence* > AWorldInfo::GetAllRootSequences ( )
{
	static UFunction* pFnGetAllRootSequences = NULL;

	if ( ! pFnGetAllRootSequences )
		pFnGetAllRootSequences = (UFunction*) UObject::GObjObjects()->Data[ 20410 ];

	AWorldInfo_execGetAllRootSequences_Parms GetAllRootSequences_Parms;

	pFnGetAllRootSequences->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllRootSequences, &GetAllRootSequences_Parms, NULL );

	pFnGetAllRootSequences->FunctionFlags |= 0x400;

	return GetAllRootSequences_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGameSequence
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USequence*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USequence* AWorldInfo::GetGameSequence ( )
{
	static UFunction* pFnGetGameSequence = NULL;

	if ( ! pFnGetGameSequence )
		pFnGetGameSequence = (UFunction*) UObject::GObjObjects()->Data[ 7107 ];

	AWorldInfo_execGetGameSequence_Parms GetGameSequence_Parms;

	pFnGetGameSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameSequence, &GetGameSequence_Parms, NULL );

	pFnGetGameSequence->FunctionFlags |= 0x400;

	return GetGameSequence_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGravityDirection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AWorldInfo::GetGravityDirection ( )
{
	static UFunction* pFnGetGravityDirection = NULL;

	if ( ! pFnGetGravityDirection )
		pFnGetGravityDirection = (UFunction*) UObject::GObjObjects()->Data[ 20408 ];

	AWorldInfo_execGetGravityDirection_Parms GetGravityDirection_Parms;

	pFnGetGravityDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityDirection, &GetGravityDirection_Parms, NULL );

	pFnGetGravityDirection->FunctionFlags |= 0x400;

	return GetGravityDirection_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWorldInfo::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 20406 ];

	AWorldInfo_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.WorldInfo.UpdateMusicTrack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMusicTrackStruct       NewMusicTrack                  ( CPF_Parm | CPF_NeedCtorLink )

void AWorldInfo::UpdateMusicTrack ( struct FMusicTrackStruct NewMusicTrack )
{
	static UFunction* pFnUpdateMusicTrack = NULL;

	if ( ! pFnUpdateMusicTrack )
		pFnUpdateMusicTrack = (UFunction*) UObject::GObjObjects()->Data[ 20383 ];

	AWorldInfo_execUpdateMusicTrack_Parms UpdateMusicTrack_Parms;
	memcpy ( &UpdateMusicTrack_Parms.NewMusicTrack, &NewMusicTrack, 0x24 );

	pFnUpdateMusicTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMusicTrack, &UpdateMusicTrack_Parms, NULL );

	pFnUpdateMusicTrack->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.SetMusicVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          VolumeMultiplier               ( CPF_Parm )

void AWorldInfo::SetMusicVolume ( float VolumeMultiplier )
{
	static UFunction* pFnSetMusicVolume = NULL;

	if ( ! pFnSetMusicVolume )
		pFnSetMusicVolume = (UFunction*) UObject::GObjObjects()->Data[ 20394 ];

	AWorldInfo_execSetMusicVolume_Parms SetMusicVolume_Parms;
	SetMusicVolume_Parms.VolumeMultiplier = VolumeMultiplier;

	pFnSetMusicVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMusicVolume, &SetMusicVolume_Parms, NULL );

	pFnSetMusicVolume->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.IsMenuLevel
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool AWorldInfo::IsMenuLevel ( struct FString MapName )
{
	static UFunction* pFnIsMenuLevel = NULL;

	if ( ! pFnIsMenuLevel )
		pFnIsMenuLevel = (UFunction*) UObject::GObjObjects()->Data[ 20391 ];

	AWorldInfo_execIsMenuLevel_Parms IsMenuLevel_Parms;
	memcpy ( &IsMenuLevel_Parms.MapName, &MapName, 0xC );

	pFnIsMenuLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMenuLevel, &IsMenuLevel_Parms, NULL );

	pFnIsMenuLevel->FunctionFlags |= 0x400;

	return IsMenuLevel_Parms.ReturnValue;
};

// Function Engine.WorldInfo.AddOnScreenDebugMessage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Key                            ( CPF_Parm )
// float                          TimeToDisplay                  ( CPF_Parm )
// struct FColor                  DisplayColor                   ( CPF_Parm )
// struct FString                 DebugMessage                   ( CPF_Parm | CPF_NeedCtorLink )

void AWorldInfo::AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage )
{
	static UFunction* pFnAddOnScreenDebugMessage = NULL;

	if ( ! pFnAddOnScreenDebugMessage )
		pFnAddOnScreenDebugMessage = (UFunction*) UObject::GObjObjects()->Data[ 20386 ];

	AWorldInfo_execAddOnScreenDebugMessage_Parms AddOnScreenDebugMessage_Parms;
	AddOnScreenDebugMessage_Parms.Key = Key;
	AddOnScreenDebugMessage_Parms.TimeToDisplay = TimeToDisplay;
	memcpy ( &AddOnScreenDebugMessage_Parms.DisplayColor, &DisplayColor, 0x4 );
	memcpy ( &AddOnScreenDebugMessage_Parms.DebugMessage, &DebugMessage, 0xC );

	pFnAddOnScreenDebugMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOnScreenDebugMessage, &AddOnScreenDebugMessage_Parms, NULL );

	pFnAddOnScreenDebugMessage->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AWorldInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 20381 ];

	AWorldInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathGoalEvaluator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )
// class UNavigationHandle*       Requestor                      ( CPF_Parm )

class UNavMeshPathGoalEvaluator* AWorldInfo::GetNavMeshPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class UNavigationHandle* Requestor )
{
	static UFunction* pFnGetNavMeshPathGoalEvaluatorFromCache = NULL;

	if ( ! pFnGetNavMeshPathGoalEvaluatorFromCache )
		pFnGetNavMeshPathGoalEvaluatorFromCache = (UFunction*) UObject::GObjObjects()->Data[ 20377 ];

	AWorldInfo_execGetNavMeshPathGoalEvaluatorFromCache_Parms GetNavMeshPathGoalEvaluatorFromCache_Parms;
	GetNavMeshPathGoalEvaluatorFromCache_Parms.GoalEvalClass = GoalEvalClass;
	GetNavMeshPathGoalEvaluatorFromCache_Parms.Requestor = Requestor;

	pFnGetNavMeshPathGoalEvaluatorFromCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNavMeshPathGoalEvaluatorFromCache, &GetNavMeshPathGoalEvaluatorFromCache_Parms, NULL );

	pFnGetNavMeshPathGoalEvaluatorFromCache->FunctionFlags |= 0x400;

	return GetNavMeshPathGoalEvaluatorFromCache_Parms.ReturnValue;
};

// Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathConstraint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )
// class UNavigationHandle*       Requestor                      ( CPF_Parm )

class UNavMeshPathConstraint* AWorldInfo::GetNavMeshPathConstraintFromCache ( class UClass* ConstraintClass, class UNavigationHandle* Requestor )
{
	static UFunction* pFnGetNavMeshPathConstraintFromCache = NULL;

	if ( ! pFnGetNavMeshPathConstraintFromCache )
		pFnGetNavMeshPathConstraintFromCache = (UFunction*) UObject::GObjObjects()->Data[ 20373 ];

	AWorldInfo_execGetNavMeshPathConstraintFromCache_Parms GetNavMeshPathConstraintFromCache_Parms;
	GetNavMeshPathConstraintFromCache_Parms.ConstraintClass = ConstraintClass;
	GetNavMeshPathConstraintFromCache_Parms.Requestor = Requestor;

	pFnGetNavMeshPathConstraintFromCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNavMeshPathConstraintFromCache, &GetNavMeshPathConstraintFromCache_Parms, NULL );

	pFnGetNavMeshPathConstraintFromCache->FunctionFlags |= 0x400;

	return GetNavMeshPathConstraintFromCache_Parms.ReturnValue;
};

// Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AWorldInfo::ReleaseCachedConstraintsAndEvaluators ( )
{
	static UFunction* pFnReleaseCachedConstraintsAndEvaluators = NULL;

	if ( ! pFnReleaseCachedConstraintsAndEvaluators )
		pFnReleaseCachedConstraintsAndEvaluators = (UFunction*) UObject::GObjObjects()->Data[ 20371 ];

	AWorldInfo_execReleaseCachedConstraintsAndEvaluators_Parms ReleaseCachedConstraintsAndEvaluators_Parms;

	pFnReleaseCachedConstraintsAndEvaluators->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseCachedConstraintsAndEvaluators, &ReleaseCachedConstraintsAndEvaluators_Parms, NULL );

	pFnReleaseCachedConstraintsAndEvaluators->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.SetPitchTekTargetsInitialState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AWorldInfo::SetPitchTekTargetsInitialState ( )
{
	static UFunction* pFnSetPitchTekTargetsInitialState = NULL;

	if ( ! pFnSetPitchTekTargetsInitialState )
		pFnSetPitchTekTargetsInitialState = (UFunction*) UObject::GObjObjects()->Data[ 20372 ];

	AWorldInfo_execSetPitchTekTargetsInitialState_Parms SetPitchTekTargetsInitialState_Parms;

	pFnSetPitchTekTargetsInitialState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPitchTekTargetsInitialState, &SetPitchTekTargetsInitialState_Parms, NULL );

	pFnSetPitchTekTargetsInitialState->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.SetPauser
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerReplicationInfo*  InPauser                       ( CPF_Parm )

void AWorldInfo::SetPauser ( class APlayerReplicationInfo* InPauser )
{
	static UFunction* pFnSetPauser = NULL;

	if ( ! pFnSetPauser )
		pFnSetPauser = (UFunction*) UObject::GObjObjects()->Data[ 20369 ];

	AWorldInfo_execSetPauser_Parms SetPauser_Parms;
	SetPauser_Parms.InPauser = InPauser;

	pFnSetPauser->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPauser, &SetPauser_Parms, NULL );

	pFnSetPauser->FunctionFlags |= 0x400;
};

// Function Engine.WorldInfo.EventPauseChanged
// [0x00120000] 
// Parameters infos:

void AWorldInfo::EventPauseChanged ( )
{
	static UFunction* pFnEventPauseChanged = NULL;

	if ( ! pFnEventPauseChanged )
		pFnEventPauseChanged = (UFunction*) UObject::GObjObjects()->Data[ 20368 ];

	AWorldInfo_execEventPauseChanged_Parms EventPauseChanged_Parms;

	this->ProcessEvent ( pFnEventPauseChanged, &EventPauseChanged_Parms, NULL );
};

// Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UDownloadableContentEnumerator::TriggerFindDLCDelegates ( )
{
	static UFunction* pFnTriggerFindDLCDelegates = NULL;

	if ( ! pFnTriggerFindDLCDelegates )
		pFnTriggerFindDLCDelegates = (UFunction*) UObject::GObjObjects()->Data[ 18681 ];

	UDownloadableContentEnumerator_execTriggerFindDLCDelegates_Parms TriggerFindDLCDelegates_Parms;

	pFnTriggerFindDLCDelegates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerFindDLCDelegates, &TriggerFindDLCDelegates_Parms, NULL );

	pFnTriggerFindDLCDelegates->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentEnumerator.InstallDLC
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 DLCName                        ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentEnumerator::InstallDLC ( struct FString DLCName )
{
	static UFunction* pFnInstallDLC = NULL;

	if ( ! pFnInstallDLC )
		pFnInstallDLC = (UFunction*) UObject::GObjObjects()->Data[ 18679 ];

	UDownloadableContentEnumerator_execInstallDLC_Parms InstallDLC_Parms;
	memcpy ( &InstallDLC_Parms.DLCName, &DLCName, 0xC );

	pFnInstallDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstallDLC, &InstallDLC_Parms, NULL );

	pFnInstallDLC->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentEnumerator.InstallAllDLC
// [0x00020002] 
// Parameters infos:

void UDownloadableContentEnumerator::InstallAllDLC ( )
{
	static UFunction* pFnInstallAllDLC = NULL;

	if ( ! pFnInstallAllDLC )
		pFnInstallAllDLC = (UFunction*) UObject::GObjObjects()->Data[ 18675 ];

	UDownloadableContentEnumerator_execInstallAllDLC_Parms InstallAllDLC_Parms;

	this->ProcessEvent ( pFnInstallAllDLC, &InstallAllDLC_Parms, NULL );
};

// Function Engine.DownloadableContentEnumerator.DeleteDLC
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 DLCName                        ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentEnumerator::DeleteDLC ( struct FString DLCName )
{
	static UFunction* pFnDeleteDLC = NULL;

	if ( ! pFnDeleteDLC )
		pFnDeleteDLC = (UFunction*) UObject::GObjObjects()->Data[ 18673 ];

	UDownloadableContentEnumerator_execDeleteDLC_Parms DeleteDLC_Parms;
	memcpy ( &DeleteDLC_Parms.DLCName, &DLCName, 0xC );

	pFnDeleteDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeleteDLC, &DeleteDLC_Parms, NULL );

	pFnDeleteDLC->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentEnumerator::ClearFindDLCDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearFindDLCDelegate = NULL;

	if ( ! pFnClearFindDLCDelegate )
		pFnClearFindDLCDelegate = (UFunction*) UObject::GObjObjects()->Data[ 18670 ];

	UDownloadableContentEnumerator_execClearFindDLCDelegate_Parms ClearFindDLCDelegate_Parms;
	memcpy ( &ClearFindDLCDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFindDLCDelegate, &ClearFindDLCDelegate_Parms, NULL );
};

// Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentEnumerator::AddFindDLCDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddFindDLCDelegate = NULL;

	if ( ! pFnAddFindDLCDelegate )
		pFnAddFindDLCDelegate = (UFunction*) UObject::GObjObjects()->Data[ 18668 ];

	UDownloadableContentEnumerator_execAddFindDLCDelegate_Parms AddFindDLCDelegate_Parms;
	memcpy ( &AddFindDLCDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFindDLCDelegate, &AddFindDLCDelegate_Parms, NULL );
};

// Function Engine.DownloadableContentEnumerator.OnFindDLCComplete
// [0x00120000] 
// Parameters infos:

void UDownloadableContentEnumerator::OnFindDLCComplete ( )
{
	static UFunction* pFnOnFindDLCComplete = NULL;

	if ( ! pFnOnFindDLCComplete )
		pFnOnFindDLCComplete = (UFunction*) UObject::GObjObjects()->Data[ 18664 ];

	UDownloadableContentEnumerator_execOnFindDLCComplete_Parms OnFindDLCComplete_Parms;

	this->ProcessEvent ( pFnOnFindDLCComplete, &OnFindDLCComplete_Parms, NULL );
};

// Function Engine.DownloadableContentEnumerator.FindDLC
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UDownloadableContentEnumerator::FindDLC ( )
{
	static UFunction* pFnFindDLC = NULL;

	if ( ! pFnFindDLC )
		pFnFindDLC = (UFunction*) UObject::GObjObjects()->Data[ 18667 ];

	UDownloadableContentEnumerator_execFindDLC_Parms FindDLC_Parms;

	pFnFindDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindDLC, &FindDLC_Parms, NULL );

	pFnFindDLC->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentManager.OnRefreshComplete
// [0x00120000] 
// Parameters infos:

void UDownloadableContentManager::OnRefreshComplete ( )
{
	static UFunction* pFnOnRefreshComplete = NULL;

	if ( ! pFnOnRefreshComplete )
		pFnOnRefreshComplete = (UFunction*) UObject::GObjObjects()->Data[ 18693 ];

	UDownloadableContentManager_execOnRefreshComplete_Parms OnRefreshComplete_Parms;

	this->ProcessEvent ( pFnOnRefreshComplete, &OnRefreshComplete_Parms, NULL );
};

// Function Engine.DownloadableContentManager.AddPackagesToFullyLoad
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentManager::AddPackagesToFullyLoad ( struct FString Filename )
{
	static UFunction* pFnAddPackagesToFullyLoad = NULL;

	if ( ! pFnAddPackagesToFullyLoad )
		pFnAddPackagesToFullyLoad = (UFunction*) UObject::GObjObjects()->Data[ 18728 ];

	UDownloadableContentManager_execAddPackagesToFullyLoad_Parms AddPackagesToFullyLoad_Parms;
	memcpy ( &AddPackagesToFullyLoad_Parms.Filename, &Filename, 0xC );

	pFnAddPackagesToFullyLoad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPackagesToFullyLoad, &AddPackagesToFullyLoad_Parms, NULL );

	pFnAddPackagesToFullyLoad->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentManager.RefreshDLCEnumComplete
// [0x00020002] 
// Parameters infos:

void UDownloadableContentManager::RefreshDLCEnumComplete ( )
{
	static UFunction* pFnRefreshDLCEnumComplete = NULL;

	if ( ! pFnRefreshDLCEnumComplete )
		pFnRefreshDLCEnumComplete = (UFunction*) UObject::GObjObjects()->Data[ 18726 ];

	UDownloadableContentManager_execRefreshDLCEnumComplete_Parms RefreshDLCEnumComplete_Parms;

	this->ProcessEvent ( pFnRefreshDLCEnumComplete, &RefreshDLCEnumComplete_Parms, NULL );
};

// Function Engine.DownloadableContentManager.RefreshDLC
// [0x00020002] 
// Parameters infos:

void UDownloadableContentManager::RefreshDLC ( )
{
	static UFunction* pFnRefreshDLC = NULL;

	if ( ! pFnRefreshDLC )
		pFnRefreshDLC = (UFunction*) UObject::GObjObjects()->Data[ 18722 ];

	UDownloadableContentManager_execRefreshDLC_Parms RefreshDLC_Parms;

	this->ProcessEvent ( pFnRefreshDLC, &RefreshDLC_Parms, NULL );
};

// Function Engine.DownloadableContentManager.OnContentChange
// [0x00020002] 
// Parameters infos:

void UDownloadableContentManager::OnContentChange ( )
{
	static UFunction* pFnOnContentChange = NULL;

	if ( ! pFnOnContentChange )
		pFnOnContentChange = (UFunction*) UObject::GObjObjects()->Data[ 18721 ];

	UDownloadableContentManager_execOnContentChange_Parms OnContentChange_Parms;

	this->ProcessEvent ( pFnOnContentChange, &OnContentChange_Parms, NULL );
};

// Function Engine.DownloadableContentManager.OnStorageDeviceChange
// [0x00020002] 
// Parameters infos:

void UDownloadableContentManager::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = (UFunction*) UObject::GObjObjects()->Data[ 18720 ];

	UDownloadableContentManager_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.DownloadableContentManager.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UDownloadableContentManager::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 18718 ];

	UDownloadableContentManager_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.DownloadableContentManager.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UDownloadableContentManager::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 18716 ];

	UDownloadableContentManager_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.DownloadableContentManager.InstallNonPackageFiles
// [0x00480400] ( FUNC_Native )
// Parameters infos:
// struct FOnlineContent          DLCBundle                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDownloadableContentManager::InstallNonPackageFiles ( struct FOnlineContent* DLCBundle )
{
	static UFunction* pFnInstallNonPackageFiles = NULL;

	if ( ! pFnInstallNonPackageFiles )
		pFnInstallNonPackageFiles = (UFunction*) UObject::GObjObjects()->Data[ 18714 ];

	UDownloadableContentManager_execInstallNonPackageFiles_Parms InstallNonPackageFiles_Parms;

	pFnInstallNonPackageFiles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstallNonPackageFiles, &InstallNonPackageFiles_Parms, NULL );

	pFnInstallNonPackageFiles->FunctionFlags |= 0x400;

	if ( DLCBundle )
		memcpy ( DLCBundle, &InstallNonPackageFiles_Parms.DLCBundle, 0x4C );
};

// Function Engine.DownloadableContentManager.InstallPackages
// [0x00480400] ( FUNC_Native )
// Parameters infos:
// struct FOnlineContent          DLCBundle                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDownloadableContentManager::InstallPackages ( struct FOnlineContent* DLCBundle )
{
	static UFunction* pFnInstallPackages = NULL;

	if ( ! pFnInstallPackages )
		pFnInstallPackages = (UFunction*) UObject::GObjObjects()->Data[ 18712 ];

	UDownloadableContentManager_execInstallPackages_Parms InstallPackages_Parms;

	pFnInstallPackages->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstallPackages, &InstallPackages_Parms, NULL );

	pFnInstallPackages->FunctionFlags |= 0x400;

	if ( DLCBundle )
		memcpy ( DLCBundle, &InstallPackages_Parms.DLCBundle, 0x4C );
};

// Function Engine.DownloadableContentManager.UpdateObjectLists
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UDownloadableContentManager::UpdateObjectLists ( )
{
	static UFunction* pFnUpdateObjectLists = NULL;

	if ( ! pFnUpdateObjectLists )
		pFnUpdateObjectLists = (UFunction*) UObject::GObjObjects()->Data[ 18711 ];

	UDownloadableContentManager_execUpdateObjectLists_Parms UpdateObjectLists_Parms;

	pFnUpdateObjectLists->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateObjectLists, &UpdateObjectLists_Parms, NULL );

	pFnUpdateObjectLists->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Section                        ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentManager::MarkPerObjectConfigPendingKill ( struct FString Section )
{
	static UFunction* pFnMarkPerObjectConfigPendingKill = NULL;

	if ( ! pFnMarkPerObjectConfigPendingKill )
		pFnMarkPerObjectConfigPendingKill = (UFunction*) UObject::GObjObjects()->Data[ 18709 ];

	UDownloadableContentManager_execMarkPerObjectConfigPendingKill_Parms MarkPerObjectConfigPendingKill_Parms;
	memcpy ( &MarkPerObjectConfigPendingKill_Parms.Section, &Section, 0xC );

	pFnMarkPerObjectConfigPendingKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMarkPerObjectConfigPendingKill, &MarkPerObjectConfigPendingKill_Parms, NULL );

	pFnMarkPerObjectConfigPendingKill->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentManager.AddSectionToObjectList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Section                        ( CPF_Parm | CPF_NeedCtorLink )

void UDownloadableContentManager::AddSectionToObjectList ( struct FString Section )
{
	static UFunction* pFnAddSectionToObjectList = NULL;

	if ( ! pFnAddSectionToObjectList )
		pFnAddSectionToObjectList = (UFunction*) UObject::GObjObjects()->Data[ 18707 ];

	UDownloadableContentManager_execAddSectionToObjectList_Parms AddSectionToObjectList_Parms;
	memcpy ( &AddSectionToObjectList_Parms.Section, &Section, 0xC );

	pFnAddSectionToObjectList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSectionToObjectList, &AddSectionToObjectList_Parms, NULL );

	pFnAddSectionToObjectList->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NonPackageFileName             ( CPF_Parm )
// struct FString                 Path                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UDownloadableContentManager::GetDLCNonPackageFilePath ( struct FName NonPackageFileName, struct FString* Path )
{
	static UFunction* pFnGetDLCNonPackageFilePath = NULL;

	if ( ! pFnGetDLCNonPackageFilePath )
		pFnGetDLCNonPackageFilePath = (UFunction*) UObject::GObjObjects()->Data[ 18703 ];

	UDownloadableContentManager_execGetDLCNonPackageFilePath_Parms GetDLCNonPackageFilePath_Parms;
	memcpy ( &GetDLCNonPackageFilePath_Parms.NonPackageFileName, &NonPackageFileName, 0x8 );

	pFnGetDLCNonPackageFilePath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDLCNonPackageFilePath, &GetDLCNonPackageFilePath_Parms, NULL );

	pFnGetDLCNonPackageFilePath->FunctionFlags |= 0x400;

	if ( Path )
		memcpy ( Path, &GetDLCNonPackageFilePath_Parms.Path, 0xC );

	return GetDLCNonPackageFilePath_Parms.ReturnValue;
};

// Function Engine.DownloadableContentManager.ClearDLC
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UDownloadableContentManager::ClearDLC ( )
{
	static UFunction* pFnClearDLC = NULL;

	if ( ! pFnClearDLC )
		pFnClearDLC = (UFunction*) UObject::GObjObjects()->Data[ 18702 ];

	UDownloadableContentManager_execClearDLC_Parms ClearDLC_Parms;

	pFnClearDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearDLC, &ClearDLC_Parms, NULL );

	pFnClearDLC->FunctionFlags |= 0x400;
};

// Function Engine.DownloadableContentManager.InstallDLCs
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FOnlineContent > DLCBundles                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDownloadableContentManager::InstallDLCs ( TArray< struct FOnlineContent >* DLCBundles )
{
	static UFunction* pFnInstallDLCs = NULL;

	if ( ! pFnInstallDLCs )
		pFnInstallDLCs = (UFunction*) UObject::GObjObjects()->Data[ 18699 ];

	UDownloadableContentManager_execInstallDLCs_Parms InstallDLCs_Parms;

	pFnInstallDLCs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstallDLCs, &InstallDLCs_Parms, NULL );

	pFnInstallDLCs->FunctionFlags |= 0x400;

	if ( DLCBundles )
		memcpy ( DLCBundles, &InstallDLCs_Parms.DLCBundles, 0xC );
};

// Function Engine.DownloadableContentManager.InstallDLC
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FOnlineContent          DLCBundle                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UDownloadableContentManager::InstallDLC ( struct FOnlineContent* DLCBundle )
{
	static UFunction* pFnInstallDLC = NULL;

	if ( ! pFnInstallDLC )
		pFnInstallDLC = (UFunction*) UObject::GObjObjects()->Data[ 18696 ];

	UDownloadableContentManager_execInstallDLC_Parms InstallDLC_Parms;

	pFnInstallDLC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstallDLC, &InstallDLC_Parms, NULL );

	pFnInstallDLC->FunctionFlags |= 0x400;

	if ( DLCBundle )
		memcpy ( DLCBundle, &InstallDLC_Parms.DLCBundle, 0x4C );

	return InstallDLC_Parms.ReturnValue;
};

// Function Engine.Engine.PrintDebugInfo
// [0x00020102] 
// Parameters infos:
// class UDebugDrawer*            Drawer                         ( CPF_Parm )

void UEngine::PrintDebugInfo ( class UDebugDrawer* Drawer )
{
	static UFunction* pFnPrintDebugInfo = NULL;

	if ( ! pFnPrintDebugInfo )
		pFnPrintDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 19450 ];

	UEngine_execPrintDebugInfo_Parms PrintDebugInfo_Parms;
	PrintDebugInfo_Parms.Drawer = Drawer;

	this->ProcessEvent ( pFnPrintDebugInfo, &PrintDebugInfo_Parms, NULL );
};

// Function Engine.Engine.GetPlatformMapLoadTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Platform                       ( CPF_Parm )

float UEngine::GetPlatformMapLoadTime ( unsigned char Platform )
{
	static UFunction* pFnGetPlatformMapLoadTime = NULL;

	if ( ! pFnGetPlatformMapLoadTime )
		pFnGetPlatformMapLoadTime = (UFunction*) UObject::GObjObjects()->Data[ 19452 ];

	UEngine_execGetPlatformMapLoadTime_Parms GetPlatformMapLoadTime_Parms;
	GetPlatformMapLoadTime_Parms.Platform = Platform;

	pFnGetPlatformMapLoadTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlatformMapLoadTime, &GetPlatformMapLoadTime_Parms, NULL );

	pFnGetPlatformMapLoadTime->FunctionFlags |= 0x400;

	return GetPlatformMapLoadTime_Parms.ReturnValue;
};

// Function Engine.Engine.GetGameVersionForProduct
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProductName                    ( CPF_Parm )

unsigned char UEngine::GetGameVersionForProduct ( struct FName ProductName )
{
	static UFunction* pFnGetGameVersionForProduct = NULL;

	if ( ! pFnGetGameVersionForProduct )
		pFnGetGameVersionForProduct = (UFunction*) UObject::GObjObjects()->Data[ 19454 ];

	UEngine_execGetGameVersionForProduct_Parms GetGameVersionForProduct_Parms;
	memcpy ( &GetGameVersionForProduct_Parms.ProductName, &ProductName, 0x8 );

	pFnGetGameVersionForProduct->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameVersionForProduct, &GetGameVersionForProduct_Parms, NULL );

	pFnGetGameVersionForProduct->FunctionFlags |= 0x400;

	return GetGameVersionForProduct_Parms.ReturnValue;
};

// Function Engine.Engine.GetGameVersion
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UEngine::GetGameVersion ( )
{
	static UFunction* pFnGetGameVersion = NULL;

	if ( ! pFnGetGameVersion )
		pFnGetGameVersion = (UFunction*) UObject::GObjObjects()->Data[ 19457 ];

	UEngine_execGetGameVersion_Parms GetGameVersion_Parms;

	pFnGetGameVersion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameVersion, &GetGameVersion_Parms, NULL );

	pFnGetGameVersion->FunctionFlags |= 0x400;

	return GetGameVersion_Parms.ReturnValue;
};

// Function Engine.Engine.GetFeatureName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UEngine::GetFeatureName ( )
{
	static UFunction* pFnGetFeatureName = NULL;

	if ( ! pFnGetFeatureName )
		pFnGetFeatureName = (UFunction*) UObject::GObjObjects()->Data[ 19460 ];

	UEngine_execGetFeatureName_Parms GetFeatureName_Parms;

	pFnGetFeatureName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFeatureName, &GetFeatureName_Parms, NULL );

	pFnGetFeatureName->FunctionFlags |= 0x400;

	return GetFeatureName_Parms.ReturnValue;
};

// Function Engine.Engine.GetFeatureSystem
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFeatureSystem*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFeatureSystem* UEngine::GetFeatureSystem ( )
{
	static UFunction* pFnGetFeatureSystem = NULL;

	if ( ! pFnGetFeatureSystem )
		pFnGetFeatureSystem = (UFunction*) UObject::GObjObjects()->Data[ 19462 ];

	UEngine_execGetFeatureSystem_Parms GetFeatureSystem_Parms;

	pFnGetFeatureSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFeatureSystem, &GetFeatureSystem_Parms, NULL );

	pFnGetFeatureSystem->FunctionFlags |= 0x400;

	return GetFeatureSystem_Parms.ReturnValue;
};

// Function Engine.Engine.SetNetworkSecurityKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FNetworkEncryptionKey   SecurityKey                    ( CPF_Parm | CPF_NeedCtorLink )

void UEngine::SetNetworkSecurityKey ( struct FNetworkEncryptionKey SecurityKey )
{
	static UFunction* pFnSetNetworkSecurityKey = NULL;

	if ( ! pFnSetNetworkSecurityKey )
		pFnSetNetworkSecurityKey = (UFunction*) UObject::GObjObjects()->Data[ 19448 ];

	UEngine_execSetNetworkSecurityKey_Parms SetNetworkSecurityKey_Parms;
	memcpy ( &SetNetworkSecurityKey_Parms.SecurityKey, &SecurityKey, 0x84 );

	pFnSetNetworkSecurityKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNetworkSecurityKey, &SetNetworkSecurityKey_Parms, NULL );

	pFnSetNetworkSecurityKey->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddNetworkSecurityKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FNetworkEncryptionKey   SecurityKey                    ( CPF_Parm | CPF_NeedCtorLink )

void UEngine::AddNetworkSecurityKey ( struct FNetworkEncryptionKey SecurityKey )
{
	static UFunction* pFnAddNetworkSecurityKey = NULL;

	if ( ! pFnAddNetworkSecurityKey )
		pFnAddNetworkSecurityKey = (UFunction*) UObject::GObjObjects()->Data[ 19446 ];

	UEngine_execAddNetworkSecurityKey_Parms AddNetworkSecurityKey_Parms;
	memcpy ( &AddNetworkSecurityKey_Parms.SecurityKey, &SecurityKey, 0x84 );

	pFnAddNetworkSecurityKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNetworkSecurityKey, &AddNetworkSecurityKey_Parms, NULL );

	pFnAddNetworkSecurityKey->FunctionFlags |= 0x400;
};

// Function Engine.Engine.GetSystemSettingFloat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 SettingName                    ( CPF_Parm | CPF_NeedCtorLink )

float UEngine::GetSystemSettingFloat ( struct FString SettingName )
{
	static UFunction* pFnGetSystemSettingFloat = NULL;

	if ( ! pFnGetSystemSettingFloat )
		pFnGetSystemSettingFloat = (UFunction*) UObject::GObjObjects()->Data[ 19443 ];

	UEngine_execGetSystemSettingFloat_Parms GetSystemSettingFloat_Parms;
	memcpy ( &GetSystemSettingFloat_Parms.SettingName, &SettingName, 0xC );

	pFnGetSystemSettingFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSystemSettingFloat, &GetSystemSettingFloat_Parms, NULL );

	pFnGetSystemSettingFloat->FunctionFlags |= 0x400;

	return GetSystemSettingFloat_Parms.ReturnValue;
};

// Function Engine.Engine.GetSystemSettingInt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 SettingName                    ( CPF_Parm | CPF_NeedCtorLink )

int UEngine::GetSystemSettingInt ( struct FString SettingName )
{
	static UFunction* pFnGetSystemSettingInt = NULL;

	if ( ! pFnGetSystemSettingInt )
		pFnGetSystemSettingInt = (UFunction*) UObject::GObjObjects()->Data[ 19440 ];

	UEngine_execGetSystemSettingInt_Parms GetSystemSettingInt_Parms;
	memcpy ( &GetSystemSettingInt_Parms.SettingName, &SettingName, 0xC );

	pFnGetSystemSettingInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSystemSettingInt, &GetSystemSettingInt_Parms, NULL );

	pFnGetSystemSettingInt->FunctionFlags |= 0x400;

	return GetSystemSettingInt_Parms.ReturnValue;
};

// Function Engine.Engine.GetSystemSettingBool
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 SettingName                    ( CPF_Parm | CPF_NeedCtorLink )

bool UEngine::GetSystemSettingBool ( struct FString SettingName )
{
	static UFunction* pFnGetSystemSettingBool = NULL;

	if ( ! pFnGetSystemSettingBool )
		pFnGetSystemSettingBool = (UFunction*) UObject::GObjObjects()->Data[ 19437 ];

	UEngine_execGetSystemSettingBool_Parms GetSystemSettingBool_Parms;
	memcpy ( &GetSystemSettingBool_Parms.SettingName, &SettingName, 0xC );

	pFnGetSystemSettingBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSystemSettingBool, &GetSystemSettingBool_Parms, NULL );

	pFnGetSystemSettingBool->FunctionFlags |= 0x400;

	return GetSystemSettingBool_Parms.ReturnValue;
};

// Function Engine.Engine.LaunchURL
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

bool UEngine::LaunchURL ( struct FString URL )
{
	static UFunction* pFnLaunchURL = NULL;

	if ( ! pFnLaunchURL )
		pFnLaunchURL = (UFunction*) UObject::GObjObjects()->Data[ 19434 ];

	UEngine_execLaunchURL_Parms LaunchURL_Parms;
	memcpy ( &LaunchURL_Parms.URL, &URL, 0xC );

	pFnLaunchURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLaunchURL, &LaunchURL_Parms, NULL );

	pFnLaunchURL->FunctionFlags |= 0x400;

	return LaunchURL_Parms.ReturnValue;
};

// Function Engine.Engine.BasicLoadObject
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 Obj                            ( CPF_Parm )
// struct FString                 PathName                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsSaveGame                    ( CPF_Parm )
// int                            Version                        ( CPF_Parm )

unsigned char UEngine::BasicLoadObject ( class UObject* Obj, struct FString PathName, unsigned long bIsSaveGame, int Version )
{
	static UFunction* pFnBasicLoadObject = NULL;

	if ( ! pFnBasicLoadObject )
		pFnBasicLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 19428 ];

	UEngine_execBasicLoadObject_Parms BasicLoadObject_Parms;
	BasicLoadObject_Parms.Obj = Obj;
	memcpy ( &BasicLoadObject_Parms.PathName, &PathName, 0xC );
	BasicLoadObject_Parms.bIsSaveGame = bIsSaveGame;
	BasicLoadObject_Parms.Version = Version;

	pFnBasicLoadObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBasicLoadObject, &BasicLoadObject_Parms, NULL );

	pFnBasicLoadObject->FunctionFlags |= 0x400;

	return BasicLoadObject_Parms.ReturnValue;
};

// Function Engine.Engine.BasicSaveObject
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 Obj                            ( CPF_Parm )
// struct FString                 PathName                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsSaveGame                    ( CPF_Parm )
// int                            Version                        ( CPF_Parm )
// unsigned long                  bEncrypt                       ( CPF_OptionalParm | CPF_Parm )

bool UEngine::BasicSaveObject ( class UObject* Obj, struct FString PathName, unsigned long bIsSaveGame, int Version, unsigned long bEncrypt )
{
	static UFunction* pFnBasicSaveObject = NULL;

	if ( ! pFnBasicSaveObject )
		pFnBasicSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 19421 ];

	UEngine_execBasicSaveObject_Parms BasicSaveObject_Parms;
	BasicSaveObject_Parms.Obj = Obj;
	memcpy ( &BasicSaveObject_Parms.PathName, &PathName, 0xC );
	BasicSaveObject_Parms.bIsSaveGame = bIsSaveGame;
	BasicSaveObject_Parms.Version = Version;
	BasicSaveObject_Parms.bEncrypt = bEncrypt;

	pFnBasicSaveObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBasicSaveObject, &BasicSaveObject_Parms, NULL );

	pFnBasicSaveObject->FunctionFlags |= 0x400;

	return BasicSaveObject_Parms.ReturnValue;
};

// Function Engine.Engine.AddTextureStreamingSlaveLoc
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InLoc                          ( CPF_Parm )
// float                          BoostFactor                    ( CPF_Parm )
// unsigned long                  bOverrideLocation              ( CPF_Parm )
// float                          OverrideDuration               ( CPF_Parm )

void UEngine::AddTextureStreamingSlaveLoc ( struct FVector InLoc, float BoostFactor, unsigned long bOverrideLocation, float OverrideDuration )
{
	static UFunction* pFnAddTextureStreamingSlaveLoc = NULL;

	if ( ! pFnAddTextureStreamingSlaveLoc )
		pFnAddTextureStreamingSlaveLoc = (UFunction*) UObject::GObjObjects()->Data[ 19416 ];

	UEngine_execAddTextureStreamingSlaveLoc_Parms AddTextureStreamingSlaveLoc_Parms;
	memcpy ( &AddTextureStreamingSlaveLoc_Parms.InLoc, &InLoc, 0xC );
	AddTextureStreamingSlaveLoc_Parms.BoostFactor = BoostFactor;
	AddTextureStreamingSlaveLoc_Parms.bOverrideLocation = bOverrideLocation;
	AddTextureStreamingSlaveLoc_Parms.OverrideDuration = OverrideDuration;

	pFnAddTextureStreamingSlaveLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTextureStreamingSlaveLoc, &AddTextureStreamingSlaveLoc_Parms, NULL );

	pFnAddTextureStreamingSlaveLoc->FunctionFlags |= 0x400;
};

// Function Engine.Engine.GetWorldPostProcessChain
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPostProcessChain*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPostProcessChain* UEngine::GetWorldPostProcessChain ( )
{
	static UFunction* pFnGetWorldPostProcessChain = NULL;

	if ( ! pFnGetWorldPostProcessChain )
		pFnGetWorldPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 19414 ];

	UEngine_execGetWorldPostProcessChain_Parms GetWorldPostProcessChain_Parms;

	pFnGetWorldPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldPostProcessChain, &GetWorldPostProcessChain_Parms, NULL );

	pFnGetWorldPostProcessChain->FunctionFlags |= 0x400;

	return GetWorldPostProcessChain_Parms.ReturnValue;
};

// Function Engine.Engine.GetDefaultPostProcessChain
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPostProcessChain*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPostProcessChain* UEngine::GetDefaultPostProcessChain ( )
{
	static UFunction* pFnGetDefaultPostProcessChain = NULL;

	if ( ! pFnGetDefaultPostProcessChain )
		pFnGetDefaultPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 19412 ];

	UEngine_execGetDefaultPostProcessChain_Parms GetDefaultPostProcessChain_Parms;

	pFnGetDefaultPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultPostProcessChain, &GetDefaultPostProcessChain_Parms, NULL );

	pFnGetDefaultPostProcessChain->FunctionFlags |= 0x400;

	return GetDefaultPostProcessChain_Parms.ReturnValue;
};

// Function Engine.Engine.GetEngine
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UEngine*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UEngine* UEngine::GetEngine ( )
{
	static UFunction* pFnGetEngine = NULL;

	if ( ! pFnGetEngine )
		pFnGetEngine = (UFunction*) UObject::GObjObjects()->Data[ 8800 ];

	UEngine_execGetEngine_Parms GetEngine_Parms;

	pFnGetEngine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEngine, &GetEngine_Parms, NULL );

	pFnGetEngine->FunctionFlags |= 0x400;

	return GetEngine_Parms.ReturnValue;
};

// Function Engine.Engine.IsRealDStereoEnabled
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsRealDStereoEnabled ( )
{
	static UFunction* pFnIsRealDStereoEnabled = NULL;

	if ( ! pFnIsRealDStereoEnabled )
		pFnIsRealDStereoEnabled = (UFunction*) UObject::GObjObjects()->Data[ 19410 ];

	UEngine_execIsRealDStereoEnabled_Parms IsRealDStereoEnabled_Parms;

	pFnIsRealDStereoEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRealDStereoEnabled, &IsRealDStereoEnabled_Parms, NULL );

	pFnIsRealDStereoEnabled->FunctionFlags |= 0x400;

	return IsRealDStereoEnabled_Parms.ReturnValue;
};

// Function Engine.Engine.AddOverlayWrapped
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// float                          WrapWidth                      ( CPF_Parm )

void UEngine::AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth )
{
	static UFunction* pFnAddOverlayWrapped = NULL;

	if ( ! pFnAddOverlayWrapped )
		pFnAddOverlayWrapped = (UFunction*) UObject::GObjObjects()->Data[ 19402 ];

	UEngine_execAddOverlayWrapped_Parms AddOverlayWrapped_Parms;
	AddOverlayWrapped_Parms.Font = Font;
	memcpy ( &AddOverlayWrapped_Parms.Text, &Text, 0xC );
	AddOverlayWrapped_Parms.X = X;
	AddOverlayWrapped_Parms.Y = Y;
	AddOverlayWrapped_Parms.ScaleX = ScaleX;
	AddOverlayWrapped_Parms.ScaleY = ScaleY;
	AddOverlayWrapped_Parms.WrapWidth = WrapWidth;

	pFnAddOverlayWrapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlayWrapped, &AddOverlayWrapped_Parms, NULL );

	pFnAddOverlayWrapped->FunctionFlags |= 0x400;
};

// Function Engine.Engine.AddOverlay
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          ScaleX                         ( CPF_Parm )
// float                          ScaleY                         ( CPF_Parm )
// unsigned long                  bIsCentered                    ( CPF_Parm )

void UEngine::AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered )
{
	static UFunction* pFnAddOverlay = NULL;

	if ( ! pFnAddOverlay )
		pFnAddOverlay = (UFunction*) UObject::GObjObjects()->Data[ 19394 ];

	UEngine_execAddOverlay_Parms AddOverlay_Parms;
	AddOverlay_Parms.Font = Font;
	memcpy ( &AddOverlay_Parms.Text, &Text, 0xC );
	AddOverlay_Parms.X = X;
	AddOverlay_Parms.Y = Y;
	AddOverlay_Parms.ScaleX = ScaleX;
	AddOverlay_Parms.ScaleY = ScaleY;
	AddOverlay_Parms.bIsCentered = bIsCentered;

	pFnAddOverlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddOverlay, &AddOverlay_Parms, NULL );

	pFnAddOverlay->FunctionFlags |= 0x400;
};

// Function Engine.Engine.RemoveAllOverlays
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UEngine::RemoveAllOverlays ( )
{
	static UFunction* pFnRemoveAllOverlays = NULL;

	if ( ! pFnRemoveAllOverlays )
		pFnRemoveAllOverlays = (UFunction*) UObject::GObjObjects()->Data[ 19393 ];

	UEngine_execRemoveAllOverlays_Parms RemoveAllOverlays_Parms;

	pFnRemoveAllOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllOverlays, &RemoveAllOverlays_Parms, NULL );

	pFnRemoveAllOverlays->FunctionFlags |= 0x400;
};

// Function Engine.Engine.StopMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bDelayStopUntilGameHasRendered ( CPF_Parm )

void UEngine::StopMovie ( unsigned long bDelayStopUntilGameHasRendered )
{
	static UFunction* pFnStopMovie = NULL;

	if ( ! pFnStopMovie )
		pFnStopMovie = (UFunction*) UObject::GObjObjects()->Data[ 19391 ];

	UEngine_execStopMovie_Parms StopMovie_Parms;
	StopMovie_Parms.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	pFnStopMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMovie, &StopMovie_Parms, NULL );

	pFnStopMovie->FunctionFlags |= 0x400;
};

// Function Engine.Engine.PlayLoadMapMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::PlayLoadMapMovie ( )
{
	static UFunction* pFnPlayLoadMapMovie = NULL;

	if ( ! pFnPlayLoadMapMovie )
		pFnPlayLoadMapMovie = (UFunction*) UObject::GObjObjects()->Data[ 19389 ];

	UEngine_execPlayLoadMapMovie_Parms PlayLoadMapMovie_Parms;

	pFnPlayLoadMapMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayLoadMapMovie, &PlayLoadMapMovie_Parms, NULL );

	pFnPlayLoadMapMovie->FunctionFlags |= 0x400;

	return PlayLoadMapMovie_Parms.ReturnValue;
};

// Function Engine.Engine.GetLastMovieName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetLastMovieName ( )
{
	static UFunction* pFnGetLastMovieName = NULL;

	if ( ! pFnGetLastMovieName )
		pFnGetLastMovieName = (UFunction*) UObject::GObjObjects()->Data[ 19387 ];

	UEngine_execGetLastMovieName_Parms GetLastMovieName_Parms;

	pFnGetLastMovieName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastMovieName, &GetLastMovieName_Parms, NULL );

	pFnGetLastMovieName->FunctionFlags |= 0x400;

	return GetLastMovieName_Parms.ReturnValue;
};

// Function Engine.Engine.GetAudioDevice
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAudioDevice*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAudioDevice* UEngine::GetAudioDevice ( )
{
	static UFunction* pFnGetAudioDevice = NULL;

	if ( ! pFnGetAudioDevice )
		pFnGetAudioDevice = (UFunction*) UObject::GObjObjects()->Data[ 12947 ];

	UEngine_execGetAudioDevice_Parms GetAudioDevice_Parms;

	pFnGetAudioDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAudioDevice, &GetAudioDevice_Parms, NULL );

	pFnGetAudioDevice->FunctionFlags |= 0x400;

	return GetAudioDevice_Parms.ReturnValue;
};

// Function Engine.Engine.IsUsingES2Renderer
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsUsingES2Renderer ( )
{
	static UFunction* pFnIsUsingES2Renderer = NULL;

	if ( ! pFnIsUsingES2Renderer )
		pFnIsUsingES2Renderer = (UFunction*) UObject::GObjObjects()->Data[ 19385 ];

	UEngine_execIsUsingES2Renderer_Parms IsUsingES2Renderer_Parms;

	pFnIsUsingES2Renderer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsingES2Renderer, &IsUsingES2Renderer_Parms, NULL );

	pFnIsUsingES2Renderer->FunctionFlags |= 0x400;

	return IsUsingES2Renderer_Parms.ReturnValue;
};

// Function Engine.Engine.IsStereoscopic3D
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsStereoscopic3D ( )
{
	static UFunction* pFnIsStereoscopic3D = NULL;

	if ( ! pFnIsStereoscopic3D )
		pFnIsStereoscopic3D = (UFunction*) UObject::GObjObjects()->Data[ 19383 ];

	UEngine_execIsStereoscopic3D_Parms IsStereoscopic3D_Parms;

	pFnIsStereoscopic3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStereoscopic3D, &IsStereoscopic3D_Parms, NULL );

	pFnIsStereoscopic3D->FunctionFlags |= 0x400;

	return IsStereoscopic3D_Parms.ReturnValue;
};

// Function Engine.Engine.IsSplitScreen
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsSplitScreen ( )
{
	static UFunction* pFnIsSplitScreen = NULL;

	if ( ! pFnIsSplitScreen )
		pFnIsSplitScreen = (UFunction*) UObject::GObjObjects()->Data[ 15908 ];

	UEngine_execIsSplitScreen_Parms IsSplitScreen_Parms;

	pFnIsSplitScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSplitScreen, &IsSplitScreen_Parms, NULL );

	pFnIsSplitScreen->FunctionFlags |= 0x400;

	return IsSplitScreen_Parms.ReturnValue;
};

// Function Engine.Engine.GetAdditionalFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AdditionalFontIndex            ( CPF_Parm )

class UFont* UEngine::GetAdditionalFont ( int AdditionalFontIndex )
{
	static UFunction* pFnGetAdditionalFont = NULL;

	if ( ! pFnGetAdditionalFont )
		pFnGetAdditionalFont = (UFunction*) UObject::GObjObjects()->Data[ 19380 ];

	UEngine_execGetAdditionalFont_Parms GetAdditionalFont_Parms;
	GetAdditionalFont_Parms.AdditionalFontIndex = AdditionalFontIndex;

	pFnGetAdditionalFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdditionalFont, &GetAdditionalFont_Parms, NULL );

	pFnGetAdditionalFont->FunctionFlags |= 0x400;

	return GetAdditionalFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetSubtitleFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetSubtitleFont ( )
{
	static UFunction* pFnGetSubtitleFont = NULL;

	if ( ! pFnGetSubtitleFont )
		pFnGetSubtitleFont = (UFunction*) UObject::GObjObjects()->Data[ 19378 ];

	UEngine_execGetSubtitleFont_Parms GetSubtitleFont_Parms;

	pFnGetSubtitleFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubtitleFont, &GetSubtitleFont_Parms, NULL );

	pFnGetSubtitleFont->FunctionFlags |= 0x400;

	return GetSubtitleFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetLargeFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetLargeFont ( )
{
	static UFunction* pFnGetLargeFont = NULL;

	if ( ! pFnGetLargeFont )
		pFnGetLargeFont = (UFunction*) UObject::GObjObjects()->Data[ 19376 ];

	UEngine_execGetLargeFont_Parms GetLargeFont_Parms;

	pFnGetLargeFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLargeFont, &GetLargeFont_Parms, NULL );

	pFnGetLargeFont->FunctionFlags |= 0x400;

	return GetLargeFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetMediumFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetMediumFont ( )
{
	static UFunction* pFnGetMediumFont = NULL;

	if ( ! pFnGetMediumFont )
		pFnGetMediumFont = (UFunction*) UObject::GObjObjects()->Data[ 19374 ];

	UEngine_execGetMediumFont_Parms GetMediumFont_Parms;

	pFnGetMediumFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMediumFont, &GetMediumFont_Parms, NULL );

	pFnGetMediumFont->FunctionFlags |= 0x400;

	return GetMediumFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetSmallFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetSmallFont ( )
{
	static UFunction* pFnGetSmallFont = NULL;

	if ( ! pFnGetSmallFont )
		pFnGetSmallFont = (UFunction*) UObject::GObjObjects()->Data[ 12758 ];

	UEngine_execGetSmallFont_Parms GetSmallFont_Parms;

	pFnGetSmallFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSmallFont, &GetSmallFont_Parms, NULL );

	pFnGetSmallFont->FunctionFlags |= 0x400;

	return GetSmallFont_Parms.ReturnValue;
};

// Function Engine.Engine.GetTinyFont
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UEngine::GetTinyFont ( )
{
	static UFunction* pFnGetTinyFont = NULL;

	if ( ! pFnGetTinyFont )
		pFnGetTinyFont = (UFunction*) UObject::GObjObjects()->Data[ 19372 ];

	UEngine_execGetTinyFont_Parms GetTinyFont_Parms;

	pFnGetTinyFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTinyFont, &GetTinyFont_Parms, NULL );

	pFnGetTinyFont->FunctionFlags |= 0x400;

	return GetTinyFont_Parms.ReturnValue;
};

// Function Engine.Engine.HasNetworkConnection
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::HasNetworkConnection ( )
{
	static UFunction* pFnHasNetworkConnection = NULL;

	if ( ! pFnHasNetworkConnection )
		pFnHasNetworkConnection = (UFunction*) UObject::GObjObjects()->Data[ 19370 ];

	UEngine_execHasNetworkConnection_Parms HasNetworkConnection_Parms;

	pFnHasNetworkConnection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasNetworkConnection, &HasNetworkConnection_Parms, NULL );

	pFnHasNetworkConnection->FunctionFlags |= 0x400;

	return HasNetworkConnection_Parms.ReturnValue;
};

// Function Engine.Engine.BuildBugSubmissionString
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 BugField                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BugFieldData                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString UEngine::BuildBugSubmissionString ( struct FString BugField, struct FString BugFieldData )
{
	static UFunction* pFnBuildBugSubmissionString = NULL;

	if ( ! pFnBuildBugSubmissionString )
		pFnBuildBugSubmissionString = (UFunction*) UObject::GObjObjects()->Data[ 19366 ];

	UEngine_execBuildBugSubmissionString_Parms BuildBugSubmissionString_Parms;
	memcpy ( &BuildBugSubmissionString_Parms.BugField, &BugField, 0xC );
	memcpy ( &BuildBugSubmissionString_Parms.BugFieldData, &BugFieldData, 0xC );

	pFnBuildBugSubmissionString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildBugSubmissionString, &BuildBugSubmissionString_Parms, NULL );

	pFnBuildBugSubmissionString->FunctionFlags |= 0x400;

	return BuildBugSubmissionString_Parms.ReturnValue;
};

// Function Engine.Engine.GetDevicePushNotificationToken
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetDevicePushNotificationToken ( )
{
	static UFunction* pFnGetDevicePushNotificationToken = NULL;

	if ( ! pFnGetDevicePushNotificationToken )
		pFnGetDevicePushNotificationToken = (UFunction*) UObject::GObjObjects()->Data[ 19364 ];

	UEngine_execGetDevicePushNotificationToken_Parms GetDevicePushNotificationToken_Parms;

	pFnGetDevicePushNotificationToken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDevicePushNotificationToken, &GetDevicePushNotificationToken_Parms, NULL );

	pFnGetDevicePushNotificationToken->FunctionFlags |= 0x400;

	return GetDevicePushNotificationToken_Parms.ReturnValue;
};

// Function Engine.Engine.GetOSVersion
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UEngine::GetOSVersion ( )
{
	static UFunction* pFnGetOSVersion = NULL;

	if ( ! pFnGetOSVersion )
		pFnGetOSVersion = (UFunction*) UObject::GObjObjects()->Data[ 19362 ];

	UEngine_execGetOSVersion_Parms GetOSVersion_Parms;

	pFnGetOSVersion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOSVersion, &GetOSVersion_Parms, NULL );

	pFnGetOSVersion->FunctionFlags |= 0x400;

	return GetOSVersion_Parms.ReturnValue;
};

// Function Engine.Engine.GetDeviceUUID
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetDeviceUUID ( )
{
	static UFunction* pFnGetDeviceUUID = NULL;

	if ( ! pFnGetDeviceUUID )
		pFnGetDeviceUUID = (UFunction*) UObject::GObjObjects()->Data[ 19360 ];

	UEngine_execGetDeviceUUID_Parms GetDeviceUUID_Parms;

	pFnGetDeviceUUID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDeviceUUID, &GetDeviceUUID_Parms, NULL );

	pFnGetDeviceUUID->FunctionFlags |= 0x400;

	return GetDeviceUUID_Parms.ReturnValue;
};

// Function Engine.Engine.GetBuildDate
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngine::GetBuildDate ( )
{
	static UFunction* pFnGetBuildDate = NULL;

	if ( ! pFnGetBuildDate )
		pFnGetBuildDate = (UFunction*) UObject::GObjObjects()->Data[ 19358 ];

	UEngine_execGetBuildDate_Parms GetBuildDate_Parms;

	pFnGetBuildDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuildDate, &GetBuildDate_Parms, NULL );

	pFnGetBuildDate->FunctionFlags |= 0x400;

	return GetBuildDate_Parms.ReturnValue;
};

// Function Engine.Engine.GetCurrentWorldInfo
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* UEngine::GetCurrentWorldInfo ( )
{
	static UFunction* pFnGetCurrentWorldInfo = NULL;

	if ( ! pFnGetCurrentWorldInfo )
		pFnGetCurrentWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 15815 ];

	UEngine_execGetCurrentWorldInfo_Parms GetCurrentWorldInfo_Parms;

	pFnGetCurrentWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentWorldInfo, &GetCurrentWorldInfo_Parms, NULL );

	pFnGetCurrentWorldInfo->FunctionFlags |= 0x400;

	return GetCurrentWorldInfo_Parms.ReturnValue;
};

// Function Engine.Engine.IsGame
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsGame ( )
{
	static UFunction* pFnIsGame = NULL;

	if ( ! pFnIsGame )
		pFnIsGame = (UFunction*) UObject::GObjObjects()->Data[ 10731 ];

	UEngine_execIsGame_Parms IsGame_Parms;

	pFnIsGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsGame, &IsGame_Parms, NULL );

	pFnIsGame->FunctionFlags |= 0x400;

	return IsGame_Parms.ReturnValue;
};

// Function Engine.Engine.IsEditor
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::IsEditor ( )
{
	static UFunction* pFnIsEditor = NULL;

	if ( ! pFnIsEditor )
		pFnIsEditor = (UFunction*) UObject::GObjObjects()->Data[ 10745 ];

	UEngine_execIsEditor_Parms IsEditor_Parms;

	pFnIsEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEditor, &IsEditor_Parms, NULL );

	pFnIsEditor->FunctionFlags |= 0x400;

	return IsEditor_Parms.ReturnValue;
};

// Function Engine.Engine.UseSecurePackets
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UEngine::UseSecurePackets ( )
{
	static UFunction* pFnUseSecurePackets = NULL;

	if ( ! pFnUseSecurePackets )
		pFnUseSecurePackets = (UFunction*) UObject::GObjObjects()->Data[ 19357 ];

	UEngine_execUseSecurePackets_Parms UseSecurePackets_Parms;

	pFnUseSecurePackets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUseSecurePackets, &UseSecurePackets_Parms, NULL );

	pFnUseSecurePackets->FunctionFlags |= 0x400;

	return UseSecurePackets_Parms.ReturnValue;
};

// Function Engine.GameEngine.HasSecondaryScreenActive
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameEngine::HasSecondaryScreenActive ( )
{
	static UFunction* pFnHasSecondaryScreenActive = NULL;

	if ( ! pFnHasSecondaryScreenActive )
		pFnHasSecondaryScreenActive = (UFunction*) UObject::GObjObjects()->Data[ 21049 ];

	UGameEngine_execHasSecondaryScreenActive_Parms HasSecondaryScreenActive_Parms;

	pFnHasSecondaryScreenActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasSecondaryScreenActive, &HasSecondaryScreenActive_Parms, NULL );

	pFnHasSecondaryScreenActive->FunctionFlags |= 0x400;

	return HasSecondaryScreenActive_Parms.ReturnValue;
};

// Function Engine.GameEngine.GetDLCManager
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDownloadableContentManager* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDownloadableContentManager* UGameEngine::GetDLCManager ( )
{
	static UFunction* pFnGetDLCManager = NULL;

	if ( ! pFnGetDLCManager )
		pFnGetDLCManager = (UFunction*) UObject::GObjObjects()->Data[ 18677 ];

	UGameEngine_execGetDLCManager_Parms GetDLCManager_Parms;

	pFnGetDLCManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDLCManager, &GetDLCManager_Parms, NULL );

	pFnGetDLCManager->FunctionFlags |= 0x400;

	return GetDLCManager_Parms.ReturnValue;
};

// Function Engine.GameEngine.GetDLCEnumerator
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDownloadableContentEnumerator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDownloadableContentEnumerator* UGameEngine::GetDLCEnumerator ( )
{
	static UFunction* pFnGetDLCEnumerator = NULL;

	if ( ! pFnGetDLCEnumerator )
		pFnGetDLCEnumerator = (UFunction*) UObject::GObjObjects()->Data[ 18724 ];

	UGameEngine_execGetDLCEnumerator_Parms GetDLCEnumerator_Parms;

	pFnGetDLCEnumerator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDLCEnumerator, &GetDLCEnumerator_Parms, NULL );

	pFnGetDLCEnumerator->FunctionFlags |= 0x400;

	return GetDLCEnumerator_Parms.ReturnValue;
};

// Function Engine.GameEngine.GetOnlineSubsystem
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* UGameEngine::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 8547 ];

	UGameEngine_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	pFnGetOnlineSubsystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	pFnGetOnlineSubsystem->FunctionFlags |= 0x400;

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.GameEngine.DestroyNamedNetDriver
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   NetDriverName                  ( CPF_Parm )

void UGameEngine::DestroyNamedNetDriver ( struct FName NetDriverName )
{
	static UFunction* pFnDestroyNamedNetDriver = NULL;

	if ( ! pFnDestroyNamedNetDriver )
		pFnDestroyNamedNetDriver = (UFunction*) UObject::GObjObjects()->Data[ 21047 ];

	UGameEngine_execDestroyNamedNetDriver_Parms DestroyNamedNetDriver_Parms;
	memcpy ( &DestroyNamedNetDriver_Parms.NetDriverName, &NetDriverName, 0x8 );

	pFnDestroyNamedNetDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyNamedNetDriver, &DestroyNamedNetDriver_Parms, NULL );

	pFnDestroyNamedNetDriver->FunctionFlags |= 0x400;
};

// Function Engine.GameEngine.CreateNamedNetDriver
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NetDriverName                  ( CPF_Parm )

bool UGameEngine::CreateNamedNetDriver ( struct FName NetDriverName )
{
	static UFunction* pFnCreateNamedNetDriver = NULL;

	if ( ! pFnCreateNamedNetDriver )
		pFnCreateNamedNetDriver = (UFunction*) UObject::GObjObjects()->Data[ 21044 ];

	UGameEngine_execCreateNamedNetDriver_Parms CreateNamedNetDriver_Parms;
	memcpy ( &CreateNamedNetDriver_Parms.NetDriverName, &NetDriverName, 0x8 );

	pFnCreateNamedNetDriver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateNamedNetDriver, &CreateNamedNetDriver_Parms, NULL );

	pFnCreateNamedNetDriver->FunctionFlags |= 0x400;

	return CreateNamedNetDriver_Parms.ReturnValue;
};

// Function Engine.ISetParameter.SetActorParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// class AActor*                  Value                          ( CPF_Parm )

void UISetParameter::SetActorParameter ( struct FName Key, class AActor* Value )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24042 ];

	UISetParameter_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.Key, &Key, 0x8 );
	SetActorParameter_Parms.Value = Value;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ISetParameter.SetLinearColorParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UISetParameter::SetLinearColorParameter ( struct FName Key, struct FLinearColor Value )
{
	static UFunction* pFnSetLinearColorParameter = NULL;

	if ( ! pFnSetLinearColorParameter )
		pFnSetLinearColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24039 ];

	UISetParameter_execSetLinearColorParameter_Parms SetLinearColorParameter_Parms;
	memcpy ( &SetLinearColorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetLinearColorParameter_Parms.Value, &Value, 0x10 );

	pFnSetLinearColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorParameter, &SetLinearColorParameter_Parms, NULL );

	pFnSetLinearColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ISetParameter.SetVectorParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FVector                 Value                          ( CPF_Parm )

void UISetParameter::SetVectorParameter ( struct FName Key, struct FVector Value )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24036 ];

	UISetParameter_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Value, &Value, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ISetParameter.SetFloatParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UISetParameter::SetFloatParameter ( struct FName Key, float Value )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 24033 ];

	UISetParameter_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.Key, &Key, 0x8 );
	SetFloatParameter_Parms.Value = Value;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.ISetParameter.SetNameParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FName                   Value                          ( CPF_Parm )

void UISetParameter::SetNameParameter ( struct FName Key, struct FName Value )
{
	static UFunction* pFnSetNameParameter = NULL;

	if ( ! pFnSetNameParameter )
		pFnSetNameParameter = (UFunction*) UObject::GObjObjects()->Data[ 24030 ];

	UISetParameter_execSetNameParameter_Parms SetNameParameter_Parms;
	memcpy ( &SetNameParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetNameParameter_Parms.Value, &Value, 0x8 );

	pFnSetNameParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameParameter, &SetNameParameter_Parms, NULL );

	pFnSetNameParameter->FunctionFlags |= 0x400;
};

// Function Engine.Volume.ProcessActorSetVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVolume::eventProcessActorSetVolume ( class AActor* Other )
{
	static UFunction* pFnProcessActorSetVolume = NULL;

	if ( ! pFnProcessActorSetVolume )
		pFnProcessActorSetVolume = (UFunction*) UObject::GObjObjects()->Data[ 13566 ];

	AVolume_eventProcessActorSetVolume_Parms ProcessActorSetVolume_Parms;
	ProcessActorSetVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnProcessActorSetVolume, &ProcessActorSetVolume_Parms, NULL );
};

// Function Engine.Volume.CollisionChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVolume::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 13565 ];

	AVolume_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.Volume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 13563 ];

	AVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Volume.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVolume::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 13548 ];

	AVolume_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Volume.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13547 ];

	AVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Volume.EncompassesPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Loc                            ( CPF_Parm )

bool AVolume::EncompassesPoint ( struct FVector Loc )
{
	static UFunction* pFnEncompassesPoint = NULL;

	if ( ! pFnEncompassesPoint )
		pFnEncompassesPoint = (UFunction*) UObject::GObjObjects()->Data[ 13544 ];

	AVolume_execEncompassesPoint_Parms EncompassesPoint_Parms;
	memcpy ( &EncompassesPoint_Parms.Loc, &Loc, 0xC );

	pFnEncompassesPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncompassesPoint, &EncompassesPoint_Parms, NULL );

	pFnEncompassesPoint->FunctionFlags |= 0x400;

	return EncompassesPoint_Parms.ReturnValue;
};

// Function Engine.Volume.Encompasses
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVolume::Encompasses ( class AActor* Other )
{
	static UFunction* pFnEncompasses = NULL;

	if ( ! pFnEncompasses )
		pFnEncompasses = (UFunction*) UObject::GObjObjects()->Data[ 13541 ];

	AVolume_execEncompasses_Parms Encompasses_Parms;
	Encompasses_Parms.Other = Other;

	pFnEncompasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncompasses, &Encompasses_Parms, NULL );

	pFnEncompasses->FunctionFlags |= 0x400;

	return Encompasses_Parms.ReturnValue;
};

// Function Engine.BlockingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ABlockingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 15637 ];

	ABlockingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ADynamicBlockingVolume::ApplyCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18845 ];

	ADynamicBlockingVolume_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.DynamicBlockingVolume.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ADynamicBlockingVolume::CreateCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18843 ];

	ADynamicBlockingVolume_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.DynamicBlockingVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADynamicBlockingVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18842 ];

	ADynamicBlockingVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LevelStreamingVolume.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ALevelStreamingVolume::ApplyCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 24743 ];

	ALevelStreamingVolume_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.LevelStreamingVolume.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ALevelStreamingVolume::CreateCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 24741 ];

	ALevelStreamingVolume_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.LevelStreamingVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALevelStreamingVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 24739 ];

	ALevelStreamingVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PhysicsVolume.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APhysicsVolume_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void APhysicsVolume::ApplyCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18448 ];

	APhysicsVolume_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PhysicsVolume.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APhysicsVolume_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void APhysicsVolume::CreateCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 18446 ];

	APhysicsVolume_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PhysicsVolume.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APhysicsVolume::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 18444 ];

	APhysicsVolume_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.OnSetDamageInstigator
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetDamageInstigator* Action                         ( CPF_Parm )

void APhysicsVolume::OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action )
{
	static UFunction* pFnOnSetDamageInstigator = NULL;

	if ( ! pFnOnSetDamageInstigator )
		pFnOnSetDamageInstigator = (UFunction*) UObject::GObjObjects()->Data[ 18440 ];

	APhysicsVolume_execOnSetDamageInstigator_Parms OnSetDamageInstigator_Parms;
	OnSetDamageInstigator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetDamageInstigator, &OnSetDamageInstigator_Parms, NULL );
};

// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// [0x00020000] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void APhysicsVolume::NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC )
{
	static UFunction* pFnNotifyPawnBecameViewTarget = NULL;

	if ( ! pFnNotifyPawnBecameViewTarget )
		pFnNotifyPawnBecameViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 18437 ];

	APhysicsVolume_execNotifyPawnBecameViewTarget_Parms NotifyPawnBecameViewTarget_Parms;
	NotifyPawnBecameViewTarget_Parms.P = P;
	NotifyPawnBecameViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnNotifyPawnBecameViewTarget, &NotifyPawnBecameViewTarget_Parms, NULL );
};

// Function Engine.PhysicsVolume.ModifyPlayer
// [0x00020000] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void APhysicsVolume::ModifyPlayer ( class APawn* PlayerPawn )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 18435 ];

	APhysicsVolume_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.PhysicsVolume.CausePainTo
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::CausePainTo ( class AActor* Other )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = (UFunction*) UObject::GObjObjects()->Data[ 18432 ];

	APhysicsVolume_execCausePainTo_Parms CausePainTo_Parms;
	CausePainTo_Parms.Other = Other;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function Engine.PhysicsVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void APhysicsVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 18427 ];

	APhysicsVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.PhysicsVolume.TimerPop
// [0x00020002] 
// Parameters infos:
// class AVolumeTimer*            T                              ( CPF_Parm )

void APhysicsVolume::TimerPop ( class AVolumeTimer* T )
{
	static UFunction* pFnTimerPop = NULL;

	if ( ! pFnTimerPop )
		pFnTimerPop = (UFunction*) UObject::GObjObjects()->Data[ 18424 ];

	APhysicsVolume_execTimerPop_Parms TimerPop_Parms;
	TimerPop_Parms.T = T;

	this->ProcessEvent ( pFnTimerPop, &TimerPop_Parms, NULL );
};

// Function Engine.PhysicsVolume.CollisionChanged
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void APhysicsVolume::eventCollisionChanged ( )
{
	static UFunction* pFnCollisionChanged = NULL;

	if ( ! pFnCollisionChanged )
		pFnCollisionChanged = (UFunction*) UObject::GObjObjects()->Data[ 18423 ];

	APhysicsVolume_eventCollisionChanged_Parms CollisionChanged_Parms;

	this->ProcessEvent ( pFnCollisionChanged, &CollisionChanged_Parms, NULL );
};

// Function Engine.PhysicsVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void APhysicsVolume::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18421 ];

	APhysicsVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnLeavingVolume ( class APawn* Other )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 18419 ];

	APhysicsVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PawnEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void APhysicsVolume::eventPawnEnteredVolume ( class APawn* Other )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 18417 ];

	APhysicsVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorLeavingVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorLeavingVolume ( class AActor* Other )
{
	static UFunction* pFnActorLeavingVolume = NULL;

	if ( ! pFnActorLeavingVolume )
		pFnActorLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 18415 ];

	APhysicsVolume_eventActorLeavingVolume_Parms ActorLeavingVolume_Parms;
	ActorLeavingVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorLeavingVolume, &ActorLeavingVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.ActorEnteredVolume
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventActorEnteredVolume ( class AActor* Other )
{
	static UFunction* pFnActorEnteredVolume = NULL;

	if ( ! pFnActorEnteredVolume )
		pFnActorEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 18413 ];

	APhysicsVolume_eventActorEnteredVolume_Parms ActorEnteredVolume_Parms;
	ActorEnteredVolume_Parms.Other = Other;

	this->ProcessEvent ( pFnActorEnteredVolume, &ActorEnteredVolume_Parms, NULL );
};

// Function Engine.PhysicsVolume.PhysicsChangedFor
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APhysicsVolume::eventPhysicsChangedFor ( class AActor* Other )
{
	static UFunction* pFnPhysicsChangedFor = NULL;

	if ( ! pFnPhysicsChangedFor )
		pFnPhysicsChangedFor = (UFunction*) UObject::GObjObjects()->Data[ 18411 ];

	APhysicsVolume_eventPhysicsChangedFor_Parms PhysicsChangedFor_Parms;
	PhysicsChangedFor_Parms.Other = Other;

	this->ProcessEvent ( pFnPhysicsChangedFor, &PhysicsChangedFor_Parms, NULL );
};

// Function Engine.PhysicsVolume.Reset
// [0x00020002] 
// Parameters infos:

void APhysicsVolume::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 18410 ];

	APhysicsVolume_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18408 ];

	APhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PhysicsVolume.GetZoneVelocityForActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

struct FVector APhysicsVolume::GetZoneVelocityForActor ( class AActor* TheActor )
{
	static UFunction* pFnGetZoneVelocityForActor = NULL;

	if ( ! pFnGetZoneVelocityForActor )
		pFnGetZoneVelocityForActor = (UFunction*) UObject::GObjObjects()->Data[ 18405 ];

	APhysicsVolume_execGetZoneVelocityForActor_Parms GetZoneVelocityForActor_Parms;
	GetZoneVelocityForActor_Parms.TheActor = TheActor;

	pFnGetZoneVelocityForActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetZoneVelocityForActor, &GetZoneVelocityForActor_Parms, NULL );

	pFnGetZoneVelocityForActor->FunctionFlags |= 0x400;

	return GetZoneVelocityForActor_Parms.ReturnValue;
};

// Function Engine.PhysicsVolume.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APhysicsVolume::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = (UFunction*) UObject::GObjObjects()->Data[ 18403 ];

	APhysicsVolume_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;

	return GetGravityZ_Parms.ReturnValue;
};

// Function Engine.DefaultPhysicsVolume.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADefaultPhysicsVolume::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18451 ];

	ADefaultPhysicsVolume_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.LadderVolume.PhysicsChangedFor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ALadderVolume::eventPhysicsChangedFor ( class AActor* Other )
{
	static UFunction* pFnPhysicsChangedFor = NULL;

	if ( ! pFnPhysicsChangedFor )
		pFnPhysicsChangedFor = (UFunction*) UObject::GObjObjects()->Data[ 24293 ];

	ALadderVolume_eventPhysicsChangedFor_Parms PhysicsChangedFor_Parms;
	PhysicsChangedFor_Parms.Other = Other;

	this->ProcessEvent ( pFnPhysicsChangedFor, &PhysicsChangedFor_Parms, NULL );
};

// Function Engine.LadderVolume.PawnLeavingVolume
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ALadderVolume::eventPawnLeavingVolume ( class APawn* P )
{
	static UFunction* pFnPawnLeavingVolume = NULL;

	if ( ! pFnPawnLeavingVolume )
		pFnPawnLeavingVolume = (UFunction*) UObject::GObjObjects()->Data[ 24290 ];

	ALadderVolume_eventPawnLeavingVolume_Parms PawnLeavingVolume_Parms;
	PawnLeavingVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnLeavingVolume, &PawnLeavingVolume_Parms, NULL );
};

// Function Engine.LadderVolume.PawnEnteredVolume
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ALadderVolume::eventPawnEnteredVolume ( class APawn* P )
{
	static UFunction* pFnPawnEnteredVolume = NULL;

	if ( ! pFnPawnEnteredVolume )
		pFnPawnEnteredVolume = (UFunction*) UObject::GObjObjects()->Data[ 24285 ];

	ALadderVolume_eventPawnEnteredVolume_Parms PawnEnteredVolume_Parms;
	PawnEnteredVolume_Parms.P = P;

	this->ProcessEvent ( pFnPawnEnteredVolume, &PawnEnteredVolume_Parms, NULL );
};

// Function Engine.LadderVolume.InUse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Ignored                        ( CPF_Parm )

bool ALadderVolume::InUse ( class APawn* Ignored )
{
	static UFunction* pFnInUse = NULL;

	if ( ! pFnInUse )
		pFnInUse = (UFunction*) UObject::GObjObjects()->Data[ 15526 ];

	ALadderVolume_execInUse_Parms InUse_Parms;
	InUse_Parms.Ignored = Ignored;

	this->ProcessEvent ( pFnInUse, &InUse_Parms, NULL );

	return InUse_Parms.ReturnValue;
};

// Function Engine.LadderVolume.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void ALadderVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24279 ];

	ALadderVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PostProcessVolume.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APostProcessVolume::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 31576 ];

	APostProcessVolume_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.TriggerVolume.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )

bool ATriggerVolume::StopsProjectile ( class AActor* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 18910 ];

	ATriggerVolume_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.TriggerVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATriggerVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18909 ];

	ATriggerVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DroppedPickup.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void ADroppedPickup::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = (UFunction*) UObject::GObjObjects()->Data[ 18808 ];

	ADroppedPickup_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.DroppedPickup.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 18806 ];

	ADroppedPickup_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.DroppedPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ADroppedPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 18803 ];

	ADroppedPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.DroppedPickup.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ADroppedPickup::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 18800 ];

	ADroppedPickup_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.DroppedPickup.DetourWeight
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ADroppedPickup::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 18794 ];

	ADroppedPickup_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.DroppedPickup.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADroppedPickup::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 18792 ];

	ADroppedPickup_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupParticles
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystemComponent* PickupParticles                ( CPF_Parm | CPF_EditInline )

void ADroppedPickup::eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles )
{
	static UFunction* pFnSetPickupParticles = NULL;

	if ( ! pFnSetPickupParticles )
		pFnSetPickupParticles = (UFunction*) UObject::GObjObjects()->Data[ 18788 ];

	ADroppedPickup_eventSetPickupParticles_Parms SetPickupParticles_Parms;
	SetPickupParticles_Parms.PickupParticles = PickupParticles;

	this->ProcessEvent ( pFnSetPickupParticles, &SetPickupParticles_Parms, NULL );
};

// Function Engine.DroppedPickup.SetPickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     PickupMesh                     ( CPF_Parm | CPF_EditInline )

void ADroppedPickup::eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 18785 ];

	ADroppedPickup_eventSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.PickupMesh = PickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.DroppedPickup.Reset
// [0x00020002] 
// Parameters infos:

void ADroppedPickup::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 18784 ];

	ADroppedPickup_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.DroppedPickup.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADroppedPickup::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18780 ];

	ADroppedPickup_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DroppedPickup.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADroppedPickup::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 18779 ];

	ADroppedPickup_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.DroppedPickup.RemoveFromNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::RemoveFromNavigation ( )
{
	static UFunction* pFnRemoveFromNavigation = NULL;

	if ( ! pFnRemoveFromNavigation )
		pFnRemoveFromNavigation = (UFunction*) UObject::GObjObjects()->Data[ 18778 ];

	ADroppedPickup_execRemoveFromNavigation_Parms RemoveFromNavigation_Parms;

	pFnRemoveFromNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFromNavigation, &RemoveFromNavigation_Parms, NULL );

	pFnRemoveFromNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DroppedPickup.AddToNavigation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ADroppedPickup::AddToNavigation ( )
{
	static UFunction* pFnAddToNavigation = NULL;

	if ( ! pFnAddToNavigation )
		pFnAddToNavigation = (UFunction*) UObject::GObjObjects()->Data[ 18777 ];

	ADroppedPickup_execAddToNavigation_Parms AddToNavigation_Parms;

	pFnAddToNavigation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToNavigation, &AddToNavigation_Parms, NULL );

	pFnAddToNavigation->FunctionFlags |= 0x400;
};

// Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic ( )
{
	static UFunction* pFnSetLightEnvironmentToNotBeDynamic = NULL;

	if ( ! pFnSetLightEnvironmentToNotBeDynamic )
		pFnSetLightEnvironmentToNotBeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 18902 ];

	ADynamicSMActor_execSetLightEnvironmentToNotBeDynamic_Parms SetLightEnvironmentToNotBeDynamic_Parms;

	this->ProcessEvent ( pFnSetLightEnvironmentToNotBeDynamic, &SetLightEnvironmentToNotBeDynamic_Parms, NULL );
};

// Function Engine.DynamicSMActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 18896 ];

	ADynamicSMActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.DynamicSMActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ADynamicSMActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 18893 ];

	ADynamicSMActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.DynamicSMActor.CanBasePawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ADynamicSMActor::CanBasePawn ( class APawn* P )
{
	static UFunction* pFnCanBasePawn = NULL;

	if ( ! pFnCanBasePawn )
		pFnCanBasePawn = (UFunction*) UObject::GObjObjects()->Data[ 18890 ];

	ADynamicSMActor_execCanBasePawn_Parms CanBasePawn_Parms;
	CanBasePawn_Parms.P = P;

	this->ProcessEvent ( pFnCanBasePawn, &CanBasePawn_Parms, NULL );

	return CanBasePawn_Parms.ReturnValue;
};

// Function Engine.DynamicSMActor.SetStaticMesh
// [0x00024002] 
// Parameters infos:
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// struct FVector                 NewTranslation                 ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 NewScale3D                     ( CPF_OptionalParm | CPF_Parm )

void ADynamicSMActor::SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 18885 ];

	ADynamicSMActor_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	memcpy ( &SetStaticMesh_Parms.NewTranslation, &NewTranslation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewRotation, &NewRotation, 0xC );
	memcpy ( &SetStaticMesh_Parms.NewScale3D, &NewScale3D, 0xC );

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18883 ];

	ADynamicSMActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.DynamicSMActor.OnSetMesh
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMesh*         Action                         ( CPF_Parm )

void ADynamicSMActor::OnSetMesh ( class USeqAct_SetMesh* Action )
{
	static UFunction* pFnOnSetMesh = NULL;

	if ( ! pFnOnSetMesh )
		pFnOnSetMesh = (UFunction*) UObject::GObjObjects()->Data[ 18876 ];

	ADynamicSMActor_execOnSetMesh_Parms OnSetMesh_Parms;
	OnSetMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMesh, &OnSetMesh_Parms, NULL );
};

// Function Engine.DynamicSMActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ADynamicSMActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18874 ];

	ADynamicSMActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.DynamicSMActor.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicSMActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18873 ];

	ADynamicSMActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.InterpActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AInterpActor::ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 23494 ];

	AInterpActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x20 );
};

// Function Engine.InterpActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AInterpActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AInterpActor::CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 23492 ];

	AInterpActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x20 );
};

// Function Engine.InterpActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInterpActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 23490 ];

	AInterpActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.InterpActor.ShutDown
// [0x00020102] 
// Parameters infos:

void AInterpActor::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 23489 ];

	AInterpActor_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationChanged ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationChanged = NULL;

	if ( ! pFnInterpolationChanged )
		pFnInterpolationChanged = (UFunction*) UObject::GObjObjects()->Data[ 23487 ];

	AInterpActor_eventInterpolationChanged_Parms InterpolationChanged_Parms;
	InterpolationChanged_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationChanged, &InterpolationChanged_Parms, NULL );
};

// Function Engine.InterpActor.ForceNetRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AInterpActor::eventForceNetRelevant ( )
{
	static UFunction* pFnForceNetRelevant = NULL;

	if ( ! pFnForceNetRelevant )
		pFnForceNetRelevant = (UFunction*) UObject::GObjObjects()->Data[ 23486 ];

	AInterpActor_eventForceNetRelevant_Parms ForceNetRelevant_Parms;

	this->ProcessEvent ( pFnForceNetRelevant, &ForceNetRelevant_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AInterpActor::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 23479 ];

	AInterpActor_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.InterpActor.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void AInterpActor::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 23475 ];

	AInterpActor_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.InterpActor.PlayMovingSound
// [0x00020102] 
// Parameters infos:
// unsigned long                  bClosing                       ( CPF_Parm )

void AInterpActor::PlayMovingSound ( unsigned long bClosing )
{
	static UFunction* pFnPlayMovingSound = NULL;

	if ( ! pFnPlayMovingSound )
		pFnPlayMovingSound = (UFunction*) UObject::GObjObjects()->Data[ 23471 ];

	AInterpActor_execPlayMovingSound_Parms PlayMovingSound_Parms;
	PlayMovingSound_Parms.bClosing = bClosing;

	this->ProcessEvent ( pFnPlayMovingSound, &PlayMovingSound_Parms, NULL );
};

// Function Engine.InterpActor.FinishedOpen
// [0x00020002] 
// Parameters infos:

void AInterpActor::FinishedOpen ( )
{
	static UFunction* pFnFinishedOpen = NULL;

	if ( ! pFnFinishedOpen )
		pFnFinishedOpen = (UFunction*) UObject::GObjObjects()->Data[ 23468 ];

	AInterpActor_execFinishedOpen_Parms FinishedOpen_Parms;

	this->ProcessEvent ( pFnFinishedOpen, &FinishedOpen_Parms, NULL );
};

// Function Engine.InterpActor.Restart
// [0x00020002] 
// Parameters infos:

void AInterpActor::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 23466 ];

	AInterpActor_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.InterpActor.Detach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventDetach ( class AActor* Other )
{
	static UFunction* pFnDetach = NULL;

	if ( ! pFnDetach )
		pFnDetach = (UFunction*) UObject::GObjObjects()->Data[ 23462 ];

	AInterpActor_eventDetach_Parms Detach_Parms;
	Detach_Parms.Other = Other;

	this->ProcessEvent ( pFnDetach, &Detach_Parms, NULL );
};

// Function Engine.InterpActor.Attach
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventAttach ( class AActor* Other )
{
	static UFunction* pFnAttach = NULL;

	if ( ! pFnAttach )
		pFnAttach = (UFunction*) UObject::GObjObjects()->Data[ 23458 ];

	AInterpActor_eventAttach_Parms Attach_Parms;
	Attach_Parms.Other = Other;

	this->ProcessEvent ( pFnAttach, &Attach_Parms, NULL );
};

// Function Engine.InterpActor.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AInterpActor::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 23454 ];

	AInterpActor_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function Engine.InterpActor.EncroachingOn
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AInterpActor::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 23442 ];

	AInterpActor_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.InterpActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AInterpActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23441 ];

	AInterpActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Emitter.HideSelf
// [0x00020100] 
// Parameters infos:

void AEmitter::HideSelf ( )
{
	static UFunction* pFnHideSelf = NULL;

	if ( ! pFnHideSelf )
		pFnHideSelf = (UFunction*) UObject::GObjObjects()->Data[ 19238 ];

	AEmitter_execHideSelf_Parms HideSelf_Parms;

	this->ProcessEvent ( pFnHideSelf, &HideSelf_Parms, NULL );
};

// Function Engine.Emitter.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AEmitter_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AEmitter::ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 19236 ];

	AEmitter_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Emitter.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AEmitter_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AEmitter::CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 19234 ];

	AEmitter_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Emitter.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AEmitter::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 19232 ];

	AEmitter_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.Emitter.OnSetParticleSysParam
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetParticleSysParam* Action                         ( CPF_Parm )

void AEmitter::OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action )
{
	static UFunction* pFnOnSetParticleSysParam = NULL;

	if ( ! pFnOnSetParticleSysParam )
		pFnOnSetParticleSysParam = (UFunction*) UObject::GObjObjects()->Data[ 19222 ];

	AEmitter_execOnSetParticleSysParam_Parms OnSetParticleSysParam_Parms;
	OnSetParticleSysParam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetParticleSysParam, &OnSetParticleSysParam_Parms, NULL );
};

// Function Engine.Emitter.SetActorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void AEmitter::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19219 ];

	AEmitter_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetExtColorParameter
// [0x00820102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  Red                            ( CPF_Parm )
// unsigned char                  Green                          ( CPF_Parm )
// unsigned char                  Blue                           ( CPF_Parm )
// unsigned char                  Alpha                          ( CPF_Parm )

void AEmitter::SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19212 ];

	AEmitter_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetColorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void AEmitter::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19209 ];

	AEmitter_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetVectorParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void AEmitter::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19206 ];

	AEmitter_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.Emitter.SetFloatParameter
// [0x00020102] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void AEmitter::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 19203 ];

	AEmitter_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.Emitter.ShutDown
// [0x00020102] 
// Parameters infos:

void AEmitter::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 19202 ];

	AEmitter_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.Emitter.OnParticleEventGenerator
// [0x00020000] 
// Parameters infos:
// class USeqAct_ParticleEventGenerator* Action                         ( CPF_Parm )

void AEmitter::OnParticleEventGenerator ( class USeqAct_ParticleEventGenerator* Action )
{
	static UFunction* pFnOnParticleEventGenerator = NULL;

	if ( ! pFnOnParticleEventGenerator )
		pFnOnParticleEventGenerator = (UFunction*) UObject::GObjObjects()->Data[ 19200 ];

	AEmitter_execOnParticleEventGenerator_Parms OnParticleEventGenerator_Parms;
	OnParticleEventGenerator_Parms.Action = Action;

	this->ProcessEvent ( pFnOnParticleEventGenerator, &OnParticleEventGenerator_Parms, NULL );
};

// Function Engine.Emitter.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AEmitter::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 19198 ];

	AEmitter_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Emitter.OnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm | CPF_EditInline )

void AEmitter::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 19196 ];

	AEmitter_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function Engine.Emitter.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitter::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19194 ];

	AEmitter_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Emitter.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AEmitter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19193 ];

	AEmitter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Emitter.SetTemplate
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitter::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 19190 ];

	AEmitter_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// unsigned long                  bSkipAutoActivate              ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate, unsigned long bSkipAutoActivate )
{
	static UFunction* pFnSpawnEmitterCustomLifetime = NULL;

	if ( ! pFnSpawnEmitterCustomLifetime )
		pFnSpawnEmitterCustomLifetime = (UFunction*) UObject::GObjObjects()->Data[ 19317 ];

	AEmitterPool_execSpawnEmitterCustomLifetime_Parms SpawnEmitterCustomLifetime_Parms;
	SpawnEmitterCustomLifetime_Parms.EmitterTemplate = EmitterTemplate;
	SpawnEmitterCustomLifetime_Parms.bSkipAutoActivate = bSkipAutoActivate;

	pFnSpawnEmitterCustomLifetime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnEmitterCustomLifetime, &SpawnEmitterCustomLifetime_Parms, NULL );

	pFnSpawnEmitterCustomLifetime->FunctionFlags |= 0x400;

	return SpawnEmitterCustomLifetime_Parms.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitterMeshAttachment
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// class USkeletalMeshComponent*  Mesh                           ( CPF_Parm | CPF_EditInline )
// struct FName                   AttachPointName                ( CPF_Parm )
// unsigned long                  bAttachToSocket                ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 RelativeLoc                    ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                RelativeRot                    ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitterMeshAttachment ( class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, struct FName AttachPointName, unsigned long bAttachToSocket, struct FVector RelativeLoc, struct FRotator RelativeRot )
{
	static UFunction* pFnSpawnEmitterMeshAttachment = NULL;

	if ( ! pFnSpawnEmitterMeshAttachment )
		pFnSpawnEmitterMeshAttachment = (UFunction*) UObject::GObjObjects()->Data[ 19309 ];

	AEmitterPool_execSpawnEmitterMeshAttachment_Parms SpawnEmitterMeshAttachment_Parms;
	SpawnEmitterMeshAttachment_Parms.EmitterTemplate = EmitterTemplate;
	SpawnEmitterMeshAttachment_Parms.Mesh = Mesh;
	memcpy ( &SpawnEmitterMeshAttachment_Parms.AttachPointName, &AttachPointName, 0x8 );
	SpawnEmitterMeshAttachment_Parms.bAttachToSocket = bAttachToSocket;
	memcpy ( &SpawnEmitterMeshAttachment_Parms.RelativeLoc, &RelativeLoc, 0xC );
	memcpy ( &SpawnEmitterMeshAttachment_Parms.RelativeRot, &RelativeRot, 0xC );

	pFnSpawnEmitterMeshAttachment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnEmitterMeshAttachment, &SpawnEmitterMeshAttachment_Parms, NULL );

	pFnSpawnEmitterMeshAttachment->FunctionFlags |= 0x400;

	return SpawnEmitterMeshAttachment_Parms.ReturnValue;
};

// Function Engine.EmitterPool.SpawnEmitter
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  AttachToActor                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_OptionalParm | CPF_Parm )
// int                            MaxDLEPooledReuses             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInheritScaleFromBase          ( CPF_OptionalParm | CPF_Parm )

class UParticleSystemComponent* AEmitterPool::SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, unsigned long bInheritScaleFromBase )
{
	static UFunction* pFnSpawnEmitter = NULL;

	if ( ! pFnSpawnEmitter )
		pFnSpawnEmitter = (UFunction*) UObject::GObjObjects()->Data[ 10743 ];

	AEmitterPool_execSpawnEmitter_Parms SpawnEmitter_Parms;
	SpawnEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &SpawnEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnEmitter_Parms.AttachToActor = AttachToActor;
	SpawnEmitter_Parms.InInstigator = InInstigator;
	SpawnEmitter_Parms.MaxDLEPooledReuses = MaxDLEPooledReuses;
	SpawnEmitter_Parms.bInheritScaleFromBase = bInheritScaleFromBase;

	pFnSpawnEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnEmitter, &SpawnEmitter_Parms, NULL );

	pFnSpawnEmitter->FunctionFlags |= 0x400;

	return SpawnEmitter_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetPooledComponent
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// unsigned long                  bAutoActivate                  ( CPF_Parm )

class UParticleSystemComponent* AEmitterPool::GetPooledComponent ( class UParticleSystem* EmitterTemplate, unsigned long bAutoActivate )
{
	static UFunction* pFnGetPooledComponent = NULL;

	if ( ! pFnGetPooledComponent )
		pFnGetPooledComponent = (UFunction*) UObject::GObjObjects()->Data[ 19298 ];

	AEmitterPool_execGetPooledComponent_Parms GetPooledComponent_Parms;
	GetPooledComponent_Parms.EmitterTemplate = EmitterTemplate;
	GetPooledComponent_Parms.bAutoActivate = bAutoActivate;

	pFnGetPooledComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledComponent, &GetPooledComponent_Parms, NULL );

	pFnGetPooledComponent->FunctionFlags |= 0x400;

	return GetPooledComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.GetFreeMatInstConsts
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeMatInstConsts = NULL;

	if ( ! pFnGetFreeMatInstConsts )
		pFnGetFreeMatInstConsts = (UFunction*) UObject::GObjObjects()->Data[ 19295 ];

	AEmitterPool_execGetFreeMatInstConsts_Parms GetFreeMatInstConsts_Parms;
	GetFreeMatInstConsts_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeMatInstConsts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeMatInstConsts, &GetFreeMatInstConsts_Parms, NULL );

	pFnGetFreeMatInstConsts->FunctionFlags |= 0x400;

	return GetFreeMatInstConsts_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    SMC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC )
{
	static UFunction* pFnFreeMaterialInstanceConstants = NULL;

	if ( ! pFnFreeMaterialInstanceConstants )
		pFnFreeMaterialInstanceConstants = (UFunction*) UObject::GObjObjects()->Data[ 19293 ];

	AEmitterPool_execFreeMaterialInstanceConstants_Parms FreeMaterialInstanceConstants_Parms;
	FreeMaterialInstanceConstants_Parms.SMC = SMC;

	pFnFreeMaterialInstanceConstants->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeMaterialInstanceConstants, &FreeMaterialInstanceConstants_Parms, NULL );

	pFnFreeMaterialInstanceConstants->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// [0x00084401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMeshComponent*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// unsigned long                  bCreateNewObject               ( CPF_OptionalParm | CPF_Parm )

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent ( unsigned long bCreateNewObject )
{
	static UFunction* pFnGetFreeStaticMeshComponent = NULL;

	if ( ! pFnGetFreeStaticMeshComponent )
		pFnGetFreeStaticMeshComponent = (UFunction*) UObject::GObjObjects()->Data[ 19290 ];

	AEmitterPool_execGetFreeStaticMeshComponent_Parms GetFreeStaticMeshComponent_Parms;
	GetFreeStaticMeshComponent_Parms.bCreateNewObject = bCreateNewObject;

	pFnGetFreeStaticMeshComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFreeStaticMeshComponent, &GetFreeStaticMeshComponent_Parms, NULL );

	pFnGetFreeStaticMeshComponent->FunctionFlags |= 0x400;

	return GetFreeStaticMeshComponent_Parms.ReturnValue;
};

// Function Engine.EmitterPool.FreeStaticMeshComponents
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::FreeStaticMeshComponents ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnFreeStaticMeshComponents = NULL;

	if ( ! pFnFreeStaticMeshComponents )
		pFnFreeStaticMeshComponents = (UFunction*) UObject::GObjObjects()->Data[ 19288 ];

	AEmitterPool_execFreeStaticMeshComponents_Parms FreeStaticMeshComponents_Parms;
	FreeStaticMeshComponents_Parms.PSC = PSC;

	pFnFreeStaticMeshComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeStaticMeshComponents, &FreeStaticMeshComponents_Parms, NULL );

	pFnFreeStaticMeshComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.ReturnToPool
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::ReturnToPool ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnReturnToPool = NULL;

	if ( ! pFnReturnToPool )
		pFnReturnToPool = (UFunction*) UObject::GObjObjects()->Data[ 19286 ];

	AEmitterPool_execReturnToPool_Parms ReturnToPool_Parms;
	ReturnToPool_Parms.PSC = PSC;

	pFnReturnToPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReturnToPool, &ReturnToPool_Parms, NULL );

	pFnReturnToPool->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.ClearPoolComponents
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bClearActive                   ( CPF_OptionalParm | CPF_Parm )

void AEmitterPool::ClearPoolComponents ( unsigned long bClearActive )
{
	static UFunction* pFnClearPoolComponents = NULL;

	if ( ! pFnClearPoolComponents )
		pFnClearPoolComponents = (UFunction*) UObject::GObjObjects()->Data[ 19284 ];

	AEmitterPool_execClearPoolComponents_Parms ClearPoolComponents_Parms;
	ClearPoolComponents_Parms.bClearActive = bClearActive;

	pFnClearPoolComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPoolComponents, &ClearPoolComponents_Parms, NULL );

	pFnClearPoolComponents->FunctionFlags |= 0x400;
};

// Function Engine.EmitterPool.OnParticleSystemFinished
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void AEmitterPool::OnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 19282 ];

	AEmitterPool_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.PSC = PSC;

	pFnOnParticleSystemFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );

	pFnOnParticleSystemFinished->FunctionFlags |= 0x400;
};

// Function Engine.GameInstance.InstanceSpawnArchetype
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class AActor*                  SpawnArchetype                 ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* AGameInstance::InstanceSpawnArchetype ( class AActor* SpawnArchetype, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bNoCollisionFail )
{
	static UFunction* pFnInstanceSpawnArchetype = NULL;

	if ( ! pFnInstanceSpawnArchetype )
		pFnInstanceSpawnArchetype = (UFunction*) UObject::GObjObjects()->Data[ 21884 ];

	AGameInstance_execInstanceSpawnArchetype_Parms InstanceSpawnArchetype_Parms;
	InstanceSpawnArchetype_Parms.SpawnArchetype = SpawnArchetype;
	InstanceSpawnArchetype_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &InstanceSpawnArchetype_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &InstanceSpawnArchetype_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &InstanceSpawnArchetype_Parms.SpawnRotation, &SpawnRotation, 0xC );
	InstanceSpawnArchetype_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnInstanceSpawnArchetype->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceSpawnArchetype, &InstanceSpawnArchetype_Parms, NULL );

	pFnInstanceSpawnArchetype->FunctionFlags |= 0x400;

	return InstanceSpawnArchetype_Parms.ReturnValue;
};

// Function Engine.GameInstance.InstanceSpawn
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  SpawnClass                     ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   SpawnTag                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  ActorTemplate                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* AGameInstance::InstanceSpawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail )
{
	static UFunction* pFnInstanceSpawn = NULL;

	if ( ! pFnInstanceSpawn )
		pFnInstanceSpawn = (UFunction*) UObject::GObjObjects()->Data[ 21875 ];

	AGameInstance_execInstanceSpawn_Parms InstanceSpawn_Parms;
	InstanceSpawn_Parms.SpawnClass = SpawnClass;
	InstanceSpawn_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &InstanceSpawn_Parms.SpawnTag, &SpawnTag, 0x8 );
	memcpy ( &InstanceSpawn_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &InstanceSpawn_Parms.SpawnRotation, &SpawnRotation, 0xC );
	InstanceSpawn_Parms.ActorTemplate = ActorTemplate;
	InstanceSpawn_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnInstanceSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceSpawn, &InstanceSpawn_Parms, NULL );

	pFnInstanceSpawn->FunctionFlags |= 0x400;

	return InstanceSpawn_Parms.ReturnValue;
};

// Function Engine.GameInstance.InstanceRemove
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AGameInstance::InstanceRemove ( class AActor* A )
{
	static UFunction* pFnInstanceRemove = NULL;

	if ( ! pFnInstanceRemove )
		pFnInstanceRemove = (UFunction*) UObject::GObjObjects()->Data[ 21873 ];

	AGameInstance_execInstanceRemove_Parms InstanceRemove_Parms;
	InstanceRemove_Parms.A = A;

	pFnInstanceRemove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceRemove, &InstanceRemove_Parms, NULL );

	pFnInstanceRemove->FunctionFlags |= 0x400;
};

// Function Engine.GameInstance.InstanceAdd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AGameInstance::InstanceAdd ( class AActor* A )
{
	static UFunction* pFnInstanceAdd = NULL;

	if ( ! pFnInstanceAdd )
		pFnInstanceAdd = (UFunction*) UObject::GObjObjects()->Data[ 21871 ];

	AGameInstance_execInstanceAdd_Parms InstanceAdd_Parms;
	InstanceAdd_Parms.A = A;

	pFnInstanceAdd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceAdd, &InstanceAdd_Parms, NULL );

	pFnInstanceAdd->FunctionFlags |= 0x400;
};

// Function Engine.HUD.OnLostFocusPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void AHUD::eventOnLostFocusPause ( unsigned long bEnable )
{
	static UFunction* pFnOnLostFocusPause = NULL;

	if ( ! pFnOnLostFocusPause )
		pFnOnLostFocusPause = (UFunction*) UObject::GObjObjects()->Data[ 23084 ];

	AHUD_eventOnLostFocusPause_Parms OnLostFocusPause_Parms;
	OnLostFocusPause_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnOnLostFocusPause, &OnLostFocusPause_Parms, NULL );
};

// Function Engine.HUD.NotifyBindPostProcessEffects
// [0x00020000] 
// Parameters infos:

void AHUD::NotifyBindPostProcessEffects ( )
{
	static UFunction* pFnNotifyBindPostProcessEffects = NULL;

	if ( ! pFnNotifyBindPostProcessEffects )
		pFnNotifyBindPostProcessEffects = (UFunction*) UObject::GObjObjects()->Data[ 23083 ];

	AHUD_execNotifyBindPostProcessEffects_Parms NotifyBindPostProcessEffects_Parms;

	this->ProcessEvent ( pFnNotifyBindPostProcessEffects, &NotifyBindPostProcessEffects_Parms, NULL );
};

// Function Engine.HUD.PlayerOwnerDied
// [0x00020000] 
// Parameters infos:

void AHUD::PlayerOwnerDied ( )
{
	static UFunction* pFnPlayerOwnerDied = NULL;

	if ( ! pFnPlayerOwnerDied )
		pFnPlayerOwnerDied = (UFunction*) UObject::GObjObjects()->Data[ 23082 ];

	AHUD_execPlayerOwnerDied_Parms PlayerOwnerDied_Parms;

	this->ProcessEvent ( pFnPlayerOwnerDied, &PlayerOwnerDied_Parms, NULL );
};

// Function Engine.HUD.GetFontSizeIndex
// [0x00022002] 
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FontSize                       ( CPF_Parm )

class UFont* AHUD::GetFontSizeIndex ( int FontSize )
{
	static UFunction* pFnGetFontSizeIndex = NULL;

	if ( ! pFnGetFontSizeIndex )
		pFnGetFontSizeIndex = (UFunction*) UObject::GObjObjects()->Data[ 23079 ];

	AHUD_execGetFontSizeIndex_Parms GetFontSizeIndex_Parms;
	GetFontSizeIndex_Parms.FontSize = FontSize;

	this->ProcessEvent ( pFnGetFontSizeIndex, &GetFontSizeIndex_Parms, NULL );

	return GetFontSizeIndex_Parms.ReturnValue;
};

// Function Engine.HUD.DrawText
// [0x00424002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector2D               Position                       ( CPF_Parm )
// class UFont*                   TextFont                       ( CPF_Parm )
// struct FVector2D               FontScale                      ( CPF_Parm )
// struct FColor                  TextColor                      ( CPF_Parm )
// struct FFontRenderInfo         RenderInfo                     ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void AHUD::DrawText ( struct FString Text, struct FVector2D Position, class UFont* TextFont, struct FVector2D FontScale, struct FColor TextColor, struct FFontRenderInfo* RenderInfo )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 23070 ];

	AHUD_execDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.Text, &Text, 0xC );
	memcpy ( &DrawText_Parms.Position, &Position, 0x8 );
	DrawText_Parms.TextFont = TextFont;
	memcpy ( &DrawText_Parms.FontScale, &FontScale, 0x8 );
	memcpy ( &DrawText_Parms.TextColor, &TextColor, 0x4 );

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );

	if ( RenderInfo )
		memcpy ( RenderInfo, &DrawText_Parms.RenderInfo, 0x28 );
};

// Function Engine.HUD.DisplayKismetMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayKismetMessages ( )
{
	static UFunction* pFnDisplayKismetMessages = NULL;

	if ( ! pFnDisplayKismetMessages )
		pFnDisplayKismetMessages = (UFunction*) UObject::GObjObjects()->Data[ 23068 ];

	AHUD_execDisplayKismetMessages_Parms DisplayKismetMessages_Parms;

	this->ProcessEvent ( pFnDisplayKismetMessages, &DisplayKismetMessages_Parms, NULL );
};

// Function Engine.HUD.DisplayLocalMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayLocalMessages ( )
{
	static UFunction* pFnDisplayLocalMessages = NULL;

	if ( ! pFnDisplayLocalMessages )
		pFnDisplayLocalMessages = (UFunction*) UObject::GObjObjects()->Data[ 23058 ];

	AHUD_execDisplayLocalMessages_Parms DisplayLocalMessages_Parms;

	this->ProcessEvent ( pFnDisplayLocalMessages, &DisplayLocalMessages_Parms, NULL );
};

// Function Engine.HUD.DrawMessageText
// [0x00820002] 
// Parameters infos:
// struct FHudLocalizedMessage    LocalMessage                   ( CPF_Parm | CPF_NeedCtorLink )
// float                          ScreenX                        ( CPF_Parm )
// float                          ScreenY                        ( CPF_Parm )

void AHUD::DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY )
{
	static UFunction* pFnDrawMessageText = NULL;

	if ( ! pFnDrawMessageText )
		pFnDrawMessageText = (UFunction*) UObject::GObjObjects()->Data[ 23053 ];

	AHUD_execDrawMessageText_Parms DrawMessageText_Parms;
	memcpy ( &DrawMessageText_Parms.LocalMessage, &LocalMessage, 0x40 );
	DrawMessageText_Parms.ScreenX = ScreenX;
	DrawMessageText_Parms.ScreenY = ScreenY;

	this->ProcessEvent ( pFnDrawMessageText, &DrawMessageText_Parms, NULL );
};

// Function Engine.HUD.DrawMessage
// [0x00420002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          DX                             ( CPF_Parm | CPF_OutParm )
// float                          DY                             ( CPF_Parm | CPF_OutParm )

void AHUD::DrawMessage ( int I, float PosY, float* DX, float* DY )
{
	static UFunction* pFnDrawMessage = NULL;

	if ( ! pFnDrawMessage )
		pFnDrawMessage = (UFunction*) UObject::GObjObjects()->Data[ 23045 ];

	AHUD_execDrawMessage_Parms DrawMessage_Parms;
	DrawMessage_Parms.I = I;
	DrawMessage_Parms.PosY = PosY;

	this->ProcessEvent ( pFnDrawMessage, &DrawMessage_Parms, NULL );

	if ( DX )
		*DX = DrawMessage_Parms.DX;

	if ( DY )
		*DY = DrawMessage_Parms.DY;
};

// Function Engine.HUD.GetScreenCoords
// [0x00420002] 
// Parameters infos:
// float                          PosY                           ( CPF_Parm )
// float                          ScreenX                        ( CPF_Parm | CPF_OutParm )
// float                          ScreenY                        ( CPF_Parm | CPF_OutParm )
// struct FHudLocalizedMessage    InMessage                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AHUD::GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage )
{
	static UFunction* pFnGetScreenCoords = NULL;

	if ( ! pFnGetScreenCoords )
		pFnGetScreenCoords = (UFunction*) UObject::GObjObjects()->Data[ 23040 ];

	AHUD_execGetScreenCoords_Parms GetScreenCoords_Parms;
	GetScreenCoords_Parms.PosY = PosY;

	this->ProcessEvent ( pFnGetScreenCoords, &GetScreenCoords_Parms, NULL );

	if ( ScreenX )
		*ScreenX = GetScreenCoords_Parms.ScreenX;

	if ( ScreenY )
		*ScreenY = GetScreenCoords_Parms.ScreenY;

	if ( InMessage )
		memcpy ( InMessage, &GetScreenCoords_Parms.InMessage, 0x40 );
};

// Function Engine.HUD.AddLocalizedMessage
// [0x00024002] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// int                            MessageCount                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject )
{
	static UFunction* pFnAddLocalizedMessage = NULL;

	if ( ! pFnAddLocalizedMessage )
		pFnAddLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 23029 ];

	AHUD_execAddLocalizedMessage_Parms AddLocalizedMessage_Parms;
	AddLocalizedMessage_Parms.Index = Index;
	AddLocalizedMessage_Parms.InMessageClass = InMessageClass;
	memcpy ( &AddLocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	AddLocalizedMessage_Parms.Switch = Switch;
	AddLocalizedMessage_Parms.Position = Position;
	AddLocalizedMessage_Parms.Lifetime = Lifetime;
	AddLocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &AddLocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	AddLocalizedMessage_Parms.MessageCount = MessageCount;
	AddLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAddLocalizedMessage, &AddLocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.LocalizedMessage
// [0x00024002] 
// Parameters infos:
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_Parm )
// struct FString                 CriticalString                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )
// float                          Lifetime                       ( CPF_Parm )
// int                            FontSize                       ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AHUD::LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject )
{
	static UFunction* pFnLocalizedMessage = NULL;

	if ( ! pFnLocalizedMessage )
		pFnLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 23015 ];

	AHUD_execLocalizedMessage_Parms LocalizedMessage_Parms;
	LocalizedMessage_Parms.InMessageClass = InMessageClass;
	LocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	LocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	memcpy ( &LocalizedMessage_Parms.CriticalString, &CriticalString, 0xC );
	LocalizedMessage_Parms.Switch = Switch;
	LocalizedMessage_Parms.Position = Position;
	LocalizedMessage_Parms.Lifetime = Lifetime;
	LocalizedMessage_Parms.FontSize = FontSize;
	memcpy ( &LocalizedMessage_Parms.DrawColor, &DrawColor, 0x4 );
	LocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnLocalizedMessage, &LocalizedMessage_Parms, NULL );
};

// Function Engine.HUD.AddConsoleMessage
// [0x00024002] 
// Parameters infos:
// struct FString                 M                              ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  InMessageClass                 ( CPF_Parm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime )
{
	static UFunction* pFnAddConsoleMessage = NULL;

	if ( ! pFnAddConsoleMessage )
		pFnAddConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 23008 ];

	AHUD_execAddConsoleMessage_Parms AddConsoleMessage_Parms;
	memcpy ( &AddConsoleMessage_Parms.M, &M, 0xC );
	AddConsoleMessage_Parms.InMessageClass = InMessageClass;
	AddConsoleMessage_Parms.PRI = PRI;
	AddConsoleMessage_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnAddConsoleMessage, &AddConsoleMessage_Parms, NULL );
};

// Function Engine.HUD.ShouldShowConsoleMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FConsoleMessage         InConsoleMessage               ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

bool AHUD::ShouldShowConsoleMessage ( struct FConsoleMessage InConsoleMessage )
{
	static UFunction* pFnShouldShowConsoleMessage = NULL;

	if ( ! pFnShouldShowConsoleMessage )
		pFnShouldShowConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 23005 ];

	AHUD_execShouldShowConsoleMessage_Parms ShouldShowConsoleMessage_Parms;
	memcpy ( &ShouldShowConsoleMessage_Parms.InConsoleMessage, &InConsoleMessage, 0x18 );

	this->ProcessEvent ( pFnShouldShowConsoleMessage, &ShouldShowConsoleMessage_Parms, NULL );

	return ShouldShowConsoleMessage_Parms.ReturnValue;
};

// Function Engine.HUD.DisplayConsoleMessages
// [0x00020002] 
// Parameters infos:

void AHUD::DisplayConsoleMessages ( )
{
	static UFunction* pFnDisplayConsoleMessages = NULL;

	if ( ! pFnDisplayConsoleMessages )
		pFnDisplayConsoleMessages = (UFunction*) UObject::GObjObjects()->Data[ 22999 ];

	AHUD_execDisplayConsoleMessages_Parms DisplayConsoleMessages_Parms;

	this->ProcessEvent ( pFnDisplayConsoleMessages, &DisplayConsoleMessages_Parms, NULL );
};

// Function Engine.HUD.Message
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   MsgType                        ( CPF_Parm )
// float                          Lifetime                       ( CPF_OptionalParm | CPF_Parm )

void AHUD::Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime )
{
	static UFunction* pFnMessage = NULL;

	if ( ! pFnMessage )
		pFnMessage = (UFunction*) UObject::GObjObjects()->Data[ 22993 ];

	AHUD_execMessage_Parms Message_Parms;
	Message_Parms.PRI = PRI;
	memcpy ( &Message_Parms.msg, &msg, 0xC );
	memcpy ( &Message_Parms.MsgType, &MsgType, 0x8 );
	Message_Parms.Lifetime = Lifetime;

	this->ProcessEvent ( pFnMessage, &Message_Parms, NULL );
};

// Function Engine.HUD.ClearMessage
// [0x00420002] 
// Parameters infos:
// struct FHudLocalizedMessage    M                              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AHUD::ClearMessage ( struct FHudLocalizedMessage* M )
{
	static UFunction* pFnClearMessage = NULL;

	if ( ! pFnClearMessage )
		pFnClearMessage = (UFunction*) UObject::GObjObjects()->Data[ 22991 ];

	AHUD_execClearMessage_Parms ClearMessage_Parms;

	this->ProcessEvent ( pFnClearMessage, &ClearMessage_Parms, NULL );

	if ( M )
		memcpy ( M, &ClearMessage_Parms.M, 0x40 );
};

// Function Engine.HUD.DisplayBadConnectionAlert
// [0x00020000] 
// Parameters infos:

void AHUD::DisplayBadConnectionAlert ( )
{
	static UFunction* pFnDisplayBadConnectionAlert = NULL;

	if ( ! pFnDisplayBadConnectionAlert )
		pFnDisplayBadConnectionAlert = (UFunction*) UObject::GObjObjects()->Data[ 22990 ];

	AHUD_execDisplayBadConnectionAlert_Parms DisplayBadConnectionAlert_Parms;

	this->ProcessEvent ( pFnDisplayBadConnectionAlert, &DisplayBadConnectionAlert_Parms, NULL );
};

// Function Engine.HUD.DrawHUD
// [0x00820002] 
// Parameters infos:

void AHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 22987 ];

	AHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.HUD.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 22983 ];

	AHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.HUD.PreCalcValues
// [0x00020002] 
// Parameters infos:

void AHUD::PreCalcValues ( )
{
	static UFunction* pFnPreCalcValues = NULL;

	if ( ! pFnPreCalcValues )
		pFnPreCalcValues = (UFunction*) UObject::GObjObjects()->Data[ 22982 ];

	AHUD_execPreCalcValues_Parms PreCalcValues_Parms;

	this->ProcessEvent ( pFnPreCalcValues, &PreCalcValues_Parms, NULL );
};

// Function Engine.HUD.DrawRoute
// [0x00820002] 
// Parameters infos:
// class APawn*                   Target                         ( CPF_Parm )

void AHUD::DrawRoute ( class APawn* Target )
{
	static UFunction* pFnDrawRoute = NULL;

	if ( ! pFnDrawRoute )
		pFnDrawRoute = (UFunction*) UObject::GObjObjects()->Data[ 22971 ];

	AHUD_execDrawRoute_Parms DrawRoute_Parms;
	DrawRoute_Parms.Target = Target;

	this->ProcessEvent ( pFnDrawRoute, &DrawRoute_Parms, NULL );
};

// Function Engine.HUD.ShowDebugInfo
// [0x00420002] 
// Parameters infos:
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AHUD::ShowDebugInfo ( float* out_YL, float* out_YPos )
{
	static UFunction* pFnShowDebugInfo = NULL;

	if ( ! pFnShowDebugInfo )
		pFnShowDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 22968 ];

	AHUD_execShowDebugInfo_Parms ShowDebugInfo_Parms;

	this->ProcessEvent ( pFnShowDebugInfo, &ShowDebugInfo_Parms, NULL );

	if ( out_YL )
		*out_YL = ShowDebugInfo_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = ShowDebugInfo_Parms.out_YPos;
};

// Function Engine.HUD.ToggleDirectorInfoDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ToggleDirectorInfoDebug ( )
{
	static UFunction* pFnToggleDirectorInfoDebug = NULL;

	if ( ! pFnToggleDirectorInfoDebug )
		pFnToggleDirectorInfoDebug = (UFunction*) UObject::GObjObjects()->Data[ 22967 ];

	AHUD_execToggleDirectorInfoDebug_Parms ToggleDirectorInfoDebug_Parms;

	this->ProcessEvent ( pFnToggleDirectorInfoDebug, &ToggleDirectorInfoDebug_Parms, NULL );
};

// Function Engine.HUD.ToggleDirectorInfoHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ToggleDirectorInfoHUD ( )
{
	static UFunction* pFnToggleDirectorInfoHUD = NULL;

	if ( ! pFnToggleDirectorInfoHUD )
		pFnToggleDirectorInfoHUD = (UFunction*) UObject::GObjObjects()->Data[ 22966 ];

	AHUD_execToggleDirectorInfoHUD_Parms ToggleDirectorInfoHUD_Parms;

	this->ProcessEvent ( pFnToggleDirectorInfoHUD, &ToggleDirectorInfoHUD_Parms, NULL );
};

// Function Engine.HUD.ShouldDisplayDebug
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DebugType                      ( CPF_Parm )

bool AHUD::ShouldDisplayDebug ( struct FName DebugType )
{
	static UFunction* pFnShouldDisplayDebug = NULL;

	if ( ! pFnShouldDisplayDebug )
		pFnShouldDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 6989 ];

	AHUD_execShouldDisplayDebug_Parms ShouldDisplayDebug_Parms;
	memcpy ( &ShouldDisplayDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShouldDisplayDebug, &ShouldDisplayDebug_Parms, NULL );

	return ShouldDisplayDebug_Parms.ReturnValue;
};

// Function Engine.HUD.ShowDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   DebugType                      ( CPF_OptionalParm | CPF_Parm )

void AHUD::ShowDebug ( struct FName DebugType )
{
	static UFunction* pFnShowDebug = NULL;

	if ( ! pFnShowDebug )
		pFnShowDebug = (UFunction*) UObject::GObjObjects()->Data[ 22961 ];

	AHUD_execShowDebug_Parms ShowDebug_Parms;
	memcpy ( &ShowDebug_Parms.DebugType, &DebugType, 0x8 );

	this->ProcessEvent ( pFnShowDebug, &ShowDebug_Parms, NULL );
};

// Function Engine.HUD.SetShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bNewValue                      ( CPF_Parm )

void AHUD::SetShowScores ( unsigned long bNewValue )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = (UFunction*) UObject::GObjObjects()->Data[ 22959 ];

	AHUD_execSetShowScores_Parms SetShowScores_Parms;
	SetShowScores_Parms.bNewValue = bNewValue;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowScores ( )
{
	static UFunction* pFnShowScores = NULL;

	if ( ! pFnShowScores )
		pFnShowScores = (UFunction*) UObject::GObjObjects()->Data[ 22958 ];

	AHUD_execShowScores_Parms ShowScores_Parms;

	this->ProcessEvent ( pFnShowScores, &ShowScores_Parms, NULL );
};

// Function Engine.HUD.ShowHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ShowHUD ( )
{
	static UFunction* pFnShowHUD = NULL;

	if ( ! pFnShowHUD )
		pFnShowHUD = (UFunction*) UObject::GObjObjects()->Data[ 22957 ];

	AHUD_execShowHUD_Parms ShowHUD_Parms;

	this->ProcessEvent ( pFnShowHUD, &ShowHUD_Parms, NULL );
};

// Function Engine.HUD.ToggleHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AHUD::ToggleHUD ( )
{
	static UFunction* pFnToggleHUD = NULL;

	if ( ! pFnToggleHUD )
		pFnToggleHUD = (UFunction*) UObject::GObjObjects()->Data[ 22956 ];

	AHUD_execToggleHUD_Parms ToggleHUD_Parms;

	this->ProcessEvent ( pFnToggleHUD, &ToggleHUD_Parms, NULL );
};

// Function Engine.HUD.AddPostRenderedActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AHUD::AddPostRenderedActor ( class AActor* A )
{
	static UFunction* pFnAddPostRenderedActor = NULL;

	if ( ! pFnAddPostRenderedActor )
		pFnAddPostRenderedActor = (UFunction*) UObject::GObjObjects()->Data[ 22953 ];

	AHUD_execAddPostRenderedActor_Parms AddPostRenderedActor_Parms;
	AddPostRenderedActor_Parms.A = A;

	this->ProcessEvent ( pFnAddPostRenderedActor, &AddPostRenderedActor_Parms, NULL );
};

// Function Engine.HUD.RemovePostRenderedActor
// [0x00020002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )

void AHUD::RemovePostRenderedActor ( class AActor* A )
{
	static UFunction* pFnRemovePostRenderedActor = NULL;

	if ( ! pFnRemovePostRenderedActor )
		pFnRemovePostRenderedActor = (UFunction*) UObject::GObjObjects()->Data[ 22950 ];

	AHUD_execRemovePostRenderedActor_Parms RemovePostRenderedActor_Parms;
	RemovePostRenderedActor_Parms.A = A;

	this->ProcessEvent ( pFnRemovePostRenderedActor, &RemovePostRenderedActor_Parms, NULL );
};

// Function Engine.HUD.DrawActorOverlays
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ViewPoint                      ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

void AHUD::DrawActorOverlays ( struct FVector ViewPoint, struct FRotator ViewRotation )
{
	static UFunction* pFnDrawActorOverlays = NULL;

	if ( ! pFnDrawActorOverlays )
		pFnDrawActorOverlays = (UFunction*) UObject::GObjObjects()->Data[ 22947 ];

	AHUD_execDrawActorOverlays_Parms DrawActorOverlays_Parms;
	memcpy ( &DrawActorOverlays_Parms.ViewPoint, &ViewPoint, 0xC );
	memcpy ( &DrawActorOverlays_Parms.ViewRotation, &ViewRotation, 0xC );

	pFnDrawActorOverlays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawActorOverlays, &DrawActorOverlays_Parms, NULL );

	pFnDrawActorOverlays->FunctionFlags |= 0x400;
};

// Function Engine.HUD.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHUD::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22946 ];

	AHUD_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.HUD.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            X1                             ( CPF_Parm )
// int                            Y1                             ( CPF_Parm )
// int                            X2                             ( CPF_Parm )
// int                            Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = (UFunction*) UObject::GObjObjects()->Data[ 22940 ];

	AHUD_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.HUD.Draw3DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void AHUD::Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor )
{
	static UFunction* pFnDraw3DLine = NULL;

	if ( ! pFnDraw3DLine )
		pFnDraw3DLine = (UFunction*) UObject::GObjObjects()->Data[ 22936 ];

	AHUD_execDraw3DLine_Parms Draw3DLine_Parms;
	memcpy ( &Draw3DLine_Parms.Start, &Start, 0xC );
	memcpy ( &Draw3DLine_Parms.End, &End, 0xC );
	memcpy ( &Draw3DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw3DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw3DLine, &Draw3DLine_Parms, NULL );

	pFnDraw3DLine->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.CheckForSentinelRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAutoTestManager::CheckForSentinelRun ( )
{
	static UFunction* pFnCheckForSentinelRun = NULL;

	if ( ! pFnCheckForSentinelRun )
		pFnCheckForSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 15634 ];

	AAutoTestManager_execCheckForSentinelRun_Parms CheckForSentinelRun_Parms;

	this->ProcessEvent ( pFnCheckForSentinelRun, &CheckForSentinelRun_Parms, NULL );

	return CheckForSentinelRun_Parms.ReturnValue;
};

// Function Engine.AutoTestManager.StartMatch
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 15632 ];

	AAutoTestManager_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.AutoTestManager.GetNextAutomatedTestingMap
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AAutoTestManager::GetNextAutomatedTestingMap ( )
{
	static UFunction* pFnGetNextAutomatedTestingMap = NULL;

	if ( ! pFnGetNextAutomatedTestingMap )
		pFnGetNextAutomatedTestingMap = (UFunction*) UObject::GObjObjects()->Data[ 15626 ];

	AAutoTestManager_execGetNextAutomatedTestingMap_Parms GetNextAutomatedTestingMap_Parms;

	this->ProcessEvent ( pFnGetNextAutomatedTestingMap, &GetNextAutomatedTestingMap_Parms, NULL );

	return GetNextAutomatedTestingMap_Parms.ReturnValue;
};

// Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = (UFunction*) UObject::GObjObjects()->Data[ 15625 ];

	AAutoTestManager_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::IncrementAutomatedTestingMapIndex ( )
{
	static UFunction* pFnIncrementAutomatedTestingMapIndex = NULL;

	if ( ! pFnIncrementAutomatedTestingMapIndex )
		pFnIncrementAutomatedTestingMapIndex = (UFunction*) UObject::GObjObjects()->Data[ 15624 ];

	AAutoTestManager_execIncrementAutomatedTestingMapIndex_Parms IncrementAutomatedTestingMapIndex_Parms;

	this->ProcessEvent ( pFnIncrementAutomatedTestingMapIndex, &IncrementAutomatedTestingMapIndex_Parms, NULL );
};

// Function Engine.AutoTestManager.CloseAutomatedMapTestTimer
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::CloseAutomatedMapTestTimer ( )
{
	static UFunction* pFnCloseAutomatedMapTestTimer = NULL;

	if ( ! pFnCloseAutomatedMapTestTimer )
		pFnCloseAutomatedMapTestTimer = (UFunction*) UObject::GObjObjects()->Data[ 15623 ];

	AAutoTestManager_execCloseAutomatedMapTestTimer_Parms CloseAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnCloseAutomatedMapTestTimer, &CloseAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::StartAutomatedMapTestTimerWorker ( )
{
	static UFunction* pFnStartAutomatedMapTestTimerWorker = NULL;

	if ( ! pFnStartAutomatedMapTestTimerWorker )
		pFnStartAutomatedMapTestTimerWorker = (UFunction*) UObject::GObjObjects()->Data[ 15621 ];

	AAutoTestManager_execStartAutomatedMapTestTimerWorker_Parms StartAutomatedMapTestTimerWorker_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimerWorker, &StartAutomatedMapTestTimerWorker_Parms, NULL );
};

// Function Engine.AutoTestManager.StartAutomatedMapTestTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAutoTestManager::eventStartAutomatedMapTestTimer ( )
{
	static UFunction* pFnStartAutomatedMapTestTimer = NULL;

	if ( ! pFnStartAutomatedMapTestTimer )
		pFnStartAutomatedMapTestTimer = (UFunction*) UObject::GObjObjects()->Data[ 15620 ];

	AAutoTestManager_eventStartAutomatedMapTestTimer_Parms StartAutomatedMapTestTimer_Parms;

	this->ProcessEvent ( pFnStartAutomatedMapTestTimer, &StartAutomatedMapTestTimer_Parms, NULL );
};

// Function Engine.AutoTestManager.DoMemoryTracking
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AAutoTestManager::DoMemoryTracking ( )
{
	static UFunction* pFnDoMemoryTracking = NULL;

	if ( ! pFnDoMemoryTracking )
		pFnDoMemoryTracking = (UFunction*) UObject::GObjObjects()->Data[ 15619 ];

	AAutoTestManager_execDoMemoryTracking_Parms DoMemoryTracking_Parms;

	pFnDoMemoryTracking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoMemoryTracking, &DoMemoryTracking_Parms, NULL );

	pFnDoMemoryTracking->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering
// [0x00820002] 
// Parameters infos:

void AAutoTestManager::DoTimeBasedSentinelStatGathering ( )
{
	static UFunction* pFnDoTimeBasedSentinelStatGathering = NULL;

	if ( ! pFnDoTimeBasedSentinelStatGathering )
		pFnDoTimeBasedSentinelStatGathering = (UFunction*) UObject::GObjObjects()->Data[ 15615 ];

	AAutoTestManager_execDoTimeBasedSentinelStatGathering_Parms DoTimeBasedSentinelStatGathering_Parms;

	this->ProcessEvent ( pFnDoTimeBasedSentinelStatGathering, &DoTimeBasedSentinelStatGathering_Parms, NULL );
};

// Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AAutoTestManager::DoSentinel_ViewDependentMemoryAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation )
{
	static UFunction* pFnDoSentinel_ViewDependentMemoryAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_ViewDependentMemoryAtSpecificLocation )
		pFnDoSentinel_ViewDependentMemoryAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 15612 ];

	AAutoTestManager_execDoSentinel_ViewDependentMemoryAtSpecificLocation_Parms DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms;

	pFnDoSentinel_ViewDependentMemoryAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_ViewDependentMemoryAtSpecificLocation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_ViewDependentMemoryAtSpecificLocation->FunctionFlags |= 0x400;

	if ( InLocation )
		memcpy ( InLocation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms.InLocation, 0xC );

	if ( InRotation )
		memcpy ( InRotation, &DoSentinel_ViewDependentMemoryAtSpecificLocation_Parms.InRotation, 0xC );
};

// Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AAutoTestManager::DoSentinel_PerfAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation )
{
	static UFunction* pFnDoSentinel_PerfAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_PerfAtSpecificLocation )
		pFnDoSentinel_PerfAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 15609 ];

	AAutoTestManager_execDoSentinel_PerfAtSpecificLocation_Parms DoSentinel_PerfAtSpecificLocation_Parms;

	pFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_PerfAtSpecificLocation, &DoSentinel_PerfAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_PerfAtSpecificLocation->FunctionFlags |= 0x400;

	if ( InLocation )
		memcpy ( InLocation, &DoSentinel_PerfAtSpecificLocation_Parms.InLocation, 0xC );

	if ( InRotation )
		memcpy ( InRotation, &DoSentinel_PerfAtSpecificLocation_Parms.InRotation, 0xC );
};

// Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AAutoTestManager::DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnDoSentinel_MemoryAtSpecificLocation = NULL;

	if ( ! pFnDoSentinel_MemoryAtSpecificLocation )
		pFnDoSentinel_MemoryAtSpecificLocation = (UFunction*) UObject::GObjObjects()->Data[ 15606 ];

	AAutoTestManager_execDoSentinel_MemoryAtSpecificLocation_Parms DoSentinel_MemoryAtSpecificLocation_Parms;
	memcpy ( &DoSentinel_MemoryAtSpecificLocation_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &DoSentinel_MemoryAtSpecificLocation_Parms.InRotation, &InRotation, 0xC );

	pFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinel_MemoryAtSpecificLocation, &DoSentinel_MemoryAtSpecificLocation_Parms, NULL );

	pFnDoSentinel_MemoryAtSpecificLocation->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.GetTravelLocations
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )
// TArray< struct FVector >       TravelPoints                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AAutoTestManager::GetTravelLocations ( struct FName LevelName, class APlayerController* PC, TArray< struct FVector >* TravelPoints )
{
	static UFunction* pFnGetTravelLocations = NULL;

	if ( ! pFnGetTravelLocations )
		pFnGetTravelLocations = (UFunction*) UObject::GObjObjects()->Data[ 15601 ];

	AAutoTestManager_execGetTravelLocations_Parms GetTravelLocations_Parms;
	memcpy ( &GetTravelLocations_Parms.LevelName, &LevelName, 0x8 );
	GetTravelLocations_Parms.PC = PC;

	pFnGetTravelLocations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTravelLocations, &GetTravelLocations_Parms, NULL );

	pFnGetTravelLocations->FunctionFlags |= 0x400;

	if ( TravelPoints )
		memcpy ( TravelPoints, &GetTravelLocations_Parms.TravelPoints, 0xC );
};

// Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AAutoTestManager::HandlePerLoadedMapAudioStats ( )
{
	static UFunction* pFnHandlePerLoadedMapAudioStats = NULL;

	if ( ! pFnHandlePerLoadedMapAudioStats )
		pFnHandlePerLoadedMapAudioStats = (UFunction*) UObject::GObjObjects()->Data[ 15600 ];

	AAutoTestManager_execHandlePerLoadedMapAudioStats_Parms HandlePerLoadedMapAudioStats_Parms;

	pFnHandlePerLoadedMapAudioStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandlePerLoadedMapAudioStats, &HandlePerLoadedMapAudioStats_Parms, NULL );

	pFnHandlePerLoadedMapAudioStats->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AAutoTestManager::DoSentinelActionPerLoadedMap ( )
{
	static UFunction* pFnDoSentinelActionPerLoadedMap = NULL;

	if ( ! pFnDoSentinelActionPerLoadedMap )
		pFnDoSentinelActionPerLoadedMap = (UFunction*) UObject::GObjObjects()->Data[ 15599 ];

	AAutoTestManager_execDoSentinelActionPerLoadedMap_Parms DoSentinelActionPerLoadedMap_Parms;

	pFnDoSentinelActionPerLoadedMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSentinelActionPerLoadedMap, &DoSentinelActionPerLoadedMap_Parms, NULL );

	pFnDoSentinelActionPerLoadedMap->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.DoTravelTheWorld
// [0x00020002] 
// Parameters infos:

void AAutoTestManager::DoTravelTheWorld ( )
{
	static UFunction* pFnDoTravelTheWorld = NULL;

	if ( ! pFnDoTravelTheWorld )
		pFnDoTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 15579 ];

	AAutoTestManager_execDoTravelTheWorld_Parms DoTravelTheWorld_Parms;

	this->ProcessEvent ( pFnDoTravelTheWorld, &DoTravelTheWorld_Parms, NULL );
};

// Function Engine.AutoTestManager.EndSentinelRun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  RunResult                      ( CPF_Parm )

void AAutoTestManager::EndSentinelRun ( unsigned char RunResult )
{
	static UFunction* pFnEndSentinelRun = NULL;

	if ( ! pFnEndSentinelRun )
		pFnEndSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 15577 ];

	AAutoTestManager_execEndSentinelRun_Parms EndSentinelRun_Parms;
	EndSentinelRun_Parms.RunResult = RunResult;

	pFnEndSentinelRun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndSentinelRun, &EndSentinelRun_Parms, NULL );

	pFnEndSentinelRun->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Const | CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Const | CPF_Parm )

void AAutoTestManager::AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation )
{
	static UFunction* pFnAddSentinelPerTimePeriodStats = NULL;

	if ( ! pFnAddSentinelPerTimePeriodStats )
		pFnAddSentinelPerTimePeriodStats = (UFunction*) UObject::GObjObjects()->Data[ 15574 ];

	AAutoTestManager_execAddSentinelPerTimePeriodStats_Parms AddSentinelPerTimePeriodStats_Parms;
	memcpy ( &AddSentinelPerTimePeriodStats_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &AddSentinelPerTimePeriodStats_Parms.InRotation, &InRotation, 0xC );

	pFnAddSentinelPerTimePeriodStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSentinelPerTimePeriodStats, &AddSentinelPerTimePeriodStats_Parms, NULL );

	pFnAddSentinelPerTimePeriodStats->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.BeginSentinelRun
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 TaskDescription                ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TaskParameter                  ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TagDesc                        ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void AAutoTestManager::BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc )
{
	static UFunction* pFnBeginSentinelRun = NULL;

	if ( ! pFnBeginSentinelRun )
		pFnBeginSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 15570 ];

	AAutoTestManager_execBeginSentinelRun_Parms BeginSentinelRun_Parms;
	memcpy ( &BeginSentinelRun_Parms.TaskDescription, &TaskDescription, 0xC );
	memcpy ( &BeginSentinelRun_Parms.TaskParameter, &TaskParameter, 0xC );
	memcpy ( &BeginSentinelRun_Parms.TagDesc, &TagDesc, 0xC );

	pFnBeginSentinelRun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginSentinelRun, &BeginSentinelRun_Parms, NULL );

	pFnBeginSentinelRun->FunctionFlags |= 0x400;
};

// Function Engine.AutoTestManager.InitializeOptions
// [0x00020002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )

void AAutoTestManager::InitializeOptions ( struct FString Options )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 15566 ];

	AAutoTestManager_execInitializeOptions_Parms InitializeOptions_Parms;
	memcpy ( &InitializeOptions_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function Engine.AutoTestManager.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAutoTestManager::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 15565 ];

	AAutoTestManager_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.AutoTestManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAutoTestManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 15564 ];

	AAutoTestManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.CoverGroup.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ACoverGroup::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 17232 ];

	ACoverGroup_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverGroup.ToggleGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::ToggleGroup ( )
{
	static UFunction* pFnToggleGroup = NULL;

	if ( ! pFnToggleGroup )
		pFnToggleGroup = (UFunction*) UObject::GObjObjects()->Data[ 17231 ];

	ACoverGroup_execToggleGroup_Parms ToggleGroup_Parms;

	pFnToggleGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleGroup, &ToggleGroup_Parms, NULL );

	pFnToggleGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.DisableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::DisableGroup ( )
{
	static UFunction* pFnDisableGroup = NULL;

	if ( ! pFnDisableGroup )
		pFnDisableGroup = (UFunction*) UObject::GObjObjects()->Data[ 17230 ];

	ACoverGroup_execDisableGroup_Parms DisableGroup_Parms;

	pFnDisableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableGroup, &DisableGroup_Parms, NULL );

	pFnDisableGroup->FunctionFlags |= 0x400;
};

// Function Engine.CoverGroup.EnableGroup
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACoverGroup::EnableGroup ( )
{
	static UFunction* pFnEnableGroup = NULL;

	if ( ! pFnEnableGroup )
		pFnEnableGroup = (UFunction*) UObject::GObjObjects()->Data[ 17229 ];

	ACoverGroup_execEnableGroup_Parms EnableGroup_Parms;

	pFnEnableGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableGroup, &EnableGroup_Parms, NULL );

	pFnEnableGroup->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFileWriter::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 19915 ];

	AFileWriter_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.FileWriter.Logf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 logString                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AFileWriter::Logf ( struct FString logString )
{
	static UFunction* pFnLogf = NULL;

	if ( ! pFnLogf )
		pFnLogf = (UFunction*) UObject::GObjObjects()->Data[ 19913 ];

	AFileWriter_execLogf_Parms Logf_Parms;
	memcpy ( &Logf_Parms.logString, &logString, 0xC );

	pFnLogf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogf, &Logf_Parms, NULL );

	pFnLogf->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.CloseFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AFileWriter::CloseFile ( )
{
	static UFunction* pFnCloseFile = NULL;

	if ( ! pFnCloseFile )
		pFnCloseFile = (UFunction*) UObject::GObjObjects()->Data[ 19912 ];

	AFileWriter_execCloseFile_Parms CloseFile_Parms;

	pFnCloseFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseFile, &CloseFile_Parms, NULL );

	pFnCloseFile->FunctionFlags |= 0x400;
};

// Function Engine.FileWriter.OpenFile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InFilename                     ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned char                  InFileType                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 InExtension                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncludeTimeStamp              ( CPF_OptionalParm | CPF_Parm )

bool AFileWriter::OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp )
{
	static UFunction* pFnOpenFile = NULL;

	if ( ! pFnOpenFile )
		pFnOpenFile = (UFunction*) UObject::GObjObjects()->Data[ 19905 ];

	AFileWriter_execOpenFile_Parms OpenFile_Parms;
	memcpy ( &OpenFile_Parms.InFilename, &InFilename, 0xC );
	OpenFile_Parms.InFileType = InFileType;
	memcpy ( &OpenFile_Parms.InExtension, &InExtension, 0xC );
	OpenFile_Parms.bUnique = bUnique;
	OpenFile_Parms.bIncludeTimeStamp = bIncludeTimeStamp;

	pFnOpenFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenFile, &OpenFile_Parms, NULL );

	pFnOpenFile->FunctionFlags |= 0x400;

	return OpenFile_Parms.ReturnValue;
};

// Function Engine.FileLog.CloseLog
// [0x00020002] 
// Parameters infos:

void AFileLog::CloseLog ( )
{
	static UFunction* pFnCloseLog = NULL;

	if ( ! pFnCloseLog )
		pFnCloseLog = (UFunction*) UObject::GObjObjects()->Data[ 19924 ];

	AFileLog_execCloseLog_Parms CloseLog_Parms;

	this->ProcessEvent ( pFnCloseLog, &CloseLog_Parms, NULL );
};

// Function Engine.FileLog.OpenLog
// [0x00024002] 
// Parameters infos:
// struct FString                 LogFilename                    ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FString                 extension                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUnique                        ( CPF_OptionalParm | CPF_Parm )

void AFileLog::OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique )
{
	static UFunction* pFnOpenLog = NULL;

	if ( ! pFnOpenLog )
		pFnOpenLog = (UFunction*) UObject::GObjObjects()->Data[ 19920 ];

	AFileLog_execOpenLog_Parms OpenLog_Parms;
	memcpy ( &OpenLog_Parms.LogFilename, &LogFilename, 0xC );
	memcpy ( &OpenLog_Parms.extension, &extension, 0xC );
	OpenLog_Parms.bUnique = bUnique;

	this->ProcessEvent ( pFnOpenLog, &OpenLog_Parms, NULL );
};

// Function Engine.GameInfo.ClientMapLoadFail
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventClientMapLoadFail ( struct FUniqueNetId PlayerID, struct FString MapName )
{
	static UFunction* pFnClientMapLoadFail = NULL;

	if ( ! pFnClientMapLoadFail )
		pFnClientMapLoadFail = (UFunction*) UObject::GObjObjects()->Data[ 21827 ];

	AGameInfo_eventClientMapLoadFail_Parms ClientMapLoadFail_Parms;
	memcpy ( &ClientMapLoadFail_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &ClientMapLoadFail_Parms.MapName, &MapName, 0xC );

	this->ProcessEvent ( pFnClientMapLoadFail, &ClientMapLoadFail_Parms, NULL );
};

// Function Engine.GameInfo.ClearOnlineDelegates
// [0x00020000] 
// Parameters infos:

void AGameInfo::ClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 21826 ];

	AGameInfo_execClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function Engine.GameInfo.InitCrowdPopulationManager
// [0x00020002] 
// Parameters infos:

void AGameInfo::InitCrowdPopulationManager ( )
{
	static UFunction* pFnInitCrowdPopulationManager = NULL;

	if ( ! pFnInitCrowdPopulationManager )
		pFnInitCrowdPopulationManager = (UFunction*) UObject::GObjObjects()->Data[ 21823 ];

	AGameInfo_execInitCrowdPopulationManager_Parms InitCrowdPopulationManager_Parms;

	this->ProcessEvent ( pFnInitCrowdPopulationManager, &InitCrowdPopulationManager_Parms, NULL );
};

// Function Engine.GameInfo.OnEngineHasLoaded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventOnEngineHasLoaded ( )
{
	static UFunction* pFnOnEngineHasLoaded = NULL;

	if ( ! pFnOnEngineHasLoaded )
		pFnOnEngineHasLoaded = (UFunction*) UObject::GObjObjects()->Data[ 21822 ];

	AGameInfo_eventOnEngineHasLoaded_Parms OnEngineHasLoaded_Parms;

	this->ProcessEvent ( pFnOnEngineHasLoaded, &OnEngineHasLoaded_Parms, NULL );
};

// Function Engine.GameInfo.OnDestroyOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 21819 ];

	AGameInfo_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Engine.GameInfo.StandbyCheatDetected
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned char                  StandbyType                    ( CPF_Parm )

void AGameInfo::eventStandbyCheatDetected ( unsigned char StandbyType )
{
	static UFunction* pFnStandbyCheatDetected = NULL;

	if ( ! pFnStandbyCheatDetected )
		pFnStandbyCheatDetected = (UFunction*) UObject::GObjObjects()->Data[ 21817 ];

	AGameInfo_eventStandbyCheatDetected_Parms StandbyCheatDetected_Parms;
	StandbyCheatDetected_Parms.StandbyType = StandbyType;

	this->ProcessEvent ( pFnStandbyCheatDetected, &StandbyCheatDetected_Parms, NULL );
};

// Function Engine.GameInfo.EnableStandbyCheatDetection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIsEnabled                     ( CPF_Parm )

void AGameInfo::EnableStandbyCheatDetection ( unsigned long bIsEnabled )
{
	static UFunction* pFnEnableStandbyCheatDetection = NULL;

	if ( ! pFnEnableStandbyCheatDetection )
		pFnEnableStandbyCheatDetection = (UFunction*) UObject::GObjObjects()->Data[ 21815 ];

	AGameInfo_execEnableStandbyCheatDetection_Parms EnableStandbyCheatDetection_Parms;
	EnableStandbyCheatDetection_Parms.bIsEnabled = bIsEnabled;

	pFnEnableStandbyCheatDetection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableStandbyCheatDetection, &EnableStandbyCheatDetection_Parms, NULL );

	pFnEnableStandbyCheatDetection->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.BeginBVT
// [0x00024302] ( FUNC_Exec )
// Parameters infos:
// struct FString                 TagDesc                        ( CPF_OptionalParm | CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void AGameInfo::BeginBVT ( struct FString TagDesc )
{
	static UFunction* pFnBeginBVT = NULL;

	if ( ! pFnBeginBVT )
		pFnBeginBVT = (UFunction*) UObject::GObjObjects()->Data[ 21813 ];

	AGameInfo_execBeginBVT_Parms BeginBVT_Parms;
	memcpy ( &BeginBVT_Parms.TagDesc, &TagDesc, 0xC );

	this->ProcessEvent ( pFnBeginBVT, &BeginBVT_Parms, NULL );
};

// Function Engine.GameInfo.CheckForSentinelRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::CheckForSentinelRun ( )
{
	static UFunction* pFnCheckForSentinelRun = NULL;

	if ( ! pFnCheckForSentinelRun )
		pFnCheckForSentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 21811 ];

	AGameInfo_execCheckForSentinelRun_Parms CheckForSentinelRun_Parms;

	this->ProcessEvent ( pFnCheckForSentinelRun, &CheckForSentinelRun_Parms, NULL );

	return CheckForSentinelRun_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldAutoContinueToNextRound
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::ShouldAutoContinueToNextRound ( )
{
	static UFunction* pFnShouldAutoContinueToNextRound = NULL;

	if ( ! pFnShouldAutoContinueToNextRound )
		pFnShouldAutoContinueToNextRound = (UFunction*) UObject::GObjObjects()->Data[ 21809 ];

	AGameInfo_execShouldAutoContinueToNextRound_Parms ShouldAutoContinueToNextRound_Parms;

	this->ProcessEvent ( pFnShouldAutoContinueToNextRound, &ShouldAutoContinueToNextRound_Parms, NULL );

	return ShouldAutoContinueToNextRound_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsDoingASentinelRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsDoingASentinelRun ( )
{
	static UFunction* pFnIsDoingASentinelRun = NULL;

	if ( ! pFnIsDoingASentinelRun )
		pFnIsDoingASentinelRun = (UFunction*) UObject::GObjObjects()->Data[ 12895 ];

	AGameInfo_execIsDoingASentinelRun_Parms IsDoingASentinelRun_Parms;

	this->ProcessEvent ( pFnIsDoingASentinelRun, &IsDoingASentinelRun_Parms, NULL );

	return IsDoingASentinelRun_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsCheckingForMemLeaks
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsCheckingForMemLeaks ( )
{
	static UFunction* pFnIsCheckingForMemLeaks = NULL;

	if ( ! pFnIsCheckingForMemLeaks )
		pFnIsCheckingForMemLeaks = (UFunction*) UObject::GObjObjects()->Data[ 21807 ];

	AGameInfo_execIsCheckingForMemLeaks_Parms IsCheckingForMemLeaks_Parms;

	this->ProcessEvent ( pFnIsCheckingForMemLeaks, &IsCheckingForMemLeaks_Parms, NULL );

	return IsCheckingForMemLeaks_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsCheckingForFragmentation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsCheckingForFragmentation ( )
{
	static UFunction* pFnIsCheckingForFragmentation = NULL;

	if ( ! pFnIsCheckingForFragmentation )
		pFnIsCheckingForFragmentation = (UFunction*) UObject::GObjObjects()->Data[ 21805 ];

	AGameInfo_execIsCheckingForFragmentation_Parms IsCheckingForFragmentation_Parms;

	this->ProcessEvent ( pFnIsCheckingForFragmentation, &IsCheckingForFragmentation_Parms, NULL );

	return IsCheckingForFragmentation_Parms.ReturnValue;
};

// Function Engine.GameInfo.IsAutomatedPerfTesting
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::IsAutomatedPerfTesting ( )
{
	static UFunction* pFnIsAutomatedPerfTesting = NULL;

	if ( ! pFnIsAutomatedPerfTesting )
		pFnIsAutomatedPerfTesting = (UFunction*) UObject::GObjObjects()->Data[ 11108 ];

	AGameInfo_execIsAutomatedPerfTesting_Parms IsAutomatedPerfTesting_Parms;

	this->ProcessEvent ( pFnIsAutomatedPerfTesting, &IsAutomatedPerfTesting_Parms, NULL );

	return IsAutomatedPerfTesting_Parms.ReturnValue;
};

// Function Engine.GameInfo.SetBandwidthLimit
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// float                          AsyncIOBandwidthLimit          ( CPF_Parm )

void AGameInfo::SetBandwidthLimit ( float AsyncIOBandwidthLimit )
{
	static UFunction* pFnSetBandwidthLimit = NULL;

	if ( ! pFnSetBandwidthLimit )
		pFnSetBandwidthLimit = (UFunction*) UObject::GObjObjects()->Data[ 21802 ];

	AGameInfo_execSetBandwidthLimit_Parms SetBandwidthLimit_Parms;
	SetBandwidthLimit_Parms.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	pFnSetBandwidthLimit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBandwidthLimit, &SetBandwidthLimit_Parms, NULL );

	pFnSetBandwidthLimit->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.DoTravelTheWorld
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AGameInfo::DoTravelTheWorld ( )
{
	static UFunction* pFnDoTravelTheWorld = NULL;

	if ( ! pFnDoTravelTheWorld )
		pFnDoTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 21801 ];

	AGameInfo_execDoTravelTheWorld_Parms DoTravelTheWorld_Parms;

	this->ProcessEvent ( pFnDoTravelTheWorld, &DoTravelTheWorld_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToTravelToSession
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void AGameInfo::TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnTellClientsToTravelToSession = NULL;

	if ( ! pFnTellClientsToTravelToSession )
		pFnTellClientsToTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 21796 ];

	AGameInfo_execTellClientsToTravelToSession_Parms TellClientsToTravelToSession_Parms;
	memcpy ( &TellClientsToTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	TellClientsToTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &TellClientsToTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnTellClientsToTravelToSession, &TellClientsToTravelToSession_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsPartyHostIsLeaving
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PartyHostPlayerId              ( CPF_Parm )

void AGameInfo::TellClientsPartyHostIsLeaving ( struct FUniqueNetId PartyHostPlayerId )
{
	static UFunction* pFnTellClientsPartyHostIsLeaving = NULL;

	if ( ! pFnTellClientsPartyHostIsLeaving )
		pFnTellClientsPartyHostIsLeaving = (UFunction*) UObject::GObjObjects()->Data[ 21793 ];

	AGameInfo_execTellClientsPartyHostIsLeaving_Parms TellClientsPartyHostIsLeaving_Parms;
	memcpy ( &TellClientsPartyHostIsLeaving_Parms.PartyHostPlayerId, &PartyHostPlayerId, 0x48 );

	this->ProcessEvent ( pFnTellClientsPartyHostIsLeaving, &TellClientsPartyHostIsLeaving_Parms, NULL );
};

// Function Engine.GameInfo.TellClientsToReturnToPartyHost
// [0x00820002] 
// Parameters infos:

void AGameInfo::TellClientsToReturnToPartyHost ( )
{
	static UFunction* pFnTellClientsToReturnToPartyHost = NULL;

	if ( ! pFnTellClientsToReturnToPartyHost )
		pFnTellClientsToReturnToPartyHost = (UFunction*) UObject::GObjObjects()->Data[ 21789 ];

	AGameInfo_execTellClientsToReturnToPartyHost_Parms TellClientsToReturnToPartyHost_Parms;

	this->ProcessEvent ( pFnTellClientsToReturnToPartyHost, &TellClientsToReturnToPartyHost_Parms, NULL );
};

// Function Engine.GameInfo.OnServerCreateComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnServerCreateComplete = NULL;

	if ( ! pFnOnServerCreateComplete )
		pFnOnServerCreateComplete = (UFunction*) UObject::GObjObjects()->Data[ 21785 ];

	AGameInfo_execOnServerCreateComplete_Parms OnServerCreateComplete_Parms;
	memcpy ( &OnServerCreateComplete_Parms.SessionName, &SessionName, 0x8 );
	OnServerCreateComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnServerCreateComplete, &OnServerCreateComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServer
// [0x00020002] 
// Parameters infos:

void AGameInfo::RegisterServer ( )
{
	static UFunction* pFnRegisterServer = NULL;

	if ( ! pFnRegisterServer )
		pFnRegisterServer = (UFunction*) UObject::GObjObjects()->Data[ 21780 ];

	AGameInfo_execRegisterServer_Parms RegisterServer_Parms;

	this->ProcessEvent ( pFnRegisterServer, &RegisterServer_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void AGameInfo::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 21778 ];

	AGameInfo_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.GameInfo.OnLoginFailed
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void AGameInfo::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 21775 ];

	AGameInfo_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.GameInfo.ClearAutoLoginDelegates
// [0x00020002] 
// Parameters infos:

void AGameInfo::ClearAutoLoginDelegates ( )
{
	static UFunction* pFnClearAutoLoginDelegates = NULL;

	if ( ! pFnClearAutoLoginDelegates )
		pFnClearAutoLoginDelegates = (UFunction*) UObject::GObjObjects()->Data[ 21774 ];

	AGameInfo_execClearAutoLoginDelegates_Parms ClearAutoLoginDelegates_Parms;

	this->ProcessEvent ( pFnClearAutoLoginDelegates, &ClearAutoLoginDelegates_Parms, NULL );
};

// Function Engine.GameInfo.ProcessServerLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::ProcessServerLogin ( )
{
	static UFunction* pFnProcessServerLogin = NULL;

	if ( ! pFnProcessServerLogin )
		pFnProcessServerLogin = (UFunction*) UObject::GObjObjects()->Data[ 21770 ];

	AGameInfo_execProcessServerLogin_Parms ProcessServerLogin_Parms;

	this->ProcessEvent ( pFnProcessServerLogin, &ProcessServerLogin_Parms, NULL );

	return ProcessServerLogin_Parms.ReturnValue;
};

// Function Engine.GameInfo.MatineeCancelled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventMatineeCancelled ( )
{
	static UFunction* pFnMatineeCancelled = NULL;

	if ( ! pFnMatineeCancelled )
		pFnMatineeCancelled = (UFunction*) UObject::GObjObjects()->Data[ 21769 ];

	AGameInfo_eventMatineeCancelled_Parms MatineeCancelled_Parms;

	this->ProcessEvent ( pFnMatineeCancelled, &MatineeCancelled_Parms, NULL );
};

// Function Engine.GameInfo.RecalculateSkillRating
// [0x00820002] 
// Parameters infos:

void AGameInfo::RecalculateSkillRating ( )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = (UFunction*) UObject::GObjObjects()->Data[ 21762 ];

	AGameInfo_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameplayMuteList
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UpdateGameplayMuteList ( class APlayerController* PC )
{
	static UFunction* pFnUpdateGameplayMuteList = NULL;

	if ( ! pFnUpdateGameplayMuteList )
		pFnUpdateGameplayMuteList = (UFunction*) UObject::GObjObjects()->Data[ 21760 ];

	AGameInfo_execUpdateGameplayMuteList_Parms UpdateGameplayMuteList_Parms;
	UpdateGameplayMuteList_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdateGameplayMuteList, &UpdateGameplayMuteList_Parms, NULL );
};

// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// [0x00020002] 
// Parameters infos:

void AGameInfo::NotifyArbitratedMatchEnd ( )
{
	static UFunction* pFnNotifyArbitratedMatchEnd = NULL;

	if ( ! pFnNotifyArbitratedMatchEnd )
		pFnNotifyArbitratedMatchEnd = (UFunction*) UObject::GObjObjects()->Data[ 21758 ];

	AGameInfo_execNotifyArbitratedMatchEnd_Parms NotifyArbitratedMatchEnd_Parms;

	this->ProcessEvent ( pFnNotifyArbitratedMatchEnd, &NotifyArbitratedMatchEnd_Parms, NULL );
};

// Function Engine.GameInfo.MatchIsInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::MatchIsInProgress ( )
{
	static UFunction* pFnMatchIsInProgress = NULL;

	if ( ! pFnMatchIsInProgress )
		pFnMatchIsInProgress = (UFunction*) UObject::GObjObjects()->Data[ 21730 ];

	AGameInfo_execMatchIsInProgress_Parms MatchIsInProgress_Parms;

	this->ProcessEvent ( pFnMatchIsInProgress, &MatchIsInProgress_Parms, NULL );

	return MatchIsInProgress_Parms.ReturnValue;
};

// Function Engine.GameInfo.ArbitrationRegistrationComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnArbitrationRegistrationComplete = NULL;

	if ( ! pFnArbitrationRegistrationComplete )
		pFnArbitrationRegistrationComplete = (UFunction*) UObject::GObjObjects()->Data[ 21727 ];

	AGameInfo_execArbitrationRegistrationComplete_Parms ArbitrationRegistrationComplete_Parms;
	memcpy ( &ArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	ArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnArbitrationRegistrationComplete, &ArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.GameInfo.RegisterServerForArbitration
// [0x00020000] 
// Parameters infos:

void AGameInfo::RegisterServerForArbitration ( )
{
	static UFunction* pFnRegisterServerForArbitration = NULL;

	if ( ! pFnRegisterServerForArbitration )
		pFnRegisterServerForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 21726 ];

	AGameInfo_execRegisterServerForArbitration_Parms RegisterServerForArbitration_Parms;

	this->ProcessEvent ( pFnRegisterServerForArbitration, &RegisterServerForArbitration_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitratedMatch
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitratedMatch ( )
{
	static UFunction* pFnStartArbitratedMatch = NULL;

	if ( ! pFnStartArbitratedMatch )
		pFnStartArbitratedMatch = (UFunction*) UObject::GObjObjects()->Data[ 21725 ];

	AGameInfo_execStartArbitratedMatch_Parms StartArbitratedMatch_Parms;

	this->ProcessEvent ( pFnStartArbitratedMatch, &StartArbitratedMatch_Parms, NULL );
};

// Function Engine.GameInfo.StartArbitrationRegistration
// [0x00020000] 
// Parameters infos:

void AGameInfo::StartArbitrationRegistration ( )
{
	static UFunction* pFnStartArbitrationRegistration = NULL;

	if ( ! pFnStartArbitrationRegistration )
		pFnStartArbitrationRegistration = (UFunction*) UObject::GObjObjects()->Data[ 21724 ];

	AGameInfo_execStartArbitrationRegistration_Parms StartArbitrationRegistration_Parms;

	this->ProcessEvent ( pFnStartArbitrationRegistration, &StartArbitrationRegistration_Parms, NULL );
};

// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// [0x00020000] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful )
{
	static UFunction* pFnProcessClientRegistrationCompletion = NULL;

	if ( ! pFnProcessClientRegistrationCompletion )
		pFnProcessClientRegistrationCompletion = (UFunction*) UObject::GObjObjects()->Data[ 21721 ];

	AGameInfo_execProcessClientRegistrationCompletion_Parms ProcessClientRegistrationCompletion_Parms;
	ProcessClientRegistrationCompletion_Parms.PC = PC;
	ProcessClientRegistrationCompletion_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnProcessClientRegistrationCompletion, &ProcessClientRegistrationCompletion_Parms, NULL );
};

// Function Engine.GameInfo.UpdateGameSettingsCounts
// [0x00020002] 
// Parameters infos:

void AGameInfo::UpdateGameSettingsCounts ( )
{
	static UFunction* pFnUpdateGameSettingsCounts = NULL;

	if ( ! pFnUpdateGameSettingsCounts )
		pFnUpdateGameSettingsCounts = (UFunction*) UObject::GObjObjects()->Data[ 21719 ];

	AGameInfo_execUpdateGameSettingsCounts_Parms UpdateGameSettingsCounts_Parms;

	this->ProcessEvent ( pFnUpdateGameSettingsCounts, &UpdateGameSettingsCounts_Parms, NULL );
};

// Function Engine.GameInfo.SetSeamlessTravelViewTarget
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::SetSeamlessTravelViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnSetSeamlessTravelViewTarget = NULL;

	if ( ! pFnSetSeamlessTravelViewTarget )
		pFnSetSeamlessTravelViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 21717 ];

	AGameInfo_execSetSeamlessTravelViewTarget_Parms SetSeamlessTravelViewTarget_Parms;
	SetSeamlessTravelViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnSetSeamlessTravelViewTarget, &SetSeamlessTravelViewTarget_Parms, NULL );
};

// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class AController*             C                              ( CPF_Parm | CPF_OutParm )

void AGameInfo::eventHandleSeamlessTravelPlayer ( class AController** C )
{
	static UFunction* pFnHandleSeamlessTravelPlayer = NULL;

	if ( ! pFnHandleSeamlessTravelPlayer )
		pFnHandleSeamlessTravelPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21709 ];

	AGameInfo_eventHandleSeamlessTravelPlayer_Parms HandleSeamlessTravelPlayer_Parms;

	this->ProcessEvent ( pFnHandleSeamlessTravelPlayer, &HandleSeamlessTravelPlayer_Parms, NULL );

	if ( C )
		*C = HandleSeamlessTravelPlayer_Parms.C;
};

// Function Engine.GameInfo.UpdateGameSettings
// [0x00020000] 
// Parameters infos:

void AGameInfo::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 21708 ];

	AGameInfo_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function Engine.GameInfo.PostSeamlessTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostSeamlessTravel ( )
{
	static UFunction* pFnPostSeamlessTravel = NULL;

	if ( ! pFnPostSeamlessTravel )
		pFnPostSeamlessTravel = (UFunction*) UObject::GObjObjects()->Data[ 21705 ];

	AGameInfo_eventPostSeamlessTravel_Parms PostSeamlessTravel_Parms;

	this->ProcessEvent ( pFnPostSeamlessTravel, &PostSeamlessTravel_Parms, NULL );
};

// Function Engine.GameInfo.SwapPlayerControllers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )
// class APlayerController*       NewPC                          ( CPF_Parm )

void AGameInfo::SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC )
{
	static UFunction* pFnSwapPlayerControllers = NULL;

	if ( ! pFnSwapPlayerControllers )
		pFnSwapPlayerControllers = (UFunction*) UObject::GObjObjects()->Data[ 21702 ];

	AGameInfo_execSwapPlayerControllers_Parms SwapPlayerControllers_Parms;
	SwapPlayerControllers_Parms.OldPC = OldPC;
	SwapPlayerControllers_Parms.NewPC = NewPC;

	pFnSwapPlayerControllers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapPlayerControllers, &SwapPlayerControllers_Parms, NULL );

	pFnSwapPlayerControllers->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 21697 ];

	AGameInfo_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.GameInfo.OverridePRI
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class APlayerReplicationInfo*  OldPRI                         ( CPF_Parm )

void AGameInfo::OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI )
{
	static UFunction* pFnOverridePRI = NULL;

	if ( ! pFnOverridePRI )
		pFnOverridePRI = (UFunction*) UObject::GObjObjects()->Data[ 21694 ];

	AGameInfo_execOverridePRI_Parms OverridePRI_Parms;
	OverridePRI_Parms.PC = PC;
	OverridePRI_Parms.OldPRI = OldPRI;

	this->ProcessEvent ( pFnOverridePRI, &OverridePRI_Parms, NULL );
};

// Function Engine.GameInfo.FindInactivePRI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )

bool AGameInfo::FindInactivePRI ( class APlayerController* PC )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 21684 ];

	AGameInfo_execFindInactivePRI_Parms FindInactivePRI_Parms;
	FindInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );

	return FindInactivePRI_Parms.ReturnValue;
};

// Function Engine.GameInfo.AddInactivePRI
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC )
{
	static UFunction* pFnAddInactivePRI = NULL;

	if ( ! pFnAddInactivePRI )
		pFnAddInactivePRI = (UFunction*) UObject::GObjObjects()->Data[ 21673 ];

	AGameInfo_execAddInactivePRI_Parms AddInactivePRI_Parms;
	AddInactivePRI_Parms.PRI = PRI;
	AddInactivePRI_Parms.PC = PC;

	this->ProcessEvent ( pFnAddInactivePRI, &AddInactivePRI_Parms, NULL );
};

// Function Engine.GameInfo.PostCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostCommitMapChange ( )
{
	static UFunction* pFnPostCommitMapChange = NULL;

	if ( ! pFnPostCommitMapChange )
		pFnPostCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 21672 ];

	AGameInfo_eventPostCommitMapChange_Parms PostCommitMapChange_Parms;

	this->ProcessEvent ( pFnPostCommitMapChange, &PostCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.PreCommitMapChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 PreviousMapName                ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NextMapName                    ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName )
{
	static UFunction* pFnPreCommitMapChange = NULL;

	if ( ! pFnPreCommitMapChange )
		pFnPreCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 21669 ];

	AGameInfo_eventPreCommitMapChange_Parms PreCommitMapChange_Parms;
	memcpy ( &PreCommitMapChange_Parms.PreviousMapName, &PreviousMapName, 0xC );
	memcpy ( &PreCommitMapChange_Parms.NextMapName, &NextMapName, 0xC );

	this->ProcessEvent ( pFnPreCommitMapChange, &PreCommitMapChange_Parms, NULL );
};

// Function Engine.GameInfo.AllowPausing
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_OptionalParm | CPF_Parm )

bool AGameInfo::AllowPausing ( class APlayerController* PC )
{
	static UFunction* pFnAllowPausing = NULL;

	if ( ! pFnAllowPausing )
		pFnAllowPausing = (UFunction*) UObject::GObjObjects()->Data[ 21664 ];

	AGameInfo_execAllowPausing_Parms AllowPausing_Parms;
	AllowPausing_Parms.PC = PC;

	this->ProcessEvent ( pFnAllowPausing, &AllowPausing_Parms, NULL );

	return AllowPausing_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowCheats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AGameInfo::AllowCheats ( class APlayerController* P )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = (UFunction*) UObject::GObjObjects()->Data[ 11255 ];

	AGameInfo_execAllowCheats_Parms AllowCheats_Parms;
	AllowCheats_Parms.P = P;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );

	return AllowCheats_Parms.ReturnValue;
};

// Function Engine.GameInfo.AllowMutator
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MutatorClassName               ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::AllowMutator ( struct FString MutatorClassName )
{
	static UFunction* pFnAllowMutator = NULL;

	if ( ! pFnAllowMutator )
		pFnAllowMutator = (UFunction*) UObject::GObjObjects()->Data[ 21660 ];

	AGameInfo_execAllowMutator_Parms AllowMutator_Parms;
	memcpy ( &AllowMutator_Parms.MutatorClassName, &MutatorClassName, 0xC );

	this->ProcessEvent ( pFnAllowMutator, &AllowMutator_Parms, NULL );

	return AllowMutator_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestart
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestart ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestart = NULL;

	if ( ! pFnPlayerCanRestart )
		pFnPlayerCanRestart = (UFunction*) UObject::GObjObjects()->Data[ 12339 ];

	AGameInfo_execPlayerCanRestart_Parms PlayerCanRestart_Parms;
	PlayerCanRestart_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestart, &PlayerCanRestart_Parms, NULL );

	return PlayerCanRestart_Parms.ReturnValue;
};

// Function Engine.GameInfo.PlayerCanRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       aPlayer                        ( CPF_Parm )

bool AGameInfo::PlayerCanRestartGame ( class APlayerController* aPlayer )
{
	static UFunction* pFnPlayerCanRestartGame = NULL;

	if ( ! pFnPlayerCanRestartGame )
		pFnPlayerCanRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 21656 ];

	AGameInfo_execPlayerCanRestartGame_Parms PlayerCanRestartGame_Parms;
	PlayerCanRestartGame_Parms.aPlayer = aPlayer;

	this->ProcessEvent ( pFnPlayerCanRestartGame, &PlayerCanRestartGame_Parms, NULL );

	return PlayerCanRestartGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = (UFunction*) UObject::GObjObjects()->Data[ 21653 ];

	AGameInfo_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.GameInfo.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AGameInfo::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 21647 ];

	AGameInfo_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.GameInfo.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 21644 ];

	AGameInfo_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.GameInfo.ModifyScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ModifyScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnModifyScoreKill = NULL;

	if ( ! pFnModifyScoreKill )
		pFnModifyScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 21641 ];

	AGameInfo_execModifyScoreKill_Parms ModifyScoreKill_Parms;
	ModifyScoreKill_Parms.Killer = Killer;
	ModifyScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyScoreKill, &ModifyScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void AGameInfo::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 21636 ];

	AGameInfo_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.GameInfo.CheckScore
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )

bool AGameInfo::CheckScore ( class APlayerReplicationInfo* Scorer )
{
	static UFunction* pFnCheckScore = NULL;

	if ( ! pFnCheckScore )
		pFnCheckScore = (UFunction*) UObject::GObjObjects()->Data[ 21633 ];

	AGameInfo_execCheckScore_Parms CheckScore_Parms;
	CheckScore_Parms.Scorer = Scorer;

	this->ProcessEvent ( pFnCheckScore, &CheckScore_Parms, NULL );

	return CheckScore_Parms.ReturnValue;
};

// Function Engine.GameInfo.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 21630 ];

	AGameInfo_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.GameInfo.AddObjectiveScore
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AGameInfo::AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnAddObjectiveScore = NULL;

	if ( ! pFnAddObjectiveScore )
		pFnAddObjectiveScore = (UFunction*) UObject::GObjObjects()->Data[ 21627 ];

	AGameInfo_execAddObjectiveScore_Parms AddObjectiveScore_Parms;
	AddObjectiveScore_Parms.Scorer = Scorer;
	AddObjectiveScore_Parms.Score = Score;

	this->ProcessEvent ( pFnAddObjectiveScore, &AddObjectiveScore_Parms, NULL );
};

// Function Engine.GameInfo.RatePlayerStart
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerStart*            P                              ( CPF_Parm )
// unsigned char                  Team                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

float AGameInfo::RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 21618 ];

	AGameInfo_execRatePlayerStart_Parms RatePlayerStart_Parms;
	RatePlayerStart_Parms.P = P;
	RatePlayerStart_Parms.Team = Team;
	RatePlayerStart_Parms.Player = Player;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );

	return RatePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChoosePlayerStart
// [0x00024002] 
// Parameters infos:
// class APlayerStart*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )

class APlayerStart* AGameInfo::ChoosePlayerStart ( class AController* Player, unsigned char InTeam )
{
	static UFunction* pFnChoosePlayerStart = NULL;

	if ( ! pFnChoosePlayerStart )
		pFnChoosePlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 21609 ];

	AGameInfo_execChoosePlayerStart_Parms ChoosePlayerStart_Parms;
	ChoosePlayerStart_Parms.Player = Player;
	ChoosePlayerStart_Parms.InTeam = InTeam;

	this->ProcessEvent ( pFnChoosePlayerStart, &ChoosePlayerStart_Parms, NULL );

	return ChoosePlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AGameInfo::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 21599 ];

	AGameInfo_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

bool AGameInfo::ShouldSpawnAtStartSpot ( class AController* Player )
{
	static UFunction* pFnShouldSpawnAtStartSpot = NULL;

	if ( ! pFnShouldSpawnAtStartSpot )
		pFnShouldSpawnAtStartSpot = (UFunction*) UObject::GObjObjects()->Data[ 21595 ];

	AGameInfo_execShouldSpawnAtStartSpot_Parms ShouldSpawnAtStartSpot_Parms;
	ShouldSpawnAtStartSpot_Parms.Player = Player;

	this->ProcessEvent ( pFnShouldSpawnAtStartSpot, &ShouldSpawnAtStartSpot_Parms, NULL );

	return ShouldSpawnAtStartSpot_Parms.ReturnValue;
};

// Function Engine.GameInfo.EndLogging
// [0x00020000] 
// Parameters infos:
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::EndLogging ( struct FString Reason )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 21593 ];

	AGameInfo_execEndLogging_Parms EndLogging_Parms;
	memcpy ( &EndLogging_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );
};

// Function Engine.GameInfo.GameEventsPoll
// [0x00020000] 
// Parameters infos:

void AGameInfo::GameEventsPoll ( )
{
	static UFunction* pFnGameEventsPoll = NULL;

	if ( ! pFnGameEventsPoll )
		pFnGameEventsPoll = (UFunction*) UObject::GObjObjects()->Data[ 21592 ];

	AGameInfo_execGameEventsPoll_Parms GameEventsPoll_Parms;

	this->ProcessEvent ( pFnGameEventsPoll, &GameEventsPoll_Parms, NULL );
};

// Function Engine.GameInfo.EndOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::EndOnlineGame ( )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 21590 ];

	AGameInfo_execEndOnlineGame_Parms EndOnlineGame_Parms;

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.PerformEndGameHandling
// [0x00020002] 
// Parameters infos:

void AGameInfo::PerformEndGameHandling ( )
{
	static UFunction* pFnPerformEndGameHandling = NULL;

	if ( ! pFnPerformEndGameHandling )
		pFnPerformEndGameHandling = (UFunction*) UObject::GObjObjects()->Data[ 21588 ];

	AGameInfo_execPerformEndGameHandling_Parms PerformEndGameHandling_Parms;

	this->ProcessEvent ( pFnPerformEndGameHandling, &PerformEndGameHandling_Parms, NULL );
};

// Function Engine.GameInfo.EndGame
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 21585 ];

	AGameInfo_execEndGame_Parms EndGame_Parms;
	EndGame_Parms.Winner = Winner;
	memcpy ( &EndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlinePlayerScores
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlinePlayerScores ( )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 21582 ];

	AGameInfo_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.GameInfo.WriteOnlineStats
// [0x00020002] 
// Parameters infos:

void AGameInfo::WriteOnlineStats ( )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 21578 ];

	AGameInfo_execWriteOnlineStats_Parms WriteOnlineStats_Parms;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );
};

// Function Engine.GameInfo.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 21573 ];

	AGameInfo_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckModifiedEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckModifiedEndGame = NULL;

	if ( ! pFnCheckModifiedEndGame )
		pFnCheckModifiedEndGame = (UFunction*) UObject::GObjObjects()->Data[ 21567 ];

	AGameInfo_execCheckModifiedEndGame_Parms CheckModifiedEndGame_Parms;
	CheckModifiedEndGame_Parms.Winner = Winner;
	memcpy ( &CheckModifiedEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckModifiedEndGame, &CheckModifiedEndGame_Parms, NULL );

	return CheckModifiedEndGame_Parms.ReturnValue;
};

// Function Engine.GameInfo.BroadcastLocalizedTeam
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalizedTeam = NULL;

	if ( ! pFnBroadcastLocalizedTeam )
		pFnBroadcastLocalizedTeam = (UFunction*) UObject::GObjObjects()->Data[ 21559 ];

	AGameInfo_eventBroadcastLocalizedTeam_Parms BroadcastLocalizedTeam_Parms;
	BroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	BroadcastLocalizedTeam_Parms.Sender = Sender;
	BroadcastLocalizedTeam_Parms.Message = Message;
	BroadcastLocalizedTeam_Parms.Switch = Switch;
	BroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalizedTeam, &BroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastLocalized
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 21552 ];

	AGameInfo_eventBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastTeam
// [0x00024002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = (UFunction*) UObject::GObjObjects()->Data[ 21548 ];

	AGameInfo_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.GameInfo.Broadcast
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 21544 ];

	AGameInfo_eventBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0xC );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.GameInfo.RestartGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::RestartGame ( )
{
	static UFunction* pFnRestartGame = NULL;

	if ( ! pFnRestartGame )
		pFnRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 21532 ];

	AGameInfo_execRestartGame_Parms RestartGame_Parms;

	this->ProcessEvent ( pFnRestartGame, &RestartGame_Parms, NULL );
};

// Function Engine.GameInfo.GetTravelType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::GetTravelType ( )
{
	static UFunction* pFnGetTravelType = NULL;

	if ( ! pFnGetTravelType )
		pFnGetTravelType = (UFunction*) UObject::GObjObjects()->Data[ 21530 ];

	AGameInfo_execGetTravelType_Parms GetTravelType_Parms;

	this->ProcessEvent ( pFnGetTravelType, &GetTravelType_Parms, NULL );

	return GetTravelType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextMap
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = (UFunction*) UObject::GObjObjects()->Data[ 21528 ];

	AGameInfo_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );

	return GetNextMap_Parms.ReturnValue;
};

// Function Engine.GameInfo.SendPlayer
// [0x00020002] 
// Parameters infos:
// class APlayerController*       aPlayer                        ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::SendPlayer ( class APlayerController* aPlayer, struct FString URL )
{
	static UFunction* pFnSendPlayer = NULL;

	if ( ! pFnSendPlayer )
		pFnSendPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21525 ];

	AGameInfo_execSendPlayer_Parms SendPlayer_Parms;
	SendPlayer_Parms.aPlayer = aPlayer;
	memcpy ( &SendPlayer_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSendPlayer, &SendPlayer_Parms, NULL );
};

// Function Engine.GameInfo.PickTeam
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Current                        ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

unsigned char AGameInfo::PickTeam ( unsigned char Current, class AController* C )
{
	static UFunction* pFnPickTeam = NULL;

	if ( ! pFnPickTeam )
		pFnPickTeam = (UFunction*) UObject::GObjObjects()->Data[ 21521 ];

	AGameInfo_execPickTeam_Parms PickTeam_Parms;
	PickTeam_Parms.Current = Current;
	PickTeam_Parms.C = C;

	this->ProcessEvent ( pFnPickTeam, &PickTeam_Parms, NULL );

	return PickTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )
// int                            N                              ( CPF_Parm )
// unsigned long                  bNewTeam                       ( CPF_Parm )

bool AGameInfo::ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 13156 ];

	AGameInfo_execChangeTeam_Parms ChangeTeam_Parms;
	ChangeTeam_Parms.Other = Other;
	ChangeTeam_Parms.N = N;
	ChangeTeam_Parms.bNewTeam = bNewTeam;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );

	return ChangeTeam_Parms.ReturnValue;
};

// Function Engine.GameInfo.ChangeName
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  bNameChange                    ( CPF_Parm )

void AGameInfo::ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange )
{
	static UFunction* pFnChangeName = NULL;

	if ( ! pFnChangeName )
		pFnChangeName = (UFunction*) UObject::GObjObjects()->Data[ 21514 ];

	AGameInfo_execChangeName_Parms ChangeName_Parms;
	ChangeName_Parms.Other = Other;
	memcpy ( &ChangeName_Parms.S, &S, 0xC );
	ChangeName_Parms.bNameChange = bNameChange;

	this->ProcessEvent ( pFnChangeName, &ChangeName_Parms, NULL );
};

// Function Engine.GameInfo.DiscardInventory
// [0x00024002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )
// class AController*             Killer                         ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::DiscardInventory ( class APawn* Other, class AController* Killer )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 21511 ];

	AGameInfo_execDiscardInventory_Parms DiscardInventory_Parms;
	DiscardInventory_Parms.Other = Other;
	DiscardInventory_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.GameInfo.PickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AGameInfo::PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnPickupQuery = NULL;

	if ( ! pFnPickupQuery )
		pFnPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 18813 ];

	AGameInfo_execPickupQuery_Parms PickupQuery_Parms;
	PickupQuery_Parms.Other = Other;
	PickupQuery_Parms.ItemClass = ItemClass;
	PickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnPickupQuery, &PickupQuery_Parms, NULL );

	return PickupQuery_Parms.ReturnValue;
};

// Function Engine.GameInfo.ShouldRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APickupFactory*          Other                          ( CPF_Parm )

bool AGameInfo::ShouldRespawn ( class APickupFactory* Other )
{
	static UFunction* pFnShouldRespawn = NULL;

	if ( ! pFnShouldRespawn )
		pFnShouldRespawn = (UFunction*) UObject::GObjObjects()->Data[ 21500 ];

	AGameInfo_execShouldRespawn_Parms ShouldRespawn_Parms;
	ShouldRespawn_Parms.Other = Other;

	this->ProcessEvent ( pFnShouldRespawn, &ShouldRespawn_Parms, NULL );

	return ShouldRespawn_Parms.ReturnValue;
};

// Function Engine.GameInfo.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AGameInfo::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = (UFunction*) UObject::GObjObjects()->Data[ 6830 ];

	AGameInfo_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.GameInfo.ReduceDamage
// [0x00420002] 
// Parameters infos:
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AGameInfo::ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = (UFunction*) UObject::GObjObjects()->Data[ 21486 ];

	AGameInfo_execReduceDamage_Parms ReduceDamage_Parms;
	ReduceDamage_Parms.injured = injured;
	ReduceDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReduceDamage_Parms.HitLocation, &HitLocation, 0xC );
	ReduceDamage_Parms.DamageType = DamageType;
	ReduceDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );

	if ( Damage )
		*Damage = ReduceDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &ReduceDamage_Parms.Momentum, 0xC );
};

// Function Engine.GameInfo.CanSpectate
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       Viewer                         ( CPF_Parm )
// class APlayerReplicationInfo*  ViewTarget                     ( CPF_Parm )

bool AGameInfo::CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = (UFunction*) UObject::GObjObjects()->Data[ 12158 ];

	AGameInfo_execCanSpectate_Parms CanSpectate_Parms;
	CanSpectate_Parms.Viewer = Viewer;
	CanSpectate_Parms.ViewTarget = ViewTarget;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );

	return CanSpectate_Parms.ReturnValue;
};

// Function Engine.GameInfo.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 21482 ];

	AGameInfo_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.GameInfo.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 21480 ];

	AGameInfo_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.GameInfo.BroadcastDeathMessage
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType )
{
	static UFunction* pFnBroadcastDeathMessage = NULL;

	if ( ! pFnBroadcastDeathMessage )
		pFnBroadcastDeathMessage = (UFunction*) UObject::GObjObjects()->Data[ 21475 ];

	AGameInfo_execBroadcastDeathMessage_Parms BroadcastDeathMessage_Parms;
	BroadcastDeathMessage_Parms.Killer = Killer;
	BroadcastDeathMessage_Parms.Other = Other;
	BroadcastDeathMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnBroadcastDeathMessage, &BroadcastDeathMessage_Parms, NULL );
};

// Function Engine.GameInfo.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AGameInfo::PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 21467 ];

	AGameInfo_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.KilledPawn = KilledPawn;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.GameInfo.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 21462 ];

	AGameInfo_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function Engine.GameInfo.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void AGameInfo::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = (UFunction*) UObject::GObjObjects()->Data[ 21456 ];

	AGameInfo_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;
	NotifyKilled_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.GameInfo.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::SetPlayerDefaults ( class APawn* PlayerPawn )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = (UFunction*) UObject::GObjObjects()->Data[ 21454 ];

	AGameInfo_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;
	SetPlayerDefaults_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function Engine.GameInfo.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerController*       Sender                         ( CPF_Parm )

void AGameInfo::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 21451 ];

	AGameInfo_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.GameInfo.AddDefaultInventory
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AGameInfo::eventAddDefaultInventory ( class APawn* P )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 21449 ];

	AGameInfo_eventAddDefaultInventory_Parms AddDefaultInventory_Parms;
	AddDefaultInventory_Parms.P = P;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.GameInfo.AcceptInventory
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void AGameInfo::eventAcceptInventory ( class APawn* PlayerPawn )
{
	static UFunction* pFnAcceptInventory = NULL;

	if ( ! pFnAcceptInventory )
		pFnAcceptInventory = (UFunction*) UObject::GObjObjects()->Data[ 21447 ];

	AGameInfo_eventAcceptInventory_Parms AcceptInventory_Parms;
	AcceptInventory_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnAcceptInventory, &AcceptInventory_Parms, NULL );
};

// Function Engine.GameInfo.UnregisterPlayer
// [0x00820002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::UnregisterPlayer ( class APlayerController* PC )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21444 ];

	AGameInfo_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	UnregisterPlayer_Parms.PC = PC;

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );
};

// Function Engine.GameInfo.Logout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AGameInfo::Logout ( class AController* Exiting )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 21438 ];

	AGameInfo_execLogout_Parms Logout_Parms;
	Logout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function Engine.GameInfo.PreExit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreExit ( )
{
	static UFunction* pFnPreExit = NULL;

	if ( ! pFnPreExit )
		pFnPreExit = (UFunction*) UObject::GObjObjects()->Data[ 21437 ];

	AGameInfo_eventPreExit_Parms PreExit_Parms;

	this->ProcessEvent ( pFnPreExit, &PreExit_Parms, NULL );
};

// Function Engine.GameInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void AGameInfo::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 21421 ];

	AGameInfo_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Engine.GameInfo.UpdateBestNextHosts
// [0x00820002] 
// Parameters infos:

void AGameInfo::UpdateBestNextHosts ( )
{
	static UFunction* pFnUpdateBestNextHosts = NULL;

	if ( ! pFnUpdateBestNextHosts )
		pFnUpdateBestNextHosts = (UFunction*) UObject::GObjObjects()->Data[ 21413 ];

	AGameInfo_execUpdateBestNextHosts_Parms UpdateBestNextHosts_Parms;

	this->ProcessEvent ( pFnUpdateBestNextHosts, &UpdateBestNextHosts_Parms, NULL );
};

// Function Engine.GameInfo.BestNextHostSort
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       A                              ( CPF_Parm )
// class APlayerController*       B                              ( CPF_Parm )

int AGameInfo::BestNextHostSort ( class APlayerController* A, class APlayerController* B )
{
	static UFunction* pFnBestNextHostSort = NULL;

	if ( ! pFnBestNextHostSort )
		pFnBestNextHostSort = (UFunction*) UObject::GObjObjects()->Data[ 21407 ];

	AGameInfo_execBestNextHostSort_Parms BestNextHostSort_Parms;
	BestNextHostSort_Parms.A = A;
	BestNextHostSort_Parms.B = B;

	this->ProcessEvent ( pFnBestNextHostSort, &BestNextHostSort_Parms, NULL );

	return BestNextHostSort_Parms.ReturnValue;
};

// Function Engine.GameInfo.GenericPlayerInitialization
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AGameInfo::GenericPlayerInitialization ( class AController* C )
{
	static UFunction* pFnGenericPlayerInitialization = NULL;

	if ( ! pFnGenericPlayerInitialization )
		pFnGenericPlayerInitialization = (UFunction*) UObject::GObjObjects()->Data[ 21403 ];

	AGameInfo_execGenericPlayerInitialization_Parms GenericPlayerInitialization_Parms;
	GenericPlayerInitialization_Parms.C = C;

	this->ProcessEvent ( pFnGenericPlayerInitialization, &GenericPlayerInitialization_Parms, NULL );
};

// Function Engine.GameInfo.ReplicateStreamingStatus
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::ReplicateStreamingStatus ( class APlayerController* PC )
{
	static UFunction* pFnReplicateStreamingStatus = NULL;

	if ( ! pFnReplicateStreamingStatus )
		pFnReplicateStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 21396 ];

	AGameInfo_execReplicateStreamingStatus_Parms ReplicateStreamingStatus_Parms;
	ReplicateStreamingStatus_Parms.PC = PC;

	this->ProcessEvent ( pFnReplicateStreamingStatus, &ReplicateStreamingStatus_Parms, NULL );
};

// Function Engine.GameInfo.GetDefaultPlayerClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

class UClass* AGameInfo::GetDefaultPlayerClass ( class AController* C )
{
	static UFunction* pFnGetDefaultPlayerClass = NULL;

	if ( ! pFnGetDefaultPlayerClass )
		pFnGetDefaultPlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 21392 ];

	AGameInfo_execGetDefaultPlayerClass_Parms GetDefaultPlayerClass_Parms;
	GetDefaultPlayerClass_Parms.C = C;

	this->ProcessEvent ( pFnGetDefaultPlayerClass, &GetDefaultPlayerClass_Parms, NULL );

	return GetDefaultPlayerClass_Parms.ReturnValue;
};

// Function Engine.GameInfo.SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* AGameInfo::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 21385 ];

	AGameInfo_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function Engine.GameInfo.RestartPlayer
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AGameInfo::RestartPlayer ( class AController* NewPlayer )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21367 ];

	AGameInfo_execRestartPlayer_Parms RestartPlayer_Parms;
	RestartPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function Engine.GameInfo.StartBots
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartBots ( )
{
	static UFunction* pFnStartBots = NULL;

	if ( ! pFnStartBots )
		pFnStartBots = (UFunction*) UObject::GObjObjects()->Data[ 21365 ];

	AGameInfo_execStartBots_Parms StartBots_Parms;

	this->ProcessEvent ( pFnStartBots, &StartBots_Parms, NULL );
};

// Function Engine.GameInfo.StartHumans
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartHumans ( )
{
	static UFunction* pFnStartHumans = NULL;

	if ( ! pFnStartHumans )
		pFnStartHumans = (UFunction*) UObject::GObjObjects()->Data[ 21363 ];

	AGameInfo_execStartHumans_Parms StartHumans_Parms;

	this->ProcessEvent ( pFnStartHumans, &StartHumans_Parms, NULL );
};

// Function Engine.GameInfo.OnStartOnlineGameComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AGameInfo::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 21356 ];

	AGameInfo_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.GameInfo.StartOnlineGame
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartOnlineGame ( )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 21354 ];

	AGameInfo_execStartOnlineGame_Parms StartOnlineGame_Parms;

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );
};

// Function Engine.GameInfo.StartMatch
// [0x00020002] 
// Parameters infos:

void AGameInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 21352 ];

	AGameInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameInfo.Login
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* AGameInfo::eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 21331 ];

	AGameInfo_eventLogin_Parms Login_Parms;
	memcpy ( &Login_Parms.Portal, &Portal, 0xC );
	memcpy ( &Login_Parms.Options, &Options, 0xC );
	memcpy ( &Login_Parms.UniqueId, &UniqueId, 0x48 );

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &Login_Parms.ErrorMessage, 0xC );

	return Login_Parms.ReturnValue;
};

// Function Engine.GameInfo.SpawnPlayerController
// [0x00020002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class APlayerController* AGameInfo::SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnSpawnPlayerController = NULL;

	if ( ! pFnSpawnPlayerController )
		pFnSpawnPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 21326 ];

	AGameInfo_execSpawnPlayerController_Parms SpawnPlayerController_Parms;
	memcpy ( &SpawnPlayerController_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnPlayerController_Parms.SpawnRotation, &SpawnRotation, 0xC );

	this->ProcessEvent ( pFnSpawnPlayerController, &SpawnPlayerController_Parms, NULL );

	return SpawnPlayerController_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNextPlayerID
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetNextPlayerID ( )
{
	static UFunction* pFnGetNextPlayerID = NULL;

	if ( ! pFnGetNextPlayerID )
		pFnGetNextPlayerID = (UFunction*) UObject::GObjObjects()->Data[ 21324 ];

	AGameInfo_execGetNextPlayerID_Parms GetNextPlayerID_Parms;

	pFnGetNextPlayerID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextPlayerID, &GetNextPlayerID_Parms, NULL );

	pFnGetNextPlayerID->FunctionFlags |= 0x400;

	return GetNextPlayerID_Parms.ReturnValue;
};

// Function Engine.GameInfo.AtCapacity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bSpectator                     ( CPF_Parm )

bool AGameInfo::AtCapacity ( unsigned long bSpectator )
{
	static UFunction* pFnAtCapacity = NULL;

	if ( ! pFnAtCapacity )
		pFnAtCapacity = (UFunction*) UObject::GObjObjects()->Data[ 8665 ];

	AGameInfo_execAtCapacity_Parms AtCapacity_Parms;
	AtCapacity_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnAtCapacity, &AtCapacity_Parms, NULL );

	return AtCapacity_Parms.ReturnValue;
};

// Function Engine.GameInfo.RejectLogin
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPlayer*                 InPlayer                       ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::RejectLogin ( class UPlayer* InPlayer, struct FString Error )
{
	static UFunction* pFnRejectLogin = NULL;

	if ( ! pFnRejectLogin )
		pFnRejectLogin = (UFunction*) UObject::GObjObjects()->Data[ 8671 ];

	AGameInfo_execRejectLogin_Parms RejectLogin_Parms;
	RejectLogin_Parms.InPlayer = InPlayer;
	memcpy ( &RejectLogin_Parms.Error, &Error, 0xC );

	pFnRejectLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRejectLogin, &RejectLogin_Parms, NULL );

	pFnRejectLogin->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.OnRejectLogin
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UPlayer*                 InPlayer                       ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventOnRejectLogin ( class UPlayer* InPlayer, struct FString Error )
{
	static UFunction* pFnOnRejectLogin = NULL;

	if ( ! pFnOnRejectLogin )
		pFnOnRejectLogin = (UFunction*) UObject::GObjObjects()->Data[ 21317 ];

	AGameInfo_eventOnRejectLogin_Parms OnRejectLogin_Parms;
	OnRejectLogin_Parms.InPlayer = InPlayer;
	memcpy ( &OnRejectLogin_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnRejectLogin, &OnRejectLogin_Parms, NULL );
};

// Function Engine.GameInfo.ResumeLogin
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPlayer*                 InPlayer                       ( CPF_Parm )

void AGameInfo::ResumeLogin ( class UPlayer* InPlayer )
{
	static UFunction* pFnResumeLogin = NULL;

	if ( ! pFnResumeLogin )
		pFnResumeLogin = (UFunction*) UObject::GObjObjects()->Data[ 8717 ];

	AGameInfo_execResumeLogin_Parms ResumeLogin_Parms;
	ResumeLogin_Parms.InPlayer = InPlayer;

	pFnResumeLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResumeLogin, &ResumeLogin_Parms, NULL );

	pFnResumeLogin->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.PauseLogin
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPlayer*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPlayer* AGameInfo::PauseLogin ( )
{
	static UFunction* pFnPauseLogin = NULL;

	if ( ! pFnPauseLogin )
		pFnPauseLogin = (UFunction*) UObject::GObjObjects()->Data[ 8668 ];

	AGameInfo_execPauseLogin_Parms PauseLogin_Parms;

	pFnPauseLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPauseLogin, &PauseLogin_Parms, NULL );

	pFnPauseLogin->FunctionFlags |= 0x400;

	return PauseLogin_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// unsigned long                  bSupportsAuth                  ( CPF_Parm )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 21307 ];

	AGameInfo_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );
	memcpy ( &PreLogin_Parms.UniqueId, &UniqueId, 0x48 );
	PreLogin_Parms.bSupportsAuth = bSupportsAuth;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &PreLogin_Parms.ErrorMessage, 0xC );
};

// Function Engine.GameInfo.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = (UFunction*) UObject::GObjObjects()->Data[ 21305 ];

	AGameInfo_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessClientTravel
// [0x00420002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FGuid                   NextMapGuid                    ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_Parm )
// unsigned long                  bAbsolute                      ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class APlayerController* AGameInfo::ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL )
{
	static UFunction* pFnProcessClientTravel = NULL;

	if ( ! pFnProcessClientTravel )
		pFnProcessClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 21297 ];

	AGameInfo_execProcessClientTravel_Parms ProcessClientTravel_Parms;
	memcpy ( &ProcessClientTravel_Parms.NextMapGuid, &NextMapGuid, 0x10 );
	ProcessClientTravel_Parms.bSeamless = bSeamless;
	ProcessClientTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessClientTravel, &ProcessClientTravel_Parms, NULL );

	if ( URL )
		memcpy ( URL, &ProcessClientTravel_Parms.URL, 0xC );

	return ProcessClientTravel_Parms.ReturnValue;
};

// Function Engine.GameInfo.ProcessServerTravel
// [0x00824002] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAbsolute                      ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::ProcessServerTravel ( struct FString URL, unsigned long bAbsolute )
{
	static UFunction* pFnProcessServerTravel = NULL;

	if ( ! pFnProcessServerTravel )
		pFnProcessServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 21286 ];

	AGameInfo_execProcessServerTravel_Parms ProcessServerTravel_Parms;
	memcpy ( &ProcessServerTravel_Parms.URL, &URL, 0xC );
	ProcessServerTravel_Parms.bAbsolute = bAbsolute;

	this->ProcessEvent ( pFnProcessServerTravel, &ProcessServerTravel_Parms, NULL );
};

// Function Engine.GameInfo.RemoveMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                MutatorToRemove                ( CPF_Parm )

void AGameInfo::RemoveMutator ( class AMutator* MutatorToRemove )
{
	static UFunction* pFnRemoveMutator = NULL;

	if ( ! pFnRemoveMutator )
		pFnRemoveMutator = (UFunction*) UObject::GObjObjects()->Data[ 21283 ];

	AGameInfo_execRemoveMutator_Parms RemoveMutator_Parms;
	RemoveMutator_Parms.MutatorToRemove = MutatorToRemove;

	this->ProcessEvent ( pFnRemoveMutator, &RemoveMutator_Parms, NULL );
};

// Function Engine.GameInfo.AddMutator
// [0x00024002] 
// Parameters infos:
// struct FString                 mutname                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUserAdded                     ( CPF_OptionalParm | CPF_Parm )

void AGameInfo::AddMutator ( struct FString mutname, unsigned long bUserAdded )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = (UFunction*) UObject::GObjObjects()->Data[ 21274 ];

	AGameInfo_execAddMutator_Parms AddMutator_Parms;
	memcpy ( &AddMutator_Parms.mutname, &mutname, 0xC );
	AddMutator_Parms.bUserAdded = bUserAdded;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.GameInfo.NotifyPendingConnectionLost
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventNotifyPendingConnectionLost ( )
{
	static UFunction* pFnNotifyPendingConnectionLost = NULL;

	if ( ! pFnNotifyPendingConnectionLost )
		pFnNotifyPendingConnectionLost = (UFunction*) UObject::GObjObjects()->Data[ 21273 ];

	AGameInfo_eventNotifyPendingConnectionLost_Parms NotifyPendingConnectionLost_Parms;

	this->ProcessEvent ( pFnNotifyPendingConnectionLost, &NotifyPendingConnectionLost_Parms, NULL );
};

// Function Engine.GameInfo.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 21247 ];

	AGameInfo_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function Engine.GameInfo.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

class UClass* AGameInfo::eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = (UFunction*) UObject::GObjObjects()->Data[ 21242 ];

	AGameInfo_eventSetGameType_Parms SetGameType_Parms;
	memcpy ( &SetGameType_Parms.MapName, &MapName, 0xC );
	memcpy ( &SetGameType_Parms.Options, &Options, 0xC );
	memcpy ( &SetGameType_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );

	return SetGameType_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetDefaultGameClassPath
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Portal                         ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal )
{
	static UFunction* pFnGetDefaultGameClassPath = NULL;

	if ( ! pFnGetDefaultGameClassPath )
		pFnGetDefaultGameClassPath = (UFunction*) UObject::GObjObjects()->Data[ 21237 ];

	AGameInfo_eventGetDefaultGameClassPath_Parms GetDefaultGameClassPath_Parms;
	memcpy ( &GetDefaultGameClassPath_Parms.MapName, &MapName, 0xC );
	memcpy ( &GetDefaultGameClassPath_Parms.Options, &Options, 0xC );
	memcpy ( &GetDefaultGameClassPath_Parms.Portal, &Portal, 0xC );

	this->ProcessEvent ( pFnGetDefaultGameClassPath, &GetDefaultGameClassPath_Parms, NULL );

	return GetDefaultGameClassPath_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetFloatOption
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParseString                    ( CPF_Parm | CPF_NeedCtorLink )
// float                          CurrentValue                   ( CPF_Parm )

float AGameInfo::GetFloatOption ( struct FString Options, struct FString ParseString, float CurrentValue )
{
	static UFunction* pFnGetFloatOption = NULL;

	if ( ! pFnGetFloatOption )
		pFnGetFloatOption = (UFunction*) UObject::GObjObjects()->Data[ 21231 ];

	AGameInfo_execGetFloatOption_Parms GetFloatOption_Parms;
	memcpy ( &GetFloatOption_Parms.Options, &Options, 0xC );
	memcpy ( &GetFloatOption_Parms.ParseString, &ParseString, 0xC );
	GetFloatOption_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnGetFloatOption, &GetFloatOption_Parms, NULL );

	return GetFloatOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetIntOption
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParseString                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            CurrentValue                   ( CPF_Parm )

int AGameInfo::GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue )
{
	static UFunction* pFnGetIntOption = NULL;

	if ( ! pFnGetIntOption )
		pFnGetIntOption = (UFunction*) UObject::GObjObjects()->Data[ 21225 ];

	AGameInfo_execGetIntOption_Parms GetIntOption_Parms;
	memcpy ( &GetIntOption_Parms.Options, &Options, 0xC );
	memcpy ( &GetIntOption_Parms.ParseString, &ParseString, 0xC );
	GetIntOption_Parms.CurrentValue = CurrentValue;

	this->ProcessEvent ( pFnGetIntOption, &GetIntOption_Parms, NULL );

	return GetIntOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.SanitizePlayerName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::SanitizePlayerName ( struct FString PlayerName )
{
	static UFunction* pFnSanitizePlayerName = NULL;

	if ( ! pFnSanitizePlayerName )
		pFnSanitizePlayerName = (UFunction*) UObject::GObjObjects()->Data[ 21221 ];

	AGameInfo_execSanitizePlayerName_Parms SanitizePlayerName_Parms;
	memcpy ( &SanitizePlayerName_Parms.PlayerName, &PlayerName, 0xC );

	pFnSanitizePlayerName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSanitizePlayerName, &SanitizePlayerName_Parms, NULL );

	pFnSanitizePlayerName->FunctionFlags |= 0x400;

	return SanitizePlayerName_Parms.ReturnValue;
};

// Function Engine.GameInfo.SanitizeWhitespace
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::SanitizeWhitespace ( struct FString Text )
{
	static UFunction* pFnSanitizeWhitespace = NULL;

	if ( ! pFnSanitizeWhitespace )
		pFnSanitizeWhitespace = (UFunction*) UObject::GObjObjects()->Data[ 21224 ];

	AGameInfo_execSanitizeWhitespace_Parms SanitizeWhitespace_Parms;
	memcpy ( &SanitizeWhitespace_Parms.Text, &Text, 0xC );

	pFnSanitizeWhitespace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSanitizeWhitespace, &SanitizeWhitespace_Parms, NULL );

	pFnSanitizeWhitespace->FunctionFlags |= 0x400;

	return SanitizeWhitespace_Parms.ReturnValue;
};

// Function Engine.GameInfo.DecodeURL
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Encoded                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::DecodeURL ( struct FString Encoded )
{
	static UFunction* pFnDecodeURL = NULL;

	if ( ! pFnDecodeURL )
		pFnDecodeURL = (UFunction*) UObject::GObjObjects()->Data[ 21218 ];

	AGameInfo_execDecodeURL_Parms DecodeURL_Parms;
	memcpy ( &DecodeURL_Parms.Encoded, &Encoded, 0xC );

	pFnDecodeURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecodeURL, &DecodeURL_Parms, NULL );

	pFnDecodeURL->FunctionFlags |= 0x400;

	return DecodeURL_Parms.ReturnValue;
};

// Function Engine.GameInfo.EncodeURL
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Decoded                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::EncodeURL ( struct FString Decoded )
{
	static UFunction* pFnEncodeURL = NULL;

	if ( ! pFnEncodeURL )
		pFnEncodeURL = (UFunction*) UObject::GObjObjects()->Data[ 21215 ];

	AGameInfo_execEncodeURL_Parms EncodeURL_Parms;
	memcpy ( &EncodeURL_Parms.Decoded, &Decoded, 0xC );

	pFnEncodeURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncodeURL, &EncodeURL_Parms, NULL );

	pFnEncodeURL->FunctionFlags |= 0x400;

	return EncodeURL_Parms.ReturnValue;
};

// Function Engine.GameInfo.HasOption
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InKey                          ( CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::HasOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnHasOption = NULL;

	if ( ! pFnHasOption )
		pFnHasOption = (UFunction*) UObject::GObjObjects()->Data[ 21208 ];

	AGameInfo_execHasOption_Parms HasOption_Parms;
	memcpy ( &HasOption_Parms.Options, &Options, 0xC );
	memcpy ( &HasOption_Parms.InKey, &InKey, 0xC );

	this->ProcessEvent ( pFnHasOption, &HasOption_Parms, NULL );

	return HasOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.ParseOption
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InKey                          ( CPF_Parm | CPF_NeedCtorLink )

struct FString AGameInfo::ParseOption ( struct FString Options, struct FString InKey )
{
	static UFunction* pFnParseOption = NULL;

	if ( ! pFnParseOption )
		pFnParseOption = (UFunction*) UObject::GObjObjects()->Data[ 8613 ];

	AGameInfo_execParseOption_Parms ParseOption_Parms;
	memcpy ( &ParseOption_Parms.Options, &Options, 0xC );
	memcpy ( &ParseOption_Parms.InKey, &InKey, 0xC );

	this->ProcessEvent ( pFnParseOption, &ParseOption_Parms, NULL );

	return ParseOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetKeyValue
// [0x00422002] 
// Parameters infos:
// struct FString                 Pair                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Key                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AGameInfo::GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value )
{
	static UFunction* pFnGetKeyValue = NULL;

	if ( ! pFnGetKeyValue )
		pFnGetKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 21199 ];

	AGameInfo_execGetKeyValue_Parms GetKeyValue_Parms;
	memcpy ( &GetKeyValue_Parms.Pair, &Pair, 0xC );

	this->ProcessEvent ( pFnGetKeyValue, &GetKeyValue_Parms, NULL );

	if ( Key )
		memcpy ( Key, &GetKeyValue_Parms.Key, 0xC );

	if ( Value )
		memcpy ( Value, &GetKeyValue_Parms.Value, 0xC );
};

// Function Engine.GameInfo.GrabOption
// [0x00422002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Result                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GrabOption ( struct FString* Options, struct FString* Result )
{
	static UFunction* pFnGrabOption = NULL;

	if ( ! pFnGrabOption )
		pFnGrabOption = (UFunction*) UObject::GObjObjects()->Data[ 21195 ];

	AGameInfo_execGrabOption_Parms GrabOption_Parms;

	this->ProcessEvent ( pFnGrabOption, &GrabOption_Parms, NULL );

	if ( Options )
		memcpy ( Options, &GrabOption_Parms.Options, 0xC );

	if ( Result )
		memcpy ( Result, &GrabOption_Parms.Result, 0xC );

	return GrabOption_Parms.ReturnValue;
};

// Function Engine.GameInfo.SetGameSpeed
// [0x00020002] 
// Parameters infos:
// float                          T                              ( CPF_Parm )

void AGameInfo::SetGameSpeed ( float T )
{
	static UFunction* pFnSetGameSpeed = NULL;

	if ( ! pFnSetGameSpeed )
		pFnSetGameSpeed = (UFunction*) UObject::GObjObjects()->Data[ 21193 ];

	AGameInfo_execSetGameSpeed_Parms SetGameSpeed_Parms;
	SetGameSpeed_Parms.T = T;

	this->ProcessEvent ( pFnSetGameSpeed, &SetGameSpeed_Parms, NULL );
};

// Function Engine.GameInfo.DebugPause
// [0x00020002] 
// Parameters infos:

void AGameInfo::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = (UFunction*) UObject::GObjObjects()->Data[ 21190 ];

	AGameInfo_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.GameInfo.ForceClearUnpauseDelegates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  PauseActor                     ( CPF_Parm )

void AGameInfo::ForceClearUnpauseDelegates ( class AActor* PauseActor )
{
	static UFunction* pFnForceClearUnpauseDelegates = NULL;

	if ( ! pFnForceClearUnpauseDelegates )
		pFnForceClearUnpauseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 11096 ];

	AGameInfo_execForceClearUnpauseDelegates_Parms ForceClearUnpauseDelegates_Parms;
	ForceClearUnpauseDelegates_Parms.PauseActor = PauseActor;

	pFnForceClearUnpauseDelegates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Parms, NULL );

	pFnForceClearUnpauseDelegates->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.ClearPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventClearPause ( )
{
	static UFunction* pFnClearPause = NULL;

	if ( ! pFnClearPause )
		pFnClearPause = (UFunction*) UObject::GObjObjects()->Data[ 21186 ];

	AGameInfo_eventClearPause_Parms ClearPause_Parms;

	this->ProcessEvent ( pFnClearPause, &ClearPause_Parms, NULL );
};

// Function Engine.GameInfo.SetPause
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       PC                             ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool AGameInfo::SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 11746 ];

	AGameInfo_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.PC = PC;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0x10 );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.GameInfo.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameInfo::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 21179 ];

	AGameInfo_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNumPlayers
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AGameInfo::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = (UFunction*) UObject::GObjObjects()->Data[ 21176 ];

	AGameInfo_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );

	return GetNumPlayers_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetNetworkNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AGameInfo::GetNetworkNumber ( )
{
	static UFunction* pFnGetNetworkNumber = NULL;

	if ( ! pFnGetNetworkNumber )
		pFnGetNetworkNumber = (UFunction*) UObject::GObjObjects()->Data[ 21174 ];

	AGameInfo_execGetNetworkNumber_Parms GetNetworkNumber_Parms;

	pFnGetNetworkNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNetworkNumber, &GetNetworkNumber_Parms, NULL );

	pFnGetNetworkNumber->FunctionFlags |= 0x400;

	return GetNetworkNumber_Parms.ReturnValue;
};

// Function Engine.GameInfo.InitGameReplicationInfo
// [0x00020002] 
// Parameters infos:

void AGameInfo::InitGameReplicationInfo ( )
{
	static UFunction* pFnInitGameReplicationInfo = NULL;

	if ( ! pFnInitGameReplicationInfo )
		pFnInitGameReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 21173 ];

	AGameInfo_execInitGameReplicationInfo_Parms InitGameReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitGameReplicationInfo, &InitGameReplicationInfo_Parms, NULL );
};

// Function Engine.GameInfo.ForceKickPlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

void AGameInfo::eventForceKickPlayer ( class APlayerController* PC, struct FString KickReason )
{
	static UFunction* pFnForceKickPlayer = NULL;

	if ( ! pFnForceKickPlayer )
		pFnForceKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21170 ];

	AGameInfo_eventForceKickPlayer_Parms ForceKickPlayer_Parms;
	ForceKickPlayer_Parms.PC = PC;
	memcpy ( &ForceKickPlayer_Parms.KickReason, &KickReason, 0xC );

	this->ProcessEvent ( pFnForceKickPlayer, &ForceKickPlayer_Parms, NULL );
};

// Function Engine.GameInfo.KickIdler
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void AGameInfo::eventKickIdler ( class APlayerController* PC )
{
	static UFunction* pFnKickIdler = NULL;

	if ( ! pFnKickIdler )
		pFnKickIdler = (UFunction*) UObject::GObjObjects()->Data[ 21168 ];

	AGameInfo_eventKickIdler_Parms KickIdler_Parms;
	KickIdler_Parms.PC = PC;

	this->ProcessEvent ( pFnKickIdler, &KickIdler_Parms, NULL );
};

// Function Engine.GameInfo.GameEnding
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventGameEnding ( )
{
	static UFunction* pFnGameEnding = NULL;

	if ( ! pFnGameEnding )
		pFnGameEnding = (UFunction*) UObject::GObjObjects()->Data[ 21167 ];

	AGameInfo_eventGameEnding_Parms GameEnding_Parms;

	this->ProcessEvent ( pFnGameEnding, &GameEnding_Parms, NULL );
};

// Function Engine.GameInfo.NotifyNavigationChanged
// [0x00020000] 
// Parameters infos:
// class ANavigationPoint*        N                              ( CPF_Parm )

void AGameInfo::NotifyNavigationChanged ( class ANavigationPoint* N )
{
	static UFunction* pFnNotifyNavigationChanged = NULL;

	if ( ! pFnNotifyNavigationChanged )
		pFnNotifyNavigationChanged = (UFunction*) UObject::GObjObjects()->Data[ 21165 ];

	AGameInfo_execNotifyNavigationChanged_Parms NotifyNavigationChanged_Parms;
	NotifyNavigationChanged_Parms.N = N;

	this->ProcessEvent ( pFnNotifyNavigationChanged, &NotifyNavigationChanged_Parms, NULL );
};

// Function Engine.GameInfo.DoNavFearCostFallOff
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AGameInfo::DoNavFearCostFallOff ( )
{
	static UFunction* pFnDoNavFearCostFallOff = NULL;

	if ( ! pFnDoNavFearCostFallOff )
		pFnDoNavFearCostFallOff = (UFunction*) UObject::GObjObjects()->Data[ 21164 ];

	AGameInfo_execDoNavFearCostFallOff_Parms DoNavFearCostFallOff_Parms;

	pFnDoNavFearCostFallOff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoNavFearCostFallOff, &DoNavFearCostFallOff_Parms, NULL );

	pFnDoNavFearCostFallOff->FunctionFlags |= 0x400;
};

// Function Engine.GameInfo.ShouldStartInCinematicMode
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OutHidePlayer                  ( CPF_Parm | CPF_OutParm )
// int                            OutHideHud                     ( CPF_Parm | CPF_OutParm )
// int                            OutDisableMovement             ( CPF_Parm | CPF_OutParm )
// int                            OutDisableTurning              ( CPF_Parm | CPF_OutParm )
// int                            OutDisableInput                ( CPF_Parm | CPF_OutParm )

bool AGameInfo::ShouldStartInCinematicMode ( int* OutHidePlayer, int* OutHideHud, int* OutDisableMovement, int* OutDisableTurning, int* OutDisableInput )
{
	static UFunction* pFnShouldStartInCinematicMode = NULL;

	if ( ! pFnShouldStartInCinematicMode )
		pFnShouldStartInCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 21157 ];

	AGameInfo_execShouldStartInCinematicMode_Parms ShouldStartInCinematicMode_Parms;

	pFnShouldStartInCinematicMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldStartInCinematicMode, &ShouldStartInCinematicMode_Parms, NULL );

	pFnShouldStartInCinematicMode->FunctionFlags |= 0x400;

	if ( OutHidePlayer )
		*OutHidePlayer = ShouldStartInCinematicMode_Parms.OutHidePlayer;

	if ( OutHideHud )
		*OutHideHud = ShouldStartInCinematicMode_Parms.OutHideHud;

	if ( OutDisableMovement )
		*OutDisableMovement = ShouldStartInCinematicMode_Parms.OutDisableMovement;

	if ( OutDisableTurning )
		*OutDisableTurning = ShouldStartInCinematicMode_Parms.OutDisableTurning;

	if ( OutDisableInput )
		*OutDisableInput = ShouldStartInCinematicMode_Parms.OutDisableInput;

	return ShouldStartInCinematicMode_Parms.ReturnValue;
};

// Function Engine.GameInfo.ResetLevel
// [0x00020002] 
// Parameters infos:

void AGameInfo::ResetLevel ( )
{
	static UFunction* pFnResetLevel = NULL;

	if ( ! pFnResetLevel )
		pFnResetLevel = (UFunction*) UObject::GObjObjects()->Data[ 21148 ];

	AGameInfo_execResetLevel_Parms ResetLevel_Parms;

	this->ProcessEvent ( pFnResetLevel, &ResetLevel_Parms, NULL );
};

// Function Engine.GameInfo.ShouldReset
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToReset                   ( CPF_Parm )

bool AGameInfo::ShouldReset ( class AActor* ActorToReset )
{
	static UFunction* pFnShouldReset = NULL;

	if ( ! pFnShouldReset )
		pFnShouldReset = (UFunction*) UObject::GObjObjects()->Data[ 21145 ];

	AGameInfo_execShouldReset_Parms ShouldReset_Parms;
	ShouldReset_Parms.ActorToReset = ActorToReset;

	this->ProcessEvent ( pFnShouldReset, &ShouldReset_Parms, NULL );

	return ShouldReset_Parms.ReturnValue;
};

// Function Engine.GameInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 21142 ];

	AGameInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AGameInfo::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 21136 ];

	AGameInfo_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.GameInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21134 ];

	AGameInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.GameInfo.GetCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* AGameInfo::GetCoverReplicator ( )
{
	static UFunction* pFnGetCoverReplicator = NULL;

	if ( ! pFnGetCoverReplicator )
		pFnGetCoverReplicator = (UFunction*) UObject::GObjObjects()->Data[ 17445 ];

	AGameInfo_execGetCoverReplicator_Parms GetCoverReplicator_Parms;

	this->ProcessEvent ( pFnGetCoverReplicator, &GetCoverReplicator_Parms, NULL );

	return GetCoverReplicator_Parms.ReturnValue;
};

// Function Engine.GameInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AGameInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21127 ];

	AGameInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.GameInfo.GetMapCommonPackageName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InFilename                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 OutCommonPackageName           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GetMapCommonPackageName ( struct FString* InFilename, struct FString* OutCommonPackageName )
{
	static UFunction* pFnGetMapCommonPackageName = NULL;

	if ( ! pFnGetMapCommonPackageName )
		pFnGetMapCommonPackageName = (UFunction*) UObject::GObjObjects()->Data[ 21123 ];

	AGameInfo_execGetMapCommonPackageName_Parms GetMapCommonPackageName_Parms;

	pFnGetMapCommonPackageName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapCommonPackageName, &GetMapCommonPackageName_Parms, NULL );

	pFnGetMapCommonPackageName->FunctionFlags |= 0x400;

	if ( InFilename )
		memcpy ( InFilename, &GetMapCommonPackageName_Parms.InFilename, 0xC );

	if ( OutCommonPackageName )
		memcpy ( OutCommonPackageName, &GetMapCommonPackageName_Parms.OutCommonPackageName, 0xC );

	return GetMapCommonPackageName_Parms.ReturnValue;
};

// Function Engine.GameInfo.GetSupportedGameTypes
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCheckExt                      ( CPF_OptionalParm | CPF_Parm )
// struct FString                 InFilename                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FGameTypePrefix         OutGameType                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool AGameInfo::GetSupportedGameTypes ( unsigned long bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType )
{
	static UFunction* pFnGetSupportedGameTypes = NULL;

	if ( ! pFnGetSupportedGameTypes )
		pFnGetSupportedGameTypes = (UFunction*) UObject::GObjObjects()->Data[ 21118 ];

	AGameInfo_execGetSupportedGameTypes_Parms GetSupportedGameTypes_Parms;
	GetSupportedGameTypes_Parms.bCheckExt = bCheckExt;

	pFnGetSupportedGameTypes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSupportedGameTypes, &GetSupportedGameTypes_Parms, NULL );

	pFnGetSupportedGameTypes->FunctionFlags |= 0x400;

	if ( InFilename )
		memcpy ( InFilename, &GetSupportedGameTypes_Parms.InFilename, 0xC );

	if ( OutGameType )
		memcpy ( OutGameType, &GetSupportedGameTypes_Parms.OutGameType, 0x34 );

	return GetSupportedGameTypes_Parms.ReturnValue;
};

// Function Engine.Mutator.NetDamage
// [0x00420002] 
// Parameters infos:
// int                            OriginalDamage                 ( CPF_Parm )
// class APawn*                   injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AMutator::NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnNetDamage = NULL;

	if ( ! pFnNetDamage )
		pFnNetDamage = (UFunction*) UObject::GObjObjects()->Data[ 26278 ];

	AMutator_execNetDamage_Parms NetDamage_Parms;
	NetDamage_Parms.OriginalDamage = OriginalDamage;
	NetDamage_Parms.injured = injured;
	NetDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NetDamage_Parms.HitLocation, &HitLocation, 0xC );
	NetDamage_Parms.DamageType = DamageType;
	NetDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnNetDamage, &NetDamage_Parms, NULL );

	if ( Damage )
		*Damage = NetDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &NetDamage_Parms.Momentum, 0xC );
};

// Function Engine.Mutator.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )

void AMutator::ScoreKill ( class AController* Killer, class AController* Killed )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 26275 ];

	AMutator_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Killed = Killed;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function Engine.Mutator.ScoreObjective
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  Scorer                         ( CPF_Parm )
// int                            Score                          ( CPF_Parm )

void AMutator::ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score )
{
	static UFunction* pFnScoreObjective = NULL;

	if ( ! pFnScoreObjective )
		pFnScoreObjective = (UFunction*) UObject::GObjObjects()->Data[ 26272 ];

	AMutator_execScoreObjective_Parms ScoreObjective_Parms;
	ScoreObjective_Parms.Scorer = Scorer;
	ScoreObjective_Parms.Score = Score;

	this->ProcessEvent ( pFnScoreObjective, &ScoreObjective_Parms, NULL );
};

// Function Engine.Mutator.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Killed                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AMutator::PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 21473 ];

	AMutator_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.Killed = Killed;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function Engine.Mutator.OverridePickupQuery
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )
// unsigned char                  bAllowPickup                   ( CPF_Parm | CPF_OutParm )

bool AMutator::OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup )
{
	static UFunction* pFnOverridePickupQuery = NULL;

	if ( ! pFnOverridePickupQuery )
		pFnOverridePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 21507 ];

	AMutator_execOverridePickupQuery_Parms OverridePickupQuery_Parms;
	OverridePickupQuery_Parms.Other = Other;
	OverridePickupQuery_Parms.ItemClass = ItemClass;
	OverridePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnOverridePickupQuery, &OverridePickupQuery_Parms, NULL );

	if ( bAllowPickup )
		*bAllowPickup = OverridePickupQuery_Parms.bAllowPickup;

	return OverridePickupQuery_Parms.ReturnValue;
};

// Function Engine.Mutator.CheckEndGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  Winner                         ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_NeedCtorLink )

bool AMutator::CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason )
{
	static UFunction* pFnCheckEndGame = NULL;

	if ( ! pFnCheckEndGame )
		pFnCheckEndGame = (UFunction*) UObject::GObjObjects()->Data[ 21571 ];

	AMutator_execCheckEndGame_Parms CheckEndGame_Parms;
	CheckEndGame_Parms.Winner = Winner;
	memcpy ( &CheckEndGame_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCheckEndGame, &CheckEndGame_Parms, NULL );

	return CheckEndGame_Parms.ReturnValue;
};

// Function Engine.Mutator.HandleRestartGame
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AMutator::HandleRestartGame ( )
{
	static UFunction* pFnHandleRestartGame = NULL;

	if ( ! pFnHandleRestartGame )
		pFnHandleRestartGame = (UFunction*) UObject::GObjObjects()->Data[ 21539 ];

	AMutator_execHandleRestartGame_Parms HandleRestartGame_Parms;

	this->ProcessEvent ( pFnHandleRestartGame, &HandleRestartGame_Parms, NULL );

	return HandleRestartGame_Parms.ReturnValue;
};

// Function Engine.Mutator.FindPlayerStart
// [0x00024002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* AMutator::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 21607 ];

	AMutator_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function Engine.Mutator.GetSeamlessTravelActorList
// [0x00420002] 
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 26255 ];

	AMutator_execGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.Mutator.InitMutator
// [0x00420002] 
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::InitMutator ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitMutator = NULL;

	if ( ! pFnInitMutator )
		pFnInitMutator = (UFunction*) UObject::GObjObjects()->Data[ 26252 ];

	AMutator_execInitMutator_Parms InitMutator_Parms;
	memcpy ( &InitMutator_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitMutator, &InitMutator_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitMutator_Parms.ErrorMessage, 0xC );
};

// Function Engine.Mutator.DriverLeftVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverLeftVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverLeftVehicle = NULL;

	if ( ! pFnDriverLeftVehicle )
		pFnDriverLeftVehicle = (UFunction*) UObject::GObjObjects()->Data[ 26249 ];

	AMutator_execDriverLeftVehicle_Parms DriverLeftVehicle_Parms;
	DriverLeftVehicle_Parms.V = V;
	DriverLeftVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverLeftVehicle, &DriverLeftVehicle_Parms, NULL );
};

// Function Engine.Mutator.CanLeaveVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

bool AMutator::CanLeaveVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnCanLeaveVehicle = NULL;

	if ( ! pFnCanLeaveVehicle )
		pFnCanLeaveVehicle = (UFunction*) UObject::GObjObjects()->Data[ 21651 ];

	AMutator_execCanLeaveVehicle_Parms CanLeaveVehicle_Parms;
	CanLeaveVehicle_Parms.V = V;
	CanLeaveVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanLeaveVehicle, &CanLeaveVehicle_Parms, NULL );

	return CanLeaveVehicle_Parms.ReturnValue;
};

// Function Engine.Mutator.DriverEnteredVehicle
// [0x00020002] 
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )

void AMutator::DriverEnteredVehicle ( class AVehicle* V, class APawn* P )
{
	static UFunction* pFnDriverEnteredVehicle = NULL;

	if ( ! pFnDriverEnteredVehicle )
		pFnDriverEnteredVehicle = (UFunction*) UObject::GObjObjects()->Data[ 26244 ];

	AMutator_execDriverEnteredVehicle_Parms DriverEnteredVehicle_Parms;
	DriverEnteredVehicle_Parms.V = V;
	DriverEnteredVehicle_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnteredVehicle, &DriverEnteredVehicle_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogin
// [0x00020002] 
// Parameters infos:
// class AController*             NewPlayer                      ( CPF_Parm )

void AMutator::NotifyLogin ( class AController* NewPlayer )
{
	static UFunction* pFnNotifyLogin = NULL;

	if ( ! pFnNotifyLogin )
		pFnNotifyLogin = (UFunction*) UObject::GObjObjects()->Data[ 26242 ];

	AMutator_execNotifyLogin_Parms NotifyLogin_Parms;
	NotifyLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnNotifyLogin, &NotifyLogin_Parms, NULL );
};

// Function Engine.Mutator.NotifyLogout
// [0x00020002] 
// Parameters infos:
// class AController*             Exiting                        ( CPF_Parm )

void AMutator::NotifyLogout ( class AController* Exiting )
{
	static UFunction* pFnNotifyLogout = NULL;

	if ( ! pFnNotifyLogout )
		pFnNotifyLogout = (UFunction*) UObject::GObjObjects()->Data[ 26240 ];

	AMutator_execNotifyLogout_Parms NotifyLogout_Parms;
	NotifyLogout_Parms.Exiting = Exiting;

	this->ProcessEvent ( pFnNotifyLogout, &NotifyLogout_Parms, NULL );
};

// Function Engine.Mutator.CheckReplacement
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckReplacement ( class AActor* Other )
{
	static UFunction* pFnCheckReplacement = NULL;

	if ( ! pFnCheckReplacement )
		pFnCheckReplacement = (UFunction*) UObject::GObjObjects()->Data[ 26237 ];

	AMutator_execCheckReplacement_Parms CheckReplacement_Parms;
	CheckReplacement_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckReplacement, &CheckReplacement_Parms, NULL );

	return CheckReplacement_Parms.ReturnValue;
};

// Function Engine.Mutator.CheckRelevance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::CheckRelevance ( class AActor* Other )
{
	static UFunction* pFnCheckRelevance = NULL;

	if ( ! pFnCheckRelevance )
		pFnCheckRelevance = (UFunction*) UObject::GObjObjects()->Data[ 21498 ];

	AMutator_execCheckRelevance_Parms CheckRelevance_Parms;
	CheckRelevance_Parms.Other = Other;

	this->ProcessEvent ( pFnCheckRelevance, &CheckRelevance_Parms, NULL );

	return CheckRelevance_Parms.ReturnValue;
};

// Function Engine.Mutator.IsRelevant
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::IsRelevant ( class AActor* Other )
{
	static UFunction* pFnIsRelevant = NULL;

	if ( ! pFnIsRelevant )
		pFnIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 26231 ];

	AMutator_execIsRelevant_Parms IsRelevant_Parms;
	IsRelevant_Parms.Other = Other;

	this->ProcessEvent ( pFnIsRelevant, &IsRelevant_Parms, NULL );

	return IsRelevant_Parms.ReturnValue;
};

// Function Engine.Mutator.AlwaysKeep
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AMutator::AlwaysKeep ( class AActor* Other )
{
	static UFunction* pFnAlwaysKeep = NULL;

	if ( ! pFnAlwaysKeep )
		pFnAlwaysKeep = (UFunction*) UObject::GObjObjects()->Data[ 26228 ];

	AMutator_execAlwaysKeep_Parms AlwaysKeep_Parms;
	AlwaysKeep_Parms.Other = Other;

	this->ProcessEvent ( pFnAlwaysKeep, &AlwaysKeep_Parms, NULL );

	return AlwaysKeep_Parms.ReturnValue;
};

// Function Engine.Mutator.AddMutator
// [0x00020002] 
// Parameters infos:
// class AMutator*                M                              ( CPF_Parm )

void AMutator::AddMutator ( class AMutator* M )
{
	static UFunction* pFnAddMutator = NULL;

	if ( ! pFnAddMutator )
		pFnAddMutator = (UFunction*) UObject::GObjObjects()->Data[ 26226 ];

	AMutator_execAddMutator_Parms AddMutator_Parms;
	AddMutator_Parms.M = M;

	this->ProcessEvent ( pFnAddMutator, &AddMutator_Parms, NULL );
};

// Function Engine.Mutator.ModifyPlayer
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AMutator::ModifyPlayer ( class APawn* Other )
{
	static UFunction* pFnModifyPlayer = NULL;

	if ( ! pFnModifyPlayer )
		pFnModifyPlayer = (UFunction*) UObject::GObjObjects()->Data[ 26224 ];

	AMutator_execModifyPlayer_Parms ModifyPlayer_Parms;
	ModifyPlayer_Parms.Other = Other;

	this->ProcessEvent ( pFnModifyPlayer, &ModifyPlayer_Parms, NULL );
};

// Function Engine.Mutator.ModifyLogin
// [0x00420002] 
// Parameters infos:
// struct FString                 Portal                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Options                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AMutator::ModifyLogin ( struct FString* Portal, struct FString* Options )
{
	static UFunction* pFnModifyLogin = NULL;

	if ( ! pFnModifyLogin )
		pFnModifyLogin = (UFunction*) UObject::GObjObjects()->Data[ 26221 ];

	AMutator_execModifyLogin_Parms ModifyLogin_Parms;

	this->ProcessEvent ( pFnModifyLogin, &ModifyLogin_Parms, NULL );

	if ( Portal )
		memcpy ( Portal, &ModifyLogin_Parms.Portal, 0xC );

	if ( Options )
		memcpy ( Options, &ModifyLogin_Parms.Options, 0xC );
};

// Function Engine.Mutator.Mutate
// [0x00020002] 
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerController*       Sender                         ( CPF_Parm )

void AMutator::Mutate ( struct FString MutateString, class APlayerController* Sender )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 26218 ];

	AMutator_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );
	Mutate_Parms.Sender = Sender;

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.Mutator.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 26217 ];

	AMutator_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Mutator.MutatorIsAllowed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AMutator::MutatorIsAllowed ( )
{
	static UFunction* pFnMutatorIsAllowed = NULL;

	if ( ! pFnMutatorIsAllowed )
		pFnMutatorIsAllowed = (UFunction*) UObject::GObjObjects()->Data[ 26215 ];

	AMutator_execMutatorIsAllowed_Parms MutatorIsAllowed_Parms;

	this->ProcessEvent ( pFnMutatorIsAllowed, &MutatorIsAllowed_Parms, NULL );

	return MutatorIsAllowed_Parms.ReturnValue;
};

// Function Engine.Mutator.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMutator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26214 ];

	AMutator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.PotentialClimbWatcher.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APotentialClimbWatcher::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 31579 ];

	APotentialClimbWatcher_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Route.MoveOntoRoutePath
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// unsigned char                  RouteDirection                 ( CPF_OptionalParm | CPF_Parm )
// float                          DistFudgeFactor                ( CPF_OptionalParm | CPF_Parm )

int ARoute::MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor )
{
	static UFunction* pFnMoveOntoRoutePath = NULL;

	if ( ! pFnMoveOntoRoutePath )
		pFnMoveOntoRoutePath = (UFunction*) UObject::GObjObjects()->Data[ 32200 ];

	ARoute_execMoveOntoRoutePath_Parms MoveOntoRoutePath_Parms;
	MoveOntoRoutePath_Parms.P = P;
	MoveOntoRoutePath_Parms.RouteDirection = RouteDirection;
	MoveOntoRoutePath_Parms.DistFudgeFactor = DistFudgeFactor;

	pFnMoveOntoRoutePath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveOntoRoutePath, &MoveOntoRoutePath_Parms, NULL );

	pFnMoveOntoRoutePath->FunctionFlags |= 0x400;

	return MoveOntoRoutePath_Parms.ReturnValue;
};

// Function Engine.Route.ResolveRouteIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Idx                            ( CPF_Parm )
// unsigned char                  RouteDirection                 ( CPF_Parm )
// unsigned char                  out_bComplete                  ( CPF_Parm | CPF_OutParm )
// unsigned char                  out_bReverse                   ( CPF_Parm | CPF_OutParm )

int ARoute::ResolveRouteIndex ( int Idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse )
{
	static UFunction* pFnResolveRouteIndex = NULL;

	if ( ! pFnResolveRouteIndex )
		pFnResolveRouteIndex = (UFunction*) UObject::GObjObjects()->Data[ 32194 ];

	ARoute_execResolveRouteIndex_Parms ResolveRouteIndex_Parms;
	ResolveRouteIndex_Parms.Idx = Idx;
	ResolveRouteIndex_Parms.RouteDirection = RouteDirection;

	pFnResolveRouteIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRouteIndex, &ResolveRouteIndex_Parms, NULL );

	pFnResolveRouteIndex->FunctionFlags |= 0x400;

	if ( out_bComplete )
		*out_bComplete = ResolveRouteIndex_Parms.out_bComplete;

	if ( out_bReverse )
		*out_bReverse = ResolveRouteIndex_Parms.out_bReverse;

	return ResolveRouteIndex_Parms.ReturnValue;
};

// Function Engine.Inventory.GetLocalString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )

struct FString AInventory::GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 )
{
	static UFunction* pFnGetLocalString = NULL;

	if ( ! pFnGetLocalString )
		pFnGetLocalString = (UFunction*) UObject::GObjObjects()->Data[ 23908 ];

	AInventory_execGetLocalString_Parms GetLocalString_Parms;
	GetLocalString_Parms.Switch = Switch;
	GetLocalString_Parms.RelatedPRI = RelatedPRI;
	GetLocalString_Parms.RelatedPRI01 = RelatedPRI01;

	this->ProcessEvent ( pFnGetLocalString, &GetLocalString_Parms, NULL );

	return GetLocalString_Parms.ReturnValue;
};

// Function Engine.Inventory.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AInventory::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 23904 ];

	AInventory_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Inventory.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventory::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 23900 ];

	AInventory_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Inventory.ItemRemovedFromInvManager
// [0x00020000] 
// Parameters infos:

void AInventory::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 23899 ];

	AInventory_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Inventory.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void AInventory::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 23896 ];

	AInventory_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function Engine.Inventory.GivenTo
// [0x00024002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventory::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 23893 ];

	AInventory_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function Engine.Inventory.AnnouncePickup
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::AnnouncePickup ( class APawn* Other )
{
	static UFunction* pFnAnnouncePickup = NULL;

	if ( ! pFnAnnouncePickup )
		pFnAnnouncePickup = (UFunction*) UObject::GObjObjects()->Data[ 23891 ];

	AInventory_execAnnouncePickup_Parms AnnouncePickup_Parms;
	AnnouncePickup_Parms.Other = Other;

	this->ProcessEvent ( pFnAnnouncePickup, &AnnouncePickup_Parms, NULL );
};

// Function Engine.Inventory.GiveTo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AInventory::GiveTo ( class APawn* Other )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 18805 ];

	AInventory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.Other = Other;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.Inventory.DetourWeight
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float AInventory::DetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 18798 ];

	AInventory_execDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.Inventory.BotDesireability
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  PickupHolder                   ( CPF_Parm )
// class APawn*                   P                              ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

float AInventory::BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C )
{
	static UFunction* pFnBotDesireability = NULL;

	if ( ! pFnBotDesireability )
		pFnBotDesireability = (UFunction*) UObject::GObjObjects()->Data[ 23879 ];

	AInventory_execBotDesireability_Parms BotDesireability_Parms;
	BotDesireability_Parms.PickupHolder = PickupHolder;
	BotDesireability_Parms.P = P;
	BotDesireability_Parms.C = C;

	this->ProcessEvent ( pFnBotDesireability, &BotDesireability_Parms, NULL );

	return BotDesireability_Parms.ReturnValue;
};

// Function Engine.Inventory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 23878 ];

	AInventory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Inventory.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AInventory::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 23876 ];

	AInventory_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTargetDistance
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetTargetDistance ( )
{
	static UFunction* pFnGetTargetDistance = NULL;

	if ( ! pFnGetTargetDistance )
		pFnGetTargetDistance = (UFunction*) UObject::GObjObjects()->Data[ 36481 ];

	AWeapon_execGetTargetDistance_Parms GetTargetDistance_Parms;

	this->ProcessEvent ( pFnGetTargetDistance, &GetTargetDistance_Parms, NULL );

	return GetTargetDistance_Parms.ReturnValue;
};

// Function Engine.Weapon.CacheAIController
// [0x00020102] 
// Parameters infos:

void AWeapon::CacheAIController ( )
{
	static UFunction* pFnCacheAIController = NULL;

	if ( ! pFnCacheAIController )
		pFnCacheAIController = (UFunction*) UObject::GObjObjects()->Data[ 36480 ];

	AWeapon_execCacheAIController_Parms CacheAIController_Parms;

	this->ProcessEvent ( pFnCacheAIController, &CacheAIController_Parms, NULL );
};

// Function Engine.Weapon.WeaponIsDown
// [0x00020100] 
// Parameters infos:

void AWeapon::WeaponIsDown ( )
{
	static UFunction* pFnWeaponIsDown = NULL;

	if ( ! pFnWeaponIsDown )
		pFnWeaponIsDown = (UFunction*) UObject::GObjObjects()->Data[ 36473 ];

	AWeapon_execWeaponIsDown_Parms WeaponIsDown_Parms;

	this->ProcessEvent ( pFnWeaponIsDown, &WeaponIsDown_Parms, NULL );
};

// Function Engine.Weapon.StillFiring
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireMode                       ( CPF_Parm )

bool AWeapon::StillFiring ( unsigned char FireMode )
{
	static UFunction* pFnStillFiring = NULL;

	if ( ! pFnStillFiring )
		pFnStillFiring = (UFunction*) UObject::GObjObjects()->Data[ 36454 ];

	AWeapon_execStillFiring_Parms StillFiring_Parms;
	StillFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnStillFiring, &StillFiring_Parms, NULL );

	return StillFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 36452 ];

	AWeapon_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function Engine.Weapon.NotifyWeaponFinishedFiring
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFinishedFiring ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 36450 ];

	AWeapon_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// unsigned char                  FireMode                       ( CPF_Parm )

void AWeapon::NotifyWeaponFired ( unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 36448 ];

	AWeapon_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.Weapon.HandleFinishedFiring
// [0x00020102] 
// Parameters infos:

void AWeapon::HandleFinishedFiring ( )
{
	static UFunction* pFnHandleFinishedFiring = NULL;

	if ( ! pFnHandleFinishedFiring )
		pFnHandleFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 36447 ];

	AWeapon_execHandleFinishedFiring_Parms HandleFinishedFiring_Parms;

	this->ProcessEvent ( pFnHandleFinishedFiring, &HandleFinishedFiring_Parms, NULL );
};

// Function Engine.Weapon.TryPutDown
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::TryPutDown ( )
{
	static UFunction* pFnTryPutDown = NULL;

	if ( ! pFnTryPutDown )
		pFnTryPutDown = (UFunction*) UObject::GObjObjects()->Data[ 24008 ];

	AWeapon_execTryPutDown_Parms TryPutDown_Parms;

	this->ProcessEvent ( pFnTryPutDown, &TryPutDown_Parms, NULL );

	return TryPutDown_Parms.ReturnValue;
};

// Function Engine.Weapon.GetPhysicalFireStartLoc
// [0x00024D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector AWeapon::eventGetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 36413 ];

	AWeapon_eventGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	pFnGetPhysicalFireStartLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	pFnGetPhysicalFireStartLoc->FunctionFlags |= 0x400;

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.GetMuzzleLoc
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AWeapon::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 36411 ];

	AWeapon_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function Engine.Weapon.CustomFire
// [0x00020100] 
// Parameters infos:

void AWeapon::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = (UFunction*) UObject::GObjObjects()->Data[ 36410 ];

	AWeapon_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function Engine.Weapon.ProjectileFire
// [0x00820102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* AWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 36402 ];

	AWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function Engine.Weapon.ProcessInstantHit
// [0x00024102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )
// int                            NumHits                        ( CPF_OptionalParm | CPF_Parm )

void AWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 36395 ];

	AWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x50 );
	ProcessInstantHit_Parms.NumHits = NumHits;

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function Engine.Weapon.InstantFire
// [0x00820102] 
// Parameters infos:

void AWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 36388 ];

	AWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function Engine.Weapon.PassThroughDamage
// [0x00022102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool AWeapon::PassThroughDamage ( class AActor* HitActor )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = (UFunction*) UObject::GObjObjects()->Data[ 36385 ];

	AWeapon_execPassThroughDamage_Parms PassThroughDamage_Parms;
	PassThroughDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );

	return PassThroughDamage_Parms.ReturnValue;
};

// Function Engine.Weapon.CalcWeaponFire
// [0x00C24102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo AWeapon::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 36368 ];

	AWeapon_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceOwner
// [0x00020102] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* AWeapon::GetTraceOwner ( )
{
	static UFunction* pFnGetTraceOwner = NULL;

	if ( ! pFnGetTraceOwner )
		pFnGetTraceOwner = (UFunction*) UObject::GObjObjects()->Data[ 36366 ];

	AWeapon_execGetTraceOwner_Parms GetTraceOwner_Parms;

	this->ProcessEvent ( pFnGetTraceOwner, &GetTraceOwner_Parms, NULL );

	return GetTraceOwner_Parms.ReturnValue;
};

// Function Engine.Weapon.GetTraceRange
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::eventGetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 11894 ];

	AWeapon_eventGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AWeapon::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 36362 ];

	AWeapon_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function Engine.Weapon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AWeapon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 36361 ];

	AWeapon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function Engine.Weapon.FireModeUpdated
// [0x00020100] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void AWeapon::FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFireModeUpdated = NULL;

	if ( ! pFnFireModeUpdated )
		pFnFireModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 36358 ];

	AWeapon_execFireModeUpdated_Parms FireModeUpdated_Parms;
	FireModeUpdated_Parms.FiringMode = FiringMode;
	FireModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFireModeUpdated, &FireModeUpdated_Parms, NULL );
};

// Function Engine.Weapon.SetCurrentFireMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  FiringModeNum                  ( CPF_Parm )

void AWeapon::SetCurrentFireMode ( unsigned char FiringModeNum )
{
	static UFunction* pFnSetCurrentFireMode = NULL;

	if ( ! pFnSetCurrentFireMode )
		pFnSetCurrentFireMode = (UFunction*) UObject::GObjObjects()->Data[ 36356 ];

	AWeapon_execSetCurrentFireMode_Parms SetCurrentFireMode_Parms;
	SetCurrentFireMode_Parms.FiringModeNum = FiringModeNum;

	this->ProcessEvent ( pFnSetCurrentFireMode, &SetCurrentFireMode_Parms, NULL );
};

// Function Engine.Weapon.SendToFiringState
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::SendToFiringState ( unsigned char FireModeNum )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = (UFunction*) UObject::GObjObjects()->Data[ 36354 ];

	AWeapon_execSendToFiringState_Parms SendToFiringState_Parms;
	SendToFiringState_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function Engine.Weapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void AWeapon::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 36351 ];

	AWeapon_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function Engine.Weapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 36349 ];

	AWeapon_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStopFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStopFire = NULL;

	if ( ! pFnServerStopFire )
		pFnServerStopFire = (UFunction*) UObject::GObjObjects()->Data[ 36347 ];

	AWeapon_execServerStopFire_Parms ServerStopFire_Parms;
	ServerStopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStopFire, &ServerStopFire_Parms, NULL );
};

// Function Engine.Weapon.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 36345 ];

	AWeapon_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Weapon.BeginFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::BeginFire ( unsigned char FireModeNum )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = (UFunction*) UObject::GObjObjects()->Data[ 36343 ];

	AWeapon_execBeginFire_Parms BeginFire_Parms;
	BeginFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function Engine.Weapon.ServerStartFire
// [0x002200C2] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ServerStartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnServerStartFire = NULL;

	if ( ! pFnServerStartFire )
		pFnServerStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36341 ];

	AWeapon_execServerStartFire_Parms ServerStartFire_Parms;
	ServerStartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnServerStartFire, &ServerStartFire_Parms, NULL );
};

// Function Engine.Weapon.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 36339 ];

	AWeapon_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Weapon.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AWeapon::ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 36336 ];

	AWeapon_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.Weapon.ClientGivenTo
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewOwner                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_Parm )

void AWeapon::ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 36333 ];

	AWeapon_execClientGivenTo_Parms ClientGivenTo_Parms;
	ClientGivenTo_Parms.NewOwner = NewOwner;
	ClientGivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function Engine.Weapon.DetachWeapon
// [0x00020100] 
// Parameters infos:

void AWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36332 ];

	AWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function Engine.Weapon.AttachWeaponTo
// [0x00024100] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void AWeapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 36329 ];

	AWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashLocation
// [0x00020002] 
// Parameters infos:

void AWeapon::ClearFlashLocation ( )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 36328 ];

	AWeapon_execClearFlashLocation_Parms ClearFlashLocation_Parms;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.SetFlashLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void AWeapon::SetFlashLocation ( struct FVector HitLocation )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 36326 ];

	AWeapon_execSetFlashLocation_Parms SetFlashLocation_Parms;
	memcpy ( &SetFlashLocation_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Weapon.ClearFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::ClearFlashCount ( )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 36325 ];

	AWeapon_execClearFlashCount_Parms ClearFlashCount_Parms;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Weapon.IncrementFlashCount
// [0x00020102] 
// Parameters infos:

void AWeapon::IncrementFlashCount ( )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 36324 ];

	AWeapon_execIncrementFlashCount_Parms IncrementFlashCount_Parms;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Weapon.WeaponEmpty
// [0x00020100] 
// Parameters infos:

void AWeapon::WeaponEmpty ( )
{
	static UFunction* pFnWeaponEmpty = NULL;

	if ( ! pFnWeaponEmpty )
		pFnWeaponEmpty = (UFunction*) UObject::GObjObjects()->Data[ 36323 ];

	AWeapon_execWeaponEmpty_Parms WeaponEmpty_Parms;

	this->ProcessEvent ( pFnWeaponEmpty, &WeaponEmpty_Parms, NULL );
};

// Function Engine.Weapon.DenyPickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AWeapon::DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 36319 ];

	AWeapon_execDenyPickupQuery_Parms DenyPickupQuery_Parms;
	DenyPickupQuery_Parms.ItemClass = ItemClass;
	DenyPickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );

	return DenyPickupQuery_Parms.ReturnValue;
};

// Function Engine.Weapon.PutDownWeapon
// [0x00020102] 
// Parameters infos:

void AWeapon::PutDownWeapon ( )
{
	static UFunction* pFnPutDownWeapon = NULL;

	if ( ! pFnPutDownWeapon )
		pFnPutDownWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36318 ];

	AWeapon_execPutDownWeapon_Parms PutDownWeapon_Parms;

	this->ProcessEvent ( pFnPutDownWeapon, &PutDownWeapon_Parms, NULL );
};

// Function Engine.Weapon.Activate
// [0x00020102] 
// Parameters infos:

void AWeapon::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = (UFunction*) UObject::GObjObjects()->Data[ 36317 ];

	AWeapon_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponEquipping
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponEquipping ( )
{
	static UFunction* pFnTimeWeaponEquipping = NULL;

	if ( ! pFnTimeWeaponEquipping )
		pFnTimeWeaponEquipping = (UFunction*) UObject::GObjObjects()->Data[ 36316 ];

	AWeapon_execTimeWeaponEquipping_Parms TimeWeaponEquipping_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquipping, &TimeWeaponEquipping_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AWeapon::TimeWeaponPutDown ( )
{
	static UFunction* pFnTimeWeaponPutDown = NULL;

	if ( ! pFnTimeWeaponPutDown )
		pFnTimeWeaponPutDown = (UFunction*) UObject::GObjObjects()->Data[ 36315 ];

	AWeapon_execTimeWeaponPutDown_Parms TimeWeaponPutDown_Parms;

	this->ProcessEvent ( pFnTimeWeaponPutDown, &TimeWeaponPutDown_Parms, NULL );
};

// Function Engine.Weapon.RefireCheckTimer
// [0x00020100] 
// Parameters infos:

void AWeapon::RefireCheckTimer ( )
{
	static UFunction* pFnRefireCheckTimer = NULL;

	if ( ! pFnRefireCheckTimer )
		pFnRefireCheckTimer = (UFunction*) UObject::GObjObjects()->Data[ 36314 ];

	AWeapon_execRefireCheckTimer_Parms RefireCheckTimer_Parms;

	this->ProcessEvent ( pFnRefireCheckTimer, &RefireCheckTimer_Parms, NULL );
};

// Function Engine.Weapon.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::TimeWeaponFiring ( unsigned char FireModeNum )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 36312 ];

	AWeapon_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;
	TimeWeaponFiring_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function Engine.Weapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float AWeapon::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 36309 ];

	AWeapon_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function Engine.Weapon.StopFireEffects
// [0x00020100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 36307 ];

	AWeapon_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function Engine.Weapon.PlayFireEffects
// [0x00024100] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void AWeapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 36304 ];

	AWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function Engine.Weapon.StopWeaponAnimation
// [0x00020102] 
// Parameters infos:

void AWeapon::StopWeaponAnimation ( )
{
	static UFunction* pFnStopWeaponAnimation = NULL;

	if ( ! pFnStopWeaponAnimation )
		pFnStopWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 36302 ];

	AWeapon_execStopWeaponAnimation_Parms StopWeaponAnimation_Parms;

	this->ProcessEvent ( pFnStopWeaponAnimation, &StopWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )
// float                          fDesiredDuration               ( CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

void AWeapon::PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = (UFunction*) UObject::GObjObjects()->Data[ 36295 ];

	AWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;
	memcpy ( &PlayWeaponAnimation_Parms.Sequence, &Sequence, 0x8 );
	PlayWeaponAnimation_Parms.fDesiredDuration = fDesiredDuration;
	PlayWeaponAnimation_Parms.bLoop = bLoop;
	PlayWeaponAnimation_Parms.SkelMesh = SkelMesh;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponAnimNodeSeq
// [0x00020102] 
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq ( )
{
	static UFunction* pFnGetWeaponAnimNodeSeq = NULL;

	if ( ! pFnGetWeaponAnimNodeSeq )
		pFnGetWeaponAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 36290 ];

	AWeapon_execGetWeaponAnimNodeSeq_Parms GetWeaponAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimNodeSeq, &GetWeaponAnimNodeSeq_Parms, NULL );

	return GetWeaponAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.Weapon.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 25613 ];

	AWeapon_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Weapon.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AWeapon::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 25606 ];

	AWeapon_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Weapon.GetWeaponRating
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetWeaponRating ( )
{
	static UFunction* pFnGetWeaponRating = NULL;

	if ( ! pFnGetWeaponRating )
		pFnGetWeaponRating = (UFunction*) UObject::GObjObjects()->Data[ 23987 ];

	AWeapon_execGetWeaponRating_Parms GetWeaponRating_Parms;

	this->ProcessEvent ( pFnGetWeaponRating, &GetWeaponRating_Parms, NULL );

	return GetWeaponRating_Parms.ReturnValue;
};

// Function Engine.Weapon.GetAIRating
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::GetAIRating ( )
{
	static UFunction* pFnGetAIRating = NULL;

	if ( ! pFnGetAIRating )
		pFnGetAIRating = (UFunction*) UObject::GObjObjects()->Data[ 23978 ];

	AWeapon_execGetAIRating_Parms GetAIRating_Parms;

	this->ProcessEvent ( pFnGetAIRating, &GetAIRating_Parms, NULL );

	return GetAIRating_Parms.ReturnValue;
};

// Function Engine.Weapon.MaxRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AWeapon::MaxRange ( )
{
	static UFunction* pFnMaxRange = NULL;

	if ( ! pFnMaxRange )
		pFnMaxRange = (UFunction*) UObject::GObjObjects()->Data[ 36286 ];

	AWeapon_execMaxRange_Parms MaxRange_Parms;

	this->ProcessEvent ( pFnMaxRange, &MaxRange_Parms, NULL );

	return MaxRange_Parms.ReturnValue;
};

// Function Engine.Weapon.AddSpread
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                BaseAim                        ( CPF_Parm )

struct FRotator AWeapon::AddSpread ( struct FRotator BaseAim )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = (UFunction*) UObject::GObjObjects()->Data[ 36277 ];

	AWeapon_execAddSpread_Parms AddSpread_Parms;
	memcpy ( &AddSpread_Parms.BaseAim, &BaseAim, 0xC );

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );

	return AddSpread_Parms.ReturnValue;
};

// Function Engine.Weapon.GetProjectileClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* AWeapon::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = (UFunction*) UObject::GObjObjects()->Data[ 36275 ];

	AWeapon_execGetProjectileClass_Parms GetProjectileClass_Parms;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );

	return GetProjectileClass_Parms.ReturnValue;
};

// Function Engine.Weapon.ClearPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::ClearPendingFire ( int FireMode )
{
	static UFunction* pFnClearPendingFire = NULL;

	if ( ! pFnClearPendingFire )
		pFnClearPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36273 ];

	AWeapon_execClearPendingFire_Parms ClearPendingFire_Parms;
	ClearPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnClearPendingFire, &ClearPendingFire_Parms, NULL );
};

// Function Engine.Weapon.SetPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            FireMode                       ( CPF_Parm )

void AWeapon::SetPendingFire ( int FireMode )
{
	static UFunction* pFnSetPendingFire = NULL;

	if ( ! pFnSetPendingFire )
		pFnSetPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36271 ];

	AWeapon_execSetPendingFire_Parms SetPendingFire_Parms;
	SetPendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnSetPendingFire, &SetPendingFire_Parms, NULL );
};

// Function Engine.Weapon.PendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FireMode                       ( CPF_Parm )

bool AWeapon::PendingFire ( int FireMode )
{
	static UFunction* pFnPendingFire = NULL;

	if ( ! pFnPendingFire )
		pFnPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 36258 ];

	AWeapon_execPendingFire_Parms PendingFire_Parms;
	PendingFire_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnPendingFire, &PendingFire_Parms, NULL );

	return PendingFire_Parms.ReturnValue;
};

// Function Engine.Weapon.GetPendingFireLength
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int AWeapon::GetPendingFireLength ( )
{
	static UFunction* pFnGetPendingFireLength = NULL;

	if ( ! pFnGetPendingFireLength )
		pFnGetPendingFireLength = (UFunction*) UObject::GObjObjects()->Data[ 36257 ];

	AWeapon_execGetPendingFireLength_Parms GetPendingFireLength_Parms;

	this->ProcessEvent ( pFnGetPendingFireLength, &GetPendingFireLength_Parms, NULL );

	return GetPendingFireLength_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 23976 ];

	AWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.HasAmmo
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool AWeapon::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36264 ];

	AWeapon_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.AddAmmo
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int AWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36261 ];

	AWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function Engine.Weapon.ConsumeAmmo
// [0x00020000] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void AWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36259 ];

	AWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function Engine.Weapon.GetWeaponDebug
// [0x00420102] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AWeapon::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 36252 ];

	AWeapon_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function Engine.Weapon.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AWeapon::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 36245 ];

	AWeapon_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Weapon.DenyClientWeaponSet
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DenyClientWeaponSet ( )
{
	static UFunction* pFnDenyClientWeaponSet = NULL;

	if ( ! pFnDenyClientWeaponSet )
		pFnDenyClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 24022 ];

	AWeapon_execDenyClientWeaponSet_Parms DenyClientWeaponSet_Parms;

	this->ProcessEvent ( pFnDenyClientWeaponSet, &DenyClientWeaponSet_Parms, NULL );

	return DenyClientWeaponSet_Parms.ReturnValue;
};

// Function Engine.Weapon.IsFiring
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::eventIsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 25619 ];

	AWeapon_eventIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Weapon.ClientWeaponThrown
// [0x010201C2] 
// Parameters infos:

void AWeapon::ClientWeaponThrown ( )
{
	static UFunction* pFnClientWeaponThrown = NULL;

	if ( ! pFnClientWeaponThrown )
		pFnClientWeaponThrown = (UFunction*) UObject::GObjObjects()->Data[ 36244 ];

	AWeapon_execClientWeaponThrown_Parms ClientWeaponThrown_Parms;

	this->ProcessEvent ( pFnClientWeaponThrown, &ClientWeaponThrown_Parms, NULL );
};

// Function Engine.Weapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 25924 ];

	AWeapon_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function Engine.Weapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void AWeapon::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 36241 ];

	AWeapon_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function Engine.Weapon.DoOverridePrevWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverridePrevWeapon ( )
{
	static UFunction* pFnDoOverridePrevWeapon = NULL;

	if ( ! pFnDoOverridePrevWeapon )
		pFnDoOverridePrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36239 ];

	AWeapon_execDoOverridePrevWeapon_Parms DoOverridePrevWeapon_Parms;

	this->ProcessEvent ( pFnDoOverridePrevWeapon, &DoOverridePrevWeapon_Parms, NULL );

	return DoOverridePrevWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.DoOverrideNextWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AWeapon::DoOverrideNextWeapon ( )
{
	static UFunction* pFnDoOverrideNextWeapon = NULL;

	if ( ! pFnDoOverrideNextWeapon )
		pFnDoOverrideNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 36237 ];

	AWeapon_execDoOverrideNextWeapon_Parms DoOverrideNextWeapon_Parms;

	this->ProcessEvent ( pFnDoOverrideNextWeapon, &DoOverrideNextWeapon_Parms, NULL );

	return DoOverrideNextWeapon_Parms.ReturnValue;
};

// Function Engine.Weapon.HolderDied
// [0x00020002] 
// Parameters infos:

void AWeapon::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 36236 ];

	AWeapon_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function Engine.Weapon.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void AWeapon::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 36235 ];

	AWeapon_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function Engine.Weapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AWeapon::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 36234 ];

	AWeapon_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.InventoryManager.UpdateController
// [0x00020102] 
// Parameters infos:

void AInventoryManager::UpdateController ( )
{
	static UFunction* pFnUpdateController = NULL;

	if ( ! pFnUpdateController )
		pFnUpdateController = (UFunction*) UObject::GObjObjects()->Data[ 24024 ];

	AInventoryManager_execUpdateController_Parms UpdateController_Parms;

	this->ProcessEvent ( pFnUpdateController, &UpdateController_Parms, NULL );
};

// Function Engine.InventoryManager.ClientWeaponSet
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )
// unsigned long                  bOptionalSet                   ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = (UFunction*) UObject::GObjObjects()->Data[ 24017 ];

	AInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;
	ClientWeaponSet_Parms.NewWeapon = NewWeapon;
	ClientWeaponSet_Parms.bOptionalSet = bOptionalSet;
	ClientWeaponSet_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function Engine.InventoryManager.ChangedWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::ChangedWeapon ( )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24015 ];

	AInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.ClearPendingWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::ClearPendingWeapon ( )
{
	static UFunction* pFnClearPendingWeapon = NULL;

	if ( ! pFnClearPendingWeapon )
		pFnClearPendingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24014 ];

	AInventoryManager_execClearPendingWeapon_Parms ClearPendingWeapon_Parms;

	this->ProcessEvent ( pFnClearPendingWeapon, &ClearPendingWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.CancelWeaponChange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AInventoryManager::CancelWeaponChange ( )
{
	static UFunction* pFnCancelWeaponChange = NULL;

	if ( ! pFnCancelWeaponChange )
		pFnCancelWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 24012 ];

	AInventoryManager_execCancelWeaponChange_Parms CancelWeaponChange_Parms;

	this->ProcessEvent ( pFnCancelWeaponChange, &CancelWeaponChange_Parms, NULL );

	return CancelWeaponChange_Parms.ReturnValue;
};

// Function Engine.InventoryManager.SetPendingWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetPendingWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetPendingWeapon = NULL;

	if ( ! pFnSetPendingWeapon )
		pFnSetPendingWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24010 ];

	AInventoryManager_execSetPendingWeapon_Parms SetPendingWeapon_Parms;
	SetPendingWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetPendingWeapon, &SetPendingWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.InternalSetCurrentWeapon
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnInternalSetCurrentWeapon = NULL;

	if ( ! pFnInternalSetCurrentWeapon )
		pFnInternalSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24003 ];

	AInventoryManager_execInternalSetCurrentWeapon_Parms InternalSetCurrentWeapon_Parms;
	InternalSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnInternalSetCurrentWeapon, &InternalSetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.ServerSetCurrentWeapon
// [0x002200C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24004 ];

	AInventoryManager_execServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;
	ServerSetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SetCurrentWeapon
// [0x010201C2] 
// Parameters infos:
// class AWeapon*                 DesiredWeapon                  ( CPF_Parm )

void AInventoryManager::SetCurrentWeapon ( class AWeapon* DesiredWeapon )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 24001 ];

	AInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;
	SetCurrentWeapon_Parms.DesiredWeapon = DesiredWeapon;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.NextWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23996 ];

	AInventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.PrevWeapon
// [0x00020102] 
// Parameters infos:

void AInventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23992 ];

	AInventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.SwitchToBestWeapon
// [0x00024102] 
// Parameters infos:
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

void AInventoryManager::SwitchToBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23989 ];

	AInventoryManager_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function Engine.InventoryManager.GetBestWeapon
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

class AWeapon* AInventoryManager::GetBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnGetBestWeapon = NULL;

	if ( ! pFnGetBestWeapon )
		pFnGetBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 23980 ];

	AInventoryManager_execGetBestWeapon_Parms GetBestWeapon_Parms;
	GetBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnGetBestWeapon, &GetBestWeapon_Parms, NULL );

	return GetBestWeapon_Parms.ReturnValue;
};

// Function Engine.InventoryManager.GetWeaponRatingFor
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )

float AInventoryManager::GetWeaponRatingFor ( class AWeapon* W )
{
	static UFunction* pFnGetWeaponRatingFor = NULL;

	if ( ! pFnGetWeaponRatingFor )
		pFnGetWeaponRatingFor = (UFunction*) UObject::GObjObjects()->Data[ 23972 ];

	AInventoryManager_execGetWeaponRatingFor_Parms GetWeaponRatingFor_Parms;
	GetWeaponRatingFor_Parms.W = W;

	this->ProcessEvent ( pFnGetWeaponRatingFor, &GetWeaponRatingFor_Parms, NULL );

	return GetWeaponRatingFor_Parms.ReturnValue;
};

// Function Engine.InventoryManager.DrawHUD
// [0x00020100] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void AInventoryManager::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 23970 ];

	AInventoryManager_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.InventoryManager.OwnerDied
// [0x00020002] 
// Parameters infos:

void AInventoryManager::OwnerDied ( )
{
	static UFunction* pFnOwnerDied = NULL;

	if ( ! pFnOwnerDied )
		pFnOwnerDied = (UFunction*) UObject::GObjObjects()->Data[ 23969 ];

	AInventoryManager_execOwnerDied_Parms OwnerDied_Parms;

	this->ProcessEvent ( pFnOwnerDied, &OwnerDied_Parms, NULL );
};

// Function Engine.InventoryManager.DiscardInventory
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDiscardInventory ( )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = (UFunction*) UObject::GObjObjects()->Data[ 23963 ];

	AInventoryManager_eventDiscardInventory_Parms DiscardInventory_Parms;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function Engine.InventoryManager.RemoveFromInventory
// [0x00020102] 
// Parameters infos:
// class AInventory*              ItemToRemove                   ( CPF_Parm )

void AInventoryManager::RemoveFromInventory ( class AInventory* ItemToRemove )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = (UFunction*) UObject::GObjObjects()->Data[ 23959 ];

	AInventoryManager_execRemoveFromInventory_Parms RemoveFromInventory_Parms;
	RemoveFromInventory_Parms.ItemToRemove = ItemToRemove;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );
};

// Function Engine.InventoryManager.AddInventory
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventory*              NewItem                        ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

bool AInventoryManager::AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 23889 ];

	AInventoryManager_execAddInventory_Parms AddInventory_Parms;
	AddInventory_Parms.NewItem = NewItem;
	AddInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );

	return AddInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.CreateInventory
// [0x00024102] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInventoryItemClass          ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 23950 ];

	AInventoryManager_execCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInventoryItemClass = NewInventoryItemClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.InventoryManager.FindInventoryType
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* AInventoryManager::eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = (UFunction*) UObject::GObjObjects()->Data[ 23945 ];

	AInventoryManager_eventFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.InventoryManager.HandlePickupQuery
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ItemClass                      ( CPF_Parm )
// class AActor*                  Pickup                         ( CPF_Parm )

bool AInventoryManager::HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup )
{
	static UFunction* pFnHandlePickupQuery = NULL;

	if ( ! pFnHandlePickupQuery )
		pFnHandlePickupQuery = (UFunction*) UObject::GObjObjects()->Data[ 21509 ];

	AInventoryManager_execHandlePickupQuery_Parms HandlePickupQuery_Parms;
	HandlePickupQuery_Parms.ItemClass = ItemClass;
	HandlePickupQuery_Parms.Pickup = Pickup;

	this->ProcessEvent ( pFnHandlePickupQuery, &HandlePickupQuery_Parms, NULL );

	return HandlePickupQuery_Parms.ReturnValue;
};

// Function Engine.InventoryManager.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 23941 ];

	AInventoryManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.InventoryManager.SetupFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AInventoryManager::SetupFor ( class APawn* P )
{
	static UFunction* pFnSetupFor = NULL;

	if ( ! pFnSetupFor )
		pFnSetupFor = (UFunction*) UObject::GObjObjects()->Data[ 23939 ];

	AInventoryManager_execSetupFor_Parms SetupFor_Parms;
	SetupFor_Parms.P = P;

	this->ProcessEvent ( pFnSetupFor, &SetupFor_Parms, NULL );
};

// Function Engine.InventoryManager.InventoryActors
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class AInventory*              Inv                            ( CPF_Parm | CPF_OutParm )

void AInventoryManager::InventoryActors ( class UClass* BaseClass, class AInventory** Inv )
{
	static UFunction* pFnInventoryActors = NULL;

	if ( ! pFnInventoryActors )
		pFnInventoryActors = (UFunction*) UObject::GObjObjects()->Data[ 23936 ];

	AInventoryManager_execInventoryActors_Parms InventoryActors_Parms;
	InventoryActors_Parms.BaseClass = BaseClass;

	pFnInventoryActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInventoryActors, &InventoryActors_Parms, NULL );

	pFnInventoryActors->FunctionFlags |= 0x400;

	if ( Inv )
		*Inv = InventoryActors_Parms.Inv;
};

// Function Engine.InventoryManager.ClearAllPendingFire
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )

void AInventoryManager::ClearAllPendingFire ( class AWeapon* InWeapon )
{
	static UFunction* pFnClearAllPendingFire = NULL;

	if ( ! pFnClearAllPendingFire )
		pFnClearAllPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 23933 ];

	AInventoryManager_execClearAllPendingFire_Parms ClearAllPendingFire_Parms;
	ClearAllPendingFire_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnClearAllPendingFire, &ClearAllPendingFire_Parms, NULL );
};

// Function Engine.InventoryManager.IsPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// int                            InFiringMode                   ( CPF_Parm )

bool AInventoryManager::IsPendingFire ( class AWeapon* InWeapon, int InFiringMode )
{
	static UFunction* pFnIsPendingFire = NULL;

	if ( ! pFnIsPendingFire )
		pFnIsPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 23929 ];

	AInventoryManager_execIsPendingFire_Parms IsPendingFire_Parms;
	IsPendingFire_Parms.InWeapon = InWeapon;
	IsPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnIsPendingFire, &IsPendingFire_Parms, NULL );

	return IsPendingFire_Parms.ReturnValue;
};

// Function Engine.InventoryManager.ClearPendingFire
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// int                            InFiringMode                   ( CPF_Parm )

void AInventoryManager::ClearPendingFire ( class AWeapon* InWeapon, int InFiringMode )
{
	static UFunction* pFnClearPendingFire = NULL;

	if ( ! pFnClearPendingFire )
		pFnClearPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 23926 ];

	AInventoryManager_execClearPendingFire_Parms ClearPendingFire_Parms;
	ClearPendingFire_Parms.InWeapon = InWeapon;
	ClearPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnClearPendingFire, &ClearPendingFire_Parms, NULL );
};

// Function Engine.InventoryManager.SetPendingFire
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// int                            InFiringMode                   ( CPF_Parm )

void AInventoryManager::SetPendingFire ( class AWeapon* InWeapon, int InFiringMode )
{
	static UFunction* pFnSetPendingFire = NULL;

	if ( ! pFnSetPendingFire )
		pFnSetPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 23923 ];

	AInventoryManager_execSetPendingFire_Parms SetPendingFire_Parms;
	SetPendingFire_Parms.InWeapon = InWeapon;
	SetPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnSetPendingFire, &SetPendingFire_Parms, NULL );
};

// Function Engine.InventoryManager.GetPendingFireLength
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 InWeapon                       ( CPF_Parm )

int AInventoryManager::GetPendingFireLength ( class AWeapon* InWeapon )
{
	static UFunction* pFnGetPendingFireLength = NULL;

	if ( ! pFnGetPendingFireLength )
		pFnGetPendingFireLength = (UFunction*) UObject::GObjObjects()->Data[ 23920 ];

	AInventoryManager_execGetPendingFireLength_Parms GetPendingFireLength_Parms;
	GetPendingFireLength_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnGetPendingFireLength, &GetPendingFireLength_Parms, NULL );

	return GetPendingFireLength_Parms.ReturnValue;
};

// Function Engine.InventoryManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AInventoryManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23919 ];

	AInventoryManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.MatineeActor.CheckPriorityRefresh
// [0x00020002] 
// Parameters infos:

void AMatineeActor::CheckPriorityRefresh ( )
{
	static UFunction* pFnCheckPriorityRefresh = NULL;

	if ( ! pFnCheckPriorityRefresh )
		pFnCheckPriorityRefresh = (UFunction*) UObject::GObjObjects()->Data[ 25386 ];

	AMatineeActor_execCheckPriorityRefresh_Parms CheckPriorityRefresh_Parms;

	this->ProcessEvent ( pFnCheckPriorityRefresh, &CheckPriorityRefresh_Parms, NULL );
};

// Function Engine.MatineeActor.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AMatineeActor::eventUpdate ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 25378 ];

	AMatineeActor_eventUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function Engine.MatineeActor.AddAIGroupActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroupInstAI*      AIGroupInst                    ( CPF_Parm )

void AMatineeActor::AddAIGroupActor ( class UInterpGroupInstAI* AIGroupInst )
{
	static UFunction* pFnAddAIGroupActor = NULL;

	if ( ! pFnAddAIGroupActor )
		pFnAddAIGroupActor = (UFunction*) UObject::GObjObjects()->Data[ 25376 ];

	AMatineeActor_execAddAIGroupActor_Parms AddAIGroupActor_Parms;
	AddAIGroupActor_Parms.AIGroupInst = AIGroupInst;

	pFnAddAIGroupActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAIGroupActor, &AddAIGroupActor_Parms, NULL );

	pFnAddAIGroupActor->FunctionFlags |= 0x400;
};

// Function Engine.NavigationPoint.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ANavigationPoint::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 13336 ];

	ANavigationPoint_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ANavigationPoint::ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 13334 ];

	ANavigationPoint_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.NavigationPoint.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ANavigationPoint::CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 13332 ];

	ANavigationPoint_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.NavigationPoint.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ANavigationPoint::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 13330 ];

	ANavigationPoint_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANavigationPoint::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 13329 ];

	ANavigationPoint_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.NavigationPoint.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANavigationPoint::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 13327 ];

	ANavigationPoint_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NavigationPoint.IsOnDifferentNetwork
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

bool ANavigationPoint::IsOnDifferentNetwork ( class ANavigationPoint* Nav )
{
	static UFunction* pFnIsOnDifferentNetwork = NULL;

	if ( ! pFnIsOnDifferentNetwork )
		pFnIsOnDifferentNetwork = (UFunction*) UObject::GObjObjects()->Data[ 13324 ];

	ANavigationPoint_execIsOnDifferentNetwork_Parms IsOnDifferentNetwork_Parms;
	IsOnDifferentNetwork_Parms.Nav = Nav;

	pFnIsOnDifferentNetwork->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnDifferentNetwork, &IsOnDifferentNetwork_Parms, NULL );

	pFnIsOnDifferentNetwork->FunctionFlags |= 0x400;

	return IsOnDifferentNetwork_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetAllNavInRadius
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bSkipBlocked                   ( CPF_OptionalParm | CPF_Parm )
// int                            inNetworkID                    ( CPF_OptionalParm | CPF_Parm )
// struct FCylinder               MinSize                        ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > out_NavList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ANavigationPoint::GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList )
{
	static UFunction* pFnGetAllNavInRadius = NULL;

	if ( ! pFnGetAllNavInRadius )
		pFnGetAllNavInRadius = (UFunction*) UObject::GObjObjects()->Data[ 13314 ];

	ANavigationPoint_execGetAllNavInRadius_Parms GetAllNavInRadius_Parms;
	GetAllNavInRadius_Parms.ChkActor = ChkActor;
	memcpy ( &GetAllNavInRadius_Parms.ChkPoint, &ChkPoint, 0xC );
	GetAllNavInRadius_Parms.Radius = Radius;
	GetAllNavInRadius_Parms.bSkipBlocked = bSkipBlocked;
	GetAllNavInRadius_Parms.inNetworkID = inNetworkID;
	memcpy ( &GetAllNavInRadius_Parms.MinSize, &MinSize, 0x8 );

	pFnGetAllNavInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllNavInRadius, &GetAllNavInRadius_Parms, NULL );

	pFnGetAllNavInRadius->FunctionFlags |= 0x400;

	if ( out_NavList )
		memcpy ( out_NavList, &GetAllNavInRadius_Parms.out_NavList, 0xC );

	return GetAllNavInRadius_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToPoint
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// struct FVector                 ChkPoint                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > ExcludeList                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ANavigationPoint::GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList )
{
	static UFunction* pFnGetNearestNavToPoint = NULL;

	if ( ! pFnGetNearestNavToPoint )
		pFnGetNearestNavToPoint = (UFunction*) UObject::GObjObjects()->Data[ 13303 ];

	ANavigationPoint_execGetNearestNavToPoint_Parms GetNearestNavToPoint_Parms;
	GetNearestNavToPoint_Parms.ChkActor = ChkActor;
	memcpy ( &GetNearestNavToPoint_Parms.ChkPoint, &ChkPoint, 0xC );
	GetNearestNavToPoint_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToPoint_Parms.ExcludeList, &ExcludeList, 0xC );

	this->ProcessEvent ( pFnGetNearestNavToPoint, &GetNearestNavToPoint_Parms, NULL );

	return GetNearestNavToPoint_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetNearestNavToActor
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkActor                       ( CPF_Parm )
// class UClass*                  RequiredClass                  ( CPF_OptionalParm | CPF_Parm )
// TArray< class ANavigationPoint* > ExcludeList                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// float                          MinDist                        ( CPF_OptionalParm | CPF_Parm )

class ANavigationPoint* ANavigationPoint::GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist )
{
	static UFunction* pFnGetNearestNavToActor = NULL;

	if ( ! pFnGetNearestNavToActor )
		pFnGetNearestNavToActor = (UFunction*) UObject::GObjObjects()->Data[ 13292 ];

	ANavigationPoint_execGetNearestNavToActor_Parms GetNearestNavToActor_Parms;
	GetNearestNavToActor_Parms.ChkActor = ChkActor;
	GetNearestNavToActor_Parms.RequiredClass = RequiredClass;
	memcpy ( &GetNearestNavToActor_Parms.ExcludeList, &ExcludeList, 0xC );
	GetNearestNavToActor_Parms.MinDist = MinDist;

	this->ProcessEvent ( pFnGetNearestNavToActor, &GetNearestNavToActor_Parms, NULL );

	return GetNearestNavToActor_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 9549 ];

	ANavigationPoint_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ANavigationPoint::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 13285 ];

	ANavigationPoint_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.DetourWeight
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float ANavigationPoint::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 13281 ];

	ANavigationPoint_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.Accept
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ANavigationPoint::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = (UFunction*) UObject::GObjObjects()->Data[ 13276 ];

	ANavigationPoint_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.SpecialCost
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Seeker                         ( CPF_Parm )
// class UReachSpec*              Path                           ( CPF_Parm )

int ANavigationPoint::eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path )
{
	static UFunction* pFnSpecialCost = NULL;

	if ( ! pFnSpecialCost )
		pFnSpecialCost = (UFunction*) UObject::GObjObjects()->Data[ 13272 ];

	ANavigationPoint_eventSpecialCost_Parms SpecialCost_Parms;
	SpecialCost_Parms.Seeker = Seeker;
	SpecialCost_Parms.Path = Path;

	this->ProcessEvent ( pFnSpecialCost, &SpecialCost_Parms, NULL );

	return SpecialCost_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ANavigationPoint::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 13269 ];

	ANavigationPoint_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.IsUsableAnchorFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ANavigationPoint::IsUsableAnchorFor ( class APawn* P )
{
	static UFunction* pFnIsUsableAnchorFor = NULL;

	if ( ! pFnIsUsableAnchorFor )
		pFnIsUsableAnchorFor = (UFunction*) UObject::GObjObjects()->Data[ 13266 ];

	ANavigationPoint_execIsUsableAnchorFor_Parms IsUsableAnchorFor_Parms;
	IsUsableAnchorFor_Parms.P = P;

	pFnIsUsableAnchorFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsableAnchorFor, &IsUsableAnchorFor_Parms, NULL );

	pFnIsUsableAnchorFor->FunctionFlags |= 0x400;

	return IsUsableAnchorFor_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetReachSpecTo
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UReachSpec*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// class UClass*                  SpecClass                      ( CPF_OptionalParm | CPF_Parm )

class UReachSpec* ANavigationPoint::GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass )
{
	static UFunction* pFnGetReachSpecTo = NULL;

	if ( ! pFnGetReachSpecTo )
		pFnGetReachSpecTo = (UFunction*) UObject::GObjObjects()->Data[ 13262 ];

	ANavigationPoint_execGetReachSpecTo_Parms GetReachSpecTo_Parms;
	GetReachSpecTo_Parms.Nav = Nav;
	GetReachSpecTo_Parms.SpecClass = SpecClass;

	pFnGetReachSpecTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReachSpecTo, &GetReachSpecTo_Parms, NULL );

	pFnGetReachSpecTo->FunctionFlags |= 0x400;

	return GetReachSpecTo_Parms.ReturnValue;
};

// Function Engine.NavigationPoint.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void ANavigationPoint::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 13259 ];

	ANavigationPoint_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.CoverLink.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ACoverLink::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 17514 ];

	ACoverLink_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetLocationDescription
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

unsigned char ACoverLink::GetLocationDescription ( int SlotIdx )
{
	static UFunction* pFnGetLocationDescription = NULL;

	if ( ! pFnGetLocationDescription )
		pFnGetLocationDescription = (UFunction*) UObject::GObjObjects()->Data[ 17511 ];

	ACoverLink_execGetLocationDescription_Parms GetLocationDescription_Parms;
	GetLocationDescription_Parms.SlotIdx = SlotIdx;

	pFnGetLocationDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationDescription, &GetLocationDescription_Parms, NULL );

	pFnGetLocationDescription->FunctionFlags |= 0x400;

	return GetLocationDescription_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetDebugString
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            SlotIdx                        ( CPF_Parm )

struct FString ACoverLink::eventGetDebugString ( int SlotIdx )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = (UFunction*) UObject::GObjObjects()->Data[ 17508 ];

	ACoverLink_eventGetDebugString_Parms GetDebugString_Parms;
	GetDebugString_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.CoverLink.AddCoverSlot
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SlotLocation                   ( CPF_Parm )
// struct FRotator                SlotRotation                   ( CPF_Parm )
// int                            SlotIdx                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceSlotUpdate               ( CPF_OptionalParm | CPF_Parm )
// class AScout*                  Scout                          ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate, class AScout* Scout )
{
	static UFunction* pFnAddCoverSlot = NULL;

	if ( ! pFnAddCoverSlot )
		pFnAddCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 17501 ];

	ACoverLink_execAddCoverSlot_Parms AddCoverSlot_Parms;
	memcpy ( &AddCoverSlot_Parms.SlotLocation, &SlotLocation, 0xC );
	memcpy ( &AddCoverSlot_Parms.SlotRotation, &SlotRotation, 0xC );
	AddCoverSlot_Parms.SlotIdx = SlotIdx;
	AddCoverSlot_Parms.bForceSlotUpdate = bForceSlotUpdate;
	AddCoverSlot_Parms.Scout = Scout;

	pFnAddCoverSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddCoverSlot, &AddCoverSlot_Parms, NULL );

	pFnAddCoverSlot->FunctionFlags |= 0x400;

	return AddCoverSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.BreakFracturedMeshes
// [0x00020102] 
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          RBStrength                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ACoverLink::BreakFracturedMeshes ( struct FVector Origin, float Radius, float RBStrength, class UClass* DamageType )
{
	static UFunction* pFnBreakFracturedMeshes = NULL;

	if ( ! pFnBreakFracturedMeshes )
		pFnBreakFracturedMeshes = (UFunction*) UObject::GObjObjects()->Data[ 17489 ];

	ACoverLink_execBreakFracturedMeshes_Parms BreakFracturedMeshes_Parms;
	memcpy ( &BreakFracturedMeshes_Parms.Origin, &Origin, 0xC );
	BreakFracturedMeshes_Parms.Radius = Radius;
	BreakFracturedMeshes_Parms.RBStrength = RBStrength;
	BreakFracturedMeshes_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnBreakFracturedMeshes, &BreakFracturedMeshes_Parms, NULL );
};

// Function Engine.CoverLink.GetSwatTurnTarget
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// struct FCoverInfo              out_Info                       ( CPF_Parm | CPF_OutParm )

bool ACoverLink::GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverInfo* out_Info )
{
	static UFunction* pFnGetSwatTurnTarget = NULL;

	if ( ! pFnGetSwatTurnTarget )
		pFnGetSwatTurnTarget = (UFunction*) UObject::GObjObjects()->Data[ 17484 ];

	ACoverLink_execGetSwatTurnTarget_Parms GetSwatTurnTarget_Parms;
	GetSwatTurnTarget_Parms.SlotIdx = SlotIdx;
	GetSwatTurnTarget_Parms.Direction = Direction;

	pFnGetSwatTurnTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSwatTurnTarget, &GetSwatTurnTarget_Parms, NULL );

	pFnGetSwatTurnTarget->FunctionFlags |= 0x400;

	if ( out_Info )
		memcpy ( out_Info, &GetSwatTurnTarget_Parms.out_Info, 0x8 );

	return GetSwatTurnTarget_Parms.ReturnValue;
};

// Function Engine.CoverLink.ShutDown
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ACoverLink::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 17483 ];

	ACoverLink_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.CoverLink.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACoverLink::ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 17480 ];

	ACoverLink_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.CoverLink.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavigationPoint_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ACoverLink::CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 17478 ];

	ACoverLink_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.CoverLink.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ACoverLink::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 17474 ];

	ACoverLink_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.CoverLink.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ACoverLink::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 17472 ];

	ACoverLink_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.CoverLink.AutoAdjustSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bOnlyCheckLeans                ( CPF_Parm )

bool ACoverLink::AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans )
{
	static UFunction* pFnAutoAdjustSlot = NULL;

	if ( ! pFnAutoAdjustSlot )
		pFnAutoAdjustSlot = (UFunction*) UObject::GObjObjects()->Data[ 17466 ];

	ACoverLink_execAutoAdjustSlot_Parms AutoAdjustSlot_Parms;
	AutoAdjustSlot_Parms.SlotIdx = SlotIdx;
	AutoAdjustSlot_Parms.bOnlyCheckLeans = bOnlyCheckLeans;

	pFnAutoAdjustSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAutoAdjustSlot, &AutoAdjustSlot_Parms, NULL );

	pFnAutoAdjustSlot->FunctionFlags |= 0x400;

	return AutoAdjustSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.OnModifyCover
// [0x00020002] 
// Parameters infos:
// class USeqAct_ModifyCover*     Action                         ( CPF_Parm )

void ACoverLink::OnModifyCover ( class USeqAct_ModifyCover* Action )
{
	static UFunction* pFnOnModifyCover = NULL;

	if ( ! pFnOnModifyCover )
		pFnOnModifyCover = (UFunction*) UObject::GObjObjects()->Data[ 17458 ];

	ACoverLink_execOnModifyCover_Parms OnModifyCover_Parms;
	OnModifyCover_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyCover, &OnModifyCover_Parms, NULL );
};

// Function Engine.CoverLink.SetSlotPlayerOnly
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bInPlayerOnly                  ( CPF_Parm )

void ACoverLink::eventSetSlotPlayerOnly ( int SlotIdx, unsigned long bInPlayerOnly )
{
	static UFunction* pFnSetSlotPlayerOnly = NULL;

	if ( ! pFnSetSlotPlayerOnly )
		pFnSetSlotPlayerOnly = (UFunction*) UObject::GObjObjects()->Data[ 17455 ];

	ACoverLink_eventSetSlotPlayerOnly_Parms SetSlotPlayerOnly_Parms;
	SetSlotPlayerOnly_Parms.SlotIdx = SlotIdx;
	SetSlotPlayerOnly_Parms.bInPlayerOnly = bInPlayerOnly;

	this->ProcessEvent ( pFnSetSlotPlayerOnly, &SetSlotPlayerOnly_Parms, NULL );
};

// Function Engine.CoverLink.NotifySlotOwnerCoverDisabled
// [0x00024102] 
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bAIOnly                        ( CPF_OptionalParm | CPF_Parm )

void ACoverLink::NotifySlotOwnerCoverDisabled ( int SlotIdx, unsigned long bAIOnly )
{
	static UFunction* pFnNotifySlotOwnerCoverDisabled = NULL;

	if ( ! pFnNotifySlotOwnerCoverDisabled )
		pFnNotifySlotOwnerCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 17450 ];

	ACoverLink_execNotifySlotOwnerCoverDisabled_Parms NotifySlotOwnerCoverDisabled_Parms;
	NotifySlotOwnerCoverDisabled_Parms.SlotIdx = SlotIdx;
	NotifySlotOwnerCoverDisabled_Parms.bAIOnly = bAIOnly;

	this->ProcessEvent ( pFnNotifySlotOwnerCoverDisabled, &NotifySlotOwnerCoverDisabled_Parms, NULL );
};

// Function Engine.CoverLink.SetSlotEnabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void ACoverLink::eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable )
{
	static UFunction* pFnSetSlotEnabled = NULL;

	if ( ! pFnSetSlotEnabled )
		pFnSetSlotEnabled = (UFunction*) UObject::GObjObjects()->Data[ 17447 ];

	ACoverLink_eventSetSlotEnabled_Parms SetSlotEnabled_Parms;
	SetSlotEnabled_Parms.SlotIdx = SlotIdx;
	SetSlotEnabled_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnSetSlotEnabled, &SetSlotEnabled_Parms, NULL );
};

// Function Engine.CoverLink.SetDisabled
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewDisabled                   ( CPF_Parm )

void ACoverLink::eventSetDisabled ( unsigned long bNewDisabled )
{
	static UFunction* pFnSetDisabled = NULL;

	if ( ! pFnSetDisabled )
		pFnSetDisabled = (UFunction*) UObject::GObjObjects()->Data[ 17440 ];

	ACoverLink_eventSetDisabled_Parms SetDisabled_Parms;
	SetDisabled_Parms.bNewDisabled = bNewDisabled;

	this->ProcessEvent ( pFnSetDisabled, &SetDisabled_Parms, NULL );
};

// Function Engine.CoverLink.GetSlotActions
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// TArray< unsigned char >        Actions                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverLink::GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions )
{
	static UFunction* pFnGetSlotActions = NULL;

	if ( ! pFnGetSlotActions )
		pFnGetSlotActions = (UFunction*) UObject::GObjObjects()->Data[ 17436 ];

	ACoverLink_execGetSlotActions_Parms GetSlotActions_Parms;
	GetSlotActions_Parms.SlotIdx = SlotIdx;

	pFnGetSlotActions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotActions, &GetSlotActions_Parms, NULL );

	pFnGetSlotActions->FunctionFlags |= 0x400;

	if ( Actions )
		memcpy ( Actions, &GetSlotActions_Parms.Actions, 0xC );
};

// Function Engine.CoverLink.HasFireLinkTo
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned long                  bAllowFallbackLinks            ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks )
{
	static UFunction* pFnHasFireLinkTo = NULL;

	if ( ! pFnHasFireLinkTo )
		pFnHasFireLinkTo = (UFunction*) UObject::GObjObjects()->Data[ 17431 ];

	ACoverLink_execHasFireLinkTo_Parms HasFireLinkTo_Parms;
	HasFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &HasFireLinkTo_Parms.ChkCover, &ChkCover, 0x8 );
	HasFireLinkTo_Parms.bAllowFallbackLinks = bAllowFallbackLinks;

	pFnHasFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasFireLinkTo, &HasFireLinkTo_Parms, NULL );

	pFnHasFireLinkTo->FunctionFlags |= 0x400;

	return HasFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetFireLinkTo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// unsigned char                  ChkAction                      ( CPF_Parm )
// unsigned char                  ChkType                        ( CPF_Parm )
// int                            out_FireLinkIdx                ( CPF_Parm | CPF_OutParm )
// TArray< int >                  out_Items                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ACoverLink::GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items )
{
	static UFunction* pFnGetFireLinkTo = NULL;

	if ( ! pFnGetFireLinkTo )
		pFnGetFireLinkTo = (UFunction*) UObject::GObjObjects()->Data[ 17422 ];

	ACoverLink_execGetFireLinkTo_Parms GetFireLinkTo_Parms;
	GetFireLinkTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &GetFireLinkTo_Parms.ChkCover, &ChkCover, 0x8 );
	GetFireLinkTo_Parms.ChkAction = ChkAction;
	GetFireLinkTo_Parms.ChkType = ChkType;

	pFnGetFireLinkTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireLinkTo, &GetFireLinkTo_Parms, NULL );

	pFnGetFireLinkTo->FunctionFlags |= 0x400;

	if ( out_FireLinkIdx )
		*out_FireLinkIdx = GetFireLinkTo_Parms.out_FireLinkIdx;

	if ( out_Items )
		memcpy ( out_Items, &GetFireLinkTo_Parms.out_Items, 0xC );

	return GetFireLinkTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowLeftTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowLeftTransition ( int SlotIdx )
{
	static UFunction* pFnAllowLeftTransition = NULL;

	if ( ! pFnAllowLeftTransition )
		pFnAllowLeftTransition = (UFunction*) UObject::GObjObjects()->Data[ 17418 ];

	ACoverLink_execAllowLeftTransition_Parms AllowLeftTransition_Parms;
	AllowLeftTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowLeftTransition, &AllowLeftTransition_Parms, NULL );

	return AllowLeftTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.AllowRightTransition
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::AllowRightTransition ( int SlotIdx )
{
	static UFunction* pFnAllowRightTransition = NULL;

	if ( ! pFnAllowRightTransition )
		pFnAllowRightTransition = (UFunction*) UObject::GObjObjects()->Data[ 17414 ];

	ACoverLink_execAllowRightTransition_Parms AllowRightTransition_Parms;
	AllowRightTransition_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnAllowRightTransition, &AllowRightTransition_Parms, NULL );

	return AllowRightTransition_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotIdxToRight
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::GetSlotIdxToRight ( int SlotIdx, int Cnt )
{
	static UFunction* pFnGetSlotIdxToRight = NULL;

	if ( ! pFnGetSlotIdxToRight )
		pFnGetSlotIdxToRight = (UFunction*) UObject::GObjObjects()->Data[ 17410 ];

	ACoverLink_execGetSlotIdxToRight_Parms GetSlotIdxToRight_Parms;
	GetSlotIdxToRight_Parms.SlotIdx = SlotIdx;
	GetSlotIdxToRight_Parms.Cnt = Cnt;

	pFnGetSlotIdxToRight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotIdxToRight, &GetSlotIdxToRight_Parms, NULL );

	pFnGetSlotIdxToRight->FunctionFlags |= 0x400;

	return GetSlotIdxToRight_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotIdxToLeft
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

int ACoverLink::GetSlotIdxToLeft ( int SlotIdx, int Cnt )
{
	static UFunction* pFnGetSlotIdxToLeft = NULL;

	if ( ! pFnGetSlotIdxToLeft )
		pFnGetSlotIdxToLeft = (UFunction*) UObject::GObjObjects()->Data[ 17406 ];

	ACoverLink_execGetSlotIdxToLeft_Parms GetSlotIdxToLeft_Parms;
	GetSlotIdxToLeft_Parms.SlotIdx = SlotIdx;
	GetSlotIdxToLeft_Parms.Cnt = Cnt;

	pFnGetSlotIdxToLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotIdxToLeft, &GetSlotIdxToLeft_Parms, NULL );

	pFnGetSlotIdxToLeft->FunctionFlags |= 0x400;

	return GetSlotIdxToLeft_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsRightEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsRightEdgeSlot = NULL;

	if ( ! pFnIsRightEdgeSlot )
		pFnIsRightEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 17402 ];

	ACoverLink_execIsRightEdgeSlot_Parms IsRightEdgeSlot_Parms;
	IsRightEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsRightEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsRightEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRightEdgeSlot, &IsRightEdgeSlot_Parms, NULL );

	pFnIsRightEdgeSlot->FunctionFlags |= 0x400;

	return IsRightEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsLeftEdgeSlot
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_Parm )

bool ACoverLink::IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsLeftEdgeSlot = NULL;

	if ( ! pFnIsLeftEdgeSlot )
		pFnIsLeftEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 17398 ];

	ACoverLink_execIsLeftEdgeSlot_Parms IsLeftEdgeSlot_Parms;
	IsLeftEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsLeftEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsLeftEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLeftEdgeSlot, &IsLeftEdgeSlot_Parms, NULL );

	pFnIsLeftEdgeSlot->FunctionFlags |= 0x400;

	return IsLeftEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsEdgeSlot
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bIgnoreLeans                   ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans )
{
	static UFunction* pFnIsEdgeSlot = NULL;

	if ( ! pFnIsEdgeSlot )
		pFnIsEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 17388 ];

	ACoverLink_execIsEdgeSlot_Parms IsEdgeSlot_Parms;
	IsEdgeSlot_Parms.SlotIdx = SlotIdx;
	IsEdgeSlot_Parms.bIgnoreLeans = bIgnoreLeans;

	pFnIsEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEdgeSlot, &IsEdgeSlot_Parms, NULL );

	pFnIsEdgeSlot->FunctionFlags |= 0x400;

	return IsEdgeSlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.FindSlots
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CheckLocation                  ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// int                            LeftSlotIdx                    ( CPF_Parm | CPF_OutParm )
// int                            RightSlotIdx                   ( CPF_Parm | CPF_OutParm )

bool ACoverLink::FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx )
{
	static UFunction* pFnFindSlots = NULL;

	if ( ! pFnFindSlots )
		pFnFindSlots = (UFunction*) UObject::GObjObjects()->Data[ 17389 ];

	ACoverLink_execFindSlots_Parms FindSlots_Parms;
	memcpy ( &FindSlots_Parms.CheckLocation, &CheckLocation, 0xC );
	FindSlots_Parms.MaxDistance = MaxDistance;

	pFnFindSlots->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSlots, &FindSlots_Parms, NULL );

	pFnFindSlots->FunctionFlags |= 0x400;

	if ( LeftSlotIdx )
		*LeftSlotIdx = FindSlots_Parms.LeftSlotIdx;

	if ( RightSlotIdx )
		*RightSlotIdx = FindSlots_Parms.RightSlotIdx;

	return FindSlots_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsStationarySlot
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::IsStationarySlot ( int SlotIdx )
{
	static UFunction* pFnIsStationarySlot = NULL;

	if ( ! pFnIsStationarySlot )
		pFnIsStationarySlot = (UFunction*) UObject::GObjObjects()->Data[ 17384 ];

	ACoverLink_execIsStationarySlot_Parms IsStationarySlot_Parms;
	IsStationarySlot_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnIsStationarySlot, &IsStationarySlot_Parms, NULL );

	return IsStationarySlot_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsValidClaimBetween
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// int                            StartSlotIdx                   ( CPF_Parm )
// int                            EndSlotIdx                     ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsValidClaimBetween ( class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaimBetween = NULL;

	if ( ! pFnIsValidClaimBetween )
		pFnIsValidClaimBetween = (UFunction*) UObject::GObjObjects()->Data[ 17377 ];

	ACoverLink_execIsValidClaimBetween_Parms IsValidClaimBetween_Parms;
	IsValidClaimBetween_Parms.ChkClaim = ChkClaim;
	IsValidClaimBetween_Parms.StartSlotIdx = StartSlotIdx;
	IsValidClaimBetween_Parms.EndSlotIdx = EndSlotIdx;
	IsValidClaimBetween_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaimBetween_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaimBetween->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaimBetween, &IsValidClaimBetween_Parms, NULL );

	pFnIsValidClaimBetween->FunctionFlags |= 0x400;

	return IsValidClaimBetween_Parms.ReturnValue;
};

// Function Engine.CoverLink.IsValidClaim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bSkipTeamCheck                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverlapCheck              ( CPF_OptionalParm | CPF_Parm )

bool ACoverLink::IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck )
{
	static UFunction* pFnIsValidClaim = NULL;

	if ( ! pFnIsValidClaim )
		pFnIsValidClaim = (UFunction*) UObject::GObjObjects()->Data[ 17371 ];

	ACoverLink_execIsValidClaim_Parms IsValidClaim_Parms;
	IsValidClaim_Parms.ChkClaim = ChkClaim;
	IsValidClaim_Parms.SlotIdx = SlotIdx;
	IsValidClaim_Parms.bSkipTeamCheck = bSkipTeamCheck;
	IsValidClaim_Parms.bSkipOverlapCheck = bSkipOverlapCheck;

	pFnIsValidClaim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidClaim, &IsValidClaim_Parms, NULL );

	pFnIsValidClaim->FunctionFlags |= 0x400;

	return IsValidClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.UnClaim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   OldClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bUnclaimAll                    ( CPF_Parm )

bool ACoverLink::eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll )
{
	static UFunction* pFnUnClaim = NULL;

	if ( ! pFnUnClaim )
		pFnUnClaim = (UFunction*) UObject::GObjObjects()->Data[ 17363 ];

	ACoverLink_eventUnClaim_Parms UnClaim_Parms;
	UnClaim_Parms.OldClaim = OldClaim;
	UnClaim_Parms.SlotIdx = SlotIdx;
	UnClaim_Parms.bUnclaimAll = bUnclaimAll;

	this->ProcessEvent ( pFnUnClaim, &UnClaim_Parms, NULL );

	return UnClaim_Parms.ReturnValue;
};

// Function Engine.CoverLink.Claim
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NewClaim                       ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool ACoverLink::eventClaim ( class APawn* NewClaim, int SlotIdx )
{
	static UFunction* pFnClaim = NULL;

	if ( ! pFnClaim )
		pFnClaim = (UFunction*) UObject::GObjObjects()->Data[ 17352 ];

	ACoverLink_eventClaim_Parms Claim_Parms;
	Claim_Parms.NewClaim = NewClaim;
	Claim_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnClaim, &Claim_Parms, NULL );

	return Claim_Parms.ReturnValue;
};

// Function Engine.CoverLink.SetInvalidUntil
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// float                          TimeToBecomeValid              ( CPF_Parm )

void ACoverLink::eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid )
{
	static UFunction* pFnSetInvalidUntil = NULL;

	if ( ! pFnSetInvalidUntil )
		pFnSetInvalidUntil = (UFunction*) UObject::GObjObjects()->Data[ 17348 ];

	ACoverLink_eventSetInvalidUntil_Parms SetInvalidUntil_Parms;
	SetInvalidUntil_Parms.SlotIdx = SlotIdx;
	SetInvalidUntil_Parms.TimeToBecomeValid = TimeToBecomeValid;

	this->ProcessEvent ( pFnSetInvalidUntil, &SetInvalidUntil_Parms, NULL );
};

// Function Engine.CoverLink.IsExposedTo
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FCoverInfo              ChkSlot                        ( CPF_Parm )
// float                          out_ExposedScale               ( CPF_Parm | CPF_OutParm )

bool ACoverLink::IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale )
{
	static UFunction* pFnIsExposedTo = NULL;

	if ( ! pFnIsExposedTo )
		pFnIsExposedTo = (UFunction*) UObject::GObjObjects()->Data[ 17343 ];

	ACoverLink_execIsExposedTo_Parms IsExposedTo_Parms;
	IsExposedTo_Parms.SlotIdx = SlotIdx;
	memcpy ( &IsExposedTo_Parms.ChkSlot, &ChkSlot, 0x8 );

	pFnIsExposedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExposedTo, &IsExposedTo_Parms, NULL );

	pFnIsExposedTo->FunctionFlags |= 0x400;

	if ( out_ExposedScale )
		*out_ExposedScale = IsExposedTo_Parms.out_ExposedScale;

	return IsExposedTo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotViewPoint
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned char                  Type                           ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Action                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action )
{
	static UFunction* pFnGetSlotViewPoint = NULL;

	if ( ! pFnGetSlotViewPoint )
		pFnGetSlotViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 17338 ];

	ACoverLink_execGetSlotViewPoint_Parms GetSlotViewPoint_Parms;
	GetSlotViewPoint_Parms.SlotIdx = SlotIdx;
	GetSlotViewPoint_Parms.Type = Type;
	GetSlotViewPoint_Parms.Action = Action;

	pFnGetSlotViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotViewPoint, &GetSlotViewPoint_Parms, NULL );

	pFnGetSlotViewPoint->FunctionFlags |= 0x400;

	return GetSlotViewPoint_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotRotation
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FRotator ACoverLink::GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotRotation = NULL;

	if ( ! pFnGetSlotRotation )
		pFnGetSlotRotation = (UFunction*) UObject::GObjObjects()->Data[ 17334 ];

	ACoverLink_execGetSlotRotation_Parms GetSlotRotation_Parms;
	GetSlotRotation_Parms.SlotIdx = SlotIdx;
	GetSlotRotation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotRotation, &GetSlotRotation_Parms, NULL );

	pFnGetSlotRotation->FunctionFlags |= 0x400;

	return GetSlotRotation_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetSlotLocation
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bForceUseOffset                ( CPF_OptionalParm | CPF_Parm )

struct FVector ACoverLink::GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset )
{
	static UFunction* pFnGetSlotLocation = NULL;

	if ( ! pFnGetSlotLocation )
		pFnGetSlotLocation = (UFunction*) UObject::GObjObjects()->Data[ 17330 ];

	ACoverLink_execGetSlotLocation_Parms GetSlotLocation_Parms;
	GetSlotLocation_Parms.SlotIdx = SlotIdx;
	GetSlotLocation_Parms.bForceUseOffset = bForceUseOffset;

	pFnGetSlotLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSlotLocation, &GetSlotLocation_Parms, NULL );

	pFnGetSlotLocation->FunctionFlags |= 0x400;

	return GetSlotLocation_Parms.ReturnValue;
};

// Function Engine.CoverLink.UnPackFireLinkInteractionInfo
// [0x00422500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  PackedByte                     ( CPF_Const | CPF_Parm )
// unsigned char                  SrcType                        ( CPF_Parm | CPF_OutParm )
// unsigned char                  SrcAction                      ( CPF_Parm | CPF_OutParm )
// unsigned char                  DestType                       ( CPF_Parm | CPF_OutParm )
// unsigned char                  DestAction                     ( CPF_Parm | CPF_OutParm )

void ACoverLink::UnPackFireLinkInteractionInfo ( unsigned char PackedByte, unsigned char* SrcType, unsigned char* SrcAction, unsigned char* DestType, unsigned char* DestAction )
{
	static UFunction* pFnUnPackFireLinkInteractionInfo = NULL;

	if ( ! pFnUnPackFireLinkInteractionInfo )
		pFnUnPackFireLinkInteractionInfo = (UFunction*) UObject::GObjObjects()->Data[ 17324 ];

	ACoverLink_execUnPackFireLinkInteractionInfo_Parms UnPackFireLinkInteractionInfo_Parms;
	UnPackFireLinkInteractionInfo_Parms.PackedByte = PackedByte;

	pFnUnPackFireLinkInteractionInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnPackFireLinkInteractionInfo, &UnPackFireLinkInteractionInfo_Parms, NULL );

	pFnUnPackFireLinkInteractionInfo->FunctionFlags |= 0x400;

	if ( SrcType )
		*SrcType = UnPackFireLinkInteractionInfo_Parms.SrcType;

	if ( SrcAction )
		*SrcAction = UnPackFireLinkInteractionInfo_Parms.SrcAction;

	if ( DestType )
		*DestType = UnPackFireLinkInteractionInfo_Parms.DestType;

	if ( DestAction )
		*DestAction = UnPackFireLinkInteractionInfo_Parms.DestAction;
};

// Function Engine.CoverLink.PackFireLinkInteractionInfo
// [0x00022500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SrcType                        ( CPF_Parm )
// unsigned char                  SrcAction                      ( CPF_Parm )
// unsigned char                  DestType                       ( CPF_Parm )
// unsigned char                  DestAction                     ( CPF_Parm )

unsigned char ACoverLink::PackFireLinkInteractionInfo ( unsigned char SrcType, unsigned char SrcAction, unsigned char DestType, unsigned char DestAction )
{
	static UFunction* pFnPackFireLinkInteractionInfo = NULL;

	if ( ! pFnPackFireLinkInteractionInfo )
		pFnPackFireLinkInteractionInfo = (UFunction*) UObject::GObjObjects()->Data[ 17318 ];

	ACoverLink_execPackFireLinkInteractionInfo_Parms PackFireLinkInteractionInfo_Parms;
	PackFireLinkInteractionInfo_Parms.SrcType = SrcType;
	PackFireLinkInteractionInfo_Parms.SrcAction = SrcAction;
	PackFireLinkInteractionInfo_Parms.DestType = DestType;
	PackFireLinkInteractionInfo_Parms.DestAction = DestAction;

	pFnPackFireLinkInteractionInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPackFireLinkInteractionInfo, &PackFireLinkInteractionInfo_Parms, NULL );

	pFnPackFireLinkInteractionInfo->FunctionFlags |= 0x400;

	return PackFireLinkInteractionInfo_Parms.ReturnValue;
};

// Function Engine.CoverLink.GetFireLinkTargetCoverInfo
// [0x00424500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            FireLinkIdx                    ( CPF_Parm )
// unsigned char                  ArrayID                        ( CPF_OptionalParm | CPF_Parm )
// struct FCoverInfo              out_Info                       ( CPF_Parm | CPF_OutParm )

bool ACoverLink::GetFireLinkTargetCoverInfo ( int SlotIdx, int FireLinkIdx, unsigned char ArrayID, struct FCoverInfo* out_Info )
{
	static UFunction* pFnGetFireLinkTargetCoverInfo = NULL;

	if ( ! pFnGetFireLinkTargetCoverInfo )
		pFnGetFireLinkTargetCoverInfo = (UFunction*) UObject::GObjObjects()->Data[ 17312 ];

	ACoverLink_execGetFireLinkTargetCoverInfo_Parms GetFireLinkTargetCoverInfo_Parms;
	GetFireLinkTargetCoverInfo_Parms.SlotIdx = SlotIdx;
	GetFireLinkTargetCoverInfo_Parms.FireLinkIdx = FireLinkIdx;
	GetFireLinkTargetCoverInfo_Parms.ArrayID = ArrayID;

	pFnGetFireLinkTargetCoverInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireLinkTargetCoverInfo, &GetFireLinkTargetCoverInfo_Parms, NULL );

	pFnGetFireLinkTargetCoverInfo->FunctionFlags |= 0x400;

	if ( out_Info )
		memcpy ( out_Info, &GetFireLinkTargetCoverInfo_Parms.out_Info, 0x8 );

	return GetFireLinkTargetCoverInfo_Parms.ReturnValue;
};

// Function Engine.DoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 18656 ];

	ADoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.DoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ADoorMarker::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 18653 ];

	ADoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.DoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ADoorMarker::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 18649 ];

	ADoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.DoorMarker.MoverClosed
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverClosed ( )
{
	static UFunction* pFnMoverClosed = NULL;

	if ( ! pFnMoverClosed )
		pFnMoverClosed = (UFunction*) UObject::GObjObjects()->Data[ 18648 ];

	ADoorMarker_execMoverClosed_Parms MoverClosed_Parms;

	this->ProcessEvent ( pFnMoverClosed, &MoverClosed_Parms, NULL );
};

// Function Engine.DoorMarker.MoverOpened
// [0x00020002] 
// Parameters infos:

void ADoorMarker::MoverOpened ( )
{
	static UFunction* pFnMoverOpened = NULL;

	if ( ! pFnMoverOpened )
		pFnMoverOpened = (UFunction*) UObject::GObjObjects()->Data[ 18647 ];

	ADoorMarker_execMoverOpened_Parms MoverOpened_Parms;

	this->ProcessEvent ( pFnMoverOpened, &MoverOpened_Parms, NULL );
};

// Function Engine.DoorMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADoorMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18646 ];

	ADoorMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Ladder.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALadder::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 15523 ];

	ALadder_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftCenter.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 24760 ];

	ALiftCenter_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftCenter::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 24757 ];

	ALiftCenter_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftCenter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ALiftCenter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 24753 ];

	ALiftCenter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.LiftCenter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ALiftCenter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24752 ];

	ALiftCenter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LiftExit.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 24773 ];

	ALiftExit_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.LiftExit.WaitForLift
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void ALiftExit::WaitForLift ( class APawn* Other )
{
	static UFunction* pFnWaitForLift = NULL;

	if ( ! pFnWaitForLift )
		pFnWaitForLift = (UFunction*) UObject::GObjObjects()->Data[ 24771 ];

	ALiftExit_execWaitForLift_Parms WaitForLift_Parms;
	WaitForLift_Parms.Other = Other;

	this->ProcessEvent ( pFnWaitForLift, &WaitForLift_Parms, NULL );
};

// Function Engine.LiftExit.CanBeReachedFromLiftBy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ALiftExit::CanBeReachedFromLiftBy ( class APawn* Other )
{
	static UFunction* pFnCanBeReachedFromLiftBy = NULL;

	if ( ! pFnCanBeReachedFromLiftBy )
		pFnCanBeReachedFromLiftBy = (UFunction*) UObject::GObjObjects()->Data[ 24763 ];

	ALiftExit_execCanBeReachedFromLiftBy_Parms CanBeReachedFromLiftBy_Parms;
	CanBeReachedFromLiftBy_Parms.Other = Other;

	this->ProcessEvent ( pFnCanBeReachedFromLiftBy, &CanBeReachedFromLiftBy_Parms, NULL );

	return CanBeReachedFromLiftBy_Parms.ReturnValue;
};

// Function Engine.PathNode.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APathNode::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 30698 ];

	APathNode_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.PickupFactory.DelayRespawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::DelayRespawn ( )
{
	static UFunction* pFnDelayRespawn = NULL;

	if ( ! pFnDelayRespawn )
		pFnDelayRespawn = (UFunction*) UObject::GObjObjects()->Data[ 31221 ];

	APickupFactory_execDelayRespawn_Parms DelayRespawn_Parms;

	this->ProcessEvent ( pFnDelayRespawn, &DelayRespawn_Parms, NULL );

	return DelayRespawn_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 31211 ];

	APickupFactory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupVisible
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupVisible ( )
{
	static UFunction* pFnSetPickupVisible = NULL;

	if ( ! pFnSetPickupVisible )
		pFnSetPickupVisible = (UFunction*) UObject::GObjObjects()->Data[ 31210 ];

	APickupFactory_execSetPickupVisible_Parms SetPickupVisible_Parms;

	this->ProcessEvent ( pFnSetPickupVisible, &SetPickupVisible_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupHidden
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupHidden ( )
{
	static UFunction* pFnSetPickupHidden = NULL;

	if ( ! pFnSetPickupHidden )
		pFnSetPickupHidden = (UFunction*) UObject::GObjObjects()->Data[ 31209 ];

	APickupFactory_execSetPickupHidden_Parms SetPickupHidden_Parms;

	this->ProcessEvent ( pFnSetPickupHidden, &SetPickupHidden_Parms, NULL );
};

// Function Engine.PickupFactory.RespawnEffect
// [0x00020000] 
// Parameters infos:

void APickupFactory::RespawnEffect ( )
{
	static UFunction* pFnRespawnEffect = NULL;

	if ( ! pFnRespawnEffect )
		pFnRespawnEffect = (UFunction*) UObject::GObjObjects()->Data[ 31208 ];

	APickupFactory_execRespawnEffect_Parms RespawnEffect_Parms;

	this->ProcessEvent ( pFnRespawnEffect, &RespawnEffect_Parms, NULL );
};

// Function Engine.PickupFactory.GetRespawnTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APickupFactory::GetRespawnTime ( )
{
	static UFunction* pFnGetRespawnTime = NULL;

	if ( ! pFnGetRespawnTime )
		pFnGetRespawnTime = (UFunction*) UObject::GObjObjects()->Data[ 31206 ];

	APickupFactory_execGetRespawnTime_Parms GetRespawnTime_Parms;

	this->ProcessEvent ( pFnGetRespawnTime, &GetRespawnTime_Parms, NULL );

	return GetRespawnTime_Parms.ReturnValue;
};

// Function Engine.PickupFactory.RecheckValidTouch
// [0x00020000] 
// Parameters infos:

void APickupFactory::RecheckValidTouch ( )
{
	static UFunction* pFnRecheckValidTouch = NULL;

	if ( ! pFnRecheckValidTouch )
		pFnRecheckValidTouch = (UFunction*) UObject::GObjObjects()->Data[ 31183 ];

	APickupFactory_execRecheckValidTouch_Parms RecheckValidTouch_Parms;

	this->ProcessEvent ( pFnRecheckValidTouch, &RecheckValidTouch_Parms, NULL );
};

// Function Engine.PickupFactory.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 31180 ];

	APickupFactory_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function Engine.PickupFactory.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APickupFactory::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 31178 ];

	APickupFactory_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function Engine.PickupFactory.ReadyToPickup
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxWait                        ( CPF_Parm )

bool APickupFactory::ReadyToPickup ( float MaxWait )
{
	static UFunction* pFnReadyToPickup = NULL;

	if ( ! pFnReadyToPickup )
		pFnReadyToPickup = (UFunction*) UObject::GObjObjects()->Data[ 31175 ];

	APickupFactory_execReadyToPickup_Parms ReadyToPickup_Parms;
	ReadyToPickup_Parms.MaxWait = MaxWait;

	this->ProcessEvent ( pFnReadyToPickup, &ReadyToPickup_Parms, NULL );

	return ReadyToPickup_Parms.ReturnValue;
};

// Function Engine.PickupFactory.SpawnCopyFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   Recipient                      ( CPF_Parm )

void APickupFactory::SpawnCopyFor ( class APawn* Recipient )
{
	static UFunction* pFnSpawnCopyFor = NULL;

	if ( ! pFnSpawnCopyFor )
		pFnSpawnCopyFor = (UFunction*) UObject::GObjObjects()->Data[ 31172 ];

	APickupFactory_execSpawnCopyFor_Parms SpawnCopyFor_Parms;
	SpawnCopyFor_Parms.Recipient = Recipient;

	this->ProcessEvent ( pFnSpawnCopyFor, &SpawnCopyFor_Parms, NULL );
};

// Function Engine.PickupFactory.DetourWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )
// float                          PathWeight                     ( CPF_Parm )

float APickupFactory::eventDetourWeight ( class APawn* Other, float PathWeight )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = (UFunction*) UObject::GObjObjects()->Data[ 31168 ];

	APickupFactory_eventDetourWeight_Parms DetourWeight_Parms;
	DetourWeight_Parms.Other = Other;
	DetourWeight_Parms.PathWeight = PathWeight;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );

	return DetourWeight_Parms.ReturnValue;
};

// Function Engine.PickupFactory.StartSleeping
// [0x00020002] 
// Parameters infos:

void APickupFactory::StartSleeping ( )
{
	static UFunction* pFnStartSleeping = NULL;

	if ( ! pFnStartSleeping )
		pFnStartSleeping = (UFunction*) UObject::GObjObjects()->Data[ 31167 ];

	APickupFactory_execStartSleeping_Parms StartSleeping_Parms;

	this->ProcessEvent ( pFnStartSleeping, &StartSleeping_Parms, NULL );
};

// Function Engine.PickupFactory.SetRespawn
// [0x00020002] 
// Parameters infos:

void APickupFactory::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = (UFunction*) UObject::GObjObjects()->Data[ 31166 ];

	APickupFactory_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function Engine.PickupFactory.CheckForErrors
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APickupFactory::CheckForErrors ( )
{
	static UFunction* pFnCheckForErrors = NULL;

	if ( ! pFnCheckForErrors )
		pFnCheckForErrors = (UFunction*) UObject::GObjObjects()->Data[ 31161 ];

	APickupFactory_execCheckForErrors_Parms CheckForErrors_Parms;

	this->ProcessEvent ( pFnCheckForErrors, &CheckForErrors_Parms, NULL );

	return CheckForErrors_Parms.ReturnValue;
};

// Function Engine.PickupFactory.Reset
// [0x00020002] 
// Parameters infos:

void APickupFactory::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 31160 ];

	APickupFactory_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PickupFactory.SetPickupMesh
// [0x00020102] 
// Parameters infos:

void APickupFactory::SetPickupMesh ( )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 31159 ];

	APickupFactory_execSetPickupMesh_Parms SetPickupMesh_Parms;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function Engine.PickupFactory.ShutDown
// [0x00020102] 
// Parameters infos:

void APickupFactory::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 31158 ];

	APickupFactory_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.PickupFactory.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 31157 ];

	APickupFactory_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function Engine.PickupFactory.InitializePickup
// [0x00020102] 
// Parameters infos:

void APickupFactory::InitializePickup ( )
{
	static UFunction* pFnInitializePickup = NULL;

	if ( ! pFnInitializePickup )
		pFnInitializePickup = (UFunction*) UObject::GObjObjects()->Data[ 31156 ];

	APickupFactory_execInitializePickup_Parms InitializePickup_Parms;

	this->ProcessEvent ( pFnInitializePickup, &InitializePickup_Parms, NULL );
};

// Function Engine.PickupFactory.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APickupFactory::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31155 ];

	APickupFactory_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.PickupFactory.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APickupFactory::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 31153 ];

	APickupFactory_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerStart.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FVector                 CameraPosition                 ( CPF_Parm )
// struct FVector                 CameraDir                      ( CPF_Parm )

void APlayerStart::eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = (UFunction*) UObject::GObjObjects()->Data[ 31463 ];

	APlayerStart_eventPostRenderFor_Parms PostRenderFor_Parms;
	PostRenderFor_Parms.PC = PC;
	PostRenderFor_Parms.Canvas = Canvas;
	memcpy ( &PostRenderFor_Parms.CameraPosition, &CameraPosition, 0xC );
	memcpy ( &PostRenderFor_Parms.CameraDir, &CameraDir, 0xC );

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function Engine.PlayerStart.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APlayerStart::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 31461 ];

	APlayerStart_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PortalMarker.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalMarker::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 31490 ];

	APortalMarker_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.Pylon.CanReachPylon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APylon*                  DestPylon                      ( CPF_Parm )
// class AController*             C                              ( CPF_Parm )

bool APylon::CanReachPylon ( class APylon* DestPylon, class AController* C )
{
	static UFunction* pFnCanReachPylon = NULL;

	if ( ! pFnCanReachPylon )
		pFnCanReachPylon = (UFunction*) UObject::GObjObjects()->Data[ 13474 ];

	APylon_execCanReachPylon_Parms CanReachPylon_Parms;
	CanReachPylon_Parms.DestPylon = DestPylon;
	CanReachPylon_Parms.C = C;

	pFnCanReachPylon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanReachPylon, &CanReachPylon_Parms, NULL );

	pFnCanReachPylon->FunctionFlags |= 0x400;

	return CanReachPylon_Parms.ReturnValue;
};

// Function Engine.Pylon.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void APylon::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 13472 ];

	APylon_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Pylon.IsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APylon::eventIsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13470 ];

	APylon_eventIsEnabled_Parms IsEnabled_Parms;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.Pylon.SetEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void APylon::eventSetEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13468 ];

	APylon_eventSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Engine.Pylon.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void APylon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13467 ];

	APylon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pylon.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APylon::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 13466 ];

	APylon_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.Pylon.VerifyTopLevelConnections
// [0x00020002] 
// Parameters infos:

void APylon::VerifyTopLevelConnections ( )
{
	static UFunction* pFnVerifyTopLevelConnections = NULL;

	if ( ! pFnVerifyTopLevelConnections )
		pFnVerifyTopLevelConnections = (UFunction*) UObject::GObjObjects()->Data[ 13450 ];

	APylon_execVerifyTopLevelConnections_Parms VerifyTopLevelConnections_Parms;

	this->ProcessEvent ( pFnVerifyTopLevelConnections, &VerifyTopLevelConnections_Parms, NULL );
};

// Function Engine.Pylon.GetTestPathExtent
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APylon::GetTestPathExtent ( )
{
	static UFunction* pFnGetTestPathExtent = NULL;

	if ( ! pFnGetTestPathExtent )
		pFnGetTestPathExtent = (UFunction*) UObject::GObjObjects()->Data[ 13441 ];

	APylon_execGetTestPathExtent_Parms GetTestPathExtent_Parms;

	this->ProcessEvent ( pFnGetTestPathExtent, &GetTestPathExtent_Parms, NULL );

	return GetTestPathExtent_Parms.ReturnValue;
};

// Function Engine.Pylon.FlushDynamicEdges
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APylon::FlushDynamicEdges ( )
{
	static UFunction* pFnFlushDynamicEdges = NULL;

	if ( ! pFnFlushDynamicEdges )
		pFnFlushDynamicEdges = (UFunction*) UObject::GObjObjects()->Data[ 13440 ];

	APylon_execFlushDynamicEdges_Parms FlushDynamicEdges_Parms;

	pFnFlushDynamicEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushDynamicEdges, &FlushDynamicEdges_Parms, NULL );

	pFnFlushDynamicEdges->FunctionFlags |= 0x400;
};

// Function Engine.Pylon.UpdateMeshForPreExistingNavMeshObstacles
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APylon::UpdateMeshForPreExistingNavMeshObstacles ( )
{
	static UFunction* pFnUpdateMeshForPreExistingNavMeshObstacles = NULL;

	if ( ! pFnUpdateMeshForPreExistingNavMeshObstacles )
		pFnUpdateMeshForPreExistingNavMeshObstacles = (UFunction*) UObject::GObjObjects()->Data[ 13439 ];

	APylon_execUpdateMeshForPreExistingNavMeshObstacles_Parms UpdateMeshForPreExistingNavMeshObstacles_Parms;

	pFnUpdateMeshForPreExistingNavMeshObstacles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMeshForPreExistingNavMeshObstacles, &UpdateMeshForPreExistingNavMeshObstacles_Parms, NULL );

	pFnUpdateMeshForPreExistingNavMeshObstacles->FunctionFlags |= 0x400;
};

// Function Engine.Pylon.OnPylonStatusChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APylon::OnPylonStatusChange ( )
{
	static UFunction* pFnOnPylonStatusChange = NULL;

	if ( ! pFnOnPylonStatusChange )
		pFnOnPylonStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 13438 ];

	APylon_execOnPylonStatusChange_Parms OnPylonStatusChange_Parms;

	pFnOnPylonStatusChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnPylonStatusChange, &OnPylonStatusChange_Parms, NULL );

	pFnOnPylonStatusChange->FunctionFlags |= 0x400;
};

// Function Engine.AISwitchablePylon.IsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAISwitchablePylon::eventIsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13483 ];

	AAISwitchablePylon_eventIsEnabled_Parms IsEnabled_Parms;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.AISwitchablePylon.SetEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void AAISwitchablePylon::eventSetEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 13481 ];

	AAISwitchablePylon_eventSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Engine.AISwitchablePylon.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAISwitchablePylon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13480 ];

	AAISwitchablePylon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DynamicPylon.StoppedMoving
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicPylon::eventStoppedMoving ( )
{
	static UFunction* pFnStoppedMoving = NULL;

	if ( ! pFnStoppedMoving )
		pFnStoppedMoving = (UFunction*) UObject::GObjObjects()->Data[ 18858 ];

	ADynamicPylon_eventStoppedMoving_Parms StoppedMoving_Parms;

	this->ProcessEvent ( pFnStoppedMoving, &StoppedMoving_Parms, NULL );
};

// Function Engine.DynamicPylon.StartedMoving
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ADynamicPylon::eventStartedMoving ( )
{
	static UFunction* pFnStartedMoving = NULL;

	if ( ! pFnStartedMoving )
		pFnStartedMoving = (UFunction*) UObject::GObjObjects()->Data[ 18857 ];

	ADynamicPylon_eventStartedMoving_Parms StartedMoving_Parms;

	this->ProcessEvent ( pFnStartedMoving, &StartedMoving_Parms, NULL );
};

// Function Engine.DynamicPylon.FlushDynamicEdges
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ADynamicPylon::FlushDynamicEdges ( )
{
	static UFunction* pFnFlushDynamicEdges = NULL;

	if ( ! pFnFlushDynamicEdges )
		pFnFlushDynamicEdges = (UFunction*) UObject::GObjObjects()->Data[ 18856 ];

	ADynamicPylon_execFlushDynamicEdges_Parms FlushDynamicEdges_Parms;

	pFnFlushDynamicEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushDynamicEdges, &FlushDynamicEdges_Parms, NULL );

	pFnFlushDynamicEdges->FunctionFlags |= 0x400;
};

// Function Engine.DynamicPylon.RebuildDynamicEdges
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ADynamicPylon::RebuildDynamicEdges ( )
{
	static UFunction* pFnRebuildDynamicEdges = NULL;

	if ( ! pFnRebuildDynamicEdges )
		pFnRebuildDynamicEdges = (UFunction*) UObject::GObjObjects()->Data[ 18855 ];

	ADynamicPylon_execRebuildDynamicEdges_Parms RebuildDynamicEdges_Parms;

	pFnRebuildDynamicEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildDynamicEdges, &RebuildDynamicEdges_Parms, NULL );

	pFnRebuildDynamicEdges->FunctionFlags |= 0x400;
};

// Function Engine.DynamicPylon.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ADynamicPylon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18854 ];

	ADynamicPylon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Teleporter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATeleporter::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 34857 ];

	ATeleporter_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ATeleporter::eventPostTouch ( class AActor* Other )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = (UFunction*) UObject::GObjObjects()->Data[ 34852 ];

	ATeleporter_eventPostTouch_Parms PostTouch_Parms;
	PostTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function Engine.Teleporter.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATeleporter::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 34847 ];

	ATeleporter_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Teleporter.Accept
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Incoming                       ( CPF_Parm )
// class AActor*                  Source                         ( CPF_Parm )

bool ATeleporter::eventAccept ( class AActor* Incoming, class AActor* Source )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = (UFunction*) UObject::GObjObjects()->Data[ 34838 ];

	ATeleporter_eventAccept_Parms Accept_Parms;
	Accept_Parms.Incoming = Incoming;
	Accept_Parms.Source = Source;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );

	return Accept_Parms.ReturnValue;
};

// Function Engine.Teleporter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ATeleporter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34837 ];

	ATeleporter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Teleporter.CanTeleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ATeleporter::CanTeleport ( class AActor* A )
{
	static UFunction* pFnCanTeleport = NULL;

	if ( ! pFnCanTeleport )
		pFnCanTeleport = (UFunction*) UObject::GObjObjects()->Data[ 34834 ];

	ATeleporter_execCanTeleport_Parms CanTeleport_Parms;
	CanTeleport_Parms.A = A;

	pFnCanTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanTeleport, &CanTeleport_Parms, NULL );

	pFnCanTeleport->FunctionFlags |= 0x400;

	return CanTeleport_Parms.ReturnValue;
};

// Function Engine.Projectile.ApplyFluidSurfaceImpact
// [0x00020102] 
// Parameters infos:
// class AFluidSurfaceActor*      Fluid                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void AProjectile::ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation )
{
	static UFunction* pFnApplyFluidSurfaceImpact = NULL;

	if ( ! pFnApplyFluidSurfaceImpact )
		pFnApplyFluidSurfaceImpact = (UFunction*) UObject::GObjObjects()->Data[ 31752 ];

	AProjectile_execApplyFluidSurfaceImpact_Parms ApplyFluidSurfaceImpact_Parms;
	ApplyFluidSurfaceImpact_Parms.Fluid = Fluid;
	memcpy ( &ApplyFluidSurfaceImpact_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnApplyFluidSurfaceImpact, &ApplyFluidSurfaceImpact_Parms, NULL );
};

// Function Engine.Projectile.GetRange
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AProjectile::GetRange ( )
{
	static UFunction* pFnGetRange = NULL;

	if ( ! pFnGetRange )
		pFnGetRange = (UFunction*) UObject::GObjObjects()->Data[ 31750 ];

	AProjectile_execGetRange_Parms GetRange_Parms;

	this->ProcessEvent ( pFnGetRange, &GetRange_Parms, NULL );

	return GetRange_Parms.ReturnValue;
};

// Function Engine.Projectile.StaticGetTimeToLocation
// [0x00022102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )
// class AController*             RequestedBy                    ( CPF_Parm )

float AProjectile::StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy )
{
	static UFunction* pFnStaticGetTimeToLocation = NULL;

	if ( ! pFnStaticGetTimeToLocation )
		pFnStaticGetTimeToLocation = (UFunction*) UObject::GObjObjects()->Data[ 31745 ];

	AProjectile_execStaticGetTimeToLocation_Parms StaticGetTimeToLocation_Parms;
	memcpy ( &StaticGetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );
	memcpy ( &StaticGetTimeToLocation_Parms.StartLoc, &StartLoc, 0xC );
	StaticGetTimeToLocation_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnStaticGetTimeToLocation, &StaticGetTimeToLocation_Parms, NULL );

	return StaticGetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTimeToLocation
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TargetLoc                      ( CPF_Parm )

float AProjectile::GetTimeToLocation ( struct FVector TargetLoc )
{
	static UFunction* pFnGetTimeToLocation = NULL;

	if ( ! pFnGetTimeToLocation )
		pFnGetTimeToLocation = (UFunction*) UObject::GObjObjects()->Data[ 31742 ];

	AProjectile_execGetTimeToLocation_Parms GetTimeToLocation_Parms;
	memcpy ( &GetTimeToLocation_Parms.TargetLoc, &TargetLoc, 0xC );

	this->ProcessEvent ( pFnGetTimeToLocation, &GetTimeToLocation_Parms, NULL );

	return GetTimeToLocation_Parms.ReturnValue;
};

// Function Engine.Projectile.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AProjectile::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 31740 ];

	AProjectile_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Projectile.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 31738 ];

	AProjectile_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Projectile.RandSpin
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          spinRate                       ( CPF_Parm )

void AProjectile::RandSpin ( float spinRate )
{
	static UFunction* pFnRandSpin = NULL;

	if ( ! pFnRandSpin )
		pFnRandSpin = (UFunction*) UObject::GObjObjects()->Data[ 31736 ];

	AProjectile_execRandSpin_Parms RandSpin_Parms;
	RandSpin_Parms.spinRate = spinRate;

	this->ProcessEvent ( pFnRandSpin, &RandSpin_Parms, NULL );
};

// Function Engine.Projectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 31733 ];

	AProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.Projectile.EncroachedBy
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AProjectile::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 31731 ];

	AProjectile_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Projectile.HitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void AProjectile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 31725 ];

	AProjectile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function Engine.Projectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 31721 ];

	AProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function Engine.Projectile.Touch
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AProjectile::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 31716 ];

	AProjectile_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Projectile.HurtRadius
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DamageAmount                   ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  IgnoredActor                   ( CPF_OptionalParm | CPF_Parm )
// class AController*             InstigatedByController         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDoFullDamage                  ( CPF_OptionalParm | CPF_Parm )

bool AProjectile::HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 31704 ];

	AProjectile_execHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.DamageAmount = DamageAmount;
	HurtRadius_Parms.InDamageRadius = InDamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.IgnoredActor = IgnoredActor;
	HurtRadius_Parms.InstigatedByController = InstigatedByController;
	HurtRadius_Parms.bDoFullDamage = bDoFullDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );

	return HurtRadius_Parms.ReturnValue;
};

// Function Engine.Projectile.ProjectileHurtRadius
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AProjectile::ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 31696 ];

	AProjectile_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function Engine.Projectile.Reset
// [0x00020002] 
// Parameters infos:

void AProjectile::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 31695 ];

	AProjectile_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Projectile.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AProjectile::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 31693 ];

	AProjectile_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Projectile.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AProjectile::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 31691 ];

	AProjectile_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Projectile.Init
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void AProjectile::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 31689 ];

	AProjectile_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.Projectile.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31688 ];

	AProjectile_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AProjectile::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31687 ];

	AProjectile_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Projectile.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AProjectile::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 31684 ];

	AProjectile_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.SceneCaptureActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ASceneCaptureActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 31495 ];

	ASceneCaptureActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.PortalTeleporter.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )

bool APortalTeleporter::StopsProjectile ( class AActor* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 31558 ];

	APortalTeleporter_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.CreatePortalTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture ( )
{
	static UFunction* pFnCreatePortalTexture = NULL;

	if ( ! pFnCreatePortalTexture )
		pFnCreatePortalTexture = (UFunction*) UObject::GObjObjects()->Data[ 31556 ];

	APortalTeleporter_execCreatePortalTexture_Parms CreatePortalTexture_Parms;

	pFnCreatePortalTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePortalTexture, &CreatePortalTexture_Parms, NULL );

	pFnCreatePortalTexture->FunctionFlags |= 0x400;

	return CreatePortalTexture_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformHitLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitLocation                    ( CPF_Parm )

struct FVector APortalTeleporter::TransformHitLocation ( struct FVector HitLocation )
{
	static UFunction* pFnTransformHitLocation = NULL;

	if ( ! pFnTransformHitLocation )
		pFnTransformHitLocation = (UFunction*) UObject::GObjObjects()->Data[ 31553 ];

	APortalTeleporter_execTransformHitLocation_Parms TransformHitLocation_Parms;
	memcpy ( &TransformHitLocation_Parms.HitLocation, &HitLocation, 0xC );

	pFnTransformHitLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformHitLocation, &TransformHitLocation_Parms, NULL );

	pFnTransformHitLocation->FunctionFlags |= 0x400;

	return TransformHitLocation_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformVectorDir
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 V                              ( CPF_Parm )

struct FVector APortalTeleporter::TransformVectorDir ( struct FVector V )
{
	static UFunction* pFnTransformVectorDir = NULL;

	if ( ! pFnTransformVectorDir )
		pFnTransformVectorDir = (UFunction*) UObject::GObjObjects()->Data[ 31550 ];

	APortalTeleporter_execTransformVectorDir_Parms TransformVectorDir_Parms;
	memcpy ( &TransformVectorDir_Parms.V, &V, 0xC );

	pFnTransformVectorDir->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformVectorDir, &TransformVectorDir_Parms, NULL );

	pFnTransformVectorDir->FunctionFlags |= 0x400;

	return TransformVectorDir_Parms.ReturnValue;
};

// Function Engine.PortalTeleporter.TransformActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool APortalTeleporter::TransformActor ( class AActor* A )
{
	static UFunction* pFnTransformActor = NULL;

	if ( ! pFnTransformActor )
		pFnTransformActor = (UFunction*) UObject::GObjObjects()->Data[ 31547 ];

	APortalTeleporter_execTransformActor_Parms TransformActor_Parms;
	TransformActor_Parms.A = A;

	pFnTransformActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformActor, &TransformActor_Parms, NULL );

	pFnTransformActor->FunctionFlags |= 0x400;

	return TransformActor_Parms.ReturnValue;
};

// Function Engine.StaticMeshActor.PreBeginPlay
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AStaticMeshActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23379 ];

	AStaticMeshActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// [0x00020102] 
// Parameters infos:

void AStaticMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent ( )
{
	static UFunction* pFnSetMaterialBasedOnExtremeContent = NULL;

	if ( ! pFnSetMaterialBasedOnExtremeContent )
		pFnSetMaterialBasedOnExtremeContent = (UFunction*) UObject::GObjObjects()->Data[ 34311 ];

	AStaticMeshActorBasedOnExtremeContent_execSetMaterialBasedOnExtremeContent_Parms SetMaterialBasedOnExtremeContent_Parms;

	this->ProcessEvent ( pFnSetMaterialBasedOnExtremeContent, &SetMaterialBasedOnExtremeContent_Parms, NULL );
};

// Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AStaticMeshActorBasedOnExtremeContent::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34310 ];

	AStaticMeshActorBasedOnExtremeContent_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Trigger.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ATrigger::ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 35149 ];

	ATrigger_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ATrigger_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ATrigger::CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 35147 ];

	ATrigger_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.Trigger.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ATrigger::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 35145 ];

	ATrigger_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.Trigger.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )

bool ATrigger::StopsProjectile ( class AActor* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 35142 ];

	ATrigger_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.Trigger.UnTrigger
// [0x00020002] 
// Parameters infos:

void ATrigger::UnTrigger ( )
{
	static UFunction* pFnUnTrigger = NULL;

	if ( ! pFnUnTrigger )
		pFnUnTrigger = (UFunction*) UObject::GObjObjects()->Data[ 35141 ];

	ATrigger_execUnTrigger_Parms UnTrigger_Parms;

	this->ProcessEvent ( pFnUnTrigger, &UnTrigger_Parms, NULL );
};

// Function Engine.Trigger.NotifyTriggered
// [0x00020002] 
// Parameters infos:

void ATrigger::NotifyTriggered ( )
{
	static UFunction* pFnNotifyTriggered = NULL;

	if ( ! pFnNotifyTriggered )
		pFnNotifyTriggered = (UFunction*) UObject::GObjObjects()->Data[ 35140 ];

	ATrigger_execNotifyTriggered_Parms NotifyTriggered_Parms;

	this->ProcessEvent ( pFnNotifyTriggered, &NotifyTriggered_Parms, NULL );
};

// Function Engine.Trigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATrigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35135 ];

	ATrigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.Trigger.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATrigger::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35133 ];

	ATrigger_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.ActorComponent.GetFirstLocalViewer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* UActorComponent::GetFirstLocalViewer ( )
{
	static UFunction* pFnGetFirstLocalViewer = NULL;

	if ( ! pFnGetFirstLocalViewer )
		pFnGetFirstLocalViewer = (UFunction*) UObject::GObjObjects()->Data[ 8830 ];

	UActorComponent_execGetFirstLocalViewer_Parms GetFirstLocalViewer_Parms;

	pFnGetFirstLocalViewer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFirstLocalViewer, &GetFirstLocalViewer_Parms, NULL );

	pFnGetFirstLocalViewer->FunctionFlags |= 0x400;

	return GetFirstLocalViewer_Parms.ReturnValue;
};

// Function Engine.ActorComponent.SetLocalViewer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       NewLocalViewer                 ( CPF_Parm )

void UActorComponent::SetLocalViewer ( class APlayerController* NewLocalViewer )
{
	static UFunction* pFnSetLocalViewer = NULL;

	if ( ! pFnSetLocalViewer )
		pFnSetLocalViewer = (UFunction*) UObject::GObjObjects()->Data[ 8827 ];

	UActorComponent_execSetLocalViewer_Parms SetLocalViewer_Parms;
	SetLocalViewer_Parms.NewLocalViewer = NewLocalViewer;

	pFnSetLocalViewer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocalViewer, &SetLocalViewer_Parms, NULL );

	pFnSetLocalViewer->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.ClearLocalViewers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UActorComponent::ClearLocalViewers ( )
{
	static UFunction* pFnClearLocalViewers = NULL;

	if ( ! pFnClearLocalViewers )
		pFnClearLocalViewers = (UFunction*) UObject::GObjObjects()->Data[ 8829 ];

	UActorComponent_execClearLocalViewers_Parms ClearLocalViewers_Parms;

	pFnClearLocalViewers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearLocalViewers, &ClearLocalViewers_Parms, NULL );

	pFnClearLocalViewers->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.RemoveLocalViewer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       NewLocalViewer                 ( CPF_Parm )

void UActorComponent::RemoveLocalViewer ( class APlayerController* NewLocalViewer )
{
	static UFunction* pFnRemoveLocalViewer = NULL;

	if ( ! pFnRemoveLocalViewer )
		pFnRemoveLocalViewer = (UFunction*) UObject::GObjObjects()->Data[ 8832 ];

	UActorComponent_execRemoveLocalViewer_Parms RemoveLocalViewer_Parms;
	RemoveLocalViewer_Parms.NewLocalViewer = NewLocalViewer;

	pFnRemoveLocalViewer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveLocalViewer, &RemoveLocalViewer_Parms, NULL );

	pFnRemoveLocalViewer->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.AddLocalViewer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       NewLocalViewer                 ( CPF_Parm )

void UActorComponent::AddLocalViewer ( class APlayerController* NewLocalViewer )
{
	static UFunction* pFnAddLocalViewer = NULL;

	if ( ! pFnAddLocalViewer )
		pFnAddLocalViewer = (UFunction*) UObject::GObjObjects()->Data[ 8833 ];

	UActorComponent_execAddLocalViewer_Parms AddLocalViewer_Parms;
	AddLocalViewer_Parms.NewLocalViewer = NewLocalViewer;

	pFnAddLocalViewer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddLocalViewer, &AddLocalViewer_Parms, NULL );

	pFnAddLocalViewer->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.DetachFromAny
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UActorComponent::DetachFromAny ( )
{
	static UFunction* pFnDetachFromAny = NULL;

	if ( ! pFnDetachFromAny )
		pFnDetachFromAny = (UFunction*) UObject::GObjObjects()->Data[ 8826 ];

	UActorComponent_execDetachFromAny_Parms DetachFromAny_Parms;

	pFnDetachFromAny->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachFromAny, &DetachFromAny_Parms, NULL );

	pFnDetachFromAny->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.ForceUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTransformOnly                 ( CPF_Parm )

void UActorComponent::ForceUpdate ( unsigned long bTransformOnly )
{
	static UFunction* pFnForceUpdate = NULL;

	if ( ! pFnForceUpdate )
		pFnForceUpdate = (UFunction*) UObject::GObjObjects()->Data[ 8824 ];

	UActorComponent_execForceUpdate_Parms ForceUpdate_Parms;
	ForceUpdate_Parms.bTransformOnly = bTransformOnly;

	pFnForceUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdate, &ForceUpdate_Parms, NULL );

	pFnForceUpdate->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetComponentRBFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFixed                         ( CPF_Parm )

void UActorComponent::SetComponentRBFixed ( unsigned long bFixed )
{
	static UFunction* pFnSetComponentRBFixed = NULL;

	if ( ! pFnSetComponentRBFixed )
		pFnSetComponentRBFixed = (UFunction*) UObject::GObjObjects()->Data[ 8822 ];

	UActorComponent_execSetComponentRBFixed_Parms SetComponentRBFixed_Parms;
	SetComponentRBFixed_Parms.bFixed = bFixed;

	pFnSetComponentRBFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponentRBFixed, &SetComponentRBFixed_Parms, NULL );

	pFnSetComponentRBFixed->FunctionFlags |= 0x400;
};

// Function Engine.ActorComponent.SetTickGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewTickGroup                   ( CPF_Parm )

void UActorComponent::SetTickGroup ( unsigned char NewTickGroup )
{
	static UFunction* pFnSetTickGroup = NULL;

	if ( ! pFnSetTickGroup )
		pFnSetTickGroup = (UFunction*) UObject::GObjObjects()->Data[ 8819 ];

	UActorComponent_execSetTickGroup_Parms SetTickGroup_Parms;
	SetTickGroup_Parms.NewTickGroup = NewTickGroup;

	pFnSetTickGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTickGroup, &SetTickGroup_Parms, NULL );

	pFnSetTickGroup->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.OcclusionChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowOccluded                   ( CPF_Parm )

void UAudioComponent::eventOcclusionChanged ( unsigned long bNowOccluded )
{
	static UFunction* pFnOcclusionChanged = NULL;

	if ( ! pFnOcclusionChanged )
		pFnOcclusionChanged = (UFunction*) UObject::GObjObjects()->Data[ 13700 ];

	UAudioComponent_eventOcclusionChanged_Parms OcclusionChanged_Parms;
	OcclusionChanged_Parms.bNowOccluded = bNowOccluded;

	this->ProcessEvent ( pFnOcclusionChanged, &OcclusionChanged_Parms, NULL );
};

// Function Engine.AudioComponent.OnQueueSubtitles
// [0x00120000] 
// Parameters infos:
// TArray< struct FSubtitleCue >  Subtitles                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          CueDuration                    ( CPF_Parm )

void UAudioComponent::OnQueueSubtitles ( TArray< struct FSubtitleCue > Subtitles, float CueDuration )
{
	static UFunction* pFnOnQueueSubtitles = NULL;

	if ( ! pFnOnQueueSubtitles )
		pFnOnQueueSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 13599 ];

	UAudioComponent_execOnQueueSubtitles_Parms OnQueueSubtitles_Parms;
	memcpy ( &OnQueueSubtitles_Parms.Subtitles, &Subtitles, 0xC );
	OnQueueSubtitles_Parms.CueDuration = CueDuration;

	this->ProcessEvent ( pFnOnQueueSubtitles, &OnQueueSubtitles_Parms, NULL );
};

// Function Engine.AudioComponent.OnAudioFinished
// [0x00120000] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void UAudioComponent::OnAudioFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnOnAudioFinished = NULL;

	if ( ! pFnOnAudioFinished )
		pFnOnAudioFinished = (UFunction*) UObject::GObjObjects()->Data[ 13601 ];

	UAudioComponent_execOnAudioFinished_Parms OnAudioFinished_Parms;
	OnAudioFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnOnAudioFinished, &OnAudioFinished_Parms, NULL );
};

// Function Engine.AudioComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 11395 ];

	UAudioComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetWaveParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// class USoundNodeWave*          InWave                         ( CPF_Parm )

void UAudioComponent::SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave )
{
	static UFunction* pFnSetWaveParameter = NULL;

	if ( ! pFnSetWaveParameter )
		pFnSetWaveParameter = (UFunction*) UObject::GObjObjects()->Data[ 13689 ];

	UAudioComponent_execSetWaveParameter_Parms SetWaveParameter_Parms;
	memcpy ( &SetWaveParameter_Parms.InName, &InName, 0x8 );
	SetWaveParameter_Parms.InWave = InWave;

	pFnSetWaveParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWaveParameter, &SetWaveParameter_Parms, NULL );

	pFnSetWaveParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InName                         ( CPF_Parm )
// float                          InFloat                        ( CPF_Parm )

void UAudioComponent::SetFloatParameter ( struct FName InName, float InFloat )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 13686 ];

	UAudioComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.InName, &InName, 0x8 );
	SetFloatParameter_Parms.InFloat = InFloat;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.AdjustVolume
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          AdjustVolumeDuration           ( CPF_Parm )
// float                          AdjustVolumeLevel              ( CPF_Parm )

void UAudioComponent::AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel )
{
	static UFunction* pFnAdjustVolume = NULL;

	if ( ! pFnAdjustVolume )
		pFnAdjustVolume = (UFunction*) UObject::GObjObjects()->Data[ 13683 ];

	UAudioComponent_execAdjustVolume_Parms AdjustVolume_Parms;
	AdjustVolume_Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	AdjustVolume_Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	pFnAdjustVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustVolume, &AdjustVolume_Parms, NULL );

	pFnAdjustVolume->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeOut
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeOutDuration                ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeOut ( float FadeOutDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = (UFunction*) UObject::GObjObjects()->Data[ 11451 ];

	UAudioComponent_execFadeOut_Parms FadeOut_Parms;
	FadeOut_Parms.FadeOutDuration = FadeOutDuration;
	FadeOut_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );

	pFnFadeOut->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.FadeIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          FadeInDuration                 ( CPF_Parm )
// float                          FadeVolumeLevel                ( CPF_Parm )

void UAudioComponent::FadeIn ( float FadeInDuration, float FadeVolumeLevel )
{
	static UFunction* pFnFadeIn = NULL;

	if ( ! pFnFadeIn )
		pFnFadeIn = (UFunction*) UObject::GObjObjects()->Data[ 11443 ];

	UAudioComponent_execFadeIn_Parms FadeIn_Parms;
	FadeIn_Parms.FadeInDuration = FadeInDuration;
	FadeIn_Parms.FadeVolumeLevel = FadeVolumeLevel;

	pFnFadeIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeIn, &FadeIn_Parms, NULL );

	pFnFadeIn->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.IsFadingOut
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::IsFadingOut ( )
{
	static UFunction* pFnIsFadingOut = NULL;

	if ( ! pFnIsFadingOut )
		pFnIsFadingOut = (UFunction*) UObject::GObjObjects()->Data[ 13677 ];

	UAudioComponent_execIsFadingOut_Parms IsFadingOut_Parms;

	pFnIsFadingOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFadingOut, &IsFadingOut_Parms, NULL );

	pFnIsFadingOut->FunctionFlags |= 0x400;

	return IsFadingOut_Parms.ReturnValue;
};

// Function Engine.AudioComponent.IsFadingIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::IsFadingIn ( )
{
	static UFunction* pFnIsFadingIn = NULL;

	if ( ! pFnIsFadingIn )
		pFnIsFadingIn = (UFunction*) UObject::GObjObjects()->Data[ 13675 ];

	UAudioComponent_execIsFadingIn_Parms IsFadingIn_Parms;

	pFnIsFadingIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFadingIn, &IsFadingIn_Parms, NULL );

	pFnIsFadingIn->FunctionFlags |= 0x400;

	return IsFadingIn_Parms.ReturnValue;
};

// Function Engine.AudioComponent.IsPlaying
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAudioComponent::IsPlaying ( )
{
	static UFunction* pFnIsPlaying = NULL;

	if ( ! pFnIsPlaying )
		pFnIsPlaying = (UFunction*) UObject::GObjObjects()->Data[ 13673 ];

	UAudioComponent_execIsPlaying_Parms IsPlaying_Parms;

	pFnIsPlaying->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlaying, &IsPlaying_Parms, NULL );

	pFnIsPlaying->FunctionFlags |= 0x400;

	return IsPlaying_Parms.ReturnValue;
};

// Function Engine.AudioComponent.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 13672 ];

	UAudioComponent_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.AudioComponent.Play
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAudioComponent::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 11415 ];

	UAudioComponent_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.HeightFogComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UHeightFogComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 22898 ];

	UHeightFogComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetCastShadow
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bNewCastShadow                 ( CPF_Parm )
// unsigned long                  bNewCastDynamicShadow          ( CPF_Parm )

void UPrimitiveComponent::SetCastShadow ( unsigned long bNewCastShadow, unsigned long bNewCastDynamicShadow )
{
	static UFunction* pFnSetCastShadow = NULL;

	if ( ! pFnSetCastShadow )
		pFnSetCastShadow = (UFunction*) UObject::GObjObjects()->Data[ 9041 ];

	UPrimitiveComponent_execSetCastShadow_Parms SetCastShadow_Parms;
	SetCastShadow_Parms.bNewCastShadow = bNewCastShadow;
	SetCastShadow_Parms.bNewCastDynamicShadow = bNewCastDynamicShadow;

	this->ProcessEvent ( pFnSetCastShadow, &SetCastShadow_Parms, NULL );
};

// Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_OutParm | CPF_EditInline )
// struct FVector                 PointOnComponentA              ( CPF_Parm | CPF_OutParm )
// struct FVector                 PointOnComponentB              ( CPF_Parm | CPF_OutParm )

unsigned char UPrimitiveComponent::ClosestPointOnComponentToComponent ( class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB )
{
	static UFunction* pFnClosestPointOnComponentToComponent = NULL;

	if ( ! pFnClosestPointOnComponentToComponent )
		pFnClosestPointOnComponentToComponent = (UFunction*) UObject::GObjObjects()->Data[ 9036 ];

	UPrimitiveComponent_execClosestPointOnComponentToComponent_Parms ClosestPointOnComponentToComponent_Parms;

	pFnClosestPointOnComponentToComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClosestPointOnComponentToComponent, &ClosestPointOnComponentToComponent_Parms, NULL );

	pFnClosestPointOnComponentToComponent->FunctionFlags |= 0x400;

	if ( OtherComponent )
		*OtherComponent = ClosestPointOnComponentToComponent_Parms.OtherComponent;

	if ( PointOnComponentA )
		memcpy ( PointOnComponentA, &ClosestPointOnComponentToComponent_Parms.PointOnComponentA, 0xC );

	if ( PointOnComponentB )
		memcpy ( PointOnComponentB, &ClosestPointOnComponentToComponent_Parms.PointOnComponentB, 0xC );

	return ClosestPointOnComponentToComponent_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 POI                            ( CPF_Parm | CPF_OutParm )
// struct FVector                 Extent                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 OutPointA                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 OutPointB                      ( CPF_Parm | CPF_OutParm )

unsigned char UPrimitiveComponent::ClosestPointOnComponentToPoint ( struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB )
{
	static UFunction* pFnClosestPointOnComponentToPoint = NULL;

	if ( ! pFnClosestPointOnComponentToPoint )
		pFnClosestPointOnComponentToPoint = (UFunction*) UObject::GObjObjects()->Data[ 9030 ];

	UPrimitiveComponent_execClosestPointOnComponentToPoint_Parms ClosestPointOnComponentToPoint_Parms;

	pFnClosestPointOnComponentToPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClosestPointOnComponentToPoint, &ClosestPointOnComponentToPoint_Parms, NULL );

	pFnClosestPointOnComponentToPoint->FunctionFlags |= 0x400;

	if ( POI )
		memcpy ( POI, &ClosestPointOnComponentToPoint_Parms.POI, 0xC );

	if ( Extent )
		memcpy ( Extent, &ClosestPointOnComponentToPoint_Parms.Extent, 0xC );

	if ( OutPointA )
		memcpy ( OutPointA, &ClosestPointOnComponentToPoint_Parms.OutPointA, 0xC );

	if ( OutPointB )
		memcpy ( OutPointB, &ClosestPointOnComponentToPoint_Parms.OutPointB, 0xC );

	return ClosestPointOnComponentToPoint_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator UPrimitiveComponent::GetRotation ( )
{
	static UFunction* pFnGetRotation = NULL;

	if ( ! pFnGetRotation )
		pFnGetRotation = (UFunction*) UObject::GObjObjects()->Data[ 9028 ];

	UPrimitiveComponent_execGetRotation_Parms GetRotation_Parms;

	pFnGetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotation, &GetRotation_Parms, NULL );

	pFnGetRotation->FunctionFlags |= 0x400;

	return GetRotation_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.GetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UPrimitiveComponent::GetPosition ( )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 9026 ];

	UPrimitiveComponent_execGetPosition_Parms GetPosition_Parms;

	pFnGetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	pFnGetPosition->FunctionFlags |= 0x400;

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetAbsolute
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewAbsoluteTranslation         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteRotation            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  NewAbsoluteScale               ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale )
{
	static UFunction* pFnSetAbsolute = NULL;

	if ( ! pFnSetAbsolute )
		pFnSetAbsolute = (UFunction*) UObject::GObjObjects()->Data[ 9022 ];

	UPrimitiveComponent_execSetAbsolute_Parms SetAbsolute_Parms;
	SetAbsolute_Parms.NewAbsoluteTranslation = NewAbsoluteTranslation;
	SetAbsolute_Parms.NewAbsoluteRotation = NewAbsoluteRotation;
	SetAbsolute_Parms.NewAbsoluteScale = NewAbsoluteScale;

	pFnSetAbsolute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAbsolute, &SetAbsolute_Parms, NULL );

	pFnSetAbsolute->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale3D
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewScale3D                     ( CPF_Parm )

void UPrimitiveComponent::SetScale3D ( struct FVector NewScale3D )
{
	static UFunction* pFnSetScale3D = NULL;

	if ( ! pFnSetScale3D )
		pFnSetScale3D = (UFunction*) UObject::GObjObjects()->Data[ 9020 ];

	UPrimitiveComponent_execSetScale3D_Parms SetScale3D_Parms;
	memcpy ( &SetScale3D_Parms.NewScale3D, &NewScale3D, 0xC );

	pFnSetScale3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale3D, &SetScale3D_Parms, NULL );

	pFnSetScale3D->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewScale                       ( CPF_Parm )

void UPrimitiveComponent::SetScale ( float NewScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 9018 ];

	UPrimitiveComponent_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.NewScale = NewScale;

	pFnSetScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );

	pFnSetScale->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void UPrimitiveComponent::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 9016 ];

	UPrimitiveComponent_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTranslation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPrimitiveComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = (UFunction*) UObject::GObjObjects()->Data[ 9014 ];

	UPrimitiveComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetActorCollision
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewCollideActors               ( CPF_Parm )
// unsigned long                  NewBlockActors                 ( CPF_Parm )
// unsigned long                  NewAlwaysCheckCollision        ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision )
{
	static UFunction* pFnSetActorCollision = NULL;

	if ( ! pFnSetActorCollision )
		pFnSetActorCollision = (UFunction*) UObject::GObjObjects()->Data[ 9010 ];

	UPrimitiveComponent_execSetActorCollision_Parms SetActorCollision_Parms;
	SetActorCollision_Parms.NewCollideActors = NewCollideActors;
	SetActorCollision_Parms.NewBlockActors = NewBlockActors;
	SetActorCollision_Parms.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	pFnSetActorCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorCollision, &SetActorCollision_Parms, NULL );

	pFnSetActorCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetTraceBlocking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewBlockZeroExtent             ( CPF_Parm )
// unsigned long                  NewBlockNonZeroExtent          ( CPF_Parm )

void UPrimitiveComponent::SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent )
{
	static UFunction* pFnSetTraceBlocking = NULL;

	if ( ! pFnSetTraceBlocking )
		pFnSetTraceBlocking = (UFunction*) UObject::GObjObjects()->Data[ 9007 ];

	UPrimitiveComponent_execSetTraceBlocking_Parms SetTraceBlocking_Parms;
	SetTraceBlocking_Parms.NewBlockZeroExtent = NewBlockZeroExtent;
	SetTraceBlocking_Parms.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	pFnSetTraceBlocking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTraceBlocking, &SetTraceBlocking_Parms, NULL );

	pFnSetTraceBlocking->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewUseViewOwnerDepthPriorityGroup ( CPF_Parm )
// unsigned char                  NewViewOwnerDepthPriorityGroup ( CPF_Parm )

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup )
{
	static UFunction* pFnSetViewOwnerDepthPriorityGroup = NULL;

	if ( ! pFnSetViewOwnerDepthPriorityGroup )
		pFnSetViewOwnerDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 9004 ];

	UPrimitiveComponent_execSetViewOwnerDepthPriorityGroup_Parms SetViewOwnerDepthPriorityGroup_Parms;
	SetViewOwnerDepthPriorityGroup_Parms.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	SetViewOwnerDepthPriorityGroup_Parms.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewOwnerDepthPriorityGroup, &SetViewOwnerDepthPriorityGroup_Parms, NULL );

	pFnSetViewOwnerDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewDepthPriorityGroup          ( CPF_Parm )

void UPrimitiveComponent::SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup )
{
	static UFunction* pFnSetDepthPriorityGroup = NULL;

	if ( ! pFnSetDepthPriorityGroup )
		pFnSetDepthPriorityGroup = (UFunction*) UObject::GObjObjects()->Data[ 9002 ];

	UPrimitiveComponent_execSetDepthPriorityGroup_Parms SetDepthPriorityGroup_Parms;
	SetDepthPriorityGroup_Parms.NewDepthPriorityGroup = NewDepthPriorityGroup;

	pFnSetDepthPriorityGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDepthPriorityGroup, &SetDepthPriorityGroup_Parms, NULL );

	pFnSetDepthPriorityGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightingChannels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLightingChannelContainer NewLightingChannels            ( CPF_Parm )

void UPrimitiveComponent::SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels )
{
	static UFunction* pFnSetLightingChannels = NULL;

	if ( ! pFnSetLightingChannels )
		pFnSetLightingChannels = (UFunction*) UObject::GObjObjects()->Data[ 9000 ];

	UPrimitiveComponent_execSetLightingChannels_Parms SetLightingChannels_Parms;
	memcpy ( &SetLightingChannels_Parms.NewLightingChannels, &NewLightingChannels, 0x4 );

	pFnSetLightingChannels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightingChannels, &SetLightingChannels_Parms, NULL );

	pFnSetLightingChannels->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetCullDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewCullDistance                ( CPF_Parm )

void UPrimitiveComponent::SetCullDistance ( float NewCullDistance )
{
	static UFunction* pFnSetCullDistance = NULL;

	if ( ! pFnSetCullDistance )
		pFnSetCullDistance = (UFunction*) UObject::GObjObjects()->Data[ 8970 ];

	UPrimitiveComponent_execSetCullDistance_Parms SetCullDistance_Parms;
	SetCullDistance_Parms.NewCullDistance = NewCullDistance;

	pFnSetCullDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCullDistance, &SetCullDistance_Parms, NULL );

	pFnSetCullDistance->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetLightEnvironment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULightEnvironmentComponent* NewLightEnvironment            ( CPF_Parm | CPF_EditInline )

void UPrimitiveComponent::SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment )
{
	static UFunction* pFnSetLightEnvironment = NULL;

	if ( ! pFnSetLightEnvironment )
		pFnSetLightEnvironment = (UFunction*) UObject::GObjObjects()->Data[ 8968 ];

	UPrimitiveComponent_execSetLightEnvironment_Parms SetLightEnvironment_Parms;
	SetLightEnvironment_Parms.NewLightEnvironment = NewLightEnvironment;

	pFnSetLightEnvironment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightEnvironment, &SetLightEnvironment_Parms, NULL );

	pFnSetLightEnvironment->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetShadowParent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     NewShadowParent                ( CPF_Parm | CPF_EditInline )

void UPrimitiveComponent::SetShadowParent ( class UPrimitiveComponent* NewShadowParent )
{
	static UFunction* pFnSetShadowParent = NULL;

	if ( ! pFnSetShadowParent )
		pFnSetShadowParent = (UFunction*) UObject::GObjObjects()->Data[ 8966 ];

	UPrimitiveComponent_execSetShadowParent_Parms SetShadowParent_Parms;
	SetShadowParent_Parms.NewShadowParent = NewShadowParent;

	pFnSetShadowParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShadowParent, &SetShadowParent_Parms, NULL );

	pFnSetShadowParent->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewIgnoreOwnerHidden          ( CPF_Parm )

void UPrimitiveComponent::SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden )
{
	static UFunction* pFnSetIgnoreOwnerHidden = NULL;

	if ( ! pFnSetIgnoreOwnerHidden )
		pFnSetIgnoreOwnerHidden = (UFunction*) UObject::GObjObjects()->Data[ 8964 ];

	UPrimitiveComponent_execSetIgnoreOwnerHidden_Parms SetIgnoreOwnerHidden_Parms;
	SetIgnoreOwnerHidden_Parms.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	pFnSetIgnoreOwnerHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIgnoreOwnerHidden, &SetIgnoreOwnerHidden_Parms, NULL );

	pFnSetIgnoreOwnerHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOnlyOwnerSee               ( CPF_Parm )

void UPrimitiveComponent::SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee )
{
	static UFunction* pFnSetOnlyOwnerSee = NULL;

	if ( ! pFnSetOnlyOwnerSee )
		pFnSetOnlyOwnerSee = (UFunction*) UObject::GObjObjects()->Data[ 8962 ];

	UPrimitiveComponent_execSetOnlyOwnerSee_Parms SetOnlyOwnerSee_Parms;
	SetOnlyOwnerSee_Parms.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	pFnSetOnlyOwnerSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyOwnerSee, &SetOnlyOwnerSee_Parms, NULL );

	pFnSetOnlyOwnerSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetOwnerNoSee
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewOwnerNoSee                 ( CPF_Parm )

void UPrimitiveComponent::SetOwnerNoSee ( unsigned long bNewOwnerNoSee )
{
	static UFunction* pFnSetOwnerNoSee = NULL;

	if ( ! pFnSetOwnerNoSee )
		pFnSetOwnerNoSee = (UFunction*) UObject::GObjObjects()->Data[ 8960 ];

	UPrimitiveComponent_execSetOwnerNoSee_Parms SetOwnerNoSee_Parms;
	SetOwnerNoSee_Parms.bNewOwnerNoSee = bNewOwnerNoSee;

	pFnSetOwnerNoSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerNoSee, &SetOwnerNoSee_Parms, NULL );

	pFnSetOwnerNoSee->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewHidden                      ( CPF_Parm )

void UPrimitiveComponent::SetHidden ( unsigned long NewHidden )
{
	static UFunction* pFnSetHidden = NULL;

	if ( ! pFnSetHidden )
		pFnSetHidden = (UFunction*) UObject::GObjObjects()->Data[ 8958 ];

	UPrimitiveComponent_execSetHidden_Parms SetHidden_Parms;
	SetHidden_Parms.NewHidden = NewHidden;

	pFnSetHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHidden, &SetHidden_Parms, NULL );

	pFnSetHidden->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.ShouldComponentAddToScene
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPrimitiveComponent::ShouldComponentAddToScene ( )
{
	static UFunction* pFnShouldComponentAddToScene = NULL;

	if ( ! pFnShouldComponentAddToScene )
		pFnShouldComponentAddToScene = (UFunction*) UObject::GObjObjects()->Data[ 8956 ];

	UPrimitiveComponent_execShouldComponentAddToScene_Parms ShouldComponentAddToScene_Parms;

	pFnShouldComponentAddToScene->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldComponentAddToScene, &ShouldComponentAddToScene_Parms, NULL );

	pFnShouldComponentAddToScene->FunctionFlags |= 0x400;

	return ShouldComponentAddToScene_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  InDomGroup                     ( CPF_Parm )

void UPrimitiveComponent::SetRBDominanceGroup ( unsigned char InDomGroup )
{
	static UFunction* pFnSetRBDominanceGroup = NULL;

	if ( ! pFnSetRBDominanceGroup )
		pFnSetRBDominanceGroup = (UFunction*) UObject::GObjObjects()->Data[ 8954 ];

	UPrimitiveComponent_execSetRBDominanceGroup_Parms SetRBDominanceGroup_Parms;
	SetRBDominanceGroup_Parms.InDomGroup = InDomGroup;

	pFnSetRBDominanceGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBDominanceGroup, &SetRBDominanceGroup_Parms, NULL );

	pFnSetRBDominanceGroup->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.GetRootBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance ( )
{
	static UFunction* pFnGetRootBodyInstance = NULL;

	if ( ! pFnGetRootBodyInstance )
		pFnGetRootBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 8952 ];

	UPrimitiveComponent_execGetRootBodyInstance_Parms GetRootBodyInstance_Parms;

	pFnGetRootBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRootBodyInstance, &GetRootBodyInstance_Parms, NULL );

	pFnGetRootBodyInstance->FunctionFlags |= 0x400;

	return GetRootBodyInstance_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void UPrimitiveComponent::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 8950 ];

	UPrimitiveComponent_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.TermRBPhys
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UPrimitiveComponent::TermRBPhys ( )
{
	static UFunction* pFnTermRBPhys = NULL;

	if ( ! pFnTermRBPhys )
		pFnTermRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 8949 ];

	UPrimitiveComponent_execTermRBPhys_Parms TermRBPhys_Parms;

	pFnTermRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRBPhys, &TermRBPhys_Parms, NULL );

	pFnTermRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.InitRBPhys
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UPrimitiveComponent::InitRBPhys ( )
{
	static UFunction* pFnInitRBPhys = NULL;

	if ( ! pFnInitRBPhys )
		pFnInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 8948 ];

	UPrimitiveComponent_execInitRBPhys_Parms InitRBPhys_Parms;

	pFnInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRBPhys, &InitRBPhys_Parms, NULL );

	pFnInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewNotifyRigidBodyCollision   ( CPF_Parm )

void UPrimitiveComponent::SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision )
{
	static UFunction* pFnSetNotifyRigidBodyCollision = NULL;

	if ( ! pFnSetNotifyRigidBodyCollision )
		pFnSetNotifyRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 8946 ];

	UPrimitiveComponent_execSetNotifyRigidBodyCollision_Parms SetNotifyRigidBodyCollision_Parms;
	SetNotifyRigidBodyCollision_Parms.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNotifyRigidBodyCollision, &SetNotifyRigidBodyCollision_Parms, NULL );

	pFnSetNotifyRigidBodyCollision->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )

void UPrimitiveComponent::SetRBChannel ( unsigned char Channel )
{
	static UFunction* pFnSetRBChannel = NULL;

	if ( ! pFnSetRBChannel )
		pFnSetRBChannel = (UFunction*) UObject::GObjObjects()->Data[ 8944 ];

	UPrimitiveComponent_execSetRBChannel_Parms SetRBChannel_Parms;
	SetRBChannel_Parms.Channel = Channel;

	pFnSetRBChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBChannel, &SetRBChannel_Parms, NULL );

	pFnSetRBChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBCollisionChannels
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRBCollisionChannelContainer Channels                       ( CPF_Parm )

void UPrimitiveComponent::SetRBCollisionChannels ( struct FRBCollisionChannelContainer Channels )
{
	static UFunction* pFnSetRBCollisionChannels = NULL;

	if ( ! pFnSetRBCollisionChannels )
		pFnSetRBCollisionChannels = (UFunction*) UObject::GObjObjects()->Data[ 8923 ];

	UPrimitiveComponent_execSetRBCollisionChannels_Parms SetRBCollisionChannels_Parms;
	memcpy ( &SetRBCollisionChannels_Parms.Channels, &Channels, 0x4 );

	pFnSetRBCollisionChannels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBCollisionChannels, &SetRBCollisionChannels_Parms, NULL );

	pFnSetRBCollisionChannels->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Channel                        ( CPF_Parm )
// unsigned long                  bNewCollides                   ( CPF_Parm )

void UPrimitiveComponent::SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides )
{
	static UFunction* pFnSetRBCollidesWithChannel = NULL;

	if ( ! pFnSetRBCollidesWithChannel )
		pFnSetRBCollidesWithChannel = (UFunction*) UObject::GObjObjects()->Data[ 8918 ];

	UPrimitiveComponent_execSetRBCollidesWithChannel_Parms SetRBCollidesWithChannel_Parms;
	SetRBCollidesWithChannel_Parms.Channel = Channel;
	SetRBCollidesWithChannel_Parms.bNewCollides = bNewCollides;

	pFnSetRBCollidesWithChannel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBCollidesWithChannel, &SetRBCollidesWithChannel_Parms, NULL );

	pFnSetRBCollidesWithChannel->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void UPrimitiveComponent::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 7154 ];

	UPrimitiveComponent_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool UPrimitiveComponent::RigidBodyIsAwake ( struct FName BoneName )
{
	static UFunction* pFnRigidBodyIsAwake = NULL;

	if ( ! pFnRigidBodyIsAwake )
		pFnRigidBodyIsAwake = (UFunction*) UObject::GObjObjects()->Data[ 8914 ];

	UPrimitiveComponent_execRigidBodyIsAwake_Parms RigidBodyIsAwake_Parms;
	memcpy ( &RigidBodyIsAwake_Parms.BoneName, &BoneName, 0x8 );

	pFnRigidBodyIsAwake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRigidBodyIsAwake, &RigidBodyIsAwake_Parms, NULL );

	pFnRigidBodyIsAwake->FunctionFlags |= 0x400;

	return RigidBodyIsAwake_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::PutRigidBodyToSleep ( struct FName BoneName )
{
	static UFunction* pFnPutRigidBodyToSleep = NULL;

	if ( ! pFnPutRigidBodyToSleep )
		pFnPutRigidBodyToSleep = (UFunction*) UObject::GObjObjects()->Data[ 8912 ];

	UPrimitiveComponent_execPutRigidBodyToSleep_Parms PutRigidBodyToSleep_Parms;
	memcpy ( &PutRigidBodyToSleep_Parms.BoneName, &BoneName, 0x8 );

	pFnPutRigidBodyToSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPutRigidBodyToSleep, &PutRigidBodyToSleep_Parms, NULL );

	pFnPutRigidBodyToSleep->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.WakeRigidBody
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::WakeRigidBody ( struct FName BoneName )
{
	static UFunction* pFnWakeRigidBody = NULL;

	if ( ! pFnWakeRigidBody )
		pFnWakeRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 8910 ];

	UPrimitiveComponent_execWakeRigidBody_Parms WakeRigidBody_Parms;
	memcpy ( &WakeRigidBody_Parms.BoneName, &BoneName, 0x8 );

	pFnWakeRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeRigidBody, &WakeRigidBody_Parms, NULL );

	pFnWakeRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRot                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBRotation ( struct FRotator NewRot, struct FName BoneName )
{
	static UFunction* pFnSetRBRotation = NULL;

	if ( ! pFnSetRBRotation )
		pFnSetRBRotation = (UFunction*) UObject::GObjObjects()->Data[ 8907 ];

	UPrimitiveComponent_execSetRBRotation_Parms SetRBRotation_Parms;
	memcpy ( &SetRBRotation_Parms.NewRot, &NewRot, 0xC );
	memcpy ( &SetRBRotation_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBRotation, &SetRBRotation_Parms, NULL );

	pFnSetRBRotation->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewPos                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBPosition ( struct FVector NewPos, struct FName BoneName )
{
	static UFunction* pFnSetRBPosition = NULL;

	if ( ! pFnSetRBPosition )
		pFnSetRBPosition = (UFunction*) UObject::GObjObjects()->Data[ 8904 ];

	UPrimitiveComponent_execSetRBPosition_Parms SetRBPosition_Parms;
	memcpy ( &SetRBPosition_Parms.NewPos, &NewPos, 0xC );
	memcpy ( &SetRBPosition_Parms.BoneName, &BoneName, 0x8 );

	pFnSetRBPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBPosition, &SetRBPosition_Parms, NULL );

	pFnSetRBPosition->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.RetardRBLinearVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 RetardDir                      ( CPF_Parm )
// float                          VelScale                       ( CPF_Parm )

void UPrimitiveComponent::RetardRBLinearVelocity ( struct FVector RetardDir, float VelScale )
{
	static UFunction* pFnRetardRBLinearVelocity = NULL;

	if ( ! pFnRetardRBLinearVelocity )
		pFnRetardRBLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 8901 ];

	UPrimitiveComponent_execRetardRBLinearVelocity_Parms RetardRBLinearVelocity_Parms;
	memcpy ( &RetardRBLinearVelocity_Parms.RetardDir, &RetardDir, 0xC );
	RetardRBLinearVelocity_Parms.VelScale = VelScale;

	pFnRetardRBLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetardRBLinearVelocity, &RetardRBLinearVelocity_Parms, NULL );

	pFnRetardRBLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewAngVel                      ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBAngularVelocity = NULL;

	if ( ! pFnSetRBAngularVelocity )
		pFnSetRBAngularVelocity = (UFunction*) UObject::GObjObjects()->Data[ 8898 ];

	UPrimitiveComponent_execSetRBAngularVelocity_Parms SetRBAngularVelocity_Parms;
	memcpy ( &SetRBAngularVelocity_Parms.NewAngVel, &NewAngVel, 0xC );
	SetRBAngularVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBAngularVelocity, &SetRBAngularVelocity_Parms, NULL );

	pFnSetRBAngularVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewVel                         ( CPF_Parm )
// unsigned long                  bAddToCurrent                  ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent )
{
	static UFunction* pFnSetRBLinearVelocity = NULL;

	if ( ! pFnSetRBLinearVelocity )
		pFnSetRBLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 7204 ];

	UPrimitiveComponent_execSetRBLinearVelocity_Parms SetRBLinearVelocity_Parms;
	memcpy ( &SetRBLinearVelocity_Parms.NewVel, &NewVel, 0xC );
	SetRBLinearVelocity_Parms.bAddToCurrent = bAddToCurrent;

	pFnSetRBLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRBLinearVelocity, &SetRBLinearVelocity_Parms, NULL );

	pFnSetRBLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddTorque
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Torque                         ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForceMode                      ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddTorque ( struct FVector Torque, struct FName BoneName, unsigned char ForceMode )
{
	static UFunction* pFnAddTorque = NULL;

	if ( ! pFnAddTorque )
		pFnAddTorque = (UFunction*) UObject::GObjObjects()->Data[ 8892 ];

	UPrimitiveComponent_execAddTorque_Parms AddTorque_Parms;
	memcpy ( &AddTorque_Parms.Torque, &Torque, 0xC );
	memcpy ( &AddTorque_Parms.BoneName, &BoneName, 0x8 );
	AddTorque_Parms.ForceMode = ForceMode;

	pFnAddTorque->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTorque, &AddTorque_Parms, NULL );

	pFnAddTorque->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialForce
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )

void UPrimitiveComponent::AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff )
{
	static UFunction* pFnAddRadialForce = NULL;

	if ( ! pFnAddRadialForce )
		pFnAddRadialForce = (UFunction*) UObject::GObjObjects()->Data[ 8887 ];

	UPrimitiveComponent_execAddRadialForce_Parms AddRadialForce_Parms;
	memcpy ( &AddRadialForce_Parms.Origin, &Origin, 0xC );
	AddRadialForce_Parms.Radius = Radius;
	AddRadialForce_Parms.Strength = Strength;
	AddRadialForce_Parms.Falloff = Falloff;

	pFnAddRadialForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialForce, &AddRadialForce_Parms, NULL );

	pFnAddRadialForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.GetMass
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

float UPrimitiveComponent::GetMass ( struct FName BoneName )
{
	static UFunction* pFnGetMass = NULL;

	if ( ! pFnGetMass )
		pFnGetMass = (UFunction*) UObject::GObjObjects()->Data[ 8884 ];

	UPrimitiveComponent_execGetMass_Parms GetMass_Parms;
	memcpy ( &GetMass_Parms.BoneName, &BoneName, 0x8 );

	pFnGetMass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMass, &GetMass_Parms, NULL );

	pFnGetMass->FunctionFlags |= 0x400;

	return GetMass_Parms.ReturnValue;
};

// Function Engine.PrimitiveComponent.AddForce
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Force                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ForceMode                      ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName, unsigned char ForceMode )
{
	static UFunction* pFnAddForce = NULL;

	if ( ! pFnAddForce )
		pFnAddForce = (UFunction*) UObject::GObjObjects()->Data[ 8879 ];

	UPrimitiveComponent_execAddForce_Parms AddForce_Parms;
	memcpy ( &AddForce_Parms.Force, &Force, 0xC );
	memcpy ( &AddForce_Parms.Position, &Position, 0xC );
	memcpy ( &AddForce_Parms.BoneName, &BoneName, 0x8 );
	AddForce_Parms.ForceMode = ForceMode;

	pFnAddForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddForce, &AddForce_Parms, NULL );

	pFnAddForce->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddRadialImpulse
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// unsigned char                  Falloff                        ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange )
{
	static UFunction* pFnAddRadialImpulse = NULL;

	if ( ! pFnAddRadialImpulse )
		pFnAddRadialImpulse = (UFunction*) UObject::GObjObjects()->Data[ 8873 ];

	UPrimitiveComponent_execAddRadialImpulse_Parms AddRadialImpulse_Parms;
	memcpy ( &AddRadialImpulse_Parms.Origin, &Origin, 0xC );
	AddRadialImpulse_Parms.Radius = Radius;
	AddRadialImpulse_Parms.Strength = Strength;
	AddRadialImpulse_Parms.Falloff = Falloff;
	AddRadialImpulse_Parms.bVelChange = bVelChange;

	pFnAddRadialImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddRadialImpulse, &AddRadialImpulse_Parms, NULL );

	pFnAddRadialImpulse->FunctionFlags |= 0x400;
};

// Function Engine.PrimitiveComponent.AddImpulse
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 Position                       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void UPrimitiveComponent::AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange )
{
	static UFunction* pFnAddImpulse = NULL;

	if ( ! pFnAddImpulse )
		pFnAddImpulse = (UFunction*) UObject::GObjObjects()->Data[ 8868 ];

	UPrimitiveComponent_execAddImpulse_Parms AddImpulse_Parms;
	memcpy ( &AddImpulse_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &AddImpulse_Parms.Position, &Position, 0xC );
	memcpy ( &AddImpulse_Parms.BoneName, &BoneName, 0x8 );
	AddImpulse_Parms.bVelChange = bVelChange;

	pFnAddImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddImpulse, &AddImpulse_Parms, NULL );

	pFnAddImpulse->FunctionFlags |= 0x400;
};

// Function Engine.CylinderComponent.GetExtent
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UCylinderComponent::GetExtent ( )
{
	static UFunction* pFnGetExtent = NULL;

	if ( ! pFnGetExtent )
		pFnGetExtent = (UFunction*) UObject::GObjObjects()->Data[ 9716 ];

	UCylinderComponent_execGetExtent_Parms GetExtent_Parms;

	this->ProcessEvent ( pFnGetExtent, &GetExtent_Parms, NULL );

	return GetExtent_Parms.ReturnValue;
};

// Function Engine.CylinderComponent.SetCylinderSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRadius                      ( CPF_Parm )
// float                          NewHeight                      ( CPF_Parm )

void UCylinderComponent::SetCylinderSize ( float NewRadius, float NewHeight )
{
	static UFunction* pFnSetCylinderSize = NULL;

	if ( ! pFnSetCylinderSize )
		pFnSetCylinderSize = (UFunction*) UObject::GObjObjects()->Data[ 9713 ];

	UCylinderComponent_execSetCylinderSize_Parms SetCylinderSize_Parms;
	SetCylinderSize_Parms.NewRadius = NewRadius;
	SetCylinderSize_Parms.NewHeight = NewHeight;

	pFnSetCylinderSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCylinderSize, &SetCylinderSize_Parms, NULL );

	pFnSetCylinderSize->FunctionFlags |= 0x400;
};

// Function Engine.SilhouetteComponent.RemoveSilhouetteParent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMeshComponent*          RemParent                      ( CPF_Parm | CPF_EditInline )

void USilhouetteComponent::RemoveSilhouetteParent ( class UMeshComponent* RemParent )
{
	static UFunction* pFnRemoveSilhouetteParent = NULL;

	if ( ! pFnRemoveSilhouetteParent )
		pFnRemoveSilhouetteParent = (UFunction*) UObject::GObjObjects()->Data[ 33253 ];

	USilhouetteComponent_execRemoveSilhouetteParent_Parms RemoveSilhouetteParent_Parms;
	RemoveSilhouetteParent_Parms.RemParent = RemParent;

	pFnRemoveSilhouetteParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSilhouetteParent, &RemoveSilhouetteParent_Parms, NULL );

	pFnRemoveSilhouetteParent->FunctionFlags |= 0x400;
};

// Function Engine.SilhouetteComponent.AddSilhouetteParent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMeshComponent*          NewParent                      ( CPF_Parm | CPF_EditInline )

void USilhouetteComponent::AddSilhouetteParent ( class UMeshComponent* NewParent )
{
	static UFunction* pFnAddSilhouetteParent = NULL;

	if ( ! pFnAddSilhouetteParent )
		pFnAddSilhouetteParent = (UFunction*) UObject::GObjObjects()->Data[ 33251 ];

	USilhouetteComponent_execAddSilhouetteParent_Parms AddSilhouetteParent_Parms;
	AddSilhouetteParent_Parms.NewParent = NewParent;

	pFnAddSilhouetteParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSilhouetteParent, &AddSilhouetteParent_Parms, NULL );

	pFnAddSilhouetteParent->FunctionFlags |= 0x400;
};

// Function Engine.SilhouetteComponent.SetColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            NewColor                       ( CPF_Parm )

void USilhouetteComponent::SetColor ( struct FLinearColor NewColor )
{
	static UFunction* pFnSetColor = NULL;

	if ( ! pFnSetColor )
		pFnSetColor = (UFunction*) UObject::GObjObjects()->Data[ 33249 ];

	USilhouetteComponent_execSetColor_Parms SetColor_Parms;
	memcpy ( &SetColor_Parms.NewColor, &NewColor, 0x10 );

	pFnSetColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColor, &SetColor_Parms, NULL );

	pFnSetColor->FunctionFlags |= 0x400;
};

// Function Engine.SpriteComponent.SetSpriteAndUV
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UTexture2D*              NewSprite                      ( CPF_Parm )
// int                            NewU                           ( CPF_Parm )
// int                            NewUL                          ( CPF_Parm )
// int                            NewV                           ( CPF_Parm )
// int                            NewVL                          ( CPF_Parm )

void USpriteComponent::SetSpriteAndUV ( class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL )
{
	static UFunction* pFnSetSpriteAndUV = NULL;

	if ( ! pFnSetSpriteAndUV )
		pFnSetSpriteAndUV = (UFunction*) UObject::GObjObjects()->Data[ 34285 ];

	USpriteComponent_execSetSpriteAndUV_Parms SetSpriteAndUV_Parms;
	SetSpriteAndUV_Parms.NewSprite = NewSprite;
	SetSpriteAndUV_Parms.NewU = NewU;
	SetSpriteAndUV_Parms.NewUL = NewUL;
	SetSpriteAndUV_Parms.NewV = NewV;
	SetSpriteAndUV_Parms.NewVL = NewVL;

	pFnSetSpriteAndUV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSpriteAndUV, &SetSpriteAndUV_Parms, NULL );

	pFnSetSpriteAndUV->FunctionFlags |= 0x400;
};

// Function Engine.SpriteComponent.SetUV
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// int                            NewU                           ( CPF_Parm )
// int                            NewUL                          ( CPF_Parm )
// int                            NewV                           ( CPF_Parm )
// int                            NewVL                          ( CPF_Parm )

void USpriteComponent::SetUV ( int NewU, int NewUL, int NewV, int NewVL )
{
	static UFunction* pFnSetUV = NULL;

	if ( ! pFnSetUV )
		pFnSetUV = (UFunction*) UObject::GObjObjects()->Data[ 34280 ];

	USpriteComponent_execSetUV_Parms SetUV_Parms;
	SetUV_Parms.NewU = NewU;
	SetUV_Parms.NewUL = NewUL;
	SetUV_Parms.NewV = NewV;
	SetUV_Parms.NewVL = NewVL;

	pFnSetUV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUV, &SetUV_Parms, NULL );

	pFnSetUV->FunctionFlags |= 0x400;
};

// Function Engine.SpriteComponent.SetSprite
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UTexture2D*              NewSprite                      ( CPF_Parm )

void USpriteComponent::SetSprite ( class UTexture2D* NewSprite )
{
	static UFunction* pFnSetSprite = NULL;

	if ( ! pFnSetSprite )
		pFnSetSprite = (UFunction*) UObject::GObjObjects()->Data[ 34278 ];

	USpriteComponent_execSetSprite_Parms SetSprite_Parms;
	SetSprite_Parms.NewSprite = NewSprite;

	pFnSetSprite->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSprite, &SetSprite_Parms, NULL );

	pFnSetSprite->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity
// [0x00020002] 
// Parameters infos:

void URadialBlurComponent::OnUpdatePropertyBlurOpacity ( )
{
	static UFunction* pFnOnUpdatePropertyBlurOpacity = NULL;

	if ( ! pFnOnUpdatePropertyBlurOpacity )
		pFnOnUpdatePropertyBlurOpacity = (UFunction*) UObject::GObjObjects()->Data[ 31780 ];

	URadialBlurComponent_execOnUpdatePropertyBlurOpacity_Parms OnUpdatePropertyBlurOpacity_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBlurOpacity, &OnUpdatePropertyBlurOpacity_Parms, NULL );
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent
// [0x00020002] 
// Parameters infos:

void URadialBlurComponent::OnUpdatePropertyBlurFalloffExponent ( )
{
	static UFunction* pFnOnUpdatePropertyBlurFalloffExponent = NULL;

	if ( ! pFnOnUpdatePropertyBlurFalloffExponent )
		pFnOnUpdatePropertyBlurFalloffExponent = (UFunction*) UObject::GObjObjects()->Data[ 31779 ];

	URadialBlurComponent_execOnUpdatePropertyBlurFalloffExponent_Parms OnUpdatePropertyBlurFalloffExponent_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBlurFalloffExponent, &OnUpdatePropertyBlurFalloffExponent_Parms, NULL );
};

// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale
// [0x00020002] 
// Parameters infos:

void URadialBlurComponent::OnUpdatePropertyBlurScale ( )
{
	static UFunction* pFnOnUpdatePropertyBlurScale = NULL;

	if ( ! pFnOnUpdatePropertyBlurScale )
		pFnOnUpdatePropertyBlurScale = (UFunction*) UObject::GObjObjects()->Data[ 31778 ];

	URadialBlurComponent_execOnUpdatePropertyBlurScale_Parms OnUpdatePropertyBlurScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBlurScale, &OnUpdatePropertyBlurScale_Parms, NULL );
};

// Function Engine.RadialBlurComponent.SetEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void URadialBlurComponent::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 31776 ];

	URadialBlurComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetBlurOpacity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InBlurOpacity                  ( CPF_Parm )

void URadialBlurComponent::SetBlurOpacity ( float InBlurOpacity )
{
	static UFunction* pFnSetBlurOpacity = NULL;

	if ( ! pFnSetBlurOpacity )
		pFnSetBlurOpacity = (UFunction*) UObject::GObjObjects()->Data[ 31774 ];

	URadialBlurComponent_execSetBlurOpacity_Parms SetBlurOpacity_Parms;
	SetBlurOpacity_Parms.InBlurOpacity = InBlurOpacity;

	pFnSetBlurOpacity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlurOpacity, &SetBlurOpacity_Parms, NULL );

	pFnSetBlurOpacity->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetBlurFalloffExponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InBlurFalloffExponent          ( CPF_Parm )

void URadialBlurComponent::SetBlurFalloffExponent ( float InBlurFalloffExponent )
{
	static UFunction* pFnSetBlurFalloffExponent = NULL;

	if ( ! pFnSetBlurFalloffExponent )
		pFnSetBlurFalloffExponent = (UFunction*) UObject::GObjObjects()->Data[ 31772 ];

	URadialBlurComponent_execSetBlurFalloffExponent_Parms SetBlurFalloffExponent_Parms;
	SetBlurFalloffExponent_Parms.InBlurFalloffExponent = InBlurFalloffExponent;

	pFnSetBlurFalloffExponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlurFalloffExponent, &SetBlurFalloffExponent_Parms, NULL );

	pFnSetBlurFalloffExponent->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetBlurScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          InBlurScale                    ( CPF_Parm )

void URadialBlurComponent::SetBlurScale ( float InBlurScale )
{
	static UFunction* pFnSetBlurScale = NULL;

	if ( ! pFnSetBlurScale )
		pFnSetBlurScale = (UFunction*) UObject::GObjObjects()->Data[ 31770 ];

	URadialBlurComponent_execSetBlurScale_Parms SetBlurScale_Parms;
	SetBlurScale_Parms.InBlurScale = InBlurScale;

	pFnSetBlurScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlurScale, &SetBlurScale_Parms, NULL );

	pFnSetBlurScale->FunctionFlags |= 0x400;
};

// Function Engine.RadialBlurComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      InMaterial                     ( CPF_Parm )

void URadialBlurComponent::SetMaterial ( class UMaterialInterface* InMaterial )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 31768 ];

	URadialBlurComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.InMaterial = InMaterial;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.SceneCaptureComponent.ForceRecapture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USceneCaptureComponent::ForceRecapture ( )
{
	static UFunction* pFnForceRecapture = NULL;

	if ( ! pFnForceRecapture )
		pFnForceRecapture = (UFunction*) UObject::GObjObjects()->Data[ 31524 ];

	USceneCaptureComponent_execForceRecapture_Parms ForceRecapture_Parms;

	pFnForceRecapture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceRecapture, &ForceRecapture_Parms, NULL );

	pFnForceRecapture->FunctionFlags |= 0x400;
};

// Function Engine.SceneCaptureComponent.SetEnabled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void USceneCaptureComponent::SetEnabled ( unsigned long bEnable )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 31499 ];

	USceneCaptureComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bEnable = bEnable;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.SceneCaptureComponent.SetFrameRate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewFrameRate                   ( CPF_Parm )

void USceneCaptureComponent::SetFrameRate ( float NewFrameRate )
{
	static UFunction* pFnSetFrameRate = NULL;

	if ( ! pFnSetFrameRate )
		pFnSetFrameRate = (UFunction*) UObject::GObjObjects()->Data[ 31521 ];

	USceneCaptureComponent_execSetFrameRate_Parms SetFrameRate_Parms;
	SetFrameRate_Parms.NewFrameRate = NewFrameRate;

	pFnSetFrameRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFrameRate, &SetFrameRate_Parms, NULL );

	pFnSetFrameRate->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetView
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void USceneCapture2DComponent::SetView ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnSetView = NULL;

	if ( ! pFnSetView )
		pFnSetView = (UFunction*) UObject::GObjObjects()->Data[ 32275 ];

	USceneCapture2DComponent_execSetView_Parms SetView_Parms;
	memcpy ( &SetView_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &SetView_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetView->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetView, &SetView_Parms, NULL );

	pFnSetView->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewFOV                         ( CPF_OptionalParm | CPF_Parm )
// float                          NewNearPlane                   ( CPF_OptionalParm | CPF_Parm )
// float                          NewFarPlane                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapture2DComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 32270 ];

	USceneCapture2DComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewFOV = NewFOV;
	SetCaptureParameters_Parms.NewNearPlane = NewNearPlane;
	SetCaptureParameters_Parms.NewFarPlane = NewFarPlane;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InFadingStartTimeSinceHit      ( CPF_Const | CPF_Parm )

void USceneCapture2DHitMaskComponent::SetFadingStartTimeSinceHit ( float InFadingStartTimeSinceHit )
{
	static UFunction* pFnSetFadingStartTimeSinceHit = NULL;

	if ( ! pFnSetFadingStartTimeSinceHit )
		pFnSetFadingStartTimeSinceHit = (UFunction*) UObject::GObjObjects()->Data[ 32297 ];

	USceneCapture2DHitMaskComponent_execSetFadingStartTimeSinceHit_Parms SetFadingStartTimeSinceHit_Parms;
	SetFadingStartTimeSinceHit_Parms.InFadingStartTimeSinceHit = InFadingStartTimeSinceHit;

	pFnSetFadingStartTimeSinceHit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFadingStartTimeSinceHit, &SetFadingStartTimeSinceHit_Parms, NULL );

	pFnSetFadingStartTimeSinceHit->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InMaskPosition                 ( CPF_Const | CPF_Parm )
// float                          InMaskRadius                   ( CPF_Const | CPF_Parm )
// struct FVector                 InStartupPosition              ( CPF_Const | CPF_Parm )
// unsigned long                  bOnlyWhenFacing                ( CPF_Const | CPF_Parm )

void USceneCapture2DHitMaskComponent::SetCaptureParameters ( struct FVector InMaskPosition, float InMaskRadius, struct FVector InStartupPosition, unsigned long bOnlyWhenFacing )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 32292 ];

	USceneCapture2DHitMaskComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	memcpy ( &SetCaptureParameters_Parms.InMaskPosition, &InMaskPosition, 0xC );
	SetCaptureParameters_Parms.InMaskRadius = InMaskRadius;
	memcpy ( &SetCaptureParameters_Parms.InStartupPosition, &InStartupPosition, 0xC );
	SetCaptureParameters_Parms.bOnlyWhenFacing = bOnlyWhenFacing;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  InTextureTarget                ( CPF_Const | CPF_Parm )

void USceneCapture2DHitMaskComponent::SetCaptureTargetTexture ( class UTextureRenderTarget2D* InTextureTarget )
{
	static UFunction* pFnSetCaptureTargetTexture = NULL;

	if ( ! pFnSetCaptureTargetTexture )
		pFnSetCaptureTargetTexture = (UFunction*) UObject::GObjObjects()->Data[ 32290 ];

	USceneCapture2DHitMaskComponent_execSetCaptureTargetTexture_Parms SetCaptureTargetTexture_Parms;
	SetCaptureTargetTexture_Parms.InTextureTarget = InTextureTarget;

	pFnSetCaptureTargetTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureTargetTexture, &SetCaptureTargetTexture_Parms, NULL );

	pFnSetCaptureTargetTexture->FunctionFlags |= 0x400;
};

// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  NewTextureTarget               ( CPF_OptionalParm | CPF_Parm )
// float                          NewScaleFOV                    ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  NewViewDest                    ( CPF_OptionalParm | CPF_Parm )

void USceneCapturePortalComponent::SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest )
{
	static UFunction* pFnSetCaptureParameters = NULL;

	if ( ! pFnSetCaptureParameters )
		pFnSetCaptureParameters = (UFunction*) UObject::GObjObjects()->Data[ 31534 ];

	USceneCapturePortalComponent_execSetCaptureParameters_Parms SetCaptureParameters_Parms;
	SetCaptureParameters_Parms.NewTextureTarget = NewTextureTarget;
	SetCaptureParameters_Parms.NewScaleFOV = NewScaleFOV;
	SetCaptureParameters_Parms.NewViewDest = NewViewDest;

	pFnSetCaptureParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCaptureParameters, &SetCaptureParameters_Parms, NULL );

	pFnSetCaptureParameters->FunctionFlags |= 0x400;
};

// Function Engine.ActorFactory.PostCreateActor
// [0x00024900] ( FUNC_Event )
// Parameters infos:
// class AActor*                  NewActor                       ( CPF_Parm )
// class USeqAct_ActorFactory*    ActorFactoryData               ( CPF_Const | CPF_OptionalParm | CPF_Parm )

void UActorFactory::eventPostCreateActor ( class AActor* NewActor, class USeqAct_ActorFactory* ActorFactoryData )
{
	static UFunction* pFnPostCreateActor = NULL;

	if ( ! pFnPostCreateActor )
		pFnPostCreateActor = (UFunction*) UObject::GObjObjects()->Data[ 8846 ];

	UActorFactory_eventPostCreateActor_Parms PostCreateActor_Parms;
	PostCreateActor_Parms.NewActor = NewActor;
	PostCreateActor_Parms.ActorFactoryData = ActorFactoryData;

	this->ProcessEvent ( pFnPostCreateActor, &PostCreateActor_Parms, NULL );
};

// Function Engine.SoundCue.GetCueDuration
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USoundCue::GetCueDuration ( )
{
	static UFunction* pFnGetCueDuration = NULL;

	if ( ! pFnGetCueDuration )
		pFnGetCueDuration = (UFunction*) UObject::GObjObjects()->Data[ 13793 ];

	USoundCue_execGetCueDuration_Parms GetCueDuration_Parms;

	pFnGetCueDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCueDuration, &GetCueDuration_Parms, NULL );

	pFnGetCueDuration->FunctionFlags |= 0x400;

	return GetCueDuration_Parms.ReturnValue;
};

// Function Engine.ArchetypePool.SpawnClass
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  InClass                        ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* UArchetypePool::SpawnClass ( class UClass* InClass, class AActor* SpawnOwner, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawnClass = NULL;

	if ( ! pFnSpawnClass )
		pFnSpawnClass = (UFunction*) UObject::GObjObjects()->Data[ 15510 ];

	UArchetypePool_execSpawnClass_Parms SpawnClass_Parms;
	SpawnClass_Parms.InClass = InClass;
	SpawnClass_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &SpawnClass_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnClass_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnClass_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnSpawnClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnClass, &SpawnClass_Parms, NULL );

	pFnSpawnClass->FunctionFlags |= 0x400;

	return SpawnClass_Parms.ReturnValue;
};

// Function Engine.ArchetypePool.SpawnArchetype
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class AActor*                  InArchetype                    ( CPF_Parm )
// class AActor*                  SpawnOwner                     ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNoCollisionFail               ( CPF_OptionalParm | CPF_Parm )

class AActor* UArchetypePool::SpawnArchetype ( class AActor* InArchetype, class AActor* SpawnOwner, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bNoCollisionFail )
{
	static UFunction* pFnSpawnArchetype = NULL;

	if ( ! pFnSpawnArchetype )
		pFnSpawnArchetype = (UFunction*) UObject::GObjObjects()->Data[ 15503 ];

	UArchetypePool_execSpawnArchetype_Parms SpawnArchetype_Parms;
	SpawnArchetype_Parms.InArchetype = InArchetype;
	SpawnArchetype_Parms.SpawnOwner = SpawnOwner;
	memcpy ( &SpawnArchetype_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnArchetype_Parms.SpawnRotation, &SpawnRotation, 0xC );
	SpawnArchetype_Parms.bNoCollisionFail = bNoCollisionFail;

	pFnSpawnArchetype->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnArchetype, &SpawnArchetype_Parms, NULL );

	pFnSpawnArchetype->FunctionFlags |= 0x400;

	return SpawnArchetype_Parms.ReturnValue;
};

// Function Engine.ArchetypePool.InstanceClass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  InClass                        ( CPF_Parm )

class UObject* UArchetypePool::InstanceClass ( class UClass* InClass )
{
	static UFunction* pFnInstanceClass = NULL;

	if ( ! pFnInstanceClass )
		pFnInstanceClass = (UFunction*) UObject::GObjObjects()->Data[ 15500 ];

	UArchetypePool_execInstanceClass_Parms InstanceClass_Parms;
	InstanceClass_Parms.InClass = InClass;

	pFnInstanceClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceClass, &InstanceClass_Parms, NULL );

	pFnInstanceClass->FunctionFlags |= 0x400;

	return InstanceClass_Parms.ReturnValue;
};

// Function Engine.ArchetypePool.InstanceArchetype
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UObject*                 InArchetype                    ( CPF_Parm )

class UObject* UArchetypePool::InstanceArchetype ( class UObject* InArchetype )
{
	static UFunction* pFnInstanceArchetype = NULL;

	if ( ! pFnInstanceArchetype )
		pFnInstanceArchetype = (UFunction*) UObject::GObjObjects()->Data[ 15497 ];

	UArchetypePool_execInstanceArchetype_Parms InstanceArchetype_Parms;
	InstanceArchetype_Parms.InArchetype = InArchetype;

	pFnInstanceArchetype->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInstanceArchetype, &InstanceArchetype_Parms, NULL );

	pFnInstanceArchetype->FunctionFlags |= 0x400;

	return InstanceArchetype_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawDebugGraph
// [0x00020002] 
// Parameters infos:
// struct FString                 Title                          ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          ValueX                         ( CPF_Parm )
// float                          ValueY                         ( CPF_Parm )
// float                          UL_X                           ( CPF_Parm )
// float                          UL_Y                           ( CPF_Parm )
// float                          W                              ( CPF_Parm )
// float                          H                              ( CPF_Parm )
// struct FVector2D               RangeX                         ( CPF_Parm )
// struct FVector2D               RangeY                         ( CPF_Parm )

void UCanvas::DrawDebugGraph ( struct FString Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, struct FVector2D RangeX, struct FVector2D RangeY )
{
	static UFunction* pFnDrawDebugGraph = NULL;

	if ( ! pFnDrawDebugGraph )
		pFnDrawDebugGraph = (UFunction*) UObject::GObjObjects()->Data[ 16347 ];

	UCanvas_execDrawDebugGraph_Parms DrawDebugGraph_Parms;
	memcpy ( &DrawDebugGraph_Parms.Title, &Title, 0xC );
	DrawDebugGraph_Parms.ValueX = ValueX;
	DrawDebugGraph_Parms.ValueY = ValueY;
	DrawDebugGraph_Parms.UL_X = UL_X;
	DrawDebugGraph_Parms.UL_Y = UL_Y;
	DrawDebugGraph_Parms.W = W;
	DrawDebugGraph_Parms.H = H;
	memcpy ( &DrawDebugGraph_Parms.RangeX, &RangeX, 0x8 );
	memcpy ( &DrawDebugGraph_Parms.RangeY, &RangeY, 0x8 );

	this->ProcessEvent ( pFnDrawDebugGraph, &DrawDebugGraph_Parms, NULL );
};

// Function Engine.Canvas.DrawTextureDoubleLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Spacing                        ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// struct FColor                  AltLineColor                   ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureDoubleLine = NULL;

	if ( ! pFnDrawTextureDoubleLine )
		pFnDrawTextureDoubleLine = (UFunction*) UObject::GObjObjects()->Data[ 16334 ];

	UCanvas_execDrawTextureDoubleLine_Parms DrawTextureDoubleLine_Parms;
	memcpy ( &DrawTextureDoubleLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureDoubleLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureDoubleLine_Parms.Perc = Perc;
	DrawTextureDoubleLine_Parms.Spacing = Spacing;
	DrawTextureDoubleLine_Parms.Width = Width;
	memcpy ( &DrawTextureDoubleLine_Parms.LineColor, &LineColor, 0x4 );
	memcpy ( &DrawTextureDoubleLine_Parms.AltLineColor, &AltLineColor, 0x4 );
	DrawTextureDoubleLine_Parms.Tex = Tex;
	DrawTextureDoubleLine_Parms.U = U;
	DrawTextureDoubleLine_Parms.V = V;
	DrawTextureDoubleLine_Parms.UL = UL;
	DrawTextureDoubleLine_Parms.VL = VL;

	pFnDrawTextureDoubleLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureDoubleLine, &DrawTextureDoubleLine_Parms, NULL );

	pFnDrawTextureDoubleLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTextureLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 StartPoint                     ( CPF_Parm )
// struct FVector                 EndPoint                       ( CPF_Parm )
// float                          Perc                           ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )
// class UTexture*                LineTexture                    ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )

void UCanvas::DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL )
{
	static UFunction* pFnDrawTextureLine = NULL;

	if ( ! pFnDrawTextureLine )
		pFnDrawTextureLine = (UFunction*) UObject::GObjObjects()->Data[ 16323 ];

	UCanvas_execDrawTextureLine_Parms DrawTextureLine_Parms;
	memcpy ( &DrawTextureLine_Parms.StartPoint, &StartPoint, 0xC );
	memcpy ( &DrawTextureLine_Parms.EndPoint, &EndPoint, 0xC );
	DrawTextureLine_Parms.Perc = Perc;
	DrawTextureLine_Parms.Width = Width;
	memcpy ( &DrawTextureLine_Parms.LineColor, &LineColor, 0x4 );
	DrawTextureLine_Parms.LineTexture = LineTexture;
	DrawTextureLine_Parms.U = U;
	DrawTextureLine_Parms.V = V;
	DrawTextureLine_Parms.UL = UL;
	DrawTextureLine_Parms.VL = VL;

	pFnDrawTextureLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTextureLine, &DrawTextureLine_Parms, NULL );

	pFnDrawTextureLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.Draw2DLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          Y1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y2                             ( CPF_Parm )
// struct FColor                  LineColor                      ( CPF_Parm )

void UCanvas::Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor )
{
	static UFunction* pFnDraw2DLine = NULL;

	if ( ! pFnDraw2DLine )
		pFnDraw2DLine = (UFunction*) UObject::GObjObjects()->Data[ 16317 ];

	UCanvas_execDraw2DLine_Parms Draw2DLine_Parms;
	Draw2DLine_Parms.X1 = X1;
	Draw2DLine_Parms.Y1 = Y1;
	Draw2DLine_Parms.X2 = X2;
	Draw2DLine_Parms.Y2 = Y2;
	memcpy ( &Draw2DLine_Parms.LineColor, &LineColor, 0x4 );

	pFnDraw2DLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDraw2DLine, &Draw2DLine_Parms, NULL );

	pFnDraw2DLine->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.SetDrawColorStruct
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FColor                  C                              ( CPF_Parm )

void UCanvas::SetDrawColorStruct ( struct FColor C )
{
	static UFunction* pFnSetDrawColorStruct = NULL;

	if ( ! pFnSetDrawColorStruct )
		pFnSetDrawColorStruct = (UFunction*) UObject::GObjObjects()->Data[ 16315 ];

	UCanvas_execSetDrawColorStruct_Parms SetDrawColorStruct_Parms;
	memcpy ( &SetDrawColorStruct_Parms.C, &C, 0x4 );

	this->ProcessEvent ( pFnSetDrawColorStruct, &SetDrawColorStruct_Parms, NULL );
};

// Function Engine.Canvas.SetDrawColor
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  R                              ( CPF_Parm )
// unsigned char                  G                              ( CPF_Parm )
// unsigned char                  B                              ( CPF_Parm )
// unsigned char                  A                              ( CPF_OptionalParm | CPF_Parm )

void UCanvas::SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A )
{
	static UFunction* pFnSetDrawColor = NULL;

	if ( ! pFnSetDrawColor )
		pFnSetDrawColor = (UFunction*) UObject::GObjObjects()->Data[ 6986 ];

	UCanvas_execSetDrawColor_Parms SetDrawColor_Parms;
	SetDrawColor_Parms.R = R;
	SetDrawColor_Parms.G = G;
	SetDrawColor_Parms.B = B;
	SetDrawColor_Parms.A = A;

	pFnSetDrawColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDrawColor, &SetDrawColor_Parms, NULL );

	pFnSetDrawColor->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawBox
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )

void UCanvas::DrawBox ( float Width, float Height )
{
	static UFunction* pFnDrawBox = NULL;

	if ( ! pFnDrawBox )
		pFnDrawBox = (UFunction*) UObject::GObjObjects()->Data[ 16306 ];

	UCanvas_execDrawBox_Parms DrawBox_Parms;
	DrawBox_Parms.Width = Width;
	DrawBox_Parms.Height = Height;

	this->ProcessEvent ( pFnDrawBox, &DrawBox_Parms, NULL );
};

// Function Engine.Canvas.DrawRect
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// float                          RectX                          ( CPF_Parm )
// float                          RectY                          ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRect ( float RectX, float RectY, class UTexture* Tex )
{
	static UFunction* pFnDrawRect = NULL;

	if ( ! pFnDrawRect )
		pFnDrawRect = (UFunction*) UObject::GObjObjects()->Data[ 16302 ];

	UCanvas_execDrawRect_Parms DrawRect_Parms;
	DrawRect_Parms.RectX = RectX;
	DrawRect_Parms.RectY = RectY;
	DrawRect_Parms.Tex = Tex;

	this->ProcessEvent ( pFnDrawRect, &DrawRect_Parms, NULL );
};

// Function Engine.Canvas.DrawPixel
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// struct FLinearColor            PixelColor                     ( CPF_Parm )
// unsigned char                  BlendMode                      ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawPixel ( int X, int Y, struct FLinearColor PixelColor, unsigned char BlendMode )
{
	static UFunction* pFnDrawPixel = NULL;

	if ( ! pFnDrawPixel )
		pFnDrawPixel = (UFunction*) UObject::GObjObjects()->Data[ 16297 ];

	UCanvas_execDrawPixel_Parms DrawPixel_Parms;
	DrawPixel_Parms.X = X;
	DrawPixel_Parms.Y = Y;
	memcpy ( &DrawPixel_Parms.PixelColor, &PixelColor, 0x10 );
	DrawPixel_Parms.BlendMode = BlendMode;

	pFnDrawPixel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPixel, &DrawPixel_Parms, NULL );

	pFnDrawPixel->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawIcon
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale )
{
	static UFunction* pFnDrawIcon = NULL;

	if ( ! pFnDrawIcon )
		pFnDrawIcon = (UFunction*) UObject::GObjObjects()->Data[ 16292 ];

	UCanvas_execDrawIcon_Parms DrawIcon_Parms;
	memcpy ( &DrawIcon_Parms.Icon, &Icon, 0x14 );
	DrawIcon_Parms.X = X;
	DrawIcon_Parms.Y = Y;
	DrawIcon_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawIcon, &DrawIcon_Parms, NULL );
};

// Function Engine.Canvas.DrawScaledIcon
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             Icon                           ( CPF_Parm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// struct FVector                 Scale                          ( CPF_Parm )

void UCanvas::DrawScaledIcon ( struct FCanvasIcon Icon, float X, float Y, struct FVector Scale )
{
	static UFunction* pFnDrawScaledIcon = NULL;

	if ( ! pFnDrawScaledIcon )
		pFnDrawScaledIcon = (UFunction*) UObject::GObjObjects()->Data[ 16287 ];

	UCanvas_execDrawScaledIcon_Parms DrawScaledIcon_Parms;
	memcpy ( &DrawScaledIcon_Parms.Icon, &Icon, 0x14 );
	DrawScaledIcon_Parms.X = X;
	DrawScaledIcon_Parms.Y = Y;
	memcpy ( &DrawScaledIcon_Parms.Scale, &Scale, 0xC );

	this->ProcessEvent ( pFnDrawScaledIcon, &DrawScaledIcon_Parms, NULL );
};

// Function Engine.Canvas.MakeIcon
// [0x00824003] ( FUNC_Final )
// Parameters infos:
// struct FCanvasIcon             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTexture*                Texture                        ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )

struct FCanvasIcon UCanvas::MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL )
{
	static UFunction* pFnMakeIcon = NULL;

	if ( ! pFnMakeIcon )
		pFnMakeIcon = (UFunction*) UObject::GObjObjects()->Data[ 16274 ];

	UCanvas_execMakeIcon_Parms MakeIcon_Parms;
	MakeIcon_Parms.Texture = Texture;
	MakeIcon_Parms.U = U;
	MakeIcon_Parms.V = V;
	MakeIcon_Parms.UL = UL;
	MakeIcon_Parms.VL = VL;

	this->ProcessEvent ( pFnMakeIcon, &MakeIcon_Parms, NULL );

	return MakeIcon_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawBlendedTile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// unsigned char                  Blend                          ( CPF_Parm )

void UCanvas::DrawBlendedTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, unsigned char Blend )
{
	static UFunction* pFnDrawBlendedTile = NULL;

	if ( ! pFnDrawBlendedTile )
		pFnDrawBlendedTile = (UFunction*) UObject::GObjObjects()->Data[ 16265 ];

	UCanvas_execDrawBlendedTile_Parms DrawBlendedTile_Parms;
	DrawBlendedTile_Parms.Tex = Tex;
	DrawBlendedTile_Parms.XL = XL;
	DrawBlendedTile_Parms.YL = YL;
	DrawBlendedTile_Parms.U = U;
	DrawBlendedTile_Parms.V = V;
	DrawBlendedTile_Parms.UL = UL;
	DrawBlendedTile_Parms.VL = VL;
	DrawBlendedTile_Parms.Blend = Blend;

	pFnDrawBlendedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawBlendedTile, &DrawBlendedTile_Parms, NULL );

	pFnDrawBlendedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTexture
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void UCanvas::DrawTexture ( class UTexture* Tex, float Scale )
{
	static UFunction* pFnDrawTexture = NULL;

	if ( ! pFnDrawTexture )
		pFnDrawTexture = (UFunction*) UObject::GObjObjects()->Data[ 16262 ];

	UCanvas_execDrawTexture_Parms DrawTexture_Parms;
	DrawTexture_Parms.Tex = Tex;
	DrawTexture_Parms.Scale = Scale;

	this->ProcessEvent ( pFnDrawTexture, &DrawTexture_Parms, NULL );
};

// Function Engine.Canvas.PopMaskRegion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UCanvas::PopMaskRegion ( )
{
	static UFunction* pFnPopMaskRegion = NULL;

	if ( ! pFnPopMaskRegion )
		pFnPopMaskRegion = (UFunction*) UObject::GObjObjects()->Data[ 16261 ];

	UCanvas_execPopMaskRegion_Parms PopMaskRegion_Parms;

	pFnPopMaskRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopMaskRegion, &PopMaskRegion_Parms, NULL );

	pFnPopMaskRegion->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PushMaskRegion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void UCanvas::PushMaskRegion ( float X, float Y, float XL, float YL )
{
	static UFunction* pFnPushMaskRegion = NULL;

	if ( ! pFnPushMaskRegion )
		pFnPushMaskRegion = (UFunction*) UObject::GObjObjects()->Data[ 16256 ];

	UCanvas_execPushMaskRegion_Parms PushMaskRegion_Parms;
	PushMaskRegion_Parms.X = X;
	PushMaskRegion_Parms.Y = Y;
	PushMaskRegion_Parms.XL = XL;
	PushMaskRegion_Parms.YL = YL;

	pFnPushMaskRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushMaskRegion, &PushMaskRegion_Parms, NULL );

	pFnPushMaskRegion->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.SetClip
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetClip ( float X, float Y )
{
	static UFunction* pFnSetClip = NULL;

	if ( ! pFnSetClip )
		pFnSetClip = (UFunction*) UObject::GObjObjects()->Data[ 16253 ];

	UCanvas_execSetClip_Parms SetClip_Parms;
	SetClip_Parms.X = X;
	SetClip_Parms.Y = Y;

	this->ProcessEvent ( pFnSetClip, &SetClip_Parms, NULL );
};

// Function Engine.Canvas.SetOrigin
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void UCanvas::SetOrigin ( float X, float Y )
{
	static UFunction* pFnSetOrigin = NULL;

	if ( ! pFnSetOrigin )
		pFnSetOrigin = (UFunction*) UObject::GObjObjects()->Data[ 16250 ];

	UCanvas_execSetOrigin_Parms SetOrigin_Parms;
	SetOrigin_Parms.X = X;
	SetOrigin_Parms.Y = Y;

	this->ProcessEvent ( pFnSetOrigin, &SetOrigin_Parms, NULL );
};

// Function Engine.Canvas.SetPos
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          PosX                           ( CPF_Parm )
// float                          PosY                           ( CPF_Parm )
// float                          PosZ                           ( CPF_OptionalParm | CPF_Parm )

void UCanvas::SetPos ( float PosX, float PosY, float PosZ )
{
	static UFunction* pFnSetPos = NULL;

	if ( ! pFnSetPos )
		pFnSetPos = (UFunction*) UObject::GObjObjects()->Data[ 6985 ];

	UCanvas_execSetPos_Parms SetPos_Parms;
	SetPos_Parms.PosX = PosX;
	SetPos_Parms.PosY = PosY;
	SetPos_Parms.PosZ = PosZ;

	pFnSetPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPos, &SetPos_Parms, NULL );

	pFnSetPos->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.GetDefaultCanvasFont
// [0x00020002] 
// Parameters infos:
// class UFont*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFont* UCanvas::GetDefaultCanvasFont ( )
{
	static UFunction* pFnGetDefaultCanvasFont = NULL;

	if ( ! pFnGetDefaultCanvasFont )
		pFnGetDefaultCanvasFont = (UFunction*) UObject::GObjObjects()->Data[ 16245 ];

	UCanvas_execGetDefaultCanvasFont_Parms GetDefaultCanvasFont_Parms;

	this->ProcessEvent ( pFnGetDefaultCanvasFont, &GetDefaultCanvasFont_Parms, NULL );

	return GetDefaultCanvasFont_Parms.ReturnValue;
};

// Function Engine.Canvas.Reset
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bKeepOrigin                    ( CPF_OptionalParm | CPF_Parm )

void UCanvas::eventReset ( unsigned long bKeepOrigin )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 16243 ];

	UCanvas_eventReset_Parms Reset_Parms;
	Reset_Parms.bKeepOrigin = bKeepOrigin;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Canvas.Push3DTransform
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Translation                    ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          FOV                            ( CPF_OptionalParm | CPF_Parm )

void UCanvas::Push3DTransform ( struct FVector Translation, struct FRotator Rotation, float FOV )
{
	static UFunction* pFnPush3DTransform = NULL;

	if ( ! pFnPush3DTransform )
		pFnPush3DTransform = (UFunction*) UObject::GObjObjects()->Data[ 16239 ];

	UCanvas_execPush3DTransform_Parms Push3DTransform_Parms;
	memcpy ( &Push3DTransform_Parms.Translation, &Translation, 0xC );
	memcpy ( &Push3DTransform_Parms.Rotation, &Rotation, 0xC );
	Push3DTransform_Parms.FOV = FOV;

	pFnPush3DTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPush3DTransform, &Push3DTransform_Parms, NULL );

	pFnPush3DTransform->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PopTransform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UCanvas::PopTransform ( )
{
	static UFunction* pFnPopTransform = NULL;

	if ( ! pFnPopTransform )
		pFnPopTransform = (UFunction*) UObject::GObjObjects()->Data[ 16238 ];

	UCanvas_execPopTransform_Parms PopTransform_Parms;

	pFnPopTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopTransform, &PopTransform_Parms, NULL );

	pFnPopTransform->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PushTranslationMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 TranslationVector              ( CPF_Parm )

void UCanvas::PushTranslationMatrix ( struct FVector TranslationVector )
{
	static UFunction* pFnPushTranslationMatrix = NULL;

	if ( ! pFnPushTranslationMatrix )
		pFnPushTranslationMatrix = (UFunction*) UObject::GObjObjects()->Data[ 16236 ];

	UCanvas_execPushTranslationMatrix_Parms PushTranslationMatrix_Parms;
	memcpy ( &PushTranslationMatrix_Parms.TranslationVector, &TranslationVector, 0xC );

	pFnPushTranslationMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushTranslationMatrix, &PushTranslationMatrix_Parms, NULL );

	pFnPushTranslationMatrix->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ScreenPos                      ( CPF_Parm )
// struct FVector                 WorldOrigin                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 WorldDirection                 ( CPF_Parm | CPF_OutParm )

void UCanvas::DeProject ( struct FVector2D ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = (UFunction*) UObject::GObjObjects()->Data[ 16232 ];

	UCanvas_execDeProject_Parms DeProject_Parms;
	memcpy ( &DeProject_Parms.ScreenPos, &ScreenPos, 0x8 );

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( WorldOrigin )
		memcpy ( WorldOrigin, &DeProject_Parms.WorldOrigin, 0xC );

	if ( WorldDirection )
		memcpy ( WorldDirection, &DeProject_Parms.WorldDirection, 0xC );
};

// Function Engine.Canvas.Project
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )

struct FVector UCanvas::Project ( struct FVector Location )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = (UFunction*) UObject::GObjObjects()->Data[ 12766 ];

	UCanvas_execProject_Parms Project_Parms;
	memcpy ( &Project_Parms.Location, &Location, 0xC );

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	return Project_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawText
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  CR                             ( CPF_OptionalParm | CPF_Parm )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )
// struct FFontRenderInfo         RenderInfo                     ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void UCanvas::DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 6988 ];

	UCanvas_execDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.Text, &Text, 0xC );
	DrawText_Parms.CR = CR;
	DrawText_Parms.XScale = XScale;
	DrawText_Parms.YScale = YScale;

	pFnDrawText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );

	pFnDrawText->FunctionFlags |= 0x400;

	if ( RenderInfo )
		memcpy ( RenderInfo, &DrawText_Parms.RenderInfo, 0x28 );
};

// Function Engine.Canvas.TextSize
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          XScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          YScale                         ( CPF_OptionalParm | CPF_Parm )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::TextSize ( struct FString String, float XScale, float YScale, float* XL, float* YL )
{
	static UFunction* pFnTextSize = NULL;

	if ( ! pFnTextSize )
		pFnTextSize = (UFunction*) UObject::GObjObjects()->Data[ 16220 ];

	UCanvas_execTextSize_Parms TextSize_Parms;
	memcpy ( &TextSize_Parms.String, &String, 0xC );
	TextSize_Parms.XScale = XScale;
	TextSize_Parms.YScale = YScale;

	pFnTextSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTextSize, &TextSize_Parms, NULL );

	pFnTextSize->FunctionFlags |= 0x400;

	if ( XL )
		*XL = TextSize_Parms.XL;

	if ( YL )
		*YL = TextSize_Parms.YL;
};

// Function Engine.Canvas.StrLen
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 String                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// float                          XL                             ( CPF_Parm | CPF_OutParm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )

void UCanvas::StrLen ( struct FString String, float* XL, float* YL )
{
	static UFunction* pFnStrLen = NULL;

	if ( ! pFnStrLen )
		pFnStrLen = (UFunction*) UObject::GObjObjects()->Data[ 15711 ];

	UCanvas_execStrLen_Parms StrLen_Parms;
	memcpy ( &StrLen_Parms.String, &String, 0xC );

	pFnStrLen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStrLen, &StrLen_Parms, NULL );

	pFnStrLen->FunctionFlags |= 0x400;

	if ( XL )
		*XL = StrLen_Parms.XL;

	if ( YL )
		*YL = StrLen_Parms.YL;
};

// Function Engine.Canvas.CreateFontRenderInfo
// [0x00826003] ( FUNC_Final )
// Parameters infos:
// struct FFontRenderInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bClipText                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bEnableShadow                  ( CPF_OptionalParm | CPF_Parm )
// struct FLinearColor            GlowColor                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               GlowOuterRadius                ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               GlowInnerRadius                ( CPF_OptionalParm | CPF_Parm )

struct FFontRenderInfo UCanvas::CreateFontRenderInfo ( unsigned long bClipText, unsigned long bEnableShadow, struct FLinearColor GlowColor, struct FVector2D GlowOuterRadius, struct FVector2D GlowInnerRadius )
{
	static UFunction* pFnCreateFontRenderInfo = NULL;

	if ( ! pFnCreateFontRenderInfo )
		pFnCreateFontRenderInfo = (UFunction*) UObject::GObjObjects()->Data[ 16209 ];

	UCanvas_execCreateFontRenderInfo_Parms CreateFontRenderInfo_Parms;
	CreateFontRenderInfo_Parms.bClipText = bClipText;
	CreateFontRenderInfo_Parms.bEnableShadow = bEnableShadow;
	memcpy ( &CreateFontRenderInfo_Parms.GlowColor, &GlowColor, 0x10 );
	memcpy ( &CreateFontRenderInfo_Parms.GlowOuterRadius, &GlowOuterRadius, 0x8 );
	memcpy ( &CreateFontRenderInfo_Parms.GlowInnerRadius, &GlowInnerRadius, 0x8 );

	this->ProcessEvent ( pFnCreateFontRenderInfo, &CreateFontRenderInfo_Parms, NULL );

	return CreateFontRenderInfo_Parms.ReturnValue;
};

// Function Engine.Canvas.DrawTris
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// TArray< struct FCanvasUVTri >  Triangles                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  InColor                        ( CPF_Parm )

void UCanvas::DrawTris ( class UTexture* Tex, TArray< struct FCanvasUVTri > Triangles, struct FColor InColor )
{
	static UFunction* pFnDrawTris = NULL;

	if ( ! pFnDrawTris )
		pFnDrawTris = (UFunction*) UObject::GObjObjects()->Data[ 16204 ];

	UCanvas_execDrawTris_Parms DrawTris_Parms;
	DrawTris_Parms.Tex = Tex;
	memcpy ( &DrawTris_Parms.Triangles, &Triangles, 0xC );
	memcpy ( &DrawTris_Parms.InColor, &InColor, 0x4 );

	pFnDrawTris->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTris, &DrawTris_Parms, NULL );

	pFnDrawTris->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTileStretched
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStretchHorizontally           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStretchVertically             ( CPF_OptionalParm | CPF_Parm )
// float                          ScalingFactor                  ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor )
{
	static UFunction* pFnDrawTileStretched = NULL;

	if ( ! pFnDrawTileStretched )
		pFnDrawTileStretched = (UFunction*) UObject::GObjObjects()->Data[ 16192 ];

	UCanvas_execDrawTileStretched_Parms DrawTileStretched_Parms;
	DrawTileStretched_Parms.Tex = Tex;
	DrawTileStretched_Parms.XL = XL;
	DrawTileStretched_Parms.YL = YL;
	DrawTileStretched_Parms.U = U;
	DrawTileStretched_Parms.V = V;
	DrawTileStretched_Parms.UL = UL;
	DrawTileStretched_Parms.VL = VL;
	memcpy ( &DrawTileStretched_Parms.LColor, &LColor, 0x10 );
	DrawTileStretched_Parms.bStretchHorizontally = bStretchHorizontally;
	DrawTileStretched_Parms.bStretchVertically = bStretchVertically;
	DrawTileStretched_Parms.ScalingFactor = ScalingFactor;

	pFnDrawTileStretched->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTileStretched, &DrawTileStretched_Parms, NULL );

	pFnDrawTileStretched->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTimer
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          StartTime                      ( CPF_Parm )
// float                          TotalTime                      ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Blend                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTimer ( class UTexture* Tex, float StartTime, float TotalTime, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned char Blend )
{
	static UFunction* pFnDrawTimer = NULL;

	if ( ! pFnDrawTimer )
		pFnDrawTimer = (UFunction*) UObject::GObjObjects()->Data[ 16180 ];

	UCanvas_execDrawTimer_Parms DrawTimer_Parms;
	DrawTimer_Parms.Tex = Tex;
	DrawTimer_Parms.StartTime = StartTime;
	DrawTimer_Parms.TotalTime = TotalTime;
	DrawTimer_Parms.XL = XL;
	DrawTimer_Parms.YL = YL;
	DrawTimer_Parms.U = U;
	DrawTimer_Parms.V = V;
	DrawTimer_Parms.UL = UL;
	DrawTimer_Parms.VL = VL;
	memcpy ( &DrawTimer_Parms.LColor, &LColor, 0x10 );
	DrawTimer_Parms.Blend = Blend;

	pFnDrawTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTimer, &DrawTimer_Parms, NULL );

	pFnDrawTimer->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedMaterialTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedMaterialTile = NULL;

	if ( ! pFnDrawRotatedMaterialTile )
		pFnDrawRotatedMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 16169 ];

	UCanvas_execDrawRotatedMaterialTile_Parms DrawRotatedMaterialTile_Parms;
	DrawRotatedMaterialTile_Parms.Mat = Mat;
	memcpy ( &DrawRotatedMaterialTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedMaterialTile_Parms.XL = XL;
	DrawRotatedMaterialTile_Parms.YL = YL;
	DrawRotatedMaterialTile_Parms.U = U;
	DrawRotatedMaterialTile_Parms.V = V;
	DrawRotatedMaterialTile_Parms.UL = UL;
	DrawRotatedMaterialTile_Parms.VL = VL;
	DrawRotatedMaterialTile_Parms.AnchorX = AnchorX;
	DrawRotatedMaterialTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedMaterialTile, &DrawRotatedMaterialTile_Parms, NULL );

	pFnDrawRotatedMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawRotatedTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// struct FRotator                Rotation                       ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// float                          AnchorX                        ( CPF_OptionalParm | CPF_Parm )
// float                          AnchorY                        ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY )
{
	static UFunction* pFnDrawRotatedTile = NULL;

	if ( ! pFnDrawRotatedTile )
		pFnDrawRotatedTile = (UFunction*) UObject::GObjObjects()->Data[ 16158 ];

	UCanvas_execDrawRotatedTile_Parms DrawRotatedTile_Parms;
	DrawRotatedTile_Parms.Tex = Tex;
	memcpy ( &DrawRotatedTile_Parms.Rotation, &Rotation, 0xC );
	DrawRotatedTile_Parms.XL = XL;
	DrawRotatedTile_Parms.YL = YL;
	DrawRotatedTile_Parms.U = U;
	DrawRotatedTile_Parms.V = V;
	DrawRotatedTile_Parms.UL = UL;
	DrawRotatedTile_Parms.VL = VL;
	DrawRotatedTile_Parms.AnchorX = AnchorX;
	DrawRotatedTile_Parms.AnchorY = AnchorY;

	pFnDrawRotatedTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawRotatedTile, &DrawRotatedTile_Parms, NULL );

	pFnDrawRotatedTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawMaterialTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_OptionalParm | CPF_Parm )
// float                          V                              ( CPF_OptionalParm | CPF_Parm )
// float                          UL                             ( CPF_OptionalParm | CPF_Parm )
// float                          VL                             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bClipTile                      ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, unsigned long bClipTile )
{
	static UFunction* pFnDrawMaterialTile = NULL;

	if ( ! pFnDrawMaterialTile )
		pFnDrawMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 16149 ];

	UCanvas_execDrawMaterialTile_Parms DrawMaterialTile_Parms;
	DrawMaterialTile_Parms.Mat = Mat;
	DrawMaterialTile_Parms.XL = XL;
	DrawMaterialTile_Parms.YL = YL;
	DrawMaterialTile_Parms.U = U;
	DrawMaterialTile_Parms.V = V;
	DrawMaterialTile_Parms.UL = UL;
	DrawMaterialTile_Parms.VL = VL;
	DrawMaterialTile_Parms.bClipTile = bClipTile;

	pFnDrawMaterialTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawMaterialTile, &DrawMaterialTile_Parms, NULL );

	pFnDrawMaterialTile->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.PreOptimizeDrawTiles
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Num                            ( CPF_Parm )
// class UTexture*                Tex                            ( CPF_Parm )
// unsigned char                  Blend                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::PreOptimizeDrawTiles ( int Num, class UTexture* Tex, unsigned char Blend )
{
	static UFunction* pFnPreOptimizeDrawTiles = NULL;

	if ( ! pFnPreOptimizeDrawTiles )
		pFnPreOptimizeDrawTiles = (UFunction*) UObject::GObjObjects()->Data[ 16145 ];

	UCanvas_execPreOptimizeDrawTiles_Parms PreOptimizeDrawTiles_Parms;
	PreOptimizeDrawTiles_Parms.Num = Num;
	PreOptimizeDrawTiles_Parms.Tex = Tex;
	PreOptimizeDrawTiles_Parms.Blend = Blend;

	pFnPreOptimizeDrawTiles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPreOptimizeDrawTiles, &PreOptimizeDrawTiles_Parms, NULL );

	pFnPreOptimizeDrawTiles->FunctionFlags |= 0x400;
};

// Function Engine.Canvas.DrawTile
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture*                Tex                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )
// float                          U                              ( CPF_Parm )
// float                          V                              ( CPF_Parm )
// float                          UL                             ( CPF_Parm )
// float                          VL                             ( CPF_Parm )
// struct FLinearColor            LColor                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  ClipTile                       ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Blend                          ( CPF_OptionalParm | CPF_Parm )

void UCanvas::DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long ClipTile, unsigned char Blend )
{
	static UFunction* pFnDrawTile = NULL;

	if ( ! pFnDrawTile )
		pFnDrawTile = (UFunction*) UObject::GObjObjects()->Data[ 16134 ];

	UCanvas_execDrawTile_Parms DrawTile_Parms;
	DrawTile_Parms.Tex = Tex;
	DrawTile_Parms.XL = XL;
	DrawTile_Parms.YL = YL;
	DrawTile_Parms.U = U;
	DrawTile_Parms.V = V;
	DrawTile_Parms.UL = UL;
	DrawTile_Parms.VL = VL;
	memcpy ( &DrawTile_Parms.LColor, &LColor, 0x10 );
	DrawTile_Parms.ClipTile = ClipTile;
	DrawTile_Parms.Blend = Blend;

	pFnDrawTile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawTile, &DrawTile_Parms, NULL );

	pFnDrawTile->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GeneratePathToLocation
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Goal                           ( CPF_Parm )
// float                          WithinDistance                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowPartialPath              ( CPF_OptionalParm | CPF_Parm )

bool AController::eventGeneratePathToLocation ( struct FVector Goal, float WithinDistance, unsigned long bAllowPartialPath )
{
	static UFunction* pFnGeneratePathToLocation = NULL;

	if ( ! pFnGeneratePathToLocation )
		pFnGeneratePathToLocation = (UFunction*) UObject::GObjObjects()->Data[ 9702 ];

	AController_eventGeneratePathToLocation_Parms GeneratePathToLocation_Parms;
	memcpy ( &GeneratePathToLocation_Parms.Goal, &Goal, 0xC );
	GeneratePathToLocation_Parms.WithinDistance = WithinDistance;
	GeneratePathToLocation_Parms.bAllowPartialPath = bAllowPartialPath;

	this->ProcessEvent ( pFnGeneratePathToLocation, &GeneratePathToLocation_Parms, NULL );

	return GeneratePathToLocation_Parms.ReturnValue;
};

// Function Engine.Controller.GeneratePathToActor
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Goal                           ( CPF_Parm )
// float                          WithinDistance                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowPartialPath              ( CPF_OptionalParm | CPF_Parm )

bool AController::eventGeneratePathToActor ( class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath )
{
	static UFunction* pFnGeneratePathToActor = NULL;

	if ( ! pFnGeneratePathToActor )
		pFnGeneratePathToActor = (UFunction*) UObject::GObjObjects()->Data[ 9697 ];

	AController_eventGeneratePathToActor_Parms GeneratePathToActor_Parms;
	GeneratePathToActor_Parms.Goal = Goal;
	GeneratePathToActor_Parms.WithinDistance = WithinDistance;
	GeneratePathToActor_Parms.bAllowPartialPath = bAllowPartialPath;

	this->ProcessEvent ( pFnGeneratePathToActor, &GeneratePathToActor_Parms, NULL );

	return GeneratePathToActor_Parms.ReturnValue;
};

// Function Engine.Controller.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void AController::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 9695 ];

	AController_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Controller.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void AController::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 9692 ];

	AController_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Controller.InitNavigationHandle
// [0x00020102] 
// Parameters infos:

void AController::InitNavigationHandle ( )
{
	static UFunction* pFnInitNavigationHandle = NULL;

	if ( ! pFnInitNavigationHandle )
		pFnInitNavigationHandle = (UFunction*) UObject::GObjObjects()->Data[ 9691 ];

	AController_execInitNavigationHandle_Parms InitNavigationHandle_Parms;

	this->ProcessEvent ( pFnInitNavigationHandle, &InitNavigationHandle_Parms, NULL );
};

// Function Engine.Controller.ReadyForLift
// [0x00020000] 
// Parameters infos:

void AController::ReadyForLift ( )
{
	static UFunction* pFnReadyForLift = NULL;

	if ( ! pFnReadyForLift )
		pFnReadyForLift = (UFunction*) UObject::GObjObjects()->Data[ 9690 ];

	AController_execReadyForLift_Parms ReadyForLift_Parms;

	this->ProcessEvent ( pFnReadyForLift, &ReadyForLift_Parms, NULL );
};

// Function Engine.Controller.SendMessage
// [0x00024000] 
// Parameters infos:
// class APlayerReplicationInfo*  Recipient                      ( CPF_Parm )
// struct FName                   MessageType                    ( CPF_Parm )
// float                          Wait                           ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AController::SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType )
{
	static UFunction* pFnSendMessage = NULL;

	if ( ! pFnSendMessage )
		pFnSendMessage = (UFunction*) UObject::GObjObjects()->Data[ 9685 ];

	AController_execSendMessage_Parms SendMessage_Parms;
	SendMessage_Parms.Recipient = Recipient;
	memcpy ( &SendMessage_Parms.MessageType, &MessageType, 0x8 );
	SendMessage_Parms.Wait = Wait;
	SendMessage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSendMessage, &SendMessage_Parms, NULL );
};

// Function Engine.Controller.CurrentLevelUnloaded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventCurrentLevelUnloaded ( )
{
	static UFunction* pFnCurrentLevelUnloaded = NULL;

	if ( ! pFnCurrentLevelUnloaded )
		pFnCurrentLevelUnloaded = (UFunction*) UObject::GObjObjects()->Data[ 9684 ];

	AController_eventCurrentLevelUnloaded_Parms CurrentLevelUnloaded_Parms;

	this->ProcessEvent ( pFnCurrentLevelUnloaded, &CurrentLevelUnloaded_Parms, NULL );
};

// Function Engine.Controller.IsInCombat
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceCheck                    ( CPF_OptionalParm | CPF_Parm )

bool AController::eventIsInCombat ( unsigned long bForceCheck )
{
	static UFunction* pFnIsInCombat = NULL;

	if ( ! pFnIsInCombat )
		pFnIsInCombat = (UFunction*) UObject::GObjObjects()->Data[ 9681 ];

	AController_eventIsInCombat_Parms IsInCombat_Parms;
	IsInCombat_Parms.bForceCheck = bForceCheck;

	this->ProcessEvent ( pFnIsInCombat, &IsInCombat_Parms, NULL );

	return IsInCombat_Parms.ReturnValue;
};

// Function Engine.Controller.IsSpectating
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventIsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = (UFunction*) UObject::GObjObjects()->Data[ 9679 ];

	AController_eventIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.Controller.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void AController::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 9677 ];

	AController_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.Controller.NotifyAddInventory
// [0x00020000] 
// Parameters infos:
// class AInventory*              NewItem                        ( CPF_Parm )

void AController::NotifyAddInventory ( class AInventory* NewItem )
{
	static UFunction* pFnNotifyAddInventory = NULL;

	if ( ! pFnNotifyAddInventory )
		pFnNotifyAddInventory = (UFunction*) UObject::GObjObjects()->Data[ 9675 ];

	AController_execNotifyAddInventory_Parms NotifyAddInventory_Parms;
	NotifyAddInventory_Parms.NewItem = NewItem;

	this->ProcessEvent ( pFnNotifyAddInventory, &NotifyAddInventory_Parms, NULL );
};

// Function Engine.Controller.OnModifyHealth
// [0x00020102] 
// Parameters infos:
// class USeqAct_ModifyHealth*    Action                         ( CPF_Parm )

void AController::OnModifyHealth ( class USeqAct_ModifyHealth* Action )
{
	static UFunction* pFnOnModifyHealth = NULL;

	if ( ! pFnOnModifyHealth )
		pFnOnModifyHealth = (UFunction*) UObject::GObjObjects()->Data[ 9673 ];

	AController_execOnModifyHealth_Parms OnModifyHealth_Parms;
	OnModifyHealth_Parms.Action = Action;

	this->ProcessEvent ( pFnOnModifyHealth, &OnModifyHealth_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverClaimViolation
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool AController::NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverClaimViolation = NULL;

	if ( ! pFnNotifyCoverClaimViolation )
		pFnNotifyCoverClaimViolation = (UFunction*) UObject::GObjObjects()->Data[ 9668 ];

	AController_execNotifyCoverClaimViolation_Parms NotifyCoverClaimViolation_Parms;
	NotifyCoverClaimViolation_Parms.NewClaim = NewClaim;
	NotifyCoverClaimViolation_Parms.Link = Link;
	NotifyCoverClaimViolation_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverClaimViolation, &NotifyCoverClaimViolation_Parms, NULL );

	return NotifyCoverClaimViolation_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyCoverAdjusted
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyCoverAdjusted ( )
{
	static UFunction* pFnNotifyCoverAdjusted = NULL;

	if ( ! pFnNotifyCoverAdjusted )
		pFnNotifyCoverAdjusted = (UFunction*) UObject::GObjObjects()->Data[ 9667 ];

	AController_eventNotifyCoverAdjusted_Parms NotifyCoverAdjusted_Parms;

	this->ProcessEvent ( pFnNotifyCoverAdjusted, &NotifyCoverAdjusted_Parms, NULL );
};

// Function Engine.Controller.NotifyCoverDisabled
// [0x00024100] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// unsigned long                  bAdjacentIdx                   ( CPF_OptionalParm | CPF_Parm )

void AController::NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx )
{
	static UFunction* pFnNotifyCoverDisabled = NULL;

	if ( ! pFnNotifyCoverDisabled )
		pFnNotifyCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 9663 ];

	AController_execNotifyCoverDisabled_Parms NotifyCoverDisabled_Parms;
	NotifyCoverDisabled_Parms.Link = Link;
	NotifyCoverDisabled_Parms.SlotIdx = SlotIdx;
	NotifyCoverDisabled_Parms.bAdjacentIdx = bAdjacentIdx;

	this->ProcessEvent ( pFnNotifyCoverDisabled, &NotifyCoverDisabled_Parms, NULL );
};

// Function Engine.Controller.OnSetVelocity
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetVelocity*     Action                         ( CPF_Parm )

void AController::OnSetVelocity ( class USeqAct_SetVelocity* Action )
{
	static UFunction* pFnOnSetVelocity = NULL;

	if ( ! pFnOnSetVelocity )
		pFnOnSetVelocity = (UFunction*) UObject::GObjObjects()->Data[ 9661 ];

	AController_execOnSetVelocity_Parms OnSetVelocity_Parms;
	OnSetVelocity_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetVelocity, &OnSetVelocity_Parms, NULL );
};

// Function Engine.Controller.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void AController::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 9659 ];

	AController_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function Engine.Controller.OnToggleGodMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleGodMode*   inAction                       ( CPF_Parm )

void AController::OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction )
{
	static UFunction* pFnOnToggleGodMode = NULL;

	if ( ! pFnOnToggleGodMode )
		pFnOnToggleGodMode = (UFunction*) UObject::GObjObjects()->Data[ 9656 ];

	AController_execOnToggleGodMode_Parms OnToggleGodMode_Parms;
	OnToggleGodMode_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleGodMode, &OnToggleGodMode_Parms, NULL );
};

// Function Engine.Controller.OnAttachToActor
// [0x00020102] 
// Parameters infos:
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AController::OnAttachToActor ( class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnOnAttachToActor = NULL;

	if ( ! pFnOnAttachToActor )
		pFnOnAttachToActor = (UFunction*) UObject::GObjObjects()->Data[ 9654 ];

	AController_execOnAttachToActor_Parms OnAttachToActor_Parms;
	OnAttachToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAttachToActor, &OnAttachToActor_Parms, NULL );
};

// Function Engine.Controller.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void AController::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 9652 ];

	AController_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Controller.IsDead
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsDead ( )
{
	static UFunction* pFnIsDead = NULL;

	if ( ! pFnIsDead )
		pFnIsDead = (UFunction*) UObject::GObjObjects()->Data[ 9597 ];

	AController_execIsDead_Parms IsDead_Parms;

	this->ProcessEvent ( pFnIsDead, &IsDead_Parms, NULL );

	return IsDead_Parms.ReturnValue;
};

// Function Engine.Controller.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString AController::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 9595 ];

	AController_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Controller.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 9588 ];

	AController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Controller.StopLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AController::StopLatentExecution ( )
{
	static UFunction* pFnStopLatentExecution = NULL;

	if ( ! pFnStopLatentExecution )
		pFnStopLatentExecution = (UFunction*) UObject::GObjObjects()->Data[ 9587 ];

	AController_execStopLatentExecution_Parms StopLatentExecution_Parms;

	pFnStopLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopLatentExecution, &StopLatentExecution_Parms, NULL );

	pFnStopLatentExecution->FunctionFlags |= 0x400;
};

// Function Engine.Controller.InLatentExecution
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LatentActionNumber             ( CPF_Parm )

bool AController::InLatentExecution ( int LatentActionNumber )
{
	static UFunction* pFnInLatentExecution = NULL;

	if ( ! pFnInLatentExecution )
		pFnInLatentExecution = (UFunction*) UObject::GObjObjects()->Data[ 9584 ];

	AController_execInLatentExecution_Parms InLatentExecution_Parms;
	InLatentExecution_Parms.LatentActionNumber = LatentActionNumber;

	pFnInLatentExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInLatentExecution, &InLatentExecution_Parms, NULL );

	pFnInLatentExecution->FunctionFlags |= 0x400;

	return InLatentExecution_Parms.ReturnValue;
};

// Function Engine.Controller.ReachedPreciseDestination
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventReachedPreciseDestination ( )
{
	static UFunction* pFnReachedPreciseDestination = NULL;

	if ( ! pFnReachedPreciseDestination )
		pFnReachedPreciseDestination = (UFunction*) UObject::GObjObjects()->Data[ 9583 ];

	AController_eventReachedPreciseDestination_Parms ReachedPreciseDestination_Parms;

	this->ProcessEvent ( pFnReachedPreciseDestination, &ReachedPreciseDestination_Parms, NULL );
};

// Function Engine.Controller.NotifyMissedJump
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyMissedJump ( )
{
	static UFunction* pFnNotifyMissedJump = NULL;

	if ( ! pFnNotifyMissedJump )
		pFnNotifyMissedJump = (UFunction*) UObject::GObjObjects()->Data[ 9582 ];

	AController_eventNotifyMissedJump_Parms NotifyMissedJump_Parms;

	this->ProcessEvent ( pFnNotifyMissedJump, &NotifyMissedJump_Parms, NULL );
};

// Function Engine.Controller.NotifyJumpApex
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyJumpApex ( )
{
	static UFunction* pFnNotifyJumpApex = NULL;

	if ( ! pFnNotifyJumpApex )
		pFnNotifyJumpApex = (UFunction*) UObject::GObjObjects()->Data[ 9581 ];

	AController_eventNotifyJumpApex_Parms NotifyJumpApex_Parms;

	this->ProcessEvent ( pFnNotifyJumpApex, &NotifyJumpApex_Parms, NULL );
};

// Function Engine.Controller.NotifyBump
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::eventNotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 9577 ];

	AController_eventNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyFallingHitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

void AController::eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyFallingHitWall = NULL;

	if ( ! pFnNotifyFallingHitWall )
		pFnNotifyFallingHitWall = (UFunction*) UObject::GObjObjects()->Data[ 9574 ];

	AController_eventNotifyFallingHitWall_Parms NotifyFallingHitWall_Parms;
	memcpy ( &NotifyFallingHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyFallingHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyFallingHitWall, &NotifyFallingHitWall_Parms, NULL );
};

// Function Engine.Controller.NotifyHitWall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool AController::eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 9570 ];

	AController_eventNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyLanded
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

bool AController::eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = (UFunction*) UObject::GObjObjects()->Data[ 9566 ];

	AController_eventNotifyLanded_Parms NotifyLanded_Parms;
	memcpy ( &NotifyLanded_Parms.HitNormal, &HitNormal, 0xC );
	NotifyLanded_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );

	return NotifyLanded_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyHeadVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

bool AController::eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyHeadVolumeChange = NULL;

	if ( ! pFnNotifyHeadVolumeChange )
		pFnNotifyHeadVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 9563 ];

	AController_eventNotifyHeadVolumeChange_Parms NotifyHeadVolumeChange_Parms;
	NotifyHeadVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyHeadVolumeChange, &NotifyHeadVolumeChange_Parms, NULL );

	return NotifyHeadVolumeChange_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyPhysicsVolumeChange
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          NewVolume                      ( CPF_Parm )

void AController::eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume )
{
	static UFunction* pFnNotifyPhysicsVolumeChange = NULL;

	if ( ! pFnNotifyPhysicsVolumeChange )
		pFnNotifyPhysicsVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 9561 ];

	AController_eventNotifyPhysicsVolumeChange_Parms NotifyPhysicsVolumeChange_Parms;
	NotifyPhysicsVolumeChange_Parms.NewVolume = NewVolume;

	this->ProcessEvent ( pFnNotifyPhysicsVolumeChange, &NotifyPhysicsVolumeChange_Parms, NULL );
};

// Function Engine.Controller.LandingShake
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::LandingShake ( )
{
	static UFunction* pFnLandingShake = NULL;

	if ( ! pFnLandingShake )
		pFnLandingShake = (UFunction*) UObject::GObjObjects()->Data[ 9559 ];

	AController_execLandingShake_Parms LandingShake_Parms;

	this->ProcessEvent ( pFnLandingShake, &LandingShake_Parms, NULL );

	return LandingShake_Parms.ReturnValue;
};

// Function Engine.Controller.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void AController::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 9556 ];

	AController_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Controller.HandlePathObstruction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  BlockedBy                      ( CPF_Parm )

bool AController::eventHandlePathObstruction ( class AActor* BlockedBy )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = (UFunction*) UObject::GObjObjects()->Data[ 9553 ];

	AController_eventHandlePathObstruction_Parms HandlePathObstruction_Parms;
	HandlePathObstruction_Parms.BlockedBy = BlockedBy;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );

	return HandlePathObstruction_Parms.ReturnValue;
};

// Function Engine.Controller.UnderLift
// [0x00020000] 
// Parameters infos:
// class ALiftCenter*             Lift                           ( CPF_Parm )

void AController::UnderLift ( class ALiftCenter* Lift )
{
	static UFunction* pFnUnderLift = NULL;

	if ( ! pFnUnderLift )
		pFnUnderLift = (UFunction*) UObject::GObjObjects()->Data[ 9551 ];

	AController_execUnderLift_Parms UnderLift_Parms;
	UnderLift_Parms.Lift = Lift;

	this->ProcessEvent ( pFnUnderLift, &UnderLift_Parms, NULL );
};

// Function Engine.Controller.MoverFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::eventMoverFinished ( )
{
	static UFunction* pFnMoverFinished = NULL;

	if ( ! pFnMoverFinished )
		pFnMoverFinished = (UFunction*) UObject::GObjObjects()->Data[ 9546 ];

	AController_eventMoverFinished_Parms MoverFinished_Parms;

	this->ProcessEvent ( pFnMoverFinished, &MoverFinished_Parms, NULL );

	return MoverFinished_Parms.ReturnValue;
};

// Function Engine.Controller.WaitForMover
// [0x00020002] 
// Parameters infos:
// class AInterpActor*            M                              ( CPF_Parm )

void AController::WaitForMover ( class AInterpActor* M )
{
	static UFunction* pFnWaitForMover = NULL;

	if ( ! pFnWaitForMover )
		pFnWaitForMover = (UFunction*) UObject::GObjObjects()->Data[ 9543 ];

	AController_execWaitForMover_Parms WaitForMover_Parms;
	WaitForMover_Parms.M = M;

	this->ProcessEvent ( pFnWaitForMover, &WaitForMover_Parms, NULL );
};

// Function Engine.Controller.AllowDetourTo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        N                              ( CPF_Parm )

bool AController::eventAllowDetourTo ( class ANavigationPoint* N )
{
	static UFunction* pFnAllowDetourTo = NULL;

	if ( ! pFnAllowDetourTo )
		pFnAllowDetourTo = (UFunction*) UObject::GObjObjects()->Data[ 9540 ];

	AController_eventAllowDetourTo_Parms AllowDetourTo_Parms;
	AllowDetourTo_Parms.N = N;

	this->ProcessEvent ( pFnAllowDetourTo, &AllowDetourTo_Parms, NULL );

	return AllowDetourTo_Parms.ReturnValue;
};

// Function Engine.Controller.MayFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bFloor                         ( CPF_Parm )
// struct FVector                 FloorNormal                    ( CPF_Parm )

void AController::eventMayFall ( unsigned long bFloor, struct FVector FloorNormal )
{
	static UFunction* pFnMayFall = NULL;

	if ( ! pFnMayFall )
		pFnMayFall = (UFunction*) UObject::GObjObjects()->Data[ 9537 ];

	AController_eventMayFall_Parms MayFall_Parms;
	MayFall_Parms.bFloor = bFloor;
	memcpy ( &MayFall_Parms.FloorNormal, &FloorNormal, 0xC );

	this->ProcessEvent ( pFnMayFall, &MayFall_Parms, NULL );
};

// Function Engine.Controller.EndClimbLadder
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::EndClimbLadder ( )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 9536 ];

	AController_execEndClimbLadder_Parms EndClimbLadder_Parms;

	pFnEndClimbLadder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );

	pFnEndClimbLadder->FunctionFlags |= 0x400;
};

// Function Engine.Controller.LongFall
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventLongFall ( )
{
	static UFunction* pFnLongFall = NULL;

	if ( ! pFnLongFall )
		pFnLongFall = (UFunction*) UObject::GObjObjects()->Data[ 9535 ];

	AController_eventLongFall_Parms LongFall_Parms;

	this->ProcessEvent ( pFnLongFall, &LongFall_Parms, NULL );
};

// Function Engine.Controller.WaitForLanding
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x020F]
// Parameters infos:
// float                          waitDuration                   ( CPF_OptionalParm | CPF_Parm )

void AController::WaitForLanding ( float waitDuration )
{
	static UFunction* pFnWaitForLanding = NULL;

	if ( ! pFnWaitForLanding )
		pFnWaitForLanding = (UFunction*) UObject::GObjObjects()->Data[ 9533 ];

	AController_execWaitForLanding_Parms WaitForLanding_Parms;
	WaitForLanding_Parms.waitDuration = waitDuration;

	unsigned short NativeIndex = pFnWaitForLanding->iNative;
	pFnWaitForLanding->iNative = 0;

	pFnWaitForLanding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitForLanding, &WaitForLanding_Parms, NULL );

	pFnWaitForLanding->FunctionFlags |= 0x400;

	pFnWaitForLanding->iNative = NativeIndex;
};

// Function Engine.Controller.PickWallAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020E]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool AController::PickWallAdjust ( struct FVector HitNormal )
{
	static UFunction* pFnPickWallAdjust = NULL;

	if ( ! pFnPickWallAdjust )
		pFnPickWallAdjust = (UFunction*) UObject::GObjObjects()->Data[ 9530 ];

	AController_execPickWallAdjust_Parms PickWallAdjust_Parms;
	memcpy ( &PickWallAdjust_Parms.HitNormal, &HitNormal, 0xC );

	unsigned short NativeIndex = pFnPickWallAdjust->iNative;
	pFnPickWallAdjust->iNative = 0;

	pFnPickWallAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickWallAdjust, &PickWallAdjust_Parms, NULL );

	pFnPickWallAdjust->FunctionFlags |= 0x400;

	pFnPickWallAdjust->iNative = NativeIndex;

	return PickWallAdjust_Parms.ReturnValue;
};

// Function Engine.Controller.MoveUnreachable
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 AttemptedDest                  ( CPF_Parm )
// class AActor*                  AttemptedTarget                ( CPF_Parm )

void AController::eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = (UFunction*) UObject::GObjObjects()->Data[ 9527 ];

	AController_eventMoveUnreachable_Parms MoveUnreachable_Parms;
	memcpy ( &MoveUnreachable_Parms.AttemptedDest, &AttemptedDest, 0xC );
	MoveUnreachable_Parms.AttemptedTarget = AttemptedTarget;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function Engine.Controller.ActorReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0208]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )

bool AController::ActorReachable ( class AActor* anActor )
{
	static UFunction* pFnActorReachable = NULL;

	if ( ! pFnActorReachable )
		pFnActorReachable = (UFunction*) UObject::GObjObjects()->Data[ 9524 ];

	AController_execActorReachable_Parms ActorReachable_Parms;
	ActorReachable_Parms.anActor = anActor;

	unsigned short NativeIndex = pFnActorReachable->iNative;
	pFnActorReachable->iNative = 0;

	pFnActorReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachable, &ActorReachable_Parms, NULL );

	pFnActorReachable->FunctionFlags |= 0x400;

	pFnActorReachable->iNative = NativeIndex;

	return ActorReachable_Parms.ReturnValue;
};

// Function Engine.Controller.PointReachable
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0209]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )

bool AController::PointReachable ( struct FVector aPoint )
{
	static UFunction* pFnPointReachable = NULL;

	if ( ! pFnPointReachable )
		pFnPointReachable = (UFunction*) UObject::GObjObjects()->Data[ 9521 ];

	AController_execPointReachable_Parms PointReachable_Parms;
	memcpy ( &PointReachable_Parms.aPoint, &aPoint, 0xC );

	unsigned short NativeIndex = pFnPointReachable->iNative;
	pFnPointReachable->iNative = 0;

	pFnPointReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointReachable, &PointReachable_Parms, NULL );

	pFnPointReachable->FunctionFlags |= 0x400;

	pFnPointReachable->iNative = NativeIndex;

	return PointReachable_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToIntercept
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  InRouteGoal                    ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToIntercept = NULL;

	if ( ! pFnFindPathToIntercept )
		pFnFindPathToIntercept = (UFunction*) UObject::GObjObjects()->Data[ 9514 ];

	AController_execFindPathToIntercept_Parms FindPathToIntercept_Parms;
	FindPathToIntercept_Parms.P = P;
	FindPathToIntercept_Parms.InRouteGoal = InRouteGoal;
	FindPathToIntercept_Parms.bWeightDetours = bWeightDetours;
	FindPathToIntercept_Parms.MaxPathLength = MaxPathLength;
	FindPathToIntercept_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathToIntercept->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToIntercept, &FindPathToIntercept_Parms, NULL );

	pFnFindPathToIntercept->FunctionFlags |= 0x400;

	return FindPathToIntercept_Parms.ReturnValue;
};

// Function Engine.Controller.FindRandomDest
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020D]
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* AController::FindRandomDest ( )
{
	static UFunction* pFnFindRandomDest = NULL;

	if ( ! pFnFindRandomDest )
		pFnFindRandomDest = (UFunction*) UObject::GObjObjects()->Data[ 9512 ];

	AController_execFindRandomDest_Parms FindRandomDest_Parms;

	unsigned short NativeIndex = pFnFindRandomDest->iNative;
	pFnFindRandomDest->iNative = 0;

	pFnFindRandomDest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindRandomDest, &FindRandomDest_Parms, NULL );

	pFnFindRandomDest->FunctionFlags |= 0x400;

	pFnFindRandomDest->iNative = NativeIndex;

	return FindRandomDest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTowardNearest
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalClass                      ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTowardNearest = NULL;

	if ( ! pFnFindPathTowardNearest )
		pFnFindPathTowardNearest = (UFunction*) UObject::GObjObjects()->Data[ 9506 ];

	AController_execFindPathTowardNearest_Parms FindPathTowardNearest_Parms;
	FindPathTowardNearest_Parms.GoalClass = GoalClass;
	FindPathTowardNearest_Parms.bWeightDetours = bWeightDetours;
	FindPathTowardNearest_Parms.MaxPathLength = MaxPathLength;
	FindPathTowardNearest_Parms.bReturnPartial = bReturnPartial;

	pFnFindPathTowardNearest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTowardNearest, &FindPathTowardNearest_Parms, NULL );

	pFnFindPathTowardNearest->FunctionFlags |= 0x400;

	return FindPathTowardNearest_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathToward
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0205]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  anActor                        ( CPF_Parm )
// unsigned long                  bWeightDetours                 ( CPF_OptionalParm | CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathToward = NULL;

	if ( ! pFnFindPathToward )
		pFnFindPathToward = (UFunction*) UObject::GObjObjects()->Data[ 9500 ];

	AController_execFindPathToward_Parms FindPathToward_Parms;
	FindPathToward_Parms.anActor = anActor;
	FindPathToward_Parms.bWeightDetours = bWeightDetours;
	FindPathToward_Parms.MaxPathLength = MaxPathLength;
	FindPathToward_Parms.bReturnPartial = bReturnPartial;

	unsigned short NativeIndex = pFnFindPathToward->iNative;
	pFnFindPathToward->iNative = 0;

	pFnFindPathToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathToward, &FindPathToward_Parms, NULL );

	pFnFindPathToward->FunctionFlags |= 0x400;

	pFnFindPathToward->iNative = NativeIndex;

	return FindPathToward_Parms.ReturnValue;
};

// Function Engine.Controller.FindPathTo
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0206]
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 aPoint                         ( CPF_Parm )
// int                            MaxPathLength                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

class AActor* AController::FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial )
{
	static UFunction* pFnFindPathTo = NULL;

	if ( ! pFnFindPathTo )
		pFnFindPathTo = (UFunction*) UObject::GObjObjects()->Data[ 9495 ];

	AController_execFindPathTo_Parms FindPathTo_Parms;
	memcpy ( &FindPathTo_Parms.aPoint, &aPoint, 0xC );
	FindPathTo_Parms.MaxPathLength = MaxPathLength;
	FindPathTo_Parms.bReturnPartial = bReturnPartial;

	unsigned short NativeIndex = pFnFindPathTo->iNative;
	pFnFindPathTo->iNative = 0;

	pFnFindPathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPathTo, &FindPathTo_Parms, NULL );

	pFnFindPathTo->FunctionFlags |= 0x400;

	pFnFindPathTo->iNative = NativeIndex;

	return FindPathTo_Parms.ReturnValue;
};

// Function Engine.Controller.FinishRotation
// [0x00020409] ( FUNC_Final | FUNC_Native ) iNative [0x01FC]
// Parameters infos:

void AController::FinishRotation ( )
{
	static UFunction* pFnFinishRotation = NULL;

	if ( ! pFnFinishRotation )
		pFnFinishRotation = (UFunction*) UObject::GObjObjects()->Data[ 9494 ];

	AController_execFinishRotation_Parms FinishRotation_Parms;

	unsigned short NativeIndex = pFnFinishRotation->iNative;
	pFnFinishRotation->iNative = 0;

	pFnFinishRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishRotation, &FinishRotation_Parms, NULL );

	pFnFinishRotation->FunctionFlags |= 0x400;

	pFnFinishRotation->iNative = NativeIndex;
};

// Function Engine.Controller.SetupSpecialPathAbilities
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventSetupSpecialPathAbilities ( )
{
	static UFunction* pFnSetupSpecialPathAbilities = NULL;

	if ( ! pFnSetupSpecialPathAbilities )
		pFnSetupSpecialPathAbilities = (UFunction*) UObject::GObjObjects()->Data[ 9493 ];

	AController_eventSetupSpecialPathAbilities_Parms SetupSpecialPathAbilities_Parms;

	this->ProcessEvent ( pFnSetupSpecialPathAbilities, &SetupSpecialPathAbilities_Parms, NULL );
};

// Function Engine.Controller.MoveToward
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x01F6]
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseStrafing                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveToward = NULL;

	if ( ! pFnMoveToward )
		pFnMoveToward = (UFunction*) UObject::GObjObjects()->Data[ 9487 ];

	AController_execMoveToward_Parms MoveToward_Parms;
	MoveToward_Parms.NewTarget = NewTarget;
	MoveToward_Parms.ViewFocus = ViewFocus;
	MoveToward_Parms.DestinationOffset = DestinationOffset;
	MoveToward_Parms.bUseStrafing = bUseStrafing;
	MoveToward_Parms.bShouldWalk = bShouldWalk;

	unsigned short NativeIndex = pFnMoveToward->iNative;
	pFnMoveToward->iNative = 0;

	pFnMoveToward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToward, &MoveToward_Parms, NULL );

	pFnMoveToward->FunctionFlags |= 0x400;

	pFnMoveToward->iNative = NativeIndex;
};

// Function Engine.Controller.MoveToDirectNonPathPos
// [0x00024409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewDestination                 ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveToDirectNonPathPos ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveToDirectNonPathPos = NULL;

	if ( ! pFnMoveToDirectNonPathPos )
		pFnMoveToDirectNonPathPos = (UFunction*) UObject::GObjObjects()->Data[ 9482 ];

	AController_execMoveToDirectNonPathPos_Parms MoveToDirectNonPathPos_Parms;
	memcpy ( &MoveToDirectNonPathPos_Parms.NewDestination, &NewDestination, 0xC );
	MoveToDirectNonPathPos_Parms.ViewFocus = ViewFocus;
	MoveToDirectNonPathPos_Parms.DestinationOffset = DestinationOffset;
	MoveToDirectNonPathPos_Parms.bShouldWalk = bShouldWalk;

	pFnMoveToDirectNonPathPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToDirectNonPathPos, &MoveToDirectNonPathPos_Parms, NULL );

	pFnMoveToDirectNonPathPos->FunctionFlags |= 0x400;
};

// Function Engine.Controller.MoveTo
// [0x00024409] ( FUNC_Final | FUNC_Native ) iNative [0x01F4]
// Parameters infos:
// struct FVector                 NewDestination                 ( CPF_Parm )
// class AActor*                  ViewFocus                      ( CPF_OptionalParm | CPF_Parm )
// float                          DestinationOffset              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldWalk                    ( CPF_OptionalParm | CPF_Parm )

void AController::MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk )
{
	static UFunction* pFnMoveTo = NULL;

	if ( ! pFnMoveTo )
		pFnMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 9476 ];

	AController_execMoveTo_Parms MoveTo_Parms;
	memcpy ( &MoveTo_Parms.NewDestination, &NewDestination, 0xC );
	MoveTo_Parms.ViewFocus = ViewFocus;
	MoveTo_Parms.DestinationOffset = DestinationOffset;
	MoveTo_Parms.bShouldWalk = bShouldWalk;

	unsigned short NativeIndex = pFnMoveTo->iNative;
	pFnMoveTo->iNative = 0;

	pFnMoveTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveTo, &MoveTo_Parms, NULL );

	pFnMoveTo->FunctionFlags |= 0x400;

	pFnMoveTo->iNative = NativeIndex;
};

// Function Engine.Controller.EnemyNotVisible
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = (UFunction*) UObject::GObjObjects()->Data[ 9475 ];

	AController_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function Engine.Controller.SeeMonster
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeeMonster ( class APawn* Seen )
{
	static UFunction* pFnSeeMonster = NULL;

	if ( ! pFnSeeMonster )
		pFnSeeMonster = (UFunction*) UObject::GObjObjects()->Data[ 9473 ];

	AController_eventSeeMonster_Parms SeeMonster_Parms;
	SeeMonster_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeeMonster, &SeeMonster_Parms, NULL );
};

// Function Engine.Controller.SeePlayer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void AController::eventSeePlayer ( class APawn* Seen )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = (UFunction*) UObject::GObjObjects()->Data[ 9471 ];

	AController_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function Engine.Controller.HearNoise
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void AController::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = (UFunction*) UObject::GObjObjects()->Data[ 9467 ];

	AController_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function Engine.Controller.PickTarget
// [0x00420401] ( FUNC_Final | FUNC_Native ) iNative [0x0213]
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  TargetClass                    ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )
// struct FVector                 projStart                      ( CPF_Parm )
// float                          MaxRange                       ( CPF_Parm )
// float                          bestAim                        ( CPF_Parm | CPF_OutParm )
// float                          bestDist                       ( CPF_Parm | CPF_OutParm )

class APawn* AController::PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist )
{
	static UFunction* pFnPickTarget = NULL;

	if ( ! pFnPickTarget )
		pFnPickTarget = (UFunction*) UObject::GObjObjects()->Data[ 9459 ];

	AController_execPickTarget_Parms PickTarget_Parms;
	PickTarget_Parms.TargetClass = TargetClass;
	memcpy ( &PickTarget_Parms.FireDir, &FireDir, 0xC );
	memcpy ( &PickTarget_Parms.projStart, &projStart, 0xC );
	PickTarget_Parms.MaxRange = MaxRange;

	unsigned short NativeIndex = pFnPickTarget->iNative;
	pFnPickTarget->iNative = 0;

	pFnPickTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickTarget, &PickTarget_Parms, NULL );

	pFnPickTarget->FunctionFlags |= 0x400;

	pFnPickTarget->iNative = NativeIndex;

	if ( bestAim )
		*bestAim = PickTarget_Parms.bestAim;

	if ( bestDist )
		*bestDist = PickTarget_Parms.bestDist;

	return PickTarget_Parms.ReturnValue;
};

// Function Engine.Controller.CanSeeByPoints
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0219]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewLocation                   ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

bool AController::CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation )
{
	static UFunction* pFnCanSeeByPoints = NULL;

	if ( ! pFnCanSeeByPoints )
		pFnCanSeeByPoints = (UFunction*) UObject::GObjObjects()->Data[ 9454 ];

	AController_execCanSeeByPoints_Parms CanSeeByPoints_Parms;
	memcpy ( &CanSeeByPoints_Parms.ViewLocation, &ViewLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.TestLocation, &TestLocation, 0xC );
	memcpy ( &CanSeeByPoints_Parms.ViewRotation, &ViewRotation, 0xC );

	unsigned short NativeIndex = pFnCanSeeByPoints->iNative;
	pFnCanSeeByPoints->iNative = 0;

	pFnCanSeeByPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeByPoints, &CanSeeByPoints_Parms, NULL );

	pFnCanSeeByPoints->FunctionFlags |= 0x400;

	pFnCanSeeByPoints->iNative = NativeIndex;

	return CanSeeByPoints_Parms.ReturnValue;
};

// Function Engine.Controller.CanSee
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0215]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool AController::CanSee ( class APawn* Other )
{
	static UFunction* pFnCanSee = NULL;

	if ( ! pFnCanSee )
		pFnCanSee = (UFunction*) UObject::GObjObjects()->Data[ 9451 ];

	AController_execCanSee_Parms CanSee_Parms;
	CanSee_Parms.Other = Other;

	unsigned short NativeIndex = pFnCanSee->iNative;
	pFnCanSee->iNative = 0;

	pFnCanSee->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSee, &CanSee_Parms, NULL );

	pFnCanSee->FunctionFlags |= 0x400;

	pFnCanSee->iNative = NativeIndex;

	return CanSee_Parms.ReturnValue;
};

// Function Engine.Controller.LineOfSightTo
// [0x00024401] ( FUNC_Final | FUNC_Native ) iNative [0x0202]
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 chkLocation                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTryAlternateTargetLoc         ( CPF_OptionalParm | CPF_Parm )

bool AController::LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = (UFunction*) UObject::GObjObjects()->Data[ 9446 ];

	AController_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;
	memcpy ( &LineOfSightTo_Parms.chkLocation, &chkLocation, 0xC );
	LineOfSightTo_Parms.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	unsigned short NativeIndex = pFnLineOfSightTo->iNative;
	pFnLineOfSightTo->iNative = 0;

	pFnLineOfSightTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	pFnLineOfSightTo->FunctionFlags |= 0x400;

	pFnLineOfSightTo->iNative = NativeIndex;

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Controller.NotifyChangedWeapon
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 PrevWeapon                     ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void AController::NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 9443 ];

	AController_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PrevWeapon = PrevWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function Engine.Controller.ClientSwitchToBestWeapon
// [0x010241C2] 
// Parameters infos:
// unsigned long                  bForceNewWeapon                ( CPF_OptionalParm | CPF_Parm )

void AController::ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon )
{
	static UFunction* pFnClientSwitchToBestWeapon = NULL;

	if ( ! pFnClientSwitchToBestWeapon )
		pFnClientSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 9441 ];

	AController_execClientSwitchToBestWeapon_Parms ClientSwitchToBestWeapon_Parms;
	ClientSwitchToBestWeapon_Parms.bForceNewWeapon = bForceNewWeapon;

	this->ProcessEvent ( pFnClientSwitchToBestWeapon, &ClientSwitchToBestWeapon_Parms, NULL );
};

// Function Engine.Controller.SwitchToBestWeapon
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bForceNewWeapon                ( CPF_OptionalParm | CPF_Parm )

void AController::SwitchToBestWeapon ( unsigned long bForceNewWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 9439 ];

	AController_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceNewWeapon = bForceNewWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function Engine.Controller.ReceiveProjectileWarning
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::ReceiveProjectileWarning ( class AProjectile* Proj )
{
	static UFunction* pFnReceiveProjectileWarning = NULL;

	if ( ! pFnReceiveProjectileWarning )
		pFnReceiveProjectileWarning = (UFunction*) UObject::GObjObjects()->Data[ 9437 ];

	AController_execReceiveProjectileWarning_Parms ReceiveProjectileWarning_Parms;
	ReceiveProjectileWarning_Parms.Proj = Proj;

	this->ProcessEvent ( pFnReceiveProjectileWarning, &ReceiveProjectileWarning_Parms, NULL );
};

// Function Engine.Controller.ReceiveWarning
// [0x00020000] 
// Parameters infos:
// class APawn*                   shooter                        ( CPF_Parm )
// float                          projSpeed                      ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )

void AController::ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir )
{
	static UFunction* pFnReceiveWarning = NULL;

	if ( ! pFnReceiveWarning )
		pFnReceiveWarning = (UFunction*) UObject::GObjObjects()->Data[ 9433 ];

	AController_execReceiveWarning_Parms ReceiveWarning_Parms;
	ReceiveWarning_Parms.shooter = shooter;
	ReceiveWarning_Parms.projSpeed = projSpeed;
	memcpy ( &ReceiveWarning_Parms.FireDir, &FireDir, 0xC );

	this->ProcessEvent ( pFnReceiveWarning, &ReceiveWarning_Parms, NULL );
};

// Function Engine.Controller.InstantWarnTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  InTarget                       ( CPF_Parm )
// class AWeapon*                 FiredWeapon                    ( CPF_Parm )
// struct FVector                 FireDir                        ( CPF_Parm )

void AController::InstantWarnTarget ( class AActor* InTarget, class AWeapon* FiredWeapon, struct FVector FireDir )
{
	static UFunction* pFnInstantWarnTarget = NULL;

	if ( ! pFnInstantWarnTarget )
		pFnInstantWarnTarget = (UFunction*) UObject::GObjObjects()->Data[ 9428 ];

	AController_execInstantWarnTarget_Parms InstantWarnTarget_Parms;
	InstantWarnTarget_Parms.InTarget = InTarget;
	InstantWarnTarget_Parms.FiredWeapon = FiredWeapon;
	memcpy ( &InstantWarnTarget_Parms.FireDir, &FireDir, 0xC );

	this->ProcessEvent ( pFnInstantWarnTarget, &InstantWarnTarget_Parms, NULL );
};

// Function Engine.Controller.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator AController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 9422 ];

	AController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Engine.Controller.HandlePickup
// [0x00020000] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void AController::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 9420 ];

	AController_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function Engine.Controller.RoundHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndRoundFocus                  ( CPF_OptionalParm | CPF_Parm )

void AController::RoundHasEnded ( class AActor* EndRoundFocus )
{
	static UFunction* pFnRoundHasEnded = NULL;

	if ( ! pFnRoundHasEnded )
		pFnRoundHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 9418 ];

	AController_execRoundHasEnded_Parms RoundHasEnded_Parms;
	RoundHasEnded_Parms.EndRoundFocus = EndRoundFocus;

	this->ProcessEvent ( pFnRoundHasEnded, &RoundHasEnded_Parms, NULL );
};

// Function Engine.Controller.StopFiring
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventStopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = (UFunction*) UObject::GObjObjects()->Data[ 9415 ];

	AController_eventStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );
};

// Function Engine.Controller.FireWeaponAt
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  inActor                        ( CPF_Parm )

bool AController::FireWeaponAt ( class AActor* inActor )
{
	static UFunction* pFnFireWeaponAt = NULL;

	if ( ! pFnFireWeaponAt )
		pFnFireWeaponAt = (UFunction*) UObject::GObjObjects()->Data[ 9412 ];

	AController_execFireWeaponAt_Parms FireWeaponAt_Parms;
	FireWeaponAt_Parms.inActor = inActor;

	this->ProcessEvent ( pFnFireWeaponAt, &FireWeaponAt_Parms, NULL );

	return FireWeaponAt_Parms.ReturnValue;
};

// Function Engine.Controller.RatePickup
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  PickupHolder                   ( CPF_Parm )
// class UClass*                  inPickup                       ( CPF_Parm )

float AController::eventRatePickup ( class AActor* PickupHolder, class UClass* inPickup )
{
	static UFunction* pFnRatePickup = NULL;

	if ( ! pFnRatePickup )
		pFnRatePickup = (UFunction*) UObject::GObjObjects()->Data[ 9408 ];

	AController_eventRatePickup_Parms RatePickup_Parms;
	RatePickup_Parms.PickupHolder = PickupHolder;
	RatePickup_Parms.inPickup = inPickup;

	this->ProcessEvent ( pFnRatePickup, &RatePickup_Parms, NULL );

	return RatePickup_Parms.ReturnValue;
};

// Function Engine.Controller.WarnProjExplode
// [0x00020000] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::WarnProjExplode ( class AProjectile* Proj )
{
	static UFunction* pFnWarnProjExplode = NULL;

	if ( ! pFnWarnProjExplode )
		pFnWarnProjExplode = (UFunction*) UObject::GObjObjects()->Data[ 9406 ];

	AController_execWarnProjExplode_Parms WarnProjExplode_Parms;
	WarnProjExplode_Parms.Proj = Proj;

	this->ProcessEvent ( pFnWarnProjExplode, &WarnProjExplode_Parms, NULL );
};

// Function Engine.Controller.NotifyProjLanded
// [0x00020002] 
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void AController::NotifyProjLanded ( class AProjectile* Proj )
{
	static UFunction* pFnNotifyProjLanded = NULL;

	if ( ! pFnNotifyProjLanded )
		pFnNotifyProjLanded = (UFunction*) UObject::GObjObjects()->Data[ 9404 ];

	AController_execNotifyProjLanded_Parms NotifyProjLanded_Parms;
	NotifyProjLanded_Parms.Proj = Proj;

	this->ProcessEvent ( pFnNotifyProjLanded, &NotifyProjLanded_Parms, NULL );
};

// Function Engine.Controller.NotifyKilled
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Killed                         ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  damageTyp                      ( CPF_Parm )

void AController::NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = (UFunction*) UObject::GObjObjects()->Data[ 9399 ];

	AController_execNotifyKilled_Parms NotifyKilled_Parms;
	NotifyKilled_Parms.Killer = Killer;
	NotifyKilled_Parms.Killed = Killed;
	NotifyKilled_Parms.KilledPawn = KilledPawn;
	NotifyKilled_Parms.damageTyp = damageTyp;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function Engine.Controller.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void AController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 9396 ];

	AController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.Controller.SetCharacter
// [0x00020000] 
// Parameters infos:
// struct FString                 inCharacter                    ( CPF_Parm | CPF_NeedCtorLink )

void AController::SetCharacter ( struct FString inCharacter )
{
	static UFunction* pFnSetCharacter = NULL;

	if ( ! pFnSetCharacter )
		pFnSetCharacter = (UFunction*) UObject::GObjObjects()->Data[ 9394 ];

	AController_execSetCharacter_Parms SetCharacter_Parms;
	memcpy ( &SetCharacter_Parms.inCharacter, &inCharacter, 0xC );

	this->ProcessEvent ( pFnSetCharacter, &SetCharacter_Parms, NULL );
};

// Function Engine.Controller.ServerGivePawn
// [0x00020000] 
// Parameters infos:

void AController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 9393 ];

	AController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.Controller.ServerRestartPlayer
// [0x002200C2] 
// Parameters infos:

void AController::ServerRestartPlayer ( )
{
	static UFunction* pFnServerRestartPlayer = NULL;

	if ( ! pFnServerRestartPlayer )
		pFnServerRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 9392 ];

	AController_execServerRestartPlayer_Parms ServerRestartPlayer_Parms;

	this->ProcessEvent ( pFnServerRestartPlayer, &ServerRestartPlayer_Parms, NULL );
};

// Function Engine.Controller.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char AController::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 9390 ];

	AController_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Controller.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AController::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 9389 ];

	AController_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function Engine.Controller.NotifyTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 9383 ];

	AController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Controller.EnemyJustTeleported
// [0x00020002] 
// Parameters infos:

void AController::EnemyJustTeleported ( )
{
	static UFunction* pFnEnemyJustTeleported = NULL;

	if ( ! pFnEnemyJustTeleported )
		pFnEnemyJustTeleported = (UFunction*) UObject::GObjObjects()->Data[ 9382 ];

	AController_execEnemyJustTeleported_Parms EnemyJustTeleported_Parms;

	this->ProcessEvent ( pFnEnemyJustTeleported, &EnemyJustTeleported_Parms, NULL );
};

// Function Engine.Controller.BeyondFogDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 ViewPoint                      ( CPF_Parm )
// struct FVector                 OtherPoint                     ( CPF_Parm )

bool AController::BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint )
{
	static UFunction* pFnBeyondFogDistance = NULL;

	if ( ! pFnBeyondFogDistance )
		pFnBeyondFogDistance = (UFunction*) UObject::GObjObjects()->Data[ 9378 ];

	AController_execBeyondFogDistance_Parms BeyondFogDistance_Parms;
	memcpy ( &BeyondFogDistance_Parms.ViewPoint, &ViewPoint, 0xC );
	memcpy ( &BeyondFogDistance_Parms.OtherPoint, &OtherPoint, 0xC );

	pFnBeyondFogDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeyondFogDistance, &BeyondFogDistance_Parms, NULL );

	pFnBeyondFogDistance->FunctionFlags |= 0x400;

	return BeyondFogDistance_Parms.ReturnValue;
};

// Function Engine.Controller.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 9375 ];

	AController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Controller.CleanupPRI
// [0x00020002] 
// Parameters infos:

void AController::CleanupPRI ( )
{
	static UFunction* pFnCleanupPRI = NULL;

	if ( ! pFnCleanupPRI )
		pFnCleanupPRI = (UFunction*) UObject::GObjObjects()->Data[ 9374 ];

	AController_execCleanupPRI_Parms CleanupPRI_Parms;

	this->ProcessEvent ( pFnCleanupPRI, &CleanupPRI_Parms, NULL );
};

// Function Engine.Controller.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 9371 ];

	AController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Controller.NotifyPostLanded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyPostLanded ( )
{
	static UFunction* pFnNotifyPostLanded = NULL;

	if ( ! pFnNotifyPostLanded )
		pFnNotifyPostLanded = (UFunction*) UObject::GObjObjects()->Data[ 9370 ];

	AController_eventNotifyPostLanded_Parms NotifyPostLanded_Parms;

	this->ProcessEvent ( pFnNotifyPostLanded, &NotifyPostLanded_Parms, NULL );
};

// Function Engine.Controller.GamePlayEndedState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::GamePlayEndedState ( )
{
	static UFunction* pFnGamePlayEndedState = NULL;

	if ( ! pFnGamePlayEndedState )
		pFnGamePlayEndedState = (UFunction*) UObject::GObjObjects()->Data[ 9368 ];

	AController_execGamePlayEndedState_Parms GamePlayEndedState_Parms;

	this->ProcessEvent ( pFnGamePlayEndedState, &GamePlayEndedState_Parms, NULL );

	return GamePlayEndedState_Parms.ReturnValue;
};

// Function Engine.Controller.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void AController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 9364 ];

	AController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.Controller.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 9363 ];

	AController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.Controller.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AController::eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 9359 ];

	AController_eventPossess_Parms Possess_Parms;
	Possess_Parms.inPawn = inPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.Controller.OnPossess
// [0x00020002] 
// Parameters infos:
// class USeqAct_Possess*         inAction                       ( CPF_Parm )

void AController::OnPossess ( class USeqAct_Possess* inAction )
{
	static UFunction* pFnOnPossess = NULL;

	if ( ! pFnOnPossess )
		pFnOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 9348 ];

	AController_execOnPossess_Parms OnPossess_Parms;
	OnPossess_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPossess, &OnPossess_Parms, NULL );
};

// Function Engine.Controller.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AController::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 9346 ];

	AController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Controller.ClientSetRotation
// [0x010241C2] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// unsigned long                  bResetCamera                   ( CPF_OptionalParm | CPF_Parm )

void AController::ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 9343 ];

	AController_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );
	ClientSetRotation_Parms.bResetCamera = bResetCamera;

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Controller.ClientSetLocation
// [0x010201C2] 
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// struct FRotator                NewRotation                    ( CPF_Parm )

void AController::ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation )
{
	static UFunction* pFnClientSetLocation = NULL;

	if ( ! pFnClientSetLocation )
		pFnClientSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 9339 ];

	AController_execClientSetLocation_Parms ClientSetLocation_Parms;
	memcpy ( &ClientSetLocation_Parms.NewLocation, &NewLocation, 0xC );
	memcpy ( &ClientSetLocation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetLocation, &ClientSetLocation_Parms, NULL );
};

// Function Engine.Controller.Reset
// [0x00020002] 
// Parameters infos:

void AController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 9338 ];

	AController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Controller.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 9337 ];

	AController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Controller.SetSkelControlScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AController::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 9334 ];

	AController_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Controller.SetMorphWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void AController::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 9331 ];

	AController_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Controller.StopActorFaceFXAnim
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AController::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9330 ];

	AController_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.Controller.PlayActorFaceFXAnim
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )
// class UAkEvent*                AkEventToPlay                  ( CPF_Parm )

bool AController::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9321 ];

	AController_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;
	PlayActorFaceFXAnim_Parms.AkEventToPlay = AkEventToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Controller.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AController::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 9319 ];

	AController_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Controller.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void AController::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 9311 ];

	AController_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;
	SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Controller.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void AController::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 9309 ];

	AController_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Controller.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AController::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 9308 ];

	AController_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.Controller.GetAdjustLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetAdjustLocation ( )
{
	static UFunction* pFnGetAdjustLocation = NULL;

	if ( ! pFnGetAdjustLocation )
		pFnGetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 9306 ];

	AController_execGetAdjustLocation_Parms GetAdjustLocation_Parms;

	pFnGetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdjustLocation, &GetAdjustLocation_Parms, NULL );

	pFnGetAdjustLocation->FunctionFlags |= 0x400;

	return GetAdjustLocation_Parms.ReturnValue;
};

// Function Engine.Controller.SetAdjustLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewLoc                         ( CPF_Parm )
// unsigned long                  bAdjust                        ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetAdjustLocation = NULL;

	if ( ! pFnSetAdjustLocation )
		pFnSetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 9302 ];

	AController_execSetAdjustLocation_Parms SetAdjustLocation_Parms;
	memcpy ( &SetAdjustLocation_Parms.NewLoc, &NewLoc, 0xC );
	SetAdjustLocation_Parms.bAdjust = bAdjust;
	SetAdjustLocation_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAdjustLocation, &SetAdjustLocation_Parms, NULL );

	pFnSetAdjustLocation->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetDestinationPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetDestinationPosition ( )
{
	static UFunction* pFnGetDestinationPosition = NULL;

	if ( ! pFnGetDestinationPosition )
		pFnGetDestinationPosition = (UFunction*) UObject::GObjObjects()->Data[ 9300 ];

	AController_execGetDestinationPosition_Parms GetDestinationPosition_Parms;

	pFnGetDestinationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDestinationPosition, &GetDestinationPosition_Parms, NULL );

	pFnGetDestinationPosition->FunctionFlags |= 0x400;

	return GetDestinationPosition_Parms.ReturnValue;
};

// Function Engine.Controller.SetDestinationPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Dest                           ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetDestinationPosition = NULL;

	if ( ! pFnSetDestinationPosition )
		pFnSetDestinationPosition = (UFunction*) UObject::GObjObjects()->Data[ 9297 ];

	AController_execSetDestinationPosition_Parms SetDestinationPosition_Parms;
	memcpy ( &SetDestinationPosition_Parms.Dest, &Dest, 0xC );
	SetDestinationPosition_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetDestinationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDestinationPosition, &SetDestinationPosition_Parms, NULL );

	pFnSetDestinationPosition->FunctionFlags |= 0x400;
};

// Function Engine.Controller.GetFocalPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AController::GetFocalPoint ( )
{
	static UFunction* pFnGetFocalPoint = NULL;

	if ( ! pFnGetFocalPoint )
		pFnGetFocalPoint = (UFunction*) UObject::GObjObjects()->Data[ 9295 ];

	AController_execGetFocalPoint_Parms GetFocalPoint_Parms;

	pFnGetFocalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFocalPoint, &GetFocalPoint_Parms, NULL );

	pFnGetFocalPoint->FunctionFlags |= 0x400;

	return GetFocalPoint_Parms.ReturnValue;
};

// Function Engine.Controller.SetFocalPoint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 FP                             ( CPF_Parm )
// unsigned long                  bOffsetFromBase                ( CPF_OptionalParm | CPF_Parm )

void AController::SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase )
{
	static UFunction* pFnSetFocalPoint = NULL;

	if ( ! pFnSetFocalPoint )
		pFnSetFocalPoint = (UFunction*) UObject::GObjObjects()->Data[ 9292 ];

	AController_execSetFocalPoint_Parms SetFocalPoint_Parms;
	memcpy ( &SetFocalPoint_Parms.FP, &FP, 0xC );
	SetFocalPoint_Parms.bOffsetFromBase = bOffsetFromBase;

	pFnSetFocalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFocalPoint, &SetFocalPoint_Parms, NULL );

	pFnSetFocalPoint->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_RemoveIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            InIndex                        ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_RemoveIndex ( int InIndex, int Count )
{
	static UFunction* pFnRouteCache_RemoveIndex = NULL;

	if ( ! pFnRouteCache_RemoveIndex )
		pFnRouteCache_RemoveIndex = (UFunction*) UObject::GObjObjects()->Data[ 9289 ];

	AController_execRouteCache_RemoveIndex_Parms RouteCache_RemoveIndex_Parms;
	RouteCache_RemoveIndex_Parms.InIndex = InIndex;
	RouteCache_RemoveIndex_Parms.Count = Count;

	pFnRouteCache_RemoveIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveIndex, &RouteCache_RemoveIndex_Parms, NULL );

	pFnRouteCache_RemoveIndex->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_RemoveItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_RemoveItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_RemoveItem = NULL;

	if ( ! pFnRouteCache_RemoveItem )
		pFnRouteCache_RemoveItem = (UFunction*) UObject::GObjObjects()->Data[ 9287 ];

	AController_execRouteCache_RemoveItem_Parms RouteCache_RemoveItem_Parms;
	RouteCache_RemoveItem_Parms.Nav = Nav;

	pFnRouteCache_RemoveItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_RemoveItem, &RouteCache_RemoveItem_Parms, NULL );

	pFnRouteCache_RemoveItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_InsertItem
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )
// int                            Idx                            ( CPF_OptionalParm | CPF_Parm )

void AController::RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx )
{
	static UFunction* pFnRouteCache_InsertItem = NULL;

	if ( ! pFnRouteCache_InsertItem )
		pFnRouteCache_InsertItem = (UFunction*) UObject::GObjObjects()->Data[ 9284 ];

	AController_execRouteCache_InsertItem_Parms RouteCache_InsertItem_Parms;
	RouteCache_InsertItem_Parms.Nav = Nav;
	RouteCache_InsertItem_Parms.Idx = Idx;

	pFnRouteCache_InsertItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_InsertItem, &RouteCache_InsertItem_Parms, NULL );

	pFnRouteCache_InsertItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_AddItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void AController::RouteCache_AddItem ( class ANavigationPoint* Nav )
{
	static UFunction* pFnRouteCache_AddItem = NULL;

	if ( ! pFnRouteCache_AddItem )
		pFnRouteCache_AddItem = (UFunction*) UObject::GObjObjects()->Data[ 9282 ];

	AController_execRouteCache_AddItem_Parms RouteCache_AddItem_Parms;
	RouteCache_AddItem_Parms.Nav = Nav;

	pFnRouteCache_AddItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_AddItem, &RouteCache_AddItem_Parms, NULL );

	pFnRouteCache_AddItem->FunctionFlags |= 0x400;
};

// Function Engine.Controller.RouteCache_Empty
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AController::RouteCache_Empty ( )
{
	static UFunction* pFnRouteCache_Empty = NULL;

	if ( ! pFnRouteCache_Empty )
		pFnRouteCache_Empty = (UFunction*) UObject::GObjObjects()->Data[ 9281 ];

	AController_execRouteCache_Empty_Parms RouteCache_Empty_Parms;

	pFnRouteCache_Empty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRouteCache_Empty, &RouteCache_Empty_Parms, NULL );

	pFnRouteCache_Empty->FunctionFlags |= 0x400;
};

// Function Engine.Controller.IsLocalController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsLocalController ( )
{
	static UFunction* pFnIsLocalController = NULL;

	if ( ! pFnIsLocalController )
		pFnIsLocalController = (UFunction*) UObject::GObjObjects()->Data[ 9279 ];

	AController_execIsLocalController_Parms IsLocalController_Parms;

	pFnIsLocalController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalController, &IsLocalController_Parms, NULL );

	pFnIsLocalController->FunctionFlags |= 0x400;

	return IsLocalController_Parms.ReturnValue;
};

// Function Engine.Controller.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 9277 ];

	AController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetMatineeConstantCameraAnim
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )

void APlayerController::eventSetMatineeConstantCameraAnim ( unsigned long bOn, unsigned char Type, float Rate )
{
	static UFunction* pFnSetMatineeConstantCameraAnim = NULL;

	if ( ! pFnSetMatineeConstantCameraAnim )
		pFnSetMatineeConstantCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 13008 ];

	APlayerController_eventSetMatineeConstantCameraAnim_Parms SetMatineeConstantCameraAnim_Parms;
	SetMatineeConstantCameraAnim_Parms.bOn = bOn;
	SetMatineeConstantCameraAnim_Parms.Type = Type;
	SetMatineeConstantCameraAnim_Parms.Rate = Rate;

	this->ProcessEvent ( pFnSetMatineeConstantCameraAnim, &SetMatineeConstantCameraAnim_Parms, NULL );
};

// Function Engine.PlayerController.NotifyDisconnect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::eventNotifyDisconnect ( struct FString Command )
{
	static UFunction* pFnNotifyDisconnect = NULL;

	if ( ! pFnNotifyDisconnect )
		pFnNotifyDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 13005 ];

	APlayerController_eventNotifyDisconnect_Parms NotifyDisconnect_Parms;
	memcpy ( &NotifyDisconnect_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnNotifyDisconnect, &NotifyDisconnect_Parms, NULL );

	return NotifyDisconnect_Parms.ReturnValue;
};

// Function Engine.PlayerController.ReceivedGameClass
// [0x00020102] 
// Parameters infos:
// class UClass*                  GameClass                      ( CPF_Parm )

void APlayerController::ReceivedGameClass ( class UClass* GameClass )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = (UFunction*) UObject::GObjObjects()->Data[ 13002 ];

	APlayerController_execReceivedGameClass_Parms ReceivedGameClass_Parms;
	ReceivedGameClass_Parms.GameClass = GameClass;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function Engine.PlayerController.GetHearSoundTransform
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void APlayerController::GetHearSoundTransform ( struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetHearSoundTransform = NULL;

	if ( ! pFnGetHearSoundTransform )
		pFnGetHearSoundTransform = (UFunction*) UObject::GObjObjects()->Data[ 13004 ];

	APlayerController_execGetHearSoundTransform_Parms GetHearSoundTransform_Parms;

	pFnGetHearSoundTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHearSoundTransform, &GetHearSoundTransform_Parms, NULL );

	pFnGetHearSoundTransform->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &GetHearSoundTransform_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetHearSoundTransform_Parms.OutRotation, 0xC );
};

// Function Engine.PlayerController.LogOutBugItAIGoToLogFile
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 InScreenShotDesc               ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InGoString                     ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InLocString                    ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LogOutBugItAIGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString )
{
	static UFunction* pFnLogOutBugItAIGoToLogFile = NULL;

	if ( ! pFnLogOutBugItAIGoToLogFile )
		pFnLogOutBugItAIGoToLogFile = (UFunction*) UObject::GObjObjects()->Data[ 12988 ];

	APlayerController_execLogOutBugItAIGoToLogFile_Parms LogOutBugItAIGoToLogFile_Parms;
	memcpy ( &LogOutBugItAIGoToLogFile_Parms.InScreenShotDesc, &InScreenShotDesc, 0xC );
	memcpy ( &LogOutBugItAIGoToLogFile_Parms.InGoString, &InGoString, 0xC );
	memcpy ( &LogOutBugItAIGoToLogFile_Parms.InLocString, &InLocString, 0xC );

	pFnLogOutBugItAIGoToLogFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogOutBugItAIGoToLogFile, &LogOutBugItAIGoToLogFile_Parms, NULL );

	pFnLogOutBugItAIGoToLogFile->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LogOutBugItGoToLogFile
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 InScreenShotDesc               ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InGoString                     ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InLocString                    ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LogOutBugItGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString )
{
	static UFunction* pFnLogOutBugItGoToLogFile = NULL;

	if ( ! pFnLogOutBugItGoToLogFile )
		pFnLogOutBugItGoToLogFile = (UFunction*) UObject::GObjObjects()->Data[ 12976 ];

	APlayerController_execLogOutBugItGoToLogFile_Parms LogOutBugItGoToLogFile_Parms;
	memcpy ( &LogOutBugItGoToLogFile_Parms.InScreenShotDesc, &InScreenShotDesc, 0xC );
	memcpy ( &LogOutBugItGoToLogFile_Parms.InGoString, &InGoString, 0xC );
	memcpy ( &LogOutBugItGoToLogFile_Parms.InLocString, &InLocString, 0xC );

	pFnLogOutBugItGoToLogFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogOutBugItGoToLogFile, &LogOutBugItGoToLogFile_Parms, NULL );

	pFnLogOutBugItGoToLogFile->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.DisableDebugAI
// [0x00020002] 
// Parameters infos:

void APlayerController::DisableDebugAI ( )
{
	static UFunction* pFnDisableDebugAI = NULL;

	if ( ! pFnDisableDebugAI )
		pFnDisableDebugAI = (UFunction*) UObject::GObjObjects()->Data[ 12995 ];

	APlayerController_execDisableDebugAI_Parms DisableDebugAI_Parms;

	this->ProcessEvent ( pFnDisableDebugAI, &DisableDebugAI_Parms, NULL );
};

// Function Engine.PlayerController.OnEngineInitialTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventOnEngineInitialTick ( )
{
	static UFunction* pFnOnEngineInitialTick = NULL;

	if ( ! pFnOnEngineInitialTick )
		pFnOnEngineInitialTick = (UFunction*) UObject::GObjObjects()->Data[ 12994 ];

	APlayerController_eventOnEngineInitialTick_Parms OnEngineInitialTick_Parms;

	this->ProcessEvent ( pFnOnEngineInitialTick, &OnEngineInitialTick_Parms, NULL );
};

// Function Engine.PlayerController.BugItStringCreator
// [0x00420A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FVector                 ViewLocation                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                ViewRotation                   ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FString                 GoString                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 LocString                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::BugItStringCreator ( struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString )
{
	static UFunction* pFnBugItStringCreator = NULL;

	if ( ! pFnBugItStringCreator )
		pFnBugItStringCreator = (UFunction*) UObject::GObjObjects()->Data[ 12989 ];

	APlayerController_execBugItStringCreator_Parms BugItStringCreator_Parms;

	this->ProcessEvent ( pFnBugItStringCreator, &BugItStringCreator_Parms, NULL );

	if ( ViewLocation )
		memcpy ( ViewLocation, &BugItStringCreator_Parms.ViewLocation, 0xC );

	if ( ViewRotation )
		memcpy ( ViewRotation, &BugItStringCreator_Parms.ViewRotation, 0xC );

	if ( GoString )
		memcpy ( GoString, &BugItStringCreator_Parms.GoString, 0xC );

	if ( LocString )
		memcpy ( LocString, &BugItStringCreator_Parms.LocString, 0xC );
};

// Function Engine.PlayerController.BugItAI
// [0x00824A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 ScreenShotDescription          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::BugItAI ( struct FString ScreenShotDescription )
{
	static UFunction* pFnBugItAI = NULL;

	if ( ! pFnBugItAI )
		pFnBugItAI = (UFunction*) UObject::GObjObjects()->Data[ 12982 ];

	APlayerController_execBugItAI_Parms BugItAI_Parms;
	memcpy ( &BugItAI_Parms.ScreenShotDescription, &ScreenShotDescription, 0xC );

	this->ProcessEvent ( pFnBugItAI, &BugItAI_Parms, NULL );
};

// Function Engine.PlayerController.LogLoc
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::LogLoc ( )
{
	static UFunction* pFnLogLoc = NULL;

	if ( ! pFnLogLoc )
		pFnLogLoc = (UFunction*) UObject::GObjObjects()->Data[ 12977 ];

	APlayerController_execLogLoc_Parms LogLoc_Parms;

	this->ProcessEvent ( pFnLogLoc, &LogLoc_Parms, NULL );
};

// Function Engine.PlayerController.BugIt
// [0x00824A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// struct FString                 ScreenShotDescription          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::BugIt ( struct FString ScreenShotDescription )
{
	static UFunction* pFnBugIt = NULL;

	if ( ! pFnBugIt )
		pFnBugIt = (UFunction*) UObject::GObjObjects()->Data[ 12970 ];

	APlayerController_execBugIt_Parms BugIt_Parms;
	memcpy ( &BugIt_Parms.ScreenShotDescription, &ScreenShotDescription, 0xC );

	this->ProcessEvent ( pFnBugIt, &BugIt_Parms, NULL );
};

// Function Engine.PlayerController.BugItWorker
// [0x00020002] 
// Parameters infos:
// struct FVector                 TheLocation                    ( CPF_Parm )
// struct FRotator                TheRotation                    ( CPF_Parm )

void APlayerController::BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation )
{
	static UFunction* pFnBugItWorker = NULL;

	if ( ! pFnBugItWorker )
		pFnBugItWorker = (UFunction*) UObject::GObjObjects()->Data[ 12967 ];

	APlayerController_execBugItWorker_Parms BugItWorker_Parms;
	memcpy ( &BugItWorker_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItWorker_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItWorker, &BugItWorker_Parms, NULL );
};

// Function Engine.PlayerController.BugItGoString
// [0x00020002] 
// Parameters infos:
// struct FString                 TheLocation                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 TheRotation                    ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::BugItGoString ( struct FString TheLocation, struct FString TheRotation )
{
	static UFunction* pFnBugItGoString = NULL;

	if ( ! pFnBugItGoString )
		pFnBugItGoString = (UFunction*) UObject::GObjObjects()->Data[ 12964 ];

	APlayerController_execBugItGoString_Parms BugItGoString_Parms;
	memcpy ( &BugItGoString_Parms.TheLocation, &TheLocation, 0xC );
	memcpy ( &BugItGoString_Parms.TheRotation, &TheRotation, 0xC );

	this->ProcessEvent ( pFnBugItGoString, &BugItGoString_Parms, NULL );
};

// Function Engine.PlayerController.BugItGo
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm | CPF_CoerceParm )
// float                          Y                              ( CPF_Parm | CPF_CoerceParm )
// float                          Z                              ( CPF_Parm | CPF_CoerceParm )
// int                            Pitch                          ( CPF_Parm | CPF_CoerceParm )
// int                            Yaw                            ( CPF_Parm | CPF_CoerceParm )
// int                            Roll                           ( CPF_Parm | CPF_CoerceParm )

void APlayerController::BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll )
{
	static UFunction* pFnBugItGo = NULL;

	if ( ! pFnBugItGo )
		pFnBugItGo = (UFunction*) UObject::GObjObjects()->Data[ 12955 ];

	APlayerController_execBugItGo_Parms BugItGo_Parms;
	BugItGo_Parms.X = X;
	BugItGo_Parms.Y = Y;
	BugItGo_Parms.Z = Z;
	BugItGo_Parms.Pitch = Pitch;
	BugItGo_Parms.Yaw = Yaw;
	BugItGo_Parms.Roll = Roll;

	this->ProcessEvent ( pFnBugItGo, &BugItGo_Parms, NULL );
};

// Function Engine.PlayerController.HasPeerConnection
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PeerNetId                      ( CPF_Const | CPF_Parm | CPF_OutParm )

bool APlayerController::HasPeerConnection ( struct FUniqueNetId* PeerNetId )
{
	static UFunction* pFnHasPeerConnection = NULL;

	if ( ! pFnHasPeerConnection )
		pFnHasPeerConnection = (UFunction*) UObject::GObjObjects()->Data[ 12952 ];

	APlayerController_execHasPeerConnection_Parms HasPeerConnection_Parms;

	pFnHasPeerConnection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasPeerConnection, &HasPeerConnection_Parms, NULL );

	pFnHasPeerConnection->FunctionFlags |= 0x400;

	if ( PeerNetId )
		memcpy ( PeerNetId, &HasPeerConnection_Parms.PeerNetId, 0x48 );

	return HasPeerConnection_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnSetSoundMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetSoundMode*    Action                         ( CPF_Parm )

void APlayerController::OnSetSoundMode ( class USeqAct_SetSoundMode* Action )
{
	static UFunction* pFnOnSetSoundMode = NULL;

	if ( ! pFnOnSetSoundMode )
		pFnOnSetSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 12943 ];

	APlayerController_execOnSetSoundMode_Parms OnSetSoundMode_Parms;
	OnSetSoundMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetSoundMode, &OnSetSoundMode_Parms, NULL );
};

// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class UClass*                  LensEffectEmitterClass         ( CPF_Parm )

void APlayerController::eventClientSpawnCameraLensEffect ( class UClass* LensEffectEmitterClass )
{
	static UFunction* pFnClientSpawnCameraLensEffect = NULL;

	if ( ! pFnClientSpawnCameraLensEffect )
		pFnClientSpawnCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 12941 ];

	APlayerController_eventClientSpawnCameraLensEffect_Parms ClientSpawnCameraLensEffect_Parms;
	ClientSpawnCameraLensEffect_Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent ( pFnClientSpawnCameraLensEffect, &ClientSpawnCameraLensEffect_Parms, NULL );
};

// Function Engine.PlayerController.DebugCameraAnims
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::DebugCameraAnims ( )
{
	static UFunction* pFnDebugCameraAnims = NULL;

	if ( ! pFnDebugCameraAnims )
		pFnDebugCameraAnims = (UFunction*) UObject::GObjObjects()->Data[ 12939 ];

	APlayerController_execDebugCameraAnims_Parms DebugCameraAnims_Parms;

	this->ProcessEvent ( pFnDebugCameraAnims, &DebugCameraAnims_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopCameraAnim
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UCameraAnim*             AnimToStop                     ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientStopCameraAnim ( class UCameraAnim* AnimToStop, unsigned long bImmediate )
{
	static UFunction* pFnClientStopCameraAnim = NULL;

	if ( ! pFnClientStopCameraAnim )
		pFnClientStopCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 12936 ];

	APlayerController_eventClientStopCameraAnim_Parms ClientStopCameraAnim_Parms;
	ClientStopCameraAnim_Parms.AnimToStop = AnimToStop;
	ClientStopCameraAnim_Parms.bImmediate = bImmediate;

	this->ProcessEvent ( pFnClientStopCameraAnim, &ClientStopCameraAnim_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayCameraAnim
// [0x01024942] ( FUNC_Event )
// Parameters infos:
// class UCameraAnim*             AnimToPlay                     ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Space                          ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                CustomPlaySpace                ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace )
{
	static UFunction* pFnClientPlayCameraAnim = NULL;

	if ( ! pFnClientPlayCameraAnim )
		pFnClientPlayCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 12924 ];

	APlayerController_eventClientPlayCameraAnim_Parms ClientPlayCameraAnim_Parms;
	ClientPlayCameraAnim_Parms.AnimToPlay = AnimToPlay;
	ClientPlayCameraAnim_Parms.Scale = Scale;
	ClientPlayCameraAnim_Parms.Rate = Rate;
	ClientPlayCameraAnim_Parms.BlendInTime = BlendInTime;
	ClientPlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	ClientPlayCameraAnim_Parms.bLoop = bLoop;
	ClientPlayCameraAnim_Parms.bRandomStartTime = bRandomStartTime;
	ClientPlayCameraAnim_Parms.Space = Space;
	memcpy ( &ClientPlayCameraAnim_Parms.CustomPlaySpace, &CustomPlaySpace, 0xC );

	this->ProcessEvent ( pFnClientPlayCameraAnim, &ClientPlayCameraAnim_Parms, NULL );
};

// Function Engine.PlayerController.OnCameraShake
// [0x00020002] 
// Parameters infos:
// class USeqAct_CameraShake*     inAction                       ( CPF_Parm )

void APlayerController::OnCameraShake ( class USeqAct_CameraShake* inAction )
{
	static UFunction* pFnOnCameraShake = NULL;

	if ( ! pFnOnCameraShake )
		pFnOnCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 12912 ];

	APlayerController_execOnCameraShake_Parms OnCameraShake_Parms;
	OnCameraShake_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnCameraShake, &OnCameraShake_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopCameraShake
// [0x01020142] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )

void APlayerController::ClientStopCameraShake ( class UCameraShake* Shake )
{
	static UFunction* pFnClientStopCameraShake = NULL;

	if ( ! pFnClientStopCameraShake )
		pFnClientStopCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 12910 ];

	APlayerController_execClientStopCameraShake_Parms ClientStopCameraShake_Parms;
	ClientStopCameraShake_Parms.Shake = Shake;

	this->ProcessEvent ( pFnClientStopCameraShake, &ClientStopCameraShake_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayCameraShake
// [0x01024142] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTryForceFeedback              ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientPlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned long bTryForceFeedback, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnClientPlayCameraShake = NULL;

	if ( ! pFnClientPlayCameraShake )
		pFnClientPlayCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 12904 ];

	APlayerController_execClientPlayCameraShake_Parms ClientPlayCameraShake_Parms;
	ClientPlayCameraShake_Parms.Shake = Shake;
	ClientPlayCameraShake_Parms.Scale = Scale;
	ClientPlayCameraShake_Parms.bTryForceFeedback = bTryForceFeedback;
	ClientPlayCameraShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &ClientPlayCameraShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnClientPlayCameraShake, &ClientPlayCameraShake_Parms, NULL );
};

// Function Engine.PlayerController.DoForceFeedbackForScreenShake
// [0x00080100] 
// Parameters infos:
// class UCameraShake*            ShakeData                      ( CPF_Parm )
// float                          ShakeScale                     ( CPF_Parm )

void APlayerController::DoForceFeedbackForScreenShake ( class UCameraShake* ShakeData, float ShakeScale )
{
	static UFunction* pFnDoForceFeedbackForScreenShake = NULL;

	if ( ! pFnDoForceFeedbackForScreenShake )
		pFnDoForceFeedbackForScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 12901 ];

	APlayerController_execDoForceFeedbackForScreenShake_Parms DoForceFeedbackForScreenShake_Parms;
	DoForceFeedbackForScreenShake_Parms.ShakeData = ShakeData;
	DoForceFeedbackForScreenShake_Parms.ShakeScale = ShakeScale;

	this->ProcessEvent ( pFnDoForceFeedbackForScreenShake, &DoForceFeedbackForScreenShake_Parms, NULL );
};

// Function Engine.PlayerController.InputMatchDelegate
// [0x00120000] 
// Parameters infos:

void APlayerController::InputMatchDelegate ( )
{
	static UFunction* pFnInputMatchDelegate = NULL;

	if ( ! pFnInputMatchDelegate )
		pFnInputMatchDelegate = (UFunction*) UObject::GObjObjects()->Data[ 12900 ];

	APlayerController_execInputMatchDelegate_Parms InputMatchDelegate_Parms;

	this->ProcessEvent ( pFnInputMatchDelegate, &InputMatchDelegate_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints ( )
{
	static UFunction* pFnSentinel_PostAcquireTravelTheWorldPoints = NULL;

	if ( ! pFnSentinel_PostAcquireTravelTheWorldPoints )
		pFnSentinel_PostAcquireTravelTheWorldPoints = (UFunction*) UObject::GObjObjects()->Data[ 12899 ];

	APlayerController_execSentinel_PostAcquireTravelTheWorldPoints_Parms Sentinel_PostAcquireTravelTheWorldPoints_Parms;

	this->ProcessEvent ( pFnSentinel_PostAcquireTravelTheWorldPoints, &Sentinel_PostAcquireTravelTheWorldPoints_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints ( )
{
	static UFunction* pFnSentinel_PreAcquireTravelTheWorldPoints = NULL;

	if ( ! pFnSentinel_PreAcquireTravelTheWorldPoints )
		pFnSentinel_PreAcquireTravelTheWorldPoints = (UFunction*) UObject::GObjObjects()->Data[ 12898 ];

	APlayerController_execSentinel_PreAcquireTravelTheWorldPoints_Parms Sentinel_PreAcquireTravelTheWorldPoints_Parms;

	this->ProcessEvent ( pFnSentinel_PreAcquireTravelTheWorldPoints, &Sentinel_PreAcquireTravelTheWorldPoints_Parms, NULL );
};

// Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
// [0x00020000] 
// Parameters infos:

void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld ( )
{
	static UFunction* pFnSentinel_SetupForGamebasedTravelTheWorld = NULL;

	if ( ! pFnSentinel_SetupForGamebasedTravelTheWorld )
		pFnSentinel_SetupForGamebasedTravelTheWorld = (UFunction*) UObject::GObjObjects()->Data[ 12897 ];

	APlayerController_execSentinel_SetupForGamebasedTravelTheWorld_Parms Sentinel_SetupForGamebasedTravelTheWorld_Parms;

	this->ProcessEvent ( pFnSentinel_SetupForGamebasedTravelTheWorld, &Sentinel_SetupForGamebasedTravelTheWorld_Parms, NULL );
};

// Function Engine.PlayerController.OnFlyThroughHasEnded
// [0x00020102] 
// Parameters infos:
// class USeqAct_FlyThroughHasEnded* inAction                       ( CPF_Parm )

void APlayerController::OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction )
{
	static UFunction* pFnOnFlyThroughHasEnded = NULL;

	if ( ! pFnOnFlyThroughHasEnded )
		pFnOnFlyThroughHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 12891 ];

	APlayerController_execOnFlyThroughHasEnded_Parms OnFlyThroughHasEnded_Parms;
	OnFlyThroughHasEnded_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnFlyThroughHasEnded, &OnFlyThroughHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.GetAchievementProgression
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AchievementId                  ( CPF_Parm )
// float                          CurrentValue                   ( CPF_Parm | CPF_OutParm )
// float                          MaxValue                       ( CPF_Parm | CPF_OutParm )

bool APlayerController::eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue )
{
	static UFunction* pFnGetAchievementProgression = NULL;

	if ( ! pFnGetAchievementProgression )
		pFnGetAchievementProgression = (UFunction*) UObject::GObjObjects()->Data[ 12886 ];

	APlayerController_eventGetAchievementProgression_Parms GetAchievementProgression_Parms;
	GetAchievementProgression_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementProgression, &GetAchievementProgression_Parms, NULL );

	if ( CurrentValue )
		*CurrentValue = GetAchievementProgression_Parms.CurrentValue;

	if ( MaxValue )
		*MaxValue = GetAchievementProgression_Parms.MaxValue;

	return GetAchievementProgression_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyGameTypeName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPartyGameTypeName ( )
{
	static UFunction* pFnGetPartyGameTypeName = NULL;

	if ( ! pFnGetPartyGameTypeName )
		pFnGetPartyGameTypeName = (UFunction*) UObject::GObjObjects()->Data[ 12884 ];

	APlayerController_execGetPartyGameTypeName_Parms GetPartyGameTypeName_Parms;

	this->ProcessEvent ( pFnGetPartyGameTypeName, &GetPartyGameTypeName_Parms, NULL );

	return GetPartyGameTypeName_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPartyMapName
// [0x00022000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPartyMapName ( )
{
	static UFunction* pFnGetPartyMapName = NULL;

	if ( ! pFnGetPartyMapName )
		pFnGetPartyMapName = (UFunction*) UObject::GObjObjects()->Data[ 12882 ];

	APlayerController_execGetPartyMapName_Parms GetPartyMapName_Parms;

	this->ProcessEvent ( pFnGetPartyMapName, &GetPartyMapName_Parms, NULL );

	return GetPartyMapName_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsPartyLeader
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPartyLeader ( )
{
	static UFunction* pFnIsPartyLeader = NULL;

	if ( ! pFnIsPartyLeader )
		pFnIsPartyLeader = (UFunction*) UObject::GObjObjects()->Data[ 12879 ];

	APlayerController_execIsPartyLeader_Parms IsPartyLeader_Parms;

	this->ProcessEvent ( pFnIsPartyLeader, &IsPartyLeader_Parms, NULL );

	return IsPartyLeader_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientAddTextureStreamingLoc
// [0x01020DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 InLoc                          ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// unsigned long                  bOverrideLocation              ( CPF_Parm )

void APlayerController::eventClientAddTextureStreamingLoc ( struct FVector InLoc, float Duration, unsigned long bOverrideLocation )
{
	static UFunction* pFnClientAddTextureStreamingLoc = NULL;

	if ( ! pFnClientAddTextureStreamingLoc )
		pFnClientAddTextureStreamingLoc = (UFunction*) UObject::GObjObjects()->Data[ 12875 ];

	APlayerController_eventClientAddTextureStreamingLoc_Parms ClientAddTextureStreamingLoc_Parms;
	memcpy ( &ClientAddTextureStreamingLoc_Parms.InLoc, &InLoc, 0xC );
	ClientAddTextureStreamingLoc_Parms.Duration = Duration;
	ClientAddTextureStreamingLoc_Parms.bOverrideLocation = bOverrideLocation;

	pFnClientAddTextureStreamingLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddTextureStreamingLoc, &ClientAddTextureStreamingLoc_Parms, NULL );

	pFnClientAddTextureStreamingLoc->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientPrestreamTextures
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ForcedActor                    ( CPF_Parm )
// float                          ForceDuration                  ( CPF_Parm )
// unsigned long                  bEnableStreaming               ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientPrestreamTextures ( class AActor* ForcedActor, float ForceDuration, unsigned long bEnableStreaming, int CinematicTextureGroups )
{
	static UFunction* pFnClientPrestreamTextures = NULL;

	if ( ! pFnClientPrestreamTextures )
		pFnClientPrestreamTextures = (UFunction*) UObject::GObjObjects()->Data[ 12870 ];

	APlayerController_eventClientPrestreamTextures_Parms ClientPrestreamTextures_Parms;
	ClientPrestreamTextures_Parms.ForcedActor = ForcedActor;
	ClientPrestreamTextures_Parms.ForceDuration = ForceDuration;
	ClientPrestreamTextures_Parms.bEnableStreaming = bEnableStreaming;
	ClientPrestreamTextures_Parms.CinematicTextureGroups = CinematicTextureGroups;

	this->ProcessEvent ( pFnClientPrestreamTextures, &ClientPrestreamTextures_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UMaterialInterface*      Material                       ( CPF_Parm )
// float                          ForceDuration                  ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetForceMipLevelsToBeResident ( class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups )
{
	static UFunction* pFnClientSetForceMipLevelsToBeResident = NULL;

	if ( ! pFnClientSetForceMipLevelsToBeResident )
		pFnClientSetForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 12866 ];

	APlayerController_eventClientSetForceMipLevelsToBeResident_Parms ClientSetForceMipLevelsToBeResident_Parms;
	ClientSetForceMipLevelsToBeResident_Parms.Material = Material;
	ClientSetForceMipLevelsToBeResident_Parms.ForceDuration = ForceDuration;
	ClientSetForceMipLevelsToBeResident_Parms.CinematicTextureGroups = CinematicTextureGroups;

	this->ProcessEvent ( pFnClientSetForceMipLevelsToBeResident, &ClientSetForceMipLevelsToBeResident_Parms, NULL );
};

// Function Engine.PlayerController.ClientControlMovieTexture
// [0x010201C2] 
// Parameters infos:
// class UTextureMovie*           MovieTexture                   ( CPF_Parm )
// unsigned char                  Mode                           ( CPF_Parm )

void APlayerController::ClientControlMovieTexture ( class UTextureMovie* MovieTexture, unsigned char Mode )
{
	static UFunction* pFnClientControlMovieTexture = NULL;

	if ( ! pFnClientControlMovieTexture )
		pFnClientControlMovieTexture = (UFunction*) UObject::GObjObjects()->Data[ 12863 ];

	APlayerController_execClientControlMovieTexture_Parms ClientControlMovieTexture_Parms;
	ClientControlMovieTexture_Parms.MovieTexture = MovieTexture;
	ClientControlMovieTexture_Parms.Mode = Mode;

	this->ProcessEvent ( pFnClientControlMovieTexture, &ClientControlMovieTexture_Parms, NULL );
};

// Function Engine.PlayerController.GetSplitscreenPlayerCount
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int APlayerController::GetSplitscreenPlayerCount ( )
{
	static UFunction* pFnGetSplitscreenPlayerCount = NULL;

	if ( ! pFnGetSplitscreenPlayerCount )
		pFnGetSplitscreenPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 12858 ];

	APlayerController_execGetSplitscreenPlayerCount_Parms GetSplitscreenPlayerCount_Parms;

	this->ProcessEvent ( pFnGetSplitscreenPlayerCount, &GetSplitscreenPlayerCount_Parms, NULL );

	return GetSplitscreenPlayerCount_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetSplitscreenPlayerByIndex
// [0x00024102] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

class APlayerReplicationInfo* APlayerController::GetSplitscreenPlayerByIndex ( int PlayerIndex )
{
	static UFunction* pFnGetSplitscreenPlayerByIndex = NULL;

	if ( ! pFnGetSplitscreenPlayerByIndex )
		pFnGetSplitscreenPlayerByIndex = (UFunction*) UObject::GObjObjects()->Data[ 12848 ];

	APlayerController_execGetSplitscreenPlayerByIndex_Parms GetSplitscreenPlayerByIndex_Parms;
	GetSplitscreenPlayerByIndex_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnGetSplitscreenPlayerByIndex, &GetSplitscreenPlayerByIndex_Parms, NULL );

	return GetSplitscreenPlayerByIndex_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsSplitscreenPlayer
// [0x00424103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            out_SplitscreenPlayerIndex     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool APlayerController::IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex )
{
	static UFunction* pFnIsSplitscreenPlayer = NULL;

	if ( ! pFnIsSplitscreenPlayer )
		pFnIsSplitscreenPlayer = (UFunction*) UObject::GObjObjects()->Data[ 12839 ];

	APlayerController_execIsSplitscreenPlayer_Parms IsSplitscreenPlayer_Parms;

	this->ProcessEvent ( pFnIsSplitscreenPlayer, &IsSplitscreenPlayer_Parms, NULL );

	if ( out_SplitscreenPlayerIndex )
		*out_SplitscreenPlayerIndex = IsSplitscreenPlayer_Parms.out_SplitscreenPlayerIndex;

	return IsSplitscreenPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsPrimaryPlayer
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPrimaryPlayer ( )
{
	static UFunction* pFnIsPrimaryPlayer = NULL;

	if ( ! pFnIsPrimaryPlayer )
		pFnIsPrimaryPlayer = (UFunction*) UObject::GObjObjects()->Data[ 10269 ];

	APlayerController_execIsPrimaryPlayer_Parms IsPrimaryPlayer_Parms;

	this->ProcessEvent ( pFnIsPrimaryPlayer, &IsPrimaryPlayer_Parms, NULL );

	return IsPrimaryPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientNotifyPartyHostLeaving
// [0x010201C2] 
// Parameters infos:
// struct FUniqueNetId            PartyHostPlayerId              ( CPF_Parm )

void APlayerController::ClientNotifyPartyHostLeaving ( struct FUniqueNetId PartyHostPlayerId )
{
	static UFunction* pFnClientNotifyPartyHostLeaving = NULL;

	if ( ! pFnClientNotifyPartyHostLeaving )
		pFnClientNotifyPartyHostLeaving = (UFunction*) UObject::GObjObjects()->Data[ 12836 ];

	APlayerController_execClientNotifyPartyHostLeaving_Parms ClientNotifyPartyHostLeaving_Parms;
	memcpy ( &ClientNotifyPartyHostLeaving_Parms.PartyHostPlayerId, &PartyHostPlayerId, 0x48 );

	this->ProcessEvent ( pFnClientNotifyPartyHostLeaving, &ClientNotifyPartyHostLeaving_Parms, NULL );
};

// Function Engine.PlayerController.ClientReturnToParty
// [0x010201C2] 
// Parameters infos:
// struct FUniqueNetId            RequestingPlayerId             ( CPF_Parm )

void APlayerController::ClientReturnToParty ( struct FUniqueNetId RequestingPlayerId )
{
	static UFunction* pFnClientReturnToParty = NULL;

	if ( ! pFnClientReturnToParty )
		pFnClientReturnToParty = (UFunction*) UObject::GObjObjects()->Data[ 12833 ];

	APlayerController_execClientReturnToParty_Parms ClientReturnToParty_Parms;
	memcpy ( &ClientReturnToParty_Parms.RequestingPlayerId, &RequestingPlayerId, 0x48 );

	this->ProcessEvent ( pFnClientReturnToParty, &ClientReturnToParty_Parms, NULL );
};

// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinTravelToSessionComplete = NULL;

	if ( ! pFnOnJoinTravelToSessionComplete )
		pFnOnJoinTravelToSessionComplete = (UFunction*) UObject::GObjObjects()->Data[ 12829 ];

	APlayerController_execOnJoinTravelToSessionComplete_Parms OnJoinTravelToSessionComplete_Parms;
	memcpy ( &OnJoinTravelToSessionComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinTravelToSessionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinTravelToSessionComplete, &OnJoinTravelToSessionComplete_Parms, NULL );
};

// Function Engine.PlayerController.PreJoinUpdateGameSettings
// [0x00020100] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     GameSettings                   ( CPF_Parm )

void APlayerController::PreJoinUpdateGameSettings ( struct FName SessionName, class UOnlineGameSettings* GameSettings )
{
	static UFunction* pFnPreJoinUpdateGameSettings = NULL;

	if ( ! pFnPreJoinUpdateGameSettings )
		pFnPreJoinUpdateGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 12826 ];

	APlayerController_execPreJoinUpdateGameSettings_Parms PreJoinUpdateGameSettings_Parms;
	memcpy ( &PreJoinUpdateGameSettings_Parms.SessionName, &SessionName, 0x8 );
	PreJoinUpdateGameSettings_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnPreJoinUpdateGameSettings, &PreJoinUpdateGameSettings_Parms, NULL );
};

// Function Engine.PlayerController.ClientTravelToSession
// [0x018201C2] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void APlayerController::ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnClientTravelToSession = NULL;

	if ( ! pFnClientTravelToSession )
		pFnClientTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 12817 ];

	APlayerController_execClientTravelToSession_Parms ClientTravelToSession_Parms;
	memcpy ( &ClientTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	ClientTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &ClientTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnClientTravelToSession, &ClientTravelToSession_Parms, NULL );
};

// Function Engine.PlayerController.PathClear
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PathClear ( )
{
	static UFunction* pFnPathClear = NULL;

	if ( ! pFnPathClear )
		pFnPathClear = (UFunction*) UObject::GObjObjects()->Data[ 12816 ];

	APlayerController_execPathClear_Parms PathClear_Parms;

	this->ProcessEvent ( pFnPathClear, &PathClear_Parms, NULL );
};

// Function Engine.PlayerController.PathChild
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathChild ( int Cnt )
{
	static UFunction* pFnPathChild = NULL;

	if ( ! pFnPathChild )
		pFnPathChild = (UFunction*) UObject::GObjObjects()->Data[ 12814 ];

	APlayerController_execPathChild_Parms PathChild_Parms;
	PathChild_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathChild, &PathChild_Parms, NULL );
};

// Function Engine.PlayerController.PathStep
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// int                            Cnt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::PathStep ( int Cnt )
{
	static UFunction* pFnPathStep = NULL;

	if ( ! pFnPathStep )
		pFnPathStep = (UFunction*) UObject::GObjObjects()->Data[ 12812 ];

	APlayerController_execPathStep_Parms PathStep_Parms;
	PathStep_Parms.Cnt = Cnt;

	this->ProcessEvent ( pFnPathStep, &PathStep_Parms, NULL );
};

// Function Engine.PlayerController.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::eventSoakPause ( class APawn* P )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = (UFunction*) UObject::GObjObjects()->Data[ 12810 ];

	APlayerController_eventSoakPause_Parms SoakPause_Parms;
	SoakPause_Parms.P = P;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// [0x00020002] 
// Parameters infos:

void APlayerController::IncrementNumberOfMatchesPlayed ( )
{
	static UFunction* pFnIncrementNumberOfMatchesPlayed = NULL;

	if ( ! pFnIncrementNumberOfMatchesPlayed )
		pFnIncrementNumberOfMatchesPlayed = (UFunction*) UObject::GObjObjects()->Data[ 12806 ];

	APlayerController_execIncrementNumberOfMatchesPlayed_Parms IncrementNumberOfMatchesPlayed_Parms;

	this->ProcessEvent ( pFnIncrementNumberOfMatchesPlayed, &IncrementNumberOfMatchesPlayed_Parms, NULL );
};

// Function Engine.PlayerController.CanViewUserCreatedContent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanViewUserCreatedContent ( )
{
	static UFunction* pFnCanViewUserCreatedContent = NULL;

	if ( ! pFnCanViewUserCreatedContent )
		pFnCanViewUserCreatedContent = (UFunction*) UObject::GObjObjects()->Data[ 12800 ];

	APlayerController_execCanViewUserCreatedContent_Parms CanViewUserCreatedContent_Parms;

	this->ProcessEvent ( pFnCanViewUserCreatedContent, &CanViewUserCreatedContent_Parms, NULL );

	return CanViewUserCreatedContent_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientEndOnlineGame
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientEndOnlineGame ( )
{
	static UFunction* pFnClientEndOnlineGame = NULL;

	if ( ! pFnClientEndOnlineGame )
		pFnClientEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 12798 ];

	APlayerController_execClientEndOnlineGame_Parms ClientEndOnlineGame_Parms;

	this->ProcessEvent ( pFnClientEndOnlineGame, &ClientEndOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartOnlineGame
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStartOnlineGame ( )
{
	static UFunction* pFnClientStartOnlineGame = NULL;

	if ( ! pFnClientStartOnlineGame )
		pFnClientStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 12794 ];

	APlayerController_execClientStartOnlineGame_Parms ClientStartOnlineGame_Parms;

	this->ProcessEvent ( pFnClientStartOnlineGame, &ClientStartOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = (UFunction*) UObject::GObjObjects()->Data[ 12792 ];

	APlayerController_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterHostStatGuid
// [0x010201C2] 
// Parameters infos:
// struct FString                 StatGuid                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientRegisterHostStatGuid ( struct FString StatGuid )
{
	static UFunction* pFnClientRegisterHostStatGuid = NULL;

	if ( ! pFnClientRegisterHostStatGuid )
		pFnClientRegisterHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 12788 ];

	APlayerController_execClientRegisterHostStatGuid_Parms ClientRegisterHostStatGuid_Parms;
	memcpy ( &ClientRegisterHostStatGuid_Parms.StatGuid, &StatGuid, 0xC );

	this->ProcessEvent ( pFnClientRegisterHostStatGuid, &ClientRegisterHostStatGuid_Parms, NULL );
};

// Function Engine.PlayerController.RemoveAllDebugStrings
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void APlayerController::eventRemoveAllDebugStrings ( )
{
	static UFunction* pFnRemoveAllDebugStrings = NULL;

	if ( ! pFnRemoveAllDebugStrings )
		pFnRemoveAllDebugStrings = (UFunction*) UObject::GObjObjects()->Data[ 12787 ];

	APlayerController_eventRemoveAllDebugStrings_Parms RemoveAllDebugStrings_Parms;

	this->ProcessEvent ( pFnRemoveAllDebugStrings, &RemoveAllDebugStrings_Parms, NULL );
};

// Function Engine.PlayerController.RemoveDebugText
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AActor*                  SrcActor                       ( CPF_Parm )

void APlayerController::eventRemoveDebugText ( class AActor* SrcActor )
{
	static UFunction* pFnRemoveDebugText = NULL;

	if ( ! pFnRemoveDebugText )
		pFnRemoveDebugText = (UFunction*) UObject::GObjObjects()->Data[ 12784 ];

	APlayerController_eventRemoveDebugText_Parms RemoveDebugText_Parms;
	RemoveDebugText_Parms.SrcActor = SrcActor;

	this->ProcessEvent ( pFnRemoveDebugText, &RemoveDebugText_Parms, NULL );
};

// Function Engine.PlayerController.AddDebugText
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// struct FString                 DebugText                      ( CPF_Parm | CPF_NeedCtorLink )
// class AActor*                  SrcActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Offset                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 DesiredOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  TextColor                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipOverwriteCheck            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAbsoluteLocation              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bKeepAttachedToActor           ( CPF_OptionalParm | CPF_Parm )
// class UFont*                   InFont                         ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               InTextScale                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck, unsigned long bAbsoluteLocation, unsigned long bKeepAttachedToActor, class UFont* InFont, struct FVector2D InTextScale )
{
	static UFunction* pFnAddDebugText = NULL;

	if ( ! pFnAddDebugText )
		pFnAddDebugText = (UFunction*) UObject::GObjObjects()->Data[ 12771 ];

	APlayerController_eventAddDebugText_Parms AddDebugText_Parms;
	memcpy ( &AddDebugText_Parms.DebugText, &DebugText, 0xC );
	AddDebugText_Parms.SrcActor = SrcActor;
	AddDebugText_Parms.Duration = Duration;
	memcpy ( &AddDebugText_Parms.Offset, &Offset, 0xC );
	memcpy ( &AddDebugText_Parms.DesiredOffset, &DesiredOffset, 0xC );
	memcpy ( &AddDebugText_Parms.TextColor, &TextColor, 0x4 );
	AddDebugText_Parms.bSkipOverwriteCheck = bSkipOverwriteCheck;
	AddDebugText_Parms.bAbsoluteLocation = bAbsoluteLocation;
	AddDebugText_Parms.bKeepAttachedToActor = bKeepAttachedToActor;
	AddDebugText_Parms.InFont = InFont;
	memcpy ( &AddDebugText_Parms.InTextScale, &InTextScale, 0x8 );

	this->ProcessEvent ( pFnAddDebugText, &AddDebugText_Parms, NULL );
};

// Function Engine.PlayerController.DrawDebugTextList
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// float                          RenderDelta                    ( CPF_Parm )

void APlayerController::DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta )
{
	static UFunction* pFnDrawDebugTextList = NULL;

	if ( ! pFnDrawDebugTextList )
		pFnDrawDebugTextList = (UFunction*) UObject::GObjObjects()->Data[ 12744 ];

	APlayerController_execDrawDebugTextList_Parms DrawDebugTextList_Parms;
	DrawDebugTextList_Parms.Canvas = Canvas;
	DrawDebugTextList_Parms.RenderDelta = RenderDelta;

	this->ProcessEvent ( pFnDrawDebugTextList, &DrawDebugTextList_Parms, NULL );
};

// Function Engine.PlayerController.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void APlayerController::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 12742 ];

	APlayerController_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.PlayerController.ClientStartNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStartNetworkedVoice ( )
{
	static UFunction* pFnClientStartNetworkedVoice = NULL;

	if ( ! pFnClientStartNetworkedVoice )
		pFnClientStartNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 12740 ];

	APlayerController_execClientStartNetworkedVoice_Parms ClientStartNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStartNetworkedVoice, &ClientStartNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientStopNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientStopNetworkedVoice ( )
{
	static UFunction* pFnClientStopNetworkedVoice = NULL;

	if ( ! pFnClientStopNetworkedVoice )
		pFnClientStopNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 12738 ];

	APlayerController_execClientStopNetworkedVoice_Parms ClientStopNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStopNetworkedVoice, &ClientStopNetworkedVoice_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHostUniqueId
// [0x010201C0] 
// Parameters infos:
// struct FUniqueNetId            InHostId                       ( CPF_Parm )

void APlayerController::ClientSetHostUniqueId ( struct FUniqueNetId InHostId )
{
	static UFunction* pFnClientSetHostUniqueId = NULL;

	if ( ! pFnClientSetHostUniqueId )
		pFnClientSetHostUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 12736 ];

	APlayerController_execClientSetHostUniqueId_Parms ClientSetHostUniqueId_Parms;
	memcpy ( &ClientSetHostUniqueId_Parms.InHostId, &InHostId, 0x48 );

	this->ProcessEvent ( pFnClientSetHostUniqueId, &ClientSetHostUniqueId_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteLeaderboardStats
// [0x010241C0] 
// Parameters infos:
// class UClass*                  OnlineStatsWriteClass          ( CPF_Parm )
// unsigned long                  bIsIncomplete                  ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete )
{
	static UFunction* pFnClientWriteLeaderboardStats = NULL;

	if ( ! pFnClientWriteLeaderboardStats )
		pFnClientWriteLeaderboardStats = (UFunction*) UObject::GObjObjects()->Data[ 12733 ];

	APlayerController_execClientWriteLeaderboardStats_Parms ClientWriteLeaderboardStats_Parms;
	ClientWriteLeaderboardStats_Parms.OnlineStatsWriteClass = OnlineStatsWriteClass;
	ClientWriteLeaderboardStats_Parms.bIsIncomplete = bIsIncomplete;

	this->ProcessEvent ( pFnClientWriteLeaderboardStats, &ClientWriteLeaderboardStats_Parms, NULL );
};

// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// [0x018201C2] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )

void APlayerController::ClientWriteOnlinePlayerScores ( int LeaderboardId )
{
	static UFunction* pFnClientWriteOnlinePlayerScores = NULL;

	if ( ! pFnClientWriteOnlinePlayerScores )
		pFnClientWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 12718 ];

	APlayerController_execClientWriteOnlinePlayerScores_Parms ClientWriteOnlinePlayerScores_Parms;
	ClientWriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnClientWriteOnlinePlayerScores, &ClientWriteOnlinePlayerScores_Parms, NULL );
};

// Function Engine.PlayerController.ClientArbitratedMatchEnded
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientArbitratedMatchEnded ( )
{
	static UFunction* pFnClientArbitratedMatchEnded = NULL;

	if ( ! pFnClientArbitratedMatchEnded )
		pFnClientArbitratedMatchEnded = (UFunction*) UObject::GObjObjects()->Data[ 12717 ];

	APlayerController_execClientArbitratedMatchEnded_Parms ClientArbitratedMatchEnded_Parms;

	this->ProcessEvent ( pFnClientArbitratedMatchEnded, &ClientArbitratedMatchEnded_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyNotEnoughSpaceInInvite ( )
{
	static UFunction* pFnNotifyNotEnoughSpaceInInvite = NULL;

	if ( ! pFnNotifyNotEnoughSpaceInInvite )
		pFnNotifyNotEnoughSpaceInInvite = (UFunction*) UObject::GObjObjects()->Data[ 12716 ];

	APlayerController_execNotifyNotEnoughSpaceInInvite_Parms NotifyNotEnoughSpaceInInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotEnoughSpaceInInvite, &NotifyNotEnoughSpaceInInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyNotAllPlayersCanJoinInvite ( )
{
	static UFunction* pFnNotifyNotAllPlayersCanJoinInvite = NULL;

	if ( ! pFnNotifyNotAllPlayersCanJoinInvite )
		pFnNotifyNotAllPlayersCanJoinInvite = (UFunction*) UObject::GObjObjects()->Data[ 12715 ];

	APlayerController_execNotifyNotAllPlayersCanJoinInvite_Parms NotifyNotAllPlayersCanJoinInvite_Parms;

	this->ProcessEvent ( pFnNotifyNotAllPlayersCanJoinInvite, &NotifyNotAllPlayersCanJoinInvite_Parms, NULL );
};

// Function Engine.PlayerController.NotifyInviteFailed
// [0x00020002] 
// Parameters infos:

void APlayerController::NotifyInviteFailed ( )
{
	static UFunction* pFnNotifyInviteFailed = NULL;

	if ( ! pFnNotifyInviteFailed )
		pFnNotifyInviteFailed = (UFunction*) UObject::GObjObjects()->Data[ 12714 ];

	APlayerController_execNotifyInviteFailed_Parms NotifyInviteFailed_Parms;

	this->ProcessEvent ( pFnNotifyInviteFailed, &NotifyInviteFailed_Parms, NULL );
};

// Function Engine.PlayerController.OnInviteJoinComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnInviteJoinComplete = NULL;

	if ( ! pFnOnInviteJoinComplete )
		pFnOnInviteJoinComplete = (UFunction*) UObject::GObjObjects()->Data[ 12710 ];

	APlayerController_execOnInviteJoinComplete_Parms OnInviteJoinComplete_Parms;
	memcpy ( &OnInviteJoinComplete_Parms.SessionName, &SessionName, 0x8 );
	OnInviteJoinComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnInviteJoinComplete, &OnInviteJoinComplete_Parms, NULL );
};

// Function Engine.PlayerController.ModifyClientURL
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

struct FString APlayerController::ModifyClientURL ( struct FString URL )
{
	static UFunction* pFnModifyClientURL = NULL;

	if ( ! pFnModifyClientURL )
		pFnModifyClientURL = (UFunction*) UObject::GObjObjects()->Data[ 12707 ];

	APlayerController_execModifyClientURL_Parms ModifyClientURL_Parms;
	memcpy ( &ModifyClientURL_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnModifyClientURL, &ModifyClientURL_Parms, NULL );

	return ModifyClientURL_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnDestroyForInviteComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyForInviteComplete = NULL;

	if ( ! pFnOnDestroyForInviteComplete )
		pFnOnDestroyForInviteComplete = (UFunction*) UObject::GObjObjects()->Data[ 12704 ];

	APlayerController_execOnDestroyForInviteComplete_Parms OnDestroyForInviteComplete_Parms;
	memcpy ( &OnDestroyForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyForInviteComplete, &OnDestroyForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.OnEndForInviteComplete
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndForInviteComplete = NULL;

	if ( ! pFnOnEndForInviteComplete )
		pFnOnEndForInviteComplete = (UFunction*) UObject::GObjObjects()->Data[ 12699 ];

	APlayerController_execOnEndForInviteComplete_Parms OnEndForInviteComplete_Parms;
	memcpy ( &OnEndForInviteComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndForInviteComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndForInviteComplete, &OnEndForInviteComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClearInviteDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearInviteDelegates ( )
{
	static UFunction* pFnClearInviteDelegates = NULL;

	if ( ! pFnClearInviteDelegates )
		pFnClearInviteDelegates = (UFunction*) UObject::GObjObjects()->Data[ 12698 ];

	APlayerController_execClearInviteDelegates_Parms ClearInviteDelegates_Parms;

	this->ProcessEvent ( pFnClearInviteDelegates, &ClearInviteDelegates_Parms, NULL );
};

// Function Engine.PlayerController.CanAllPlayersPlayOnline
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanAllPlayersPlayOnline ( )
{
	static UFunction* pFnCanAllPlayersPlayOnline = NULL;

	if ( ! pFnCanAllPlayersPlayOnline )
		pFnCanAllPlayersPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 12691 ];

	APlayerController_execCanAllPlayersPlayOnline_Parms CanAllPlayersPlayOnline_Parms;

	this->ProcessEvent ( pFnCanAllPlayersPlayOnline, &CanAllPlayersPlayOnline_Parms, NULL );

	return CanAllPlayersPlayOnline_Parms.ReturnValue;
};

// Function Engine.PlayerController.InviteHasEnoughSpace
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSettings*     InviteSettings                 ( CPF_Parm )

bool APlayerController::InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings )
{
	static UFunction* pFnInviteHasEnoughSpace = NULL;

	if ( ! pFnInviteHasEnoughSpace )
		pFnInviteHasEnoughSpace = (UFunction*) UObject::GObjObjects()->Data[ 12686 ];

	APlayerController_execInviteHasEnoughSpace_Parms InviteHasEnoughSpace_Parms;
	InviteHasEnoughSpace_Parms.InviteSettings = InviteSettings;

	this->ProcessEvent ( pFnInviteHasEnoughSpace, &InviteHasEnoughSpace_Parms, NULL );

	return InviteHasEnoughSpace_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnGameInviteAccepted
// [0x00420002] 
// Parameters infos:
// struct FString                 ErrorString                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FOnlineGameSearchResult InviteResult                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void APlayerController::OnGameInviteAccepted ( struct FString ErrorString, struct FOnlineGameSearchResult* InviteResult )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = (UFunction*) UObject::GObjObjects()->Data[ 12676 ];

	APlayerController_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;
	memcpy ( &OnGameInviteAccepted_Parms.ErrorString, &ErrorString, 0xC );

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );

	if ( InviteResult )
		memcpy ( InviteResult, &OnGameInviteAccepted_Parms.InviteResult, 0x8 );
};

// Function Engine.PlayerController.OnArbitrationRegisterComplete
// [0x00020000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegisterComplete = NULL;

	if ( ! pFnOnArbitrationRegisterComplete )
		pFnOnArbitrationRegisterComplete = (UFunction*) UObject::GObjObjects()->Data[ 12673 ];

	APlayerController_execOnArbitrationRegisterComplete_Parms OnArbitrationRegisterComplete_Parms;
	memcpy ( &OnArbitrationRegisterComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegisterComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegisterComplete, &OnArbitrationRegisterComplete_Parms, NULL );
};

// Function Engine.PlayerController.ClientRegisterForArbitration
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientRegisterForArbitration ( )
{
	static UFunction* pFnClientRegisterForArbitration = NULL;

	if ( ! pFnClientRegisterForArbitration )
		pFnClientRegisterForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 12672 ];

	APlayerController_execClientRegisterForArbitration_Parms ClientRegisterForArbitration_Parms;

	this->ProcessEvent ( pFnClientRegisterForArbitration, &ClientRegisterForArbitration_Parms, NULL );
};

// Function Engine.PlayerController.ClientWasKicked
// [0x010209C0] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientWasKicked ( )
{
	static UFunction* pFnClientWasKicked = NULL;

	if ( ! pFnClientWasKicked )
		pFnClientWasKicked = (UFunction*) UObject::GObjObjects()->Data[ 12671 ];

	APlayerController_eventClientWasKicked_Parms ClientWasKicked_Parms;

	this->ProcessEvent ( pFnClientWasKicked, &ClientWasKicked_Parms, NULL );
};

// Function Engine.PlayerController.IsShowingSubtitles
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsShowingSubtitles ( )
{
	static UFunction* pFnIsShowingSubtitles = NULL;

	if ( ! pFnIsShowingSubtitles )
		pFnIsShowingSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 12669 ];

	APlayerController_execIsShowingSubtitles_Parms IsShowingSubtitles_Parms;

	pFnIsShowingSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingSubtitles, &IsShowingSubtitles_Parms, NULL );

	pFnIsShowingSubtitles->FunctionFlags |= 0x400;

	return IsShowingSubtitles_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetShowSubtitles
// [0x00020700] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void APlayerController::SetShowSubtitles ( unsigned long bValue )
{
	static UFunction* pFnSetShowSubtitles = NULL;

	if ( ! pFnSetShowSubtitles )
		pFnSetShowSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 12667 ];

	APlayerController_execSetShowSubtitles_Parms SetShowSubtitles_Parms;
	SetShowSubtitles_Parms.bValue = bValue;

	pFnSetShowSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetShowSubtitles, &SetShowSubtitles_Parms, NULL );

	pFnSetShowSubtitles->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.NotifyDirectorControl
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNowControlling                ( CPF_Parm )
// class USeqAct_Interp*          CurrentMatinee                 ( CPF_Parm )

void APlayerController::eventNotifyDirectorControl ( unsigned long bNowControlling, class USeqAct_Interp* CurrentMatinee )
{
	static UFunction* pFnNotifyDirectorControl = NULL;

	if ( ! pFnNotifyDirectorControl )
		pFnNotifyDirectorControl = (UFunction*) UObject::GObjObjects()->Data[ 12664 ];

	APlayerController_eventNotifyDirectorControl_Parms NotifyDirectorControl_Parms;
	NotifyDirectorControl_Parms.bNowControlling = bNowControlling;
	NotifyDirectorControl_Parms.CurrentMatinee = CurrentMatinee;

	this->ProcessEvent ( pFnNotifyDirectorControl, &NotifyDirectorControl_Parms, NULL );
};

// Function Engine.PlayerController.ServerUnmutePlayer
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnServerUnmutePlayer = NULL;

	if ( ! pFnServerUnmutePlayer )
		pFnServerUnmutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12660 ];

	APlayerController_eventServerUnmutePlayer_Parms ServerUnmutePlayer_Parms;
	memcpy ( &ServerUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	this->ProcessEvent ( pFnServerUnmutePlayer, &ServerUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ServerMutePlayer
// [0x002208C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventServerMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnServerMutePlayer = NULL;

	if ( ! pFnServerMutePlayer )
		pFnServerMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12657 ];

	APlayerController_eventServerMutePlayer_Parms ServerMutePlayer_Parms;
	memcpy ( &ServerMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	this->ProcessEvent ( pFnServerMutePlayer, &ServerMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GameplayUnmutePlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGameplayUnmutePlayer = NULL;

	if ( ! pFnGameplayUnmutePlayer )
		pFnGameplayUnmutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12652 ];

	APlayerController_execGameplayUnmutePlayer_Parms GameplayUnmutePlayer_Parms;
	memcpy ( &GameplayUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	this->ProcessEvent ( pFnGameplayUnmutePlayer, &GameplayUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.GameplayMutePlayer
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::GameplayMutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGameplayMutePlayer = NULL;

	if ( ! pFnGameplayMutePlayer )
		pFnGameplayMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12649 ];

	APlayerController_execGameplayMutePlayer_Parms GameplayMutePlayer_Parms;
	memcpy ( &GameplayMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	this->ProcessEvent ( pFnGameplayMutePlayer, &GameplayMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientUnmutePlayer
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

void APlayerController::eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnClientUnmutePlayer = NULL;

	if ( ! pFnClientUnmutePlayer )
		pFnClientUnmutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12643 ];

	APlayerController_eventClientUnmutePlayer_Parms ClientUnmutePlayer_Parms;
	memcpy ( &ClientUnmutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	this->ProcessEvent ( pFnClientUnmutePlayer, &ClientUnmutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientMutePlayer
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )
// unsigned long                  bAddToMuteList                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientMutePlayer ( struct FUniqueNetId PlayerNetId, unsigned long bAddToMuteList )
{
	static UFunction* pFnClientMutePlayer = NULL;

	if ( ! pFnClientMutePlayer )
		pFnClientMutePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12636 ];

	APlayerController_eventClientMutePlayer_Parms ClientMutePlayer_Parms;
	memcpy ( &ClientMutePlayer_Parms.PlayerNetId, &PlayerNetId, 0x48 );
	ClientMutePlayer_Parms.bAddToMuteList = bAddToMuteList;

	this->ProcessEvent ( pFnClientMutePlayer, &ClientMutePlayer_Parms, NULL );
};

// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientVoiceHandshakeComplete ( )
{
	static UFunction* pFnClientVoiceHandshakeComplete = NULL;

	if ( ! pFnClientVoiceHandshakeComplete )
		pFnClientVoiceHandshakeComplete = (UFunction*) UObject::GObjObjects()->Data[ 12634 ];

	APlayerController_execClientVoiceHandshakeComplete_Parms ClientVoiceHandshakeComplete_Parms;

	this->ProcessEvent ( pFnClientVoiceHandshakeComplete, &ClientVoiceHandshakeComplete_Parms, NULL );
};

// Function Engine.PlayerController.GetPlayerControllerFromNetId
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerNetId                    ( CPF_Parm )

class APlayerController* APlayerController::GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnGetPlayerControllerFromNetId = NULL;

	if ( ! pFnGetPlayerControllerFromNetId )
		pFnGetPlayerControllerFromNetId = (UFunction*) UObject::GObjObjects()->Data[ 12631 ];

	APlayerController_execGetPlayerControllerFromNetId_Parms GetPlayerControllerFromNetId_Parms;
	memcpy ( &GetPlayerControllerFromNetId_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerFromNetId, &GetPlayerControllerFromNetId_Parms, NULL );

	pFnGetPlayerControllerFromNetId->FunctionFlags |= 0x400;

	return GetPlayerControllerFromNetId_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetOnlineStatus
// [0x010201C0] 
// Parameters infos:

void APlayerController::ClientSetOnlineStatus ( )
{
	static UFunction* pFnClientSetOnlineStatus = NULL;

	if ( ! pFnClientSetOnlineStatus )
		pFnClientSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 12630 ];

	APlayerController_execClientSetOnlineStatus_Parms ClientSetOnlineStatus_Parms;

	this->ProcessEvent ( pFnClientSetOnlineStatus, &ClientSetOnlineStatus_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelFrom
// [0x00020002] 
// Parameters infos:
// class APlayerController*       OldPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelFrom ( class APlayerController* OldPC )
{
	static UFunction* pFnSeamlessTravelFrom = NULL;

	if ( ! pFnSeamlessTravelFrom )
		pFnSeamlessTravelFrom = (UFunction*) UObject::GObjObjects()->Data[ 12628 ];

	APlayerController_execSeamlessTravelFrom_Parms SeamlessTravelFrom_Parms;
	SeamlessTravelFrom_Parms.OldPC = OldPC;

	this->ProcessEvent ( pFnSeamlessTravelFrom, &SeamlessTravelFrom_Parms, NULL );
};

// Function Engine.PlayerController.SeamlessTravelTo
// [0x00020000] 
// Parameters infos:
// class APlayerController*       NewPC                          ( CPF_Parm )

void APlayerController::SeamlessTravelTo ( class APlayerController* NewPC )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 12626 ];

	APlayerController_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPC = NewPC;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerController.GetSeamlessTravelActorList
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bToEntry                       ( CPF_Parm )
// TArray< class AActor* >        ActorList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList )
{
	static UFunction* pFnGetSeamlessTravelActorList = NULL;

	if ( ! pFnGetSeamlessTravelActorList )
		pFnGetSeamlessTravelActorList = (UFunction*) UObject::GObjObjects()->Data[ 12622 ];

	APlayerController_eventGetSeamlessTravelActorList_Parms GetSeamlessTravelActorList_Parms;
	GetSeamlessTravelActorList_Parms.bToEntry = bToEntry;

	this->ProcessEvent ( pFnGetSeamlessTravelActorList, &GetSeamlessTravelActorList_Parms, NULL );

	if ( ActorList )
		memcpy ( ActorList, &GetSeamlessTravelActorList_Parms.ActorList, 0xC );
};

// Function Engine.PlayerController.IsPlayerMuted
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Sender                         ( CPF_Const | CPF_Parm | CPF_OutParm )

bool APlayerController::IsPlayerMuted ( struct FUniqueNetId* Sender )
{
	static UFunction* pFnIsPlayerMuted = NULL;

	if ( ! pFnIsPlayerMuted )
		pFnIsPlayerMuted = (UFunction*) UObject::GObjObjects()->Data[ 12619 ];

	APlayerController_execIsPlayerMuted_Parms IsPlayerMuted_Parms;

	pFnIsPlayerMuted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerMuted, &IsPlayerMuted_Parms, NULL );

	pFnIsPlayerMuted->FunctionFlags |= 0x400;

	if ( Sender )
		memcpy ( Sender, &IsPlayerMuted_Parms.Sender, 0x48 );

	return IsPlayerMuted_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetUIController
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* APlayerController::GetUIController ( )
{
	static UFunction* pFnGetUIController = NULL;

	if ( ! pFnGetUIController )
		pFnGetUIController = (UFunction*) UObject::GObjObjects()->Data[ 11549 ];

	APlayerController_execGetUIController_Parms GetUIController_Parms;

	this->ProcessEvent ( pFnGetUIController, &GetUIController_Parms, NULL );

	return GetUIController_Parms.ReturnValue;
};

// Function Engine.PlayerController.SaveActorConfig
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   actorName                      ( CPF_Parm | CPF_CoerceParm )

void APlayerController::SaveActorConfig ( struct FName actorName )
{
	static UFunction* pFnSaveActorConfig = NULL;

	if ( ! pFnSaveActorConfig )
		pFnSaveActorConfig = (UFunction*) UObject::GObjObjects()->Data[ 12612 ];

	APlayerController_execSaveActorConfig_Parms SaveActorConfig_Parms;
	memcpy ( &SaveActorConfig_Parms.actorName, &actorName, 0x8 );

	this->ProcessEvent ( pFnSaveActorConfig, &SaveActorConfig_Parms, NULL );
};

// Function Engine.PlayerController.SaveClassConfig
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::SaveClassConfig ( struct FString ClassName )
{
	static UFunction* pFnSaveClassConfig = NULL;

	if ( ! pFnSaveClassConfig )
		pFnSaveClassConfig = (UFunction*) UObject::GObjObjects()->Data[ 12609 ];

	APlayerController_execSaveClassConfig_Parms SaveClassConfig_Parms;
	memcpy ( &SaveClassConfig_Parms.ClassName, &ClassName, 0xC );

	this->ProcessEvent ( pFnSaveClassConfig, &SaveClassConfig_Parms, NULL );
};

// Function Engine.PlayerController.ClientWaitForLevelsVisible
// [0x010201C2] 
// Parameters infos:
// class USeqAct_WaitForLevelsVisible* inAction                       ( CPF_Parm )

void APlayerController::ClientWaitForLevelsVisible ( class USeqAct_WaitForLevelsVisible* inAction )
{
	static UFunction* pFnClientWaitForLevelsVisible = NULL;

	if ( ! pFnClientWaitForLevelsVisible )
		pFnClientWaitForLevelsVisible = (UFunction*) UObject::GObjObjects()->Data[ 12605 ];

	APlayerController_execClientWaitForLevelsVisible_Parms ClientWaitForLevelsVisible_Parms;
	ClientWaitForLevelsVisible_Parms.inAction = inAction;

	this->ProcessEvent ( pFnClientWaitForLevelsVisible, &ClientWaitForLevelsVisible_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientSetBlockOnAsyncLoading ( )
{
	static UFunction* pFnClientSetBlockOnAsyncLoading = NULL;

	if ( ! pFnClientSetBlockOnAsyncLoading )
		pFnClientSetBlockOnAsyncLoading = (UFunction*) UObject::GObjObjects()->Data[ 12603 ];

	APlayerController_eventClientSetBlockOnAsyncLoading_Parms ClientSetBlockOnAsyncLoading_Parms;

	this->ProcessEvent ( pFnClientSetBlockOnAsyncLoading, &ClientSetBlockOnAsyncLoading_Parms, NULL );
};

// Function Engine.PlayerController.ClientFlushLevelStreaming
// [0x01020DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void APlayerController::eventClientFlushLevelStreaming ( )
{
	static UFunction* pFnClientFlushLevelStreaming = NULL;

	if ( ! pFnClientFlushLevelStreaming )
		pFnClientFlushLevelStreaming = (UFunction*) UObject::GObjObjects()->Data[ 12602 ];

	APlayerController_eventClientFlushLevelStreaming_Parms ClientFlushLevelStreaming_Parms;

	pFnClientFlushLevelStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientFlushLevelStreaming, &ClientFlushLevelStreaming_Parms, NULL );

	pFnClientFlushLevelStreaming->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientCancelPendingMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientCancelPendingMapChange ( )
{
	static UFunction* pFnClientCancelPendingMapChange = NULL;

	if ( ! pFnClientCancelPendingMapChange )
		pFnClientCancelPendingMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12600 ];

	APlayerController_eventClientCancelPendingMapChange_Parms ClientCancelPendingMapChange_Parms;

	this->ProcessEvent ( pFnClientCancelPendingMapChange, &ClientCancelPendingMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ClientCommitMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientCommitMapChange ( )
{
	static UFunction* pFnClientCommitMapChange = NULL;

	if ( ! pFnClientCommitMapChange )
		pFnClientCommitMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12598 ];

	APlayerController_eventClientCommitMapChange_Parms ClientCommitMapChange_Parms;

	this->ProcessEvent ( pFnClientCommitMapChange, &ClientCommitMapChange_Parms, NULL );
};

// Function Engine.PlayerController.DelayedPrepareMapChange
// [0x00020002] 
// Parameters infos:

void APlayerController::DelayedPrepareMapChange ( )
{
	static UFunction* pFnDelayedPrepareMapChange = NULL;

	if ( ! pFnDelayedPrepareMapChange )
		pFnDelayedPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12594 ];

	APlayerController_execDelayedPrepareMapChange_Parms DelayedPrepareMapChange_Parms;

	this->ProcessEvent ( pFnDelayedPrepareMapChange, &DelayedPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ClientPrepareMapChange
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// struct FName                   LevelName                      ( CPF_Parm )
// unsigned long                  bFirst                         ( CPF_Parm )
// unsigned long                  bLast                          ( CPF_Parm )

void APlayerController::eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast )
{
	static UFunction* pFnClientPrepareMapChange = NULL;

	if ( ! pFnClientPrepareMapChange )
		pFnClientPrepareMapChange = (UFunction*) UObject::GObjObjects()->Data[ 12588 ];

	APlayerController_eventClientPrepareMapChange_Parms ClientPrepareMapChange_Parms;
	memcpy ( &ClientPrepareMapChange_Parms.LevelName, &LevelName, 0x8 );
	ClientPrepareMapChange_Parms.bFirst = bFirst;
	ClientPrepareMapChange_Parms.bLast = bLast;

	this->ProcessEvent ( pFnClientPrepareMapChange, &ClientPrepareMapChange_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdateLevelVisibility
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bIsVisible                     ( CPF_Parm )

void APlayerController::eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible )
{
	static UFunction* pFnServerUpdateLevelVisibility = NULL;

	if ( ! pFnServerUpdateLevelVisibility )
		pFnServerUpdateLevelVisibility = (UFunction*) UObject::GObjObjects()->Data[ 12585 ];

	APlayerController_eventServerUpdateLevelVisibility_Parms ServerUpdateLevelVisibility_Parms;
	memcpy ( &ServerUpdateLevelVisibility_Parms.PackageName, &PackageName, 0x8 );
	ServerUpdateLevelVisibility_Parms.bIsVisible = bIsVisible;

	pFnServerUpdateLevelVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerUpdateLevelVisibility, &ServerUpdateLevelVisibility_Parms, NULL );

	pFnServerUpdateLevelVisibility->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// [0x010205C0] ( FUNC_Native )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnClientUpdateLevelStreamingStatus = NULL;

	if ( ! pFnClientUpdateLevelStreamingStatus )
		pFnClientUpdateLevelStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 12580 ];

	APlayerController_execClientUpdateLevelStreamingStatus_Parms ClientUpdateLevelStreamingStatus_Parms;
	memcpy ( &ClientUpdateLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	ClientUpdateLevelStreamingStatus_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientUpdateLevelStreamingStatus, &ClientUpdateLevelStreamingStatus_Parms, NULL );

	pFnClientUpdateLevelStreamingStatus->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.LevelStreamingStatusChanged
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ULevelStreaming*         LevelObject                    ( CPF_Parm )
// unsigned long                  bNewShouldBeLoaded             ( CPF_Parm )
// unsigned long                  bNewShouldBeVisible            ( CPF_Parm )
// unsigned long                  bNewShouldBlockOnLoad          ( CPF_Parm )

void APlayerController::eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad )
{
	static UFunction* pFnLevelStreamingStatusChanged = NULL;

	if ( ! pFnLevelStreamingStatusChanged )
		pFnLevelStreamingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 12574 ];

	APlayerController_eventLevelStreamingStatusChanged_Parms LevelStreamingStatusChanged_Parms;
	LevelStreamingStatusChanged_Parms.LevelObject = LevelObject;
	LevelStreamingStatusChanged_Parms.bNewShouldBeLoaded = bNewShouldBeLoaded;
	LevelStreamingStatusChanged_Parms.bNewShouldBeVisible = bNewShouldBeVisible;
	LevelStreamingStatusChanged_Parms.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	this->ProcessEvent ( pFnLevelStreamingStatusChanged, &LevelStreamingStatusChanged_Parms, NULL );
};

// Function Engine.PlayerController.ClientForceGarbageCollection
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClientForceGarbageCollection ( )
{
	static UFunction* pFnClientForceGarbageCollection = NULL;

	if ( ! pFnClientForceGarbageCollection )
		pFnClientForceGarbageCollection = (UFunction*) UObject::GObjObjects()->Data[ 12572 ];

	APlayerController_eventClientForceGarbageCollection_Parms ClientForceGarbageCollection_Parms;

	this->ProcessEvent ( pFnClientForceGarbageCollection, &ClientForceGarbageCollection_Parms, NULL );
};

// Function Engine.PlayerController.OnConsoleCommand
// [0x00020000] 
// Parameters infos:
// class USeqAct_ConsoleCommand*  inAction                       ( CPF_Parm )

void APlayerController::OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction )
{
	static UFunction* pFnOnConsoleCommand = NULL;

	if ( ! pFnOnConsoleCommand )
		pFnOnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 12569 ];

	APlayerController_execOnConsoleCommand_Parms OnConsoleCommand_Parms;
	OnConsoleCommand_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnConsoleCommand, &OnConsoleCommand_Parms, NULL );
};

// Function Engine.PlayerController.ResetPlayerMovementInput
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetPlayerMovementInput ( )
{
	static UFunction* pFnResetPlayerMovementInput = NULL;

	if ( ! pFnResetPlayerMovementInput )
		pFnResetPlayerMovementInput = (UFunction*) UObject::GObjObjects()->Data[ 12568 ];

	APlayerController_execResetPlayerMovementInput_Parms ResetPlayerMovementInput_Parms;

	this->ProcessEvent ( pFnResetPlayerMovementInput, &ResetPlayerMovementInput_Parms, NULL );
};

// Function Engine.PlayerController.IsLookInputIgnored
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsLookInputIgnored ( )
{
	static UFunction* pFnIsLookInputIgnored = NULL;

	if ( ! pFnIsLookInputIgnored )
		pFnIsLookInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 12566 ];

	APlayerController_eventIsLookInputIgnored_Parms IsLookInputIgnored_Parms;

	this->ProcessEvent ( pFnIsLookInputIgnored, &IsLookInputIgnored_Parms, NULL );

	return IsLookInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.IgnoreLookInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewLookInput                  ( CPF_Parm )

void APlayerController::IgnoreLookInput ( unsigned long bNewLookInput )
{
	static UFunction* pFnIgnoreLookInput = NULL;

	if ( ! pFnIgnoreLookInput )
		pFnIgnoreLookInput = (UFunction*) UObject::GObjObjects()->Data[ 12564 ];

	APlayerController_execIgnoreLookInput_Parms IgnoreLookInput_Parms;
	IgnoreLookInput_Parms.bNewLookInput = bNewLookInput;

	this->ProcessEvent ( pFnIgnoreLookInput, &IgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.IsMoveInputIgnored
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventIsMoveInputIgnored ( )
{
	static UFunction* pFnIsMoveInputIgnored = NULL;

	if ( ! pFnIsMoveInputIgnored )
		pFnIsMoveInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 12562 ];

	APlayerController_eventIsMoveInputIgnored_Parms IsMoveInputIgnored_Parms;

	this->ProcessEvent ( pFnIsMoveInputIgnored, &IsMoveInputIgnored_Parms, NULL );

	return IsMoveInputIgnored_Parms.ReturnValue;
};

// Function Engine.PlayerController.IgnoreMoveInput
// [0x00020002] 
// Parameters infos:
// unsigned long                  bNewMoveInput                  ( CPF_Parm )

void APlayerController::IgnoreMoveInput ( unsigned long bNewMoveInput )
{
	static UFunction* pFnIgnoreMoveInput = NULL;

	if ( ! pFnIgnoreMoveInput )
		pFnIgnoreMoveInput = (UFunction*) UObject::GObjObjects()->Data[ 12560 ];

	APlayerController_execIgnoreMoveInput_Parms IgnoreMoveInput_Parms;
	IgnoreMoveInput_Parms.bNewMoveInput = bNewMoveInput;

	this->ProcessEvent ( pFnIgnoreMoveInput, &IgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCinematicMode
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )

void APlayerController::ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD )
{
	static UFunction* pFnClientSetCinematicMode = NULL;

	if ( ! pFnClientSetCinematicMode )
		pFnClientSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 12555 ];

	APlayerController_execClientSetCinematicMode_Parms ClientSetCinematicMode_Parms;
	ClientSetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	ClientSetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	ClientSetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	ClientSetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;

	this->ProcessEvent ( pFnClientSetCinematicMode, &ClientSetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bHidePlayer                    ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsButtons                ( CPF_Parm )

void APlayerController::SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 12544 ];

	APlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Parms.bHidePlayer = bHidePlayer;
	SetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Parms.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleCinematicMode
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleCinematicMode* Action                         ( CPF_Parm )

void APlayerController::OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action )
{
	static UFunction* pFnOnToggleCinematicMode = NULL;

	if ( ! pFnOnToggleCinematicMode )
		pFnOnToggleCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 12535 ];

	APlayerController_execOnToggleCinematicMode_Parms OnToggleCinematicMode_Parms;
	OnToggleCinematicMode_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleCinematicMode, &OnToggleCinematicMode_Parms, NULL );
};

// Function Engine.PlayerController.IsForceFeedbackAllowed
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsForceFeedbackAllowed ( )
{
	static UFunction* pFnIsForceFeedbackAllowed = NULL;

	if ( ! pFnIsForceFeedbackAllowed )
		pFnIsForceFeedbackAllowed = (UFunction*) UObject::GObjObjects()->Data[ 12532 ];

	APlayerController_execIsForceFeedbackAllowed_Parms IsForceFeedbackAllowed_Parms;

	this->ProcessEvent ( pFnIsForceFeedbackAllowed, &IsForceFeedbackAllowed_Parms, NULL );

	return IsForceFeedbackAllowed_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// [0x010249C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform )
{
	static UFunction* pFnClientStopForceFeedbackWaveform = NULL;

	if ( ! pFnClientStopForceFeedbackWaveform )
		pFnClientStopForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 12521 ];

	APlayerController_eventClientStopForceFeedbackWaveform_Parms ClientStopForceFeedbackWaveform_Parms;
	ClientStopForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;

	this->ProcessEvent ( pFnClientStopForceFeedbackWaveform, &ClientStopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UForceFeedbackWaveform*  FFWaveform                     ( CPF_Parm )
// class AActor*                  FFWaveformInstigator           ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator )
{
	static UFunction* pFnClientPlayForceFeedbackWaveform = NULL;

	if ( ! pFnClientPlayForceFeedbackWaveform )
		pFnClientPlayForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 12527 ];

	APlayerController_eventClientPlayForceFeedbackWaveform_Parms ClientPlayForceFeedbackWaveform_Parms;
	ClientPlayForceFeedbackWaveform_Parms.FFWaveform = FFWaveform;
	ClientPlayForceFeedbackWaveform_Parms.FFWaveformInstigator = FFWaveformInstigator;

	this->ProcessEvent ( pFnClientPlayForceFeedbackWaveform, &ClientPlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.PlayerController.PlayRumble
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNotify_Rumble*      TheAnimNotify                  ( CPF_Const | CPF_Parm )

void APlayerController::eventPlayRumble ( class UAnimNotify_Rumble* TheAnimNotify )
{
	static UFunction* pFnPlayRumble = NULL;

	if ( ! pFnPlayRumble )
		pFnPlayRumble = (UFunction*) UObject::GObjObjects()->Data[ 12522 ];

	APlayerController_eventPlayRumble_Parms PlayRumble_Parms;
	PlayRumble_Parms.TheAnimNotify = TheAnimNotify;

	this->ProcessEvent ( pFnPlayRumble, &PlayRumble_Parms, NULL );
};

// Function Engine.PlayerController.OnForceFeedback
// [0x00020002] 
// Parameters infos:
// class USeqAct_ForceFeedback*   Action                         ( CPF_Parm )

void APlayerController::OnForceFeedback ( class USeqAct_ForceFeedback* Action )
{
	static UFunction* pFnOnForceFeedback = NULL;

	if ( ! pFnOnForceFeedback )
		pFnOnForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 12517 ];

	APlayerController_execOnForceFeedback_Parms OnForceFeedback_Parms;
	OnForceFeedback_Parms.Action = Action;

	this->ProcessEvent ( pFnOnForceFeedback, &OnForceFeedback_Parms, NULL );
};

// Function Engine.PlayerController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void APlayerController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 12510 ];

	APlayerController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.PlayerController.ShowGameState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowGameState ( )
{
	static UFunction* pFnShowGameState = NULL;

	if ( ! pFnShowGameState )
		pFnShowGameState = (UFunction*) UObject::GObjObjects()->Data[ 12509 ];

	APlayerController_execShowGameState_Parms ShowGameState_Parms;

	this->ProcessEvent ( pFnShowGameState, &ShowGameState_Parms, NULL );
};

// Function Engine.PlayerController.ShowPlayerState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ShowPlayerState ( )
{
	static UFunction* pFnShowPlayerState = NULL;

	if ( ! pFnShowPlayerState )
		pFnShowPlayerState = (UFunction*) UObject::GObjObjects()->Data[ 12508 ];

	APlayerController_execShowPlayerState_Parms ShowPlayerState_Parms;

	this->ProcessEvent ( pFnShowPlayerState, &ShowPlayerState_Parms, NULL );
};

// Function Engine.PlayerController.ServerRemoteEvent
// [0x00220040] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void APlayerController::ServerRemoteEvent ( struct FName EventName )
{
	static UFunction* pFnServerRemoteEvent = NULL;

	if ( ! pFnServerRemoteEvent )
		pFnServerRemoteEvent = (UFunction*) UObject::GObjObjects()->Data[ 12506 ];

	APlayerController_execServerRemoteEvent_Parms ServerRemoteEvent_Parms;
	memcpy ( &ServerRemoteEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnServerRemoteEvent, &ServerRemoteEvent_Parms, NULL );
};

// Function Engine.PlayerController.RE
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::RE ( struct FName EventName )
{
	static UFunction* pFnRE = NULL;

	if ( ! pFnRE )
		pFnRE = (UFunction*) UObject::GObjObjects()->Data[ 12504 ];

	APlayerController_execRE_Parms RE_Parms;
	memcpy ( &RE_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnRE, &RE_Parms, NULL );
};

// Function Engine.PlayerController.RemoteEvent
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::RemoteEvent ( struct FName EventName )
{
	static UFunction* pFnRemoteEvent = NULL;

	if ( ! pFnRemoteEvent )
		pFnRemoteEvent = (UFunction*) UObject::GObjObjects()->Data[ 12502 ];

	APlayerController_execRemoteEvent_Parms RemoteEvent_Parms;
	memcpy ( &RemoteEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnRemoteEvent, &RemoteEvent_Parms, NULL );
};

// Function Engine.PlayerController.ListCE
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListCE ( )
{
	static UFunction* pFnListCE = NULL;

	if ( ! pFnListCE )
		pFnListCE = (UFunction*) UObject::GObjObjects()->Data[ 12501 ];

	APlayerController_execListCE_Parms ListCE_Parms;

	this->ProcessEvent ( pFnListCE, &ListCE_Parms, NULL );
};

// Function Engine.PlayerController.ListConsoleEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ListConsoleEvents ( )
{
	static UFunction* pFnListConsoleEvents = NULL;

	if ( ! pFnListConsoleEvents )
		pFnListConsoleEvents = (UFunction*) UObject::GObjObjects()->Data[ 12493 ];

	APlayerController_execListConsoleEvents_Parms ListConsoleEvents_Parms;

	this->ProcessEvent ( pFnListConsoleEvents, &ListConsoleEvents_Parms, NULL );
};

// Function Engine.PlayerController.CE
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CE ( struct FName EventName )
{
	static UFunction* pFnCE = NULL;

	if ( ! pFnCE )
		pFnCE = (UFunction*) UObject::GObjObjects()->Data[ 12491 ];

	APlayerController_execCE_Parms CE_Parms;
	memcpy ( &CE_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCE, &CE_Parms, NULL );
};

// Function Engine.PlayerController.CauseEvent
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::CauseEvent ( struct FName EventName )
{
	static UFunction* pFnCauseEvent = NULL;

	if ( ! pFnCauseEvent )
		pFnCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 12489 ];

	APlayerController_execCauseEvent_Parms CauseEvent_Parms;
	memcpy ( &CauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseEvent, &CauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.ServerCauseEvent
// [0x00220040] 
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void APlayerController::ServerCauseEvent ( struct FName EventName )
{
	static UFunction* pFnServerCauseEvent = NULL;

	if ( ! pFnServerCauseEvent )
		pFnServerCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 12487 ];

	APlayerController_execServerCauseEvent_Parms ServerCauseEvent_Parms;
	memcpy ( &ServerCauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnServerCauseEvent, &ServerCauseEvent_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleHUD
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHUD*       inAction                       ( CPF_Parm )

void APlayerController::OnToggleHUD ( class USeqAct_ToggleHUD* inAction )
{
	static UFunction* pFnOnToggleHUD = NULL;

	if ( ! pFnOnToggleHUD )
		pFnOnToggleHUD = (UFunction*) UObject::GObjObjects()->Data[ 12484 ];

	APlayerController_execOnToggleHUD_Parms OnToggleHUD_Parms;
	OnToggleHUD_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleHUD, &OnToggleHUD_Parms, NULL );
};

// Function Engine.PlayerController.OnSetCameraTarget
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetCameraTarget* inAction                       ( CPF_Parm )

void APlayerController::OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction )
{
	static UFunction* pFnOnSetCameraTarget = NULL;

	if ( ! pFnOnSetCameraTarget )
		pFnOnSetCameraTarget = (UFunction*) UObject::GObjObjects()->Data[ 12479 ];

	APlayerController_execOnSetCameraTarget_Parms OnSetCameraTarget_Parms;
	OnSetCameraTarget_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnSetCameraTarget, &OnSetCameraTarget_Parms, NULL );
};

// Function Engine.PlayerController.ClientClearKismetText
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// struct FVector2D               MessageOffset                  ( CPF_Parm )

void APlayerController::ClientClearKismetText ( struct FVector2D MessageOffset )
{
	static UFunction* pFnClientClearKismetText = NULL;

	if ( ! pFnClientClearKismetText )
		pFnClientClearKismetText = (UFunction*) UObject::GObjObjects()->Data[ 12407 ];

	APlayerController_execClientClearKismetText_Parms ClientClearKismetText_Parms;
	memcpy ( &ClientClearKismetText_Parms.MessageOffset, &MessageOffset, 0x8 );

	this->ProcessEvent ( pFnClientClearKismetText, &ClientClearKismetText_Parms, NULL );
};

// Function Engine.PlayerController.ClientDrawKismetText
// [0x010201C3] ( FUNC_Final )
// Parameters infos:
// struct FKismetDrawTextInfo     DrawTextInfo                   ( CPF_Parm | CPF_NeedCtorLink )
// float                          DisplayTime                    ( CPF_Parm )

void APlayerController::ClientDrawKismetText ( struct FKismetDrawTextInfo DrawTextInfo, float DisplayTime )
{
	static UFunction* pFnClientDrawKismetText = NULL;

	if ( ! pFnClientDrawKismetText )
		pFnClientDrawKismetText = (UFunction*) UObject::GObjObjects()->Data[ 12404 ];

	APlayerController_execClientDrawKismetText_Parms ClientDrawKismetText_Parms;
	memcpy ( &ClientDrawKismetText_Parms.DrawTextInfo, &DrawTextInfo, 0x34 );
	ClientDrawKismetText_Parms.DisplayTime = DisplayTime;

	this->ProcessEvent ( pFnClientDrawKismetText, &ClientDrawKismetText_Parms, NULL );
};

// Function Engine.PlayerController.OnDrawText
// [0x00020002] 
// Parameters infos:
// class USeqAct_DrawText*        inAction                       ( CPF_Parm )

void APlayerController::OnDrawText ( class USeqAct_DrawText* inAction )
{
	static UFunction* pFnOnDrawText = NULL;

	if ( ! pFnOnDrawText )
		pFnOnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 12402 ];

	APlayerController_execOnDrawText_Parms OnDrawText_Parms;
	OnDrawText_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnDrawText, &OnDrawText_Parms, NULL );
};

// Function Engine.PlayerController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APlayerController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 12396 ];

	APlayerController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.PlayerController.ClientIgnoreLookInput
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void APlayerController::ClientIgnoreLookInput ( unsigned long bIgnore )
{
	static UFunction* pFnClientIgnoreLookInput = NULL;

	if ( ! pFnClientIgnoreLookInput )
		pFnClientIgnoreLookInput = (UFunction*) UObject::GObjObjects()->Data[ 12394 ];

	APlayerController_execClientIgnoreLookInput_Parms ClientIgnoreLookInput_Parms;
	ClientIgnoreLookInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnClientIgnoreLookInput, &ClientIgnoreLookInput_Parms, NULL );
};

// Function Engine.PlayerController.ClientIgnoreMoveInput
// [0x010201C2] 
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void APlayerController::ClientIgnoreMoveInput ( unsigned long bIgnore )
{
	static UFunction* pFnClientIgnoreMoveInput = NULL;

	if ( ! pFnClientIgnoreMoveInput )
		pFnClientIgnoreMoveInput = (UFunction*) UObject::GObjObjects()->Data[ 12392 ];

	APlayerController_execClientIgnoreMoveInput_Parms ClientIgnoreMoveInput_Parms;
	ClientIgnoreMoveInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnClientIgnoreMoveInput, &ClientIgnoreMoveInput_Parms, NULL );
};

// Function Engine.PlayerController.OnToggleInput
// [0x00020002] 
// Parameters infos:
// class USeqAct_ToggleInput*     inAction                       ( CPF_Parm )

void APlayerController::OnToggleInput ( class USeqAct_ToggleInput* inAction )
{
	static UFunction* pFnOnToggleInput = NULL;

	if ( ! pFnOnToggleInput )
		pFnOnToggleInput = (UFunction*) UObject::GObjObjects()->Data[ 12386 ];

	APlayerController_execOnToggleInput_Parms OnToggleInput_Parms;
	OnToggleInput_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggleInput, &OnToggleInput_Parms, NULL );
};

// Function Engine.PlayerController.AdjustHUDRenderSize
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// int                            FullScreenSizeX                ( CPF_Const | CPF_Parm )
// int                            FullScreenSizeY                ( CPF_Const | CPF_Parm )
// int                            X                              ( CPF_Parm | CPF_OutParm )
// int                            Y                              ( CPF_Parm | CPF_OutParm )
// int                            SizeX                          ( CPF_Parm | CPF_OutParm )
// int                            SizeY                          ( CPF_Parm | CPF_OutParm )

void APlayerController::eventAdjustHUDRenderSize ( int FullScreenSizeX, int FullScreenSizeY, int* X, int* Y, int* SizeX, int* SizeY )
{
	static UFunction* pFnAdjustHUDRenderSize = NULL;

	if ( ! pFnAdjustHUDRenderSize )
		pFnAdjustHUDRenderSize = (UFunction*) UObject::GObjObjects()->Data[ 12374 ];

	APlayerController_eventAdjustHUDRenderSize_Parms AdjustHUDRenderSize_Parms;
	AdjustHUDRenderSize_Parms.FullScreenSizeX = FullScreenSizeX;
	AdjustHUDRenderSize_Parms.FullScreenSizeY = FullScreenSizeY;

	this->ProcessEvent ( pFnAdjustHUDRenderSize, &AdjustHUDRenderSize_Parms, NULL );

	if ( X )
		*X = AdjustHUDRenderSize_Parms.X;

	if ( Y )
		*Y = AdjustHUDRenderSize_Parms.Y;

	if ( SizeX )
		*SizeX = AdjustHUDRenderSize_Parms.SizeX;

	if ( SizeY )
		*SizeY = AdjustHUDRenderSize_Parms.SizeY;
};

// Function Engine.PlayerController.DrawHUD
// [0x00020002] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APlayerController::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 12372 ];

	APlayerController_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 12369 ];

	APlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );

	return CanRestartPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.ViewAPlayer
// [0x00020002] 
// Parameters infos:
// int                            Dir                            ( CPF_Parm )

void APlayerController::ViewAPlayer ( int Dir )
{
	static UFunction* pFnViewAPlayer = NULL;

	if ( ! pFnViewAPlayer )
		pFnViewAPlayer = (UFunction*) UObject::GObjObjects()->Data[ 12160 ];

	APlayerController_execViewAPlayer_Parms ViewAPlayer_Parms;
	ViewAPlayer_Parms.Dir = Dir;

	this->ProcessEvent ( pFnViewAPlayer, &ViewAPlayer_Parms, NULL );
};

// Function Engine.PlayerController.GetNextViewablePlayer
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Dir                            ( CPF_Parm )

class APlayerReplicationInfo* APlayerController::GetNextViewablePlayer ( int Dir )
{
	static UFunction* pFnGetNextViewablePlayer = NULL;

	if ( ! pFnGetNextViewablePlayer )
		pFnGetNextViewablePlayer = (UFunction*) UObject::GObjObjects()->Data[ 12150 ];

	APlayerController_execGetNextViewablePlayer_Parms GetNextViewablePlayer_Parms;
	GetNextViewablePlayer_Parms.Dir = Dir;

	this->ProcessEvent ( pFnGetNextViewablePlayer, &GetNextViewablePlayer_Parms, NULL );

	return GetNextViewablePlayer_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsSpectating
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsSpectating ( )
{
	static UFunction* pFnIsSpectating = NULL;

	if ( ! pFnIsSpectating )
		pFnIsSpectating = (UFunction*) UObject::GObjObjects()->Data[ 12125 ];

	APlayerController_execIsSpectating_Parms IsSpectating_Parms;

	this->ProcessEvent ( pFnIsSpectating, &IsSpectating_Parms, NULL );

	return IsSpectating_Parms.ReturnValue;
};

// Function Engine.PlayerController.AdjustPlayerWalkingMoveAccel
// [0x00420000] 
// Parameters infos:
// struct FVector                 newAccel                       ( CPF_Parm | CPF_OutParm )

void APlayerController::AdjustPlayerWalkingMoveAccel ( struct FVector* newAccel )
{
	static UFunction* pFnAdjustPlayerWalkingMoveAccel = NULL;

	if ( ! pFnAdjustPlayerWalkingMoveAccel )
		pFnAdjustPlayerWalkingMoveAccel = (UFunction*) UObject::GObjObjects()->Data[ 11957 ];

	APlayerController_execAdjustPlayerWalkingMoveAccel_Parms AdjustPlayerWalkingMoveAccel_Parms;

	this->ProcessEvent ( pFnAdjustPlayerWalkingMoveAccel, &AdjustPlayerWalkingMoveAccel_Parms, NULL );

	if ( newAccel )
		memcpy ( newAccel, &AdjustPlayerWalkingMoveAccel_Parms.newAccel, 0xC );
};

// Function Engine.PlayerController.CheckJumpOrDuck
// [0x00020002] 
// Parameters infos:

void APlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = (UFunction*) UObject::GObjObjects()->Data[ 11954 ];

	APlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function Engine.PlayerController.LimitViewRotation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                ViewRotation                   ( CPF_Parm )
// float                          ViewPitchMin                   ( CPF_Parm )
// float                          ViewPitchMax                   ( CPF_Parm )

struct FRotator APlayerController::eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax )
{
	static UFunction* pFnLimitViewRotation = NULL;

	if ( ! pFnLimitViewRotation )
		pFnLimitViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 11949 ];

	APlayerController_eventLimitViewRotation_Parms LimitViewRotation_Parms;
	memcpy ( &LimitViewRotation_Parms.ViewRotation, &ViewRotation, 0xC );
	LimitViewRotation_Parms.ViewPitchMin = ViewPitchMin;
	LimitViewRotation_Parms.ViewPitchMax = ViewPitchMax;

	this->ProcessEvent ( pFnLimitViewRotation, &LimitViewRotation_Parms, NULL );

	return LimitViewRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

void APlayerController::ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 11945 ];

	APlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessViewRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );
};

// Function Engine.PlayerController.UpdateRotation
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::UpdateRotation ( float DeltaTime )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = (UFunction*) UObject::GObjObjects()->Data[ 11936 ];

	APlayerController_execUpdateRotation_Parms UpdateRotation_Parms;
	UpdateRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function Engine.PlayerController.ViewShake
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::ViewShake ( float DeltaTime )
{
	static UFunction* pFnViewShake = NULL;

	if ( ! pFnViewShake )
		pFnViewShake = (UFunction*) UObject::GObjObjects()->Data[ 11934 ];

	APlayerController_execViewShake_Parms ViewShake_Parms;
	ViewShake_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnViewShake, &ViewShake_Parms, NULL );
};

// Function Engine.PlayerController.IsAimingAt
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ATarget                        ( CPF_Parm )
// float                          Epsilon                        ( CPF_Parm )

bool APlayerController::IsAimingAt ( class AActor* ATarget, float Epsilon )
{
	static UFunction* pFnIsAimingAt = NULL;

	if ( ! pFnIsAimingAt )
		pFnIsAimingAt = (UFunction*) UObject::GObjObjects()->Data[ 11928 ];

	APlayerController_execIsAimingAt_Parms IsAimingAt_Parms;
	IsAimingAt_Parms.ATarget = ATarget;
	IsAimingAt_Parms.Epsilon = Epsilon;

	this->ProcessEvent ( pFnIsAimingAt, &IsAimingAt_Parms, NULL );

	return IsAimingAt_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPlayerViewPoint
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APlayerController::GetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 7061 ];

	APlayerController_execGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	pFnGetPlayerViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	pFnGetPlayerViewPoint->FunctionFlags |= 0x400;

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.PlayerController.SpawnPlayerCamera
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventSpawnPlayerCamera ( )
{
	static UFunction* pFnSpawnPlayerCamera = NULL;

	if ( ! pFnSpawnPlayerCamera )
		pFnSpawnPlayerCamera = (UFunction*) UObject::GObjObjects()->Data[ 11924 ];

	APlayerController_eventSpawnPlayerCamera_Parms SpawnPlayerCamera_Parms;

	this->ProcessEvent ( pFnSpawnPlayerCamera, &SpawnPlayerCamera_Parms, NULL );
};

// Function Engine.PlayerController.ServerVerifyViewTarget
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerVerifyViewTarget ( )
{
	static UFunction* pFnServerVerifyViewTarget = NULL;

	if ( ! pFnServerVerifyViewTarget )
		pFnServerVerifyViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 11922 ];

	APlayerController_execServerVerifyViewTarget_Parms ServerVerifyViewTarget_Parms;

	this->ProcessEvent ( pFnServerVerifyViewTarget, &ServerVerifyViewTarget_Parms, NULL );
};

// Function Engine.PlayerController.GetViewTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* APlayerController::GetViewTarget ( )
{
	static UFunction* pFnGetViewTarget = NULL;

	if ( ! pFnGetViewTarget )
		pFnGetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 7059 ];

	APlayerController_execGetViewTarget_Parms GetViewTarget_Parms;

	pFnGetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewTarget, &GetViewTarget_Parms, NULL );

	pFnGetViewTarget->FunctionFlags |= 0x400;

	return GetViewTarget_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetViewTarget
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnClientSetViewTarget = NULL;

	if ( ! pFnClientSetViewTarget )
		pFnClientSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 11918 ];

	APlayerController_eventClientSetViewTarget_Parms ClientSetViewTarget_Parms;
	ClientSetViewTarget_Parms.A = A;
	memcpy ( &ClientSetViewTarget_Parms.TransitionParams, &TransitionParams, 0x10 );

	this->ProcessEvent ( pFnClientSetViewTarget, &ClientSetViewTarget_Parms, NULL );
};

// Function Engine.PlayerController.SetViewTargetWithBlend
// [0x00824003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// float                          BlendTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  BlendFunc                      ( CPF_OptionalParm | CPF_Parm )
// float                          BlendExp                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLockOutgoing                  ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetViewTargetWithBlend ( class AActor* NewViewTarget, float BlendTime, unsigned char BlendFunc, float BlendExp, unsigned long bLockOutgoing )
{
	static UFunction* pFnSetViewTargetWithBlend = NULL;

	if ( ! pFnSetViewTargetWithBlend )
		pFnSetViewTargetWithBlend = (UFunction*) UObject::GObjObjects()->Data[ 11911 ];

	APlayerController_execSetViewTargetWithBlend_Parms SetViewTargetWithBlend_Parms;
	SetViewTargetWithBlend_Parms.NewViewTarget = NewViewTarget;
	SetViewTargetWithBlend_Parms.BlendTime = BlendTime;
	SetViewTargetWithBlend_Parms.BlendFunc = BlendFunc;
	SetViewTargetWithBlend_Parms.BlendExp = BlendExp;
	SetViewTargetWithBlend_Parms.bLockOutgoing = bLockOutgoing;

	this->ProcessEvent ( pFnSetViewTargetWithBlend, &SetViewTargetWithBlend_Parms, NULL );
};

// Function Engine.PlayerController.SetViewTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 11908 ];

	APlayerController_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0x10 );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsLocalController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsLocalController ( )
{
	static UFunction* pFnIsLocalController = NULL;

	if ( ! pFnIsLocalController )
		pFnIsLocalController = (UFunction*) UObject::GObjObjects()->Data[ 11906 ];

	APlayerController_execIsLocalController_Parms IsLocalController_Parms;

	pFnIsLocalController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalController, &IsLocalController_Parms, NULL );

	pFnIsLocalController->FunctionFlags |= 0x400;

	return IsLocalController_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsLocalPlayerController ( )
{
	static UFunction* pFnIsLocalPlayerController = NULL;

	if ( ! pFnIsLocalPlayerController )
		pFnIsLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 9794 ];

	APlayerController_execIsLocalPlayerController_Parms IsLocalPlayerController_Parms;

	pFnIsLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalPlayerController, &IsLocalPlayerController_Parms, NULL );

	pFnIsLocalPlayerController->FunctionFlags |= 0x400;

	return IsLocalPlayerController_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFOVAngle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APlayerController::GetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 7079 ];

	APlayerController_execGetFOVAngle_Parms GetFOVAngle_Parms;

	pFnGetFOVAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	pFnGetFOVAngle->FunctionFlags |= 0x400;

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.PlayerController.AdjustFOV
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::AdjustFOV ( float DeltaTime )
{
	static UFunction* pFnAdjustFOV = NULL;

	if ( ! pFnAdjustFOV )
		pFnAdjustFOV = (UFunction*) UObject::GObjObjects()->Data[ 11904 ];

	APlayerController_execAdjustFOV_Parms AdjustFOV_Parms;
	AdjustFOV_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnAdjustFOV, &AdjustFOV_Parms, NULL );
};

// Function Engine.PlayerController.NotifyLanded
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

bool APlayerController::eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = (UFunction*) UObject::GObjObjects()->Data[ 11900 ];

	APlayerController_eventNotifyLanded_Parms NotifyLanded_Parms;
	memcpy ( &NotifyLanded_Parms.HitNormal, &HitNormal, 0xC );
	NotifyLanded_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );

	return NotifyLanded_Parms.ReturnValue;
};

// Function Engine.PlayerController.AimHelpDot
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

float APlayerController::AimHelpDot ( unsigned long bInstantHit )
{
	static UFunction* pFnAimHelpDot = NULL;

	if ( ! pFnAimHelpDot )
		pFnAimHelpDot = (UFunction*) UObject::GObjObjects()->Data[ 11897 ];

	APlayerController_execAimHelpDot_Parms AimHelpDot_Parms;
	AimHelpDot_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimHelpDot, &AimHelpDot_Parms, NULL );

	return AimHelpDot_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetAdjustedAimFor
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator APlayerController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 11875 ];

	APlayerController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Engine.PlayerController.CameraLookAtFinished
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USeqAct_CameraLookAt*    Action                         ( CPF_Parm )

void APlayerController::eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action )
{
	static UFunction* pFnCameraLookAtFinished = NULL;

	if ( ! pFnCameraLookAtFinished )
		pFnCameraLookAtFinished = (UFunction*) UObject::GObjObjects()->Data[ 11873 ];

	APlayerController_eventCameraLookAtFinished_Parms CameraLookAtFinished_Parms;
	CameraLookAtFinished_Parms.Action = Action;

	this->ProcessEvent ( pFnCameraLookAtFinished, &CameraLookAtFinished_Parms, NULL );
};

// Function Engine.PlayerController.AimingHelp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstantHit                    ( CPF_Parm )

bool APlayerController::AimingHelp ( unsigned long bInstantHit )
{
	static UFunction* pFnAimingHelp = NULL;

	if ( ! pFnAimingHelp )
		pFnAimingHelp = (UFunction*) UObject::GObjObjects()->Data[ 11869 ];

	APlayerController_execAimingHelp_Parms AimingHelp_Parms;
	AimingHelp_Parms.bInstantHit = bInstantHit;

	this->ProcessEvent ( pFnAimingHelp, &AimingHelp_Parms, NULL );

	return AimingHelp_Parms.ReturnValue;
};

// Function Engine.PlayerController.PlayerMove
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::PlayerMove ( float DeltaTime )
{
	static UFunction* pFnPlayerMove = NULL;

	if ( ! pFnPlayerMove )
		pFnPlayerMove = (UFunction*) UObject::GObjObjects()->Data[ 11867 ];

	APlayerController_execPlayerMove_Parms PlayerMove_Parms;
	PlayerMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerMove, &PlayerMove_Parms, NULL );
};

// Function Engine.PlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APlayerController::eventPlayerTick ( float DeltaTime )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = (UFunction*) UObject::GObjObjects()->Data[ 11865 ];

	APlayerController_eventPlayerTick_Parms PlayerTick_Parms;
	PlayerTick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function Engine.PlayerController.NotifyChangedWeapon
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 PreviousWeapon                 ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APlayerController::NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 11862 ];

	APlayerController_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PreviousWeapon = PreviousWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function Engine.PlayerController.ClientGameEnded
// [0x010201C2] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_Parm )

void APlayerController::ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnClientGameEnded = NULL;

	if ( ! pFnClientGameEnded )
		pFnClientGameEnded = (UFunction*) UObject::GObjObjects()->Data[ 11859 ];

	APlayerController_execClientGameEnded_Parms ClientGameEnded_Parms;
	ClientGameEnded_Parms.EndGameFocus = EndGameFocus;
	ClientGameEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnClientGameEnded, &ClientGameEnded_Parms, NULL );
};

// Function Engine.PlayerController.GameHasEnded
// [0x00024002] 
// Parameters infos:
// class AActor*                  EndGameFocus                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsWinner                      ( CPF_OptionalParm | CPF_Parm )

void APlayerController::GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner )
{
	static UFunction* pFnGameHasEnded = NULL;

	if ( ! pFnGameHasEnded )
		pFnGameHasEnded = (UFunction*) UObject::GObjObjects()->Data[ 11856 ];

	APlayerController_execGameHasEnded_Parms GameHasEnded_Parms;
	GameHasEnded_Parms.EndGameFocus = EndGameFocus;
	GameHasEnded_Parms.bIsWinner = bIsWinner;

	this->ProcessEvent ( pFnGameHasEnded, &GameHasEnded_Parms, NULL );
};

// Function Engine.PlayerController.ClientRestart
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::ClientRestart ( class APawn* NewPawn )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 11854 ];

	APlayerController_execClientRestart_Parms ClientRestart_Parms;
	ClientRestart_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.PlayerController.EnterStartState
// [0x00020002] 
// Parameters infos:

void APlayerController::EnterStartState ( )
{
	static UFunction* pFnEnterStartState = NULL;

	if ( ! pFnEnterStartState )
		pFnEnterStartState = (UFunction*) UObject::GObjObjects()->Data[ 11846 ];

	APlayerController_execEnterStartState_Parms EnterStartState_Parms;

	this->ProcessEvent ( pFnEnterStartState, &EnterStartState_Parms, NULL );
};

// Function Engine.PlayerController.ForceSingleNetUpdateFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void APlayerController::ForceSingleNetUpdateFor ( class AActor* Target )
{
	static UFunction* pFnForceSingleNetUpdateFor = NULL;

	if ( ! pFnForceSingleNetUpdateFor )
		pFnForceSingleNetUpdateFor = (UFunction*) UObject::GObjObjects()->Data[ 11844 ];

	APlayerController_execForceSingleNetUpdateFor_Parms ForceSingleNetUpdateFor_Parms;
	ForceSingleNetUpdateFor_Parms.Target = Target;

	pFnForceSingleNetUpdateFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSingleNetUpdateFor, &ForceSingleNetUpdateFor_Parms, NULL );

	pFnForceSingleNetUpdateFor->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::HasClientLoadedCurrentWorld ( )
{
	static UFunction* pFnHasClientLoadedCurrentWorld = NULL;

	if ( ! pFnHasClientLoadedCurrentWorld )
		pFnHasClientLoadedCurrentWorld = (UFunction*) UObject::GObjObjects()->Data[ 11842 ];

	APlayerController_execHasClientLoadedCurrentWorld_Parms HasClientLoadedCurrentWorld_Parms;

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasClientLoadedCurrentWorld, &HasClientLoadedCurrentWorld_Parms, NULL );

	pFnHasClientLoadedCurrentWorld->FunctionFlags |= 0x400;

	return HasClientLoadedCurrentWorld_Parms.ReturnValue;
};

// Function Engine.PlayerController.NotifyLoadedWorld
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )
// unsigned long                  bFinalDest                     ( CPF_Parm )

void APlayerController::eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest )
{
	static UFunction* pFnNotifyLoadedWorld = NULL;

	if ( ! pFnNotifyLoadedWorld )
		pFnNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 11836 ];

	APlayerController_eventNotifyLoadedWorld_Parms NotifyLoadedWorld_Parms;
	memcpy ( &NotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );
	NotifyLoadedWorld_Parms.bFinalDest = bFinalDest;

	this->ProcessEvent ( pFnNotifyLoadedWorld, &NotifyLoadedWorld_Parms, NULL );
};

// Function Engine.PlayerController.ServerNotifyLoadedWorld
// [0x00220CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FName                   WorldPackageName               ( CPF_Parm )

void APlayerController::eventServerNotifyLoadedWorld ( struct FName WorldPackageName )
{
	static UFunction* pFnServerNotifyLoadedWorld = NULL;

	if ( ! pFnServerNotifyLoadedWorld )
		pFnServerNotifyLoadedWorld = (UFunction*) UObject::GObjObjects()->Data[ 11834 ];

	APlayerController_eventServerNotifyLoadedWorld_Parms ServerNotifyLoadedWorld_Parms;
	memcpy ( &ServerNotifyLoadedWorld_Parms.WorldPackageName, &WorldPackageName, 0x8 );

	pFnServerNotifyLoadedWorld->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerNotifyLoadedWorld, &ServerNotifyLoadedWorld_Parms, NULL );

	pFnServerNotifyLoadedWorld->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.Restart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::Restart ( unsigned long bVehicleTransition )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 11831 ];

	APlayerController_execRestart_Parms Restart_Parms;
	Restart_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetProgressMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreFutureNetworkMessages   ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages )
{
	static UFunction* pFnClientSetProgressMessage = NULL;

	if ( ! pFnClientSetProgressMessage )
		pFnClientSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 11826 ];

	APlayerController_eventClientSetProgressMessage_Parms ClientSetProgressMessage_Parms;
	ClientSetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &ClientSetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &ClientSetProgressMessage_Parms.Title, &Title, 0xC );
	ClientSetProgressMessage_Parms.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent ( pFnClientSetProgressMessage, &ClientSetProgressMessage_Parms, NULL );
};

// Function Engine.PlayerController.SwitchLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::SwitchLevel ( struct FString URL )
{
	static UFunction* pFnSwitchLevel = NULL;

	if ( ! pFnSwitchLevel )
		pFnSwitchLevel = (UFunction*) UObject::GObjObjects()->Data[ 11824 ];

	APlayerController_execSwitchLevel_Parms SwitchLevel_Parms;
	memcpy ( &SwitchLevel_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitchLevel, &SwitchLevel_Parms, NULL );
};

// Function Engine.PlayerController.ChangeTeam
// [0x00024200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 TeamName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ChangeTeam ( struct FString TeamName )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = (UFunction*) UObject::GObjObjects()->Data[ 11822 ];

	APlayerController_execChangeTeam_Parms ChangeTeam_Parms;
	memcpy ( &ChangeTeam_Parms.TeamName, &TeamName, 0xC );

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );
};

// Function Engine.PlayerController.SwitchTeam
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::SwitchTeam ( )
{
	static UFunction* pFnSwitchTeam = NULL;

	if ( ! pFnSwitchTeam )
		pFnSwitchTeam = (UFunction*) UObject::GObjObjects()->Data[ 11821 ];

	APlayerController_execSwitchTeam_Parms SwitchTeam_Parms;

	this->ProcessEvent ( pFnSwitchTeam, &SwitchTeam_Parms, NULL );
};

// Function Engine.PlayerController.ServerChangeName
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::ServerChangeName ( struct FString S )
{
	static UFunction* pFnServerChangeName = NULL;

	if ( ! pFnServerChangeName )
		pFnServerChangeName = (UFunction*) UObject::GObjObjects()->Data[ 11819 ];

	APlayerController_execServerChangeName_Parms ServerChangeName_Parms;
	memcpy ( &ServerChangeName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerChangeName, &ServerChangeName_Parms, NULL );
};

// Function Engine.PlayerController.SetName
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APlayerController::SetName ( struct FString S )
{
	static UFunction* pFnSetName = NULL;

	if ( ! pFnSetName )
		pFnSetName = (UFunction*) UObject::GObjObjects()->Data[ 11811 ];

	APlayerController_execSetName_Parms SetName_Parms;
	memcpy ( &SetName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetName, &SetName_Parms, NULL );
};

// Function Engine.PlayerController.Suicide
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 11810 ];

	APlayerController_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.PlayerController.TriggerInteracted
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::TriggerInteracted ( )
{
	static UFunction* pFnTriggerInteracted = NULL;

	if ( ! pFnTriggerInteracted )
		pFnTriggerInteracted = (UFunction*) UObject::GObjObjects()->Data[ 11795 ];

	APlayerController_execTriggerInteracted_Parms TriggerInteracted_Parms;

	this->ProcessEvent ( pFnTriggerInteracted, &TriggerInteracted_Parms, NULL );

	return TriggerInteracted_Parms.ReturnValue;
};

// Function Engine.PlayerController.FindVehicleToDrive
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::FindVehicleToDrive ( )
{
	static UFunction* pFnFindVehicleToDrive = NULL;

	if ( ! pFnFindVehicleToDrive )
		pFnFindVehicleToDrive = (UFunction*) UObject::GObjObjects()->Data[ 11785 ];

	APlayerController_execFindVehicleToDrive_Parms FindVehicleToDrive_Parms;

	this->ProcessEvent ( pFnFindVehicleToDrive, &FindVehicleToDrive_Parms, NULL );

	return FindVehicleToDrive_Parms.ReturnValue;
};

// Function Engine.PlayerController.PerformedUseAction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::PerformedUseAction ( )
{
	static UFunction* pFnPerformedUseAction = NULL;

	if ( ! pFnPerformedUseAction )
		pFnPerformedUseAction = (UFunction*) UObject::GObjObjects()->Data[ 11783 ];

	APlayerController_execPerformedUseAction_Parms PerformedUseAction_Parms;

	this->ProcessEvent ( pFnPerformedUseAction, &PerformedUseAction_Parms, NULL );

	return PerformedUseAction_Parms.ReturnValue;
};

// Function Engine.PlayerController.Use
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Use ( )
{
	static UFunction* pFnUse = NULL;

	if ( ! pFnUse )
		pFnUse = (UFunction*) UObject::GObjObjects()->Data[ 11782 ];

	APlayerController_execUse_Parms Use_Parms;

	this->ProcessEvent ( pFnUse, &Use_Parms, NULL );
};

// Function Engine.PlayerController.GetTriggerUseList
// [0x00C20002] 
// Parameters infos:
// float                          interactDistanceToCheck        ( CPF_Parm )
// float                          crosshairDist                  ( CPF_Parm )
// float                          minDot                         ( CPF_Parm )
// unsigned long                  bUsuableOnly                   ( CPF_Parm )
// TArray< class ATrigger* >      out_useList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList )
{
	static UFunction* pFnGetTriggerUseList = NULL;

	if ( ! pFnGetTriggerUseList )
		pFnGetTriggerUseList = (UFunction*) UObject::GObjObjects()->Data[ 11768 ];

	APlayerController_execGetTriggerUseList_Parms GetTriggerUseList_Parms;
	GetTriggerUseList_Parms.interactDistanceToCheck = interactDistanceToCheck;
	GetTriggerUseList_Parms.crosshairDist = crosshairDist;
	GetTriggerUseList_Parms.minDot = minDot;
	GetTriggerUseList_Parms.bUsuableOnly = bUsuableOnly;

	this->ProcessEvent ( pFnGetTriggerUseList, &GetTriggerUseList_Parms, NULL );

	if ( out_useList )
		memcpy ( out_useList, &GetTriggerUseList_Parms.out_useList, 0xC );
};

// Function Engine.PlayerController.StopAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopAltFire = NULL;

	if ( ! pFnStopAltFire )
		pFnStopAltFire = (UFunction*) UObject::GObjObjects()->Data[ 11766 ];

	APlayerController_execStopAltFire_Parms StopAltFire_Parms;
	StopAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopAltFire, &StopAltFire_Parms, NULL );
};

// Function Engine.PlayerController.StartAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartAltFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartAltFire = NULL;

	if ( ! pFnStartAltFire )
		pFnStartAltFire = (UFunction*) UObject::GObjObjects()->Data[ 11764 ];

	APlayerController_execStartAltFire_Parms StartAltFire_Parms;
	StartAltFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartAltFire, &StartAltFire_Parms, NULL );
};

// Function Engine.PlayerController.StopFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 11762 ];

	APlayerController_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.PlayerController.StartFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 11758 ];

	APlayerController_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.PlayerController.NextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 11757 ];

	APlayerController_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function Engine.PlayerController.PrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 11756 ];

	APlayerController_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function Engine.PlayerController.ThrowWeapon
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::ThrowWeapon ( )
{
	static UFunction* pFnThrowWeapon = NULL;

	if ( ! pFnThrowWeapon )
		pFnThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 11755 ];

	APlayerController_execThrowWeapon_Parms ThrowWeapon_Parms;

	this->ProcessEvent ( pFnThrowWeapon, &ThrowWeapon_Parms, NULL );
};

// Function Engine.PlayerController.UTrace
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::UTrace ( )
{
	static UFunction* pFnUTrace = NULL;

	if ( ! pFnUTrace )
		pFnUTrace = (UFunction*) UObject::GObjObjects()->Data[ 11754 ];

	APlayerController_execUTrace_Parms UTrace_Parms;

	this->ProcessEvent ( pFnUTrace, &UTrace_Parms, NULL );
};

// Function Engine.PlayerController.ConditionalPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )

void APlayerController::eventConditionalPause ( unsigned long bDesiredPauseState )
{
	static UFunction* pFnConditionalPause = NULL;

	if ( ! pFnConditionalPause )
		pFnConditionalPause = (UFunction*) UObject::GObjObjects()->Data[ 11752 ];

	APlayerController_eventConditionalPause_Parms ConditionalPause_Parms;
	ConditionalPause_Parms.bDesiredPauseState = bDesiredPauseState;

	this->ProcessEvent ( pFnConditionalPause, &ConditionalPause_Parms, NULL );
};

// Function Engine.PlayerController.Pause
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void APlayerController::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 11751 ];

	APlayerController_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function Engine.PlayerController.IsPaused
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsPaused ( )
{
	static UFunction* pFnIsPaused = NULL;

	if ( ! pFnIsPaused )
		pFnIsPaused = (UFunction*) UObject::GObjObjects()->Data[ 11749 ];

	APlayerController_execIsPaused_Parms IsPaused_Parms;

	this->ProcessEvent ( pFnIsPaused, &IsPaused_Parms, NULL );

	return IsPaused_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetPause
// [0x00024002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPause                         ( CPF_Parm )
// struct FScriptDelegate         CanUnpauseDelegate             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = (UFunction*) UObject::GObjObjects()->Data[ 11740 ];

	APlayerController_execSetPause_Parms SetPause_Parms;
	SetPause_Parms.bPause = bPause;
	memcpy ( &SetPause_Parms.CanUnpauseDelegate, &CanUnpauseDelegate, 0x10 );

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );

	return SetPause_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpause
// [0x00120002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpause ( )
{
	static UFunction* pFnCanUnpause = NULL;

	if ( ! pFnCanUnpause )
		pFnCanUnpause = (UFunction*) UObject::GObjObjects()->Data[ 11738 ];

	APlayerController_execCanUnpause_Parms CanUnpause_Parms;

	this->ProcessEvent ( pFnCanUnpause, &CanUnpause_Parms, NULL );

	return CanUnpause_Parms.ReturnValue;
};

// Function Engine.PlayerController.LocalTravel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::LocalTravel ( struct FString URL )
{
	static UFunction* pFnLocalTravel = NULL;

	if ( ! pFnLocalTravel )
		pFnLocalTravel = (UFunction*) UObject::GObjObjects()->Data[ 11736 ];

	APlayerController_execLocalTravel_Parms LocalTravel_Parms;
	memcpy ( &LocalTravel_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnLocalTravel, &LocalTravel_Parms, NULL );
};

// Function Engine.PlayerController.RestartLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::RestartLevel ( )
{
	static UFunction* pFnRestartLevel = NULL;

	if ( ! pFnRestartLevel )
		pFnRestartLevel = (UFunction*) UObject::GObjObjects()->Data[ 11735 ];

	APlayerController_execRestartLevel_Parms RestartLevel_Parms;

	this->ProcessEvent ( pFnRestartLevel, &RestartLevel_Parms, NULL );
};

// Function Engine.PlayerController.Speech
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Type                           ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// struct FString                 Callsign                       ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Speech ( struct FName Type, int Index, struct FString Callsign )
{
	static UFunction* pFnSpeech = NULL;

	if ( ! pFnSpeech )
		pFnSpeech = (UFunction*) UObject::GObjObjects()->Data[ 11731 ];

	APlayerController_execSpeech_Parms Speech_Parms;
	memcpy ( &Speech_Parms.Type, &Type, 0x8 );
	Speech_Parms.Index = Index;
	memcpy ( &Speech_Parms.Callsign, &Callsign, 0xC );

	this->ProcessEvent ( pFnSpeech, &Speech_Parms, NULL );
};

// Function Engine.PlayerController.HandleWalking
// [0x00020002] 
// Parameters infos:

void APlayerController::HandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = (UFunction*) UObject::GObjObjects()->Data[ 11730 ];

	APlayerController_execHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function Engine.PlayerController.ReplicateMove
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnReplicateMove = NULL;

	if ( ! pFnReplicateMove )
		pFnReplicateMove = (UFunction*) UObject::GObjObjects()->Data[ 11725 ];

	APlayerController_execReplicateMove_Parms ReplicateMove_Parms;
	ReplicateMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ReplicateMove_Parms.newAccel, &newAccel, 0xC );
	ReplicateMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ReplicateMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnReplicateMove, &ReplicateMove_Parms, NULL );
};

// Function Engine.PlayerController.CompressAccel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            C                              ( CPF_Parm )

int APlayerController::CompressAccel ( int C )
{
	static UFunction* pFnCompressAccel = NULL;

	if ( ! pFnCompressAccel )
		pFnCompressAccel = (UFunction*) UObject::GObjObjects()->Data[ 11722 ];

	APlayerController_execCompressAccel_Parms CompressAccel_Parms;
	CompressAccel_Parms.C = C;

	this->ProcessEvent ( pFnCompressAccel, &CompressAccel_Parms, NULL );

	return CompressAccel_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetFreeMove
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USavedMove*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USavedMove* APlayerController::GetFreeMove ( )
{
	static UFunction* pFnGetFreeMove = NULL;

	if ( ! pFnGetFreeMove )
		pFnGetFreeMove = (UFunction*) UObject::GObjObjects()->Data[ 11717 ];

	APlayerController_execGetFreeMove_Parms GetFreeMove_Parms;

	this->ProcessEvent ( pFnGetFreeMove, &GetFreeMove_Parms, NULL );

	return GetFreeMove_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientUpdatePosition
// [0x00020002] 
// Parameters infos:

void APlayerController::ClientUpdatePosition ( )
{
	static UFunction* pFnClientUpdatePosition = NULL;

	if ( ! pFnClientUpdatePosition )
		pFnClientUpdatePosition = (UFunction*) UObject::GObjObjects()->Data[ 11700 ];

	APlayerController_execClientUpdatePosition_Parms ClientUpdatePosition_Parms;

	this->ProcessEvent ( pFnClientUpdatePosition, &ClientUpdatePosition_Parms, NULL );
};

// Function Engine.PlayerController.ClearAckedMoves
// [0x00020002] 
// Parameters infos:

void APlayerController::ClearAckedMoves ( )
{
	static UFunction* pFnClearAckedMoves = NULL;

	if ( ! pFnClearAckedMoves )
		pFnClearAckedMoves = (UFunction*) UObject::GObjObjects()->Data[ 11698 ];

	APlayerController_execClearAckedMoves_Parms ClearAckedMoves_Parms;

	this->ProcessEvent ( pFnClearAckedMoves, &ClearAckedMoves_Parms, NULL );
};

// Function Engine.PlayerController.ServerUpdatePing
// [0x00220042] 
// Parameters infos:
// int                            NewPing                        ( CPF_Parm )

void APlayerController::ServerUpdatePing ( int NewPing )
{
	static UFunction* pFnServerUpdatePing = NULL;

	if ( ! pFnServerUpdatePing )
		pFnServerUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 11690 ];

	APlayerController_execServerUpdatePing_Parms ServerUpdatePing_Parms;
	ServerUpdatePing_Parms.NewPing = NewPing;

	this->ProcessEvent ( pFnServerUpdatePing, &ServerUpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.UpdateStateFromAdjustment
// [0x00020002] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )

void APlayerController::UpdateStateFromAdjustment ( struct FName NewState )
{
	static UFunction* pFnUpdateStateFromAdjustment = NULL;

	if ( ! pFnUpdateStateFromAdjustment )
		pFnUpdateStateFromAdjustment = (UFunction*) UObject::GObjObjects()->Data[ 11688 ];

	APlayerController_execUpdateStateFromAdjustment_Parms UpdateStateFromAdjustment_Parms;
	memcpy ( &UpdateStateFromAdjustment_Parms.NewState, &NewState, 0x8 );

	this->ProcessEvent ( pFnUpdateStateFromAdjustment, &UpdateStateFromAdjustment_Parms, NULL );
};

// Function Engine.PlayerController.LongClientAdjustPosition
// [0x01820142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )
// float                          NewFloorX                      ( CPF_Parm )
// float                          NewFloorY                      ( CPF_Parm )
// float                          NewFloorZ                      ( CPF_Parm )

void APlayerController::LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ )
{
	static UFunction* pFnLongClientAdjustPosition = NULL;

	if ( ! pFnLongClientAdjustPosition )
		pFnLongClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 11655 ];

	APlayerController_execLongClientAdjustPosition_Parms LongClientAdjustPosition_Parms;
	LongClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &LongClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	LongClientAdjustPosition_Parms.newPhysics = newPhysics;
	LongClientAdjustPosition_Parms.NewLocX = NewLocX;
	LongClientAdjustPosition_Parms.NewLocY = NewLocY;
	LongClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	LongClientAdjustPosition_Parms.NewVelX = NewVelX;
	LongClientAdjustPosition_Parms.NewVelY = NewVelY;
	LongClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	LongClientAdjustPosition_Parms.NewBase = NewBase;
	LongClientAdjustPosition_Parms.NewFloorX = NewFloorX;
	LongClientAdjustPosition_Parms.NewFloorY = NewFloorY;
	LongClientAdjustPosition_Parms.NewFloorZ = NewFloorZ;

	this->ProcessEvent ( pFnLongClientAdjustPosition, &LongClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.SkipPositionUpdateForRM
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::SkipPositionUpdateForRM ( )
{
	static UFunction* pFnSkipPositionUpdateForRM = NULL;

	if ( ! pFnSkipPositionUpdateForRM )
		pFnSkipPositionUpdateForRM = (UFunction*) UObject::GObjObjects()->Data[ 11649 ];

	APlayerController_execSkipPositionUpdateForRM_Parms SkipPositionUpdateForRM_Parms;

	this->ProcessEvent ( pFnSkipPositionUpdateForRM, &SkipPositionUpdateForRM_Parms, NULL );

	return SkipPositionUpdateForRM_Parms.ReturnValue;
};

// Function Engine.PlayerController.UpdatePing
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 11632 ];

	APlayerController_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdjustPosition
// [0x01820142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// float                          NewVelX                        ( CPF_Parm )
// float                          NewVelY                        ( CPF_Parm )
// float                          NewVelZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase )
{
	static UFunction* pFnClientAdjustPosition = NULL;

	if ( ! pFnClientAdjustPosition )
		pFnClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 11633 ];

	APlayerController_execClientAdjustPosition_Parms ClientAdjustPosition_Parms;
	ClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ClientAdjustPosition_Parms.newPhysics = newPhysics;
	ClientAdjustPosition_Parms.NewLocX = NewLocX;
	ClientAdjustPosition_Parms.NewLocY = NewLocY;
	ClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ClientAdjustPosition_Parms.NewVelX = NewVelX;
	ClientAdjustPosition_Parms.NewVelY = NewVelY;
	ClientAdjustPosition_Parms.NewVelZ = NewVelZ;
	ClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnClientAdjustPosition, &ClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.ClientAckGoodMove
// [0x01020142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerController::ClientAckGoodMove ( float TimeStamp )
{
	static UFunction* pFnClientAckGoodMove = NULL;

	if ( ! pFnClientAckGoodMove )
		pFnClientAckGoodMove = (UFunction*) UObject::GObjObjects()->Data[ 11630 ];

	APlayerController_execClientAckGoodMove_Parms ClientAckGoodMove_Parms;
	ClientAckGoodMove_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnClientAckGoodMove, &ClientAckGoodMove_Parms, NULL );
};

// Function Engine.PlayerController.ShortClientAdjustPosition
// [0x01820142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FName                   NewState                       ( CPF_Parm )
// unsigned char                  newPhysics                     ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnShortClientAdjustPosition = NULL;

	if ( ! pFnShortClientAdjustPosition )
		pFnShortClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 11621 ];

	APlayerController_execShortClientAdjustPosition_Parms ShortClientAdjustPosition_Parms;
	ShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	memcpy ( &ShortClientAdjustPosition_Parms.NewState, &NewState, 0x8 );
	ShortClientAdjustPosition_Parms.newPhysics = newPhysics;
	ShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	ShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	ShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	ShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnShortClientAdjustPosition, &ShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.VeryShortClientAdjustPosition
// [0x01820142] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// float                          NewLocX                        ( CPF_Parm )
// float                          NewLocY                        ( CPF_Parm )
// float                          NewLocZ                        ( CPF_Parm )
// class AActor*                  NewBase                        ( CPF_Parm )

void APlayerController::VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase )
{
	static UFunction* pFnVeryShortClientAdjustPosition = NULL;

	if ( ! pFnVeryShortClientAdjustPosition )
		pFnVeryShortClientAdjustPosition = (UFunction*) UObject::GObjObjects()->Data[ 11614 ];

	APlayerController_execVeryShortClientAdjustPosition_Parms VeryShortClientAdjustPosition_Parms;
	VeryShortClientAdjustPosition_Parms.TimeStamp = TimeStamp;
	VeryShortClientAdjustPosition_Parms.NewLocX = NewLocX;
	VeryShortClientAdjustPosition_Parms.NewLocY = NewLocY;
	VeryShortClientAdjustPosition_Parms.NewLocZ = NewLocZ;
	VeryShortClientAdjustPosition_Parms.NewBase = NewBase;

	this->ProcessEvent ( pFnVeryShortClientAdjustPosition, &VeryShortClientAdjustPosition_Parms, NULL );
};

// Function Engine.PlayerController.MoveAutonomous
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned char                  CompressedFlags                ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot )
{
	static UFunction* pFnMoveAutonomous = NULL;

	if ( ! pFnMoveAutonomous )
		pFnMoveAutonomous = (UFunction*) UObject::GObjObjects()->Data[ 11604 ];

	APlayerController_execMoveAutonomous_Parms MoveAutonomous_Parms;
	MoveAutonomous_Parms.DeltaTime = DeltaTime;
	MoveAutonomous_Parms.CompressedFlags = CompressedFlags;
	memcpy ( &MoveAutonomous_Parms.newAccel, &newAccel, 0xC );
	memcpy ( &MoveAutonomous_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnMoveAutonomous, &MoveAutonomous_Parms, NULL );
};

// Function Engine.PlayerController.ProcessMove
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  DoubleClickMove                ( CPF_Parm )
// struct FRotator                DeltaRot                       ( CPF_Parm )

void APlayerController::ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot )
{
	static UFunction* pFnProcessMove = NULL;

	if ( ! pFnProcessMove )
		pFnProcessMove = (UFunction*) UObject::GObjObjects()->Data[ 11599 ];

	APlayerController_execProcessMove_Parms ProcessMove_Parms;
	ProcessMove_Parms.DeltaTime = DeltaTime;
	memcpy ( &ProcessMove_Parms.newAccel, &newAccel, 0xC );
	ProcessMove_Parms.DoubleClickMove = DoubleClickMove;
	memcpy ( &ProcessMove_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnProcessMove, &ProcessMove_Parms, NULL );
};

// Function Engine.PlayerController.ProcessDrive
// [0x00020002] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )
// unsigned long                  InJump                         ( CPF_Parm )

void APlayerController::ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump )
{
	static UFunction* pFnProcessDrive = NULL;

	if ( ! pFnProcessDrive )
		pFnProcessDrive = (UFunction*) UObject::GObjObjects()->Data[ 11594 ];

	APlayerController_execProcessDrive_Parms ProcessDrive_Parms;
	ProcessDrive_Parms.InForward = InForward;
	ProcessDrive_Parms.InStrafe = InStrafe;
	ProcessDrive_Parms.InUp = InUp;
	ProcessDrive_Parms.InJump = InJump;

	this->ProcessEvent ( pFnProcessDrive, &ProcessDrive_Parms, NULL );
};

// Function Engine.PlayerController.SendClientAdjustment
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventSendClientAdjustment ( )
{
	static UFunction* pFnSendClientAdjustment = NULL;

	if ( ! pFnSendClientAdjustment )
		pFnSendClientAdjustment = (UFunction*) UObject::GObjObjects()->Data[ 11593 ];

	APlayerController_eventSendClientAdjustment_Parms SendClientAdjustment_Parms;

	this->ProcessEvent ( pFnSendClientAdjustment, &SendClientAdjustment_Parms, NULL );
};

// Function Engine.PlayerController.ServerMoveHandleClientError
// [0x00820002] 
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )
// struct FVector                 Accel                          ( CPF_Parm )
// struct FVector                 ClientLoc                      ( CPF_Parm )

void APlayerController::ServerMoveHandleClientError ( float TimeStamp, struct FVector Accel, struct FVector ClientLoc )
{
	static UFunction* pFnServerMoveHandleClientError = NULL;

	if ( ! pFnServerMoveHandleClientError )
		pFnServerMoveHandleClientError = (UFunction*) UObject::GObjObjects()->Data[ 11575 ];

	APlayerController_execServerMoveHandleClientError_Parms ServerMoveHandleClientError_Parms;
	ServerMoveHandleClientError_Parms.TimeStamp = TimeStamp;
	memcpy ( &ServerMoveHandleClientError_Parms.Accel, &Accel, 0xC );
	memcpy ( &ServerMoveHandleClientError_Parms.ClientLoc, &ClientLoc, 0xC );

	this->ProcessEvent ( pFnServerMoveHandleClientError, &ServerMoveHandleClientError_Parms, NULL );
};

// Function Engine.PlayerController.GetServerMoveDeltaTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          TimeStamp                      ( CPF_Parm )

float APlayerController::GetServerMoveDeltaTime ( float TimeStamp )
{
	static UFunction* pFnGetServerMoveDeltaTime = NULL;

	if ( ! pFnGetServerMoveDeltaTime )
		pFnGetServerMoveDeltaTime = (UFunction*) UObject::GObjObjects()->Data[ 11568 ];

	APlayerController_execGetServerMoveDeltaTime_Parms GetServerMoveDeltaTime_Parms;
	GetServerMoveDeltaTime_Parms.TimeStamp = TimeStamp;

	this->ProcessEvent ( pFnGetServerMoveDeltaTime, &GetServerMoveDeltaTime_Parms, NULL );

	return GetServerMoveDeltaTime_Parms.ReturnValue;
};

// Function Engine.PlayerController.ForceDeathUpdate
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceDeathUpdate ( )
{
	static UFunction* pFnForceDeathUpdate = NULL;

	if ( ! pFnForceDeathUpdate )
		pFnForceDeathUpdate = (UFunction*) UObject::GObjObjects()->Data[ 11566 ];

	APlayerController_execForceDeathUpdate_Parms ForceDeathUpdate_Parms;

	this->ProcessEvent ( pFnForceDeathUpdate, &ForceDeathUpdate_Parms, NULL );
};

// Function Engine.PlayerController.UsingFirstPersonCamera
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::UsingFirstPersonCamera ( )
{
	static UFunction* pFnUsingFirstPersonCamera = NULL;

	if ( ! pFnUsingFirstPersonCamera )
		pFnUsingFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 11564 ];

	APlayerController_execUsingFirstPersonCamera_Parms UsingFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUsingFirstPersonCamera, &UsingFirstPersonCamera_Parms, NULL );

	return UsingFirstPersonCamera_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientSetCameraFade
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bEnableFading                  ( CPF_Parm )
// struct FColor                  FadeColor                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               FadeAlpha                      ( CPF_OptionalParm | CPF_Parm )
// float                          FadeTime                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bFadeAudio                     ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientSetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, unsigned long bFadeAudio )
{
	static UFunction* pFnClientSetCameraFade = NULL;

	if ( ! pFnClientSetCameraFade )
		pFnClientSetCameraFade = (UFunction*) UObject::GObjObjects()->Data[ 11558 ];

	APlayerController_eventClientSetCameraFade_Parms ClientSetCameraFade_Parms;
	ClientSetCameraFade_Parms.bEnableFading = bEnableFading;
	memcpy ( &ClientSetCameraFade_Parms.FadeColor, &FadeColor, 0x4 );
	memcpy ( &ClientSetCameraFade_Parms.FadeAlpha, &FadeAlpha, 0x8 );
	ClientSetCameraFade_Parms.FadeTime = FadeTime;
	ClientSetCameraFade_Parms.bFadeAudio = bFadeAudio;

	this->ProcessEvent ( pFnClientSetCameraFade, &ClientSetCameraFade_Parms, NULL );
};

// Function Engine.PlayerController.ResetCameraMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventResetCameraMode ( )
{
	static UFunction* pFnResetCameraMode = NULL;

	if ( ! pFnResetCameraMode )
		pFnResetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 11555 ];

	APlayerController_eventResetCameraMode_Parms ResetCameraMode_Parms;

	this->ProcessEvent ( pFnResetCameraMode, &ResetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.SetCameraMode
// [0x00020002] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::SetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnSetCameraMode = NULL;

	if ( ! pFnSetCameraMode )
		pFnSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 11553 ];

	APlayerController_execSetCameraMode_Parms SetCameraMode_Parms;
	memcpy ( &SetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnSetCameraMode, &SetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetCameraMode
// [0x010201C2] 
// Parameters infos:
// struct FName                   NewCamMode                     ( CPF_Parm )

void APlayerController::ClientSetCameraMode ( struct FName NewCamMode )
{
	static UFunction* pFnClientSetCameraMode = NULL;

	if ( ! pFnClientSetCameraMode )
		pFnClientSetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 11551 ];

	APlayerController_execClientSetCameraMode_Parms ClientSetCameraMode_Parms;
	memcpy ( &ClientSetCameraMode_Parms.NewCamMode, &NewCamMode, 0x8 );

	this->ProcessEvent ( pFnClientSetCameraMode, &ClientSetCameraMode_Parms, NULL );
};

// Function Engine.PlayerController.PreClientTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PendingURL                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

bool APlayerController::eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 11542 ];

	APlayerController_eventPreClientTravel_Parms PreClientTravel_Parms;
	memcpy ( &PreClientTravel_Parms.PendingURL, &PendingURL, 0xC );
	PreClientTravel_Parms.TravelType = TravelType;
	PreClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );

	return PreClientTravel_Parms.ReturnValue;
};

// Function Engine.PlayerController.TeamSay
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::TeamSay ( struct FString msg )
{
	static UFunction* pFnTeamSay = NULL;

	if ( ! pFnTeamSay )
		pFnTeamSay = (UFunction*) UObject::GObjObjects()->Data[ 11540 ];

	APlayerController_execTeamSay_Parms TeamSay_Parms;
	memcpy ( &TeamSay_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnTeamSay, &TeamSay_Parms, NULL );
};

// Function Engine.PlayerController.ClientAdminMessage
// [0x010201C2] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::ClientAdminMessage ( struct FString msg )
{
	static UFunction* pFnClientAdminMessage = NULL;

	if ( ! pFnClientAdminMessage )
		pFnClientAdminMessage = (UFunction*) UObject::GObjObjects()->Data[ 11536 ];

	APlayerController_execClientAdminMessage_Parms ClientAdminMessage_Parms;
	memcpy ( &ClientAdminMessage_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnClientAdminMessage, &ClientAdminMessage_Parms, NULL );
};

// Function Engine.PlayerController.Say
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Say ( struct FString msg )
{
	static UFunction* pFnSay = NULL;

	if ( ! pFnSay )
		pFnSay = (UFunction*) UObject::GObjObjects()->Data[ 11534 ];

	APlayerController_execSay_Parms Say_Parms;
	memcpy ( &Say_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnSay, &Say_Parms, NULL );
};

// Function Engine.PlayerController.AllowTextMessage
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::AllowTextMessage ( struct FString msg )
{
	static UFunction* pFnAllowTextMessage = NULL;

	if ( ! pFnAllowTextMessage )
		pFnAllowTextMessage = (UFunction*) UObject::GObjObjects()->Data[ 11528 ];

	APlayerController_execAllowTextMessage_Parms AllowTextMessage_Parms;
	memcpy ( &AllowTextMessage_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnAllowTextMessage, &AllowTextMessage_Parms, NULL );

	return AllowTextMessage_Parms.ReturnValue;
};

// Function Engine.PlayerController.Mutate
// [0x00020200] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MutateString                   ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::Mutate ( struct FString MutateString )
{
	static UFunction* pFnMutate = NULL;

	if ( ! pFnMutate )
		pFnMutate = (UFunction*) UObject::GObjObjects()->Data[ 11526 ];

	APlayerController_execMutate_Parms Mutate_Parms;
	memcpy ( &Mutate_Parms.MutateString, &MutateString, 0xC );

	this->ProcessEvent ( pFnMutate, &Mutate_Parms, NULL );
};

// Function Engine.PlayerController.FOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void APlayerController::FOV ( float F )
{
	static UFunction* pFnFOV = NULL;

	if ( ! pFnFOV )
		pFnFOV = (UFunction*) UObject::GObjObjects()->Data[ 11524 ];

	APlayerController_execFOV_Parms FOV_Parms;
	FOV_Parms.F = F;

	this->ProcessEvent ( pFnFOV, &FOV_Parms, NULL );
};

// Function Engine.PlayerController.ResetFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetFOV ( )
{
	static UFunction* pFnResetFOV = NULL;

	if ( ! pFnResetFOV )
		pFnResetFOV = (UFunction*) UObject::GObjObjects()->Data[ 11523 ];

	APlayerController_execResetFOV_Parms ResetFOV_Parms;

	this->ProcessEvent ( pFnResetFOV, &ResetFOV_Parms, NULL );
};

// Function Engine.PlayerController.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void APlayerController::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 11521 ];

	APlayerController_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.PlayerController.FixFOV
// [0x00020002] 
// Parameters infos:

void APlayerController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = (UFunction*) UObject::GObjObjects()->Data[ 11517 ];

	APlayerController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function Engine.PlayerController.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 11508 ];

	APlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerController.CleanupPawn
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanupPawn ( )
{
	static UFunction* pFnCleanupPawn = NULL;

	if ( ! pFnCleanupPawn )
		pFnCleanupPawn = (UFunction*) UObject::GObjObjects()->Data[ 11500 ];

	APlayerController_execCleanupPawn_Parms CleanupPawn_Parms;

	this->ProcessEvent ( pFnCleanupPawn, &CleanupPawn_Parms, NULL );
};

// Function Engine.PlayerController.ClearOnlineDelegates
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 11498 ];

	APlayerController_eventClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.OnPartyMembersInfoChanged
// [0x00020000] 
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            CustomData1                    ( CPF_Parm )
// int                            CustomData2                    ( CPF_Parm )
// int                            CustomData3                    ( CPF_Parm )
// int                            CustomData4                    ( CPF_Parm )

void APlayerController::OnPartyMembersInfoChanged ( struct FString PlayerName, struct FUniqueNetId PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4 )
{
	static UFunction* pFnOnPartyMembersInfoChanged = NULL;

	if ( ! pFnOnPartyMembersInfoChanged )
		pFnOnPartyMembersInfoChanged = (UFunction*) UObject::GObjObjects()->Data[ 11491 ];

	APlayerController_execOnPartyMembersInfoChanged_Parms OnPartyMembersInfoChanged_Parms;
	memcpy ( &OnPartyMembersInfoChanged_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &OnPartyMembersInfoChanged_Parms.PlayerID, &PlayerID, 0x48 );
	OnPartyMembersInfoChanged_Parms.CustomData1 = CustomData1;
	OnPartyMembersInfoChanged_Parms.CustomData2 = CustomData2;
	OnPartyMembersInfoChanged_Parms.CustomData3 = CustomData3;
	OnPartyMembersInfoChanged_Parms.CustomData4 = CustomData4;

	this->ProcessEvent ( pFnOnPartyMembersInfoChanged, &OnPartyMembersInfoChanged_Parms, NULL );
};

// Function Engine.PlayerController.OnPartyMemberListChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bJoinedOrLeft                  ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

void APlayerController::OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnOnPartyMemberListChanged = NULL;

	if ( ! pFnOnPartyMemberListChanged )
		pFnOnPartyMemberListChanged = (UFunction*) UObject::GObjObjects()->Data[ 11487 ];

	APlayerController_execOnPartyMemberListChanged_Parms OnPartyMemberListChanged_Parms;
	OnPartyMemberListChanged_Parms.bJoinedOrLeft = bJoinedOrLeft;
	memcpy ( &OnPartyMemberListChanged_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &OnPartyMemberListChanged_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnOnPartyMemberListChanged, &OnPartyMemberListChanged_Parms, NULL );
};

// Function Engine.PlayerController.RegisterOnlineDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::RegisterOnlineDelegates ( )
{
	static UFunction* pFnRegisterOnlineDelegates = NULL;

	if ( ! pFnRegisterOnlineDelegates )
		pFnRegisterOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 11484 ];

	APlayerController_execRegisterOnlineDelegates_Parms RegisterOnlineDelegates_Parms;

	this->ProcessEvent ( pFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Parms, NULL );
};

// Function Engine.PlayerController.PlayBeepSound
// [0x00020000] 
// Parameters infos:

void APlayerController::PlayBeepSound ( )
{
	static UFunction* pFnPlayBeepSound = NULL;

	if ( ! pFnPlayBeepSound )
		pFnPlayBeepSound = (UFunction*) UObject::GObjObjects()->Data[ 11483 ];

	APlayerController_execPlayBeepSound_Parms PlayBeepSound_Parms;

	this->ProcessEvent ( pFnPlayBeepSound, &PlayBeepSound_Parms, NULL );
};

// Function Engine.PlayerController.TeamMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = (UFunction*) UObject::GObjObjects()->Data[ 11477 ];

	APlayerController_eventTeamMessage_Parms TeamMessage_Parms;
	TeamMessage_Parms.PRI = PRI;
	memcpy ( &TeamMessage_Parms.S, &S, 0xC );
	memcpy ( &TeamMessage_Parms.Type, &Type, 0x8 );
	TeamMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function Engine.PlayerController.SpeakTTS
// [0x00024102] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_OptionalParm | CPF_Parm )

void APlayerController::SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnSpeakTTS = NULL;

	if ( ! pFnSpeakTTS )
		pFnSpeakTTS = (UFunction*) UObject::GObjObjects()->Data[ 11472 ];

	APlayerController_execSpeakTTS_Parms SpeakTTS_Parms;
	memcpy ( &SpeakTTS_Parms.S, &S, 0xC );
	SpeakTTS_Parms.PRI = PRI;

	this->ProcessEvent ( pFnSpeakTTS, &SpeakTTS_Parms, NULL );
};

// Function Engine.PlayerController.CreateTTSSoundCue
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundCue*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StrToSpeak                     ( CPF_Parm | CPF_NeedCtorLink )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

class USoundCue* APlayerController::CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCreateTTSSoundCue = NULL;

	if ( ! pFnCreateTTSSoundCue )
		pFnCreateTTSSoundCue = (UFunction*) UObject::GObjObjects()->Data[ 11468 ];

	APlayerController_execCreateTTSSoundCue_Parms CreateTTSSoundCue_Parms;
	memcpy ( &CreateTTSSoundCue_Parms.StrToSpeak, &StrToSpeak, 0xC );
	CreateTTSSoundCue_Parms.PRI = PRI;

	pFnCreateTTSSoundCue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateTTSSoundCue, &CreateTTSSoundCue_Parms, NULL );

	pFnCreateTTSSoundCue->FunctionFlags |= 0x400;

	return CreateTTSSoundCue_Parms.ReturnValue;
};

// Function Engine.PlayerController.AllowTTSMessageFrom
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

bool APlayerController::AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAllowTTSMessageFrom = NULL;

	if ( ! pFnAllowTTSMessageFrom )
		pFnAllowTTSMessageFrom = (UFunction*) UObject::GObjObjects()->Data[ 11465 ];

	APlayerController_execAllowTTSMessageFrom_Parms AllowTTSMessageFrom_Parms;
	AllowTTSMessageFrom_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAllowTTSMessageFrom, &AllowTTSMessageFrom_Parms, NULL );

	return AllowTTSMessageFrom_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanCommunicate
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanCommunicate ( )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 11463 ];

	APlayerController_execCanCommunicate_Parms CanCommunicate_Parms;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.PlayerController.ClientMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )
// float                          MsgLifeTime                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 11459 ];

	APlayerController_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0xC );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );
	ClientMessage_Parms.MsgLifeTime = MsgLifeTime;

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// [0x010201C2] 
// Parameters infos:
// class AActor*                  SourceActor                    ( CPF_Parm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )
// class UAkEvent*                AkEventToPlay                  ( CPF_Parm )

void APlayerController::ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay )
{
	static UFunction* pFnClientPlayActorFaceFXAnim = NULL;

	if ( ! pFnClientPlayActorFaceFXAnim )
		pFnClientPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 11452 ];

	APlayerController_execClientPlayActorFaceFXAnim_Parms ClientPlayActorFaceFXAnim_Parms;
	ClientPlayActorFaceFXAnim_Parms.SourceActor = SourceActor;
	ClientPlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &ClientPlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	ClientPlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;
	ClientPlayActorFaceFXAnim_Parms.AkEventToPlay = AkEventToPlay;

	this->ProcessEvent ( pFnClientPlayActorFaceFXAnim, &ClientPlayActorFaceFXAnim_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientStopSound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          FadeOutTime                    ( CPF_Parm )

void APlayerController::eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime )
{
	static UFunction* pFnKismet_ClientStopSound = NULL;

	if ( ! pFnKismet_ClientStopSound )
		pFnKismet_ClientStopSound = (UFunction*) UObject::GObjObjects()->Data[ 11444 ];

	APlayerController_eventKismet_ClientStopSound_Parms Kismet_ClientStopSound_Parms;
	Kismet_ClientStopSound_Parms.ASound = ASound;
	Kismet_ClientStopSound_Parms.SourceActor = SourceActor;
	Kismet_ClientStopSound_Parms.FadeOutTime = FadeOutTime;

	this->ProcessEvent ( pFnKismet_ClientStopSound, &Kismet_ClientStopSound_Parms, NULL );
};

// Function Engine.PlayerController.Kismet_ClientPlaySound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// float                          VolumeMultiplier               ( CPF_Parm )
// float                          PitchMultiplier                ( CPF_Parm )
// float                          FadeInTime                     ( CPF_Parm )
// unsigned long                  bSuppressSubtitles             ( CPF_Parm )
// unsigned long                  bSuppressSpatialization        ( CPF_Parm )

void APlayerController::eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization )
{
	static UFunction* pFnKismet_ClientPlaySound = NULL;

	if ( ! pFnKismet_ClientPlaySound )
		pFnKismet_ClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 11427 ];

	APlayerController_eventKismet_ClientPlaySound_Parms Kismet_ClientPlaySound_Parms;
	Kismet_ClientPlaySound_Parms.ASound = ASound;
	Kismet_ClientPlaySound_Parms.SourceActor = SourceActor;
	Kismet_ClientPlaySound_Parms.VolumeMultiplier = VolumeMultiplier;
	Kismet_ClientPlaySound_Parms.PitchMultiplier = PitchMultiplier;
	Kismet_ClientPlaySound_Parms.FadeInTime = FadeInTime;
	Kismet_ClientPlaySound_Parms.bSuppressSubtitles = bSuppressSubtitles;
	Kismet_ClientPlaySound_Parms.bSuppressSpatialization = bSuppressSpatialization;

	this->ProcessEvent ( pFnKismet_ClientPlaySound, &Kismet_ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.IsClosestLocalPlayerToActor
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

bool APlayerController::IsClosestLocalPlayerToActor ( class AActor* TheActor )
{
	static UFunction* pFnIsClosestLocalPlayerToActor = NULL;

	if ( ! pFnIsClosestLocalPlayerToActor )
		pFnIsClosestLocalPlayerToActor = (UFunction*) UObject::GObjObjects()->Data[ 11422 ];

	APlayerController_execIsClosestLocalPlayerToActor_Parms IsClosestLocalPlayerToActor_Parms;
	IsClosestLocalPlayerToActor_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnIsClosestLocalPlayerToActor, &IsClosestLocalPlayerToActor_Parms, NULL );

	return IsClosestLocalPlayerToActor_Parms.ReturnValue;
};

// Function Engine.PlayerController.WwiseClientHearSound
// [0x01024D40] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UAkEvent*                ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bIsOccluded                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventWwiseClientHearSound ( class UAkEvent* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded )
{
	static UFunction* pFnWwiseClientHearSound = NULL;

	if ( ! pFnWwiseClientHearSound )
		pFnWwiseClientHearSound = (UFunction*) UObject::GObjObjects()->Data[ 11416 ];

	APlayerController_eventWwiseClientHearSound_Parms WwiseClientHearSound_Parms;
	WwiseClientHearSound_Parms.ASound = ASound;
	WwiseClientHearSound_Parms.SourceActor = SourceActor;
	memcpy ( &WwiseClientHearSound_Parms.SourceLocation, &SourceLocation, 0xC );
	WwiseClientHearSound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	WwiseClientHearSound_Parms.bIsOccluded = bIsOccluded;

	pFnWwiseClientHearSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWwiseClientHearSound, &WwiseClientHearSound_Parms, NULL );

	pFnWwiseClientHearSound->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientHearSound
// [0x01024942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bIsOccluded                    ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded )
{
	static UFunction* pFnClientHearSound = NULL;

	if ( ! pFnClientHearSound )
		pFnClientHearSound = (UFunction*) UObject::GObjObjects()->Data[ 11404 ];

	APlayerController_eventClientHearSound_Parms ClientHearSound_Parms;
	ClientHearSound_Parms.ASound = ASound;
	ClientHearSound_Parms.SourceActor = SourceActor;
	memcpy ( &ClientHearSound_Parms.SourceLocation, &SourceLocation, 0xC );
	ClientHearSound_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	ClientHearSound_Parms.bIsOccluded = bIsOccluded;

	this->ProcessEvent ( pFnClientHearSound, &ClientHearSound_Parms, NULL );
};

// Function Engine.PlayerController.GetPooledAudioComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USoundCue*               ASound                         ( CPF_Parm )
// class AActor*                  SourceActor                    ( CPF_Parm )
// unsigned long                  bStopWhenOwnerDestroyed        ( CPF_Parm )
// unsigned long                  bUseLocation                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SourceLocation                 ( CPF_OptionalParm | CPF_Parm )

class UAudioComponent* APlayerController::GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation )
{
	static UFunction* pFnGetPooledAudioComponent = NULL;

	if ( ! pFnGetPooledAudioComponent )
		pFnGetPooledAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 11397 ];

	APlayerController_execGetPooledAudioComponent_Parms GetPooledAudioComponent_Parms;
	GetPooledAudioComponent_Parms.ASound = ASound;
	GetPooledAudioComponent_Parms.SourceActor = SourceActor;
	GetPooledAudioComponent_Parms.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	GetPooledAudioComponent_Parms.bUseLocation = bUseLocation;
	memcpy ( &GetPooledAudioComponent_Parms.SourceLocation, &SourceLocation, 0xC );

	pFnGetPooledAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledAudioComponent, &GetPooledAudioComponent_Parms, NULL );

	pFnGetPooledAudioComponent->FunctionFlags |= 0x400;

	return GetPooledAudioComponent_Parms.ReturnValue;
};

// Function Engine.PlayerController.HearSoundFinished
// [0x00020102] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void APlayerController::HearSoundFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnHearSoundFinished = NULL;

	if ( ! pFnHearSoundFinished )
		pFnHearSoundFinished = (UFunction*) UObject::GObjObjects()->Data[ 11392 ];

	APlayerController_execHearSoundFinished_Parms HearSoundFinished_Parms;
	HearSoundFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnHearSoundFinished, &HearSoundFinished_Parms, NULL );
};

// Function Engine.PlayerController.ClientPlaySound
// [0x01020942] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               ASound                         ( CPF_Parm )

void APlayerController::eventClientPlaySound ( class USoundCue* ASound )
{
	static UFunction* pFnClientPlaySound = NULL;

	if ( ! pFnClientPlaySound )
		pFnClientPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 11390 ];

	APlayerController_eventClientPlaySound_Parms ClientPlaySound_Parms;
	ClientPlaySound_Parms.ASound = ASound;

	this->ProcessEvent ( pFnClientPlaySound, &ClientPlaySound_Parms, NULL );
};

// Function Engine.PlayerController.ReceiveLocalizedMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = (UFunction*) UObject::GObjObjects()->Data[ 11384 ];

	APlayerController_eventReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;
	ReceiveLocalizedMessage_Parms.Message = Message;
	ReceiveLocalizedMessage_Parms.Switch = Switch;
	ReceiveLocalizedMessage_Parms.RelatedPRI = RelatedPRI;
	ReceiveLocalizedMessage_Parms.RelatedPRI01 = RelatedPRI01;
	ReceiveLocalizedMessage_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function Engine.PlayerController.HandlePickup
// [0x00020002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void APlayerController::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 11382 ];

	APlayerController_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetSecondaryHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )

void APlayerController::ClientSetSecondaryHUD ( class UClass* newHUDType )
{
	static UFunction* pFnClientSetSecondaryHUD = NULL;

	if ( ! pFnClientSetSecondaryHUD )
		pFnClientSetSecondaryHUD = (UFunction*) UObject::GObjObjects()->Data[ 11379 ];

	APlayerController_execClientSetSecondaryHUD_Parms ClientSetSecondaryHUD_Parms;
	ClientSetSecondaryHUD_Parms.newHUDType = newHUDType;

	this->ProcessEvent ( pFnClientSetSecondaryHUD, &ClientSetSecondaryHUD_Parms, NULL );
};

// Function Engine.PlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:
// class UClass*                  newHUDType                     ( CPF_Parm )

void APlayerController::ClientSetHUD ( class UClass* newHUDType )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = (UFunction*) UObject::GObjObjects()->Data[ 11377 ];

	APlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;
	ClientSetHUD_Parms.newHUDType = newHUDType;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function Engine.PlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::PawnDied ( class APawn* P )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 11375 ];

	APlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.P = P;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function Engine.PlayerController.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 11374 ];

	APlayerController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function Engine.PlayerController.ServerAcknowledgePossession
// [0x002200C2] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::ServerAcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnServerAcknowledgePossession = NULL;

	if ( ! pFnServerAcknowledgePossession )
		pFnServerAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 11372 ];

	APlayerController_execServerAcknowledgePossession_Parms ServerAcknowledgePossession_Parms;
	ServerAcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnServerAcknowledgePossession, &ServerAcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.AcknowledgePossession
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void APlayerController::AcknowledgePossession ( class APawn* P )
{
	static UFunction* pFnAcknowledgePossession = NULL;

	if ( ! pFnAcknowledgePossession )
		pFnAcknowledgePossession = (UFunction*) UObject::GObjObjects()->Data[ 11367 ];

	APlayerController_execAcknowledgePossession_Parms AcknowledgePossession_Parms;
	AcknowledgePossession_Parms.P = P;

	this->ProcessEvent ( pFnAcknowledgePossession, &AcknowledgePossession_Parms, NULL );
};

// Function Engine.PlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APlayerController::eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 11358 ];

	APlayerController_eventPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function Engine.PlayerController.GivePawn
// [0x010201C2] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void APlayerController::GivePawn ( class APawn* NewPawn )
{
	static UFunction* pFnGivePawn = NULL;

	if ( ! pFnGivePawn )
		pFnGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 11356 ];

	APlayerController_execGivePawn_Parms GivePawn_Parms;
	GivePawn_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnGivePawn, &GivePawn_Parms, NULL );
};

// Function Engine.PlayerController.AskForPawn
// [0x002200C2] 
// Parameters infos:

void APlayerController::AskForPawn ( )
{
	static UFunction* pFnAskForPawn = NULL;

	if ( ! pFnAskForPawn )
		pFnAskForPawn = (UFunction*) UObject::GObjObjects()->Data[ 11354 ];

	APlayerController_execAskForPawn_Parms AskForPawn_Parms;

	this->ProcessEvent ( pFnAskForPawn, &AskForPawn_Parms, NULL );
};

// Function Engine.PlayerController.ClientGotoState
// [0x010241C2] 
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// struct FName                   NewLabel                       ( CPF_OptionalParm | CPF_Parm )

void APlayerController::ClientGotoState ( struct FName NewState, struct FName NewLabel )
{
	static UFunction* pFnClientGotoState = NULL;

	if ( ! pFnClientGotoState )
		pFnClientGotoState = (UFunction*) UObject::GObjObjects()->Data[ 11351 ];

	APlayerController_execClientGotoState_Parms ClientGotoState_Parms;
	memcpy ( &ClientGotoState_Parms.NewState, &NewState, 0x8 );
	memcpy ( &ClientGotoState_Parms.NewLabel, &NewLabel, 0x8 );

	this->ProcessEvent ( pFnClientGotoState, &ClientGotoState_Parms, NULL );
};

// Function Engine.PlayerController.SetTiltActive
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetTiltActive ( unsigned long bActive )
{
	static UFunction* pFnSetTiltActive = NULL;

	if ( ! pFnSetTiltActive )
		pFnSetTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 11349 ];

	APlayerController_execSetTiltActive_Parms SetTiltActive_Parms;
	SetTiltActive_Parms.bActive = bActive;

	this->ProcessEvent ( pFnSetTiltActive, &SetTiltActive_Parms, NULL );
};

// Function Engine.PlayerController.IsMouseAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsMouseAvailable ( )
{
	static UFunction* pFnIsMouseAvailable = NULL;

	if ( ! pFnIsMouseAvailable )
		pFnIsMouseAvailable = (UFunction*) UObject::GObjObjects()->Data[ 11347 ];

	APlayerController_execIsMouseAvailable_Parms IsMouseAvailable_Parms;

	pFnIsMouseAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMouseAvailable, &IsMouseAvailable_Parms, NULL );

	pFnIsMouseAvailable->FunctionFlags |= 0x400;

	return IsMouseAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsKeyboardAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsKeyboardAvailable ( )
{
	static UFunction* pFnIsKeyboardAvailable = NULL;

	if ( ! pFnIsKeyboardAvailable )
		pFnIsKeyboardAvailable = (UFunction*) UObject::GObjObjects()->Data[ 11345 ];

	APlayerController_execIsKeyboardAvailable_Parms IsKeyboardAvailable_Parms;

	pFnIsKeyboardAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsKeyboardAvailable, &IsKeyboardAvailable_Parms, NULL );

	pFnIsKeyboardAvailable->FunctionFlags |= 0x400;

	return IsKeyboardAvailable_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetUseTiltForwardAndBack
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetUseTiltForwardAndBack ( unsigned long bActive )
{
	static UFunction* pFnSetUseTiltForwardAndBack = NULL;

	if ( ! pFnSetUseTiltForwardAndBack )
		pFnSetUseTiltForwardAndBack = (UFunction*) UObject::GObjObjects()->Data[ 11343 ];

	APlayerController_execSetUseTiltForwardAndBack_Parms SetUseTiltForwardAndBack_Parms;
	SetUseTiltForwardAndBack_Parms.bActive = bActive;

	pFnSetUseTiltForwardAndBack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseTiltForwardAndBack, &SetUseTiltForwardAndBack_Parms, NULL );

	pFnSetUseTiltForwardAndBack->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetOnlyUseControllerTiltInput ( unsigned long bActive )
{
	static UFunction* pFnSetOnlyUseControllerTiltInput = NULL;

	if ( ! pFnSetOnlyUseControllerTiltInput )
		pFnSetOnlyUseControllerTiltInput = (UFunction*) UObject::GObjObjects()->Data[ 11341 ];

	APlayerController_execSetOnlyUseControllerTiltInput_Parms SetOnlyUseControllerTiltInput_Parms;
	SetOnlyUseControllerTiltInput_Parms.bActive = bActive;

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOnlyUseControllerTiltInput, &SetOnlyUseControllerTiltInput_Parms, NULL );

	pFnSetOnlyUseControllerTiltInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bActive                        ( CPF_Parm )

void APlayerController::SetControllerTiltActive ( unsigned long bActive )
{
	static UFunction* pFnSetControllerTiltActive = NULL;

	if ( ! pFnSetControllerTiltActive )
		pFnSetControllerTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 11339 ];

	APlayerController_execSetControllerTiltActive_Parms SetControllerTiltActive_Parms;
	SetControllerTiltActive_Parms.bActive = bActive;

	pFnSetControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetControllerTiltActive, &SetControllerTiltActive_Parms, NULL );

	pFnSetControllerTiltActive->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.IsControllerTiltActive
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::IsControllerTiltActive ( )
{
	static UFunction* pFnIsControllerTiltActive = NULL;

	if ( ! pFnIsControllerTiltActive )
		pFnIsControllerTiltActive = (UFunction*) UObject::GObjObjects()->Data[ 11337 ];

	APlayerController_execIsControllerTiltActive_Parms IsControllerTiltActive_Parms;

	pFnIsControllerTiltActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsControllerTiltActive, &IsControllerTiltActive_Parms, NULL );

	pFnIsControllerTiltActive->FunctionFlags |= 0x400;

	return IsControllerTiltActive_Parms.ReturnValue;
};

// Function Engine.PlayerController.SetRumbleScale
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ScaleBy                        ( CPF_Parm )

void APlayerController::SetRumbleScale ( float ScaleBy )
{
	static UFunction* pFnSetRumbleScale = NULL;

	if ( ! pFnSetRumbleScale )
		pFnSetRumbleScale = (UFunction*) UObject::GObjObjects()->Data[ 11334 ];

	APlayerController_execSetRumbleScale_Parms SetRumbleScale_Parms;
	SetRumbleScale_Parms.ScaleBy = ScaleBy;

	this->ProcessEvent ( pFnSetRumbleScale, &SetRumbleScale_Parms, NULL );
};

// Function Engine.PlayerController.ReloadProfileSettings
// [0x00020102] 
// Parameters infos:

void APlayerController::ReloadProfileSettings ( )
{
	static UFunction* pFnReloadProfileSettings = NULL;

	if ( ! pFnReloadProfileSettings )
		pFnReloadProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 11332 ];

	APlayerController_execReloadProfileSettings_Parms ReloadProfileSettings_Parms;

	this->ProcessEvent ( pFnReloadProfileSettings, &ReloadProfileSettings_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterStandardPlayerDataStores
// [0x00020102] 
// Parameters infos:

void APlayerController::UnregisterStandardPlayerDataStores ( )
{
	static UFunction* pFnUnregisterStandardPlayerDataStores = NULL;

	if ( ! pFnUnregisterStandardPlayerDataStores )
		pFnUnregisterStandardPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 11323 ];

	APlayerController_execUnregisterStandardPlayerDataStores_Parms UnregisterStandardPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterStandardPlayerDataStores, &UnregisterStandardPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.UnregisterPlayerDataStores
// [0x00020102] 
// Parameters infos:

void APlayerController::UnregisterPlayerDataStores ( )
{
	static UFunction* pFnUnregisterPlayerDataStores = NULL;

	if ( ! pFnUnregisterPlayerDataStores )
		pFnUnregisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 11316 ];

	APlayerController_execUnregisterPlayerDataStores_Parms UnregisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterStandardPlayerDataStores
// [0x00080102] 
// Parameters infos:

void APlayerController::RegisterStandardPlayerDataStores ( )
{
	static UFunction* pFnRegisterStandardPlayerDataStores = NULL;

	if ( ! pFnRegisterStandardPlayerDataStores )
		pFnRegisterStandardPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 11305 ];

	APlayerController_execRegisterStandardPlayerDataStores_Parms RegisterStandardPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterStandardPlayerDataStores, &RegisterStandardPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterCustomPlayerDataStores
// [0x00080102] 
// Parameters infos:

void APlayerController::RegisterCustomPlayerDataStores ( )
{
	static UFunction* pFnRegisterCustomPlayerDataStores = NULL;

	if ( ! pFnRegisterCustomPlayerDataStores )
		pFnRegisterCustomPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 11289 ];

	APlayerController_execRegisterCustomPlayerDataStores_Parms RegisterCustomPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterCustomPlayerDataStores, &RegisterCustomPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.RegisterPlayerDataStores
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void APlayerController::RegisterPlayerDataStores ( )
{
	static UFunction* pFnRegisterPlayerDataStores = NULL;

	if ( ! pFnRegisterPlayerDataStores )
		pFnRegisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 11127 ];

	APlayerController_execRegisterPlayerDataStores_Parms RegisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterPlayerDataStores, &RegisterPlayerDataStores_Parms, NULL );
};

// Function Engine.PlayerController.ClientInitializeDataStores
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientInitializeDataStores ( )
{
	static UFunction* pFnClientInitializeDataStores = NULL;

	if ( ! pFnClientInitializeDataStores )
		pFnClientInitializeDataStores = (UFunction*) UObject::GObjObjects()->Data[ 11288 ];

	APlayerController_execClientInitializeDataStores_Parms ClientInitializeDataStores_Parms;

	this->ProcessEvent ( pFnClientInitializeDataStores, &ClientInitializeDataStores_Parms, NULL );
};

// Function Engine.PlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 11276 ];

	APlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function Engine.PlayerController.GetOnlineSubsystem
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UOnlineSubsystem*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineSubsystem* APlayerController::GetOnlineSubsystem ( )
{
	static UFunction* pFnGetOnlineSubsystem = NULL;

	if ( ! pFnGetOnlineSubsystem )
		pFnGetOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 11274 ];

	APlayerController_execGetOnlineSubsystem_Parms GetOnlineSubsystem_Parms;

	this->ProcessEvent ( pFnGetOnlineSubsystem, &GetOnlineSubsystem_Parms, NULL );

	return GetOnlineSubsystem_Parms.ReturnValue;
};

// Function Engine.PlayerController.PostControllerIdChange
// [0x00820002] 
// Parameters infos:

void APlayerController::PostControllerIdChange ( )
{
	static UFunction* pFnPostControllerIdChange = NULL;

	if ( ! pFnPostControllerIdChange )
		pFnPostControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 11270 ];

	APlayerController_execPostControllerIdChange_Parms PostControllerIdChange_Parms;

	this->ProcessEvent ( pFnPostControllerIdChange, &PostControllerIdChange_Parms, NULL );
};

// Function Engine.PlayerController.PreControllerIdChange
// [0x00020002] 
// Parameters infos:

void APlayerController::PreControllerIdChange ( )
{
	static UFunction* pFnPreControllerIdChange = NULL;

	if ( ! pFnPreControllerIdChange )
		pFnPreControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 11268 ];

	APlayerController_execPreControllerIdChange_Parms PreControllerIdChange_Parms;

	this->ProcessEvent ( pFnPreControllerIdChange, &PreControllerIdChange_Parms, NULL );
};

// Function Engine.PlayerController.CleanOutSavedMoves
// [0x00020002] 
// Parameters infos:

void APlayerController::CleanOutSavedMoves ( )
{
	static UFunction* pFnCleanOutSavedMoves = NULL;

	if ( ! pFnCleanOutSavedMoves )
		pFnCleanOutSavedMoves = (UFunction*) UObject::GObjObjects()->Data[ 11265 ];

	APlayerController_execCleanOutSavedMoves_Parms CleanOutSavedMoves_Parms;

	this->ProcessEvent ( pFnCleanOutSavedMoves, &CleanOutSavedMoves_Parms, NULL );
};

// Function Engine.PlayerController.ClientReset
// [0x010201C2] 
// Parameters infos:

void APlayerController::ClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = (UFunction*) UObject::GObjObjects()->Data[ 11264 ];

	APlayerController_execClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function Engine.PlayerController.Reset
// [0x00020002] 
// Parameters infos:

void APlayerController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 11261 ];

	APlayerController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerController.SpawnDefaultHUD
// [0x00020002] 
// Parameters infos:

void APlayerController::SpawnDefaultHUD ( )
{
	static UFunction* pFnSpawnDefaultHUD = NULL;

	if ( ! pFnSpawnDefaultHUD )
		pFnSpawnDefaultHUD = (UFunction*) UObject::GObjObjects()->Data[ 11259 ];

	APlayerController_execSpawnDefaultHUD_Parms SpawnDefaultHUD_Parms;

	this->ProcessEvent ( pFnSpawnDefaultHUD, &SpawnDefaultHUD_Parms, NULL );
};

// Function Engine.PlayerController.EnableCheats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void APlayerController::EnableCheats ( )
{
	static UFunction* pFnEnableCheats = NULL;

	if ( ! pFnEnableCheats )
		pFnEnableCheats = (UFunction*) UObject::GObjObjects()->Data[ 11258 ];

	APlayerController_execEnableCheats_Parms EnableCheats_Parms;

	this->ProcessEvent ( pFnEnableCheats, &EnableCheats_Parms, NULL );
};

// Function Engine.PlayerController.AddCheats
// [0x00024002] 
// Parameters infos:
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void APlayerController::AddCheats ( unsigned long bForce )
{
	static UFunction* pFnAddCheats = NULL;

	if ( ! pFnAddCheats )
		pFnAddCheats = (UFunction*) UObject::GObjObjects()->Data[ 11252 ];

	APlayerController_execAddCheats_Parms AddCheats_Parms;
	AddCheats_Parms.bForce = bForce;

	this->ProcessEvent ( pFnAddCheats, &AddCheats_Parms, NULL );
};

// Function Engine.PlayerController.KickWarning
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventKickWarning ( )
{
	static UFunction* pFnKickWarning = NULL;

	if ( ! pFnKickWarning )
		pFnKickWarning = (UFunction*) UObject::GObjObjects()->Data[ 11250 ];

	APlayerController_eventKickWarning_Parms KickWarning_Parms;

	this->ProcessEvent ( pFnKickWarning, &KickWarning_Parms, NULL );
};

// Function Engine.PlayerController.ServerGivePawn
// [0x00020002] 
// Parameters infos:

void APlayerController::ServerGivePawn ( )
{
	static UFunction* pFnServerGivePawn = NULL;

	if ( ! pFnServerGivePawn )
		pFnServerGivePawn = (UFunction*) UObject::GObjObjects()->Data[ 11249 ];

	APlayerController_execServerGivePawn_Parms ServerGivePawn_Parms;

	this->ProcessEvent ( pFnServerGivePawn, &ServerGivePawn_Parms, NULL );
};

// Function Engine.PlayerController.ServerShortTimeout
// [0x002200C2] 
// Parameters infos:

void APlayerController::ServerShortTimeout ( )
{
	static UFunction* pFnServerShortTimeout = NULL;

	if ( ! pFnServerShortTimeout )
		pFnServerShortTimeout = (UFunction*) UObject::GObjObjects()->Data[ 11245 ];

	APlayerController_execServerShortTimeout_Parms ServerShortTimeout_Parms;

	this->ProcessEvent ( pFnServerShortTimeout, &ServerShortTimeout_Parms, NULL );
};

// Function Engine.PlayerController.ResetTimeMargin
// [0x00020002] 
// Parameters infos:

void APlayerController::ResetTimeMargin ( )
{
	static UFunction* pFnResetTimeMargin = NULL;

	if ( ! pFnResetTimeMargin )
		pFnResetTimeMargin = (UFunction*) UObject::GObjObjects()->Data[ 11243 ];

	APlayerController_execResetTimeMargin_Parms ResetTimeMargin_Parms;

	this->ProcessEvent ( pFnResetTimeMargin, &ResetTimeMargin_Parms, NULL );
};

// Function Engine.PlayerController.PreRender
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void APlayerController::eventPreRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPreRender = NULL;

	if ( ! pFnPreRender )
		pFnPreRender = (UFunction*) UObject::GObjObjects()->Data[ 11241 ];

	APlayerController_eventPreRender_Parms PreRender_Parms;
	PreRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPreRender, &PreRender_Parms, NULL );
};

// Function Engine.PlayerController.OnJoinMigratedGame
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnJoinMigratedGame ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinMigratedGame = NULL;

	if ( ! pFnOnJoinMigratedGame )
		pFnOnJoinMigratedGame = (UFunction*) UObject::GObjObjects()->Data[ 11238 ];

	APlayerController_execOnJoinMigratedGame_Parms OnJoinMigratedGame_Parms;
	memcpy ( &OnJoinMigratedGame_Parms.SessionName, &SessionName, 0x8 );
	OnJoinMigratedGame_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinMigratedGame, &OnJoinMigratedGame_Parms, NULL );
};

// Function Engine.PlayerController.PeerDesignatedAsClient
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )

void APlayerController::PeerDesignatedAsClient ( struct FName SessionName )
{
	static UFunction* pFnPeerDesignatedAsClient = NULL;

	if ( ! pFnPeerDesignatedAsClient )
		pFnPeerDesignatedAsClient = (UFunction*) UObject::GObjObjects()->Data[ 11233 ];

	APlayerController_execPeerDesignatedAsClient_Parms PeerDesignatedAsClient_Parms;
	memcpy ( &PeerDesignatedAsClient_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnPeerDesignatedAsClient, &PeerDesignatedAsClient_Parms, NULL );
};

// Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnUnregisterPlayerCompleteForJoinMigrate ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerCompleteForJoinMigrate = NULL;

	if ( ! pFnOnUnregisterPlayerCompleteForJoinMigrate )
		pFnOnUnregisterPlayerCompleteForJoinMigrate = (UFunction*) UObject::GObjObjects()->Data[ 11229 ];

	APlayerController_execOnUnregisterPlayerCompleteForJoinMigrate_Parms OnUnregisterPlayerCompleteForJoinMigrate_Parms;
	memcpy ( &OnUnregisterPlayerCompleteForJoinMigrate_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnUnregisterPlayerCompleteForJoinMigrate_Parms.PlayerID, &PlayerID, 0x48 );
	OnUnregisterPlayerCompleteForJoinMigrate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerCompleteForJoinMigrate, &OnUnregisterPlayerCompleteForJoinMigrate_Parms, NULL );
};

// Function Engine.PlayerController.PeerReceivedMigratedSession
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            FromPeerNetId                  ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

void APlayerController::eventPeerReceivedMigratedSession ( struct FUniqueNetId FromPeerNetId, struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnPeerReceivedMigratedSession = NULL;

	if ( ! pFnPeerReceivedMigratedSession )
		pFnPeerReceivedMigratedSession = (UFunction*) UObject::GObjObjects()->Data[ 11217 ];

	APlayerController_eventPeerReceivedMigratedSession_Parms PeerReceivedMigratedSession_Parms;
	memcpy ( &PeerReceivedMigratedSession_Parms.FromPeerNetId, &FromPeerNetId, 0x48 );
	memcpy ( &PeerReceivedMigratedSession_Parms.SessionName, &SessionName, 0x8 );
	PeerReceivedMigratedSession_Parms.SearchClass = SearchClass;
	memcpy ( &PeerReceivedMigratedSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnPeerReceivedMigratedSession, &PeerReceivedMigratedSession_Parms, NULL );
};

// Function Engine.PlayerController.TellPeerToTravelToSession
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FUniqueNetId            ToPeerNetId                    ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UClass*                  SearchClass                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )
// int                            PlatformSpecificInfoSize       ( CPF_Parm )

void APlayerController::TellPeerToTravelToSession ( struct FUniqueNetId ToPeerNetId, struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo, int PlatformSpecificInfoSize )
{
	static UFunction* pFnTellPeerToTravelToSession = NULL;

	if ( ! pFnTellPeerToTravelToSession )
		pFnTellPeerToTravelToSession = (UFunction*) UObject::GObjObjects()->Data[ 11211 ];

	APlayerController_execTellPeerToTravelToSession_Parms TellPeerToTravelToSession_Parms;
	memcpy ( &TellPeerToTravelToSession_Parms.ToPeerNetId, &ToPeerNetId, 0x48 );
	memcpy ( &TellPeerToTravelToSession_Parms.SessionName, &SessionName, 0x8 );
	TellPeerToTravelToSession_Parms.SearchClass = SearchClass;
	memcpy ( &TellPeerToTravelToSession_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );
	TellPeerToTravelToSession_Parms.PlatformSpecificInfoSize = PlatformSpecificInfoSize;

	pFnTellPeerToTravelToSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTellPeerToTravelToSession, &TellPeerToTravelToSession_Parms, NULL );

	pFnTellPeerToTravelToSession->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.TellPeerToTravel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FUniqueNetId            ToPeerNetId                    ( CPF_Parm )

void APlayerController::TellPeerToTravel ( struct FUniqueNetId ToPeerNetId )
{
	static UFunction* pFnTellPeerToTravel = NULL;

	if ( ! pFnTellPeerToTravel )
		pFnTellPeerToTravel = (UFunction*) UObject::GObjObjects()->Data[ 11209 ];

	APlayerController_execTellPeerToTravel_Parms TellPeerToTravel_Parms;
	memcpy ( &TellPeerToTravel_Parms.ToPeerNetId, &ToPeerNetId, 0x48 );

	pFnTellPeerToTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTellPeerToTravel, &TellPeerToTravel_Parms, NULL );

	pFnTellPeerToTravel->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.PeerTravelAsHost
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          TravelCountdownTimer           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::PeerTravelAsHost ( float TravelCountdownTimer, struct FString URL )
{
	static UFunction* pFnPeerTravelAsHost = NULL;

	if ( ! pFnPeerTravelAsHost )
		pFnPeerTravelAsHost = (UFunction*) UObject::GObjObjects()->Data[ 11206 ];

	APlayerController_execPeerTravelAsHost_Parms PeerTravelAsHost_Parms;
	PeerTravelAsHost_Parms.TravelCountdownTimer = TravelCountdownTimer;
	memcpy ( &PeerTravelAsHost_Parms.URL, &URL, 0xC );

	pFnPeerTravelAsHost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPeerTravelAsHost, &PeerTravelAsHost_Parms, NULL );

	pFnPeerTravelAsHost->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.GetNewPeerHostURL
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetNewPeerHostURL ( )
{
	static UFunction* pFnGetNewPeerHostURL = NULL;

	if ( ! pFnGetNewPeerHostURL )
		pFnGetNewPeerHostURL = (UFunction*) UObject::GObjObjects()->Data[ 11200 ];

	APlayerController_execGetNewPeerHostURL_Parms GetNewPeerHostURL_Parms;

	this->ProcessEvent ( pFnGetNewPeerHostURL, &GetNewPeerHostURL_Parms, NULL );

	return GetNewPeerHostURL_Parms.ReturnValue;
};

// Function Engine.PlayerController.PeerDesignatedAsHost
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )

void APlayerController::PeerDesignatedAsHost ( struct FName SessionName )
{
	static UFunction* pFnPeerDesignatedAsHost = NULL;

	if ( ! pFnPeerDesignatedAsHost )
		pFnPeerDesignatedAsHost = (UFunction*) UObject::GObjObjects()->Data[ 11194 ];

	APlayerController_execPeerDesignatedAsHost_Parms PeerDesignatedAsHost_Parms;
	memcpy ( &PeerDesignatedAsHost_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnPeerDesignatedAsHost, &PeerDesignatedAsHost_Parms, NULL );
};

// Function Engine.PlayerController.GetCurrentSearchClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* APlayerController::GetCurrentSearchClass ( )
{
	static UFunction* pFnGetCurrentSearchClass = NULL;

	if ( ! pFnGetCurrentSearchClass )
		pFnGetCurrentSearchClass = (UFunction*) UObject::GObjObjects()->Data[ 11192 ];

	APlayerController_execGetCurrentSearchClass_Parms GetCurrentSearchClass_Parms;

	this->ProcessEvent ( pFnGetCurrentSearchClass, &GetCurrentSearchClass_Parms, NULL );

	return GetCurrentSearchClass_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnHostMigratedOnlineGame
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnHostMigratedOnlineGame ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnHostMigratedOnlineGame = NULL;

	if ( ! pFnOnHostMigratedOnlineGame )
		pFnOnHostMigratedOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11189 ];

	APlayerController_execOnHostMigratedOnlineGame_Parms OnHostMigratedOnlineGame_Parms;
	memcpy ( &OnHostMigratedOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	OnHostMigratedOnlineGame_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnHostMigratedOnlineGame, &OnHostMigratedOnlineGame_Parms, NULL );
};

// Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate
// [0x00020002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnUnregisterPlayerCompleteForHostMigrate ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerCompleteForHostMigrate = NULL;

	if ( ! pFnOnUnregisterPlayerCompleteForHostMigrate )
		pFnOnUnregisterPlayerCompleteForHostMigrate = (UFunction*) UObject::GObjObjects()->Data[ 11185 ];

	APlayerController_execOnUnregisterPlayerCompleteForHostMigrate_Parms OnUnregisterPlayerCompleteForHostMigrate_Parms;
	memcpy ( &OnUnregisterPlayerCompleteForHostMigrate_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnUnregisterPlayerCompleteForHostMigrate_Parms.PlayerID, &PlayerID, 0x48 );
	OnUnregisterPlayerCompleteForHostMigrate_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerCompleteForHostMigrate, &OnUnregisterPlayerCompleteForHostMigrate_Parms, NULL );
};

// Function Engine.PlayerController.RemoveMissingPeersFromSession
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FScriptDelegate         UnregisterDelegate             ( CPF_Parm | CPF_NeedCtorLink )

bool APlayerController::RemoveMissingPeersFromSession ( struct FName SessionName, struct FScriptDelegate UnregisterDelegate )
{
	static UFunction* pFnRemoveMissingPeersFromSession = NULL;

	if ( ! pFnRemoveMissingPeersFromSession )
		pFnRemoveMissingPeersFromSession = (UFunction*) UObject::GObjObjects()->Data[ 11172 ];

	APlayerController_execRemoveMissingPeersFromSession_Parms RemoveMissingPeersFromSession_Parms;
	memcpy ( &RemoveMissingPeersFromSession_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &RemoveMissingPeersFromSession_Parms.UnregisterDelegate, &UnregisterDelegate, 0x10 );

	this->ProcessEvent ( pFnRemoveMissingPeersFromSession, &RemoveMissingPeersFromSession_Parms, NULL );

	return RemoveMissingPeersFromSession_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPRIFromNetId
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

class APlayerReplicationInfo* APlayerController::GetPRIFromNetId ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnGetPRIFromNetId = NULL;

	if ( ! pFnGetPRIFromNetId )
		pFnGetPRIFromNetId = (UFunction*) UObject::GObjObjects()->Data[ 11168 ];

	APlayerController_execGetPRIFromNetId_Parms GetPRIFromNetId_Parms;
	memcpy ( &GetPRIFromNetId_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnGetPRIFromNetId, &GetPRIFromNetId_Parms, NULL );

	return GetPRIFromNetId_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnMissingPeersUnregistered
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void APlayerController::OnMissingPeersUnregistered ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnMissingPeersUnregistered = NULL;

	if ( ! pFnOnMissingPeersUnregistered )
		pFnOnMissingPeersUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 11164 ];

	APlayerController_execOnMissingPeersUnregistered_Parms OnMissingPeersUnregistered_Parms;
	memcpy ( &OnMissingPeersUnregistered_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnMissingPeersUnregistered_Parms.PlayerID, &PlayerID, 0x48 );
	OnMissingPeersUnregistered_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnMissingPeersUnregistered, &OnMissingPeersUnregistered_Parms, NULL );
};

// Function Engine.PlayerController.GetRegisteredPlayersInSession
// [0x00420000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  OutRegisteredPlayers           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APlayerController::GetRegisteredPlayersInSession ( struct FName SessionName, TArray< struct FUniqueNetId >* OutRegisteredPlayers )
{
	static UFunction* pFnGetRegisteredPlayersInSession = NULL;

	if ( ! pFnGetRegisteredPlayersInSession )
		pFnGetRegisteredPlayersInSession = (UFunction*) UObject::GObjObjects()->Data[ 11160 ];

	APlayerController_execGetRegisteredPlayersInSession_Parms GetRegisteredPlayersInSession_Parms;
	memcpy ( &GetRegisteredPlayersInSession_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetRegisteredPlayersInSession, &GetRegisteredPlayersInSession_Parms, NULL );

	if ( OutRegisteredPlayers )
		memcpy ( OutRegisteredPlayers, &GetRegisteredPlayersInSession_Parms.OutRegisteredPlayers, 0xC );
};

// Function Engine.PlayerController.NotifyHostMigrationStarted
// [0x00020100] 
// Parameters infos:

void APlayerController::NotifyHostMigrationStarted ( )
{
	static UFunction* pFnNotifyHostMigrationStarted = NULL;

	if ( ! pFnNotifyHostMigrationStarted )
		pFnNotifyHostMigrationStarted = (UFunction*) UObject::GObjObjects()->Data[ 11159 ];

	APlayerController_execNotifyHostMigrationStarted_Parms NotifyHostMigrationStarted_Parms;

	this->ProcessEvent ( pFnNotifyHostMigrationStarted, &NotifyHostMigrationStarted_Parms, NULL );
};

// Function Engine.PlayerController.MigrateNewHost
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::eventMigrateNewHost ( )
{
	static UFunction* pFnMigrateNewHost = NULL;

	if ( ! pFnMigrateNewHost )
		pFnMigrateNewHost = (UFunction*) UObject::GObjObjects()->Data[ 11154 ];

	APlayerController_eventMigrateNewHost_Parms MigrateNewHost_Parms;

	this->ProcessEvent ( pFnMigrateNewHost, &MigrateNewHost_Parms, NULL );

	return MigrateNewHost_Parms.ReturnValue;
};

// Function Engine.PlayerController.IsBestHostPeer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PeerNetId                      ( CPF_Parm )

bool APlayerController::IsBestHostPeer ( struct FUniqueNetId PeerNetId )
{
	static UFunction* pFnIsBestHostPeer = NULL;

	if ( ! pFnIsBestHostPeer )
		pFnIsBestHostPeer = (UFunction*) UObject::GObjObjects()->Data[ 11149 ];

	APlayerController_execIsBestHostPeer_Parms IsBestHostPeer_Parms;
	memcpy ( &IsBestHostPeer_Parms.PeerNetId, &PeerNetId, 0x48 );

	this->ProcessEvent ( pFnIsBestHostPeer, &IsBestHostPeer_Parms, NULL );

	return IsBestHostPeer_Parms.ReturnValue;
};

// Function Engine.PlayerController.NotifyPeerDisconnectHost
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PeerNetId                      ( CPF_Parm )

void APlayerController::eventNotifyPeerDisconnectHost ( struct FUniqueNetId PeerNetId )
{
	static UFunction* pFnNotifyPeerDisconnectHost = NULL;

	if ( ! pFnNotifyPeerDisconnectHost )
		pFnNotifyPeerDisconnectHost = (UFunction*) UObject::GObjObjects()->Data[ 11145 ];

	APlayerController_eventNotifyPeerDisconnectHost_Parms NotifyPeerDisconnectHost_Parms;
	memcpy ( &NotifyPeerDisconnectHost_Parms.PeerNetId, &PeerNetId, 0x48 );

	this->ProcessEvent ( pFnNotifyPeerDisconnectHost, &NotifyPeerDisconnectHost_Parms, NULL );
};

// Function Engine.PlayerController.ClientUpdateBestNextHosts
// [0x010201C2] 
// Parameters infos:
// struct FUniqueNetId            SortedNextHosts                ( CPF_Parm )
// unsigned char                  NumEntries                     ( CPF_Parm )

void APlayerController::ClientUpdateBestNextHosts ( struct FUniqueNetId* SortedNextHosts, unsigned char NumEntries )
{
	static UFunction* pFnClientUpdateBestNextHosts = NULL;

	if ( ! pFnClientUpdateBestNextHosts )
		pFnClientUpdateBestNextHosts = (UFunction*) UObject::GObjObjects()->Data[ 11140 ];

	APlayerController_execClientUpdateBestNextHosts_Parms ClientUpdateBestNextHosts_Parms;
	memcpy ( &ClientUpdateBestNextHosts_Parms.SortedNextHosts, &SortedNextHosts, 0x2D0 );
	ClientUpdateBestNextHosts_Parms.NumEntries = NumEntries;

	this->ProcessEvent ( pFnClientUpdateBestNextHosts, &ClientUpdateBestNextHosts_Parms, NULL );
};

// Function Engine.PlayerController.RemovePeer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PeerNetId                      ( CPF_Parm )

void APlayerController::eventRemovePeer ( struct FUniqueNetId PeerNetId )
{
	static UFunction* pFnRemovePeer = NULL;

	if ( ! pFnRemovePeer )
		pFnRemovePeer = (UFunction*) UObject::GObjObjects()->Data[ 11138 ];

	APlayerController_eventRemovePeer_Parms RemovePeer_Parms;
	memcpy ( &RemovePeer_Parms.PeerNetId, &PeerNetId, 0x48 );

	this->ProcessEvent ( pFnRemovePeer, &RemovePeer_Parms, NULL );
};

// Function Engine.PlayerController.AddPeer
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            PeerNetId                      ( CPF_Parm )
// unsigned char                  NatType                        ( CPF_Parm )

void APlayerController::eventAddPeer ( struct FUniqueNetId PeerNetId, unsigned char NatType )
{
	static UFunction* pFnAddPeer = NULL;

	if ( ! pFnAddPeer )
		pFnAddPeer = (UFunction*) UObject::GObjObjects()->Data[ 11135 ];

	APlayerController_eventAddPeer_Parms AddPeer_Parms;
	memcpy ( &AddPeer_Parms.PeerNetId, &PeerNetId, 0x48 );
	AddPeer_Parms.NatType = NatType;

	this->ProcessEvent ( pFnAddPeer, &AddPeer_Parms, NULL );
};

// Function Engine.PlayerController.FindConnectedPeerIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PeerNetId                      ( CPF_Parm )

int APlayerController::FindConnectedPeerIndex ( struct FUniqueNetId PeerNetId )
{
	static UFunction* pFnFindConnectedPeerIndex = NULL;

	if ( ! pFnFindConnectedPeerIndex )
		pFnFindConnectedPeerIndex = (UFunction*) UObject::GObjObjects()->Data[ 11128 ];

	APlayerController_execFindConnectedPeerIndex_Parms FindConnectedPeerIndex_Parms;
	memcpy ( &FindConnectedPeerIndex_Parms.PeerNetId, &PeerNetId, 0x48 );

	this->ProcessEvent ( pFnFindConnectedPeerIndex, &FindConnectedPeerIndex_Parms, NULL );

	return FindConnectedPeerIndex_Parms.ReturnValue;
};

// Function Engine.PlayerController.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11126 ];

	APlayerController_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function Engine.PlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 11119 ];

	APlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerController.SpawnCoverReplicator
// [0x00020002] 
// Parameters infos:
// class ACoverReplicator*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ACoverReplicator* APlayerController::SpawnCoverReplicator ( )
{
	static UFunction* pFnSpawnCoverReplicator = NULL;

	if ( ! pFnSpawnCoverReplicator )
		pFnSpawnCoverReplicator = (UFunction*) UObject::GObjObjects()->Data[ 11115 ];

	APlayerController_execSpawnCoverReplicator_Parms SpawnCoverReplicator_Parms;

	this->ProcessEvent ( pFnSpawnCoverReplicator, &SpawnCoverReplicator_Parms, NULL );

	return SpawnCoverReplicator_Parms.ReturnValue;
};

// Function Engine.PlayerController.CanUnpauseControllerConnected
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseControllerConnected ( )
{
	static UFunction* pFnCanUnpauseControllerConnected = NULL;

	if ( ! pFnCanUnpauseControllerConnected )
		pFnCanUnpauseControllerConnected = (UFunction*) UObject::GObjObjects()->Data[ 11113 ];

	APlayerController_execCanUnpauseControllerConnected_Parms CanUnpauseControllerConnected_Parms;

	this->ProcessEvent ( pFnCanUnpauseControllerConnected, &CanUnpauseControllerConnected_Parms, NULL );

	return CanUnpauseControllerConnected_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnControllerChanged
// [0x00020002] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void APlayerController::OnControllerChanged ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChanged = NULL;

	if ( ! pFnOnControllerChanged )
		pFnOnControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 11103 ];

	APlayerController_execOnControllerChanged_Parms OnControllerChanged_Parms;
	OnControllerChanged_Parms.ControllerId = ControllerId;
	OnControllerChanged_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChanged, &OnControllerChanged_Parms, NULL );
};

// Function Engine.PlayerController.CanUnpauseExternalUI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerController::CanUnpauseExternalUI ( )
{
	static UFunction* pFnCanUnpauseExternalUI = NULL;

	if ( ! pFnCanUnpauseExternalUI )
		pFnCanUnpauseExternalUI = (UFunction*) UObject::GObjObjects()->Data[ 11100 ];

	APlayerController_execCanUnpauseExternalUI_Parms CanUnpauseExternalUI_Parms;

	this->ProcessEvent ( pFnCanUnpauseExternalUI, &CanUnpauseExternalUI_Parms, NULL );

	return CanUnpauseExternalUI_Parms.ReturnValue;
};

// Function Engine.PlayerController.OnExternalUIChanged
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void APlayerController::OnExternalUIChanged ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChanged = NULL;

	if ( ! pFnOnExternalUIChanged )
		pFnOnExternalUIChanged = (UFunction*) UObject::GObjObjects()->Data[ 11097 ];

	APlayerController_execOnExternalUIChanged_Parms OnExternalUIChanged_Parms;
	OnExternalUIChanged_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChanged, &OnExternalUIChanged_Parms, NULL );
};

// Function Engine.PlayerController.ForceClearUnpauseDelegates
// [0x00020002] 
// Parameters infos:

void APlayerController::ForceClearUnpauseDelegates ( )
{
	static UFunction* pFnForceClearUnpauseDelegates = NULL;

	if ( ! pFnForceClearUnpauseDelegates )
		pFnForceClearUnpauseDelegates = (UFunction*) UObject::GObjObjects()->Data[ 11095 ];

	APlayerController_execForceClearUnpauseDelegates_Parms ForceClearUnpauseDelegates_Parms;

	this->ProcessEvent ( pFnForceClearUnpauseDelegates, &ForceClearUnpauseDelegates_Parms, NULL );
};

// Function Engine.PlayerController.DisableActorHeadTracking
// [0x01020140] 
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )

void APlayerController::DisableActorHeadTracking ( class AActor* TargetActor )
{
	static UFunction* pFnDisableActorHeadTracking = NULL;

	if ( ! pFnDisableActorHeadTracking )
		pFnDisableActorHeadTracking = (UFunction*) UObject::GObjObjects()->Data[ 11093 ];

	APlayerController_execDisableActorHeadTracking_Parms DisableActorHeadTracking_Parms;
	DisableActorHeadTracking_Parms.TargetActor = TargetActor;

	this->ProcessEvent ( pFnDisableActorHeadTracking, &DisableActorHeadTracking_Parms, NULL );
};

// Function Engine.PlayerController.EnableActorHeadTracking
// [0x01020140] 
// Parameters infos:
// class AActor*                  TargetActor                    ( CPF_Parm )
// struct FName                   TrackControllerName            ( CPF_Parm )
// class UClass*                  ActorClassesToLookAt           ( CPF_Parm )
// unsigned long                  bLookAtPawns                   ( CPF_Parm )
// float                          MinLookAtTime                  ( CPF_Parm )
// float                          MaxLookAtTime                  ( CPF_Parm )
// float                          MaxInterestTime                ( CPF_Parm )
// float                          LookAtActorRadius              ( CPF_Parm )
// struct FName                   TargetBoneNames                ( CPF_Parm )

void APlayerController::EnableActorHeadTracking ( class AActor* TargetActor, struct FName* TrackControllerName, class UClass** ActorClassesToLookAt, unsigned long bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, struct FName* TargetBoneNames )
{
	static UFunction* pFnEnableActorHeadTracking = NULL;

	if ( ! pFnEnableActorHeadTracking )
		pFnEnableActorHeadTracking = (UFunction*) UObject::GObjObjects()->Data[ 11083 ];

	APlayerController_execEnableActorHeadTracking_Parms EnableActorHeadTracking_Parms;
	EnableActorHeadTracking_Parms.TargetActor = TargetActor;
	memcpy ( &EnableActorHeadTracking_Parms.TrackControllerName, &TrackControllerName, 0x50 );
	memcpy ( &EnableActorHeadTracking_Parms.ActorClassesToLookAt, &ActorClassesToLookAt, 0x28 );
	EnableActorHeadTracking_Parms.bLookAtPawns = bLookAtPawns;
	EnableActorHeadTracking_Parms.MinLookAtTime = MinLookAtTime;
	EnableActorHeadTracking_Parms.MaxLookAtTime = MaxLookAtTime;
	EnableActorHeadTracking_Parms.MaxInterestTime = MaxInterestTime;
	EnableActorHeadTracking_Parms.LookAtActorRadius = LookAtActorRadius;
	memcpy ( &EnableActorHeadTracking_Parms.TargetBoneNames, &TargetBoneNames, 0x50 );

	this->ProcessEvent ( pFnEnableActorHeadTracking, &EnableActorHeadTracking_Parms, NULL );
};

// Function Engine.PlayerController.FellOutOfWorld
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APlayerController::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 11081 ];

	APlayerController_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.PlayerController.CleanUpAudioComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerController::CleanUpAudioComponents ( )
{
	static UFunction* pFnCleanUpAudioComponents = NULL;

	if ( ! pFnCleanUpAudioComponents )
		pFnCleanUpAudioComponents = (UFunction*) UObject::GObjObjects()->Data[ 11080 ];

	APlayerController_execCleanUpAudioComponents_Parms CleanUpAudioComponents_Parms;

	pFnCleanUpAudioComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUpAudioComponents, &CleanUpAudioComponents_Parms, NULL );

	pFnCleanUpAudioComponents->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.FindStairRotation
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x020C]
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

int APlayerController::FindStairRotation ( float DeltaTime )
{
	static UFunction* pFnFindStairRotation = NULL;

	if ( ! pFnFindStairRotation )
		pFnFindStairRotation = (UFunction*) UObject::GObjObjects()->Data[ 11077 ];

	APlayerController_execFindStairRotation_Parms FindStairRotation_Parms;
	FindStairRotation_Parms.DeltaTime = DeltaTime;

	unsigned short NativeIndex = pFnFindStairRotation->iNative;
	pFnFindStairRotation->iNative = 0;

	pFnFindStairRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindStairRotation, &FindStairRotation_Parms, NULL );

	pFnFindStairRotation->FunctionFlags |= 0x400;

	pFnFindStairRotation->iNative = NativeIndex;

	return FindStairRotation_Parms.ReturnValue;
};

// Function Engine.PlayerController.CheckSpeedHack
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool APlayerController::CheckSpeedHack ( float DeltaTime )
{
	static UFunction* pFnCheckSpeedHack = NULL;

	if ( ! pFnCheckSpeedHack )
		pFnCheckSpeedHack = (UFunction*) UObject::GObjObjects()->Data[ 11074 ];

	APlayerController_execCheckSpeedHack_Parms CheckSpeedHack_Parms;
	CheckSpeedHack_Parms.DeltaTime = DeltaTime;

	pFnCheckSpeedHack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckSpeedHack, &CheckSpeedHack_Parms, NULL );

	pFnCheckSpeedHack->FunctionFlags |= 0x400;

	return CheckSpeedHack_Parms.ReturnValue;
};

// Function Engine.PlayerController.ServerProcessConvolve
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm | CPF_NeedCtorLink )
// int                            H                              ( CPF_Parm )

void APlayerController::eventServerProcessConvolve ( struct FString C, int H )
{
	static UFunction* pFnServerProcessConvolve = NULL;

	if ( ! pFnServerProcessConvolve )
		pFnServerProcessConvolve = (UFunction*) UObject::GObjObjects()->Data[ 11071 ];

	APlayerController_eventServerProcessConvolve_Parms ServerProcessConvolve_Parms;
	memcpy ( &ServerProcessConvolve_Parms.C, &C, 0xC );
	ServerProcessConvolve_Parms.H = H;

	pFnServerProcessConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerProcessConvolve, &ServerProcessConvolve_Parms, NULL );

	pFnServerProcessConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ClientConvolve
// [0x01040DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 C                              ( CPF_Parm | CPF_NeedCtorLink )
// int                            H                              ( CPF_Parm )

void APlayerController::eventClientConvolve ( struct FString C, int H )
{
	static UFunction* pFnClientConvolve = NULL;

	if ( ! pFnClientConvolve )
		pFnClientConvolve = (UFunction*) UObject::GObjObjects()->Data[ 11068 ];

	APlayerController_eventClientConvolve_Parms ClientConvolve_Parms;
	memcpy ( &ClientConvolve_Parms.C, &C, 0xC );
	ClientConvolve_Parms.H = H;

	pFnClientConvolve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientConvolve, &ClientConvolve_Parms, NULL );

	pFnClientConvolve->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAudioGroupVolume
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          Volume                         ( CPF_Parm )

void APlayerController::SetAudioGroupVolume ( struct FName GroupName, float Volume )
{
	static UFunction* pFnSetAudioGroupVolume = NULL;

	if ( ! pFnSetAudioGroupVolume )
		pFnSetAudioGroupVolume = (UFunction*) UObject::GObjObjects()->Data[ 11065 ];

	APlayerController_execSetAudioGroupVolume_Parms SetAudioGroupVolume_Parms;
	memcpy ( &SetAudioGroupVolume_Parms.GroupName, &GroupName, 0x8 );
	SetAudioGroupVolume_Parms.Volume = Volume;

	pFnSetAudioGroupVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAudioGroupVolume, &SetAudioGroupVolume_Parms, NULL );

	pFnSetAudioGroupVolume->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.SetAllowMatureLanguage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAllowMatureLanguge            ( CPF_Parm )

void APlayerController::SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge )
{
	static UFunction* pFnSetAllowMatureLanguage = NULL;

	if ( ! pFnSetAllowMatureLanguage )
		pFnSetAllowMatureLanguage = (UFunction*) UObject::GObjObjects()->Data[ 11063 ];

	APlayerController_execSetAllowMatureLanguage_Parms SetAllowMatureLanguage_Parms;
	SetAllowMatureLanguage_Parms.bAllowMatureLanguge = bAllowMatureLanguge;

	pFnSetAllowMatureLanguage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllowMatureLanguage, &SetAllowMatureLanguage_Parms, NULL );

	pFnSetAllowMatureLanguage->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.PasteFromClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::PasteFromClipboard ( )
{
	static UFunction* pFnPasteFromClipboard = NULL;

	if ( ! pFnPasteFromClipboard )
		pFnPasteFromClipboard = (UFunction*) UObject::GObjObjects()->Data[ 11061 ];

	APlayerController_execPasteFromClipboard_Parms PasteFromClipboard_Parms;

	pFnPasteFromClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPasteFromClipboard, &PasteFromClipboard_Parms, NULL );

	pFnPasteFromClipboard->FunctionFlags |= 0x400;

	return PasteFromClipboard_Parms.ReturnValue;
};

// Function Engine.PlayerController.CopyToClipboard
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

void APlayerController::CopyToClipboard ( struct FString Text )
{
	static UFunction* pFnCopyToClipboard = NULL;

	if ( ! pFnCopyToClipboard )
		pFnCopyToClipboard = (UFunction*) UObject::GObjObjects()->Data[ 11059 ];

	APlayerController_execCopyToClipboard_Parms CopyToClipboard_Parms;
	memcpy ( &CopyToClipboard_Parms.Text, &Text, 0xC );

	pFnCopyToClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyToClipboard, &CopyToClipboard_Parms, NULL );

	pFnCopyToClipboard->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.UpdateURL
// [0x00020401] ( FUNC_Final | FUNC_Native ) iNative [0x0222]
// Parameters infos:
// struct FString                 NewOption                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NewValue                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSave1Default                  ( CPF_Parm )

void APlayerController::UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default )
{
	static UFunction* pFnUpdateURL = NULL;

	if ( ! pFnUpdateURL )
		pFnUpdateURL = (UFunction*) UObject::GObjObjects()->Data[ 11055 ];

	APlayerController_execUpdateURL_Parms UpdateURL_Parms;
	memcpy ( &UpdateURL_Parms.NewOption, &NewOption, 0xC );
	memcpy ( &UpdateURL_Parms.NewValue, &NewValue, 0xC );
	UpdateURL_Parms.bSave1Default = bSave1Default;

	unsigned short NativeIndex = pFnUpdateURL->iNative;
	pFnUpdateURL->iNative = 0;

	pFnUpdateURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateURL, &UpdateURL_Parms, NULL );

	pFnUpdateURL->FunctionFlags |= 0x400;

	pFnUpdateURL->iNative = NativeIndex;
};

// Function Engine.PlayerController.ClientTravel
// [0x01024DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bSeamless                      ( CPF_OptionalParm | CPF_Parm )
// struct FGuid                   MapPackageGuid                 ( CPF_OptionalParm | CPF_Parm )

void APlayerController::eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid )
{
	static UFunction* pFnClientTravel = NULL;

	if ( ! pFnClientTravel )
		pFnClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 11050 ];

	APlayerController_eventClientTravel_Parms ClientTravel_Parms;
	memcpy ( &ClientTravel_Parms.URL, &URL, 0xC );
	ClientTravel_Parms.TravelType = TravelType;
	ClientTravel_Parms.bSeamless = bSeamless;
	memcpy ( &ClientTravel_Parms.MapPackageGuid, &MapPackageGuid, 0x10 );

	pFnClientTravel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientTravel, &ClientTravel_Parms, NULL );

	pFnClientTravel->FunctionFlags |= 0x400;
};

// Function Engine.PlayerController.ConsoleCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWriteToLog                    ( CPF_OptionalParm | CPF_Parm )

struct FString APlayerController::ConsoleCommand ( struct FString Command, unsigned long bWriteToLog )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 11046 ];

	APlayerController_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );
	ConsoleCommand_Parms.bWriteToLog = bWriteToLog;

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetServerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetServerNetworkAddress ( )
{
	static UFunction* pFnGetServerNetworkAddress = NULL;

	if ( ! pFnGetServerNetworkAddress )
		pFnGetServerNetworkAddress = (UFunction*) UObject::GObjObjects()->Data[ 11044 ];

	APlayerController_execGetServerNetworkAddress_Parms GetServerNetworkAddress_Parms;

	pFnGetServerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetServerNetworkAddress, &GetServerNetworkAddress_Parms, NULL );

	pFnGetServerNetworkAddress->FunctionFlags |= 0x400;

	return GetServerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.PlayerController.GetPlayerNetworkAddress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerController::GetPlayerNetworkAddress ( )
{
	static UFunction* pFnGetPlayerNetworkAddress = NULL;

	if ( ! pFnGetPlayerNetworkAddress )
		pFnGetPlayerNetworkAddress = (UFunction*) UObject::GObjObjects()->Data[ 8583 ];

	APlayerController_execGetPlayerNetworkAddress_Parms GetPlayerNetworkAddress_Parms;

	pFnGetPlayerNetworkAddress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerNetworkAddress, &GetPlayerNetworkAddress_Parms, NULL );

	pFnGetPlayerNetworkAddress->FunctionFlags |= 0x400;

	return GetPlayerNetworkAddress_Parms.ReturnValue;
};

// Function Engine.CheatManager.AnalyticsEndSession
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AnalyticsEndSession ( )
{
	static UFunction* pFnAnalyticsEndSession = NULL;

	if ( ! pFnAnalyticsEndSession )
		pFnAnalyticsEndSession = (UFunction*) UObject::GObjObjects()->Data[ 16703 ];

	UCheatManager_execAnalyticsEndSession_Parms AnalyticsEndSession_Parms;

	this->ProcessEvent ( pFnAnalyticsEndSession, &AnalyticsEndSession_Parms, NULL );
};

// Function Engine.CheatManager.AnalyticsStartSession
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AnalyticsStartSession ( )
{
	static UFunction* pFnAnalyticsStartSession = NULL;

	if ( ! pFnAnalyticsStartSession )
		pFnAnalyticsStartSession = (UFunction*) UObject::GObjObjects()->Data[ 16702 ];

	UCheatManager_execAnalyticsStartSession_Parms AnalyticsStartSession_Parms;

	this->ProcessEvent ( pFnAnalyticsStartSession, &AnalyticsStartSession_Parms, NULL );
};

// Function Engine.CheatManager.GetAnalyticsUserId
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::GetAnalyticsUserId ( )
{
	static UFunction* pFnGetAnalyticsUserId = NULL;

	if ( ! pFnGetAnalyticsUserId )
		pFnGetAnalyticsUserId = (UFunction*) UObject::GObjObjects()->Data[ 16701 ];

	UCheatManager_execGetAnalyticsUserId_Parms GetAnalyticsUserId_Parms;

	pFnGetAnalyticsUserId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnalyticsUserId, &GetAnalyticsUserId_Parms, NULL );

	pFnGetAnalyticsUserId->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.SetAnalyticsUserId
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::SetAnalyticsUserId ( struct FString UserId )
{
	static UFunction* pFnSetAnalyticsUserId = NULL;

	if ( ! pFnSetAnalyticsUserId )
		pFnSetAnalyticsUserId = (UFunction*) UObject::GObjObjects()->Data[ 16699 ];

	UCheatManager_execSetAnalyticsUserId_Parms SetAnalyticsUserId_Parms;
	memcpy ( &SetAnalyticsUserId_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnSetAnalyticsUserId, &SetAnalyticsUserId_Parms, NULL );
};

// Function Engine.CheatManager.SendAnalyticsCachedEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::SendAnalyticsCachedEvents ( )
{
	static UFunction* pFnSendAnalyticsCachedEvents = NULL;

	if ( ! pFnSendAnalyticsCachedEvents )
		pFnSendAnalyticsCachedEvents = (UFunction*) UObject::GObjObjects()->Data[ 16698 ];

	UCheatManager_execSendAnalyticsCachedEvents_Parms SendAnalyticsCachedEvents_Parms;

	this->ProcessEvent ( pFnSendAnalyticsCachedEvents, &SendAnalyticsCachedEvents_Parms, NULL );
};

// Function Engine.CheatManager.SendAnalyticsCurrencyGivenEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 GameCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// int                            GameCurrencyAmount             ( CPF_Parm )

void UCheatManager::SendAnalyticsCurrencyGivenEvent ( struct FString GameCurrencyType, int GameCurrencyAmount )
{
	static UFunction* pFnSendAnalyticsCurrencyGivenEvent = NULL;

	if ( ! pFnSendAnalyticsCurrencyGivenEvent )
		pFnSendAnalyticsCurrencyGivenEvent = (UFunction*) UObject::GObjObjects()->Data[ 16695 ];

	UCheatManager_execSendAnalyticsCurrencyGivenEvent_Parms SendAnalyticsCurrencyGivenEvent_Parms;
	memcpy ( &SendAnalyticsCurrencyGivenEvent_Parms.GameCurrencyType, &GameCurrencyType, 0xC );
	SendAnalyticsCurrencyGivenEvent_Parms.GameCurrencyAmount = GameCurrencyAmount;

	this->ProcessEvent ( pFnSendAnalyticsCurrencyGivenEvent, &SendAnalyticsCurrencyGivenEvent_Parms, NULL );
};

// Function Engine.CheatManager.SendAnalyticsCurrencyPurchaseEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 GameCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// int                            GameCurrencyAmount             ( CPF_Parm )
// struct FString                 RealCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// float                          RealMoneyCost                  ( CPF_Parm )
// struct FString                 PaymentProvider                ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::SendAnalyticsCurrencyPurchaseEvent ( struct FString GameCurrencyType, int GameCurrencyAmount, struct FString RealCurrencyType, float RealMoneyCost, struct FString PaymentProvider )
{
	static UFunction* pFnSendAnalyticsCurrencyPurchaseEvent = NULL;

	if ( ! pFnSendAnalyticsCurrencyPurchaseEvent )
		pFnSendAnalyticsCurrencyPurchaseEvent = (UFunction*) UObject::GObjObjects()->Data[ 16689 ];

	UCheatManager_execSendAnalyticsCurrencyPurchaseEvent_Parms SendAnalyticsCurrencyPurchaseEvent_Parms;
	memcpy ( &SendAnalyticsCurrencyPurchaseEvent_Parms.GameCurrencyType, &GameCurrencyType, 0xC );
	SendAnalyticsCurrencyPurchaseEvent_Parms.GameCurrencyAmount = GameCurrencyAmount;
	memcpy ( &SendAnalyticsCurrencyPurchaseEvent_Parms.RealCurrencyType, &RealCurrencyType, 0xC );
	SendAnalyticsCurrencyPurchaseEvent_Parms.RealMoneyCost = RealMoneyCost;
	memcpy ( &SendAnalyticsCurrencyPurchaseEvent_Parms.PaymentProvider, &PaymentProvider, 0xC );

	this->ProcessEvent ( pFnSendAnalyticsCurrencyPurchaseEvent, &SendAnalyticsCurrencyPurchaseEvent_Parms, NULL );
};

// Function Engine.CheatManager.SendAnalyticsItemPurchaseEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ItemID                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Currency                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            PerItemCost                    ( CPF_Parm )
// int                            ItemQuantity                   ( CPF_Parm )

void UCheatManager::SendAnalyticsItemPurchaseEvent ( struct FString ItemID, struct FString Currency, int PerItemCost, int ItemQuantity )
{
	static UFunction* pFnSendAnalyticsItemPurchaseEvent = NULL;

	if ( ! pFnSendAnalyticsItemPurchaseEvent )
		pFnSendAnalyticsItemPurchaseEvent = (UFunction*) UObject::GObjObjects()->Data[ 16684 ];

	UCheatManager_execSendAnalyticsItemPurchaseEvent_Parms SendAnalyticsItemPurchaseEvent_Parms;
	memcpy ( &SendAnalyticsItemPurchaseEvent_Parms.ItemID, &ItemID, 0xC );
	memcpy ( &SendAnalyticsItemPurchaseEvent_Parms.Currency, &Currency, 0xC );
	SendAnalyticsItemPurchaseEvent_Parms.PerItemCost = PerItemCost;
	SendAnalyticsItemPurchaseEvent_Parms.ItemQuantity = ItemQuantity;

	this->ProcessEvent ( pFnSendAnalyticsItemPurchaseEvent, &SendAnalyticsItemPurchaseEvent_Parms, NULL );
};

// Function Engine.CheatManager.SendAnalyticsUserAttributeEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 AttributeName                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AttributeValue                 ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::SendAnalyticsUserAttributeEvent ( struct FString AttributeName, struct FString AttributeValue )
{
	static UFunction* pFnSendAnalyticsUserAttributeEvent = NULL;

	if ( ! pFnSendAnalyticsUserAttributeEvent )
		pFnSendAnalyticsUserAttributeEvent = (UFunction*) UObject::GObjObjects()->Data[ 16681 ];

	UCheatManager_execSendAnalyticsUserAttributeEvent_Parms SendAnalyticsUserAttributeEvent_Parms;
	memcpy ( &SendAnalyticsUserAttributeEvent_Parms.AttributeName, &AttributeName, 0xC );
	memcpy ( &SendAnalyticsUserAttributeEvent_Parms.AttributeValue, &AttributeValue, 0xC );

	this->ProcessEvent ( pFnSendAnalyticsUserAttributeEvent, &SendAnalyticsUserAttributeEvent_Parms, NULL );
};

// Function Engine.CheatManager.SendAnalyticsEvent
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AttributeName                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AttributeValue                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::SendAnalyticsEvent ( struct FString EventName, struct FString AttributeName, struct FString AttributeValue )
{
	static UFunction* pFnSendAnalyticsEvent = NULL;

	if ( ! pFnSendAnalyticsEvent )
		pFnSendAnalyticsEvent = (UFunction*) UObject::GObjObjects()->Data[ 16676 ];

	UCheatManager_execSendAnalyticsEvent_Parms SendAnalyticsEvent_Parms;
	memcpy ( &SendAnalyticsEvent_Parms.EventName, &EventName, 0xC );
	memcpy ( &SendAnalyticsEvent_Parms.AttributeName, &AttributeName, 0xC );
	memcpy ( &SendAnalyticsEvent_Parms.AttributeValue, &AttributeValue, 0xC );

	this->ProcessEvent ( pFnSendAnalyticsEvent, &SendAnalyticsEvent_Parms, NULL );
};

// Function Engine.CheatManager.OnRequestComplete
// [0x00020002] 
// Parameters infos:
// class UHttpRequestInterface*   OriginalRequest                ( CPF_Parm )
// class UHttpResponseInterface*  Response                       ( CPF_Parm )
// unsigned long                  bDidSucceed                    ( CPF_Parm )

void UCheatManager::OnRequestComplete ( class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, unsigned long bDidSucceed )
{
	static UFunction* pFnOnRequestComplete = NULL;

	if ( ! pFnOnRequestComplete )
		pFnOnRequestComplete = (UFunction*) UObject::GObjObjects()->Data[ 16661 ];

	UCheatManager_execOnRequestComplete_Parms OnRequestComplete_Parms;
	OnRequestComplete_Parms.OriginalRequest = OriginalRequest;
	OnRequestComplete_Parms.Response = Response;
	OnRequestComplete_Parms.bDidSucceed = bDidSucceed;

	this->ProcessEvent ( pFnOnRequestComplete, &OnRequestComplete_Parms, NULL );
};

// Function Engine.CheatManager.TestHttp
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Verb                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Payload                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSendParallelRequest           ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::TestHttp ( struct FString Verb, struct FString Payload, struct FString URL, unsigned long bSendParallelRequest )
{
	static UFunction* pFnTestHttp = NULL;

	if ( ! pFnTestHttp )
		pFnTestHttp = (UFunction*) UObject::GObjObjects()->Data[ 16627 ];

	UCheatManager_execTestHttp_Parms TestHttp_Parms;
	memcpy ( &TestHttp_Parms.Verb, &Verb, 0xC );
	memcpy ( &TestHttp_Parms.Payload, &Payload, 0xC );
	memcpy ( &TestHttp_Parms.URL, &URL, 0xC );
	TestHttp_Parms.bSendParallelRequest = bSendParallelRequest;

	this->ProcessEvent ( pFnTestHttp, &TestHttp_Parms, NULL );
};

// Function Engine.CheatManager.OnDeleteUserFileComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnDeleteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnDeleteUserFileComplete = NULL;

	if ( ! pFnOnDeleteUserFileComplete )
		pFnOnDeleteUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 16623 ];

	UCheatManager_execOnDeleteUserFileComplete_Parms OnDeleteUserFileComplete_Parms;
	OnDeleteUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDeleteUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnDeleteUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnDeleteUserFileComplete, &OnDeleteUserFileComplete_Parms, NULL );
};

// Function Engine.CheatManager.DebugDeleteUserFile
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::DebugDeleteUserFile ( struct FString UserId, struct FString Filename )
{
	static UFunction* pFnDebugDeleteUserFile = NULL;

	if ( ! pFnDebugDeleteUserFile )
		pFnDebugDeleteUserFile = (UFunction*) UObject::GObjObjects()->Data[ 16618 ];

	UCheatManager_execDebugDeleteUserFile_Parms DebugDeleteUserFile_Parms;
	memcpy ( &DebugDeleteUserFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &DebugDeleteUserFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnDebugDeleteUserFile, &DebugDeleteUserFile_Parms, NULL );
};

// Function Engine.CheatManager.OnReadUserFileComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnReadUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnReadUserFileComplete = NULL;

	if ( ! pFnOnReadUserFileComplete )
		pFnOnReadUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 16610 ];

	UCheatManager_execOnReadUserFileComplete_Parms OnReadUserFileComplete_Parms;
	OnReadUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnReadUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadUserFileComplete, &OnReadUserFileComplete_Parms, NULL );
};

// Function Engine.CheatManager.DebugReadUserFile
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::DebugReadUserFile ( struct FString UserId, struct FString Filename )
{
	static UFunction* pFnDebugReadUserFile = NULL;

	if ( ! pFnDebugReadUserFile )
		pFnDebugReadUserFile = (UFunction*) UObject::GObjObjects()->Data[ 16605 ];

	UCheatManager_execDebugReadUserFile_Parms DebugReadUserFile_Parms;
	memcpy ( &DebugReadUserFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &DebugReadUserFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnDebugReadUserFile, &DebugReadUserFile_Parms, NULL );
};

// Function Engine.CheatManager.OnWriteUserFileComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnWriteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnWriteUserFileComplete = NULL;

	if ( ! pFnOnWriteUserFileComplete )
		pFnOnWriteUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 16601 ];

	UCheatManager_execOnWriteUserFileComplete_Parms OnWriteUserFileComplete_Parms;
	OnWriteUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnWriteUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnWriteUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnWriteUserFileComplete, &OnWriteUserFileComplete_Parms, NULL );
};

// Function Engine.CheatManager.DebugWriteUserFile
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::DebugWriteUserFile ( struct FString UserId, struct FString Filename )
{
	static UFunction* pFnDebugWriteUserFile = NULL;

	if ( ! pFnDebugWriteUserFile )
		pFnDebugWriteUserFile = (UFunction*) UObject::GObjObjects()->Data[ 16593 ];

	UCheatManager_execDebugWriteUserFile_Parms DebugWriteUserFile_Parms;
	memcpy ( &DebugWriteUserFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &DebugWriteUserFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnDebugWriteUserFile, &DebugWriteUserFile_Parms, NULL );
};

// Function Engine.CheatManager.OnEnumerateUserFilesComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnEnumerateUserFilesComplete ( unsigned long bWasSuccessful, struct FString UserId )
{
	static UFunction* pFnOnEnumerateUserFilesComplete = NULL;

	if ( ! pFnOnEnumerateUserFilesComplete )
		pFnOnEnumerateUserFilesComplete = (UFunction*) UObject::GObjObjects()->Data[ 16590 ];

	UCheatManager_execOnEnumerateUserFilesComplete_Parms OnEnumerateUserFilesComplete_Parms;
	OnEnumerateUserFilesComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnEnumerateUserFilesComplete_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnOnEnumerateUserFilesComplete, &OnEnumerateUserFilesComplete_Parms, NULL );
};

// Function Engine.CheatManager.DebugQueryUserFiles
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::DebugQueryUserFiles ( struct FString UserId )
{
	static UFunction* pFnDebugQueryUserFiles = NULL;

	if ( ! pFnDebugQueryUserFiles )
		pFnDebugQueryUserFiles = (UFunction*) UObject::GObjObjects()->Data[ 16588 ];

	UCheatManager_execDebugQueryUserFiles_Parms DebugQueryUserFiles_Parms;
	memcpy ( &DebugQueryUserFiles_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnDebugQueryUserFiles, &DebugQueryUserFiles_Parms, NULL );
};

// Function Engine.CheatManager.OnReceivedLocalNotificationDebug
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasAppActive                  ( CPF_Parm )
// struct FNotificationInfo       Notification                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCheatManager::OnReceivedLocalNotificationDebug ( unsigned long bWasAppActive, struct FNotificationInfo* Notification )
{
	static UFunction* pFnOnReceivedLocalNotificationDebug = NULL;

	if ( ! pFnOnReceivedLocalNotificationDebug )
		pFnOnReceivedLocalNotificationDebug = (UFunction*) UObject::GObjObjects()->Data[ 16585 ];

	UCheatManager_execOnReceivedLocalNotificationDebug_Parms OnReceivedLocalNotificationDebug_Parms;
	OnReceivedLocalNotificationDebug_Parms.bWasAppActive = bWasAppActive;

	this->ProcessEvent ( pFnOnReceivedLocalNotificationDebug, &OnReceivedLocalNotificationDebug_Parms, NULL );

	if ( Notification )
		memcpy ( Notification, &OnReceivedLocalNotificationDebug_Parms.Notification, 0x20 );
};

// Function Engine.CheatManager.DebugNotification
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 MessageBody                    ( CPF_Parm | CPF_NeedCtorLink )
// int                            SecondsFromNow                 ( CPF_Parm )

void UCheatManager::DebugNotification ( struct FString MessageBody, int SecondsFromNow )
{
	static UFunction* pFnDebugNotification = NULL;

	if ( ! pFnDebugNotification )
		pFnDebugNotification = (UFunction*) UObject::GObjObjects()->Data[ 16579 ];

	UCheatManager_execDebugNotification_Parms DebugNotification_Parms;
	memcpy ( &DebugNotification_Parms.MessageBody, &MessageBody, 0xC );
	DebugNotification_Parms.SecondsFromNow = SecondsFromNow;

	this->ProcessEvent ( pFnDebugNotification, &DebugNotification_Parms, NULL );
};

// Function Engine.CheatManager.DrawLocationXYZ
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void UCheatManager::DrawLocationXYZ ( float X, float Y, float Z )
{
	static UFunction* pFnDrawLocationXYZ = NULL;

	if ( ! pFnDrawLocationXYZ )
		pFnDrawLocationXYZ = (UFunction*) UObject::GObjObjects()->Data[ 16574 ];

	UCheatManager_execDrawLocationXYZ_Parms DrawLocationXYZ_Parms;
	DrawLocationXYZ_Parms.X = X;
	DrawLocationXYZ_Parms.Y = Y;
	DrawLocationXYZ_Parms.Z = Z;

	this->ProcessEvent ( pFnDrawLocationXYZ, &DrawLocationXYZ_Parms, NULL );
};

// Function Engine.CheatManager.DrawLocation
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FVector                 Loc                            ( CPF_Parm )

void UCheatManager::DrawLocation ( struct FVector Loc )
{
	static UFunction* pFnDrawLocation = NULL;

	if ( ! pFnDrawLocation )
		pFnDrawLocation = (UFunction*) UObject::GObjObjects()->Data[ 16572 ];

	UCheatManager_execDrawLocation_Parms DrawLocation_Parms;
	memcpy ( &DrawLocation_Parms.Loc, &Loc, 0xC );

	this->ProcessEvent ( pFnDrawLocation, &DrawLocation_Parms, NULL );
};

// Function Engine.CheatManager.DumpCoverStats
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::DumpCoverStats ( )
{
	static UFunction* pFnDumpCoverStats = NULL;

	if ( ! pFnDumpCoverStats )
		pFnDumpCoverStats = (UFunction*) UObject::GObjObjects()->Data[ 16571 ];

	UCheatManager_execDumpCoverStats_Parms DumpCoverStats_Parms;

	pFnDumpCoverStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDumpCoverStats, &DumpCoverStats_Parms, NULL );

	pFnDumpCoverStats->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.DebugEmsDownload
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DebugEmsDownload ( )
{
	static UFunction* pFnDebugEmsDownload = NULL;

	if ( ! pFnDebugEmsDownload )
		pFnDebugEmsDownload = (UFunction*) UObject::GObjObjects()->Data[ 16570 ];

	UCheatManager_execDebugEmsDownload_Parms DebugEmsDownload_Parms;

	this->ProcessEvent ( pFnDebugEmsDownload, &DebugEmsDownload_Parms, NULL );
};

// Function Engine.CheatManager.DebugDeleteTitleFiles
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DebugDeleteTitleFiles ( )
{
	static UFunction* pFnDebugDeleteTitleFiles = NULL;

	if ( ! pFnDebugDeleteTitleFiles )
		pFnDebugDeleteTitleFiles = (UFunction*) UObject::GObjObjects()->Data[ 16567 ];

	UCheatManager_execDebugDeleteTitleFiles_Parms DebugDeleteTitleFiles_Parms;

	this->ProcessEvent ( pFnDebugDeleteTitleFiles, &DebugDeleteTitleFiles_Parms, NULL );
};

// Function Engine.CheatManager.OnSaveComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnSaveComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnSaveComplete = NULL;

	if ( ! pFnOnSaveComplete )
		pFnOnSaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 16564 ];

	UCheatManager_execOnSaveComplete_Parms OnSaveComplete_Parms;
	OnSaveComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnSaveComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnSaveComplete, &OnSaveComplete_Parms, NULL );
};

// Function Engine.CheatManager.DebugSaveTitleFile
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::DebugSaveTitleFile ( struct FString Filename )
{
	static UFunction* pFnDebugSaveTitleFile = NULL;

	if ( ! pFnDebugSaveTitleFile )
		pFnDebugSaveTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 16556 ];

	UCheatManager_execDebugSaveTitleFile_Parms DebugSaveTitleFile_Parms;
	memcpy ( &DebugSaveTitleFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnDebugSaveTitleFile, &DebugSaveTitleFile_Parms, NULL );
};

// Function Engine.CheatManager.OnLoadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnLoadComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnLoadComplete = NULL;

	if ( ! pFnOnLoadComplete )
		pFnOnLoadComplete = (UFunction*) UObject::GObjObjects()->Data[ 16553 ];

	UCheatManager_execOnLoadComplete_Parms OnLoadComplete_Parms;
	OnLoadComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnLoadComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnLoadComplete, &OnLoadComplete_Parms, NULL );
};

// Function Engine.CheatManager.OnDownloadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::OnDownloadComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnDownloadComplete = NULL;

	if ( ! pFnOnDownloadComplete )
		pFnOnDownloadComplete = (UFunction*) UObject::GObjObjects()->Data[ 16550 ];

	UCheatManager_execOnDownloadComplete_Parms OnDownloadComplete_Parms;
	OnDownloadComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDownloadComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnDownloadComplete, &OnDownloadComplete_Parms, NULL );
};

// Function Engine.CheatManager.DebugDownloadTitleFile
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bFromCache                     ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::DebugDownloadTitleFile ( struct FString Filename, unsigned long bFromCache )
{
	static UFunction* pFnDebugDownloadTitleFile = NULL;

	if ( ! pFnDebugDownloadTitleFile )
		pFnDebugDownloadTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 16543 ];

	UCheatManager_execDebugDownloadTitleFile_Parms DebugDownloadTitleFile_Parms;
	memcpy ( &DebugDownloadTitleFile_Parms.Filename, &Filename, 0xC );
	DebugDownloadTitleFile_Parms.bFromCache = bFromCache;

	this->ProcessEvent ( pFnDebugDownloadTitleFile, &DebugDownloadTitleFile_Parms, NULL );
};

// Function Engine.CheatManager.DebugIniLocPatcher
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DebugIniLocPatcher ( )
{
	static UFunction* pFnDebugIniLocPatcher = NULL;

	if ( ! pFnDebugIniLocPatcher )
		pFnDebugIniLocPatcher = (UFunction*) UObject::GObjObjects()->Data[ 16542 ];

	UCheatManager_execDebugIniLocPatcher_Parms DebugIniLocPatcher_Parms;

	this->ProcessEvent ( pFnDebugIniLocPatcher, &DebugIniLocPatcher_Parms, NULL );
};

// Function Engine.CheatManager.ToggleAILogging
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ToggleAILogging ( )
{
	static UFunction* pFnToggleAILogging = NULL;

	if ( ! pFnToggleAILogging )
		pFnToggleAILogging = (UFunction*) UObject::GObjObjects()->Data[ 16539 ];

	UCheatManager_execToggleAILogging_Parms ToggleAILogging_Parms;

	this->ProcessEvent ( pFnToggleAILogging, &ToggleAILogging_Parms, NULL );
};

// Function Engine.CheatManager.VerifyNavMeshCoverRefs
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::VerifyNavMeshCoverRefs ( )
{
	static UFunction* pFnVerifyNavMeshCoverRefs = NULL;

	if ( ! pFnVerifyNavMeshCoverRefs )
		pFnVerifyNavMeshCoverRefs = (UFunction*) UObject::GObjObjects()->Data[ 16538 ];

	UCheatManager_execVerifyNavMeshCoverRefs_Parms VerifyNavMeshCoverRefs_Parms;

	pFnVerifyNavMeshCoverRefs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavMeshCoverRefs, &VerifyNavMeshCoverRefs_Parms, NULL );

	pFnVerifyNavMeshCoverRefs->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.PrintNavMeshObstacles
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::PrintNavMeshObstacles ( )
{
	static UFunction* pFnPrintNavMeshObstacles = NULL;

	if ( ! pFnPrintNavMeshObstacles )
		pFnPrintNavMeshObstacles = (UFunction*) UObject::GObjObjects()->Data[ 16537 ];

	UCheatManager_execPrintNavMeshObstacles_Parms PrintNavMeshObstacles_Parms;

	pFnPrintNavMeshObstacles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrintNavMeshObstacles, &PrintNavMeshObstacles_Parms, NULL );

	pFnPrintNavMeshObstacles->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.PrintAllPathObjectEdges
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::PrintAllPathObjectEdges ( )
{
	static UFunction* pFnPrintAllPathObjectEdges = NULL;

	if ( ! pFnPrintAllPathObjectEdges )
		pFnPrintAllPathObjectEdges = (UFunction*) UObject::GObjObjects()->Data[ 16536 ];

	UCheatManager_execPrintAllPathObjectEdges_Parms PrintAllPathObjectEdges_Parms;

	pFnPrintAllPathObjectEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrintAllPathObjectEdges, &PrintAllPathObjectEdges_Parms, NULL );

	pFnPrintAllPathObjectEdges->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.NavMeshVerification
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          interval                       ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::NavMeshVerification ( float interval )
{
	static UFunction* pFnNavMeshVerification = NULL;

	if ( ! pFnNavMeshVerification )
		pFnNavMeshVerification = (UFunction*) UObject::GObjObjects()->Data[ 16534 ];

	UCheatManager_execNavMeshVerification_Parms NavMeshVerification_Parms;
	NavMeshVerification_Parms.interval = interval;

	this->ProcessEvent ( pFnNavMeshVerification, &NavMeshVerification_Parms, NULL );
};

// Function Engine.CheatManager.DrawUnsupportingEdges
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 PawnClassName                  ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UCheatManager::DrawUnsupportingEdges ( struct FString PawnClassName )
{
	static UFunction* pFnDrawUnsupportingEdges = NULL;

	if ( ! pFnDrawUnsupportingEdges )
		pFnDrawUnsupportingEdges = (UFunction*) UObject::GObjObjects()->Data[ 16532 ];

	UCheatManager_execDrawUnsupportingEdges_Parms DrawUnsupportingEdges_Parms;
	memcpy ( &DrawUnsupportingEdges_Parms.PawnClassName, &PawnClassName, 0xC );

	pFnDrawUnsupportingEdges->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawUnsupportingEdges, &DrawUnsupportingEdges_Parms, NULL );

	pFnDrawUnsupportingEdges->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.VerifyNavMeshObjects
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UCheatManager::VerifyNavMeshObjects ( )
{
	static UFunction* pFnVerifyNavMeshObjects = NULL;

	if ( ! pFnVerifyNavMeshObjects )
		pFnVerifyNavMeshObjects = (UFunction*) UObject::GObjObjects()->Data[ 16531 ];

	UCheatManager_execVerifyNavMeshObjects_Parms VerifyNavMeshObjects_Parms;

	pFnVerifyNavMeshObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNavMeshObjects, &VerifyNavMeshObjects_Parms, NULL );

	pFnVerifyNavMeshObjects->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.LogParticleActivateSystemCalls
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldLog                     ( CPF_Parm )

void UCheatManager::LogParticleActivateSystemCalls ( unsigned long bShouldLog )
{
	static UFunction* pFnLogParticleActivateSystemCalls = NULL;

	if ( ! pFnLogParticleActivateSystemCalls )
		pFnLogParticleActivateSystemCalls = (UFunction*) UObject::GObjObjects()->Data[ 16529 ];

	UCheatManager_execLogParticleActivateSystemCalls_Parms LogParticleActivateSystemCalls_Parms;
	LogParticleActivateSystemCalls_Parms.bShouldLog = bShouldLog;

	pFnLogParticleActivateSystemCalls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogParticleActivateSystemCalls, &LogParticleActivateSystemCalls_Parms, NULL );

	pFnLogParticleActivateSystemCalls->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.LogPlaySoundCalls
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldLog                     ( CPF_Parm )

void UCheatManager::LogPlaySoundCalls ( unsigned long bShouldLog )
{
	static UFunction* pFnLogPlaySoundCalls = NULL;

	if ( ! pFnLogPlaySoundCalls )
		pFnLogPlaySoundCalls = (UFunction*) UObject::GObjObjects()->Data[ 16527 ];

	UCheatManager_execLogPlaySoundCalls_Parms LogPlaySoundCalls_Parms;
	LogPlaySoundCalls_Parms.bShouldLog = bShouldLog;

	pFnLogPlaySoundCalls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlaySoundCalls, &LogPlaySoundCalls_Parms, NULL );

	pFnLogPlaySoundCalls->FunctionFlags |= 0x400;
};

// Function Engine.CheatManager.InitCheatManager
// [0x00020000] 
// Parameters infos:

void UCheatManager::InitCheatManager ( )
{
	static UFunction* pFnInitCheatManager = NULL;

	if ( ! pFnInitCheatManager )
		pFnInitCheatManager = (UFunction*) UObject::GObjObjects()->Data[ 16526 ];

	UCheatManager_execInitCheatManager_Parms InitCheatManager_Parms;

	this->ProcessEvent ( pFnInitCheatManager, &InitCheatManager_Parms, NULL );
};

// Function Engine.CheatManager.VerbosePathDebug
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::VerbosePathDebug ( )
{
	static UFunction* pFnVerbosePathDebug = NULL;

	if ( ! pFnVerbosePathDebug )
		pFnVerbosePathDebug = (UFunction*) UObject::GObjObjects()->Data[ 16518 ];

	UCheatManager_execVerbosePathDebug_Parms VerbosePathDebug_Parms;

	this->ProcessEvent ( pFnVerbosePathDebug, &VerbosePathDebug_Parms, NULL );
};

// Function Engine.CheatManager.TestPylonConnectivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::TestPylonConnectivity ( )
{
	static UFunction* pFnTestPylonConnectivity = NULL;

	if ( ! pFnTestPylonConnectivity )
		pFnTestPylonConnectivity = (UFunction*) UObject::GObjObjects()->Data[ 16516 ];

	UCheatManager_execTestPylonConnectivity_Parms TestPylonConnectivity_Parms;

	this->ProcessEvent ( pFnTestPylonConnectivity, &TestPylonConnectivity_Parms, NULL );
};

// Function Engine.CheatManager.TestNavMeshPath
// [0x00824202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bDrawPath                      ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::TestNavMeshPath ( unsigned long bDrawPath )
{
	static UFunction* pFnTestNavMeshPath = NULL;

	if ( ! pFnTestNavMeshPath )
		pFnTestNavMeshPath = (UFunction*) UObject::GObjObjects()->Data[ 16504 ];

	UCheatManager_execTestNavMeshPath_Parms TestNavMeshPath_Parms;
	TestNavMeshPath_Parms.bDrawPath = bDrawPath;

	this->ProcessEvent ( pFnTestNavMeshPath, &TestNavMeshPath_Parms, NULL );
};

// Function Engine.CheatManager.SetOnlineDebugLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            DebugLevel                     ( CPF_Parm )

void UCheatManager::SetOnlineDebugLevel ( int DebugLevel )
{
	static UFunction* pFnSetOnlineDebugLevel = NULL;

	if ( ! pFnSetOnlineDebugLevel )
		pFnSetOnlineDebugLevel = (UFunction*) UObject::GObjObjects()->Data[ 16502 ];

	UCheatManager_execSetOnlineDebugLevel_Parms SetOnlineDebugLevel_Parms;
	SetOnlineDebugLevel_Parms.DebugLevel = DebugLevel;

	this->ProcessEvent ( pFnSetOnlineDebugLevel, &SetOnlineDebugLevel_Parms, NULL );
};

// Function Engine.CheatManager.TestLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::TestLevel ( )
{
	static UFunction* pFnTestLevel = NULL;

	if ( ! pFnTestLevel )
		pFnTestLevel = (UFunction*) UObject::GObjObjects()->Data[ 16498 ];

	UCheatManager_execTestLevel_Parms TestLevel_Parms;

	this->ProcessEvent ( pFnTestLevel, &TestLevel_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelOut ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelOut = NULL;

	if ( ! pFnStreamLevelOut )
		pFnStreamLevelOut = (UFunction*) UObject::GObjObjects()->Data[ 16496 ];

	UCheatManager_execStreamLevelOut_Parms StreamLevelOut_Parms;
	memcpy ( &StreamLevelOut_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelOut, &StreamLevelOut_Parms, NULL );
};

// Function Engine.CheatManager.OnlyLoadLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::OnlyLoadLevel ( struct FName PackageName )
{
	static UFunction* pFnOnlyLoadLevel = NULL;

	if ( ! pFnOnlyLoadLevel )
		pFnOnlyLoadLevel = (UFunction*) UObject::GObjObjects()->Data[ 16494 ];

	UCheatManager_execOnlyLoadLevel_Parms OnlyLoadLevel_Parms;
	memcpy ( &OnlyLoadLevel_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnOnlyLoadLevel, &OnlyLoadLevel_Parms, NULL );
};

// Function Engine.CheatManager.StreamLevelIn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )

void UCheatManager::StreamLevelIn ( struct FName PackageName )
{
	static UFunction* pFnStreamLevelIn = NULL;

	if ( ! pFnStreamLevelIn )
		pFnStreamLevelIn = (UFunction*) UObject::GObjObjects()->Data[ 16492 ];

	UCheatManager_execStreamLevelIn_Parms StreamLevelIn_Parms;
	memcpy ( &StreamLevelIn_Parms.PackageName, &PackageName, 0x8 );

	this->ProcessEvent ( pFnStreamLevelIn, &StreamLevelIn_Parms, NULL );
};

// Function Engine.CheatManager.SetLevelStreamingStatus
// [0x00020002] 
// Parameters infos:
// struct FName                   PackageName                    ( CPF_Parm )
// unsigned long                  bShouldBeLoaded                ( CPF_Parm )
// unsigned long                  bShouldBeVisible               ( CPF_Parm )

void UCheatManager::SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible )
{
	static UFunction* pFnSetLevelStreamingStatus = NULL;

	if ( ! pFnSetLevelStreamingStatus )
		pFnSetLevelStreamingStatus = (UFunction*) UObject::GObjObjects()->Data[ 16486 ];

	UCheatManager_execSetLevelStreamingStatus_Parms SetLevelStreamingStatus_Parms;
	memcpy ( &SetLevelStreamingStatus_Parms.PackageName, &PackageName, 0x8 );
	SetLevelStreamingStatus_Parms.bShouldBeLoaded = bShouldBeLoaded;
	SetLevelStreamingStatus_Parms.bShouldBeVisible = bShouldBeVisible;

	this->ProcessEvent ( pFnSetLevelStreamingStatus, &SetLevelStreamingStatus_Parms, NULL );
};

// Function Engine.CheatManager.AllWeapons
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllWeapons ( )
{
	static UFunction* pFnAllWeapons = NULL;

	if ( ! pFnAllWeapons )
		pFnAllWeapons = (UFunction*) UObject::GObjObjects()->Data[ 16485 ];

	UCheatManager_execAllWeapons_Parms AllWeapons_Parms;

	this->ProcessEvent ( pFnAllWeapons, &AllWeapons_Parms, NULL );
};

// Function Engine.CheatManager.Loaded
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Loaded ( )
{
	static UFunction* pFnLoaded = NULL;

	if ( ! pFnLoaded )
		pFnLoaded = (UFunction*) UObject::GObjObjects()->Data[ 16484 ];

	UCheatManager_execLoaded_Parms Loaded_Parms;

	this->ProcessEvent ( pFnLoaded, &Loaded_Parms, NULL );
};

// Function Engine.CheatManager.ViewClass
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::ViewClass ( class UClass* aClass )
{
	static UFunction* pFnViewClass = NULL;

	if ( ! pFnViewClass )
		pFnViewClass = (UFunction*) UObject::GObjObjects()->Data[ 16479 ];

	UCheatManager_execViewClass_Parms ViewClass_Parms;
	ViewClass_Parms.aClass = aClass;

	this->ProcessEvent ( pFnViewClass, &ViewClass_Parms, NULL );
};

// Function Engine.CheatManager.ViewBot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ViewBot ( )
{
	static UFunction* pFnViewBot = NULL;

	if ( ! pFnViewBot )
		pFnViewBot = (UFunction*) UObject::GObjObjects()->Data[ 16475 ];

	UCheatManager_execViewBot_Parms ViewBot_Parms;

	this->ProcessEvent ( pFnViewBot, &ViewBot_Parms, NULL );
};

// Function Engine.CheatManager.ViewActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   actorName                      ( CPF_Parm )

void UCheatManager::ViewActor ( struct FName actorName )
{
	static UFunction* pFnViewActor = NULL;

	if ( ! pFnViewActor )
		pFnViewActor = (UFunction*) UObject::GObjObjects()->Data[ 16472 ];

	UCheatManager_execViewActor_Parms ViewActor_Parms;
	memcpy ( &ViewActor_Parms.actorName, &actorName, 0x8 );

	this->ProcessEvent ( pFnViewActor, &ViewActor_Parms, NULL );
};

// Function Engine.CheatManager.ViewPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::ViewPlayer ( struct FString S )
{
	static UFunction* pFnViewPlayer = NULL;

	if ( ! pFnViewPlayer )
		pFnViewPlayer = (UFunction*) UObject::GObjObjects()->Data[ 16469 ];

	UCheatManager_execViewPlayer_Parms ViewPlayer_Parms;
	memcpy ( &ViewPlayer_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnViewPlayer, &ViewPlayer_Parms, NULL );
};

// Function Engine.CheatManager.ViewSelf
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bQuiet                         ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::ViewSelf ( unsigned long bQuiet )
{
	static UFunction* pFnViewSelf = NULL;

	if ( ! pFnViewSelf )
		pFnViewSelf = (UFunction*) UObject::GObjObjects()->Data[ 16467 ];

	UCheatManager_execViewSelf_Parms ViewSelf_Parms;
	ViewSelf_Parms.bQuiet = bQuiet;

	this->ProcessEvent ( pFnViewSelf, &ViewSelf_Parms, NULL );
};

// Function Engine.CheatManager.RememberSpot
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::RememberSpot ( )
{
	static UFunction* pFnRememberSpot = NULL;

	if ( ! pFnRememberSpot )
		pFnRememberSpot = (UFunction*) UObject::GObjObjects()->Data[ 16466 ];

	UCheatManager_execRememberSpot_Parms RememberSpot_Parms;

	this->ProcessEvent ( pFnRememberSpot, &RememberSpot_Parms, NULL );
};

// Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::FractureAllMeshesToMaximizeMemoryUsage ( )
{
	static UFunction* pFnFractureAllMeshesToMaximizeMemoryUsage = NULL;

	if ( ! pFnFractureAllMeshesToMaximizeMemoryUsage )
		pFnFractureAllMeshesToMaximizeMemoryUsage = (UFunction*) UObject::GObjObjects()->Data[ 16464 ];

	UCheatManager_execFractureAllMeshesToMaximizeMemoryUsage_Parms FractureAllMeshesToMaximizeMemoryUsage_Parms;

	this->ProcessEvent ( pFnFractureAllMeshesToMaximizeMemoryUsage, &FractureAllMeshesToMaximizeMemoryUsage_Parms, NULL );
};

// Function Engine.CheatManager.FractureAllMeshes
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::FractureAllMeshes ( )
{
	static UFunction* pFnFractureAllMeshes = NULL;

	if ( ! pFnFractureAllMeshes )
		pFnFractureAllMeshes = (UFunction*) UObject::GObjObjects()->Data[ 16462 ];

	UCheatManager_execFractureAllMeshes_Parms FractureAllMeshes_Parms;

	this->ProcessEvent ( pFnFractureAllMeshes, &FractureAllMeshes_Parms, NULL );
};

// Function Engine.CheatManager.DestroyFractures
// [0x00024202] ( FUNC_Exec )
// Parameters infos:
// float                          Radius                         ( CPF_OptionalParm | CPF_Parm )

void UCheatManager::DestroyFractures ( float Radius )
{
	static UFunction* pFnDestroyFractures = NULL;

	if ( ! pFnDestroyFractures )
		pFnDestroyFractures = (UFunction*) UObject::GObjObjects()->Data[ 16459 ];

	UCheatManager_execDestroyFractures_Parms DestroyFractures_Parms;
	DestroyFractures_Parms.Radius = Radius;

	this->ProcessEvent ( pFnDestroyFractures, &DestroyFractures_Parms, NULL );
};

// Function Engine.CheatManager.SuspendAI
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::SuspendAI ( )
{
	static UFunction* pFnSuspendAI = NULL;

	if ( ! pFnSuspendAI )
		pFnSuspendAI = (UFunction*) UObject::GObjObjects()->Data[ 16457 ];

	UCheatManager_execSuspendAI_Parms SuspendAI_Parms;

	this->ProcessEvent ( pFnSuspendAI, &SuspendAI_Parms, NULL );
};

// Function Engine.CheatManager.PlayersOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::PlayersOnly ( )
{
	static UFunction* pFnPlayersOnly = NULL;

	if ( ! pFnPlayersOnly )
		pFnPlayersOnly = (UFunction*) UObject::GObjObjects()->Data[ 16455 ];

	UCheatManager_execPlayersOnly_Parms PlayersOnly_Parms;

	this->ProcessEvent ( pFnPlayersOnly, &PlayersOnly_Parms, NULL );
};

// Function Engine.CheatManager.GiveWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class AWeapon*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassStr                 ( CPF_Parm | CPF_NeedCtorLink )

class AWeapon* UCheatManager::GiveWeapon ( struct FString WeaponClassStr )
{
	static UFunction* pFnGiveWeapon = NULL;

	if ( ! pFnGiveWeapon )
		pFnGiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 16446 ];

	UCheatManager_execGiveWeapon_Parms GiveWeapon_Parms;
	memcpy ( &GiveWeapon_Parms.WeaponClassStr, &WeaponClassStr, 0xC );

	this->ProcessEvent ( pFnGiveWeapon, &GiveWeapon_Parms, NULL );

	return GiveWeapon_Parms.ReturnValue;
};

// Function Engine.CheatManager.Summon
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 ClassName                      ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::Summon ( struct FString ClassName )
{
	static UFunction* pFnSummon = NULL;

	if ( ! pFnSummon )
		pFnSummon = (UFunction*) UObject::GObjObjects()->Data[ 16442 ];

	UCheatManager_execSummon_Parms Summon_Parms;
	memcpy ( &Summon_Parms.ClassName, &ClassName, 0xC );

	this->ProcessEvent ( pFnSummon, &Summon_Parms, NULL );
};

// Function Engine.CheatManager.Avatar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   ClassName                      ( CPF_Parm )

void UCheatManager::Avatar ( struct FName ClassName )
{
	static UFunction* pFnAvatar = NULL;

	if ( ! pFnAvatar )
		pFnAvatar = (UFunction*) UObject::GObjObjects()->Data[ 16435 ];

	UCheatManager_execAvatar_Parms Avatar_Parms;
	memcpy ( &Avatar_Parms.ClassName, &ClassName, 0x8 );

	this->ProcessEvent ( pFnAvatar, &Avatar_Parms, NULL );
};

// Function Engine.CheatManager.KillPawns
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillPawns ( )
{
	static UFunction* pFnKillPawns = NULL;

	if ( ! pFnKillPawns )
		pFnKillPawns = (UFunction*) UObject::GObjObjects()->Data[ 16434 ];

	UCheatManager_execKillPawns_Parms KillPawns_Parms;

	this->ProcessEvent ( pFnKillPawns, &KillPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAllPawns
// [0x00020002] 
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAllPawns ( class UClass* aClass )
{
	static UFunction* pFnKillAllPawns = NULL;

	if ( ! pFnKillAllPawns )
		pFnKillAllPawns = (UFunction*) UObject::GObjObjects()->Data[ 16429 ];

	UCheatManager_execKillAllPawns_Parms KillAllPawns_Parms;
	KillAllPawns_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAllPawns, &KillAllPawns_Parms, NULL );
};

// Function Engine.CheatManager.KillAll
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::KillAll ( class UClass* aClass )
{
	static UFunction* pFnKillAll = NULL;

	if ( ! pFnKillAll )
		pFnKillAll = (UFunction*) UObject::GObjObjects()->Data[ 16426 ];

	UCheatManager_execKillAll_Parms KillAll_Parms;
	KillAll_Parms.aClass = aClass;

	this->ProcessEvent ( pFnKillAll, &KillAll_Parms, NULL );
};

// Function Engine.CheatManager.SetSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetSpeed ( float F )
{
	static UFunction* pFnSetSpeed = NULL;

	if ( ! pFnSetSpeed )
		pFnSetSpeed = (UFunction*) UObject::GObjObjects()->Data[ 16424 ];

	UCheatManager_execSetSpeed_Parms SetSpeed_Parms;
	SetSpeed_Parms.F = F;

	this->ProcessEvent ( pFnSetSpeed, &SetSpeed_Parms, NULL );
};

// Function Engine.CheatManager.SetGravity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetGravity ( float F )
{
	static UFunction* pFnSetGravity = NULL;

	if ( ! pFnSetGravity )
		pFnSetGravity = (UFunction*) UObject::GObjObjects()->Data[ 16421 ];

	UCheatManager_execSetGravity_Parms SetGravity_Parms;
	SetGravity_Parms.F = F;

	this->ProcessEvent ( pFnSetGravity, &SetGravity_Parms, NULL );
};

// Function Engine.CheatManager.SetJumpZ
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::SetJumpZ ( float F )
{
	static UFunction* pFnSetJumpZ = NULL;

	if ( ! pFnSetJumpZ )
		pFnSetJumpZ = (UFunction*) UObject::GObjObjects()->Data[ 16419 ];

	UCheatManager_execSetJumpZ_Parms SetJumpZ_Parms;
	SetJumpZ_Parms.F = F;

	this->ProcessEvent ( pFnSetJumpZ, &SetJumpZ_Parms, NULL );
};

// Function Engine.CheatManager.Slomo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UCheatManager::Slomo ( float T )
{
	static UFunction* pFnSlomo = NULL;

	if ( ! pFnSlomo )
		pFnSlomo = (UFunction*) UObject::GObjObjects()->Data[ 16417 ];

	UCheatManager_execSlomo_Parms Slomo_Parms;
	Slomo_Parms.T = T;

	this->ProcessEvent ( pFnSlomo, &Slomo_Parms, NULL );
};

// Function Engine.CheatManager.God
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::God ( )
{
	static UFunction* pFnGod = NULL;

	if ( ! pFnGod )
		pFnGod = (UFunction*) UObject::GObjObjects()->Data[ 16416 ];

	UCheatManager_execGod_Parms God_Parms;

	this->ProcessEvent ( pFnGod, &God_Parms, NULL );
};

// Function Engine.CheatManager.AllAmmo
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::AllAmmo ( )
{
	static UFunction* pFnAllAmmo = NULL;

	if ( ! pFnAllAmmo )
		pFnAllAmmo = (UFunction*) UObject::GObjObjects()->Data[ 16415 ];

	UCheatManager_execAllAmmo_Parms AllAmmo_Parms;

	this->ProcessEvent ( pFnAllAmmo, &AllAmmo_Parms, NULL );
};

// Function Engine.CheatManager.Ghost
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Ghost ( )
{
	static UFunction* pFnGhost = NULL;

	if ( ! pFnGhost )
		pFnGhost = (UFunction*) UObject::GObjObjects()->Data[ 16412 ];

	UCheatManager_execGhost_Parms Ghost_Parms;

	this->ProcessEvent ( pFnGhost, &Ghost_Parms, NULL );
};

// Function Engine.CheatManager.Walk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Walk ( )
{
	static UFunction* pFnWalk = NULL;

	if ( ! pFnWalk )
		pFnWalk = (UFunction*) UObject::GObjObjects()->Data[ 16409 ];

	UCheatManager_execWalk_Parms Walk_Parms;

	this->ProcessEvent ( pFnWalk, &Walk_Parms, NULL );
};

// Function Engine.CheatManager.Fly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Fly ( )
{
	static UFunction* pFnFly = NULL;

	if ( ! pFnFly )
		pFnFly = (UFunction*) UObject::GObjObjects()->Data[ 16406 ];

	UCheatManager_execFly_Parms Fly_Parms;

	this->ProcessEvent ( pFnFly, &Fly_Parms, NULL );
};

// Function Engine.CheatManager.Amphibious
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Amphibious ( )
{
	static UFunction* pFnAmphibious = NULL;

	if ( ! pFnAmphibious )
		pFnAmphibious = (UFunction*) UObject::GObjObjects()->Data[ 16405 ];

	UCheatManager_execAmphibious_Parms Amphibious_Parms;

	this->ProcessEvent ( pFnAmphibious, &Amphibious_Parms, NULL );
};

// Function Engine.CheatManager.EndPath
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::EndPath ( )
{
	static UFunction* pFnEndPath = NULL;

	if ( ! pFnEndPath )
		pFnEndPath = (UFunction*) UObject::GObjObjects()->Data[ 16404 ];

	UCheatManager_execEndPath_Parms EndPath_Parms;

	this->ProcessEvent ( pFnEndPath, &EndPath_Parms, NULL );
};

// Function Engine.CheatManager.ChangeSize
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UCheatManager::ChangeSize ( float F )
{
	static UFunction* pFnChangeSize = NULL;

	if ( ! pFnChangeSize )
		pFnChangeSize = (UFunction*) UObject::GObjObjects()->Data[ 16402 ];

	UCheatManager_execChangeSize_Parms ChangeSize_Parms;
	ChangeSize_Parms.F = F;

	this->ProcessEvent ( pFnChangeSize, &ChangeSize_Parms, NULL );
};

// Function Engine.CheatManager.Teleport
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::Teleport ( )
{
	static UFunction* pFnTeleport = NULL;

	if ( ! pFnTeleport )
		pFnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 16396 ];

	UCheatManager_execTeleport_Parms Teleport_Parms;

	this->ProcessEvent ( pFnTeleport, &Teleport_Parms, NULL );
};

// Function Engine.CheatManager.KillViewedActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::KillViewedActor ( )
{
	static UFunction* pFnKillViewedActor = NULL;

	if ( ! pFnKillViewedActor )
		pFnKillViewedActor = (UFunction*) UObject::GObjObjects()->Data[ 16395 ];

	UCheatManager_execKillViewedActor_Parms KillViewedActor_Parms;

	this->ProcessEvent ( pFnKillViewedActor, &KillViewedActor_Parms, NULL );
};

// Function Engine.CheatManager.WriteToLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Param                          ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::WriteToLog ( struct FString Param )
{
	static UFunction* pFnWriteToLog = NULL;

	if ( ! pFnWriteToLog )
		pFnWriteToLog = (UFunction*) UObject::GObjObjects()->Data[ 16393 ];

	UCheatManager_execWriteToLog_Parms WriteToLog_Parms;
	memcpy ( &WriteToLog_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnWriteToLog, &WriteToLog_Parms, NULL );
};

// Function Engine.CheatManager.FreezeFrame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Delay                          ( CPF_Parm )

void UCheatManager::FreezeFrame ( float Delay )
{
	static UFunction* pFnFreezeFrame = NULL;

	if ( ! pFnFreezeFrame )
		pFnFreezeFrame = (UFunction*) UObject::GObjObjects()->Data[ 16390 ];

	UCheatManager_execFreezeFrame_Parms FreezeFrame_Parms;
	FreezeFrame_Parms.Delay = Delay;

	this->ProcessEvent ( pFnFreezeFrame, &FreezeFrame_Parms, NULL );
};

// Function Engine.CheatManager.ListDynamicActors
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::ListDynamicActors ( )
{
	static UFunction* pFnListDynamicActors = NULL;

	if ( ! pFnListDynamicActors )
		pFnListDynamicActors = (UFunction*) UObject::GObjObjects()->Data[ 16389 ];

	UCheatManager_execListDynamicActors_Parms ListDynamicActors_Parms;

	this->ProcessEvent ( pFnListDynamicActors, &ListDynamicActors_Parms, NULL );
};

// Function Engine.CheatManager.DebugPause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::DebugPause ( )
{
	static UFunction* pFnDebugPause = NULL;

	if ( ! pFnDebugPause )
		pFnDebugPause = (UFunction*) UObject::GObjObjects()->Data[ 16388 ];

	UCheatManager_execDebugPause_Parms DebugPause_Parms;

	this->ProcessEvent ( pFnDebugPause, &DebugPause_Parms, NULL );
};

// Function Engine.CheatManager.EditAIByTrace
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UCheatManager::EditAIByTrace ( )
{
	static UFunction* pFnEditAIByTrace = NULL;

	if ( ! pFnEditAIByTrace )
		pFnEditAIByTrace = (UFunction*) UObject::GObjObjects()->Data[ 16381 ];

	UCheatManager_execEditAIByTrace_Parms EditAIByTrace_Parms;

	this->ProcessEvent ( pFnEditAIByTrace, &EditAIByTrace_Parms, NULL );
};

// Function Engine.CheatManager.DebugAI
// [0x00024200] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Category                       ( CPF_OptionalParm | CPF_Parm | CPF_CoerceParm )

void UCheatManager::DebugAI ( struct FName Category )
{
	static UFunction* pFnDebugAI = NULL;

	if ( ! pFnDebugAI )
		pFnDebugAI = (UFunction*) UObject::GObjObjects()->Data[ 16379 ];

	UCheatManager_execDebugAI_Parms DebugAI_Parms;
	memcpy ( &DebugAI_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnDebugAI, &DebugAI_Parms, NULL );
};

// Function Engine.CheatManager.FXStop
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )

void UCheatManager::FXStop ( class UClass* aClass )
{
	static UFunction* pFnFXStop = NULL;

	if ( ! pFnFXStop )
		pFnFXStop = (UFunction*) UObject::GObjObjects()->Data[ 16373 ];

	UCheatManager_execFXStop_Parms FXStop_Parms;
	FXStop_Parms.aClass = aClass;

	this->ProcessEvent ( pFnFXStop, &FXStop_Parms, NULL );
};

// Function Engine.CheatManager.FXPlay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  aClass                         ( CPF_Parm )
// struct FString                 FXAnimPath                     ( CPF_Parm | CPF_NeedCtorLink )

void UCheatManager::FXPlay ( class UClass* aClass, struct FString FXAnimPath )
{
	static UFunction* pFnFXPlay = NULL;

	if ( ! pFnFXPlay )
		pFnFXPlay = (UFunction*) UObject::GObjObjects()->Data[ 16363 ];

	UCheatManager_execFXPlay_Parms FXPlay_Parms;
	FXPlay_Parms.aClass = aClass;
	memcpy ( &FXPlay_Parms.FXAnimPath, &FXAnimPath, 0xC );

	this->ProcessEvent ( pFnFXPlay, &FXPlay_Parms, NULL );
};

// Function Engine.CloudSaveSystem.GetKeyValue
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )
// struct FPlatformInterfaceDelegateResult Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudSaveSystem::GetKeyValue ( int SaveSlot, struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value )
{
	static UFunction* pFnGetKeyValue = NULL;

	if ( ! pFnGetKeyValue )
		pFnGetKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 16778 ];

	UCloudSaveSystem_execGetKeyValue_Parms GetKeyValue_Parms;
	GetKeyValue_Parms.SaveSlot = SaveSlot;
	memcpy ( &GetKeyValue_Parms.KeyName, &KeyName, 0xC );
	GetKeyValue_Parms.Type = Type;

	this->ProcessEvent ( pFnGetKeyValue, &GetKeyValue_Parms, NULL );

	if ( Value )
		memcpy ( Value, &GetKeyValue_Parms.Value, 0x34 );

	return GetKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.GetDataStoreIDAndBlobNameForSaveSlot
// [0x00C40003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FString                 DataStoreID                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 DataBlobName                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudSaveSystem::GetDataStoreIDAndBlobNameForSaveSlot ( int SaveSlot, struct FString* DataStoreID, struct FString* DataBlobName )
{
	static UFunction* pFnGetDataStoreIDAndBlobNameForSaveSlot = NULL;

	if ( ! pFnGetDataStoreIDAndBlobNameForSaveSlot )
		pFnGetDataStoreIDAndBlobNameForSaveSlot = (UFunction*) UObject::GObjObjects()->Data[ 16743 ];

	UCloudSaveSystem_execGetDataStoreIDAndBlobNameForSaveSlot_Parms GetDataStoreIDAndBlobNameForSaveSlot_Parms;
	GetDataStoreIDAndBlobNameForSaveSlot_Parms.SaveSlot = SaveSlot;

	this->ProcessEvent ( pFnGetDataStoreIDAndBlobNameForSaveSlot, &GetDataStoreIDAndBlobNameForSaveSlot_Parms, NULL );

	if ( DataStoreID )
		memcpy ( DataStoreID, &GetDataStoreIDAndBlobNameForSaveSlot_Parms.DataStoreID, 0xC );

	if ( DataBlobName )
		memcpy ( DataBlobName, &GetDataStoreIDAndBlobNameForSaveSlot_Parms.DataBlobName, 0xC );

	return GetDataStoreIDAndBlobNameForSaveSlot_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.SetKeyValue
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FPlatformInterfaceData  Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudSaveSystem::SetKeyValue ( int SaveSlot, struct FString KeyName, struct FPlatformInterfaceData* Value )
{
	static UFunction* pFnSetKeyValue = NULL;

	if ( ! pFnSetKeyValue )
		pFnSetKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 16779 ];

	UCloudSaveSystem_execSetKeyValue_Parms SetKeyValue_Parms;
	SetKeyValue_Parms.SaveSlot = SaveSlot;
	memcpy ( &SetKeyValue_Parms.KeyName, &KeyName, 0xC );

	this->ProcessEvent ( pFnSetKeyValue, &SetKeyValue_Parms, NULL );

	if ( Value )
		memcpy ( Value, &SetKeyValue_Parms.Value, 0x30 );

	return SetKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.InternalSetSaveSlotKeyValues
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FString                 DataStoreID                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveDataBlobName               ( CPF_Parm | CPF_NeedCtorLink )

bool UCloudSaveSystem::InternalSetSaveSlotKeyValues ( int SaveSlot, struct FString DataStoreID, struct FString SaveDataBlobName )
{
	static UFunction* pFnInternalSetSaveSlotKeyValues = NULL;

	if ( ! pFnInternalSetSaveSlotKeyValues )
		pFnInternalSetSaveSlotKeyValues = (UFunction*) UObject::GObjObjects()->Data[ 16850 ];

	UCloudSaveSystem_execInternalSetSaveSlotKeyValues_Parms InternalSetSaveSlotKeyValues_Parms;
	InternalSetSaveSlotKeyValues_Parms.SaveSlot = SaveSlot;
	memcpy ( &InternalSetSaveSlotKeyValues_Parms.DataStoreID, &DataStoreID, 0xC );
	memcpy ( &InternalSetSaveSlotKeyValues_Parms.SaveDataBlobName, &SaveDataBlobName, 0xC );

	this->ProcessEvent ( pFnInternalSetSaveSlotKeyValues, &InternalSetSaveSlotKeyValues_Parms, NULL );

	return InternalSetSaveSlotKeyValues_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.SetSaveSlotKeyValues
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataStoreID                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveDataBlobName               ( CPF_Parm | CPF_NeedCtorLink )
// int                            SaveSlot                       ( CPF_Parm | CPF_OutParm )

bool UCloudSaveSystem::SetSaveSlotKeyValues ( struct FString DataStoreID, struct FString SaveDataBlobName, int* SaveSlot )
{
	static UFunction* pFnSetSaveSlotKeyValues = NULL;

	if ( ! pFnSetSaveSlotKeyValues )
		pFnSetSaveSlotKeyValues = (UFunction*) UObject::GObjObjects()->Data[ 16851 ];

	UCloudSaveSystem_execSetSaveSlotKeyValues_Parms SetSaveSlotKeyValues_Parms;
	memcpy ( &SetSaveSlotKeyValues_Parms.DataStoreID, &DataStoreID, 0xC );
	memcpy ( &SetSaveSlotKeyValues_Parms.SaveDataBlobName, &SaveDataBlobName, 0xC );

	this->ProcessEvent ( pFnSetSaveSlotKeyValues, &SetSaveSlotKeyValues_Parms, NULL );

	if ( SaveSlot )
		*SaveSlot = SetSaveSlotKeyValues_Parms.SaveSlot;

	return SetSaveSlotKeyValues_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.OnDeleteSaveDataComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSucessfull                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystem::OnDeleteSaveDataComplete ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error )
{
	static UFunction* pFnOnDeleteSaveDataComplete = NULL;

	if ( ! pFnOnDeleteSaveDataComplete )
		pFnOnDeleteSaveDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 16838 ];

	UCloudSaveSystem_execOnDeleteSaveDataComplete_Parms OnDeleteSaveDataComplete_Parms;
	OnDeleteSaveDataComplete_Parms.bWasSucessfull = bWasSucessfull;
	memcpy ( &OnDeleteSaveDataComplete_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &OnDeleteSaveDataComplete_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &OnDeleteSaveDataComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnDeleteSaveDataComplete, &OnDeleteSaveDataComplete_Parms, NULL );
};

// Function Engine.CloudSaveSystem.DeleteSaveData
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FScriptDelegate         InDeleteSaveDataCallback       ( CPF_Parm | CPF_NeedCtorLink )

bool UCloudSaveSystem::DeleteSaveData ( int SaveSlot, struct FScriptDelegate InDeleteSaveDataCallback )
{
	static UFunction* pFnDeleteSaveData = NULL;

	if ( ! pFnDeleteSaveData )
		pFnDeleteSaveData = (UFunction*) UObject::GObjObjects()->Data[ 16827 ];

	UCloudSaveSystem_execDeleteSaveData_Parms DeleteSaveData_Parms;
	DeleteSaveData_Parms.SaveSlot = SaveSlot;
	memcpy ( &DeleteSaveData_Parms.InDeleteSaveDataCallback, &InDeleteSaveDataCallback, 0x10 );

	this->ProcessEvent ( pFnDeleteSaveData, &DeleteSaveData_Parms, NULL );

	return DeleteSaveData_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.OnSetSaveDataComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSucessfull                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystem::OnSetSaveDataComplete ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error )
{
	static UFunction* pFnOnSetSaveDataComplete = NULL;

	if ( ! pFnOnSetSaveDataComplete )
		pFnOnSetSaveDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 16819 ];

	UCloudSaveSystem_execOnSetSaveDataComplete_Parms OnSetSaveDataComplete_Parms;
	OnSetSaveDataComplete_Parms.bWasSucessfull = bWasSucessfull;
	memcpy ( &OnSetSaveDataComplete_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &OnSetSaveDataComplete_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &OnSetSaveDataComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnSetSaveDataComplete, &OnSetSaveDataComplete_Parms, NULL );
};

// Function Engine.CloudSaveSystem.SetSaveData
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// int                            SaveSlot                       ( CPF_Parm )
// struct FScriptDelegate         InSetSaveDataCallback          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        SaveDataBlob                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudSaveSystem::SetSaveData ( int SaveSlot, struct FScriptDelegate InSetSaveDataCallback, TArray< unsigned char >* SaveDataBlob )
{
	static UFunction* pFnSetSaveData = NULL;

	if ( ! pFnSetSaveData )
		pFnSetSaveData = (UFunction*) UObject::GObjObjects()->Data[ 16805 ];

	UCloudSaveSystem_execSetSaveData_Parms SetSaveData_Parms;
	SetSaveData_Parms.SaveSlot = SaveSlot;
	memcpy ( &SetSaveData_Parms.InSetSaveDataCallback, &InSetSaveDataCallback, 0x10 );

	this->ProcessEvent ( pFnSetSaveData, &SetSaveData_Parms, NULL );

	if ( SaveDataBlob )
		memcpy ( SaveDataBlob, &SetSaveData_Parms.SaveDataBlob, 0xC );
};

// Function Engine.CloudSaveSystem.OnGetSaveDataComplete
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        DataBlob                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudSaveSystem::OnGetSaveDataComplete ( unsigned long bWasSuccessful, struct FString StorageID, struct FString BlobName, struct FString Error, TArray< unsigned char >* DataBlob )
{
	static UFunction* pFnOnGetSaveDataComplete = NULL;

	if ( ! pFnOnGetSaveDataComplete )
		pFnOnGetSaveDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 16795 ];

	UCloudSaveSystem_execOnGetSaveDataComplete_Parms OnGetSaveDataComplete_Parms;
	OnGetSaveDataComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnGetSaveDataComplete_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &OnGetSaveDataComplete_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &OnGetSaveDataComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnGetSaveDataComplete, &OnGetSaveDataComplete_Parms, NULL );

	if ( DataBlob )
		memcpy ( DataBlob, &OnGetSaveDataComplete_Parms.DataBlob, 0xC );
};

// Function Engine.CloudSaveSystem.GetSaveData
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// int                            SaveSlot                       ( CPF_Parm )
// struct FScriptDelegate         OnGetSaveDataCallback          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystem::GetSaveData ( int SaveSlot, struct FScriptDelegate OnGetSaveDataCallback )
{
	static UFunction* pFnGetSaveData = NULL;

	if ( ! pFnGetSaveData )
		pFnGetSaveData = (UFunction*) UObject::GObjObjects()->Data[ 16780 ];

	UCloudSaveSystem_execGetSaveData_Parms GetSaveData_Parms;
	GetSaveData_Parms.SaveSlot = SaveSlot;
	memcpy ( &GetSaveData_Parms.OnGetSaveDataCallback, &OnGetSaveDataCallback, 0x10 );

	this->ProcessEvent ( pFnGetSaveData, &GetSaveData_Parms, NULL );
};

// Function Engine.CloudSaveSystem.Init
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class UCloudSaveSystemKVSInterface* InKeyValueStore                ( CPF_Parm )
// class UCloudSaveSystemDataBlobStoreInterface* InDataBlobStore                ( CPF_Parm )
// int                            VersionNumber                  ( CPF_Parm )

void UCloudSaveSystem::Init ( class UCloudSaveSystemKVSInterface* InKeyValueStore, class UCloudSaveSystemDataBlobStoreInterface* InDataBlobStore, int VersionNumber )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 16772 ];

	UCloudSaveSystem_execInit_Parms Init_Parms;
	Init_Parms.InKeyValueStore = InKeyValueStore;
	Init_Parms.InDataBlobStore = InDataBlobStore;
	Init_Parms.VersionNumber = VersionNumber;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.CloudSaveSystem.DeserializeObject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ObjectClass                    ( CPF_Parm )
// unsigned char                  VersionSupport                 ( CPF_Parm )
// int                            DataVersion                    ( CPF_Parm )
// TArray< unsigned char >        Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UObject* UCloudSaveSystem::DeserializeObject ( class UClass* ObjectClass, unsigned char VersionSupport, int DataVersion, TArray< unsigned char >* Data )
{
	static UFunction* pFnDeserializeObject = NULL;

	if ( ! pFnDeserializeObject )
		pFnDeserializeObject = (UFunction*) UObject::GObjObjects()->Data[ 16765 ];

	UCloudSaveSystem_execDeserializeObject_Parms DeserializeObject_Parms;
	DeserializeObject_Parms.ObjectClass = ObjectClass;
	DeserializeObject_Parms.VersionSupport = VersionSupport;
	DeserializeObject_Parms.DataVersion = DataVersion;

	pFnDeserializeObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeserializeObject, &DeserializeObject_Parms, NULL );

	pFnDeserializeObject->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &DeserializeObject_Parms.Data, 0xC );

	return DeserializeObject_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.SerializeObject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ObjectToSerialize              ( CPF_Parm )
// int                            DataVersion                    ( CPF_Parm )
// TArray< unsigned char >        Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudSaveSystem::SerializeObject ( class UObject* ObjectToSerialize, int DataVersion, TArray< unsigned char >* Data )
{
	static UFunction* pFnSerializeObject = NULL;

	if ( ! pFnSerializeObject )
		pFnSerializeObject = (UFunction*) UObject::GObjObjects()->Data[ 16760 ];

	UCloudSaveSystem_execSerializeObject_Parms SerializeObject_Parms;
	SerializeObject_Parms.ObjectToSerialize = ObjectToSerialize;
	SerializeObject_Parms.DataVersion = DataVersion;

	pFnSerializeObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeObject, &SerializeObject_Parms, NULL );

	pFnSerializeObject->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SerializeObject_Parms.Data, 0xC );
};

// Function Engine.CloudSaveSystem.AreAnySlotOperationsActive
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCloudSaveSystem::AreAnySlotOperationsActive ( )
{
	static UFunction* pFnAreAnySlotOperationsActive = NULL;

	if ( ! pFnAreAnySlotOperationsActive )
		pFnAreAnySlotOperationsActive = (UFunction*) UObject::GObjObjects()->Data[ 16758 ];

	UCloudSaveSystem_execAreAnySlotOperationsActive_Parms AreAnySlotOperationsActive_Parms;

	this->ProcessEvent ( pFnAreAnySlotOperationsActive, &AreAnySlotOperationsActive_Parms, NULL );

	return AreAnySlotOperationsActive_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.IsDeleteOperationActive
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCloudSaveSystem::IsDeleteOperationActive ( )
{
	static UFunction* pFnIsDeleteOperationActive = NULL;

	if ( ! pFnIsDeleteOperationActive )
		pFnIsDeleteOperationActive = (UFunction*) UObject::GObjObjects()->Data[ 16755 ];

	UCloudSaveSystem_execIsDeleteOperationActive_Parms IsDeleteOperationActive_Parms;

	this->ProcessEvent ( pFnIsDeleteOperationActive, &IsDeleteOperationActive_Parms, NULL );

	return IsDeleteOperationActive_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.IsOperationActiveForSlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SlotIndex                      ( CPF_Parm )

bool UCloudSaveSystem::IsOperationActiveForSlot ( int SlotIndex )
{
	static UFunction* pFnIsOperationActiveForSlot = NULL;

	if ( ! pFnIsOperationActiveForSlot )
		pFnIsOperationActiveForSlot = (UFunction*) UObject::GObjObjects()->Data[ 16750 ];

	UCloudSaveSystem_execIsOperationActiveForSlot_Parms IsOperationActiveForSlot_Parms;
	IsOperationActiveForSlot_Parms.SlotIndex = SlotIndex;

	this->ProcessEvent ( pFnIsOperationActiveForSlot, &IsOperationActiveForSlot_Parms, NULL );

	return IsOperationActiveForSlot_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.WriteNumSaveSlots
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NumSaveSlots                   ( CPF_Parm )

bool UCloudSaveSystem::WriteNumSaveSlots ( int NumSaveSlots )
{
	static UFunction* pFnWriteNumSaveSlots = NULL;

	if ( ! pFnWriteNumSaveSlots )
		pFnWriteNumSaveSlots = (UFunction*) UObject::GObjObjects()->Data[ 16744 ];

	UCloudSaveSystem_execWriteNumSaveSlots_Parms WriteNumSaveSlots_Parms;
	WriteNumSaveSlots_Parms.NumSaveSlots = NumSaveSlots;

	this->ProcessEvent ( pFnWriteNumSaveSlots, &WriteNumSaveSlots_Parms, NULL );

	return WriteNumSaveSlots_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.DoesSaveSlotKeyValueDataAlreadyExist
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 DataStoreID                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DataBlobName                   ( CPF_Parm | CPF_NeedCtorLink )

int UCloudSaveSystem::DoesSaveSlotKeyValueDataAlreadyExist ( struct FString DataStoreID, struct FString DataBlobName )
{
	static UFunction* pFnDoesSaveSlotKeyValueDataAlreadyExist = NULL;

	if ( ! pFnDoesSaveSlotKeyValueDataAlreadyExist )
		pFnDoesSaveSlotKeyValueDataAlreadyExist = (UFunction*) UObject::GObjObjects()->Data[ 16734 ];

	UCloudSaveSystem_execDoesSaveSlotKeyValueDataAlreadyExist_Parms DoesSaveSlotKeyValueDataAlreadyExist_Parms;
	memcpy ( &DoesSaveSlotKeyValueDataAlreadyExist_Parms.DataStoreID, &DataStoreID, 0xC );
	memcpy ( &DoesSaveSlotKeyValueDataAlreadyExist_Parms.DataBlobName, &DataBlobName, 0xC );

	this->ProcessEvent ( pFnDoesSaveSlotKeyValueDataAlreadyExist, &DoesSaveSlotKeyValueDataAlreadyExist_Parms, NULL );

	return DoesSaveSlotKeyValueDataAlreadyExist_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.GetNumberOfSaveSlots
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NumSaveSlots                   ( CPF_Parm | CPF_OutParm )

bool UCloudSaveSystem::GetNumberOfSaveSlots ( int* NumSaveSlots )
{
	static UFunction* pFnGetNumberOfSaveSlots = NULL;

	if ( ! pFnGetNumberOfSaveSlots )
		pFnGetNumberOfSaveSlots = (UFunction*) UObject::GObjObjects()->Data[ 16723 ];

	UCloudSaveSystem_execGetNumberOfSaveSlots_Parms GetNumberOfSaveSlots_Parms;

	this->ProcessEvent ( pFnGetNumberOfSaveSlots, &GetNumberOfSaveSlots_Parms, NULL );

	if ( NumSaveSlots )
		*NumSaveSlots = GetNumberOfSaveSlots_Parms.NumSaveSlots;

	return GetNumberOfSaveSlots_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystem.SaveSystemCallback
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystem::SaveSystemCallback ( unsigned long bWasSuccessful, int SaveSlot, struct FString Error )
{
	static UFunction* pFnSaveSystemCallback = NULL;

	if ( ! pFnSaveSystemCallback )
		pFnSaveSystemCallback = (UFunction*) UObject::GObjObjects()->Data[ 16719 ];

	UCloudSaveSystem_execSaveSystemCallback_Parms SaveSystemCallback_Parms;
	SaveSystemCallback_Parms.bWasSuccessful = bWasSuccessful;
	SaveSystemCallback_Parms.SaveSlot = SaveSlot;
	memcpy ( &SaveSystemCallback_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnSaveSystemCallback, &SaveSystemCallback_Parms, NULL );
};

// Function Engine.CloudSaveSystem.OnGetSaveDataCallback
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// int                            SaveSlot                       ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        DataBlob                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudSaveSystem::OnGetSaveDataCallback ( unsigned long bWasSuccessful, int SaveSlot, struct FString Error, TArray< unsigned char >* DataBlob )
{
	static UFunction* pFnOnGetSaveDataCallback = NULL;

	if ( ! pFnOnGetSaveDataCallback )
		pFnOnGetSaveDataCallback = (UFunction*) UObject::GObjObjects()->Data[ 16713 ];

	UCloudSaveSystem_execOnGetSaveDataCallback_Parms OnGetSaveDataCallback_Parms;
	OnGetSaveDataCallback_Parms.bWasSuccessful = bWasSuccessful;
	OnGetSaveDataCallback_Parms.SaveSlot = SaveSlot;
	memcpy ( &OnGetSaveDataCallback_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnGetSaveDataCallback, &OnGetSaveDataCallback_Parms, NULL );

	if ( DataBlob )
		memcpy ( DataBlob, &OnGetSaveDataCallback_Parms.DataBlob, 0xC );
};

// Function Engine.DamageType.VehicleDamageScalingFor
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AVehicle*                V                              ( CPF_Parm )

float UDamageType::VehicleDamageScalingFor ( class AVehicle* V )
{
	static UFunction* pFnVehicleDamageScalingFor = NULL;

	if ( ! pFnVehicleDamageScalingFor )
		pFnVehicleDamageScalingFor = (UFunction*) UObject::GObjObjects()->Data[ 17835 ];

	UDamageType_execVehicleDamageScalingFor_Parms VehicleDamageScalingFor_Parms;
	VehicleDamageScalingFor_Parms.V = V;

	this->ProcessEvent ( pFnVehicleDamageScalingFor, &VehicleDamageScalingFor_Parms, NULL );

	return VehicleDamageScalingFor_Parms.ReturnValue;
};

// Function Engine.DateTime.AddSeconds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

class UDateTime* UDateTime::AddSeconds ( int Amount )
{
	static UFunction* pFnAddSeconds = NULL;

	if ( ! pFnAddSeconds )
		pFnAddSeconds = (UFunction*) UObject::GObjObjects()->Data[ 36567 ];

	UDateTime_execAddSeconds_Parms AddSeconds_Parms;
	AddSeconds_Parms.Amount = Amount;

	pFnAddSeconds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSeconds, &AddSeconds_Parms, NULL );

	pFnAddSeconds->FunctionFlags |= 0x400;

	return AddSeconds_Parms.ReturnValue;
};

// Function Engine.DateTime.AddMinutes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

class UDateTime* UDateTime::AddMinutes ( int Amount )
{
	static UFunction* pFnAddMinutes = NULL;

	if ( ! pFnAddMinutes )
		pFnAddMinutes = (UFunction*) UObject::GObjObjects()->Data[ 36568 ];

	UDateTime_execAddMinutes_Parms AddMinutes_Parms;
	AddMinutes_Parms.Amount = Amount;

	pFnAddMinutes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMinutes, &AddMinutes_Parms, NULL );

	pFnAddMinutes->FunctionFlags |= 0x400;

	return AddMinutes_Parms.ReturnValue;
};

// Function Engine.DateTime.AddHours
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

class UDateTime* UDateTime::AddHours ( int Amount )
{
	static UFunction* pFnAddHours = NULL;

	if ( ! pFnAddHours )
		pFnAddHours = (UFunction*) UObject::GObjObjects()->Data[ 36571 ];

	UDateTime_execAddHours_Parms AddHours_Parms;
	AddHours_Parms.Amount = Amount;

	pFnAddHours->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddHours, &AddHours_Parms, NULL );

	pFnAddHours->FunctionFlags |= 0x400;

	return AddHours_Parms.ReturnValue;
};

// Function Engine.DateTime.AddDays
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

class UDateTime* UDateTime::AddDays ( int Amount )
{
	static UFunction* pFnAddDays = NULL;

	if ( ! pFnAddDays )
		pFnAddDays = (UFunction*) UObject::GObjObjects()->Data[ 36574 ];

	UDateTime_execAddDays_Parms AddDays_Parms;
	AddDays_Parms.Amount = Amount;

	pFnAddDays->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDays, &AddDays_Parms, NULL );

	pFnAddDays->FunctionFlags |= 0x400;

	return AddDays_Parms.ReturnValue;
};

// Function Engine.DateTime.AddMonths
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

class UDateTime* UDateTime::AddMonths ( int Amount )
{
	static UFunction* pFnAddMonths = NULL;

	if ( ! pFnAddMonths )
		pFnAddMonths = (UFunction*) UObject::GObjObjects()->Data[ 36577 ];

	UDateTime_execAddMonths_Parms AddMonths_Parms;
	AddMonths_Parms.Amount = Amount;

	pFnAddMonths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMonths, &AddMonths_Parms, NULL );

	pFnAddMonths->FunctionFlags |= 0x400;

	return AddMonths_Parms.ReturnValue;
};

// Function Engine.DateTime.AddYears
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

class UDateTime* UDateTime::AddYears ( int Amount )
{
	static UFunction* pFnAddYears = NULL;

	if ( ! pFnAddYears )
		pFnAddYears = (UFunction*) UObject::GObjObjects()->Data[ 36580 ];

	UDateTime_execAddYears_Parms AddYears_Parms;
	AddYears_Parms.Amount = Amount;

	pFnAddYears->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddYears, &AddYears_Parms, NULL );

	pFnAddYears->FunctionFlags |= 0x400;

	return AddYears_Parms.ReturnValue;
};

// Function Engine.DateTime.ToTimeZone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  InTimeZone                     ( CPF_Parm )

class UDateTime* UDateTime::ToTimeZone ( unsigned char InTimeZone )
{
	static UFunction* pFnToTimeZone = NULL;

	if ( ! pFnToTimeZone )
		pFnToTimeZone = (UFunction*) UObject::GObjObjects()->Data[ 36583 ];

	UDateTime_execToTimeZone_Parms ToTimeZone_Parms;
	ToTimeZone_Parms.InTimeZone = InTimeZone;

	pFnToTimeZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToTimeZone, &ToTimeZone_Parms, NULL );

	pFnToTimeZone->FunctionFlags |= 0x400;

	return ToTimeZone_Parms.ReturnValue;
};

// Function Engine.DateTime.ToUTC
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDateTime* UDateTime::ToUTC ( )
{
	static UFunction* pFnToUTC = NULL;

	if ( ! pFnToUTC )
		pFnToUTC = (UFunction*) UObject::GObjObjects()->Data[ 36586 ];

	UDateTime_execToUTC_Parms ToUTC_Parms;

	pFnToUTC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToUTC, &ToUTC_Parms, NULL );

	pFnToUTC->FunctionFlags |= 0x400;

	return ToUTC_Parms.ReturnValue;
};

// Function Engine.DateTime.ToLocal
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDateTime* UDateTime::ToLocal ( )
{
	static UFunction* pFnToLocal = NULL;

	if ( ! pFnToLocal )
		pFnToLocal = (UFunction*) UObject::GObjObjects()->Data[ 36591 ];

	UDateTime_execToLocal_Parms ToLocal_Parms;

	pFnToLocal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToLocal, &ToLocal_Parms, NULL );

	pFnToLocal->FunctionFlags |= 0x400;

	return ToLocal_Parms.ReturnValue;
};

// Function Engine.DateTime.ToString
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UDateTime::ToString ( )
{
	static UFunction* pFnToString = NULL;

	if ( ! pFnToString )
		pFnToString = (UFunction*) UObject::GObjObjects()->Data[ 36593 ];

	UDateTime_execToString_Parms ToString_Parms;

	pFnToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToString, &ToString_Parms, NULL );

	pFnToString->FunctionFlags |= 0x400;

	return ToString_Parms.ReturnValue;
};

// Function Engine.DateTime.ToStruct
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FDateTimeStruct         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FDateTimeStruct UDateTime::ToStruct ( )
{
	static UFunction* pFnToStruct = NULL;

	if ( ! pFnToStruct )
		pFnToStruct = (UFunction*) UObject::GObjObjects()->Data[ 36595 ];

	UDateTime_execToStruct_Parms ToStruct_Parms;

	this->ProcessEvent ( pFnToStruct, &ToStruct_Parms, NULL );

	return ToStruct_Parms.ReturnValue;
};

// Function Engine.DateTime.FromStruct
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FDateTimeStruct         Data                           ( CPF_Parm )

class UDateTime* UDateTime::FromStruct ( struct FDateTimeStruct Data )
{
	static UFunction* pFnFromStruct = NULL;

	if ( ! pFnFromStruct )
		pFnFromStruct = (UFunction*) UObject::GObjObjects()->Data[ 36597 ];

	UDateTime_execFromStruct_Parms FromStruct_Parms;
	memcpy ( &FromStruct_Parms.Data, &Data, 0x20 );

	this->ProcessEvent ( pFnFromStruct, &FromStruct_Parms, NULL );

	return FromStruct_Parms.ReturnValue;
};

// Function Engine.DateTime.FromDateTime
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InYear                         ( CPF_Parm )
// int                            InMonth                        ( CPF_Parm )
// int                            InDay                          ( CPF_Parm )
// int                            InHour                         ( CPF_Parm )
// int                            InMinute                       ( CPF_Parm )
// int                            InSecond                       ( CPF_Parm )
// unsigned char                  InTimeZone                     ( CPF_Parm )

class UDateTime* UDateTime::FromDateTime ( int InYear, int InMonth, int InDay, int InHour, int InMinute, int InSecond, unsigned char InTimeZone )
{
	static UFunction* pFnFromDateTime = NULL;

	if ( ! pFnFromDateTime )
		pFnFromDateTime = (UFunction*) UObject::GObjObjects()->Data[ 36617 ];

	UDateTime_execFromDateTime_Parms FromDateTime_Parms;
	FromDateTime_Parms.InYear = InYear;
	FromDateTime_Parms.InMonth = InMonth;
	FromDateTime_Parms.InDay = InDay;
	FromDateTime_Parms.InHour = InHour;
	FromDateTime_Parms.InMinute = InMinute;
	FromDateTime_Parms.InSecond = InSecond;
	FromDateTime_Parms.InTimeZone = InTimeZone;

	pFnFromDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFromDateTime, &FromDateTime_Parms, NULL );

	pFnFromDateTime->FunctionFlags |= 0x400;

	return FromDateTime_Parms.ReturnValue;
};

// Function Engine.DateTime.FromString
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 TimeStamp                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  InTimeZone                     ( CPF_Parm )

class UDateTime* UDateTime::FromString ( struct FString TimeStamp, unsigned char InTimeZone )
{
	static UFunction* pFnFromString = NULL;

	if ( ! pFnFromString )
		pFnFromString = (UFunction*) UObject::GObjObjects()->Data[ 36620 ];

	UDateTime_execFromString_Parms FromString_Parms;
	memcpy ( &FromString_Parms.TimeStamp, &TimeStamp, 0xC );
	FromString_Parms.InTimeZone = InTimeZone;

	pFnFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFromString, &FromString_Parms, NULL );

	pFnFromString->FunctionFlags |= 0x400;

	return FromString_Parms.ReturnValue;
};

// Function Engine.DateTime.FromEpochTime
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDateTime* UDateTime::FromEpochTime ( )
{
	static UFunction* pFnFromEpochTime = NULL;

	if ( ! pFnFromEpochTime )
		pFnFromEpochTime = (UFunction*) UObject::GObjObjects()->Data[ 36629 ];

	UDateTime_execFromEpochTime_Parms FromEpochTime_Parms;

	pFnFromEpochTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFromEpochTime, &FromEpochTime_Parms, NULL );

	pFnFromEpochTime->FunctionFlags |= 0x400;

	return FromEpochTime_Parms.ReturnValue;
};

// Function Engine.DateTime.Now
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDateTime*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDateTime* UDateTime::Now ( )
{
	static UFunction* pFnNow = NULL;

	if ( ! pFnNow )
		pFnNow = (UFunction*) UObject::GObjObjects()->Data[ 36633 ];

	UDateTime_execNow_Parms Now_Parms;

	pFnNow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNow, &Now_Parms, NULL );

	pFnNow->FunctionFlags |= 0x400;

	return Now_Parms.ReturnValue;
};

// Function Engine.DateTime.EpochNow
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UDateTime::EpochNow ( )
{
	static UFunction* pFnEpochNow = NULL;

	if ( ! pFnEpochNow )
		pFnEpochNow = (UFunction*) UObject::GObjObjects()->Data[ 36636 ];

	UDateTime_execEpochNow_Parms EpochNow_Parms;

	pFnEpochNow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEpochNow, &EpochNow_Parms, NULL );

	pFnEpochNow->FunctionFlags |= 0x400;
};

// Function Engine.EngineShare.Init
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UEngineShare::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 19730 ];

	UEngineShare_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.EngineShare.GetPsyVersionNumber
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UEngineShare::GetPsyVersionNumber ( )
{
	static UFunction* pFnGetPsyVersionNumber = NULL;

	if ( ! pFnGetPsyVersionNumber )
		pFnGetPsyVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 19728 ];

	UEngineShare_execGetPsyVersionNumber_Parms GetPsyVersionNumber_Parms;

	pFnGetPsyVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPsyVersionNumber, &GetPsyVersionNumber_Parms, NULL );

	pFnGetPsyVersionNumber->FunctionFlags |= 0x400;

	return GetPsyVersionNumber_Parms.ReturnValue;
};

// Function Engine.EngineShare.GetInstance
// [0x00026400] ( FUNC_Native )
// Parameters infos:
// class UEngineShare*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  Type                           ( CPF_OptionalParm | CPF_Parm )

class UEngineShare* UEngineShare::GetInstance ( class UClass* Type )
{
	static UFunction* pFnGetInstance = NULL;

	if ( ! pFnGetInstance )
		pFnGetInstance = (UFunction*) UObject::GObjObjects()->Data[ 19725 ];

	UEngineShare_execGetInstance_Parms GetInstance_Parms;
	GetInstance_Parms.Type = Type;

	pFnGetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInstance, &GetInstance_Parms, NULL );

	pFnGetInstance->FunctionFlags |= 0x400;

	return GetInstance_Parms.ReturnValue;
};

// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnUnmountFaceFXAnimSet = NULL;

	if ( ! pFnUnmountFaceFXAnimSet )
		pFnUnmountFaceFXAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 19832 ];

	UFaceFXAsset_execUnmountFaceFXAnimSet_Parms UnmountFaceFXAnimSet_Parms;
	UnmountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnUnmountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnmountFaceFXAnimSet, &UnmountFaceFXAnimSet_Parms, NULL );

	pFnUnmountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )

void UFaceFXAsset::MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet )
{
	static UFunction* pFnMountFaceFXAnimSet = NULL;

	if ( ! pFnMountFaceFXAnimSet )
		pFnMountFaceFXAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 19830 ];

	UFaceFXAsset_execMountFaceFXAnimSet_Parms MountFaceFXAnimSet_Parms;
	MountFaceFXAnimSet_Parms.AnimSet = AnimSet;

	pFnMountFaceFXAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMountFaceFXAnimSet, &MountFaceFXAnimSet_Parms, NULL );

	pFnMountFaceFXAnimSet->FunctionFlags |= 0x400;
};

// Function Engine.Font.GetStringHeightAndWidth
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 InString                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            Height                         ( CPF_Parm | CPF_OutParm )
// int                            Width                          ( CPF_Parm | CPF_OutParm )

void UFont::GetStringHeightAndWidth ( struct FString* InString, int* Height, int* Width )
{
	static UFunction* pFnGetStringHeightAndWidth = NULL;

	if ( ! pFnGetStringHeightAndWidth )
		pFnGetStringHeightAndWidth = (UFunction*) UObject::GObjObjects()->Data[ 20165 ];

	UFont_execGetStringHeightAndWidth_Parms GetStringHeightAndWidth_Parms;

	pFnGetStringHeightAndWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringHeightAndWidth, &GetStringHeightAndWidth_Parms, NULL );

	pFnGetStringHeightAndWidth->FunctionFlags |= 0x400;

	if ( InString )
		memcpy ( InString, &GetStringHeightAndWidth_Parms.InString, 0xC );

	if ( Height )
		*Height = GetStringHeightAndWidth_Parms.Height;

	if ( Width )
		*Width = GetStringHeightAndWidth_Parms.Width;
};

// Function Engine.Font.GetMaxCharHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UFont::GetMaxCharHeight ( )
{
	static UFunction* pFnGetMaxCharHeight = NULL;

	if ( ! pFnGetMaxCharHeight )
		pFnGetMaxCharHeight = (UFunction*) UObject::GObjObjects()->Data[ 20163 ];

	UFont_execGetMaxCharHeight_Parms GetMaxCharHeight_Parms;

	pFnGetMaxCharHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxCharHeight, &GetMaxCharHeight_Parms, NULL );

	pFnGetMaxCharHeight->FunctionFlags |= 0x400;

	return GetMaxCharHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetAuthoredViewportHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ViewportHeight                 ( CPF_Parm )

float UFont::GetAuthoredViewportHeight ( float ViewportHeight )
{
	static UFunction* pFnGetAuthoredViewportHeight = NULL;

	if ( ! pFnGetAuthoredViewportHeight )
		pFnGetAuthoredViewportHeight = (UFunction*) UObject::GObjObjects()->Data[ 20160 ];

	UFont_execGetAuthoredViewportHeight_Parms GetAuthoredViewportHeight_Parms;
	GetAuthoredViewportHeight_Parms.ViewportHeight = ViewportHeight;

	pFnGetAuthoredViewportHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAuthoredViewportHeight, &GetAuthoredViewportHeight_Parms, NULL );

	pFnGetAuthoredViewportHeight->FunctionFlags |= 0x400;

	return GetAuthoredViewportHeight_Parms.ReturnValue;
};

// Function Engine.Font.GetScalingFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

float UFont::GetScalingFactor ( float HeightTest )
{
	static UFunction* pFnGetScalingFactor = NULL;

	if ( ! pFnGetScalingFactor )
		pFnGetScalingFactor = (UFunction*) UObject::GObjObjects()->Data[ 20157 ];

	UFont_execGetScalingFactor_Parms GetScalingFactor_Parms;
	GetScalingFactor_Parms.HeightTest = HeightTest;

	pFnGetScalingFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalingFactor, &GetScalingFactor_Parms, NULL );

	pFnGetScalingFactor->FunctionFlags |= 0x400;

	return GetScalingFactor_Parms.ReturnValue;
};

// Function Engine.Font.GetResolutionPageIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UFont::GetResolutionPageIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionPageIndex = NULL;

	if ( ! pFnGetResolutionPageIndex )
		pFnGetResolutionPageIndex = (UFunction*) UObject::GObjObjects()->Data[ 20154 ];

	UFont_execGetResolutionPageIndex_Parms GetResolutionPageIndex_Parms;
	GetResolutionPageIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionPageIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionPageIndex, &GetResolutionPageIndex_Parms, NULL );

	pFnGetResolutionPageIndex->FunctionFlags |= 0x400;

	return GetResolutionPageIndex_Parms.ReturnValue;
};

// Function Engine.MultiFont.GetResolutionTestTableIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          HeightTest                     ( CPF_Parm )

int UMultiFont::GetResolutionTestTableIndex ( float HeightTest )
{
	static UFunction* pFnGetResolutionTestTableIndex = NULL;

	if ( ! pFnGetResolutionTestTableIndex )
		pFnGetResolutionTestTableIndex = (UFunction*) UObject::GObjObjects()->Data[ 26151 ];

	UMultiFont_execGetResolutionTestTableIndex_Parms GetResolutionTestTableIndex_Parms;
	GetResolutionTestTableIndex_Parms.HeightTest = HeightTest;

	pFnGetResolutionTestTableIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResolutionTestTableIndex, &GetResolutionTestTableIndex_Parms, NULL );

	pFnGetResolutionTestTableIndex->FunctionFlags |= 0x400;

	return GetResolutionTestTableIndex_Parms.ReturnValue;
};

// Function Engine.ForceFeedbackManager.PauseWaveform
// [0x00024102] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::PauseWaveform ( unsigned long bPause )
{
	static UFunction* pFnPauseWaveform = NULL;

	if ( ! pFnPauseWaveform )
		pFnPauseWaveform = (UFunction*) UObject::GObjObjects()->Data[ 20184 ];

	UForceFeedbackManager_execPauseWaveform_Parms PauseWaveform_Parms;
	PauseWaveform_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseWaveform, &PauseWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// [0x00024102] 
// Parameters infos:
// class UForceFeedbackWaveform*  WaveForm                       ( CPF_OptionalParm | CPF_Parm )

void UForceFeedbackManager::StopForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm )
{
	static UFunction* pFnStopForceFeedbackWaveform = NULL;

	if ( ! pFnStopForceFeedbackWaveform )
		pFnStopForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 20182 ];

	UForceFeedbackManager_execStopForceFeedbackWaveform_Parms StopForceFeedbackWaveform_Parms;
	StopForceFeedbackWaveform_Parms.WaveForm = WaveForm;

	this->ProcessEvent ( pFnStopForceFeedbackWaveform, &StopForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// [0x00020102] 
// Parameters infos:
// class UForceFeedbackWaveform*  WaveForm                       ( CPF_Parm )
// class AActor*                  WaveInstigator                 ( CPF_Parm )

void UForceFeedbackManager::PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator )
{
	static UFunction* pFnPlayForceFeedbackWaveform = NULL;

	if ( ! pFnPlayForceFeedbackWaveform )
		pFnPlayForceFeedbackWaveform = (UFunction*) UObject::GObjObjects()->Data[ 20178 ];

	UForceFeedbackManager_execPlayForceFeedbackWaveform_Parms PlayForceFeedbackWaveform_Parms;
	PlayForceFeedbackWaveform_Parms.WaveForm = WaveForm;
	PlayForceFeedbackWaveform_Parms.WaveInstigator = WaveInstigator;

	this->ProcessEvent ( pFnPlayForceFeedbackWaveform, &PlayForceFeedbackWaveform_Parms, NULL );
};

// Function Engine.GameplayEvents.GetFilename
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGameplayEvents::eventGetFilename ( )
{
	static UFunction* pFnGetFilename = NULL;

	if ( ! pFnGetFilename )
		pFnGetFilename = (UFunction*) UObject::GObjObjects()->Data[ 22004 ];

	UGameplayEvents_eventGetFilename_Parms GetFilename_Parms;

	this->ProcessEvent ( pFnGetFilename, &GetFilename_Parms, NULL );

	return GetFilename_Parms.ReturnValue;
};

// Function Engine.GameplayEvents.CloseStatsFile
// [0x00020000] 
// Parameters infos:

void UGameplayEvents::CloseStatsFile ( )
{
	static UFunction* pFnCloseStatsFile = NULL;

	if ( ! pFnCloseStatsFile )
		pFnCloseStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 22003 ];

	UGameplayEvents_execCloseStatsFile_Parms CloseStatsFile_Parms;

	this->ProcessEvent ( pFnCloseStatsFile, &CloseStatsFile_Parms, NULL );
};

// Function Engine.GameplayEvents.OpenStatsFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UGameplayEvents::OpenStatsFile ( struct FString Filename )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 22000 ];

	UGameplayEvents_execOpenStatsFile_Parms OpenStatsFile_Parms;
	memcpy ( &OpenStatsFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	return OpenStatsFile_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameplayEventsReader::GetSessionDuration ( )
{
	static UFunction* pFnGetSessionDuration = NULL;

	if ( ! pFnGetSessionDuration )
		pFnGetSessionDuration = (UFunction*) UObject::GObjObjects()->Data[ 22051 ];

	UGameplayEventsReader_execGetSessionDuration_Parms GetSessionDuration_Parms;

	pFnGetSessionDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionDuration, &GetSessionDuration_Parms, NULL );

	pFnGetSessionDuration->FunctionFlags |= 0x400;

	return GetSessionDuration_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionEnd
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameplayEventsReader::GetSessionEnd ( )
{
	static UFunction* pFnGetSessionEnd = NULL;

	if ( ! pFnGetSessionEnd )
		pFnGetSessionEnd = (UFunction*) UObject::GObjObjects()->Data[ 22049 ];

	UGameplayEventsReader_execGetSessionEnd_Parms GetSessionEnd_Parms;

	pFnGetSessionEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionEnd, &GetSessionEnd_Parms, NULL );

	pFnGetSessionEnd->FunctionFlags |= 0x400;

	return GetSessionEnd_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionStart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UGameplayEventsReader::GetSessionStart ( )
{
	static UFunction* pFnGetSessionStart = NULL;

	if ( ! pFnGetSessionStart )
		pFnGetSessionStart = (UFunction*) UObject::GObjObjects()->Data[ 22047 ];

	UGameplayEventsReader_execGetSessionStart_Parms GetSessionStart_Parms;

	pFnGetSessionStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionStart, &GetSessionStart_Parms, NULL );

	pFnGetSessionStart->FunctionFlags |= 0x400;

	return GetSessionStart_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionTimestamp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGameplayEventsReader::GetSessionTimestamp ( )
{
	static UFunction* pFnGetSessionTimestamp = NULL;

	if ( ! pFnGetSessionTimestamp )
		pFnGetSessionTimestamp = (UFunction*) UObject::GObjObjects()->Data[ 22045 ];

	UGameplayEventsReader_execGetSessionTimestamp_Parms GetSessionTimestamp_Parms;

	pFnGetSessionTimestamp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionTimestamp, &GetSessionTimestamp_Parms, NULL );

	pFnGetSessionTimestamp->FunctionFlags |= 0x400;

	return GetSessionTimestamp_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetPlatform
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameplayEventsReader::GetPlatform ( )
{
	static UFunction* pFnGetPlatform = NULL;

	if ( ! pFnGetPlatform )
		pFnGetPlatform = (UFunction*) UObject::GObjObjects()->Data[ 22043 ];

	UGameplayEventsReader_execGetPlatform_Parms GetPlatform_Parms;

	pFnGetPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlatform, &GetPlatform_Parms, NULL );

	pFnGetPlatform->FunctionFlags |= 0x400;

	return GetPlatform_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetTitleID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameplayEventsReader::GetTitleID ( )
{
	static UFunction* pFnGetTitleID = NULL;

	if ( ! pFnGetTitleID )
		pFnGetTitleID = (UFunction*) UObject::GObjObjects()->Data[ 22041 ];

	UGameplayEventsReader_execGetTitleID_Parms GetTitleID_Parms;

	pFnGetTitleID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTitleID, &GetTitleID_Parms, NULL );

	pFnGetTitleID->FunctionFlags |= 0x400;

	return GetTitleID_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.GetSessionID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGameplayEventsReader::GetSessionID ( )
{
	static UFunction* pFnGetSessionID = NULL;

	if ( ! pFnGetSessionID )
		pFnGetSessionID = (UFunction*) UObject::GObjObjects()->Data[ 22039 ];

	UGameplayEventsReader_execGetSessionID_Parms GetSessionID_Parms;

	pFnGetSessionID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSessionID, &GetSessionID_Parms, NULL );

	pFnGetSessionID->FunctionFlags |= 0x400;

	return GetSessionID_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.ProcessStreamEnd
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameplayEventsReader::ProcessStreamEnd ( )
{
	static UFunction* pFnProcessStreamEnd = NULL;

	if ( ! pFnProcessStreamEnd )
		pFnProcessStreamEnd = (UFunction*) UObject::GObjObjects()->Data[ 22038 ];

	UGameplayEventsReader_execProcessStreamEnd_Parms ProcessStreamEnd_Parms;

	pFnProcessStreamEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessStreamEnd, &ProcessStreamEnd_Parms, NULL );

	pFnProcessStreamEnd->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsReader.ProcessStream
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsReader::ProcessStream ( )
{
	static UFunction* pFnProcessStream = NULL;

	if ( ! pFnProcessStream )
		pFnProcessStream = (UFunction*) UObject::GObjObjects()->Data[ 22037 ];

	UGameplayEventsReader_execProcessStream_Parms ProcessStream_Parms;

	pFnProcessStream->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessStream, &ProcessStream_Parms, NULL );

	pFnProcessStream->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsReader.ProcessStreamStart
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameplayEventsReader::ProcessStreamStart ( )
{
	static UFunction* pFnProcessStreamStart = NULL;

	if ( ! pFnProcessStreamStart )
		pFnProcessStreamStart = (UFunction*) UObject::GObjObjects()->Data[ 22036 ];

	UGameplayEventsReader_execProcessStreamStart_Parms ProcessStreamStart_Parms;

	pFnProcessStreamStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessStreamStart, &ProcessStreamStart_Parms, NULL );

	pFnProcessStreamStart->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsReader.UnregisterHandler
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UGameplayEventsHandler*  ExistingHandler                ( CPF_Parm )

void UGameplayEventsReader::eventUnregisterHandler ( class UGameplayEventsHandler* ExistingHandler )
{
	static UFunction* pFnUnregisterHandler = NULL;

	if ( ! pFnUnregisterHandler )
		pFnUnregisterHandler = (UFunction*) UObject::GObjObjects()->Data[ 22033 ];

	UGameplayEventsReader_eventUnregisterHandler_Parms UnregisterHandler_Parms;
	UnregisterHandler_Parms.ExistingHandler = ExistingHandler;

	this->ProcessEvent ( pFnUnregisterHandler, &UnregisterHandler_Parms, NULL );
};

// Function Engine.GameplayEventsReader.RegisterHandler
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UGameplayEventsHandler*  NewHandler                     ( CPF_Parm )

void UGameplayEventsReader::eventRegisterHandler ( class UGameplayEventsHandler* NewHandler )
{
	static UFunction* pFnRegisterHandler = NULL;

	if ( ! pFnRegisterHandler )
		pFnRegisterHandler = (UFunction*) UObject::GObjObjects()->Data[ 22030 ];

	UGameplayEventsReader_eventRegisterHandler_Parms RegisterHandler_Parms;
	RegisterHandler_Parms.NewHandler = NewHandler;

	this->ProcessEvent ( pFnRegisterHandler, &RegisterHandler_Parms, NULL );
};

// Function Engine.GameplayEventsReader.SerializeHeader
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsReader::SerializeHeader ( )
{
	static UFunction* pFnSerializeHeader = NULL;

	if ( ! pFnSerializeHeader )
		pFnSerializeHeader = (UFunction*) UObject::GObjObjects()->Data[ 22028 ];

	UGameplayEventsReader_execSerializeHeader_Parms SerializeHeader_Parms;

	pFnSerializeHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeHeader, &SerializeHeader_Parms, NULL );

	pFnSerializeHeader->FunctionFlags |= 0x400;

	return SerializeHeader_Parms.ReturnValue;
};

// Function Engine.GameplayEventsReader.CloseStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsReader::CloseStatsFile ( )
{
	static UFunction* pFnCloseStatsFile = NULL;

	if ( ! pFnCloseStatsFile )
		pFnCloseStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 22027 ];

	UGameplayEventsReader_execCloseStatsFile_Parms CloseStatsFile_Parms;

	pFnCloseStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseStatsFile, &CloseStatsFile_Parms, NULL );

	pFnCloseStatsFile->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsReader.OpenStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UGameplayEventsReader::OpenStatsFile ( struct FString Filename )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 22024 ];

	UGameplayEventsReader_execOpenStatsFile_Parms OpenStatsFile_Parms;
	memcpy ( &OpenStatsFile_Parms.Filename, &Filename, 0xC );

	pFnOpenStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	pFnOpenStatsFile->FunctionFlags |= 0x400;

	return OpenStatsFile_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriterBase.RecordCoverLinkFireLinks
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACoverLink*              Link                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

int UGameplayEventsWriterBase::RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player )
{
	static UFunction* pFnRecordCoverLinkFireLinks = NULL;

	if ( ! pFnRecordCoverLinkFireLinks )
		pFnRecordCoverLinkFireLinks = (UFunction*) UObject::GObjObjects()->Data[ 22193 ];

	UGameplayEventsWriterBase_execRecordCoverLinkFireLinks_Parms RecordCoverLinkFireLinks_Parms;
	RecordCoverLinkFireLinks_Parms.Link = Link;
	RecordCoverLinkFireLinks_Parms.Player = Player;

	this->ProcessEvent ( pFnRecordCoverLinkFireLinks, &RecordCoverLinkFireLinks_Parms, NULL );

	return RecordCoverLinkFireLinks_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriterBase.RecordAIPathFail
// [0x00020000] 
// Parameters infos:
// class AController*             AI                             ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FVector                 Dest                           ( CPF_Parm )

void UGameplayEventsWriterBase::RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest )
{
	static UFunction* pFnRecordAIPathFail = NULL;

	if ( ! pFnRecordAIPathFail )
		pFnRecordAIPathFail = (UFunction*) UObject::GObjObjects()->Data[ 22189 ];

	UGameplayEventsWriterBase_execRecordAIPathFail_Parms RecordAIPathFail_Parms;
	RecordAIPathFail_Parms.AI = AI;
	memcpy ( &RecordAIPathFail_Parms.Reason, &Reason, 0xC );
	memcpy ( &RecordAIPathFail_Parms.Dest, &Dest, 0xC );

	this->ProcessEvent ( pFnRecordAIPathFail, &RecordAIPathFail_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogSystemPollEvents
// [0x00020000] 
// Parameters infos:

void UGameplayEventsWriterBase::LogSystemPollEvents ( )
{
	static UFunction* pFnLogSystemPollEvents = NULL;

	if ( ! pFnLogSystemPollEvents )
		pFnLogSystemPollEvents = (UFunction*) UObject::GObjObjects()->Data[ 22188 ];

	UGameplayEventsWriterBase_execLogSystemPollEvents_Parms LogSystemPollEvents_Parms;

	this->ProcessEvent ( pFnLogSystemPollEvents, &LogSystemPollEvents_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogProjectileIntEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  Proj                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value )
{
	static UFunction* pFnLogProjectileIntEvent = NULL;

	if ( ! pFnLogProjectileIntEvent )
		pFnLogProjectileIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22183 ];

	UGameplayEventsWriterBase_execLogProjectileIntEvent_Parms LogProjectileIntEvent_Parms;
	LogProjectileIntEvent_Parms.EventID = EventID;
	LogProjectileIntEvent_Parms.Player = Player;
	LogProjectileIntEvent_Parms.Proj = Proj;
	LogProjectileIntEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogProjectileIntEvent, &LogProjectileIntEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogDamageEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

void UGameplayEventsWriterBase::LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount )
{
	static UFunction* pFnLogDamageEvent = NULL;

	if ( ! pFnLogDamageEvent )
		pFnLogDamageEvent = (UFunction*) UObject::GObjObjects()->Data[ 22177 ];

	UGameplayEventsWriterBase_execLogDamageEvent_Parms LogDamageEvent_Parms;
	LogDamageEvent_Parms.EventID = EventID;
	LogDamageEvent_Parms.Player = Player;
	LogDamageEvent_Parms.dmgType = dmgType;
	LogDamageEvent_Parms.Target = Target;
	LogDamageEvent_Parms.Amount = Amount;

	this->ProcessEvent ( pFnLogDamageEvent, &LogDamageEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogWeaponIntEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value )
{
	static UFunction* pFnLogWeaponIntEvent = NULL;

	if ( ! pFnLogWeaponIntEvent )
		pFnLogWeaponIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22172 ];

	UGameplayEventsWriterBase_execLogWeaponIntEvent_Parms LogWeaponIntEvent_Parms;
	LogWeaponIntEvent_Parms.EventID = EventID;
	LogWeaponIntEvent_Parms.Player = Player;
	LogWeaponIntEvent_Parms.WeaponClass = WeaponClass;
	LogWeaponIntEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogWeaponIntEvent, &LogWeaponIntEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerPlayerEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )

void UGameplayEventsWriterBase::LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target )
{
	static UFunction* pFnLogPlayerPlayerEvent = NULL;

	if ( ! pFnLogPlayerPlayerEvent )
		pFnLogPlayerPlayerEvent = (UFunction*) UObject::GObjObjects()->Data[ 22168 ];

	UGameplayEventsWriterBase_execLogPlayerPlayerEvent_Parms LogPlayerPlayerEvent_Parms;
	LogPlayerPlayerEvent_Parms.EventID = EventID;
	LogPlayerPlayerEvent_Parms.Player = Player;
	LogPlayerPlayerEvent_Parms.Target = Target;

	this->ProcessEvent ( pFnLogPlayerPlayerEvent, &LogPlayerPlayerEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerKillDeath
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            KillType                       ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Dead                           ( CPF_Parm )

void UGameplayEventsWriterBase::LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead )
{
	static UFunction* pFnLogPlayerKillDeath = NULL;

	if ( ! pFnLogPlayerKillDeath )
		pFnLogPlayerKillDeath = (UFunction*) UObject::GObjObjects()->Data[ 22162 ];

	UGameplayEventsWriterBase_execLogPlayerKillDeath_Parms LogPlayerKillDeath_Parms;
	LogPlayerKillDeath_Parms.EventID = EventID;
	LogPlayerKillDeath_Parms.KillType = KillType;
	LogPlayerKillDeath_Parms.Killer = Killer;
	LogPlayerKillDeath_Parms.dmgType = dmgType;
	LogPlayerKillDeath_Parms.Dead = Dead;

	this->ProcessEvent ( pFnLogPlayerKillDeath, &LogPlayerKillDeath_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogAllPlayerPositionsEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsWriterBase::LogAllPlayerPositionsEvent ( int EventID )
{
	static UFunction* pFnLogAllPlayerPositionsEvent = NULL;

	if ( ! pFnLogAllPlayerPositionsEvent )
		pFnLogAllPlayerPositionsEvent = (UFunction*) UObject::GObjObjects()->Data[ 22160 ];

	UGameplayEventsWriterBase_execLogAllPlayerPositionsEvent_Parms LogAllPlayerPositionsEvent_Parms;
	LogAllPlayerPositionsEvent_Parms.EventID = EventID;

	this->ProcessEvent ( pFnLogAllPlayerPositionsEvent, &LogAllPlayerPositionsEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerLoginChange
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bSplitScreen                   ( CPF_Parm )

void UGameplayEventsWriterBase::LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen )
{
	static UFunction* pFnLogPlayerLoginChange = NULL;

	if ( ! pFnLogPlayerLoginChange )
		pFnLogPlayerLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 22154 ];

	UGameplayEventsWriterBase_execLogPlayerLoginChange_Parms LogPlayerLoginChange_Parms;
	LogPlayerLoginChange_Parms.EventID = EventID;
	LogPlayerLoginChange_Parms.Player = Player;
	memcpy ( &LogPlayerLoginChange_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &LogPlayerLoginChange_Parms.PlayerID, &PlayerID, 0x48 );
	LogPlayerLoginChange_Parms.bSplitScreen = bSplitScreen;

	this->ProcessEvent ( pFnLogPlayerLoginChange, &LogPlayerLoginChange_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerSpawnEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  PawnClass                      ( CPF_Parm )
// int                            TeamID                         ( CPF_Parm )

void UGameplayEventsWriterBase::LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID )
{
	static UFunction* pFnLogPlayerSpawnEvent = NULL;

	if ( ! pFnLogPlayerSpawnEvent )
		pFnLogPlayerSpawnEvent = (UFunction*) UObject::GObjObjects()->Data[ 22149 ];

	UGameplayEventsWriterBase_execLogPlayerSpawnEvent_Parms LogPlayerSpawnEvent_Parms;
	LogPlayerSpawnEvent_Parms.EventID = EventID;
	LogPlayerSpawnEvent_Parms.Player = Player;
	LogPlayerSpawnEvent_Parms.PawnClass = PawnClass;
	LogPlayerSpawnEvent_Parms.TeamID = TeamID;

	this->ProcessEvent ( pFnLogPlayerSpawnEvent, &LogPlayerSpawnEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerStringEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 EventString                    ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriterBase::LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString )
{
	static UFunction* pFnLogPlayerStringEvent = NULL;

	if ( ! pFnLogPlayerStringEvent )
		pFnLogPlayerStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22145 ];

	UGameplayEventsWriterBase_execLogPlayerStringEvent_Parms LogPlayerStringEvent_Parms;
	LogPlayerStringEvent_Parms.EventID = EventID;
	LogPlayerStringEvent_Parms.Player = Player;
	memcpy ( &LogPlayerStringEvent_Parms.EventString, &EventString, 0xC );

	this->ProcessEvent ( pFnLogPlayerStringEvent, &LogPlayerStringEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerFloatEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogPlayerFloatEvent ( int EventID, class AController* Player, float Value )
{
	static UFunction* pFnLogPlayerFloatEvent = NULL;

	if ( ! pFnLogPlayerFloatEvent )
		pFnLogPlayerFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22141 ];

	UGameplayEventsWriterBase_execLogPlayerFloatEvent_Parms LogPlayerFloatEvent_Parms;
	LogPlayerFloatEvent_Parms.EventID = EventID;
	LogPlayerFloatEvent_Parms.Player = Player;
	LogPlayerFloatEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogPlayerFloatEvent, &LogPlayerFloatEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogPlayerIntEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogPlayerIntEvent ( int EventID, class AController* Player, int Value )
{
	static UFunction* pFnLogPlayerIntEvent = NULL;

	if ( ! pFnLogPlayerIntEvent )
		pFnLogPlayerIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22137 ];

	UGameplayEventsWriterBase_execLogPlayerIntEvent_Parms LogPlayerIntEvent_Parms;
	LogPlayerIntEvent_Parms.EventID = EventID;
	LogPlayerIntEvent_Parms.Player = Player;
	LogPlayerIntEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogPlayerIntEvent, &LogPlayerIntEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogTeamStringEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriterBase::LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value )
{
	static UFunction* pFnLogTeamStringEvent = NULL;

	if ( ! pFnLogTeamStringEvent )
		pFnLogTeamStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22133 ];

	UGameplayEventsWriterBase_execLogTeamStringEvent_Parms LogTeamStringEvent_Parms;
	LogTeamStringEvent_Parms.EventID = EventID;
	LogTeamStringEvent_Parms.Team = Team;
	memcpy ( &LogTeamStringEvent_Parms.Value, &Value, 0xC );

	this->ProcessEvent ( pFnLogTeamStringEvent, &LogTeamStringEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogTeamFloatEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value )
{
	static UFunction* pFnLogTeamFloatEvent = NULL;

	if ( ! pFnLogTeamFloatEvent )
		pFnLogTeamFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22129 ];

	UGameplayEventsWriterBase_execLogTeamFloatEvent_Parms LogTeamFloatEvent_Parms;
	LogTeamFloatEvent_Parms.EventID = EventID;
	LogTeamFloatEvent_Parms.Team = Team;
	LogTeamFloatEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogTeamFloatEvent, &LogTeamFloatEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogTeamIntEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value )
{
	static UFunction* pFnLogTeamIntEvent = NULL;

	if ( ! pFnLogTeamIntEvent )
		pFnLogTeamIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22125 ];

	UGameplayEventsWriterBase_execLogTeamIntEvent_Parms LogTeamIntEvent_Parms;
	LogTeamIntEvent_Parms.EventID = EventID;
	LogTeamIntEvent_Parms.Team = Team;
	LogTeamIntEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogTeamIntEvent, &LogTeamIntEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogGamePositionEvent
// [0x00420000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// float                          Value                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UGameplayEventsWriterBase::LogGamePositionEvent ( int EventID, float Value, struct FVector* Position )
{
	static UFunction* pFnLogGamePositionEvent = NULL;

	if ( ! pFnLogGamePositionEvent )
		pFnLogGamePositionEvent = (UFunction*) UObject::GObjObjects()->Data[ 22121 ];

	UGameplayEventsWriterBase_execLogGamePositionEvent_Parms LogGamePositionEvent_Parms;
	LogGamePositionEvent_Parms.EventID = EventID;
	LogGamePositionEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogGamePositionEvent, &LogGamePositionEvent_Parms, NULL );

	if ( Position )
		memcpy ( Position, &LogGamePositionEvent_Parms.Position, 0xC );
};

// Function Engine.GameplayEventsWriterBase.LogGameFloatEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogGameFloatEvent ( int EventID, float Value )
{
	static UFunction* pFnLogGameFloatEvent = NULL;

	if ( ! pFnLogGameFloatEvent )
		pFnLogGameFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22118 ];

	UGameplayEventsWriterBase_execLogGameFloatEvent_Parms LogGameFloatEvent_Parms;
	LogGameFloatEvent_Parms.EventID = EventID;
	LogGameFloatEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogGameFloatEvent, &LogGameFloatEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogGameStringEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriterBase::LogGameStringEvent ( int EventID, struct FString Value )
{
	static UFunction* pFnLogGameStringEvent = NULL;

	if ( ! pFnLogGameStringEvent )
		pFnLogGameStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22115 ];

	UGameplayEventsWriterBase_execLogGameStringEvent_Parms LogGameStringEvent_Parms;
	LogGameStringEvent_Parms.EventID = EventID;
	memcpy ( &LogGameStringEvent_Parms.Value, &Value, 0xC );

	this->ProcessEvent ( pFnLogGameStringEvent, &LogGameStringEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.LogGameIntEvent
// [0x00020000] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriterBase::LogGameIntEvent ( int EventID, int Value )
{
	static UFunction* pFnLogGameIntEvent = NULL;

	if ( ! pFnLogGameIntEvent )
		pFnLogGameIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22112 ];

	UGameplayEventsWriterBase_execLogGameIntEvent_Parms LogGameIntEvent_Parms;
	LogGameIntEvent_Parms.EventID = EventID;
	LogGameIntEvent_Parms.Value = Value;

	this->ProcessEvent ( pFnLogGameIntEvent, &LogGameIntEvent_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.EndLogging
// [0x00020000] 
// Parameters infos:

void UGameplayEventsWriterBase::EndLogging ( )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 22111 ];

	UGameplayEventsWriterBase_execEndLogging_Parms EndLogging_Parms;

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.ResetLogging
// [0x00024000] 
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsWriterBase::ResetLogging ( float HeartbeatDelta )
{
	static UFunction* pFnResetLogging = NULL;

	if ( ! pFnResetLogging )
		pFnResetLogging = (UFunction*) UObject::GObjObjects()->Data[ 22109 ];

	UGameplayEventsWriterBase_execResetLogging_Parms ResetLogging_Parms;
	ResetLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	this->ProcessEvent ( pFnResetLogging, &ResetLogging_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.StartLogging
// [0x00024000] 
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsWriterBase::StartLogging ( float HeartbeatDelta )
{
	static UFunction* pFnStartLogging = NULL;

	if ( ! pFnStartLogging )
		pFnStartLogging = (UFunction*) UObject::GObjObjects()->Data[ 22107 ];

	UGameplayEventsWriterBase_execStartLogging_Parms StartLogging_Parms;
	StartLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	this->ProcessEvent ( pFnStartLogging, &StartLogging_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.GetPlaylistId
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameplayEventsWriterBase::eventGetPlaylistId ( )
{
	static UFunction* pFnGetPlaylistId = NULL;

	if ( ! pFnGetPlaylistId )
		pFnGetPlaylistId = (UFunction*) UObject::GObjObjects()->Data[ 22105 ];

	UGameplayEventsWriterBase_eventGetPlaylistId_Parms GetPlaylistId_Parms;

	this->ProcessEvent ( pFnGetPlaylistId, &GetPlaylistId_Parms, NULL );

	return GetPlaylistId_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriterBase.GetGameTypeId
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameplayEventsWriterBase::eventGetGameTypeId ( )
{
	static UFunction* pFnGetGameTypeId = NULL;

	if ( ! pFnGetGameTypeId )
		pFnGetGameTypeId = (UFunction*) UObject::GObjObjects()->Data[ 22103 ];

	UGameplayEventsWriterBase_eventGetGameTypeId_Parms GetGameTypeId_Parms;

	this->ProcessEvent ( pFnGetGameTypeId, &GetGameTypeId_Parms, NULL );

	return GetGameTypeId_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriterBase.Poll
// [0x00020002] 
// Parameters infos:

void UGameplayEventsWriterBase::Poll ( )
{
	static UFunction* pFnPoll = NULL;

	if ( ! pFnPoll )
		pFnPoll = (UFunction*) UObject::GObjObjects()->Data[ 22101 ];

	UGameplayEventsWriterBase_execPoll_Parms Poll_Parms;

	this->ProcessEvent ( pFnPoll, &Poll_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.StopPolling
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameplayEventsWriterBase::eventStopPolling ( )
{
	static UFunction* pFnStopPolling = NULL;

	if ( ! pFnStopPolling )
		pFnStopPolling = (UFunction*) UObject::GObjObjects()->Data[ 22099 ];

	UGameplayEventsWriterBase_eventStopPolling_Parms StopPolling_Parms;

	this->ProcessEvent ( pFnStopPolling, &StopPolling_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.StartPolling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          HearbeatDelta                  ( CPF_Parm )

void UGameplayEventsWriterBase::eventStartPolling ( float HearbeatDelta )
{
	static UFunction* pFnStartPolling = NULL;

	if ( ! pFnStartPolling )
		pFnStartPolling = (UFunction*) UObject::GObjObjects()->Data[ 22096 ];

	UGameplayEventsWriterBase_eventStartPolling_Parms StartPolling_Parms;
	StartPolling_Parms.HearbeatDelta = HearbeatDelta;

	this->ProcessEvent ( pFnStartPolling, &StartPolling_Parms, NULL );
};

// Function Engine.GameplayEventsWriterBase.IsSessionInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsWriterBase::IsSessionInProgress ( )
{
	static UFunction* pFnIsSessionInProgress = NULL;

	if ( ! pFnIsSessionInProgress )
		pFnIsSessionInProgress = (UFunction*) UObject::GObjObjects()->Data[ 22094 ];

	UGameplayEventsWriterBase_execIsSessionInProgress_Parms IsSessionInProgress_Parms;

	this->ProcessEvent ( pFnIsSessionInProgress, &IsSessionInProgress_Parms, NULL );

	return IsSessionInProgress_Parms.ReturnValue;
};

// Function Engine.GameplayEventsUploadAnalytics.RecordCoverLinkFireLinks
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACoverLink*              Link                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

int UGameplayEventsUploadAnalytics::RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player )
{
	static UFunction* pFnRecordCoverLinkFireLinks = NULL;

	if ( ! pFnRecordCoverLinkFireLinks )
		pFnRecordCoverLinkFireLinks = (UFunction*) UObject::GObjObjects()->Data[ 22284 ];

	UGameplayEventsUploadAnalytics_execRecordCoverLinkFireLinks_Parms RecordCoverLinkFireLinks_Parms;
	RecordCoverLinkFireLinks_Parms.Link = Link;
	RecordCoverLinkFireLinks_Parms.Player = Player;

	this->ProcessEvent ( pFnRecordCoverLinkFireLinks, &RecordCoverLinkFireLinks_Parms, NULL );

	return RecordCoverLinkFireLinks_Parms.ReturnValue;
};

// Function Engine.GameplayEventsUploadAnalytics.RecordAIPathFail
// [0x00020000] 
// Parameters infos:
// class AController*             AI                             ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FVector                 Dest                           ( CPF_Parm )

void UGameplayEventsUploadAnalytics::RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest )
{
	static UFunction* pFnRecordAIPathFail = NULL;

	if ( ! pFnRecordAIPathFail )
		pFnRecordAIPathFail = (UFunction*) UObject::GObjObjects()->Data[ 22280 ];

	UGameplayEventsUploadAnalytics_execRecordAIPathFail_Parms RecordAIPathFail_Parms;
	RecordAIPathFail_Parms.AI = AI;
	memcpy ( &RecordAIPathFail_Parms.Reason, &Reason, 0xC );
	memcpy ( &RecordAIPathFail_Parms.Dest, &Dest, 0xC );

	this->ProcessEvent ( pFnRecordAIPathFail, &RecordAIPathFail_Parms, NULL );
};

// Function Engine.GameplayEventsUploadAnalytics.GetGenericParamListEntry
// [0x00020000] 
// Parameters infos:
// class UGenericParamListStatEntry* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGenericParamListStatEntry* UGameplayEventsUploadAnalytics::GetGenericParamListEntry ( )
{
	static UFunction* pFnGetGenericParamListEntry = NULL;

	if ( ! pFnGetGenericParamListEntry )
		pFnGetGenericParamListEntry = (UFunction*) UObject::GObjObjects()->Data[ 22278 ];

	UGameplayEventsUploadAnalytics_execGetGenericParamListEntry_Parms GetGenericParamListEntry_Parms;

	this->ProcessEvent ( pFnGetGenericParamListEntry, &GetGenericParamListEntry_Parms, NULL );

	return GetGenericParamListEntry_Parms.ReturnValue;
};

// Function Engine.GameplayEventsUploadAnalytics.LogProjectileIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  Proj                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value )
{
	static UFunction* pFnLogProjectileIntEvent = NULL;

	if ( ! pFnLogProjectileIntEvent )
		pFnLogProjectileIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22273 ];

	UGameplayEventsUploadAnalytics_execLogProjectileIntEvent_Parms LogProjectileIntEvent_Parms;
	LogProjectileIntEvent_Parms.EventID = EventID;
	LogProjectileIntEvent_Parms.Player = Player;
	LogProjectileIntEvent_Parms.Proj = Proj;
	LogProjectileIntEvent_Parms.Value = Value;

	pFnLogProjectileIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogProjectileIntEvent, &LogProjectileIntEvent_Parms, NULL );

	pFnLogProjectileIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogDamageEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount )
{
	static UFunction* pFnLogDamageEvent = NULL;

	if ( ! pFnLogDamageEvent )
		pFnLogDamageEvent = (UFunction*) UObject::GObjObjects()->Data[ 22267 ];

	UGameplayEventsUploadAnalytics_execLogDamageEvent_Parms LogDamageEvent_Parms;
	LogDamageEvent_Parms.EventID = EventID;
	LogDamageEvent_Parms.Player = Player;
	LogDamageEvent_Parms.dmgType = dmgType;
	LogDamageEvent_Parms.Target = Target;
	LogDamageEvent_Parms.Amount = Amount;

	pFnLogDamageEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDamageEvent, &LogDamageEvent_Parms, NULL );

	pFnLogDamageEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogWeaponIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value )
{
	static UFunction* pFnLogWeaponIntEvent = NULL;

	if ( ! pFnLogWeaponIntEvent )
		pFnLogWeaponIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22262 ];

	UGameplayEventsUploadAnalytics_execLogWeaponIntEvent_Parms LogWeaponIntEvent_Parms;
	LogWeaponIntEvent_Parms.EventID = EventID;
	LogWeaponIntEvent_Parms.Player = Player;
	LogWeaponIntEvent_Parms.WeaponClass = WeaponClass;
	LogWeaponIntEvent_Parms.Value = Value;

	pFnLogWeaponIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogWeaponIntEvent, &LogWeaponIntEvent_Parms, NULL );

	pFnLogWeaponIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerPlayerEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target )
{
	static UFunction* pFnLogPlayerPlayerEvent = NULL;

	if ( ! pFnLogPlayerPlayerEvent )
		pFnLogPlayerPlayerEvent = (UFunction*) UObject::GObjObjects()->Data[ 22258 ];

	UGameplayEventsUploadAnalytics_execLogPlayerPlayerEvent_Parms LogPlayerPlayerEvent_Parms;
	LogPlayerPlayerEvent_Parms.EventID = EventID;
	LogPlayerPlayerEvent_Parms.Player = Player;
	LogPlayerPlayerEvent_Parms.Target = Target;

	pFnLogPlayerPlayerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerPlayerEvent, &LogPlayerPlayerEvent_Parms, NULL );

	pFnLogPlayerPlayerEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerKillDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            KillType                       ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Dead                           ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead )
{
	static UFunction* pFnLogPlayerKillDeath = NULL;

	if ( ! pFnLogPlayerKillDeath )
		pFnLogPlayerKillDeath = (UFunction*) UObject::GObjObjects()->Data[ 22252 ];

	UGameplayEventsUploadAnalytics_execLogPlayerKillDeath_Parms LogPlayerKillDeath_Parms;
	LogPlayerKillDeath_Parms.EventID = EventID;
	LogPlayerKillDeath_Parms.KillType = KillType;
	LogPlayerKillDeath_Parms.Killer = Killer;
	LogPlayerKillDeath_Parms.dmgType = dmgType;
	LogPlayerKillDeath_Parms.Dead = Dead;

	pFnLogPlayerKillDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerKillDeath, &LogPlayerKillDeath_Parms, NULL );

	pFnLogPlayerKillDeath->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogAllPlayerPositionsEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogAllPlayerPositionsEvent ( int EventID )
{
	static UFunction* pFnLogAllPlayerPositionsEvent = NULL;

	if ( ! pFnLogAllPlayerPositionsEvent )
		pFnLogAllPlayerPositionsEvent = (UFunction*) UObject::GObjObjects()->Data[ 22250 ];

	UGameplayEventsUploadAnalytics_execLogAllPlayerPositionsEvent_Parms LogAllPlayerPositionsEvent_Parms;
	LogAllPlayerPositionsEvent_Parms.EventID = EventID;

	pFnLogAllPlayerPositionsEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogAllPlayerPositionsEvent, &LogAllPlayerPositionsEvent_Parms, NULL );

	pFnLogAllPlayerPositionsEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerLoginChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bSplitScreen                   ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen )
{
	static UFunction* pFnLogPlayerLoginChange = NULL;

	if ( ! pFnLogPlayerLoginChange )
		pFnLogPlayerLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 22244 ];

	UGameplayEventsUploadAnalytics_execLogPlayerLoginChange_Parms LogPlayerLoginChange_Parms;
	LogPlayerLoginChange_Parms.EventID = EventID;
	LogPlayerLoginChange_Parms.Player = Player;
	memcpy ( &LogPlayerLoginChange_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &LogPlayerLoginChange_Parms.PlayerID, &PlayerID, 0x48 );
	LogPlayerLoginChange_Parms.bSplitScreen = bSplitScreen;

	pFnLogPlayerLoginChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerLoginChange, &LogPlayerLoginChange_Parms, NULL );

	pFnLogPlayerLoginChange->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerSpawnEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  PawnClass                      ( CPF_Parm )
// int                            TeamID                         ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID )
{
	static UFunction* pFnLogPlayerSpawnEvent = NULL;

	if ( ! pFnLogPlayerSpawnEvent )
		pFnLogPlayerSpawnEvent = (UFunction*) UObject::GObjObjects()->Data[ 22239 ];

	UGameplayEventsUploadAnalytics_execLogPlayerSpawnEvent_Parms LogPlayerSpawnEvent_Parms;
	LogPlayerSpawnEvent_Parms.EventID = EventID;
	LogPlayerSpawnEvent_Parms.Player = Player;
	LogPlayerSpawnEvent_Parms.PawnClass = PawnClass;
	LogPlayerSpawnEvent_Parms.TeamID = TeamID;

	pFnLogPlayerSpawnEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerSpawnEvent, &LogPlayerSpawnEvent_Parms, NULL );

	pFnLogPlayerSpawnEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 EventString                    ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsUploadAnalytics::LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString )
{
	static UFunction* pFnLogPlayerStringEvent = NULL;

	if ( ! pFnLogPlayerStringEvent )
		pFnLogPlayerStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22235 ];

	UGameplayEventsUploadAnalytics_execLogPlayerStringEvent_Parms LogPlayerStringEvent_Parms;
	LogPlayerStringEvent_Parms.EventID = EventID;
	LogPlayerStringEvent_Parms.Player = Player;
	memcpy ( &LogPlayerStringEvent_Parms.EventString, &EventString, 0xC );

	pFnLogPlayerStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerStringEvent, &LogPlayerStringEvent_Parms, NULL );

	pFnLogPlayerStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogPlayerFloatEvent ( int EventID, class AController* Player, float Value )
{
	static UFunction* pFnLogPlayerFloatEvent = NULL;

	if ( ! pFnLogPlayerFloatEvent )
		pFnLogPlayerFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22231 ];

	UGameplayEventsUploadAnalytics_execLogPlayerFloatEvent_Parms LogPlayerFloatEvent_Parms;
	LogPlayerFloatEvent_Parms.EventID = EventID;
	LogPlayerFloatEvent_Parms.Player = Player;
	LogPlayerFloatEvent_Parms.Value = Value;

	pFnLogPlayerFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerFloatEvent, &LogPlayerFloatEvent_Parms, NULL );

	pFnLogPlayerFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogPlayerIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogPlayerIntEvent ( int EventID, class AController* Player, int Value )
{
	static UFunction* pFnLogPlayerIntEvent = NULL;

	if ( ! pFnLogPlayerIntEvent )
		pFnLogPlayerIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22227 ];

	UGameplayEventsUploadAnalytics_execLogPlayerIntEvent_Parms LogPlayerIntEvent_Parms;
	LogPlayerIntEvent_Parms.EventID = EventID;
	LogPlayerIntEvent_Parms.Player = Player;
	LogPlayerIntEvent_Parms.Value = Value;

	pFnLogPlayerIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerIntEvent, &LogPlayerIntEvent_Parms, NULL );

	pFnLogPlayerIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogTeamStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsUploadAnalytics::LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value )
{
	static UFunction* pFnLogTeamStringEvent = NULL;

	if ( ! pFnLogTeamStringEvent )
		pFnLogTeamStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22223 ];

	UGameplayEventsUploadAnalytics_execLogTeamStringEvent_Parms LogTeamStringEvent_Parms;
	LogTeamStringEvent_Parms.EventID = EventID;
	LogTeamStringEvent_Parms.Team = Team;
	memcpy ( &LogTeamStringEvent_Parms.Value, &Value, 0xC );

	pFnLogTeamStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamStringEvent, &LogTeamStringEvent_Parms, NULL );

	pFnLogTeamStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogTeamFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value )
{
	static UFunction* pFnLogTeamFloatEvent = NULL;

	if ( ! pFnLogTeamFloatEvent )
		pFnLogTeamFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22219 ];

	UGameplayEventsUploadAnalytics_execLogTeamFloatEvent_Parms LogTeamFloatEvent_Parms;
	LogTeamFloatEvent_Parms.EventID = EventID;
	LogTeamFloatEvent_Parms.Team = Team;
	LogTeamFloatEvent_Parms.Value = Value;

	pFnLogTeamFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamFloatEvent, &LogTeamFloatEvent_Parms, NULL );

	pFnLogTeamFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogTeamIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value )
{
	static UFunction* pFnLogTeamIntEvent = NULL;

	if ( ! pFnLogTeamIntEvent )
		pFnLogTeamIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22215 ];

	UGameplayEventsUploadAnalytics_execLogTeamIntEvent_Parms LogTeamIntEvent_Parms;
	LogTeamIntEvent_Parms.EventID = EventID;
	LogTeamIntEvent_Parms.Team = Team;
	LogTeamIntEvent_Parms.Value = Value;

	pFnLogTeamIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamIntEvent, &LogTeamIntEvent_Parms, NULL );

	pFnLogTeamIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogGamePositionEvent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// float                          Value                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UGameplayEventsUploadAnalytics::LogGamePositionEvent ( int EventID, float Value, struct FVector* Position )
{
	static UFunction* pFnLogGamePositionEvent = NULL;

	if ( ! pFnLogGamePositionEvent )
		pFnLogGamePositionEvent = (UFunction*) UObject::GObjObjects()->Data[ 22211 ];

	UGameplayEventsUploadAnalytics_execLogGamePositionEvent_Parms LogGamePositionEvent_Parms;
	LogGamePositionEvent_Parms.EventID = EventID;
	LogGamePositionEvent_Parms.Value = Value;

	pFnLogGamePositionEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGamePositionEvent, &LogGamePositionEvent_Parms, NULL );

	pFnLogGamePositionEvent->FunctionFlags |= 0x400;

	if ( Position )
		memcpy ( Position, &LogGamePositionEvent_Parms.Position, 0xC );
};

// Function Engine.GameplayEventsUploadAnalytics.LogGameFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogGameFloatEvent ( int EventID, float Value )
{
	static UFunction* pFnLogGameFloatEvent = NULL;

	if ( ! pFnLogGameFloatEvent )
		pFnLogGameFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22208 ];

	UGameplayEventsUploadAnalytics_execLogGameFloatEvent_Parms LogGameFloatEvent_Parms;
	LogGameFloatEvent_Parms.EventID = EventID;
	LogGameFloatEvent_Parms.Value = Value;

	pFnLogGameFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameFloatEvent, &LogGameFloatEvent_Parms, NULL );

	pFnLogGameFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogGameStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsUploadAnalytics::LogGameStringEvent ( int EventID, struct FString Value )
{
	static UFunction* pFnLogGameStringEvent = NULL;

	if ( ! pFnLogGameStringEvent )
		pFnLogGameStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22205 ];

	UGameplayEventsUploadAnalytics_execLogGameStringEvent_Parms LogGameStringEvent_Parms;
	LogGameStringEvent_Parms.EventID = EventID;
	memcpy ( &LogGameStringEvent_Parms.Value, &Value, 0xC );

	pFnLogGameStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameStringEvent, &LogGameStringEvent_Parms, NULL );

	pFnLogGameStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.LogGameIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsUploadAnalytics::LogGameIntEvent ( int EventID, int Value )
{
	static UFunction* pFnLogGameIntEvent = NULL;

	if ( ! pFnLogGameIntEvent )
		pFnLogGameIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22202 ];

	UGameplayEventsUploadAnalytics_execLogGameIntEvent_Parms LogGameIntEvent_Parms;
	LogGameIntEvent_Parms.EventID = EventID;
	LogGameIntEvent_Parms.Value = Value;

	pFnLogGameIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameIntEvent, &LogGameIntEvent_Parms, NULL );

	pFnLogGameIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.EndLogging
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsUploadAnalytics::EndLogging ( )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 22201 ];

	UGameplayEventsUploadAnalytics_execEndLogging_Parms EndLogging_Parms;

	pFnEndLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );

	pFnEndLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.ResetLogging
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsUploadAnalytics::ResetLogging ( float HeartbeatDelta )
{
	static UFunction* pFnResetLogging = NULL;

	if ( ! pFnResetLogging )
		pFnResetLogging = (UFunction*) UObject::GObjObjects()->Data[ 22199 ];

	UGameplayEventsUploadAnalytics_execResetLogging_Parms ResetLogging_Parms;
	ResetLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	pFnResetLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetLogging, &ResetLogging_Parms, NULL );

	pFnResetLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsUploadAnalytics.StartLogging
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsUploadAnalytics::StartLogging ( float HeartbeatDelta )
{
	static UFunction* pFnStartLogging = NULL;

	if ( ! pFnStartLogging )
		pFnStartLogging = (UFunction*) UObject::GObjObjects()->Data[ 22197 ];

	UGameplayEventsUploadAnalytics_execStartLogging_Parms StartLogging_Parms;
	StartLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	pFnStartLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartLogging, &StartLogging_Parms, NULL );

	pFnStartLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACoverLink*              Link                           ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )

int UGameplayEventsWriter::RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player )
{
	static UFunction* pFnRecordCoverLinkFireLinks = NULL;

	if ( ! pFnRecordCoverLinkFireLinks )
		pFnRecordCoverLinkFireLinks = (UFunction*) UObject::GObjObjects()->Data[ 22387 ];

	UGameplayEventsWriter_execRecordCoverLinkFireLinks_Parms RecordCoverLinkFireLinks_Parms;
	RecordCoverLinkFireLinks_Parms.Link = Link;
	RecordCoverLinkFireLinks_Parms.Player = Player;

	this->ProcessEvent ( pFnRecordCoverLinkFireLinks, &RecordCoverLinkFireLinks_Parms, NULL );

	return RecordCoverLinkFireLinks_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.RecordAIPathFail
// [0x00020000] 
// Parameters infos:
// class AController*             AI                             ( CPF_Parm )
// struct FString                 Reason                         ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FVector                 Dest                           ( CPF_Parm )

void UGameplayEventsWriter::RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest )
{
	static UFunction* pFnRecordAIPathFail = NULL;

	if ( ! pFnRecordAIPathFail )
		pFnRecordAIPathFail = (UFunction*) UObject::GObjObjects()->Data[ 22383 ];

	UGameplayEventsWriter_execRecordAIPathFail_Parms RecordAIPathFail_Parms;
	RecordAIPathFail_Parms.AI = AI;
	memcpy ( &RecordAIPathFail_Parms.Reason, &Reason, 0xC );
	memcpy ( &RecordAIPathFail_Parms.Dest, &Dest, 0xC );

	this->ProcessEvent ( pFnRecordAIPathFail, &RecordAIPathFail_Parms, NULL );
};

// Function Engine.GameplayEventsWriter.GetGenericParamListEntry
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UGenericParamListStatEntry* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGenericParamListStatEntry* UGameplayEventsWriter::GetGenericParamListEntry ( )
{
	static UFunction* pFnGetGenericParamListEntry = NULL;

	if ( ! pFnGetGenericParamListEntry )
		pFnGetGenericParamListEntry = (UFunction*) UObject::GObjObjects()->Data[ 22381 ];

	UGameplayEventsWriter_execGetGenericParamListEntry_Parms GetGenericParamListEntry_Parms;

	pFnGetGenericParamListEntry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGenericParamListEntry, &GetGenericParamListEntry_Parms, NULL );

	pFnGetGenericParamListEntry->FunctionFlags |= 0x400;

	return GetGenericParamListEntry_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.LogSystemPollEvents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsWriter::LogSystemPollEvents ( )
{
	static UFunction* pFnLogSystemPollEvents = NULL;

	if ( ! pFnLogSystemPollEvents )
		pFnLogSystemPollEvents = (UFunction*) UObject::GObjObjects()->Data[ 22380 ];

	UGameplayEventsWriter_execLogSystemPollEvents_Parms LogSystemPollEvents_Parms;

	pFnLogSystemPollEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogSystemPollEvents, &LogSystemPollEvents_Parms, NULL );

	pFnLogSystemPollEvents->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogProjectileIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  Proj                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value )
{
	static UFunction* pFnLogProjectileIntEvent = NULL;

	if ( ! pFnLogProjectileIntEvent )
		pFnLogProjectileIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22375 ];

	UGameplayEventsWriter_execLogProjectileIntEvent_Parms LogProjectileIntEvent_Parms;
	LogProjectileIntEvent_Parms.EventID = EventID;
	LogProjectileIntEvent_Parms.Player = Player;
	LogProjectileIntEvent_Parms.Proj = Proj;
	LogProjectileIntEvent_Parms.Value = Value;

	pFnLogProjectileIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogProjectileIntEvent, &LogProjectileIntEvent_Parms, NULL );

	pFnLogProjectileIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogDamageEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

void UGameplayEventsWriter::LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount )
{
	static UFunction* pFnLogDamageEvent = NULL;

	if ( ! pFnLogDamageEvent )
		pFnLogDamageEvent = (UFunction*) UObject::GObjObjects()->Data[ 22369 ];

	UGameplayEventsWriter_execLogDamageEvent_Parms LogDamageEvent_Parms;
	LogDamageEvent_Parms.EventID = EventID;
	LogDamageEvent_Parms.Player = Player;
	LogDamageEvent_Parms.dmgType = dmgType;
	LogDamageEvent_Parms.Target = Target;
	LogDamageEvent_Parms.Amount = Amount;

	pFnLogDamageEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDamageEvent, &LogDamageEvent_Parms, NULL );

	pFnLogDamageEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogWeaponIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value )
{
	static UFunction* pFnLogWeaponIntEvent = NULL;

	if ( ! pFnLogWeaponIntEvent )
		pFnLogWeaponIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22364 ];

	UGameplayEventsWriter_execLogWeaponIntEvent_Parms LogWeaponIntEvent_Parms;
	LogWeaponIntEvent_Parms.EventID = EventID;
	LogWeaponIntEvent_Parms.Player = Player;
	LogWeaponIntEvent_Parms.WeaponClass = WeaponClass;
	LogWeaponIntEvent_Parms.Value = Value;

	pFnLogWeaponIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogWeaponIntEvent, &LogWeaponIntEvent_Parms, NULL );

	pFnLogWeaponIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class AController*             Target                         ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target )
{
	static UFunction* pFnLogPlayerPlayerEvent = NULL;

	if ( ! pFnLogPlayerPlayerEvent )
		pFnLogPlayerPlayerEvent = (UFunction*) UObject::GObjObjects()->Data[ 22360 ];

	UGameplayEventsWriter_execLogPlayerPlayerEvent_Parms LogPlayerPlayerEvent_Parms;
	LogPlayerPlayerEvent_Parms.EventID = EventID;
	LogPlayerPlayerEvent_Parms.Player = Player;
	LogPlayerPlayerEvent_Parms.Target = Target;

	pFnLogPlayerPlayerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerPlayerEvent, &LogPlayerPlayerEvent_Parms, NULL );

	pFnLogPlayerPlayerEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerKillDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            KillType                       ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )
// class AController*             Dead                           ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead )
{
	static UFunction* pFnLogPlayerKillDeath = NULL;

	if ( ! pFnLogPlayerKillDeath )
		pFnLogPlayerKillDeath = (UFunction*) UObject::GObjObjects()->Data[ 22354 ];

	UGameplayEventsWriter_execLogPlayerKillDeath_Parms LogPlayerKillDeath_Parms;
	LogPlayerKillDeath_Parms.EventID = EventID;
	LogPlayerKillDeath_Parms.KillType = KillType;
	LogPlayerKillDeath_Parms.Killer = Killer;
	LogPlayerKillDeath_Parms.dmgType = dmgType;
	LogPlayerKillDeath_Parms.Dead = Dead;

	pFnLogPlayerKillDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerKillDeath, &LogPlayerKillDeath_Parms, NULL );

	pFnLogPlayerKillDeath->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsWriter::LogAllPlayerPositionsEvent ( int EventID )
{
	static UFunction* pFnLogAllPlayerPositionsEvent = NULL;

	if ( ! pFnLogAllPlayerPositionsEvent )
		pFnLogAllPlayerPositionsEvent = (UFunction*) UObject::GObjObjects()->Data[ 22352 ];

	UGameplayEventsWriter_execLogAllPlayerPositionsEvent_Parms LogAllPlayerPositionsEvent_Parms;
	LogAllPlayerPositionsEvent_Parms.EventID = EventID;

	pFnLogAllPlayerPositionsEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogAllPlayerPositionsEvent, &LogAllPlayerPositionsEvent_Parms, NULL );

	pFnLogAllPlayerPositionsEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerLoginChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bSplitScreen                   ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen )
{
	static UFunction* pFnLogPlayerLoginChange = NULL;

	if ( ! pFnLogPlayerLoginChange )
		pFnLogPlayerLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 22346 ];

	UGameplayEventsWriter_execLogPlayerLoginChange_Parms LogPlayerLoginChange_Parms;
	LogPlayerLoginChange_Parms.EventID = EventID;
	LogPlayerLoginChange_Parms.Player = Player;
	memcpy ( &LogPlayerLoginChange_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &LogPlayerLoginChange_Parms.PlayerID, &PlayerID, 0x48 );
	LogPlayerLoginChange_Parms.bSplitScreen = bSplitScreen;

	pFnLogPlayerLoginChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerLoginChange, &LogPlayerLoginChange_Parms, NULL );

	pFnLogPlayerLoginChange->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// class UClass*                  PawnClass                      ( CPF_Parm )
// int                            TeamID                         ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID )
{
	static UFunction* pFnLogPlayerSpawnEvent = NULL;

	if ( ! pFnLogPlayerSpawnEvent )
		pFnLogPlayerSpawnEvent = (UFunction*) UObject::GObjObjects()->Data[ 22341 ];

	UGameplayEventsWriter_execLogPlayerSpawnEvent_Parms LogPlayerSpawnEvent_Parms;
	LogPlayerSpawnEvent_Parms.EventID = EventID;
	LogPlayerSpawnEvent_Parms.Player = Player;
	LogPlayerSpawnEvent_Parms.PawnClass = PawnClass;
	LogPlayerSpawnEvent_Parms.TeamID = TeamID;

	pFnLogPlayerSpawnEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerSpawnEvent, &LogPlayerSpawnEvent_Parms, NULL );

	pFnLogPlayerSpawnEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// struct FString                 EventString                    ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriter::LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString )
{
	static UFunction* pFnLogPlayerStringEvent = NULL;

	if ( ! pFnLogPlayerStringEvent )
		pFnLogPlayerStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22337 ];

	UGameplayEventsWriter_execLogPlayerStringEvent_Parms LogPlayerStringEvent_Parms;
	LogPlayerStringEvent_Parms.EventID = EventID;
	LogPlayerStringEvent_Parms.Player = Player;
	memcpy ( &LogPlayerStringEvent_Parms.EventString, &EventString, 0xC );

	pFnLogPlayerStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerStringEvent, &LogPlayerStringEvent_Parms, NULL );

	pFnLogPlayerStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerFloatEvent ( int EventID, class AController* Player, float Value )
{
	static UFunction* pFnLogPlayerFloatEvent = NULL;

	if ( ! pFnLogPlayerFloatEvent )
		pFnLogPlayerFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22333 ];

	UGameplayEventsWriter_execLogPlayerFloatEvent_Parms LogPlayerFloatEvent_Parms;
	LogPlayerFloatEvent_Parms.EventID = EventID;
	LogPlayerFloatEvent_Parms.Player = Player;
	LogPlayerFloatEvent_Parms.Value = Value;

	pFnLogPlayerFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerFloatEvent, &LogPlayerFloatEvent_Parms, NULL );

	pFnLogPlayerFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogPlayerIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class AController*             Player                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogPlayerIntEvent ( int EventID, class AController* Player, int Value )
{
	static UFunction* pFnLogPlayerIntEvent = NULL;

	if ( ! pFnLogPlayerIntEvent )
		pFnLogPlayerIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22329 ];

	UGameplayEventsWriter_execLogPlayerIntEvent_Parms LogPlayerIntEvent_Parms;
	LogPlayerIntEvent_Parms.EventID = EventID;
	LogPlayerIntEvent_Parms.Player = Player;
	LogPlayerIntEvent_Parms.Value = Value;

	pFnLogPlayerIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPlayerIntEvent, &LogPlayerIntEvent_Parms, NULL );

	pFnLogPlayerIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogTeamStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriter::LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value )
{
	static UFunction* pFnLogTeamStringEvent = NULL;

	if ( ! pFnLogTeamStringEvent )
		pFnLogTeamStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22325 ];

	UGameplayEventsWriter_execLogTeamStringEvent_Parms LogTeamStringEvent_Parms;
	LogTeamStringEvent_Parms.EventID = EventID;
	LogTeamStringEvent_Parms.Team = Team;
	memcpy ( &LogTeamStringEvent_Parms.Value, &Value, 0xC );

	pFnLogTeamStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamStringEvent, &LogTeamStringEvent_Parms, NULL );

	pFnLogTeamStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogTeamFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value )
{
	static UFunction* pFnLogTeamFloatEvent = NULL;

	if ( ! pFnLogTeamFloatEvent )
		pFnLogTeamFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22321 ];

	UGameplayEventsWriter_execLogTeamFloatEvent_Parms LogTeamFloatEvent_Parms;
	LogTeamFloatEvent_Parms.EventID = EventID;
	LogTeamFloatEvent_Parms.Team = Team;
	LogTeamFloatEvent_Parms.Value = Value;

	pFnLogTeamFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamFloatEvent, &LogTeamFloatEvent_Parms, NULL );

	pFnLogTeamFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogTeamIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// class ATeamInfo*               Team                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value )
{
	static UFunction* pFnLogTeamIntEvent = NULL;

	if ( ! pFnLogTeamIntEvent )
		pFnLogTeamIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22317 ];

	UGameplayEventsWriter_execLogTeamIntEvent_Parms LogTeamIntEvent_Parms;
	LogTeamIntEvent_Parms.EventID = EventID;
	LogTeamIntEvent_Parms.Team = Team;
	LogTeamIntEvent_Parms.Value = Value;

	pFnLogTeamIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogTeamIntEvent, &LogTeamIntEvent_Parms, NULL );

	pFnLogTeamIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogGamePositionEvent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// float                          Value                          ( CPF_Parm )
// struct FVector                 Position                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UGameplayEventsWriter::LogGamePositionEvent ( int EventID, float Value, struct FVector* Position )
{
	static UFunction* pFnLogGamePositionEvent = NULL;

	if ( ! pFnLogGamePositionEvent )
		pFnLogGamePositionEvent = (UFunction*) UObject::GObjObjects()->Data[ 22313 ];

	UGameplayEventsWriter_execLogGamePositionEvent_Parms LogGamePositionEvent_Parms;
	LogGamePositionEvent_Parms.EventID = EventID;
	LogGamePositionEvent_Parms.Value = Value;

	pFnLogGamePositionEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGamePositionEvent, &LogGamePositionEvent_Parms, NULL );

	pFnLogGamePositionEvent->FunctionFlags |= 0x400;

	if ( Position )
		memcpy ( Position, &LogGamePositionEvent_Parms.Position, 0xC );
};

// Function Engine.GameplayEventsWriter.LogGameFloatEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogGameFloatEvent ( int EventID, float Value )
{
	static UFunction* pFnLogGameFloatEvent = NULL;

	if ( ! pFnLogGameFloatEvent )
		pFnLogGameFloatEvent = (UFunction*) UObject::GObjObjects()->Data[ 22310 ];

	UGameplayEventsWriter_execLogGameFloatEvent_Parms LogGameFloatEvent_Parms;
	LogGameFloatEvent_Parms.EventID = EventID;
	LogGameFloatEvent_Parms.Value = Value;

	pFnLogGameFloatEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameFloatEvent, &LogGameFloatEvent_Parms, NULL );

	pFnLogGameFloatEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogGameStringEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UGameplayEventsWriter::LogGameStringEvent ( int EventID, struct FString Value )
{
	static UFunction* pFnLogGameStringEvent = NULL;

	if ( ! pFnLogGameStringEvent )
		pFnLogGameStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 22307 ];

	UGameplayEventsWriter_execLogGameStringEvent_Parms LogGameStringEvent_Parms;
	LogGameStringEvent_Parms.EventID = EventID;
	memcpy ( &LogGameStringEvent_Parms.Value, &Value, 0xC );

	pFnLogGameStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameStringEvent, &LogGameStringEvent_Parms, NULL );

	pFnLogGameStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.LogGameIntEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EventID                        ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGameplayEventsWriter::LogGameIntEvent ( int EventID, int Value )
{
	static UFunction* pFnLogGameIntEvent = NULL;

	if ( ! pFnLogGameIntEvent )
		pFnLogGameIntEvent = (UFunction*) UObject::GObjObjects()->Data[ 22304 ];

	UGameplayEventsWriter_execLogGameIntEvent_Parms LogGameIntEvent_Parms;
	LogGameIntEvent_Parms.EventID = EventID;
	LogGameIntEvent_Parms.Value = Value;

	pFnLogGameIntEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogGameIntEvent, &LogGameIntEvent_Parms, NULL );

	pFnLogGameIntEvent->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.EndLogging
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsWriter::EndLogging ( )
{
	static UFunction* pFnEndLogging = NULL;

	if ( ! pFnEndLogging )
		pFnEndLogging = (UFunction*) UObject::GObjObjects()->Data[ 22303 ];

	UGameplayEventsWriter_execEndLogging_Parms EndLogging_Parms;

	pFnEndLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndLogging, &EndLogging_Parms, NULL );

	pFnEndLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.ResetLogging
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsWriter::ResetLogging ( float HeartbeatDelta )
{
	static UFunction* pFnResetLogging = NULL;

	if ( ! pFnResetLogging )
		pFnResetLogging = (UFunction*) UObject::GObjObjects()->Data[ 22301 ];

	UGameplayEventsWriter_execResetLogging_Parms ResetLogging_Parms;
	ResetLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	pFnResetLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetLogging, &ResetLogging_Parms, NULL );

	pFnResetLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.StartLogging
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          HeartbeatDelta                 ( CPF_OptionalParm | CPF_Parm )

void UGameplayEventsWriter::StartLogging ( float HeartbeatDelta )
{
	static UFunction* pFnStartLogging = NULL;

	if ( ! pFnStartLogging )
		pFnStartLogging = (UFunction*) UObject::GObjObjects()->Data[ 22299 ];

	UGameplayEventsWriter_execStartLogging_Parms StartLogging_Parms;
	StartLogging_Parms.HeartbeatDelta = HeartbeatDelta;

	pFnStartLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartLogging, &StartLogging_Parms, NULL );

	pFnStartLogging->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.SerializeFooter
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsWriter::SerializeFooter ( )
{
	static UFunction* pFnSerializeFooter = NULL;

	if ( ! pFnSerializeFooter )
		pFnSerializeFooter = (UFunction*) UObject::GObjObjects()->Data[ 22297 ];

	UGameplayEventsWriter_execSerializeFooter_Parms SerializeFooter_Parms;

	pFnSerializeFooter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeFooter, &SerializeFooter_Parms, NULL );

	pFnSerializeFooter->FunctionFlags |= 0x400;

	return SerializeFooter_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.SerializeHeader
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameplayEventsWriter::SerializeHeader ( )
{
	static UFunction* pFnSerializeHeader = NULL;

	if ( ! pFnSerializeHeader )
		pFnSerializeHeader = (UFunction*) UObject::GObjObjects()->Data[ 22295 ];

	UGameplayEventsWriter_execSerializeHeader_Parms SerializeHeader_Parms;

	pFnSerializeHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSerializeHeader, &SerializeHeader_Parms, NULL );

	pFnSerializeHeader->FunctionFlags |= 0x400;

	return SerializeHeader_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.CloseStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameplayEventsWriter::CloseStatsFile ( )
{
	static UFunction* pFnCloseStatsFile = NULL;

	if ( ! pFnCloseStatsFile )
		pFnCloseStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 22294 ];

	UGameplayEventsWriter_execCloseStatsFile_Parms CloseStatsFile_Parms;

	pFnCloseStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseStatsFile, &CloseStatsFile_Parms, NULL );

	pFnCloseStatsFile->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsWriter.OpenStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UGameplayEventsWriter::OpenStatsFile ( struct FString Filename )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = (UFunction*) UObject::GObjObjects()->Data[ 22291 ];

	UGameplayEventsWriter_execOpenStatsFile_Parms OpenStatsFile_Parms;
	memcpy ( &OpenStatsFile_Parms.Filename, &Filename, 0xC );

	pFnOpenStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	pFnOpenStatsFile->FunctionFlags |= 0x400;

	return OpenStatsFile_Parms.ReturnValue;
};

// Function Engine.GameplayEventsWriter.ResolvePlayerIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )

int UGameplayEventsWriter::ResolvePlayerIndex ( class AController* Player )
{
	static UFunction* pFnResolvePlayerIndex = NULL;

	if ( ! pFnResolvePlayerIndex )
		pFnResolvePlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 22288 ];

	UGameplayEventsWriter_execResolvePlayerIndex_Parms ResolvePlayerIndex_Parms;
	ResolvePlayerIndex_Parms.Player = Player;

	pFnResolvePlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolvePlayerIndex, &ResolvePlayerIndex_Parms, NULL );

	pFnResolvePlayerIndex->FunctionFlags |= 0x400;

	return ResolvePlayerIndex_Parms.ReturnValue;
};

// Function Engine.GameplayEventsHandler.RemoveFilter
// [0x00020002] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsHandler::RemoveFilter ( int EventID )
{
	static UFunction* pFnRemoveFilter = NULL;

	if ( ! pFnRemoveFilter )
		pFnRemoveFilter = (UFunction*) UObject::GObjObjects()->Data[ 22020 ];

	UGameplayEventsHandler_execRemoveFilter_Parms RemoveFilter_Parms;
	RemoveFilter_Parms.EventID = EventID;

	this->ProcessEvent ( pFnRemoveFilter, &RemoveFilter_Parms, NULL );
};

// Function Engine.GameplayEventsHandler.AddFilter
// [0x00020002] 
// Parameters infos:
// int                            EventID                        ( CPF_Parm )

void UGameplayEventsHandler::AddFilter ( int EventID )
{
	static UFunction* pFnAddFilter = NULL;

	if ( ! pFnAddFilter )
		pFnAddFilter = (UFunction*) UObject::GObjObjects()->Data[ 22018 ];

	UGameplayEventsHandler_execAddFilter_Parms AddFilter_Parms;
	AddFilter_Parms.EventID = EventID;

	this->ProcessEvent ( pFnAddFilter, &AddFilter_Parms, NULL );
};

// Function Engine.GameplayEventsHandler.ResolveGroupFilters
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameplayEventsHandler::eventResolveGroupFilters ( )
{
	static UFunction* pFnResolveGroupFilters = NULL;

	if ( ! pFnResolveGroupFilters )
		pFnResolveGroupFilters = (UFunction*) UObject::GObjObjects()->Data[ 22015 ];

	UGameplayEventsHandler_eventResolveGroupFilters_Parms ResolveGroupFilters_Parms;

	this->ProcessEvent ( pFnResolveGroupFilters, &ResolveGroupFilters_Parms, NULL );
};

// Function Engine.GameplayEventsHandler.PostProcessStream
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UGameplayEventsHandler::eventPostProcessStream ( )
{
	static UFunction* pFnPostProcessStream = NULL;

	if ( ! pFnPostProcessStream )
		pFnPostProcessStream = (UFunction*) UObject::GObjObjects()->Data[ 22014 ];

	UGameplayEventsHandler_eventPostProcessStream_Parms PostProcessStream_Parms;

	this->ProcessEvent ( pFnPostProcessStream, &PostProcessStream_Parms, NULL );
};

// Function Engine.GameplayEventsHandler.PreProcessStream
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UGameplayEventsHandler::eventPreProcessStream ( )
{
	static UFunction* pFnPreProcessStream = NULL;

	if ( ! pFnPreProcessStream )
		pFnPreProcessStream = (UFunction*) UObject::GObjObjects()->Data[ 22013 ];

	UGameplayEventsHandler_eventPreProcessStream_Parms PreProcessStream_Parms;

	pFnPreProcessStream->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPreProcessStream, &PreProcessStream_Parms, NULL );

	pFnPreProcessStream->FunctionFlags |= 0x400;
};

// Function Engine.GameplayEventsHandler.SetReader
// [0x00020002] 
// Parameters infos:
// class UGameplayEventsReader*   NewReader                      ( CPF_Parm )

void UGameplayEventsHandler::SetReader ( class UGameplayEventsReader* NewReader )
{
	static UFunction* pFnSetReader = NULL;

	if ( ! pFnSetReader )
		pFnSetReader = (UFunction*) UObject::GObjObjects()->Data[ 22011 ];

	UGameplayEventsHandler_execSetReader_Parms SetReader_Parms;
	SetReader_Parms.NewReader = NewReader;

	this->ProcessEvent ( pFnSetReader, &SetReader_Parms, NULL );
};

// Function Engine.GenericParamListStatEntry.CommitToDisk
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGenericParamListStatEntry::CommitToDisk ( )
{
	static UFunction* pFnCommitToDisk = NULL;

	if ( ! pFnCommitToDisk )
		pFnCommitToDisk = (UFunction*) UObject::GObjObjects()->Data[ 22831 ];

	UGenericParamListStatEntry_execCommitToDisk_Parms CommitToDisk_Parms;

	pFnCommitToDisk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCommitToDisk, &CommitToDisk_Parms, NULL );

	pFnCommitToDisk->FunctionFlags |= 0x400;
};

// Function Engine.GenericParamListStatEntry.GetString
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParamName                      ( CPF_Parm )
// struct FString                 out_string                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGenericParamListStatEntry::GetString ( struct FName ParamName, struct FString* out_string )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 22827 ];

	UGenericParamListStatEntry_execGetString_Parms GetString_Parms;
	memcpy ( &GetString_Parms.ParamName, &ParamName, 0x8 );

	pFnGetString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	pFnGetString->FunctionFlags |= 0x400;

	if ( out_string )
		memcpy ( out_string, &GetString_Parms.out_string, 0xC );

	return GetString_Parms.ReturnValue;
};

// Function Engine.GenericParamListStatEntry.GetVector
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParamName                      ( CPF_Parm )
// struct FVector                 out_vector                     ( CPF_Parm | CPF_OutParm )

bool UGenericParamListStatEntry::GetVector ( struct FName ParamName, struct FVector* out_vector )
{
	static UFunction* pFnGetVector = NULL;

	if ( ! pFnGetVector )
		pFnGetVector = (UFunction*) UObject::GObjObjects()->Data[ 22823 ];

	UGenericParamListStatEntry_execGetVector_Parms GetVector_Parms;
	memcpy ( &GetVector_Parms.ParamName, &ParamName, 0x8 );

	pFnGetVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVector, &GetVector_Parms, NULL );

	pFnGetVector->FunctionFlags |= 0x400;

	if ( out_vector )
		memcpy ( out_vector, &GetVector_Parms.out_vector, 0xC );

	return GetVector_Parms.ReturnValue;
};

// Function Engine.GenericParamListStatEntry.GetInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParamName                      ( CPF_Parm )
// int                            out_int                        ( CPF_Parm | CPF_OutParm )

bool UGenericParamListStatEntry::GetInt ( struct FName ParamName, int* out_int )
{
	static UFunction* pFnGetInt = NULL;

	if ( ! pFnGetInt )
		pFnGetInt = (UFunction*) UObject::GObjObjects()->Data[ 22819 ];

	UGenericParamListStatEntry_execGetInt_Parms GetInt_Parms;
	memcpy ( &GetInt_Parms.ParamName, &ParamName, 0x8 );

	pFnGetInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInt, &GetInt_Parms, NULL );

	pFnGetInt->FunctionFlags |= 0x400;

	if ( out_int )
		*out_int = GetInt_Parms.out_int;

	return GetInt_Parms.ReturnValue;
};

// Function Engine.GenericParamListStatEntry.GetFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParamName                      ( CPF_Parm )
// float                          out_Float                      ( CPF_Parm | CPF_OutParm )

bool UGenericParamListStatEntry::GetFloat ( struct FName ParamName, float* out_Float )
{
	static UFunction* pFnGetFloat = NULL;

	if ( ! pFnGetFloat )
		pFnGetFloat = (UFunction*) UObject::GObjObjects()->Data[ 22815 ];

	UGenericParamListStatEntry_execGetFloat_Parms GetFloat_Parms;
	memcpy ( &GetFloat_Parms.ParamName, &ParamName, 0x8 );

	pFnGetFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloat, &GetFloat_Parms, NULL );

	pFnGetFloat->FunctionFlags |= 0x400;

	if ( out_Float )
		*out_Float = GetFloat_Parms.out_Float;

	return GetFloat_Parms.ReturnValue;
};

// Function Engine.GenericParamListStatEntry.AddString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParamName                      ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UGenericParamListStatEntry::AddString ( struct FName ParamName, struct FString Value )
{
	static UFunction* pFnAddString = NULL;

	if ( ! pFnAddString )
		pFnAddString = (UFunction*) UObject::GObjObjects()->Data[ 22812 ];

	UGenericParamListStatEntry_execAddString_Parms AddString_Parms;
	memcpy ( &AddString_Parms.ParamName, &ParamName, 0x8 );
	memcpy ( &AddString_Parms.Value, &Value, 0xC );

	pFnAddString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddString, &AddString_Parms, NULL );

	pFnAddString->FunctionFlags |= 0x400;
};

// Function Engine.GenericParamListStatEntry.AddVector
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParamName                      ( CPF_Parm )
// struct FVector                 Value                          ( CPF_Parm )

void UGenericParamListStatEntry::AddVector ( struct FName ParamName, struct FVector Value )
{
	static UFunction* pFnAddVector = NULL;

	if ( ! pFnAddVector )
		pFnAddVector = (UFunction*) UObject::GObjObjects()->Data[ 22809 ];

	UGenericParamListStatEntry_execAddVector_Parms AddVector_Parms;
	memcpy ( &AddVector_Parms.ParamName, &ParamName, 0x8 );
	memcpy ( &AddVector_Parms.Value, &Value, 0xC );

	pFnAddVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddVector, &AddVector_Parms, NULL );

	pFnAddVector->FunctionFlags |= 0x400;
};

// Function Engine.GenericParamListStatEntry.AddInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParamName                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UGenericParamListStatEntry::AddInt ( struct FName ParamName, int Value )
{
	static UFunction* pFnAddInt = NULL;

	if ( ! pFnAddInt )
		pFnAddInt = (UFunction*) UObject::GObjObjects()->Data[ 22806 ];

	UGenericParamListStatEntry_execAddInt_Parms AddInt_Parms;
	memcpy ( &AddInt_Parms.ParamName, &ParamName, 0x8 );
	AddInt_Parms.Value = Value;

	pFnAddInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddInt, &AddInt_Parms, NULL );

	pFnAddInt->FunctionFlags |= 0x400;
};

// Function Engine.GenericParamListStatEntry.AddFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParamName                      ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UGenericParamListStatEntry::AddFloat ( struct FName ParamName, float Value )
{
	static UFunction* pFnAddFloat = NULL;

	if ( ! pFnAddFloat )
		pFnAddFloat = (UFunction*) UObject::GObjObjects()->Data[ 22803 ];

	UGenericParamListStatEntry_execAddFloat_Parms AddFloat_Parms;
	memcpy ( &AddFloat_Parms.ParamName, &ParamName, 0x8 );
	AddFloat_Parms.Value = Value;

	pFnAddFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFloat, &AddFloat_Parms, NULL );

	pFnAddFloat->FunctionFlags |= 0x400;
};

// Function Engine.HttpBaseInterface.GetContent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        Content                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UHttpBaseInterface::GetContent ( TArray< unsigned char >* Content )
{
	static UFunction* pFnGetContent = NULL;

	if ( ! pFnGetContent )
		pFnGetContent = (UFunction*) UObject::GObjObjects()->Data[ 22913 ];

	UHttpBaseInterface_execGetContent_Parms GetContent_Parms;

	pFnGetContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetContent, &GetContent_Parms, NULL );

	pFnGetContent->FunctionFlags |= 0x400;

	if ( Content )
		memcpy ( Content, &GetContent_Parms.Content, 0xC );
};

// Function Engine.HttpBaseInterface.GetURL
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UHttpBaseInterface::GetURL ( )
{
	static UFunction* pFnGetURL = NULL;

	if ( ! pFnGetURL )
		pFnGetURL = (UFunction*) UObject::GObjObjects()->Data[ 16651 ];

	UHttpBaseInterface_execGetURL_Parms GetURL_Parms;

	pFnGetURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetURL, &GetURL_Parms, NULL );

	pFnGetURL->FunctionFlags |= 0x400;

	return GetURL_Parms.ReturnValue;
};

// Function Engine.HttpBaseInterface.GetContentLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UHttpBaseInterface::GetContentLength ( )
{
	static UFunction* pFnGetContentLength = NULL;

	if ( ! pFnGetContentLength )
		pFnGetContentLength = (UFunction*) UObject::GObjObjects()->Data[ 16649 ];

	UHttpBaseInterface_execGetContentLength_Parms GetContentLength_Parms;

	pFnGetContentLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetContentLength, &GetContentLength_Parms, NULL );

	pFnGetContentLength->FunctionFlags |= 0x400;

	return GetContentLength_Parms.ReturnValue;
};

// Function Engine.HttpBaseInterface.GetContentType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UHttpBaseInterface::GetContentType ( )
{
	static UFunction* pFnGetContentType = NULL;

	if ( ! pFnGetContentType )
		pFnGetContentType = (UFunction*) UObject::GObjObjects()->Data[ 16647 ];

	UHttpBaseInterface_execGetContentType_Parms GetContentType_Parms;

	pFnGetContentType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetContentType, &GetContentType_Parms, NULL );

	pFnGetContentType->FunctionFlags |= 0x400;

	return GetContentType_Parms.ReturnValue;
};

// Function Engine.HttpBaseInterface.GetURLParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 ParameterName                  ( CPF_Parm | CPF_NeedCtorLink )

struct FString UHttpBaseInterface::GetURLParameter ( struct FString ParameterName )
{
	static UFunction* pFnGetURLParameter = NULL;

	if ( ! pFnGetURLParameter )
		pFnGetURLParameter = (UFunction*) UObject::GObjObjects()->Data[ 16643 ];

	UHttpBaseInterface_execGetURLParameter_Parms GetURLParameter_Parms;
	memcpy ( &GetURLParameter_Parms.ParameterName, &ParameterName, 0xC );

	pFnGetURLParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetURLParameter, &GetURLParameter_Parms, NULL );

	pFnGetURLParameter->FunctionFlags |= 0x400;

	return GetURLParameter_Parms.ReturnValue;
};

// Function Engine.HttpBaseInterface.GetHeaders
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FString > UHttpBaseInterface::GetHeaders ( )
{
	static UFunction* pFnGetHeaders = NULL;

	if ( ! pFnGetHeaders )
		pFnGetHeaders = (UFunction*) UObject::GObjObjects()->Data[ 16672 ];

	UHttpBaseInterface_execGetHeaders_Parms GetHeaders_Parms;

	pFnGetHeaders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeaders, &GetHeaders_Parms, NULL );

	pFnGetHeaders->FunctionFlags |= 0x400;

	return GetHeaders_Parms.ReturnValue;
};

// Function Engine.HttpBaseInterface.GetHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 HeaderName                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString UHttpBaseInterface::GetHeader ( struct FString HeaderName )
{
	static UFunction* pFnGetHeader = NULL;

	if ( ! pFnGetHeader )
		pFnGetHeader = (UFunction*) UObject::GObjObjects()->Data[ 16645 ];

	UHttpBaseInterface_execGetHeader_Parms GetHeader_Parms;
	memcpy ( &GetHeader_Parms.HeaderName, &HeaderName, 0xC );

	pFnGetHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeader, &GetHeader_Parms, NULL );

	pFnGetHeader->FunctionFlags |= 0x400;

	return GetHeader_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.SetProcessRequestCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         ProcessRequestCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

class UHttpRequestInterface* UHttpRequestInterface::SetProcessRequestCompleteDelegate ( struct FScriptDelegate ProcessRequestCompleteDelegate )
{
	static UFunction* pFnSetProcessRequestCompleteDelegate = NULL;

	if ( ! pFnSetProcessRequestCompleteDelegate )
		pFnSetProcessRequestCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 16659 ];

	UHttpRequestInterface_execSetProcessRequestCompleteDelegate_Parms SetProcessRequestCompleteDelegate_Parms;
	memcpy ( &SetProcessRequestCompleteDelegate_Parms.ProcessRequestCompleteDelegate, &ProcessRequestCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnSetProcessRequestCompleteDelegate, &SetProcessRequestCompleteDelegate_Parms, NULL );

	return SetProcessRequestCompleteDelegate_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.OnProcessRequestComplete
// [0x00120000] 
// Parameters infos:
// class UHttpRequestInterface*   OriginalRequest                ( CPF_Parm )
// class UHttpResponseInterface*  InHttpResponse                 ( CPF_Parm )
// unsigned long                  bDidSucceed                    ( CPF_Parm )

void UHttpRequestInterface::OnProcessRequestComplete ( class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* InHttpResponse, unsigned long bDidSucceed )
{
	static UFunction* pFnOnProcessRequestComplete = NULL;

	if ( ! pFnOnProcessRequestComplete )
		pFnOnProcessRequestComplete = (UFunction*) UObject::GObjObjects()->Data[ 22929 ];

	UHttpRequestInterface_execOnProcessRequestComplete_Parms OnProcessRequestComplete_Parms;
	OnProcessRequestComplete_Parms.OriginalRequest = OriginalRequest;
	OnProcessRequestComplete_Parms.InHttpResponse = InHttpResponse;
	OnProcessRequestComplete_Parms.bDidSucceed = bDidSucceed;

	this->ProcessEvent ( pFnOnProcessRequestComplete, &OnProcessRequestComplete_Parms, NULL );
};

// Function Engine.HttpRequestInterface.ProcessRequest
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UHttpRequestInterface::ProcessRequest ( )
{
	static UFunction* pFnProcessRequest = NULL;

	if ( ! pFnProcessRequest )
		pFnProcessRequest = (UFunction*) UObject::GObjObjects()->Data[ 16655 ];

	UHttpRequestInterface_execProcessRequest_Parms ProcessRequest_Parms;

	pFnProcessRequest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessRequest, &ProcessRequest_Parms, NULL );

	pFnProcessRequest->FunctionFlags |= 0x400;

	return ProcessRequest_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.SetHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 HeaderName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 HeaderValue                    ( CPF_Parm | CPF_NeedCtorLink )

class UHttpRequestInterface* UHttpRequestInterface::SetHeader ( struct FString HeaderName, struct FString HeaderValue )
{
	static UFunction* pFnSetHeader = NULL;

	if ( ! pFnSetHeader )
		pFnSetHeader = (UFunction*) UObject::GObjObjects()->Data[ 16657 ];

	UHttpRequestInterface_execSetHeader_Parms SetHeader_Parms;
	memcpy ( &SetHeader_Parms.HeaderName, &HeaderName, 0xC );
	memcpy ( &SetHeader_Parms.HeaderValue, &HeaderValue, 0xC );

	pFnSetHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHeader, &SetHeader_Parms, NULL );

	pFnSetHeader->FunctionFlags |= 0x400;

	return SetHeader_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.SetContentAsString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ContentString                  ( CPF_Parm | CPF_NeedCtorLink )

class UHttpRequestInterface* UHttpRequestInterface::SetContentAsString ( struct FString ContentString )
{
	static UFunction* pFnSetContentAsString = NULL;

	if ( ! pFnSetContentAsString )
		pFnSetContentAsString = (UFunction*) UObject::GObjObjects()->Data[ 16641 ];

	UHttpRequestInterface_execSetContentAsString_Parms SetContentAsString_Parms;
	memcpy ( &SetContentAsString_Parms.ContentString, &ContentString, 0xC );

	pFnSetContentAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetContentAsString, &SetContentAsString_Parms, NULL );

	pFnSetContentAsString->FunctionFlags |= 0x400;

	return SetContentAsString_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.SetContent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< unsigned char >        ContentPayload                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UHttpRequestInterface* UHttpRequestInterface::SetContent ( TArray< unsigned char >* ContentPayload )
{
	static UFunction* pFnSetContent = NULL;

	if ( ! pFnSetContent )
		pFnSetContent = (UFunction*) UObject::GObjObjects()->Data[ 22922 ];

	UHttpRequestInterface_execSetContent_Parms SetContent_Parms;

	pFnSetContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetContent, &SetContent_Parms, NULL );

	pFnSetContent->FunctionFlags |= 0x400;

	if ( ContentPayload )
		memcpy ( ContentPayload, &SetContent_Parms.ContentPayload, 0xC );

	return SetContent_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.SetURL
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

class UHttpRequestInterface* UHttpRequestInterface::SetURL ( struct FString URL )
{
	static UFunction* pFnSetURL = NULL;

	if ( ! pFnSetURL )
		pFnSetURL = (UFunction*) UObject::GObjObjects()->Data[ 16637 ];

	UHttpRequestInterface_execSetURL_Parms SetURL_Parms;
	memcpy ( &SetURL_Parms.URL, &URL, 0xC );

	pFnSetURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetURL, &SetURL_Parms, NULL );

	pFnSetURL->FunctionFlags |= 0x400;

	return SetURL_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.SetVerb
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Verb                           ( CPF_Parm | CPF_NeedCtorLink )

class UHttpRequestInterface* UHttpRequestInterface::SetVerb ( struct FString Verb )
{
	static UFunction* pFnSetVerb = NULL;

	if ( ! pFnSetVerb )
		pFnSetVerb = (UFunction*) UObject::GObjObjects()->Data[ 16639 ];

	UHttpRequestInterface_execSetVerb_Parms SetVerb_Parms;
	memcpy ( &SetVerb_Parms.Verb, &Verb, 0xC );

	pFnSetVerb->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVerb, &SetVerb_Parms, NULL );

	pFnSetVerb->FunctionFlags |= 0x400;

	return SetVerb_Parms.ReturnValue;
};

// Function Engine.HttpRequestInterface.GetVerb
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UHttpRequestInterface::GetVerb ( )
{
	static UFunction* pFnGetVerb = NULL;

	if ( ! pFnGetVerb )
		pFnGetVerb = (UFunction*) UObject::GObjObjects()->Data[ 16653 ];

	UHttpRequestInterface_execGetVerb_Parms GetVerb_Parms;

	pFnGetVerb->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVerb, &GetVerb_Parms, NULL );

	pFnGetVerb->FunctionFlags |= 0x400;

	return GetVerb_Parms.ReturnValue;
};

// Function Engine.HttpResponseInterface.IsContentCompressed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UHttpResponseInterface::IsContentCompressed ( )
{
	static UFunction* pFnIsContentCompressed = NULL;

	if ( ! pFnIsContentCompressed )
		pFnIsContentCompressed = (UFunction*) UObject::GObjObjects()->Data[ 22934 ];

	UHttpResponseInterface_execIsContentCompressed_Parms IsContentCompressed_Parms;

	pFnIsContentCompressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsContentCompressed, &IsContentCompressed_Parms, NULL );

	pFnIsContentCompressed->FunctionFlags |= 0x400;

	return IsContentCompressed_Parms.ReturnValue;
};

// Function Engine.HttpResponseInterface.GetContentAsString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UHttpResponseInterface::GetContentAsString ( )
{
	static UFunction* pFnGetContentAsString = NULL;

	if ( ! pFnGetContentAsString )
		pFnGetContentAsString = (UFunction*) UObject::GObjObjects()->Data[ 16674 ];

	UHttpResponseInterface_execGetContentAsString_Parms GetContentAsString_Parms;

	pFnGetContentAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetContentAsString, &GetContentAsString_Parms, NULL );

	pFnGetContentAsString->FunctionFlags |= 0x400;

	return GetContentAsString_Parms.ReturnValue;
};

// Function Engine.HttpResponseInterface.GetResponseCode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UHttpResponseInterface::GetResponseCode ( )
{
	static UFunction* pFnGetResponseCode = NULL;

	if ( ! pFnGetResponseCode )
		pFnGetResponseCode = (UFunction*) UObject::GObjObjects()->Data[ 16670 ];

	UHttpResponseInterface_execGetResponseCode_Parms GetResponseCode_Parms;

	pFnGetResponseCode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResponseCode, &GetResponseCode_Parms, NULL );

	pFnGetResponseCode->FunctionFlags |= 0x400;

	return GetResponseCode_Parms.ReturnValue;
};

// Function Engine.IniLocPatcher.UpdateLocFileName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString UIniLocPatcher::UpdateLocFileName ( struct FString Filename )
{
	static UFunction* pFnUpdateLocFileName = NULL;

	if ( ! pFnUpdateLocFileName )
		pFnUpdateLocFileName = (UFunction*) UObject::GObjObjects()->Data[ 23227 ];

	UIniLocPatcher_execUpdateLocFileName_Parms UpdateLocFileName_Parms;
	memcpy ( &UpdateLocFileName_Parms.Filename, &Filename, 0xC );

	pFnUpdateLocFileName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLocFileName, &UpdateLocFileName_Parms, NULL );

	pFnUpdateLocFileName->FunctionFlags |= 0x400;

	return UpdateLocFileName_Parms.ReturnValue;
};

// Function Engine.IniLocPatcher.ClearCachedFiles
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::ClearCachedFiles ( )
{
	static UFunction* pFnClearCachedFiles = NULL;

	if ( ! pFnClearCachedFiles )
		pFnClearCachedFiles = (UFunction*) UObject::GObjObjects()->Data[ 23221 ];

	UIniLocPatcher_execClearCachedFiles_Parms ClearCachedFiles_Parms;

	this->ProcessEvent ( pFnClearCachedFiles, &ClearCachedFiles_Parms, NULL );
};

// Function Engine.IniLocPatcher.ClearReadFileDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::ClearReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadFileDelegate = NULL;

	if ( ! pFnClearReadFileDelegate )
		pFnClearReadFileDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23218 ];

	UIniLocPatcher_execClearReadFileDelegate_Parms ClearReadFileDelegate_Parms;
	memcpy ( &ClearReadFileDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadFileDelegate, &ClearReadFileDelegate_Parms, NULL );
};

// Function Engine.IniLocPatcher.AddReadFileDelegate
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::AddReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadFileDelegate = NULL;

	if ( ! pFnAddReadFileDelegate )
		pFnAddReadFileDelegate = (UFunction*) UObject::GObjObjects()->Data[ 23216 ];

	UIniLocPatcher_execAddReadFileDelegate_Parms AddReadFileDelegate_Parms;
	memcpy ( &AddReadFileDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadFileDelegate, &AddReadFileDelegate_Parms, NULL );
};

// Function Engine.IniLocPatcher.AddFileToDownload
// [0x00020002] 
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::AddFileToDownload ( struct FString Filename )
{
	static UFunction* pFnAddFileToDownload = NULL;

	if ( ! pFnAddFileToDownload )
		pFnAddFileToDownload = (UFunction*) UObject::GObjObjects()->Data[ 23213 ];

	UIniLocPatcher_execAddFileToDownload_Parms AddFileToDownload_Parms;
	memcpy ( &AddFileToDownload_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnAddFileToDownload, &AddFileToDownload_Parms, NULL );
};

// Function Engine.IniLocPatcher.ProcessIniLocFile
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsUnicode                     ( CPF_Parm )
// TArray< unsigned char >        FileData                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UIniLocPatcher::ProcessIniLocFile ( struct FString Filename, unsigned long bIsUnicode, TArray< unsigned char >* FileData )
{
	static UFunction* pFnProcessIniLocFile = NULL;

	if ( ! pFnProcessIniLocFile )
		pFnProcessIniLocFile = (UFunction*) UObject::GObjObjects()->Data[ 23208 ];

	UIniLocPatcher_execProcessIniLocFile_Parms ProcessIniLocFile_Parms;
	memcpy ( &ProcessIniLocFile_Parms.Filename, &Filename, 0xC );
	ProcessIniLocFile_Parms.bIsUnicode = bIsUnicode;

	pFnProcessIniLocFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessIniLocFile, &ProcessIniLocFile_Parms, NULL );

	pFnProcessIniLocFile->FunctionFlags |= 0x400;

	if ( FileData )
		memcpy ( FileData, &ProcessIniLocFile_Parms.FileData, 0xC );
};

// Function Engine.IniLocPatcher.CheckForAllFilesComplete
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::CheckForAllFilesComplete ( )
{
	static UFunction* pFnCheckForAllFilesComplete = NULL;

	if ( ! pFnCheckForAllFilesComplete )
		pFnCheckForAllFilesComplete = (UFunction*) UObject::GObjObjects()->Data[ 23205 ];

	UIniLocPatcher_execCheckForAllFilesComplete_Parms CheckForAllFilesComplete_Parms;

	this->ProcessEvent ( pFnCheckForAllFilesComplete, &CheckForAllFilesComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.TriggerDownloadCompleteDelegates
// [0x00020002] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::TriggerDownloadCompleteDelegates ( unsigned long bSuccess, struct FString Filename )
{
	static UFunction* pFnTriggerDownloadCompleteDelegates = NULL;

	if ( ! pFnTriggerDownloadCompleteDelegates )
		pFnTriggerDownloadCompleteDelegates = (UFunction*) UObject::GObjObjects()->Data[ 23200 ];

	UIniLocPatcher_execTriggerDownloadCompleteDelegates_Parms TriggerDownloadCompleteDelegates_Parms;
	TriggerDownloadCompleteDelegates_Parms.bSuccess = bSuccess;
	memcpy ( &TriggerDownloadCompleteDelegates_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnTriggerDownloadCompleteDelegates, &TriggerDownloadCompleteDelegates_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnFileCacheSaveComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnFileCacheSaveComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnFileCacheSaveComplete = NULL;

	if ( ! pFnOnFileCacheSaveComplete )
		pFnOnFileCacheSaveComplete = (UFunction*) UObject::GObjObjects()->Data[ 23194 ];

	UIniLocPatcher_execOnFileCacheSaveComplete_Parms OnFileCacheSaveComplete_Parms;
	OnFileCacheSaveComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnFileCacheSaveComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnFileCacheSaveComplete, &OnFileCacheSaveComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnFileCacheLoadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnFileCacheLoadComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnFileCacheLoadComplete = NULL;

	if ( ! pFnOnFileCacheLoadComplete )
		pFnOnFileCacheLoadComplete = (UFunction*) UObject::GObjObjects()->Data[ 23179 ];

	UIniLocPatcher_execOnFileCacheLoadComplete_Parms OnFileCacheLoadComplete_Parms;
	OnFileCacheLoadComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnFileCacheLoadComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnFileCacheLoadComplete, &OnFileCacheLoadComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnDownloadFileComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnDownloadFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnDownloadFileComplete = NULL;

	if ( ! pFnOnDownloadFileComplete )
		pFnOnDownloadFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 23170 ];

	UIniLocPatcher_execOnDownloadFileComplete_Parms OnDownloadFileComplete_Parms;
	OnDownloadFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDownloadFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnDownloadFileComplete, &OnDownloadFileComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.StartLoadingFiles
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::StartLoadingFiles ( )
{
	static UFunction* pFnStartLoadingFiles = NULL;

	if ( ! pFnStartLoadingFiles )
		pFnStartLoadingFiles = (UFunction*) UObject::GObjObjects()->Data[ 23168 ];

	UIniLocPatcher_execStartLoadingFiles_Parms StartLoadingFiles_Parms;

	this->ProcessEvent ( pFnStartLoadingFiles, &StartLoadingFiles_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnRequestTitleFileListComplete
// [0x00020000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// TArray< struct FString >       ResultStr                      ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnRequestTitleFileListComplete ( unsigned long bWasSuccessful, TArray< struct FString > ResultStr )
{
	static UFunction* pFnOnRequestTitleFileListComplete = NULL;

	if ( ! pFnOnRequestTitleFileListComplete )
		pFnOnRequestTitleFileListComplete = (UFunction*) UObject::GObjObjects()->Data[ 23164 ];

	UIniLocPatcher_execOnRequestTitleFileListComplete_Parms OnRequestTitleFileListComplete_Parms;
	OnRequestTitleFileListComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnRequestTitleFileListComplete_Parms.ResultStr, &ResultStr, 0xC );

	this->ProcessEvent ( pFnOnRequestTitleFileListComplete, &OnRequestTitleFileListComplete_Parms, NULL );
};

// Function Engine.IniLocPatcher.DownloadFiles
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::DownloadFiles ( )
{
	static UFunction* pFnDownloadFiles = NULL;

	if ( ! pFnDownloadFiles )
		pFnDownloadFiles = (UFunction*) UObject::GObjObjects()->Data[ 23160 ];

	UIniLocPatcher_execDownloadFiles_Parms DownloadFiles_Parms;

	this->ProcessEvent ( pFnDownloadFiles, &DownloadFiles_Parms, NULL );
};

// Function Engine.IniLocPatcher.Init
// [0x00020002] 
// Parameters infos:

void UIniLocPatcher::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 23157 ];

	UIniLocPatcher_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnAllTitleFilesCompleted
// [0x00120000] 
// Parameters infos:

void UIniLocPatcher::OnAllTitleFilesCompleted ( )
{
	static UFunction* pFnOnAllTitleFilesCompleted = NULL;

	if ( ! pFnOnAllTitleFilesCompleted )
		pFnOnAllTitleFilesCompleted = (UFunction*) UObject::GObjObjects()->Data[ 23149 ];

	UIniLocPatcher_execOnAllTitleFilesCompleted_Parms OnAllTitleFilesCompleted_Parms;

	this->ProcessEvent ( pFnOnAllTitleFilesCompleted, &OnAllTitleFilesCompleted_Parms, NULL );
};

// Function Engine.IniLocPatcher.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UIniLocPatcher::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 23142 ];

	UIniLocPatcher_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.Interface_NavigationHandle.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UInterface_NavigationHandle::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 23411 ];

	UInterface_NavigationHandle_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.Interface_Speaker.Speak
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               Cue                            ( CPF_Parm )

void UInterface_Speaker::eventSpeak ( class USoundCue* Cue )
{
	static UFunction* pFnSpeak = NULL;

	if ( ! pFnSpeak )
		pFnSpeak = (UFunction*) UObject::GObjObjects()->Data[ 23416 ];

	UInterface_Speaker_eventSpeak_Parms Speak_Parms;
	Speak_Parms.Cue = Cue;

	this->ProcessEvent ( pFnSpeak, &Speak_Parms, NULL );
};

// Function Engine.JsonObject.DecodeJson
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UJsonObject*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Str                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

class UJsonObject* UJsonObject::DecodeJson ( struct FString Str )
{
	static UFunction* pFnDecodeJson = NULL;

	if ( ! pFnDecodeJson )
		pFnDecodeJson = (UFunction*) UObject::GObjObjects()->Data[ 24091 ];

	UJsonObject_execDecodeJson_Parms DecodeJson_Parms;
	memcpy ( &DecodeJson_Parms.Str, &Str, 0xC );

	pFnDecodeJson->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecodeJson, &DecodeJson_Parms, NULL );

	pFnDecodeJson->FunctionFlags |= 0x400;

	return DecodeJson_Parms.ReturnValue;
};

// Function Engine.JsonObject.EncodeJson
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UJsonObject*             Root                           ( CPF_Parm )

struct FString UJsonObject::EncodeJson ( class UJsonObject* Root )
{
	static UFunction* pFnEncodeJson = NULL;

	if ( ! pFnEncodeJson )
		pFnEncodeJson = (UFunction*) UObject::GObjObjects()->Data[ 24088 ];

	UJsonObject_execEncodeJson_Parms EncodeJson_Parms;
	EncodeJson_Parms.Root = Root;

	pFnEncodeJson->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncodeJson, &EncodeJson_Parms, NULL );

	pFnEncodeJson->FunctionFlags |= 0x400;

	return EncodeJson_Parms.ReturnValue;
};

// Function Engine.JsonObject.SetBoolValue
// [0x00020002] 
// Parameters infos:
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  Value                          ( CPF_Parm )

void UJsonObject::SetBoolValue ( struct FString Key, unsigned long Value )
{
	static UFunction* pFnSetBoolValue = NULL;

	if ( ! pFnSetBoolValue )
		pFnSetBoolValue = (UFunction*) UObject::GObjObjects()->Data[ 24085 ];

	UJsonObject_execSetBoolValue_Parms SetBoolValue_Parms;
	memcpy ( &SetBoolValue_Parms.Key, &Key, 0xC );
	SetBoolValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetBoolValue, &SetBoolValue_Parms, NULL );
};

// Function Engine.JsonObject.SetFloatValue
// [0x00020002] 
// Parameters infos:
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// float                          Value                          ( CPF_Parm )

void UJsonObject::SetFloatValue ( struct FString Key, float Value )
{
	static UFunction* pFnSetFloatValue = NULL;

	if ( ! pFnSetFloatValue )
		pFnSetFloatValue = (UFunction*) UObject::GObjObjects()->Data[ 24082 ];

	UJsonObject_execSetFloatValue_Parms SetFloatValue_Parms;
	memcpy ( &SetFloatValue_Parms.Key, &Key, 0xC );
	SetFloatValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetFloatValue, &SetFloatValue_Parms, NULL );
};

// Function Engine.JsonObject.SetIntValue
// [0x00020002] 
// Parameters infos:
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// int                            Value                          ( CPF_Parm )

void UJsonObject::SetIntValue ( struct FString Key, int Value )
{
	static UFunction* pFnSetIntValue = NULL;

	if ( ! pFnSetIntValue )
		pFnSetIntValue = (UFunction*) UObject::GObjObjects()->Data[ 24079 ];

	UJsonObject_execSetIntValue_Parms SetIntValue_Parms;
	memcpy ( &SetIntValue_Parms.Key, &Key, 0xC );
	SetIntValue_Parms.Value = Value;

	this->ProcessEvent ( pFnSetIntValue, &SetIntValue_Parms, NULL );
};

// Function Engine.JsonObject.SetStringValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void UJsonObject::SetStringValue ( struct FString Key, struct FString Value )
{
	static UFunction* pFnSetStringValue = NULL;

	if ( ! pFnSetStringValue )
		pFnSetStringValue = (UFunction*) UObject::GObjObjects()->Data[ 24076 ];

	UJsonObject_execSetStringValue_Parms SetStringValue_Parms;
	memcpy ( &SetStringValue_Parms.Key, &Key, 0xC );
	memcpy ( &SetStringValue_Parms.Value, &Value, 0xC );

	pFnSetStringValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringValue, &SetStringValue_Parms, NULL );

	pFnSetStringValue->FunctionFlags |= 0x400;
};

// Function Engine.JsonObject.SetObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// class UJsonObject*             Object                         ( CPF_Parm )

void UJsonObject::SetObject ( struct FString Key, class UJsonObject* Object )
{
	static UFunction* pFnSetObject = NULL;

	if ( ! pFnSetObject )
		pFnSetObject = (UFunction*) UObject::GObjObjects()->Data[ 24073 ];

	UJsonObject_execSetObject_Parms SetObject_Parms;
	memcpy ( &SetObject_Parms.Key, &Key, 0xC );
	SetObject_Parms.Object = Object;

	pFnSetObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObject, &SetObject_Parms, NULL );

	pFnSetObject->FunctionFlags |= 0x400;
};

// Function Engine.JsonObject.GetBoolValue
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

bool UJsonObject::GetBoolValue ( struct FString Key )
{
	static UFunction* pFnGetBoolValue = NULL;

	if ( ! pFnGetBoolValue )
		pFnGetBoolValue = (UFunction*) UObject::GObjObjects()->Data[ 24069 ];

	UJsonObject_execGetBoolValue_Parms GetBoolValue_Parms;
	memcpy ( &GetBoolValue_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnGetBoolValue, &GetBoolValue_Parms, NULL );

	return GetBoolValue_Parms.ReturnValue;
};

// Function Engine.JsonObject.GetFloatValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

float UJsonObject::GetFloatValue ( struct FString Key )
{
	static UFunction* pFnGetFloatValue = NULL;

	if ( ! pFnGetFloatValue )
		pFnGetFloatValue = (UFunction*) UObject::GObjObjects()->Data[ 24065 ];

	UJsonObject_execGetFloatValue_Parms GetFloatValue_Parms;
	memcpy ( &GetFloatValue_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnGetFloatValue, &GetFloatValue_Parms, NULL );

	return GetFloatValue_Parms.ReturnValue;
};

// Function Engine.JsonObject.GetIntValue
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

int UJsonObject::GetIntValue ( struct FString Key )
{
	static UFunction* pFnGetIntValue = NULL;

	if ( ! pFnGetIntValue )
		pFnGetIntValue = (UFunction*) UObject::GObjObjects()->Data[ 24061 ];

	UJsonObject_execGetIntValue_Parms GetIntValue_Parms;
	memcpy ( &GetIntValue_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnGetIntValue, &GetIntValue_Parms, NULL );

	return GetIntValue_Parms.ReturnValue;
};

// Function Engine.JsonObject.HasKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

bool UJsonObject::HasKey ( struct FString Key )
{
	static UFunction* pFnHasKey = NULL;

	if ( ! pFnHasKey )
		pFnHasKey = (UFunction*) UObject::GObjObjects()->Data[ 24058 ];

	UJsonObject_execHasKey_Parms HasKey_Parms;
	memcpy ( &HasKey_Parms.Key, &Key, 0xC );

	pFnHasKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasKey, &HasKey_Parms, NULL );

	pFnHasKey->FunctionFlags |= 0x400;

	return HasKey_Parms.ReturnValue;
};

// Function Engine.JsonObject.GetStringValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

struct FString UJsonObject::GetStringValue ( struct FString Key )
{
	static UFunction* pFnGetStringValue = NULL;

	if ( ! pFnGetStringValue )
		pFnGetStringValue = (UFunction*) UObject::GObjObjects()->Data[ 24055 ];

	UJsonObject_execGetStringValue_Parms GetStringValue_Parms;
	memcpy ( &GetStringValue_Parms.Key, &Key, 0xC );

	pFnGetStringValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringValue, &GetStringValue_Parms, NULL );

	pFnGetStringValue->FunctionFlags |= 0x400;

	return GetStringValue_Parms.ReturnValue;
};

// Function Engine.JsonObject.GetObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UJsonObject*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

class UJsonObject* UJsonObject::GetObject ( struct FString Key )
{
	static UFunction* pFnGetObject = NULL;

	if ( ! pFnGetObject )
		pFnGetObject = (UFunction*) UObject::GObjObjects()->Data[ 24052 ];

	UJsonObject_execGetObject_Parms GetObject_Parms;
	memcpy ( &GetObject_Parms.Key, &Key, 0xC );

	pFnGetObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObject, &GetObject_Parms, NULL );

	pFnGetObject->FunctionFlags |= 0x400;

	return GetObject_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.RequestAccountAuthorization
// [0x00020000] 
// Parameters infos:
// class UAsyncTask*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

class UAsyncTask* UOnlineAuthInterface::RequestAccountAuthorization ( struct FUniqueNetId PlayerID, struct FScriptDelegate Callback )
{
	static UFunction* pFnRequestAccountAuthorization = NULL;

	if ( ! pFnRequestAccountAuthorization )
		pFnRequestAccountAuthorization = (UFunction*) UObject::GObjObjects()->Data[ 27154 ];

	UOnlineAuthInterface_execRequestAccountAuthorization_Parms RequestAccountAuthorization_Parms;
	memcpy ( &RequestAccountAuthorization_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &RequestAccountAuthorization_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnRequestAccountAuthorization, &RequestAccountAuthorization_Parms, NULL );

	return RequestAccountAuthorization_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.OnAccountAuthorization
// [0x00120000] 
// Parameters infos:
// struct FString                 Token                          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::OnAccountAuthorization ( struct FString Token )
{
	static UFunction* pFnOnAccountAuthorization = NULL;

	if ( ! pFnOnAccountAuthorization )
		pFnOnAccountAuthorization = (UFunction*) UObject::GObjObjects()->Data[ 27155 ];

	UOnlineAuthInterface_execOnAccountAuthorization_Parms OnAccountAuthorization_Parms;
	memcpy ( &OnAccountAuthorization_Parms.Token, &Token, 0xC );

	this->ProcessEvent ( pFnOnAccountAuthorization, &OnAccountAuthorization_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnLoginChanged
// [0x00020000] 
// Parameters infos:
// unsigned long                  bLoggedIn                      ( CPF_Parm )

void UOnlineAuthInterface::OnLoginChanged ( unsigned long bLoggedIn )
{
	static UFunction* pFnOnLoginChanged = NULL;

	if ( ! pFnOnLoginChanged )
		pFnOnLoginChanged = (UFunction*) UObject::GObjObjects()->Data[ 27159 ];

	UOnlineAuthInterface_execOnLoginChanged_Parms OnLoginChanged_Parms;
	OnLoginChanged_Parms.bLoggedIn = bLoggedIn;

	this->ProcessEvent ( pFnOnLoginChanged, &OnLoginChanged_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.RequestMtxCode
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAuthInterface::RequestMtxCode ( struct FUniqueNetId PlayerID, struct FScriptDelegate Callback )
{
	static UFunction* pFnRequestMtxCode = NULL;

	if ( ! pFnRequestMtxCode )
		pFnRequestMtxCode = (UFunction*) UObject::GObjObjects()->Data[ 27161 ];

	UOnlineAuthInterface_execRequestMtxCode_Parms RequestMtxCode_Parms;
	memcpy ( &RequestMtxCode_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &RequestMtxCode_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnRequestMtxCode, &RequestMtxCode_Parms, NULL );

	return RequestMtxCode_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.RequestAuthTicket
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAuthInterface::RequestAuthTicket ( struct FUniqueNetId PlayerID, struct FScriptDelegate Callback )
{
	static UFunction* pFnRequestAuthTicket = NULL;

	if ( ! pFnRequestAuthTicket )
		pFnRequestAuthTicket = (UFunction*) UObject::GObjObjects()->Data[ 27163 ];

	UOnlineAuthInterface_execRequestAuthTicket_Parms RequestAuthTicket_Parms;
	memcpy ( &RequestAuthTicket_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &RequestAuthTicket_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnRequestAuthTicket, &RequestAuthTicket_Parms, NULL );

	return RequestAuthTicket_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.RequiresAuthTicket
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineAuthInterface::RequiresAuthTicket ( )
{
	static UFunction* pFnRequiresAuthTicket = NULL;

	if ( ! pFnRequiresAuthTicket )
		pFnRequiresAuthTicket = (UFunction*) UObject::GObjObjects()->Data[ 27168 ];

	UOnlineAuthInterface_execRequiresAuthTicket_Parms RequiresAuthTicket_Parms;

	this->ProcessEvent ( pFnRequiresAuthTicket, &RequiresAuthTicket_Parms, NULL );

	return RequiresAuthTicket_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.OnReceivedAuthCode
// [0x00120000] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// struct FString                 Code                           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::OnReceivedAuthCode ( unsigned long bSuccess, struct FString Code )
{
	static UFunction* pFnOnReceivedAuthCode = NULL;

	if ( ! pFnOnReceivedAuthCode )
		pFnOnReceivedAuthCode = (UFunction*) UObject::GObjObjects()->Data[ 27167 ];

	UOnlineAuthInterface_execOnReceivedAuthCode_Parms OnReceivedAuthCode_Parms;
	OnReceivedAuthCode_Parms.bSuccess = bSuccess;
	memcpy ( &OnReceivedAuthCode_Parms.Code, &Code, 0xC );

	this->ProcessEvent ( pFnOnReceivedAuthCode, &OnReceivedAuthCode_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.GetServerAddr
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FIpAddr                 OutServerIP                    ( CPF_Parm | CPF_OutParm )
// int                            OutServerPort                  ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::GetServerAddr ( struct FIpAddr* OutServerIP, int* OutServerPort )
{
	static UFunction* pFnGetServerAddr = NULL;

	if ( ! pFnGetServerAddr )
		pFnGetServerAddr = (UFunction*) UObject::GObjObjects()->Data[ 8755 ];

	UOnlineAuthInterface_execGetServerAddr_Parms GetServerAddr_Parms;

	this->ProcessEvent ( pFnGetServerAddr, &GetServerAddr_Parms, NULL );

	if ( OutServerIP )
		memcpy ( OutServerIP, &GetServerAddr_Parms.OutServerIP, 0x14 );

	if ( OutServerPort )
		*OutServerPort = GetServerAddr_Parms.OutServerPort;

	return GetServerAddr_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.GetServerUniqueId
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            OutServerUID                   ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::GetServerUniqueId ( struct FUniqueNetId* OutServerUID )
{
	static UFunction* pFnGetServerUniqueId = NULL;

	if ( ! pFnGetServerUniqueId )
		pFnGetServerUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 8753 ];

	UOnlineAuthInterface_execGetServerUniqueId_Parms GetServerUniqueId_Parms;

	this->ProcessEvent ( pFnGetServerUniqueId, &GetServerUniqueId_Parms, NULL );

	if ( OutServerUID )
		memcpy ( OutServerUID, &GetServerUniqueId_Parms.OutServerUID, 0x48 );

	return GetServerUniqueId_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.FindLocalServerAuthSession
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FLocalAuthSession       OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::FindLocalServerAuthSession ( class UPlayer* ClientConnection, struct FLocalAuthSession* OutSessionInfo )
{
	static UFunction* pFnFindLocalServerAuthSession = NULL;

	if ( ! pFnFindLocalServerAuthSession )
		pFnFindLocalServerAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 8783 ];

	UOnlineAuthInterface_execFindLocalServerAuthSession_Parms FindLocalServerAuthSession_Parms;
	FindLocalServerAuthSession_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnFindLocalServerAuthSession, &FindLocalServerAuthSession_Parms, NULL );

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &FindLocalServerAuthSession_Parms.OutSessionInfo, 0x64 );

	return FindLocalServerAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.FindServerAuthSession
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ServerConnection               ( CPF_Parm )
// struct FAuthSession            OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::FindServerAuthSession ( class UPlayer* ServerConnection, struct FAuthSession* OutSessionInfo )
{
	static UFunction* pFnFindServerAuthSession = NULL;

	if ( ! pFnFindServerAuthSession )
		pFnFindServerAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 24929 ];

	UOnlineAuthInterface_execFindServerAuthSession_Parms FindServerAuthSession_Parms;
	FindServerAuthSession_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnFindServerAuthSession, &FindServerAuthSession_Parms, NULL );

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &FindServerAuthSession_Parms.OutSessionInfo, 0x68 );

	return FindServerAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.FindLocalClientAuthSession
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ServerConnection               ( CPF_Parm )
// struct FLocalAuthSession       OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::FindLocalClientAuthSession ( class UPlayer* ServerConnection, struct FLocalAuthSession* OutSessionInfo )
{
	static UFunction* pFnFindLocalClientAuthSession = NULL;

	if ( ! pFnFindLocalClientAuthSession )
		pFnFindLocalClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 24927 ];

	UOnlineAuthInterface_execFindLocalClientAuthSession_Parms FindLocalClientAuthSession_Parms;
	FindLocalClientAuthSession_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnFindLocalClientAuthSession, &FindLocalClientAuthSession_Parms, NULL );

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &FindLocalClientAuthSession_Parms.OutSessionInfo, 0x64 );

	return FindLocalClientAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.FindClientAuthSession
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FAuthSession            OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::FindClientAuthSession ( class UPlayer* ClientConnection, struct FAuthSession* OutSessionInfo )
{
	static UFunction* pFnFindClientAuthSession = NULL;

	if ( ! pFnFindClientAuthSession )
		pFnFindClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 8687 ];

	UOnlineAuthInterface_execFindClientAuthSession_Parms FindClientAuthSession_Parms;
	FindClientAuthSession_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnFindClientAuthSession, &FindClientAuthSession_Parms, NULL );

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &FindClientAuthSession_Parms.OutSessionInfo, 0x68 );

	return FindClientAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.AllLocalServerAuthSessions
// [0x00420404] ( FUNC_Native )
// Parameters infos:
// struct FLocalAuthSession       OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

void UOnlineAuthInterface::AllLocalServerAuthSessions ( struct FLocalAuthSession* OutSessionInfo )
{
	static UFunction* pFnAllLocalServerAuthSessions = NULL;

	if ( ! pFnAllLocalServerAuthSessions )
		pFnAllLocalServerAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27141 ];

	UOnlineAuthInterface_execAllLocalServerAuthSessions_Parms AllLocalServerAuthSessions_Parms;

	pFnAllLocalServerAuthSessions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllLocalServerAuthSessions, &AllLocalServerAuthSessions_Parms, NULL );

	pFnAllLocalServerAuthSessions->FunctionFlags |= 0x400;

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &AllLocalServerAuthSessions_Parms.OutSessionInfo, 0x64 );
};

// Function Engine.OnlineAuthInterface.AllServerAuthSessions
// [0x00420404] ( FUNC_Native )
// Parameters infos:
// struct FAuthSession            OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

void UOnlineAuthInterface::AllServerAuthSessions ( struct FAuthSession* OutSessionInfo )
{
	static UFunction* pFnAllServerAuthSessions = NULL;

	if ( ! pFnAllServerAuthSessions )
		pFnAllServerAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27139 ];

	UOnlineAuthInterface_execAllServerAuthSessions_Parms AllServerAuthSessions_Parms;

	pFnAllServerAuthSessions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllServerAuthSessions, &AllServerAuthSessions_Parms, NULL );

	pFnAllServerAuthSessions->FunctionFlags |= 0x400;

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &AllServerAuthSessions_Parms.OutSessionInfo, 0x68 );
};

// Function Engine.OnlineAuthInterface.AllLocalClientAuthSessions
// [0x00420404] ( FUNC_Native )
// Parameters infos:
// struct FLocalAuthSession       OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

void UOnlineAuthInterface::AllLocalClientAuthSessions ( struct FLocalAuthSession* OutSessionInfo )
{
	static UFunction* pFnAllLocalClientAuthSessions = NULL;

	if ( ! pFnAllLocalClientAuthSessions )
		pFnAllLocalClientAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27137 ];

	UOnlineAuthInterface_execAllLocalClientAuthSessions_Parms AllLocalClientAuthSessions_Parms;

	pFnAllLocalClientAuthSessions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllLocalClientAuthSessions, &AllLocalClientAuthSessions_Parms, NULL );

	pFnAllLocalClientAuthSessions->FunctionFlags |= 0x400;

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &AllLocalClientAuthSessions_Parms.OutSessionInfo, 0x64 );
};

// Function Engine.OnlineAuthInterface.AllClientAuthSessions
// [0x00420404] ( FUNC_Native )
// Parameters infos:
// struct FAuthSession            OutSessionInfo                 ( CPF_Parm | CPF_OutParm )

void UOnlineAuthInterface::AllClientAuthSessions ( struct FAuthSession* OutSessionInfo )
{
	static UFunction* pFnAllClientAuthSessions = NULL;

	if ( ! pFnAllClientAuthSessions )
		pFnAllClientAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27135 ];

	UOnlineAuthInterface_execAllClientAuthSessions_Parms AllClientAuthSessions_Parms;

	pFnAllClientAuthSessions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllClientAuthSessions, &AllClientAuthSessions_Parms, NULL );

	pFnAllClientAuthSessions->FunctionFlags |= 0x400;

	if ( OutSessionInfo )
		memcpy ( OutSessionInfo, &AllClientAuthSessions_Parms.OutSessionInfo, 0x68 );
};

// Function Engine.OnlineAuthInterface.EndAllRemoteServerAuthSessions
// [0x00020000] 
// Parameters infos:

void UOnlineAuthInterface::EndAllRemoteServerAuthSessions ( )
{
	static UFunction* pFnEndAllRemoteServerAuthSessions = NULL;

	if ( ! pFnEndAllRemoteServerAuthSessions )
		pFnEndAllRemoteServerAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27134 ];

	UOnlineAuthInterface_execEndAllRemoteServerAuthSessions_Parms EndAllRemoteServerAuthSessions_Parms;

	this->ProcessEvent ( pFnEndAllRemoteServerAuthSessions, &EndAllRemoteServerAuthSessions_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.EndAllLocalServerAuthSessions
// [0x00020000] 
// Parameters infos:

void UOnlineAuthInterface::EndAllLocalServerAuthSessions ( )
{
	static UFunction* pFnEndAllLocalServerAuthSessions = NULL;

	if ( ! pFnEndAllLocalServerAuthSessions )
		pFnEndAllLocalServerAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27133 ];

	UOnlineAuthInterface_execEndAllLocalServerAuthSessions_Parms EndAllLocalServerAuthSessions_Parms;

	this->ProcessEvent ( pFnEndAllLocalServerAuthSessions, &EndAllLocalServerAuthSessions_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.EndRemoteServerAuthSession
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )

void UOnlineAuthInterface::EndRemoteServerAuthSession ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP )
{
	static UFunction* pFnEndRemoteServerAuthSession = NULL;

	if ( ! pFnEndRemoteServerAuthSession )
		pFnEndRemoteServerAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 27130 ];

	UOnlineAuthInterface_execEndRemoteServerAuthSession_Parms EndRemoteServerAuthSession_Parms;
	memcpy ( &EndRemoteServerAuthSession_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &EndRemoteServerAuthSession_Parms.ServerIP, &ServerIP, 0x14 );

	this->ProcessEvent ( pFnEndRemoteServerAuthSession, &EndRemoteServerAuthSession_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.EndLocalServerAuthSession
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )

void UOnlineAuthInterface::EndLocalServerAuthSession ( struct FUniqueNetId ClientUID, struct FIpAddr ClientIP )
{
	static UFunction* pFnEndLocalServerAuthSession = NULL;

	if ( ! pFnEndLocalServerAuthSession )
		pFnEndLocalServerAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 27127 ];

	UOnlineAuthInterface_execEndLocalServerAuthSession_Parms EndLocalServerAuthSession_Parms;
	memcpy ( &EndLocalServerAuthSession_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &EndLocalServerAuthSession_Parms.ClientIP, &ClientIP, 0x14 );

	this->ProcessEvent ( pFnEndLocalServerAuthSession, &EndLocalServerAuthSession_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.VerifyServerAuthSession
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

bool UOnlineAuthInterface::VerifyServerAuthSession ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int AuthTicketUID )
{
	static UFunction* pFnVerifyServerAuthSession = NULL;

	if ( ! pFnVerifyServerAuthSession )
		pFnVerifyServerAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 24936 ];

	UOnlineAuthInterface_execVerifyServerAuthSession_Parms VerifyServerAuthSession_Parms;
	memcpy ( &VerifyServerAuthSession_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &VerifyServerAuthSession_Parms.ServerIP, &ServerIP, 0x14 );
	VerifyServerAuthSession_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnVerifyServerAuthSession, &VerifyServerAuthSession_Parms, NULL );

	return VerifyServerAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.CreateServerAuthSession
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )
// int                            ClientPort                     ( CPF_Parm )
// int                            OutAuthTicketUID               ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::CreateServerAuthSession ( struct FUniqueNetId ClientUID, struct FIpAddr ClientIP, int ClientPort, int* OutAuthTicketUID )
{
	static UFunction* pFnCreateServerAuthSession = NULL;

	if ( ! pFnCreateServerAuthSession )
		pFnCreateServerAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 8726 ];

	UOnlineAuthInterface_execCreateServerAuthSession_Parms CreateServerAuthSession_Parms;
	memcpy ( &CreateServerAuthSession_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &CreateServerAuthSession_Parms.ClientIP, &ClientIP, 0x14 );
	CreateServerAuthSession_Parms.ClientPort = ClientPort;

	this->ProcessEvent ( pFnCreateServerAuthSession, &CreateServerAuthSession_Parms, NULL );

	if ( OutAuthTicketUID )
		*OutAuthTicketUID = CreateServerAuthSession_Parms.OutAuthTicketUID;

	return CreateServerAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.EndAllRemoteClientAuthSessions
// [0x00020000] 
// Parameters infos:

void UOnlineAuthInterface::EndAllRemoteClientAuthSessions ( )
{
	static UFunction* pFnEndAllRemoteClientAuthSessions = NULL;

	if ( ! pFnEndAllRemoteClientAuthSessions )
		pFnEndAllRemoteClientAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27119 ];

	UOnlineAuthInterface_execEndAllRemoteClientAuthSessions_Parms EndAllRemoteClientAuthSessions_Parms;

	this->ProcessEvent ( pFnEndAllRemoteClientAuthSessions, &EndAllRemoteClientAuthSessions_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.EndAllLocalClientAuthSessions
// [0x00020000] 
// Parameters infos:

void UOnlineAuthInterface::EndAllLocalClientAuthSessions ( )
{
	static UFunction* pFnEndAllLocalClientAuthSessions = NULL;

	if ( ! pFnEndAllLocalClientAuthSessions )
		pFnEndAllLocalClientAuthSessions = (UFunction*) UObject::GObjObjects()->Data[ 27118 ];

	UOnlineAuthInterface_execEndAllLocalClientAuthSessions_Parms EndAllLocalClientAuthSessions_Parms;

	this->ProcessEvent ( pFnEndAllLocalClientAuthSessions, &EndAllLocalClientAuthSessions_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.EndRemoteClientAuthSession
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )

void UOnlineAuthInterface::EndRemoteClientAuthSession ( struct FUniqueNetId ClientUID, struct FIpAddr ClientIP )
{
	static UFunction* pFnEndRemoteClientAuthSession = NULL;

	if ( ! pFnEndRemoteClientAuthSession )
		pFnEndRemoteClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 27115 ];

	UOnlineAuthInterface_execEndRemoteClientAuthSession_Parms EndRemoteClientAuthSession_Parms;
	memcpy ( &EndRemoteClientAuthSession_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &EndRemoteClientAuthSession_Parms.ClientIP, &ClientIP, 0x14 );

	this->ProcessEvent ( pFnEndRemoteClientAuthSession, &EndRemoteClientAuthSession_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.EndLocalClientAuthSession
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            ServerPort                     ( CPF_Parm )

void UOnlineAuthInterface::EndLocalClientAuthSession ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int ServerPort )
{
	static UFunction* pFnEndLocalClientAuthSession = NULL;

	if ( ! pFnEndLocalClientAuthSession )
		pFnEndLocalClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 27111 ];

	UOnlineAuthInterface_execEndLocalClientAuthSession_Parms EndLocalClientAuthSession_Parms;
	memcpy ( &EndLocalClientAuthSession_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &EndLocalClientAuthSession_Parms.ServerIP, &ServerIP, 0x14 );
	EndLocalClientAuthSession_Parms.ServerPort = ServerPort;

	this->ProcessEvent ( pFnEndLocalClientAuthSession, &EndLocalClientAuthSession_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.VerifyClientAuthSession
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )
// int                            ClientPort                     ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

bool UOnlineAuthInterface::VerifyClientAuthSession ( struct FUniqueNetId ClientUID, struct FIpAddr ClientIP, int ClientPort, int AuthTicketUID )
{
	static UFunction* pFnVerifyClientAuthSession = NULL;

	if ( ! pFnVerifyClientAuthSession )
		pFnVerifyClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 8702 ];

	UOnlineAuthInterface_execVerifyClientAuthSession_Parms VerifyClientAuthSession_Parms;
	memcpy ( &VerifyClientAuthSession_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &VerifyClientAuthSession_Parms.ClientIP, &ClientIP, 0x14 );
	VerifyClientAuthSession_Parms.ClientPort = ClientPort;
	VerifyClientAuthSession_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnVerifyClientAuthSession, &VerifyClientAuthSession_Parms, NULL );

	return VerifyClientAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.CreateClientAuthSession
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            ServerPort                     ( CPF_Parm )
// unsigned long                  bSecure                        ( CPF_Parm )
// int                            OutAuthTicketUID               ( CPF_Parm | CPF_OutParm )

bool UOnlineAuthInterface::CreateClientAuthSession ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int ServerPort, unsigned long bSecure, int* OutAuthTicketUID )
{
	static UFunction* pFnCreateClientAuthSession = NULL;

	if ( ! pFnCreateClientAuthSession )
		pFnCreateClientAuthSession = (UFunction*) UObject::GObjObjects()->Data[ 8757 ];

	UOnlineAuthInterface_execCreateClientAuthSession_Parms CreateClientAuthSession_Parms;
	memcpy ( &CreateClientAuthSession_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &CreateClientAuthSession_Parms.ServerIP, &ServerIP, 0x14 );
	CreateClientAuthSession_Parms.ServerPort = ServerPort;
	CreateClientAuthSession_Parms.bSecure = bSecure;

	this->ProcessEvent ( pFnCreateClientAuthSession, &CreateClientAuthSession_Parms, NULL );

	if ( OutAuthTicketUID )
		*OutAuthTicketUID = CreateClientAuthSession_Parms.OutAuthTicketUID;

	return CreateClientAuthSession_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.SendServerAuthRetryRequest
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineAuthInterface::SendServerAuthRetryRequest ( )
{
	static UFunction* pFnSendServerAuthRetryRequest = NULL;

	if ( ! pFnSendServerAuthRetryRequest )
		pFnSendServerAuthRetryRequest = (UFunction*) UObject::GObjObjects()->Data[ 24946 ];

	UOnlineAuthInterface_execSendServerAuthRetryRequest_Parms SendServerAuthRetryRequest_Parms;

	this->ProcessEvent ( pFnSendServerAuthRetryRequest, &SendServerAuthRetryRequest_Parms, NULL );

	return SendServerAuthRetryRequest_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.SendClientAuthEndSessionRequest
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )

bool UOnlineAuthInterface::SendClientAuthEndSessionRequest ( class UPlayer* ClientConnection )
{
	static UFunction* pFnSendClientAuthEndSessionRequest = NULL;

	if ( ! pFnSendClientAuthEndSessionRequest )
		pFnSendClientAuthEndSessionRequest = (UFunction*) UObject::GObjObjects()->Data[ 8689 ];

	UOnlineAuthInterface_execSendClientAuthEndSessionRequest_Parms SendClientAuthEndSessionRequest_Parms;
	SendClientAuthEndSessionRequest_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnSendClientAuthEndSessionRequest, &SendClientAuthEndSessionRequest_Parms, NULL );

	return SendClientAuthEndSessionRequest_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.SendServerAuthResponse
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

bool UOnlineAuthInterface::SendServerAuthResponse ( class UPlayer* ClientConnection, int AuthTicketUID )
{
	static UFunction* pFnSendServerAuthResponse = NULL;

	if ( ! pFnSendServerAuthResponse )
		pFnSendServerAuthResponse = (UFunction*) UObject::GObjObjects()->Data[ 8728 ];

	UOnlineAuthInterface_execSendServerAuthResponse_Parms SendServerAuthResponse_Parms;
	SendServerAuthResponse_Parms.ClientConnection = ClientConnection;
	SendServerAuthResponse_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnSendServerAuthResponse, &SendServerAuthResponse_Parms, NULL );

	return SendServerAuthResponse_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.SendClientAuthResponse
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AuthTicketUID                  ( CPF_Parm )

bool UOnlineAuthInterface::SendClientAuthResponse ( int AuthTicketUID )
{
	static UFunction* pFnSendClientAuthResponse = NULL;

	if ( ! pFnSendClientAuthResponse )
		pFnSendClientAuthResponse = (UFunction*) UObject::GObjObjects()->Data[ 24921 ];

	UOnlineAuthInterface_execSendClientAuthResponse_Parms SendClientAuthResponse_Parms;
	SendClientAuthResponse_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnSendClientAuthResponse, &SendClientAuthResponse_Parms, NULL );

	return SendClientAuthResponse_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.SendServerAuthRequest
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )

bool UOnlineAuthInterface::SendServerAuthRequest ( struct FUniqueNetId ServerUID )
{
	static UFunction* pFnSendServerAuthRequest = NULL;

	if ( ! pFnSendServerAuthRequest )
		pFnSendServerAuthRequest = (UFunction*) UObject::GObjObjects()->Data[ 27095 ];

	UOnlineAuthInterface_execSendServerAuthRequest_Parms SendServerAuthRequest_Parms;
	memcpy ( &SendServerAuthRequest_Parms.ServerUID, &ServerUID, 0x48 );

	this->ProcessEvent ( pFnSendServerAuthRequest, &SendServerAuthRequest_Parms, NULL );

	return SendServerAuthRequest_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.SendClientAuthRequest
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )

bool UOnlineAuthInterface::SendClientAuthRequest ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID )
{
	static UFunction* pFnSendClientAuthRequest = NULL;

	if ( ! pFnSendClientAuthRequest )
		pFnSendClientAuthRequest = (UFunction*) UObject::GObjObjects()->Data[ 8674 ];

	UOnlineAuthInterface_execSendClientAuthRequest_Parms SendClientAuthRequest_Parms;
	SendClientAuthRequest_Parms.ClientConnection = ClientConnection;
	memcpy ( &SendClientAuthRequest_Parms.ClientUID, &ClientUID, 0x48 );

	this->ProcessEvent ( pFnSendClientAuthRequest, &SendClientAuthRequest_Parms, NULL );

	return SendClientAuthRequest_Parms.ReturnValue;
};

// Function Engine.OnlineAuthInterface.ClearServerConnectionCloseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerConnectionCloseDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate )
{
	static UFunction* pFnClearServerConnectionCloseDelegate = NULL;

	if ( ! pFnClearServerConnectionCloseDelegate )
		pFnClearServerConnectionCloseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27091 ];

	UOnlineAuthInterface_execClearServerConnectionCloseDelegate_Parms ClearServerConnectionCloseDelegate_Parms;
	memcpy ( &ClearServerConnectionCloseDelegate_Parms.ServerConnectionCloseDelegate, &ServerConnectionCloseDelegate, 0x10 );

	this->ProcessEvent ( pFnClearServerConnectionCloseDelegate, &ClearServerConnectionCloseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddServerConnectionCloseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerConnectionCloseDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate )
{
	static UFunction* pFnAddServerConnectionCloseDelegate = NULL;

	if ( ! pFnAddServerConnectionCloseDelegate )
		pFnAddServerConnectionCloseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27089 ];

	UOnlineAuthInterface_execAddServerConnectionCloseDelegate_Parms AddServerConnectionCloseDelegate_Parms;
	memcpy ( &AddServerConnectionCloseDelegate_Parms.ServerConnectionCloseDelegate, &ServerConnectionCloseDelegate, 0x10 );

	this->ProcessEvent ( pFnAddServerConnectionCloseDelegate, &AddServerConnectionCloseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnServerConnectionClose
// [0x00120000] 
// Parameters infos:
// class UPlayer*                 ServerConnection               ( CPF_Parm )

void UOnlineAuthInterface::OnServerConnectionClose ( class UPlayer* ServerConnection )
{
	static UFunction* pFnOnServerConnectionClose = NULL;

	if ( ! pFnOnServerConnectionClose )
		pFnOnServerConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 27087 ];

	UOnlineAuthInterface_execOnServerConnectionClose_Parms OnServerConnectionClose_Parms;
	OnServerConnectionClose_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnOnServerConnectionClose, &OnServerConnectionClose_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearClientConnectionCloseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientConnectionCloseDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate )
{
	static UFunction* pFnClearClientConnectionCloseDelegate = NULL;

	if ( ! pFnClearClientConnectionCloseDelegate )
		pFnClearClientConnectionCloseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27085 ];

	UOnlineAuthInterface_execClearClientConnectionCloseDelegate_Parms ClearClientConnectionCloseDelegate_Parms;
	memcpy ( &ClearClientConnectionCloseDelegate_Parms.ClientConnectionCloseDelegate, &ClientConnectionCloseDelegate, 0x10 );

	this->ProcessEvent ( pFnClearClientConnectionCloseDelegate, &ClearClientConnectionCloseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddClientConnectionCloseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientConnectionCloseDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate )
{
	static UFunction* pFnAddClientConnectionCloseDelegate = NULL;

	if ( ! pFnAddClientConnectionCloseDelegate )
		pFnAddClientConnectionCloseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27083 ];

	UOnlineAuthInterface_execAddClientConnectionCloseDelegate_Parms AddClientConnectionCloseDelegate_Parms;
	memcpy ( &AddClientConnectionCloseDelegate_Parms.ClientConnectionCloseDelegate, &ClientConnectionCloseDelegate, 0x10 );

	this->ProcessEvent ( pFnAddClientConnectionCloseDelegate, &AddClientConnectionCloseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnClientConnectionClose
// [0x00120000] 
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )

void UOnlineAuthInterface::OnClientConnectionClose ( class UPlayer* ClientConnection )
{
	static UFunction* pFnOnClientConnectionClose = NULL;

	if ( ! pFnOnClientConnectionClose )
		pFnOnClientConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 27081 ];

	UOnlineAuthInterface_execOnClientConnectionClose_Parms OnClientConnectionClose_Parms;
	OnClientConnectionClose_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnOnClientConnectionClose, &OnClientConnectionClose_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearServerAuthRetryRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthRetryRequestDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearServerAuthRetryRequestDelegate ( struct FScriptDelegate ServerAuthRetryRequestDelegate )
{
	static UFunction* pFnClearServerAuthRetryRequestDelegate = NULL;

	if ( ! pFnClearServerAuthRetryRequestDelegate )
		pFnClearServerAuthRetryRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27079 ];

	UOnlineAuthInterface_execClearServerAuthRetryRequestDelegate_Parms ClearServerAuthRetryRequestDelegate_Parms;
	memcpy ( &ClearServerAuthRetryRequestDelegate_Parms.ServerAuthRetryRequestDelegate, &ServerAuthRetryRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnClearServerAuthRetryRequestDelegate, &ClearServerAuthRetryRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddServerAuthRetryRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthRetryRequestDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddServerAuthRetryRequestDelegate ( struct FScriptDelegate ServerAuthRetryRequestDelegate )
{
	static UFunction* pFnAddServerAuthRetryRequestDelegate = NULL;

	if ( ! pFnAddServerAuthRetryRequestDelegate )
		pFnAddServerAuthRetryRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27077 ];

	UOnlineAuthInterface_execAddServerAuthRetryRequestDelegate_Parms AddServerAuthRetryRequestDelegate_Parms;
	memcpy ( &AddServerAuthRetryRequestDelegate_Parms.ServerAuthRetryRequestDelegate, &ServerAuthRetryRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnAddServerAuthRetryRequestDelegate, &AddServerAuthRetryRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnServerAuthRetryRequest
// [0x00120000] 
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )

void UOnlineAuthInterface::OnServerAuthRetryRequest ( class UPlayer* ClientConnection )
{
	static UFunction* pFnOnServerAuthRetryRequest = NULL;

	if ( ! pFnOnServerAuthRetryRequest )
		pFnOnServerAuthRetryRequest = (UFunction*) UObject::GObjObjects()->Data[ 27075 ];

	UOnlineAuthInterface_execOnServerAuthRetryRequest_Parms OnServerAuthRetryRequest_Parms;
	OnServerAuthRetryRequest_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnOnServerAuthRetryRequest, &OnServerAuthRetryRequest_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearClientAuthEndSessionRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthEndSessionRequestDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearClientAuthEndSessionRequestDelegate ( struct FScriptDelegate ClientAuthEndSessionRequestDelegate )
{
	static UFunction* pFnClearClientAuthEndSessionRequestDelegate = NULL;

	if ( ! pFnClearClientAuthEndSessionRequestDelegate )
		pFnClearClientAuthEndSessionRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27073 ];

	UOnlineAuthInterface_execClearClientAuthEndSessionRequestDelegate_Parms ClearClientAuthEndSessionRequestDelegate_Parms;
	memcpy ( &ClearClientAuthEndSessionRequestDelegate_Parms.ClientAuthEndSessionRequestDelegate, &ClientAuthEndSessionRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnClearClientAuthEndSessionRequestDelegate, &ClearClientAuthEndSessionRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddClientAuthEndSessionRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthEndSessionRequestDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddClientAuthEndSessionRequestDelegate ( struct FScriptDelegate ClientAuthEndSessionRequestDelegate )
{
	static UFunction* pFnAddClientAuthEndSessionRequestDelegate = NULL;

	if ( ! pFnAddClientAuthEndSessionRequestDelegate )
		pFnAddClientAuthEndSessionRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27071 ];

	UOnlineAuthInterface_execAddClientAuthEndSessionRequestDelegate_Parms AddClientAuthEndSessionRequestDelegate_Parms;
	memcpy ( &AddClientAuthEndSessionRequestDelegate_Parms.ClientAuthEndSessionRequestDelegate, &ClientAuthEndSessionRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnAddClientAuthEndSessionRequestDelegate, &AddClientAuthEndSessionRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnClientAuthEndSessionRequest
// [0x00120000] 
// Parameters infos:
// class UPlayer*                 ServerConnection               ( CPF_Parm )

void UOnlineAuthInterface::OnClientAuthEndSessionRequest ( class UPlayer* ServerConnection )
{
	static UFunction* pFnOnClientAuthEndSessionRequest = NULL;

	if ( ! pFnOnClientAuthEndSessionRequest )
		pFnOnClientAuthEndSessionRequest = (UFunction*) UObject::GObjObjects()->Data[ 27069 ];

	UOnlineAuthInterface_execOnClientAuthEndSessionRequest_Parms OnClientAuthEndSessionRequest_Parms;
	OnClientAuthEndSessionRequest_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnOnClientAuthEndSessionRequest, &OnClientAuthEndSessionRequest_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearServerAuthCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearServerAuthCompleteDelegate ( struct FScriptDelegate ServerAuthCompleteDelegate )
{
	static UFunction* pFnClearServerAuthCompleteDelegate = NULL;

	if ( ! pFnClearServerAuthCompleteDelegate )
		pFnClearServerAuthCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27067 ];

	UOnlineAuthInterface_execClearServerAuthCompleteDelegate_Parms ClearServerAuthCompleteDelegate_Parms;
	memcpy ( &ClearServerAuthCompleteDelegate_Parms.ServerAuthCompleteDelegate, &ServerAuthCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearServerAuthCompleteDelegate, &ClearServerAuthCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddServerAuthCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddServerAuthCompleteDelegate ( struct FScriptDelegate ServerAuthCompleteDelegate )
{
	static UFunction* pFnAddServerAuthCompleteDelegate = NULL;

	if ( ! pFnAddServerAuthCompleteDelegate )
		pFnAddServerAuthCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27065 ];

	UOnlineAuthInterface_execAddServerAuthCompleteDelegate_Parms AddServerAuthCompleteDelegate_Parms;
	memcpy ( &AddServerAuthCompleteDelegate_Parms.ServerAuthCompleteDelegate, &ServerAuthCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddServerAuthCompleteDelegate, &AddServerAuthCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnServerAuthComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// class UPlayer*                 ServerConnection               ( CPF_Parm )
// struct FString                 ExtraInfo                      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::OnServerAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo )
{
	static UFunction* pFnOnServerAuthComplete = NULL;

	if ( ! pFnOnServerAuthComplete )
		pFnOnServerAuthComplete = (UFunction*) UObject::GObjObjects()->Data[ 27060 ];

	UOnlineAuthInterface_execOnServerAuthComplete_Parms OnServerAuthComplete_Parms;
	OnServerAuthComplete_Parms.bSuccess = bSuccess;
	memcpy ( &OnServerAuthComplete_Parms.ServerUID, &ServerUID, 0x48 );
	OnServerAuthComplete_Parms.ServerConnection = ServerConnection;
	memcpy ( &OnServerAuthComplete_Parms.ExtraInfo, &ExtraInfo, 0xC );

	this->ProcessEvent ( pFnOnServerAuthComplete, &OnServerAuthComplete_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearClientAuthCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearClientAuthCompleteDelegate ( struct FScriptDelegate ClientAuthCompleteDelegate )
{
	static UFunction* pFnClearClientAuthCompleteDelegate = NULL;

	if ( ! pFnClearClientAuthCompleteDelegate )
		pFnClearClientAuthCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27058 ];

	UOnlineAuthInterface_execClearClientAuthCompleteDelegate_Parms ClearClientAuthCompleteDelegate_Parms;
	memcpy ( &ClearClientAuthCompleteDelegate_Parms.ClientAuthCompleteDelegate, &ClientAuthCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearClientAuthCompleteDelegate, &ClearClientAuthCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddClientAuthCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddClientAuthCompleteDelegate ( struct FScriptDelegate ClientAuthCompleteDelegate )
{
	static UFunction* pFnAddClientAuthCompleteDelegate = NULL;

	if ( ! pFnAddClientAuthCompleteDelegate )
		pFnAddClientAuthCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27056 ];

	UOnlineAuthInterface_execAddClientAuthCompleteDelegate_Parms AddClientAuthCompleteDelegate_Parms;
	memcpy ( &AddClientAuthCompleteDelegate_Parms.ClientAuthCompleteDelegate, &ClientAuthCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddClientAuthCompleteDelegate, &AddClientAuthCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnClientAuthComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FString                 ExtraInfo                      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::OnClientAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo )
{
	static UFunction* pFnOnClientAuthComplete = NULL;

	if ( ! pFnOnClientAuthComplete )
		pFnOnClientAuthComplete = (UFunction*) UObject::GObjObjects()->Data[ 27051 ];

	UOnlineAuthInterface_execOnClientAuthComplete_Parms OnClientAuthComplete_Parms;
	OnClientAuthComplete_Parms.bSuccess = bSuccess;
	memcpy ( &OnClientAuthComplete_Parms.ClientUID, &ClientUID, 0x48 );
	OnClientAuthComplete_Parms.ClientConnection = ClientConnection;
	memcpy ( &OnClientAuthComplete_Parms.ExtraInfo, &ExtraInfo, 0xC );

	this->ProcessEvent ( pFnOnClientAuthComplete, &OnClientAuthComplete_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearServerAuthResponseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthResponseDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearServerAuthResponseDelegate ( struct FScriptDelegate ServerAuthResponseDelegate )
{
	static UFunction* pFnClearServerAuthResponseDelegate = NULL;

	if ( ! pFnClearServerAuthResponseDelegate )
		pFnClearServerAuthResponseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27049 ];

	UOnlineAuthInterface_execClearServerAuthResponseDelegate_Parms ClearServerAuthResponseDelegate_Parms;
	memcpy ( &ClearServerAuthResponseDelegate_Parms.ServerAuthResponseDelegate, &ServerAuthResponseDelegate, 0x10 );

	this->ProcessEvent ( pFnClearServerAuthResponseDelegate, &ClearServerAuthResponseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddServerAuthResponseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthResponseDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddServerAuthResponseDelegate ( struct FScriptDelegate ServerAuthResponseDelegate )
{
	static UFunction* pFnAddServerAuthResponseDelegate = NULL;

	if ( ! pFnAddServerAuthResponseDelegate )
		pFnAddServerAuthResponseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27047 ];

	UOnlineAuthInterface_execAddServerAuthResponseDelegate_Parms AddServerAuthResponseDelegate_Parms;
	memcpy ( &AddServerAuthResponseDelegate_Parms.ServerAuthResponseDelegate, &ServerAuthResponseDelegate, 0x10 );

	this->ProcessEvent ( pFnAddServerAuthResponseDelegate, &AddServerAuthResponseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnServerAuthResponse
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

void UOnlineAuthInterface::OnServerAuthResponse ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int AuthTicketUID )
{
	static UFunction* pFnOnServerAuthResponse = NULL;

	if ( ! pFnOnServerAuthResponse )
		pFnOnServerAuthResponse = (UFunction*) UObject::GObjObjects()->Data[ 27043 ];

	UOnlineAuthInterface_execOnServerAuthResponse_Parms OnServerAuthResponse_Parms;
	memcpy ( &OnServerAuthResponse_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &OnServerAuthResponse_Parms.ServerIP, &ServerIP, 0x14 );
	OnServerAuthResponse_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnOnServerAuthResponse, &OnServerAuthResponse_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearClientAuthResponseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthResponseDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearClientAuthResponseDelegate ( struct FScriptDelegate ClientAuthResponseDelegate )
{
	static UFunction* pFnClearClientAuthResponseDelegate = NULL;

	if ( ! pFnClearClientAuthResponseDelegate )
		pFnClearClientAuthResponseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27041 ];

	UOnlineAuthInterface_execClearClientAuthResponseDelegate_Parms ClearClientAuthResponseDelegate_Parms;
	memcpy ( &ClearClientAuthResponseDelegate_Parms.ClientAuthResponseDelegate, &ClientAuthResponseDelegate, 0x10 );

	this->ProcessEvent ( pFnClearClientAuthResponseDelegate, &ClearClientAuthResponseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddClientAuthResponseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthResponseDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddClientAuthResponseDelegate ( struct FScriptDelegate ClientAuthResponseDelegate )
{
	static UFunction* pFnAddClientAuthResponseDelegate = NULL;

	if ( ! pFnAddClientAuthResponseDelegate )
		pFnAddClientAuthResponseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27039 ];

	UOnlineAuthInterface_execAddClientAuthResponseDelegate_Parms AddClientAuthResponseDelegate_Parms;
	memcpy ( &AddClientAuthResponseDelegate_Parms.ClientAuthResponseDelegate, &ClientAuthResponseDelegate, 0x10 );

	this->ProcessEvent ( pFnAddClientAuthResponseDelegate, &AddClientAuthResponseDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnClientAuthResponse
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

void UOnlineAuthInterface::OnClientAuthResponse ( struct FUniqueNetId ClientUID, struct FIpAddr ClientIP, int AuthTicketUID )
{
	static UFunction* pFnOnClientAuthResponse = NULL;

	if ( ! pFnOnClientAuthResponse )
		pFnOnClientAuthResponse = (UFunction*) UObject::GObjObjects()->Data[ 27035 ];

	UOnlineAuthInterface_execOnClientAuthResponse_Parms OnClientAuthResponse_Parms;
	memcpy ( &OnClientAuthResponse_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &OnClientAuthResponse_Parms.ClientIP, &ClientIP, 0x14 );
	OnClientAuthResponse_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnOnClientAuthResponse, &OnClientAuthResponse_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearServerAuthRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthRequestDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearServerAuthRequestDelegate ( struct FScriptDelegate ServerAuthRequestDelegate )
{
	static UFunction* pFnClearServerAuthRequestDelegate = NULL;

	if ( ! pFnClearServerAuthRequestDelegate )
		pFnClearServerAuthRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27033 ];

	UOnlineAuthInterface_execClearServerAuthRequestDelegate_Parms ClearServerAuthRequestDelegate_Parms;
	memcpy ( &ClearServerAuthRequestDelegate_Parms.ServerAuthRequestDelegate, &ServerAuthRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnClearServerAuthRequestDelegate, &ClearServerAuthRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddServerAuthRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ServerAuthRequestDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddServerAuthRequestDelegate ( struct FScriptDelegate ServerAuthRequestDelegate )
{
	static UFunction* pFnAddServerAuthRequestDelegate = NULL;

	if ( ! pFnAddServerAuthRequestDelegate )
		pFnAddServerAuthRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27031 ];

	UOnlineAuthInterface_execAddServerAuthRequestDelegate_Parms AddServerAuthRequestDelegate_Parms;
	memcpy ( &AddServerAuthRequestDelegate_Parms.ServerAuthRequestDelegate, &ServerAuthRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnAddServerAuthRequestDelegate, &AddServerAuthRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnServerAuthRequest
// [0x00120000] 
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )
// int                            ClientPort                     ( CPF_Parm )

void UOnlineAuthInterface::OnServerAuthRequest ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, struct FIpAddr ClientIP, int ClientPort )
{
	static UFunction* pFnOnServerAuthRequest = NULL;

	if ( ! pFnOnServerAuthRequest )
		pFnOnServerAuthRequest = (UFunction*) UObject::GObjObjects()->Data[ 27026 ];

	UOnlineAuthInterface_execOnServerAuthRequest_Parms OnServerAuthRequest_Parms;
	OnServerAuthRequest_Parms.ClientConnection = ClientConnection;
	memcpy ( &OnServerAuthRequest_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &OnServerAuthRequest_Parms.ClientIP, &ClientIP, 0x14 );
	OnServerAuthRequest_Parms.ClientPort = ClientPort;

	this->ProcessEvent ( pFnOnServerAuthRequest, &OnServerAuthRequest_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearClientAuthRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthRequestDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearClientAuthRequestDelegate ( struct FScriptDelegate ClientAuthRequestDelegate )
{
	static UFunction* pFnClearClientAuthRequestDelegate = NULL;

	if ( ! pFnClearClientAuthRequestDelegate )
		pFnClearClientAuthRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27024 ];

	UOnlineAuthInterface_execClearClientAuthRequestDelegate_Parms ClearClientAuthRequestDelegate_Parms;
	memcpy ( &ClearClientAuthRequestDelegate_Parms.ClientAuthRequestDelegate, &ClientAuthRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnClearClientAuthRequestDelegate, &ClearClientAuthRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddClientAuthRequestDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ClientAuthRequestDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddClientAuthRequestDelegate ( struct FScriptDelegate ClientAuthRequestDelegate )
{
	static UFunction* pFnAddClientAuthRequestDelegate = NULL;

	if ( ! pFnAddClientAuthRequestDelegate )
		pFnAddClientAuthRequestDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27022 ];

	UOnlineAuthInterface_execAddClientAuthRequestDelegate_Parms AddClientAuthRequestDelegate_Parms;
	memcpy ( &AddClientAuthRequestDelegate_Parms.ClientAuthRequestDelegate, &ClientAuthRequestDelegate, 0x10 );

	this->ProcessEvent ( pFnAddClientAuthRequestDelegate, &AddClientAuthRequestDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnClientAuthRequest
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            ServerPort                     ( CPF_Parm )
// unsigned long                  bSecure                        ( CPF_Parm )

void UOnlineAuthInterface::OnClientAuthRequest ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int ServerPort, unsigned long bSecure )
{
	static UFunction* pFnOnClientAuthRequest = NULL;

	if ( ! pFnOnClientAuthRequest )
		pFnOnClientAuthRequest = (UFunction*) UObject::GObjObjects()->Data[ 27017 ];

	UOnlineAuthInterface_execOnClientAuthRequest_Parms OnClientAuthRequest_Parms;
	memcpy ( &OnClientAuthRequest_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &OnClientAuthRequest_Parms.ServerIP, &ServerIP, 0x14 );
	OnClientAuthRequest_Parms.ServerPort = ServerPort;
	OnClientAuthRequest_Parms.bSecure = bSecure;

	this->ProcessEvent ( pFnOnClientAuthRequest, &OnClientAuthRequest_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.ClearAuthReadyDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AuthReadyDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::ClearAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate )
{
	static UFunction* pFnClearAuthReadyDelegate = NULL;

	if ( ! pFnClearAuthReadyDelegate )
		pFnClearAuthReadyDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27015 ];

	UOnlineAuthInterface_execClearAuthReadyDelegate_Parms ClearAuthReadyDelegate_Parms;
	memcpy ( &ClearAuthReadyDelegate_Parms.AuthReadyDelegate, &AuthReadyDelegate, 0x10 );

	this->ProcessEvent ( pFnClearAuthReadyDelegate, &ClearAuthReadyDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.AddAuthReadyDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AuthReadyDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAuthInterface::AddAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate )
{
	static UFunction* pFnAddAuthReadyDelegate = NULL;

	if ( ! pFnAddAuthReadyDelegate )
		pFnAddAuthReadyDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27013 ];

	UOnlineAuthInterface_execAddAuthReadyDelegate_Parms AddAuthReadyDelegate_Parms;
	memcpy ( &AddAuthReadyDelegate_Parms.AuthReadyDelegate, &AuthReadyDelegate, 0x10 );

	this->ProcessEvent ( pFnAddAuthReadyDelegate, &AddAuthReadyDelegate_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.OnAuthReady
// [0x00120000] 
// Parameters infos:

void UOnlineAuthInterface::OnAuthReady ( )
{
	static UFunction* pFnOnAuthReady = NULL;

	if ( ! pFnOnAuthReady )
		pFnOnAuthReady = (UFunction*) UObject::GObjObjects()->Data[ 27012 ];

	UOnlineAuthInterface_execOnAuthReady_Parms OnAuthReady_Parms;

	this->ProcessEvent ( pFnOnAuthReady, &OnAuthReady_Parms, NULL );
};

// Function Engine.OnlineAuthInterface.IsReady
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineAuthInterface::IsReady ( )
{
	static UFunction* pFnIsReady = NULL;

	if ( ! pFnIsReady )
		pFnIsReady = (UFunction*) UObject::GObjObjects()->Data[ 8672 ];

	UOnlineAuthInterface_execIsReady_Parms IsReady_Parms;

	this->ProcessEvent ( pFnIsReady, &IsReady_Parms, NULL );

	return IsReady_Parms.ReturnValue;
};

// Function Engine.OnlineEventTracker.RaiseEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 EventName                      ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       EventParams                    ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineEventTracker::eventRaiseEvent ( struct FString EventName, TArray< struct FString > EventParams )
{
	static UFunction* pFnRaiseEvent = NULL;

	if ( ! pFnRaiseEvent )
		pFnRaiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 27456 ];

	UOnlineEventTracker_eventRaiseEvent_Parms RaiseEvent_Parms;
	memcpy ( &RaiseEvent_Parms.EventName, &EventName, 0xC );
	memcpy ( &RaiseEvent_Parms.EventParams, &EventParams, 0xC );

	this->ProcessEvent ( pFnRaiseEvent, &RaiseEvent_Parms, NULL );

	return RaiseEvent_Parms.ReturnValue;
};

// Function Engine.OnlineEventTracker.ShutDown
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineEventTracker::eventShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 27455 ];

	UOnlineEventTracker_eventShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function Engine.OnlineEventTracker.Init
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineEventTracker::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 27454 ];

	UOnlineEventTracker_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.OnlineMatchmakingStats.StopTimer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FMMStats_Timer          Timer                          ( CPF_Parm | CPF_OutParm )

void UOnlineMatchmakingStats::StopTimer ( struct FMMStats_Timer* Timer )
{
	static UFunction* pFnStopTimer = NULL;

	if ( ! pFnStopTimer )
		pFnStopTimer = (UFunction*) UObject::GObjObjects()->Data[ 28019 ];

	UOnlineMatchmakingStats_execStopTimer_Parms StopTimer_Parms;

	pFnStopTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopTimer, &StopTimer_Parms, NULL );

	pFnStopTimer->FunctionFlags |= 0x400;

	if ( Timer )
		memcpy ( Timer, &StopTimer_Parms.Timer, 0xC );
};

// Function Engine.OnlineMatchmakingStats.StartTimer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FMMStats_Timer          Timer                          ( CPF_Parm | CPF_OutParm )

void UOnlineMatchmakingStats::StartTimer ( struct FMMStats_Timer* Timer )
{
	static UFunction* pFnStartTimer = NULL;

	if ( ! pFnStartTimer )
		pFnStartTimer = (UFunction*) UObject::GObjObjects()->Data[ 28017 ];

	UOnlineMatchmakingStats_execStartTimer_Parms StartTimer_Parms;

	pFnStartTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartTimer, &StartTimer_Parms, NULL );

	pFnStartTimer->FunctionFlags |= 0x400;

	if ( Timer )
		memcpy ( Timer, &StartTimer_Parms.Timer, 0xC );
};

// Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlinePlayerStorage::SetDefaultVersionNumber ( )
{
	static UFunction* pFnSetDefaultVersionNumber = NULL;

	if ( ! pFnSetDefaultVersionNumber )
		pFnSetDefaultVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 28891 ];

	UOnlinePlayerStorage_execSetDefaultVersionNumber_Parms SetDefaultVersionNumber_Parms;

	pFnSetDefaultVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultVersionNumber, &SetDefaultVersionNumber_Parms, NULL );

	pFnSetDefaultVersionNumber->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.GetVersionNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlinePlayerStorage::GetVersionNumber ( )
{
	static UFunction* pFnGetVersionNumber = NULL;

	if ( ! pFnGetVersionNumber )
		pFnGetVersionNumber = (UFunction*) UObject::GObjObjects()->Data[ 28889 ];

	UOnlinePlayerStorage_execGetVersionNumber_Parms GetVersionNumber_Parms;

	pFnGetVersionNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVersionNumber, &GetVersionNumber_Parms, NULL );

	pFnGetVersionNumber->FunctionFlags |= 0x400;

	return GetVersionNumber_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.AppendVersionToSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlinePlayerStorage::AppendVersionToSettings ( )
{
	static UFunction* pFnAppendVersionToSettings = NULL;

	if ( ! pFnAppendVersionToSettings )
		pFnAppendVersionToSettings = (UFunction*) UObject::GObjObjects()->Data[ 28888 ];

	UOnlinePlayerStorage_execAppendVersionToSettings_Parms AppendVersionToSettings_Parms;

	pFnAppendVersionToSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToSettings, &AppendVersionToSettings_Parms, NULL );

	pFnAppendVersionToSettings->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.SetToDefaults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlinePlayerStorage::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 28887 ];

	UOnlinePlayerStorage_eventSetToDefaults_Parms SetToDefaults_Parms;

	pFnSetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );

	pFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.AddSettingFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SettingId                      ( CPF_Parm )

void UOnlinePlayerStorage::AddSettingFloat ( int SettingId )
{
	static UFunction* pFnAddSettingFloat = NULL;

	if ( ! pFnAddSettingFloat )
		pFnAddSettingFloat = (UFunction*) UObject::GObjObjects()->Data[ 28885 ];

	UOnlinePlayerStorage_execAddSettingFloat_Parms AddSettingFloat_Parms;
	AddSettingFloat_Parms.SettingId = SettingId;

	pFnAddSettingFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSettingFloat, &AddSettingFloat_Parms, NULL );

	pFnAddSettingFloat->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.AddSettingInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            SettingId                      ( CPF_Parm )

void UOnlinePlayerStorage::AddSettingInt ( int SettingId )
{
	static UFunction* pFnAddSettingInt = NULL;

	if ( ! pFnAddSettingInt )
		pFnAddSettingInt = (UFunction*) UObject::GObjObjects()->Data[ 28883 ];

	UOnlinePlayerStorage_execAddSettingInt_Parms AddSettingInt_Parms;
	AddSettingInt_Parms.SettingId = SettingId;

	pFnAddSettingInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSettingInt, &AddSettingInt_Parms, NULL );

	pFnAddSettingInt->FunctionFlags |= 0x400;
};

// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetRangedProfileSettingValue ( int ProfileId, float* OutValue )
{
	static UFunction* pFnGetRangedProfileSettingValue = NULL;

	if ( ! pFnGetRangedProfileSettingValue )
		pFnGetRangedProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 28879 ];

	UOnlinePlayerStorage_execGetRangedProfileSettingValue_Parms GetRangedProfileSettingValue_Parms;
	GetRangedProfileSettingValue_Parms.ProfileId = ProfileId;

	pFnGetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedProfileSettingValue, &GetRangedProfileSettingValue_Parms, NULL );

	pFnGetRangedProfileSettingValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedProfileSettingValue_Parms.OutValue;

	return GetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool UOnlinePlayerStorage::SetRangedProfileSettingValue ( int ProfileId, float NewValue )
{
	static UFunction* pFnSetRangedProfileSettingValue = NULL;

	if ( ! pFnSetRangedProfileSettingValue )
		pFnSetRangedProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 28875 ];

	UOnlinePlayerStorage_execSetRangedProfileSettingValue_Parms SetRangedProfileSettingValue_Parms;
	SetRangedProfileSettingValue_Parms.ProfileId = ProfileId;
	SetRangedProfileSettingValue_Parms.NewValue = NewValue;

	pFnSetRangedProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedProfileSettingValue, &SetRangedProfileSettingValue_Parms, NULL );

	pFnSetRangedProfileSettingValue->FunctionFlags |= 0x400;

	return SetRangedProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetProfileSettingRange = NULL;

	if ( ! pFnGetProfileSettingRange )
		pFnGetProfileSettingRange = (UFunction*) UObject::GObjObjects()->Data[ 28868 ];

	UOnlinePlayerStorage_execGetProfileSettingRange_Parms GetProfileSettingRange_Parms;
	GetProfileSettingRange_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingRange, &GetProfileSettingRange_Parms, NULL );

	pFnGetProfileSettingRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetProfileSettingRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetProfileSettingRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetProfileSettingRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetProfileSettingRange_Parms.bFormatAsInt;

	return GetProfileSettingRange_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// TArray< int >                  Ids                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingMappingIds ( int ProfileId, TArray< int >* Ids )
{
	static UFunction* pFnGetProfileSettingMappingIds = NULL;

	if ( ! pFnGetProfileSettingMappingIds )
		pFnGetProfileSettingMappingIds = (UFunction*) UObject::GObjObjects()->Data[ 28863 ];

	UOnlinePlayerStorage_execGetProfileSettingMappingIds_Parms GetProfileSettingMappingIds_Parms;
	GetProfileSettingMappingIds_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingMappingIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingMappingIds, &GetProfileSettingMappingIds_Parms, NULL );

	pFnGetProfileSettingMappingIds->FunctionFlags |= 0x400;

	if ( Ids )
		memcpy ( Ids, &GetProfileSettingMappingIds_Parms.Ids, 0xC );

	return GetProfileSettingMappingIds_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileId                      ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType )
{
	static UFunction* pFnGetProfileSettingMappingType = NULL;

	if ( ! pFnGetProfileSettingMappingType )
		pFnGetProfileSettingMappingType = (UFunction*) UObject::GObjObjects()->Data[ 28859 ];

	UOnlinePlayerStorage_execGetProfileSettingMappingType_Parms GetProfileSettingMappingType_Parms;
	GetProfileSettingMappingType_Parms.ProfileId = ProfileId;

	pFnGetProfileSettingMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingMappingType, &GetProfileSettingMappingType_Parms, NULL );

	pFnGetProfileSettingMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetProfileSettingMappingType_Parms.OutType;

	return GetProfileSettingMappingType_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

bool UOnlinePlayerStorage::SetProfileSettingValueFloat ( int ProfileSettingId, float Value )
{
	static UFunction* pFnSetProfileSettingValueFloat = NULL;

	if ( ! pFnSetProfileSettingValueFloat )
		pFnSetProfileSettingValueFloat = (UFunction*) UObject::GObjObjects()->Data[ 28855 ];

	UOnlinePlayerStorage_execSetProfileSettingValueFloat_Parms SetProfileSettingValueFloat_Parms;
	SetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueFloat_Parms.Value = Value;

	pFnSetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueFloat, &SetProfileSettingValueFloat_Parms, NULL );

	pFnSetProfileSettingValueFloat->FunctionFlags |= 0x400;

	return SetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlinePlayerStorage::SetProfileSettingValueInt ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueInt = NULL;

	if ( ! pFnSetProfileSettingValueInt )
		pFnSetProfileSettingValueInt = (UFunction*) UObject::GObjObjects()->Data[ 28851 ];

	UOnlinePlayerStorage_execSetProfileSettingValueInt_Parms SetProfileSettingValueInt_Parms;
	SetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueInt_Parms.Value = Value;

	pFnSetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueInt, &SetProfileSettingValueInt_Parms, NULL );

	pFnSetProfileSettingValueInt->FunctionFlags |= 0x400;

	return SetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

bool UOnlinePlayerStorage::SetProfileSettingValueId ( int ProfileSettingId, int Value )
{
	static UFunction* pFnSetProfileSettingValueId = NULL;

	if ( ! pFnSetProfileSettingValueId )
		pFnSetProfileSettingValueId = (UFunction*) UObject::GObjObjects()->Data[ 28847 ];

	UOnlinePlayerStorage_execSetProfileSettingValueId_Parms SetProfileSettingValueId_Parms;
	SetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;
	SetProfileSettingValueId_Parms.Value = Value;

	pFnSetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueId, &SetProfileSettingValueId_Parms, NULL );

	pFnSetProfileSettingValueId->FunctionFlags |= 0x400;

	return SetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueFloat ( int ProfileSettingId, float* Value )
{
	static UFunction* pFnGetProfileSettingValueFloat = NULL;

	if ( ! pFnGetProfileSettingValueFloat )
		pFnGetProfileSettingValueFloat = (UFunction*) UObject::GObjObjects()->Data[ 28843 ];

	UOnlinePlayerStorage_execGetProfileSettingValueFloat_Parms GetProfileSettingValueFloat_Parms;
	GetProfileSettingValueFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueFloat, &GetProfileSettingValueFloat_Parms, NULL );

	pFnGetProfileSettingValueFloat->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueFloat_Parms.Value;

	return GetProfileSettingValueFloat_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueInt ( int ProfileSettingId, int* Value )
{
	static UFunction* pFnGetProfileSettingValueInt = NULL;

	if ( ! pFnGetProfileSettingValueInt )
		pFnGetProfileSettingValueInt = (UFunction*) UObject::GObjObjects()->Data[ 28839 ];

	UOnlinePlayerStorage_execGetProfileSettingValueInt_Parms GetProfileSettingValueInt_Parms;
	GetProfileSettingValueInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueInt, &GetProfileSettingValueInt_Parms, NULL );

	pFnGetProfileSettingValueInt->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueInt_Parms.Value;

	return GetProfileSettingValueInt_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueFromListIndex ( int ProfileSettingId, int ListIndex, int* Value )
{
	static UFunction* pFnGetProfileSettingValueFromListIndex = NULL;

	if ( ! pFnGetProfileSettingValueFromListIndex )
		pFnGetProfileSettingValueFromListIndex = (UFunction*) UObject::GObjObjects()->Data[ 28834 ];

	UOnlinePlayerStorage_execGetProfileSettingValueFromListIndex_Parms GetProfileSettingValueFromListIndex_Parms;
	GetProfileSettingValueFromListIndex_Parms.ProfileSettingId = ProfileSettingId;
	GetProfileSettingValueFromListIndex_Parms.ListIndex = ListIndex;

	pFnGetProfileSettingValueFromListIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueFromListIndex, &GetProfileSettingValueFromListIndex_Parms, NULL );

	pFnGetProfileSettingValueFromListIndex->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetProfileSettingValueFromListIndex_Parms.Value;

	return GetProfileSettingValueFromListIndex_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueId
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )
// int                            ListIndex                      ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex )
{
	static UFunction* pFnGetProfileSettingValueId = NULL;

	if ( ! pFnGetProfileSettingValueId )
		pFnGetProfileSettingValueId = (UFunction*) UObject::GObjObjects()->Data[ 28829 ];

	UOnlinePlayerStorage_execGetProfileSettingValueId_Parms GetProfileSettingValueId_Parms;
	GetProfileSettingValueId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueId, &GetProfileSettingValueId_Parms, NULL );

	pFnGetProfileSettingValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetProfileSettingValueId_Parms.ValueId;

	if ( ListIndex )
		*ListIndex = GetProfileSettingValueId_Parms.ListIndex;

	return GetProfileSettingValueId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValue = NULL;

	if ( ! pFnSetProfileSettingValue )
		pFnSetProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 28825 ];

	UOnlinePlayerStorage_execSetProfileSettingValue_Parms SetProfileSettingValue_Parms;
	SetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;

	pFnSetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValue, &SetProfileSettingValue_Parms, NULL );

	pFnSetProfileSettingValue->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValue_Parms.NewValue, 0xC );

	return SetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetProfileSettingValueByName = NULL;

	if ( ! pFnSetProfileSettingValueByName )
		pFnSetProfileSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 28821 ];

	UOnlinePlayerStorage_execSetProfileSettingValueByName_Parms SetProfileSettingValueByName_Parms;
	memcpy ( &SetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnSetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetProfileSettingValueByName, &SetProfileSettingValueByName_Parms, NULL );

	pFnSetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetProfileSettingValueByName_Parms.NewValue, 0xC );

	return SetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValueByName = NULL;

	if ( ! pFnGetProfileSettingValueByName )
		pFnGetProfileSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 28817 ];

	UOnlinePlayerStorage_execGetProfileSettingValueByName_Parms GetProfileSettingValueByName_Parms;
	memcpy ( &GetProfileSettingValueByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueByName, &GetProfileSettingValueByName_Parms, NULL );

	pFnGetProfileSettingValueByName->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValueByName_Parms.Value, 0xC );

	return GetProfileSettingValueByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValues
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// TArray< struct FName >         Values                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values )
{
	static UFunction* pFnGetProfileSettingValues = NULL;

	if ( ! pFnGetProfileSettingValues )
		pFnGetProfileSettingValues = (UFunction*) UObject::GObjObjects()->Data[ 28812 ];

	UOnlinePlayerStorage_execGetProfileSettingValues_Parms GetProfileSettingValues_Parms;
	GetProfileSettingValues_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValues, &GetProfileSettingValues_Parms, NULL );

	pFnGetProfileSettingValues->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetProfileSettingValues_Parms.Values, 0xC );

	return GetProfileSettingValues_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlinePlayerStorage::GetProfileSettingValueName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingValueName = NULL;

	if ( ! pFnGetProfileSettingValueName )
		pFnGetProfileSettingValueName = (UFunction*) UObject::GObjObjects()->Data[ 28809 ];

	UOnlinePlayerStorage_execGetProfileSettingValueName_Parms GetProfileSettingValueName_Parms;
	GetProfileSettingValueName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValueName, &GetProfileSettingValueName_Parms, NULL );

	pFnGetProfileSettingValueName->FunctionFlags |= 0x400;

	return GetProfileSettingValueName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            ValueMapID                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerStorage::GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value )
{
	static UFunction* pFnGetProfileSettingValue = NULL;

	if ( ! pFnGetProfileSettingValue )
		pFnGetProfileSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 28804 ];

	UOnlinePlayerStorage_execGetProfileSettingValue_Parms GetProfileSettingValue_Parms;
	GetProfileSettingValue_Parms.ProfileSettingId = ProfileSettingId;
	GetProfileSettingValue_Parms.ValueMapID = ValueMapID;

	pFnGetProfileSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingValue, &GetProfileSettingValue_Parms, NULL );

	pFnGetProfileSettingValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetProfileSettingValue_Parms.Value, 0xC );

	return GetProfileSettingValue_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

bool UOnlinePlayerStorage::IsProfileSettingIdMapped ( int ProfileSettingId )
{
	static UFunction* pFnIsProfileSettingIdMapped = NULL;

	if ( ! pFnIsProfileSettingIdMapped )
		pFnIsProfileSettingIdMapped = (UFunction*) UObject::GObjObjects()->Data[ 28801 ];

	UOnlinePlayerStorage_execIsProfileSettingIdMapped_Parms IsProfileSettingIdMapped_Parms;
	IsProfileSettingIdMapped_Parms.ProfileSettingId = ProfileSettingId;

	pFnIsProfileSettingIdMapped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsProfileSettingIdMapped, &IsProfileSettingIdMapped_Parms, NULL );

	pFnIsProfileSettingIdMapped->FunctionFlags |= 0x400;

	return IsProfileSettingIdMapped_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )

int UOnlinePlayerStorage::FindDefaultProfileMappingIndexByName ( struct FName ProfileSettingName )
{
	static UFunction* pFnFindDefaultProfileMappingIndexByName = NULL;

	if ( ! pFnFindDefaultProfileMappingIndexByName )
		pFnFindDefaultProfileMappingIndexByName = (UFunction*) UObject::GObjObjects()->Data[ 28798 ];

	UOnlinePlayerStorage_execFindDefaultProfileMappingIndexByName_Parms FindDefaultProfileMappingIndexByName_Parms;
	memcpy ( &FindDefaultProfileMappingIndexByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnFindDefaultProfileMappingIndexByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindDefaultProfileMappingIndexByName, &FindDefaultProfileMappingIndexByName_Parms, NULL );

	pFnFindDefaultProfileMappingIndexByName->FunctionFlags |= 0x400;

	return FindDefaultProfileMappingIndexByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )

int UOnlinePlayerStorage::FindProfileMappingIndexByName ( struct FName ProfileSettingName )
{
	static UFunction* pFnFindProfileMappingIndexByName = NULL;

	if ( ! pFnFindProfileMappingIndexByName )
		pFnFindProfileMappingIndexByName = (UFunction*) UObject::GObjObjects()->Data[ 28795 ];

	UOnlinePlayerStorage_execFindProfileMappingIndexByName_Parms FindProfileMappingIndexByName_Parms;
	memcpy ( &FindProfileMappingIndexByName_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnFindProfileMappingIndexByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileMappingIndexByName, &FindProfileMappingIndexByName_Parms, NULL );

	pFnFindProfileMappingIndexByName->FunctionFlags |= 0x400;

	return FindProfileMappingIndexByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileMappingIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

int UOnlinePlayerStorage::FindProfileMappingIndex ( int ProfileSettingId )
{
	static UFunction* pFnFindProfileMappingIndex = NULL;

	if ( ! pFnFindProfileMappingIndex )
		pFnFindProfileMappingIndex = (UFunction*) UObject::GObjObjects()->Data[ 28792 ];

	UOnlinePlayerStorage_execFindProfileMappingIndex_Parms FindProfileMappingIndex_Parms;
	FindProfileMappingIndex_Parms.ProfileSettingId = ProfileSettingId;

	pFnFindProfileMappingIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileMappingIndex, &FindProfileMappingIndex_Parms, NULL );

	pFnFindProfileMappingIndex->FunctionFlags |= 0x400;

	return FindProfileMappingIndex_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.FindProfileSettingIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

int UOnlinePlayerStorage::FindProfileSettingIndex ( int ProfileSettingId )
{
	static UFunction* pFnFindProfileSettingIndex = NULL;

	if ( ! pFnFindProfileSettingIndex )
		pFnFindProfileSettingIndex = (UFunction*) UObject::GObjObjects()->Data[ 28789 ];

	UOnlinePlayerStorage_execFindProfileSettingIndex_Parms FindProfileSettingIndex_Parms;
	FindProfileSettingIndex_Parms.ProfileSettingId = ProfileSettingId;

	pFnFindProfileSettingIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProfileSettingIndex, &FindProfileSettingIndex_Parms, NULL );

	pFnFindProfileSettingIndex->FunctionFlags |= 0x400;

	return FindProfileSettingIndex_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ProfileSettingId               ( CPF_Parm )

struct FString UOnlinePlayerStorage::GetProfileSettingColumnHeader ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingColumnHeader = NULL;

	if ( ! pFnGetProfileSettingColumnHeader )
		pFnGetProfileSettingColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 28786 ];

	UOnlinePlayerStorage_execGetProfileSettingColumnHeader_Parms GetProfileSettingColumnHeader_Parms;
	GetProfileSettingColumnHeader_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingColumnHeader, &GetProfileSettingColumnHeader_Parms, NULL );

	pFnGetProfileSettingColumnHeader->FunctionFlags |= 0x400;

	return GetProfileSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )

struct FName UOnlinePlayerStorage::GetProfileSettingName ( int ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingName = NULL;

	if ( ! pFnGetProfileSettingName )
		pFnGetProfileSettingName = (UFunction*) UObject::GObjObjects()->Data[ 28783 ];

	UOnlinePlayerStorage_execGetProfileSettingName_Parms GetProfileSettingName_Parms;
	GetProfileSettingName_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingName, &GetProfileSettingName_Parms, NULL );

	pFnGetProfileSettingName->FunctionFlags |= 0x400;

	return GetProfileSettingName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerStorage.GetProfileSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProfileSettingName             ( CPF_Parm )
// int                            ProfileSettingId               ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerStorage::GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId )
{
	static UFunction* pFnGetProfileSettingId = NULL;

	if ( ! pFnGetProfileSettingId )
		pFnGetProfileSettingId = (UFunction*) UObject::GObjObjects()->Data[ 28779 ];

	UOnlinePlayerStorage_execGetProfileSettingId_Parms GetProfileSettingId_Parms;
	memcpy ( &GetProfileSettingId_Parms.ProfileSettingName, &ProfileSettingName, 0x8 );

	pFnGetProfileSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingId, &GetProfileSettingId_Parms, NULL );

	pFnGetProfileSettingId->FunctionFlags |= 0x400;

	if ( ProfileSettingId )
		*ProfileSettingId = GetProfileSettingId_Parms.ProfileSettingId;

	return GetProfileSettingId_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineProfileSettings::eventModifyAvailableProfileSettings ( )
{
	static UFunction* pFnModifyAvailableProfileSettings = NULL;

	if ( ! pFnModifyAvailableProfileSettings )
		pFnModifyAvailableProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28944 ];

	UOnlineProfileSettings_eventModifyAvailableProfileSettings_Parms ModifyAvailableProfileSettings_Parms;

	this->ProcessEvent ( pFnModifyAvailableProfileSettings, &ModifyAvailableProfileSettings_Parms, NULL );
};

// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::AppendVersionToReadIds ( )
{
	static UFunction* pFnAppendVersionToReadIds = NULL;

	if ( ! pFnAppendVersionToReadIds )
		pFnAppendVersionToReadIds = (UFunction*) UObject::GObjObjects()->Data[ 28943 ];

	UOnlineProfileSettings_execAppendVersionToReadIds_Parms AppendVersionToReadIds_Parms;

	pFnAppendVersionToReadIds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendVersionToReadIds, &AppendVersionToReadIds_Parms, NULL );

	pFnAppendVersionToReadIds->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.SetToDefaults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineProfileSettings::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 28942 ];

	UOnlineProfileSettings_eventSetToDefaults_Parms SetToDefaults_Parms;

	pFnSetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );

	pFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// float                          DefaultFloat                   ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat )
{
	static UFunction* pFnGetProfileSettingDefaultFloat = NULL;

	if ( ! pFnGetProfileSettingDefaultFloat )
		pFnGetProfileSettingDefaultFloat = (UFunction*) UObject::GObjObjects()->Data[ 28938 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultFloat_Parms GetProfileSettingDefaultFloat_Parms;
	GetProfileSettingDefaultFloat_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultFloat, &GetProfileSettingDefaultFloat_Parms, NULL );

	pFnGetProfileSettingDefaultFloat->FunctionFlags |= 0x400;

	if ( DefaultFloat )
		*DefaultFloat = GetProfileSettingDefaultFloat_Parms.DefaultFloat;

	return GetProfileSettingDefaultFloat_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            DefaultInt                     ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt )
{
	static UFunction* pFnGetProfileSettingDefaultInt = NULL;

	if ( ! pFnGetProfileSettingDefaultInt )
		pFnGetProfileSettingDefaultInt = (UFunction*) UObject::GObjObjects()->Data[ 28934 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultInt_Parms GetProfileSettingDefaultInt_Parms;
	GetProfileSettingDefaultInt_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultInt, &GetProfileSettingDefaultInt_Parms, NULL );

	pFnGetProfileSettingDefaultInt->FunctionFlags |= 0x400;

	if ( DefaultInt )
		*DefaultInt = GetProfileSettingDefaultInt_Parms.DefaultInt;

	return GetProfileSettingDefaultInt_Parms.ReturnValue;
};

// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ProfileSettingId               ( CPF_Parm )
// int                            DefaultId                      ( CPF_Parm | CPF_OutParm )
// int                            ListIndex                      ( CPF_Parm | CPF_OutParm )

bool UOnlineProfileSettings::GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex )
{
	static UFunction* pFnGetProfileSettingDefaultId = NULL;

	if ( ! pFnGetProfileSettingDefaultId )
		pFnGetProfileSettingDefaultId = (UFunction*) UObject::GObjObjects()->Data[ 28929 ];

	UOnlineProfileSettings_execGetProfileSettingDefaultId_Parms GetProfileSettingDefaultId_Parms;
	GetProfileSettingDefaultId_Parms.ProfileSettingId = ProfileSettingId;

	pFnGetProfileSettingDefaultId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingDefaultId, &GetProfileSettingDefaultId_Parms, NULL );

	pFnGetProfileSettingDefaultId->FunctionFlags |= 0x400;

	if ( DefaultId )
		*DefaultId = GetProfileSettingDefaultId_Parms.DefaultId;

	if ( ListIndex )
		*ListIndex = GetProfileSettingDefaultId_Parms.ListIndex;

	return GetProfileSettingDefaultId_Parms.ReturnValue;
};

// Function Engine.OnlineStats.GetViewName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ViewId                         ( CPF_Parm )

struct FName UOnlineStats::GetViewName ( int ViewId )
{
	static UFunction* pFnGetViewName = NULL;

	if ( ! pFnGetViewName )
		pFnGetViewName = (UFunction*) UObject::GObjObjects()->Data[ 29113 ];

	UOnlineStats_execGetViewName_Parms GetViewName_Parms;
	GetViewName_Parms.ViewId = ViewId;

	pFnGetViewName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewName, &GetViewName_Parms, NULL );

	pFnGetViewName->FunctionFlags |= 0x400;

	return GetViewName_Parms.ReturnValue;
};

// Function Engine.OnlineStats.GetViewId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ViewName                       ( CPF_Parm )
// int                            ViewId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStats::GetViewId ( struct FName ViewName, int* ViewId )
{
	static UFunction* pFnGetViewId = NULL;

	if ( ! pFnGetViewId )
		pFnGetViewId = (UFunction*) UObject::GObjObjects()->Data[ 29109 ];

	UOnlineStats_execGetViewId_Parms GetViewId_Parms;
	memcpy ( &GetViewId_Parms.ViewName, &ViewName, 0x8 );

	pFnGetViewId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewId, &GetViewId_Parms, NULL );

	pFnGetViewId->FunctionFlags |= 0x400;

	if ( ViewId )
		*ViewId = GetViewId_Parms.ViewId;

	return GetViewId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetRankForPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

int UOnlineStatsRead::GetRankForPlayer ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnGetRankForPlayer = NULL;

	if ( ! pFnGetRankForPlayer )
		pFnGetRankForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29245 ];

	UOnlineStatsRead_execGetRankForPlayer_Parms GetRankForPlayer_Parms;
	memcpy ( &GetRankForPlayer_Parms.PlayerID, &PlayerID, 0x48 );

	pFnGetRankForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRankForPlayer, &GetRankForPlayer_Parms, NULL );

	pFnGetRankForPlayer->FunctionFlags |= 0x400;

	return GetRankForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.AddPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

void UOnlineStatsRead::AddPlayer ( struct FString PlayerName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnAddPlayer = NULL;

	if ( ! pFnAddPlayer )
		pFnAddPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29242 ];

	UOnlineStatsRead_execAddPlayer_Parms AddPlayer_Parms;
	memcpy ( &AddPlayer_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &AddPlayer_Parms.PlayerID, &PlayerID, 0x48 );

	pFnAddPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayer, &AddPlayer_Parms, NULL );

	pFnAddPlayer->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsRead.IsStatZero
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )

bool UOnlineStatsRead::IsStatZero ( struct FUniqueNetId PlayerID, int StatColumnNo )
{
	static UFunction* pFnIsStatZero = NULL;

	if ( ! pFnIsStatZero )
		pFnIsStatZero = (UFunction*) UObject::GObjObjects()->Data[ 29238 ];

	UOnlineStatsRead_execIsStatZero_Parms IsStatZero_Parms;
	memcpy ( &IsStatZero_Parms.PlayerID, &PlayerID, 0x48 );
	IsStatZero_Parms.StatColumnNo = StatColumnNo;

	pFnIsStatZero->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStatZero, &IsStatZero_Parms, NULL );

	pFnIsStatZero->FunctionFlags |= 0x400;

	return IsStatZero_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// struct FString                 StatValue                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsRead::GetStatValueForPlayerAsString ( struct FUniqueNetId PlayerID, int StatColumnNo, struct FString* StatValue )
{
	static UFunction* pFnGetStatValueForPlayerAsString = NULL;

	if ( ! pFnGetStatValueForPlayerAsString )
		pFnGetStatValueForPlayerAsString = (UFunction*) UObject::GObjObjects()->Data[ 29233 ];

	UOnlineStatsRead_execGetStatValueForPlayerAsString_Parms GetStatValueForPlayerAsString_Parms;
	memcpy ( &GetStatValueForPlayerAsString_Parms.PlayerID, &PlayerID, 0x48 );
	GetStatValueForPlayerAsString_Parms.StatColumnNo = StatColumnNo;

	pFnGetStatValueForPlayerAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatValueForPlayerAsString, &GetStatValueForPlayerAsString_Parms, NULL );

	pFnGetStatValueForPlayerAsString->FunctionFlags |= 0x400;

	if ( StatValue )
		memcpy ( StatValue, &GetStatValueForPlayerAsString_Parms.StatValue, 0xC );

	return GetStatValueForPlayerAsString_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// float                          StatValue                      ( CPF_Parm )

bool UOnlineStatsRead::SetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float StatValue )
{
	static UFunction* pFnSetFloatStatValueForPlayer = NULL;

	if ( ! pFnSetFloatStatValueForPlayer )
		pFnSetFloatStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29228 ];

	UOnlineStatsRead_execSetFloatStatValueForPlayer_Parms SetFloatStatValueForPlayer_Parms;
	memcpy ( &SetFloatStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x48 );
	SetFloatStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;
	SetFloatStatValueForPlayer_Parms.StatValue = StatValue;

	pFnSetFloatStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStatValueForPlayer, &SetFloatStatValueForPlayer_Parms, NULL );

	pFnSetFloatStatValueForPlayer->FunctionFlags |= 0x400;

	return SetFloatStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// float                          StatValue                      ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsRead::GetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float* StatValue )
{
	static UFunction* pFnGetFloatStatValueForPlayer = NULL;

	if ( ! pFnGetFloatStatValueForPlayer )
		pFnGetFloatStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29223 ];

	UOnlineStatsRead_execGetFloatStatValueForPlayer_Parms GetFloatStatValueForPlayer_Parms;
	memcpy ( &GetFloatStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x48 );
	GetFloatStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;

	pFnGetFloatStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatStatValueForPlayer, &GetFloatStatValueForPlayer_Parms, NULL );

	pFnGetFloatStatValueForPlayer->FunctionFlags |= 0x400;

	if ( StatValue )
		*StatValue = GetFloatStatValueForPlayer_Parms.StatValue;

	return GetFloatStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.SetIntStatValueForPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// int                            StatValue                      ( CPF_Parm )

bool UOnlineStatsRead::SetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int StatValue )
{
	static UFunction* pFnSetIntStatValueForPlayer = NULL;

	if ( ! pFnSetIntStatValueForPlayer )
		pFnSetIntStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29218 ];

	UOnlineStatsRead_execSetIntStatValueForPlayer_Parms SetIntStatValueForPlayer_Parms;
	memcpy ( &SetIntStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x48 );
	SetIntStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;
	SetIntStatValueForPlayer_Parms.StatValue = StatValue;

	pFnSetIntStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStatValueForPlayer, &SetIntStatValueForPlayer_Parms, NULL );

	pFnSetIntStatValueForPlayer->FunctionFlags |= 0x400;

	return SetIntStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.GetIntStatValueForPlayer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            StatColumnNo                   ( CPF_Parm )
// int                            StatValue                      ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsRead::GetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int* StatValue )
{
	static UFunction* pFnGetIntStatValueForPlayer = NULL;

	if ( ! pFnGetIntStatValueForPlayer )
		pFnGetIntStatValueForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29213 ];

	UOnlineStatsRead_execGetIntStatValueForPlayer_Parms GetIntStatValueForPlayer_Parms;
	memcpy ( &GetIntStatValueForPlayer_Parms.PlayerID, &PlayerID, 0x48 );
	GetIntStatValueForPlayer_Parms.StatColumnNo = StatColumnNo;

	pFnGetIntStatValueForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntStatValueForPlayer, &GetIntStatValueForPlayer_Parms, NULL );

	pFnGetIntStatValueForPlayer->FunctionFlags |= 0x400;

	if ( StatValue )
		*StatValue = GetIntStatValueForPlayer_Parms.StatValue;

	return GetIntStatValueForPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsRead.OnReadComplete
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UOnlineStatsRead::eventOnReadComplete ( )
{
	static UFunction* pFnOnReadComplete = NULL;

	if ( ! pFnOnReadComplete )
		pFnOnReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 29212 ];

	UOnlineStatsRead_eventOnReadComplete_Parms OnReadComplete_Parms;

	this->ProcessEvent ( pFnOnReadComplete, &OnReadComplete_Parms, NULL );
};

// Function Engine.OnlineStatsWrite.DecrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementIntStat ( int StatId, int DecBy )
{
	static UFunction* pFnDecrementIntStat = NULL;

	if ( ! pFnDecrementIntStat )
		pFnDecrementIntStat = (UFunction*) UObject::GObjObjects()->Data[ 29281 ];

	UOnlineStatsWrite_execDecrementIntStat_Parms DecrementIntStat_Parms;
	DecrementIntStat_Parms.StatId = StatId;
	DecrementIntStat_Parms.DecBy = DecBy;

	pFnDecrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementIntStat, &DecrementIntStat_Parms, NULL );

	pFnDecrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.DecrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          DecBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::DecrementFloatStat ( int StatId, float DecBy )
{
	static UFunction* pFnDecrementFloatStat = NULL;

	if ( ! pFnDecrementFloatStat )
		pFnDecrementFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 29278 ];

	UOnlineStatsWrite_execDecrementFloatStat_Parms DecrementFloatStat_Parms;
	DecrementFloatStat_Parms.StatId = StatId;
	DecrementFloatStat_Parms.DecBy = DecBy;

	pFnDecrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementFloatStat, &DecrementFloatStat_Parms, NULL );

	pFnDecrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementIntStat ( int StatId, int IncBy )
{
	static UFunction* pFnIncrementIntStat = NULL;

	if ( ! pFnIncrementIntStat )
		pFnIncrementIntStat = (UFunction*) UObject::GObjObjects()->Data[ 29275 ];

	UOnlineStatsWrite_execIncrementIntStat_Parms IncrementIntStat_Parms;
	IncrementIntStat_Parms.StatId = StatId;
	IncrementIntStat_Parms.IncBy = IncBy;

	pFnIncrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementIntStat, &IncrementIntStat_Parms, NULL );

	pFnIncrementIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.IncrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          IncBy                          ( CPF_OptionalParm | CPF_Parm )

void UOnlineStatsWrite::IncrementFloatStat ( int StatId, float IncBy )
{
	static UFunction* pFnIncrementFloatStat = NULL;

	if ( ! pFnIncrementFloatStat )
		pFnIncrementFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 29272 ];

	UOnlineStatsWrite_execIncrementFloatStat_Parms IncrementFloatStat_Parms;
	IncrementFloatStat_Parms.StatId = StatId;
	IncrementFloatStat_Parms.IncBy = IncBy;

	pFnIncrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementFloatStat, &IncrementFloatStat_Parms, NULL );

	pFnIncrementFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetIntStat ( int StatId, int Value )
{
	static UFunction* pFnSetIntStat = NULL;

	if ( ! pFnSetIntStat )
		pFnSetIntStat = (UFunction*) UObject::GObjObjects()->Data[ 29269 ];

	UOnlineStatsWrite_execSetIntStat_Parms SetIntStat_Parms;
	SetIntStat_Parms.StatId = StatId;
	SetIntStat_Parms.Value = Value;

	pFnSetIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStat, &SetIntStat_Parms, NULL );

	pFnSetIntStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.SetFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UOnlineStatsWrite::SetFloatStat ( int StatId, float Value )
{
	static UFunction* pFnSetFloatStat = NULL;

	if ( ! pFnSetFloatStat )
		pFnSetFloatStat = (UFunction*) UObject::GObjObjects()->Data[ 29266 ];

	UOnlineStatsWrite_execSetFloatStat_Parms SetFloatStat_Parms;
	SetFloatStat_Parms.StatId = StatId;
	SetFloatStat_Parms.Value = Value;

	pFnSetFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStat, &SetFloatStat_Parms, NULL );

	pFnSetFloatStat->FunctionFlags |= 0x400;
};

// Function Engine.OnlineStatsWrite.GetStatName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StatId                         ( CPF_Parm )

struct FName UOnlineStatsWrite::GetStatName ( int StatId )
{
	static UFunction* pFnGetStatName = NULL;

	if ( ! pFnGetStatName )
		pFnGetStatName = (UFunction*) UObject::GObjObjects()->Data[ 29263 ];

	UOnlineStatsWrite_execGetStatName_Parms GetStatName_Parms;
	GetStatName_Parms.StatId = StatId;

	pFnGetStatName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatName, &GetStatName_Parms, NULL );

	pFnGetStatName->FunctionFlags |= 0x400;

	return GetStatName_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.GetStatId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StatName                       ( CPF_Parm )
// int                            StatId                         ( CPF_Parm | CPF_OutParm )

bool UOnlineStatsWrite::GetStatId ( struct FName StatName, int* StatId )
{
	static UFunction* pFnGetStatId = NULL;

	if ( ! pFnGetStatId )
		pFnGetStatId = (UFunction*) UObject::GObjObjects()->Data[ 29259 ];

	UOnlineStatsWrite_execGetStatId_Parms GetStatId_Parms;
	memcpy ( &GetStatId_Parms.StatName, &StatName, 0x8 );

	pFnGetStatId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStatId, &GetStatId_Parms, NULL );

	pFnGetStatId->FunctionFlags |= 0x400;

	if ( StatId )
		*StatId = GetStatId_Parms.StatId;

	return GetStatId_Parms.ReturnValue;
};

// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// [0x00120000] 
// Parameters infos:

void UOnlineStatsWrite::OnStatsWriteComplete ( )
{
	static UFunction* pFnOnStatsWriteComplete = NULL;

	if ( ! pFnOnStatsWriteComplete )
		pFnOnStatsWriteComplete = (UFunction*) UObject::GObjObjects()->Data[ 29257 ];

	UOnlineStatsWrite_execOnStatsWriteComplete_Parms OnStatsWriteComplete_Parms;

	this->ProcessEvent ( pFnOnStatsWriteComplete, &OnStatsWriteComplete_Parms, NULL );
};

// Function Engine.OnlineSubsystem.CanSendOfflinePartyInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineSubsystem::CanSendOfflinePartyInvite ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnCanSendOfflinePartyInvite = NULL;

	if ( ! pFnCanSendOfflinePartyInvite )
		pFnCanSendOfflinePartyInvite = (UFunction*) UObject::GObjObjects()->Data[ 7620 ];

	UOnlineSubsystem_execCanSendOfflinePartyInvite_Parms CanSendOfflinePartyInvite_Parms;
	memcpy ( &CanSendOfflinePartyInvite_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnCanSendOfflinePartyInvite, &CanSendOfflinePartyInvite_Parms, NULL );

	return CanSendOfflinePartyInvite_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueNetIDIsValid
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            InID                           ( CPF_Parm )

bool UOnlineSubsystem::UniqueNetIDIsValid ( struct FUniqueNetId InID )
{
	static UFunction* pFnUniqueNetIDIsValid = NULL;

	if ( ! pFnUniqueNetIDIsValid )
		pFnUniqueNetIDIsValid = (UFunction*) UObject::GObjObjects()->Data[ 7621 ];

	UOnlineSubsystem_execUniqueNetIDIsValid_Parms UniqueNetIDIsValid_Parms;
	memcpy ( &UniqueNetIDIsValid_Parms.InID, &InID, 0x48 );

	pFnUniqueNetIDIsValid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUniqueNetIDIsValid, &UniqueNetIDIsValid_Parms, NULL );

	pFnUniqueNetIDIsValid->FunctionFlags |= 0x400;

	return UniqueNetIDIsValid_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetEnvironmentZone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSubsystem::GetEnvironmentZone ( )
{
	static UFunction* pFnGetEnvironmentZone = NULL;

	if ( ! pFnGetEnvironmentZone )
		pFnGetEnvironmentZone = (UFunction*) UObject::GObjObjects()->Data[ 7645 ];

	UOnlineSubsystem_execGetEnvironmentZone_Parms GetEnvironmentZone_Parms;

	pFnGetEnvironmentZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnvironmentZone, &GetEnvironmentZone_Parms, NULL );

	pFnGetEnvironmentZone->FunctionFlags |= 0x400;

	return GetEnvironmentZone_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.AllowPsyNetParty
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::AllowPsyNetParty ( )
{
	static UFunction* pFnAllowPsyNetParty = NULL;

	if ( ! pFnAllowPsyNetParty )
		pFnAllowPsyNetParty = (UFunction*) UObject::GObjObjects()->Data[ 7648 ];

	UOnlineSubsystem_execAllowPsyNetParty_Parms AllowPsyNetParty_Parms;

	this->ProcessEvent ( pFnAllowPsyNetParty, &AllowPsyNetParty_Parms, NULL );

	return AllowPsyNetParty_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetPlayerIP
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

struct FString UOnlineSubsystem::GetPlayerIP ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnGetPlayerIP = NULL;

	if ( ! pFnGetPlayerIP )
		pFnGetPlayerIP = (UFunction*) UObject::GObjObjects()->Data[ 7650 ];

	UOnlineSubsystem_execGetPlayerIP_Parms GetPlayerIP_Parms;
	memcpy ( &GetPlayerIP_Parms.PlayerID, &PlayerID, 0x48 );

	pFnGetPlayerIP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerIP, &GetPlayerIP_Parms, NULL );

	pFnGetPlayerIP->FunctionFlags |= 0x400;

	return GetPlayerIP_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.ShowRestrictionMessage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned char                  Privilege                      ( CPF_Parm )

bool UOnlineSubsystem::ShowRestrictionMessage ( int ControllerId, unsigned char Privilege )
{
	static UFunction* pFnShowRestrictionMessage = NULL;

	if ( ! pFnShowRestrictionMessage )
		pFnShowRestrictionMessage = (UFunction*) UObject::GObjObjects()->Data[ 7652 ];

	UOnlineSubsystem_execShowRestrictionMessage_Parms ShowRestrictionMessage_Parms;
	ShowRestrictionMessage_Parms.ControllerId = ControllerId;
	ShowRestrictionMessage_Parms.Privilege = Privilege;

	this->ProcessEvent ( pFnShowRestrictionMessage, &ShowRestrictionMessage_Parms, NULL );

	return ShowRestrictionMessage_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.IsOriginalAppOwner
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::IsOriginalAppOwner ( )
{
	static UFunction* pFnIsOriginalAppOwner = NULL;

	if ( ! pFnIsOriginalAppOwner )
		pFnIsOriginalAppOwner = (UFunction*) UObject::GObjObjects()->Data[ 7655 ];

	UOnlineSubsystem_execIsOriginalAppOwner_Parms IsOriginalAppOwner_Parms;

	this->ProcessEvent ( pFnIsOriginalAppOwner, &IsOriginalAppOwner_Parms, NULL );

	return IsOriginalAppOwner_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.CanPlayersTextChat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FUniqueNetId            TargetId                       ( CPF_Parm )

bool UOnlineSubsystem::CanPlayersTextChat ( struct FUniqueNetId PlayerID, struct FUniqueNetId TargetId )
{
	static UFunction* pFnCanPlayersTextChat = NULL;

	if ( ! pFnCanPlayersTextChat )
		pFnCanPlayersTextChat = (UFunction*) UObject::GObjObjects()->Data[ 7661 ];

	UOnlineSubsystem_execCanPlayersTextChat_Parms CanPlayersTextChat_Parms;
	memcpy ( &CanPlayersTextChat_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &CanPlayersTextChat_Parms.TargetId, &TargetId, 0x48 );

	this->ProcessEvent ( pFnCanPlayersTextChat, &CanPlayersTextChat_Parms, NULL );

	return CanPlayersTextChat_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.ShowHelpUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineSubsystem::ShowHelpUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowHelpUI = NULL;

	if ( ! pFnShowHelpUI )
		pFnShowHelpUI = (UFunction*) UObject::GObjObjects()->Data[ 7663 ];

	UOnlineSubsystem_execShowHelpUI_Parms ShowHelpUI_Parms;
	ShowHelpUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowHelpUI, &ShowHelpUI_Parms, NULL );

	return ShowHelpUI_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.ResetStats
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bResetAchievements             ( CPF_Parm )

bool UOnlineSubsystem::ResetStats ( unsigned long bResetAchievements )
{
	static UFunction* pFnResetStats = NULL;

	if ( ! pFnResetStats )
		pFnResetStats = (UFunction*) UObject::GObjObjects()->Data[ 7667 ];

	UOnlineSubsystem_execResetStats_Parms ResetStats_Parms;
	ResetStats_Parms.bResetAchievements = bResetAchievements;

	this->ProcessEvent ( pFnResetStats, &ResetStats_Parms, NULL );

	return ResetStats_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.FinishOnlineGameSession
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ServerID                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::FinishOnlineGameSession ( struct FString ServerID )
{
	static UFunction* pFnFinishOnlineGameSession = NULL;

	if ( ! pFnFinishOnlineGameSession )
		pFnFinishOnlineGameSession = (UFunction*) UObject::GObjObjects()->Data[ 7670 ];

	UOnlineSubsystem_execFinishOnlineGameSession_Parms FinishOnlineGameSession_Parms;
	memcpy ( &FinishOnlineGameSession_Parms.ServerID, &ServerID, 0xC );

	pFnFinishOnlineGameSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishOnlineGameSession, &FinishOnlineGameSession_Parms, NULL );

	pFnFinishOnlineGameSession->FunctionFlags |= 0x400;
};

// Function Engine.OnlineSubsystem.StartOnlineGameSession
// [0x00020000] 
// Parameters infos:
// struct FString                 ServerID                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::StartOnlineGameSession ( struct FString ServerID )
{
	static UFunction* pFnStartOnlineGameSession = NULL;

	if ( ! pFnStartOnlineGameSession )
		pFnStartOnlineGameSession = (UFunction*) UObject::GObjObjects()->Data[ 7673 ];

	UOnlineSubsystem_execStartOnlineGameSession_Parms StartOnlineGameSession_Parms;
	memcpy ( &StartOnlineGameSession_Parms.ServerID, &ServerID, 0xC );

	this->ProcessEvent ( pFnStartOnlineGameSession, &StartOnlineGameSession_Parms, NULL );
};

// Function Engine.OnlineSubsystem.ClearSystemUserControllerPairingChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         PairingChangeDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::ClearSystemUserControllerPairingChangedDelegate ( struct FScriptDelegate PairingChangeDelegate )
{
	static UFunction* pFnClearSystemUserControllerPairingChangedDelegate = NULL;

	if ( ! pFnClearSystemUserControllerPairingChangedDelegate )
		pFnClearSystemUserControllerPairingChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 7675 ];

	UOnlineSubsystem_execClearSystemUserControllerPairingChangedDelegate_Parms ClearSystemUserControllerPairingChangedDelegate_Parms;
	memcpy ( &ClearSystemUserControllerPairingChangedDelegate_Parms.PairingChangeDelegate, &PairingChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnClearSystemUserControllerPairingChangedDelegate, &ClearSystemUserControllerPairingChangedDelegate_Parms, NULL );
};

// Function Engine.OnlineSubsystem.AddSystemUserControllerPairingChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         PairingChangeDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::AddSystemUserControllerPairingChangedDelegate ( struct FScriptDelegate PairingChangeDelegate )
{
	static UFunction* pFnAddSystemUserControllerPairingChangedDelegate = NULL;

	if ( ! pFnAddSystemUserControllerPairingChangedDelegate )
		pFnAddSystemUserControllerPairingChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 7677 ];

	UOnlineSubsystem_execAddSystemUserControllerPairingChangedDelegate_Parms AddSystemUserControllerPairingChangedDelegate_Parms;
	memcpy ( &AddSystemUserControllerPairingChangedDelegate_Parms.PairingChangeDelegate, &PairingChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnAddSystemUserControllerPairingChangedDelegate, &AddSystemUserControllerPairingChangedDelegate_Parms, NULL );
};

// Function Engine.OnlineSubsystem.OnSystemUserControllerPairingChanged
// [0x00120000] 
// Parameters infos:
// int                            NewLocalUserNum                ( CPF_Parm )
// int                            PreviousLocalUserNum           ( CPF_Parm )

void UOnlineSubsystem::OnSystemUserControllerPairingChanged ( int NewLocalUserNum, int PreviousLocalUserNum )
{
	static UFunction* pFnOnSystemUserControllerPairingChanged = NULL;

	if ( ! pFnOnSystemUserControllerPairingChanged )
		pFnOnSystemUserControllerPairingChanged = (UFunction*) UObject::GObjObjects()->Data[ 7679 ];

	UOnlineSubsystem_execOnSystemUserControllerPairingChanged_Parms OnSystemUserControllerPairingChanged_Parms;
	OnSystemUserControllerPairingChanged_Parms.NewLocalUserNum = NewLocalUserNum;
	OnSystemUserControllerPairingChanged_Parms.PreviousLocalUserNum = PreviousLocalUserNum;

	this->ProcessEvent ( pFnOnSystemUserControllerPairingChanged, &OnSystemUserControllerPairingChanged_Parms, NULL );
};

// Function Engine.OnlineSubsystem.IsAchievementUnlocked
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AchievementId                  ( CPF_Parm )

bool UOnlineSubsystem::IsAchievementUnlocked ( unsigned char LocalUserNum, int AchievementId )
{
	static UFunction* pFnIsAchievementUnlocked = NULL;

	if ( ! pFnIsAchievementUnlocked )
		pFnIsAchievementUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 7681 ];

	UOnlineSubsystem_execIsAchievementUnlocked_Parms IsAchievementUnlocked_Parms;
	IsAchievementUnlocked_Parms.LocalUserNum = LocalUserNum;
	IsAchievementUnlocked_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnIsAchievementUnlocked, &IsAchievementUnlocked_Parms, NULL );

	return IsAchievementUnlocked_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.IsRichPresenceLocalized
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::IsRichPresenceLocalized ( )
{
	static UFunction* pFnIsRichPresenceLocalized = NULL;

	if ( ! pFnIsRichPresenceLocalized )
		pFnIsRichPresenceLocalized = (UFunction*) UObject::GObjObjects()->Data[ 7684 ];

	UOnlineSubsystem_execIsRichPresenceLocalized_Parms IsRichPresenceLocalized_Parms;

	this->ProcessEvent ( pFnIsRichPresenceLocalized, &IsRichPresenceLocalized_Parms, NULL );

	return IsRichPresenceLocalized_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UpdateGameProgress
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalPlayerNum                 ( CPF_Parm )
// float                          Progress                       ( CPF_Parm )

void UOnlineSubsystem::UpdateGameProgress ( unsigned char LocalPlayerNum, float Progress )
{
	static UFunction* pFnUpdateGameProgress = NULL;

	if ( ! pFnUpdateGameProgress )
		pFnUpdateGameProgress = (UFunction*) UObject::GObjObjects()->Data[ 7688 ];

	UOnlineSubsystem_execUpdateGameProgress_Parms UpdateGameProgress_Parms;
	UpdateGameProgress_Parms.LocalPlayerNum = LocalPlayerNum;
	UpdateGameProgress_Parms.Progress = Progress;

	this->ProcessEvent ( pFnUpdateGameProgress, &UpdateGameProgress_Parms, NULL );
};

// Function Engine.OnlineSubsystem.ClearAccountPickerInput
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::ClearAccountPickerInput ( )
{
	static UFunction* pFnClearAccountPickerInput = NULL;

	if ( ! pFnClearAccountPickerInput )
		pFnClearAccountPickerInput = (UFunction*) UObject::GObjObjects()->Data[ 7690 ];

	UOnlineSubsystem_execClearAccountPickerInput_Parms ClearAccountPickerInput_Parms;

	this->ProcessEvent ( pFnClearAccountPickerInput, &ClearAccountPickerInput_Parms, NULL );
};

// Function Engine.OnlineSubsystem.LookForAccountPickerInput
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::LookForAccountPickerInput ( )
{
	static UFunction* pFnLookForAccountPickerInput = NULL;

	if ( ! pFnLookForAccountPickerInput )
		pFnLookForAccountPickerInput = (UFunction*) UObject::GObjObjects()->Data[ 7693 ];

	UOnlineSubsystem_execLookForAccountPickerInput_Parms LookForAccountPickerInput_Parms;

	this->ProcessEvent ( pFnLookForAccountPickerInput, &LookForAccountPickerInput_Parms, NULL );
};

// Function Engine.OnlineSubsystem.AddPlayerToSession
// [0x00020000] 
// Parameters infos:
// unsigned char                  ControllerId                   ( CPF_Parm )

void UOnlineSubsystem::AddPlayerToSession ( unsigned char ControllerId )
{
	static UFunction* pFnAddPlayerToSession = NULL;

	if ( ! pFnAddPlayerToSession )
		pFnAddPlayerToSession = (UFunction*) UObject::GObjObjects()->Data[ 7694 ];

	UOnlineSubsystem_execAddPlayerToSession_Parms AddPlayerToSession_Parms;
	AddPlayerToSession_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnAddPlayerToSession, &AddPlayerToSession_Parms, NULL );
};

// Function Engine.OnlineSubsystem.ClearPrimaryPlayer
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::ClearPrimaryPlayer ( )
{
	static UFunction* pFnClearPrimaryPlayer = NULL;

	if ( ! pFnClearPrimaryPlayer )
		pFnClearPrimaryPlayer = (UFunction*) UObject::GObjObjects()->Data[ 7695 ];

	UOnlineSubsystem_execClearPrimaryPlayer_Parms ClearPrimaryPlayer_Parms;

	this->ProcessEvent ( pFnClearPrimaryPlayer, &ClearPrimaryPlayer_Parms, NULL );
};

// Function Engine.OnlineSubsystem.RemoveUserAssociation
// [0x00020000] 
// Parameters infos:
// unsigned char                  ControllerId                   ( CPF_Parm )

void UOnlineSubsystem::RemoveUserAssociation ( unsigned char ControllerId )
{
	static UFunction* pFnRemoveUserAssociation = NULL;

	if ( ! pFnRemoveUserAssociation )
		pFnRemoveUserAssociation = (UFunction*) UObject::GObjObjects()->Data[ 7697 ];

	UOnlineSubsystem_execRemoveUserAssociation_Parms RemoveUserAssociation_Parms;
	RemoveUserAssociation_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnRemoveUserAssociation, &RemoveUserAssociation_Parms, NULL );
};

// Function Engine.OnlineSubsystem.MapEnd
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::MapEnd ( )
{
	static UFunction* pFnMapEnd = NULL;

	if ( ! pFnMapEnd )
		pFnMapEnd = (UFunction*) UObject::GObjObjects()->Data[ 7698 ];

	UOnlineSubsystem_execMapEnd_Parms MapEnd_Parms;

	this->ProcessEvent ( pFnMapEnd, &MapEnd_Parms, NULL );
};

// Function Engine.OnlineSubsystem.MapStart
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::MapStart ( )
{
	static UFunction* pFnMapStart = NULL;

	if ( ! pFnMapStart )
		pFnMapStart = (UFunction*) UObject::GObjObjects()->Data[ 7700 ];

	UOnlineSubsystem_execMapStart_Parms MapStart_Parms;

	this->ProcessEvent ( pFnMapStart, &MapStart_Parms, NULL );
};

// Function Engine.OnlineSubsystem.OnlineMatchEnd
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::OnlineMatchEnd ( )
{
	static UFunction* pFnOnlineMatchEnd = NULL;

	if ( ! pFnOnlineMatchEnd )
		pFnOnlineMatchEnd = (UFunction*) UObject::GObjObjects()->Data[ 7701 ];

	UOnlineSubsystem_execOnlineMatchEnd_Parms OnlineMatchEnd_Parms;

	this->ProcessEvent ( pFnOnlineMatchEnd, &OnlineMatchEnd_Parms, NULL );
};

// Function Engine.OnlineSubsystem.OnlineMatchStart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MapName                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::OnlineMatchStart ( struct FString MapName )
{
	static UFunction* pFnOnlineMatchStart = NULL;

	if ( ! pFnOnlineMatchStart )
		pFnOnlineMatchStart = (UFunction*) UObject::GObjObjects()->Data[ 7702 ];

	UOnlineSubsystem_execOnlineMatchStart_Parms OnlineMatchStart_Parms;
	memcpy ( &OnlineMatchStart_Parms.MapName, &MapName, 0xC );

	pFnOnlineMatchStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnlineMatchStart, &OnlineMatchStart_Parms, NULL );

	pFnOnlineMatchStart->FunctionFlags |= 0x400;
};

// Function Engine.OnlineSubsystem.SetSessionDifficultyLevel
// [0x00020000] 
// Parameters infos:
// int                            DifficultyLevel                ( CPF_Parm )

void UOnlineSubsystem::SetSessionDifficultyLevel ( int DifficultyLevel )
{
	static UFunction* pFnSetSessionDifficultyLevel = NULL;

	if ( ! pFnSetSessionDifficultyLevel )
		pFnSetSessionDifficultyLevel = (UFunction*) UObject::GObjObjects()->Data[ 7703 ];

	UOnlineSubsystem_execSetSessionDifficultyLevel_Parms SetSessionDifficultyLevel_Parms;
	SetSessionDifficultyLevel_Parms.DifficultyLevel = DifficultyLevel;

	this->ProcessEvent ( pFnSetSessionDifficultyLevel, &SetSessionDifficultyLevel_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetSessionGameplayModeName
// [0x00020000] 
// Parameters infos:
// struct FName                   GameplayModeName               ( CPF_Parm )

void UOnlineSubsystem::SetSessionGameplayModeName ( struct FName GameplayModeName )
{
	static UFunction* pFnSetSessionGameplayModeName = NULL;

	if ( ! pFnSetSessionGameplayModeName )
		pFnSetSessionGameplayModeName = (UFunction*) UObject::GObjObjects()->Data[ 7705 ];

	UOnlineSubsystem_execSetSessionGameplayModeName_Parms SetSessionGameplayModeName_Parms;
	memcpy ( &SetSessionGameplayModeName_Parms.GameplayModeName, &GameplayModeName, 0x8 );

	this->ProcessEvent ( pFnSetSessionGameplayModeName, &SetSessionGameplayModeName_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetSessionGameplayMode
// [0x00020000] 
// Parameters infos:
// int                            GameplayMode                   ( CPF_Parm )

void UOnlineSubsystem::SetSessionGameplayMode ( int GameplayMode )
{
	static UFunction* pFnSetSessionGameplayMode = NULL;

	if ( ! pFnSetSessionGameplayMode )
		pFnSetSessionGameplayMode = (UFunction*) UObject::GObjObjects()->Data[ 7707 ];

	UOnlineSubsystem_execSetSessionGameplayMode_Parms SetSessionGameplayMode_Parms;
	SetSessionGameplayMode_Parms.GameplayMode = GameplayMode;

	this->ProcessEvent ( pFnSetSessionGameplayMode, &SetSessionGameplayMode_Parms, NULL );
};

// Function Engine.OnlineSubsystem.PrintDebugInfo
// [0x00020102] 
// Parameters infos:
// class UDebugDrawer*            Drawer                         ( CPF_Parm )

void UOnlineSubsystem::PrintDebugInfo ( class UDebugDrawer* Drawer )
{
	static UFunction* pFnPrintDebugInfo = NULL;

	if ( ! pFnPrintDebugInfo )
		pFnPrintDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 7709 ];

	UOnlineSubsystem_execPrintDebugInfo_Parms PrintDebugInfo_Parms;
	PrintDebugInfo_Parms.Drawer = Drawer;

	this->ProcessEvent ( pFnPrintDebugInfo, &PrintDebugInfo_Parms, NULL );
};

// Function Engine.OnlineSubsystem.GetOnlinePlatformFromName
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PlatformName                   ( CPF_Parm | CPF_NeedCtorLink )

unsigned char UOnlineSubsystem::GetOnlinePlatformFromName ( struct FString PlatformName )
{
	static UFunction* pFnGetOnlinePlatformFromName = NULL;

	if ( ! pFnGetOnlinePlatformFromName )
		pFnGetOnlinePlatformFromName = (UFunction*) UObject::GObjObjects()->Data[ 7711 ];

	UOnlineSubsystem_execGetOnlinePlatformFromName_Parms GetOnlinePlatformFromName_Parms;
	memcpy ( &GetOnlinePlatformFromName_Parms.PlatformName, &PlatformName, 0xC );

	this->ProcessEvent ( pFnGetOnlinePlatformFromName, &GetOnlinePlatformFromName_Parms, NULL );

	return GetOnlinePlatformFromName_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetPlatformName
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  PlatformType                   ( CPF_Parm )

struct FString UOnlineSubsystem::GetPlatformName ( unsigned char PlatformType )
{
	static UFunction* pFnGetPlatformName = NULL;

	if ( ! pFnGetPlatformName )
		pFnGetPlatformName = (UFunction*) UObject::GObjObjects()->Data[ 7714 ];

	UOnlineSubsystem_execGetPlatformName_Parms GetPlatformName_Parms;
	GetPlatformName_Parms.PlatformType = PlatformType;

	this->ProcessEvent ( pFnGetPlatformName, &GetPlatformName_Parms, NULL );

	return GetPlatformName_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.IsEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 7720 ];

	UOnlineSubsystem_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayedWith
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Const | CPF_Parm )

void UOnlineSubsystem::SetPlayedWith ( struct FUniqueNetId PlayerNetId )
{
	static UFunction* pFnSetPlayedWith = NULL;

	if ( ! pFnSetPlayedWith )
		pFnSetPlayedWith = (UFunction*) UObject::GObjObjects()->Data[ 7723 ];

	UOnlineSubsystem_execSetPlayedWith_Parms SetPlayedWith_Parms;
	memcpy ( &SetPlayedWith_Parms.PlayerNetId, &PlayerNetId, 0x48 );

	this->ProcessEvent ( pFnSetPlayedWith, &SetPlayedWith_Parms, NULL );
};

// Function Engine.OnlineSubsystem.ClearPendingAvatarDownloads
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::ClearPendingAvatarDownloads ( )
{
	static UFunction* pFnClearPendingAvatarDownloads = NULL;

	if ( ! pFnClearPendingAvatarDownloads )
		pFnClearPendingAvatarDownloads = (UFunction*) UObject::GObjObjects()->Data[ 7725 ];

	UOnlineSubsystem_execClearPendingAvatarDownloads_Parms ClearPendingAvatarDownloads_Parms;

	this->ProcessEvent ( pFnClearPendingAvatarDownloads, &ClearPendingAvatarDownloads_Parms, NULL );
};

// Function Engine.OnlineSubsystem.UseSubSystemAvatar
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::UseSubSystemAvatar ( )
{
	static UFunction* pFnUseSubSystemAvatar = NULL;

	if ( ! pFnUseSubSystemAvatar )
		pFnUseSubSystemAvatar = (UFunction*) UObject::GObjObjects()->Data[ 7727 ];

	UOnlineSubsystem_execUseSubSystemAvatar_Parms UseSubSystemAvatar_Parms;

	this->ProcessEvent ( pFnUseSubSystemAvatar, &UseSubSystemAvatar_Parms, NULL );

	return UseSubSystemAvatar_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.ReadOnlineAvatar
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Const | CPF_Parm )
// unsigned char                  Size                           ( CPF_Parm )
// struct FScriptDelegate         ReadOnlineAvatarCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::ReadOnlineAvatar ( struct FUniqueNetId PlayerNetId, unsigned char Size, struct FScriptDelegate ReadOnlineAvatarCompleteDelegate )
{
	static UFunction* pFnReadOnlineAvatar = NULL;

	if ( ! pFnReadOnlineAvatar )
		pFnReadOnlineAvatar = (UFunction*) UObject::GObjObjects()->Data[ 7728 ];

	UOnlineSubsystem_execReadOnlineAvatar_Parms ReadOnlineAvatar_Parms;
	memcpy ( &ReadOnlineAvatar_Parms.PlayerNetId, &PlayerNetId, 0x48 );
	ReadOnlineAvatar_Parms.Size = Size;
	memcpy ( &ReadOnlineAvatar_Parms.ReadOnlineAvatarCompleteDelegate, &ReadOnlineAvatarCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnReadOnlineAvatar, &ReadOnlineAvatar_Parms, NULL );
};

// Function Engine.OnlineSubsystem.OnReadOnlineAvatarComplete
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            PlayerNetId                    ( CPF_Const | CPF_Parm )
// class UTexture*                Avatar                         ( CPF_Parm )
// struct FString                 OnlinePlayerName               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::OnReadOnlineAvatarComplete ( struct FUniqueNetId PlayerNetId, class UTexture* Avatar, struct FString OnlinePlayerName )
{
	static UFunction* pFnOnReadOnlineAvatarComplete = NULL;

	if ( ! pFnOnReadOnlineAvatarComplete )
		pFnOnReadOnlineAvatarComplete = (UFunction*) UObject::GObjObjects()->Data[ 7730 ];

	UOnlineSubsystem_execOnReadOnlineAvatarComplete_Parms OnReadOnlineAvatarComplete_Parms;
	memcpy ( &OnReadOnlineAvatarComplete_Parms.PlayerNetId, &PlayerNetId, 0x48 );
	OnReadOnlineAvatarComplete_Parms.Avatar = Avatar;
	memcpy ( &OnReadOnlineAvatarComplete_Parms.OnlinePlayerName, &OnlinePlayerName, 0xC );

	this->ProcessEvent ( pFnOnReadOnlineAvatarComplete, &OnReadOnlineAvatarComplete_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetDebugSpewLevel
// [0x00020000] 
// Parameters infos:
// int                            DebugSpewLevel                 ( CPF_Parm )

void UOnlineSubsystem::SetDebugSpewLevel ( int DebugSpewLevel )
{
	static UFunction* pFnSetDebugSpewLevel = NULL;

	if ( ! pFnSetDebugSpewLevel )
		pFnSetDebugSpewLevel = (UFunction*) UObject::GObjObjects()->Data[ 7734 ];

	UOnlineSubsystem_execSetDebugSpewLevel_Parms SetDebugSpewLevel_Parms;
	SetDebugSpewLevel_Parms.DebugSpewLevel = DebugSpewLevel;

	this->ProcessEvent ( pFnSetDebugSpewLevel, &SetDebugSpewLevel_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpVoiceRegistration
// [0x00020000] 
// Parameters infos:

void UOnlineSubsystem::DumpVoiceRegistration ( )
{
	static UFunction* pFnDumpVoiceRegistration = NULL;

	if ( ! pFnDumpVoiceRegistration )
		pFnDumpVoiceRegistration = (UFunction*) UObject::GObjObjects()->Data[ 7738 ];

	UOnlineSubsystem_execDumpVoiceRegistration_Parms DumpVoiceRegistration_Parms;

	this->ProcessEvent ( pFnDumpVoiceRegistration, &DumpVoiceRegistration_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpSessionState
// [0x00820002] 
// Parameters infos:

void UOnlineSubsystem::DumpSessionState ( )
{
	static UFunction* pFnDumpSessionState = NULL;

	if ( ! pFnDumpSessionState )
		pFnDumpSessionState = (UFunction*) UObject::GObjObjects()->Data[ 7740 ];

	UOnlineSubsystem_execDumpSessionState_Parms DumpSessionState_Parms;

	this->ProcessEvent ( pFnDumpSessionState, &DumpSessionState_Parms, NULL );
};

// Function Engine.OnlineSubsystem.DumpGameSettings
// [0x00022002] 
// Parameters infos:
// class UOnlineGameSettings*     GameSettings                   ( CPF_Const | CPF_Parm )

void UOnlineSubsystem::DumpGameSettings ( class UOnlineGameSettings* GameSettings )
{
	static UFunction* pFnDumpGameSettings = NULL;

	if ( ! pFnDumpGameSettings )
		pFnDumpGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 7741 ];

	UOnlineSubsystem_execDumpGameSettings_Parms DumpGameSettings_Parms;
	DumpGameSettings_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnDumpGameSettings, &DumpGameSettings_Parms, NULL );
};

// Function Engine.OnlineSubsystem.GetNumSupportedLogins
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSubsystem::GetNumSupportedLogins ( )
{
	static UFunction* pFnGetNumSupportedLogins = NULL;

	if ( ! pFnGetNumSupportedLogins )
		pFnGetNumSupportedLogins = (UFunction*) UObject::GObjObjects()->Data[ 7756 ];

	UOnlineSubsystem_execGetNumSupportedLogins_Parms GetNumSupportedLogins_Parms;

	pFnGetNumSupportedLogins->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumSupportedLogins, &GetNumSupportedLogins_Parms, NULL );

	pFnGetNumSupportedLogins->FunctionFlags |= 0x400;

	return GetNumSupportedLogins_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetBuildUniqueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSubsystem::GetBuildUniqueId ( )
{
	static UFunction* pFnGetBuildUniqueId = NULL;

	if ( ! pFnGetBuildUniqueId )
		pFnGetBuildUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 7778 ];

	UOnlineSubsystem_execGetBuildUniqueId_Parms GetBuildUniqueId_Parms;

	pFnGetBuildUniqueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBuildUniqueId, &GetBuildUniqueId_Parms, NULL );

	pFnGetBuildUniqueId->FunctionFlags |= 0x400;

	return GetBuildUniqueId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            UserIndex                      ( CPF_Parm )

struct FUniqueNetId UOnlineSubsystem::eventGetPlayerUniqueNetIdFromIndex ( int UserIndex )
{
	static UFunction* pFnGetPlayerUniqueNetIdFromIndex = NULL;

	if ( ! pFnGetPlayerUniqueNetIdFromIndex )
		pFnGetPlayerUniqueNetIdFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 7780 ];

	UOnlineSubsystem_eventGetPlayerUniqueNetIdFromIndex_Parms GetPlayerUniqueNetIdFromIndex_Parms;
	GetPlayerUniqueNetIdFromIndex_Parms.UserIndex = UserIndex;

	this->ProcessEvent ( pFnGetPlayerUniqueNetIdFromIndex, &GetPlayerUniqueNetIdFromIndex_Parms, NULL );

	return GetPlayerUniqueNetIdFromIndex_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.StringToUniqueLobbyId
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UniqueNetIdString              ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          out_UniqueId                   ( CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::StringToUniqueLobbyId ( struct FString UniqueNetIdString, struct FUniqueLobbyId* out_UniqueId )
{
	static UFunction* pFnStringToUniqueLobbyId = NULL;

	if ( ! pFnStringToUniqueLobbyId )
		pFnStringToUniqueLobbyId = (UFunction*) UObject::GObjObjects()->Data[ 7782 ];

	UOnlineSubsystem_execStringToUniqueLobbyId_Parms StringToUniqueLobbyId_Parms;
	memcpy ( &StringToUniqueLobbyId_Parms.UniqueNetIdString, &UniqueNetIdString, 0xC );

	pFnStringToUniqueLobbyId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStringToUniqueLobbyId, &StringToUniqueLobbyId_Parms, NULL );

	pFnStringToUniqueLobbyId->FunctionFlags |= 0x400;

	if ( out_UniqueId )
		memcpy ( out_UniqueId, &StringToUniqueLobbyId_Parms.out_UniqueId, 0xC );

	return StringToUniqueLobbyId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueLobbyIdToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          IdToConvert                    ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UOnlineSubsystem::UniqueLobbyIdToString ( struct FUniqueLobbyId* IdToConvert )
{
	static UFunction* pFnUniqueLobbyIdToString = NULL;

	if ( ! pFnUniqueLobbyIdToString )
		pFnUniqueLobbyIdToString = (UFunction*) UObject::GObjObjects()->Data[ 7791 ];

	UOnlineSubsystem_execUniqueLobbyIdToString_Parms UniqueLobbyIdToString_Parms;

	pFnUniqueLobbyIdToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUniqueLobbyIdToString, &UniqueLobbyIdToString_Parms, NULL );

	pFnUniqueLobbyIdToString->FunctionFlags |= 0x400;

	if ( IdToConvert )
		memcpy ( IdToConvert, &UniqueLobbyIdToString_Parms.IdToConvert, 0xC );

	return UniqueLobbyIdToString_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.StringToUniqueNetId
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UniqueNetIdString              ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            out_UniqueId                   ( CPF_Parm | CPF_OutParm )

bool UOnlineSubsystem::StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId )
{
	static UFunction* pFnStringToUniqueNetId = NULL;

	if ( ! pFnStringToUniqueNetId )
		pFnStringToUniqueNetId = (UFunction*) UObject::GObjObjects()->Data[ 7798 ];

	UOnlineSubsystem_execStringToUniqueNetId_Parms StringToUniqueNetId_Parms;
	memcpy ( &StringToUniqueNetId_Parms.UniqueNetIdString, &UniqueNetIdString, 0xC );

	pFnStringToUniqueNetId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStringToUniqueNetId, &StringToUniqueNetId_Parms, NULL );

	pFnStringToUniqueNetId->FunctionFlags |= 0x400;

	if ( out_UniqueId )
		memcpy ( out_UniqueId, &StringToUniqueNetId_Parms.out_UniqueId, 0x48 );

	return StringToUniqueNetId_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.UniqueNetIdToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FUniqueNetId            IdToConvert                    ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UOnlineSubsystem::UniqueNetIdToString ( struct FUniqueNetId* IdToConvert )
{
	static UFunction* pFnUniqueNetIdToString = NULL;

	if ( ! pFnUniqueNetIdToString )
		pFnUniqueNetIdToString = (UFunction*) UObject::GObjObjects()->Data[ 7753 ];

	UOnlineSubsystem_execUniqueNetIdToString_Parms UniqueNetIdToString_Parms;

	pFnUniqueNetIdToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUniqueNetIdToString, &UniqueNetIdToString_Parms, NULL );

	pFnUniqueNetIdToString->FunctionFlags |= 0x400;

	if ( IdToConvert )
		memcpy ( IdToConvert, &UniqueNetIdToString_Parms.IdToConvert, 0x48 );

	return UniqueNetIdToString_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InterfaceName                  ( CPF_Parm )

class UObject* UOnlineSubsystem::eventGetNamedInterface ( struct FName InterfaceName )
{
	static UFunction* pFnGetNamedInterface = NULL;

	if ( ! pFnGetNamedInterface )
		pFnGetNamedInterface = (UFunction*) UObject::GObjObjects()->Data[ 7804 ];

	UOnlineSubsystem_eventGetNamedInterface_Parms GetNamedInterface_Parms;
	memcpy ( &GetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );

	this->ProcessEvent ( pFnGetNamedInterface, &GetNamedInterface_Parms, NULL );

	return GetNamedInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNamedInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   InterfaceName                  ( CPF_Parm )
// class UObject*                 NewInterface                   ( CPF_Parm )

void UOnlineSubsystem::eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface )
{
	static UFunction* pFnSetNamedInterface = NULL;

	if ( ! pFnSetNamedInterface )
		pFnSetNamedInterface = (UFunction*) UObject::GObjObjects()->Data[ 7807 ];

	UOnlineSubsystem_eventSetNamedInterface_Parms SetNamedInterface_Parms;
	memcpy ( &SetNamedInterface_Parms.InterfaceName, &InterfaceName, 0x8 );
	SetNamedInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNamedInterface, &SetNamedInterface_Parms, NULL );
};

// Function Engine.OnlineSubsystem.SetCommunityContentInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InCommunityContentInterface    ( CPF_Parm )

bool UOnlineSubsystem::eventSetCommunityContentInterface ( class UObject* InCommunityContentInterface )
{
	static UFunction* pFnSetCommunityContentInterface = NULL;

	if ( ! pFnSetCommunityContentInterface )
		pFnSetCommunityContentInterface = (UFunction*) UObject::GObjObjects()->Data[ 7814 ];

	UOnlineSubsystem_eventSetCommunityContentInterface_Parms SetCommunityContentInterface_Parms;
	SetCommunityContentInterface_Parms.InCommunityContentInterface = InCommunityContentInterface;

	this->ProcessEvent ( pFnSetCommunityContentInterface, &SetCommunityContentInterface_Parms, NULL );

	return SetCommunityContentInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetGameDVRInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InGameDVRInterface             ( CPF_Parm )

bool UOnlineSubsystem::eventSetGameDVRInterface ( class UObject* InGameDVRInterface )
{
	static UFunction* pFnSetGameDVRInterface = NULL;

	if ( ! pFnSetGameDVRInterface )
		pFnSetGameDVRInterface = (UFunction*) UObject::GObjObjects()->Data[ 7819 ];

	UOnlineSubsystem_eventSetGameDVRInterface_Parms SetGameDVRInterface_Parms;
	SetGameDVRInterface_Parms.InGameDVRInterface = InGameDVRInterface;

	this->ProcessEvent ( pFnSetGameDVRInterface, &SetGameDVRInterface_Parms, NULL );

	return SetGameDVRInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSharedCloudInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InCloudInterface               ( CPF_Parm )

bool UOnlineSubsystem::eventSetSharedCloudInterface ( class UObject* InCloudInterface )
{
	static UFunction* pFnSetSharedCloudInterface = NULL;

	if ( ! pFnSetSharedCloudInterface )
		pFnSetSharedCloudInterface = (UFunction*) UObject::GObjObjects()->Data[ 7824 ];

	UOnlineSubsystem_eventSetSharedCloudInterface_Parms SetSharedCloudInterface_Parms;
	SetSharedCloudInterface_Parms.InCloudInterface = InCloudInterface;

	this->ProcessEvent ( pFnSetSharedCloudInterface, &SetSharedCloudInterface_Parms, NULL );

	return SetSharedCloudInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetUserCloudInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InCloudInterface               ( CPF_Parm )

bool UOnlineSubsystem::eventSetUserCloudInterface ( class UObject* InCloudInterface )
{
	static UFunction* pFnSetUserCloudInterface = NULL;

	if ( ! pFnSetUserCloudInterface )
		pFnSetUserCloudInterface = (UFunction*) UObject::GObjObjects()->Data[ 7829 ];

	UOnlineSubsystem_eventSetUserCloudInterface_Parms SetUserCloudInterface_Parms;
	SetUserCloudInterface_Parms.InCloudInterface = InCloudInterface;

	this->ProcessEvent ( pFnSetUserCloudInterface, &SetUserCloudInterface_Parms, NULL );

	return SetUserCloudInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetAuthInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InAuthInterface                ( CPF_Parm )

bool UOnlineSubsystem::eventSetAuthInterface ( class UObject* InAuthInterface )
{
	static UFunction* pFnSetAuthInterface = NULL;

	if ( ! pFnSetAuthInterface )
		pFnSetAuthInterface = (UFunction*) UObject::GObjObjects()->Data[ 7834 ];

	UOnlineSubsystem_eventSetAuthInterface_Parms SetAuthInterface_Parms;
	SetAuthInterface_Parms.InAuthInterface = InAuthInterface;

	this->ProcessEvent ( pFnSetAuthInterface, &SetAuthInterface_Parms, NULL );

	return SetAuthInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSocialInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InSocialInterface              ( CPF_Parm )

bool UOnlineSubsystem::eventSetSocialInterface ( class UObject* InSocialInterface )
{
	static UFunction* pFnSetSocialInterface = NULL;

	if ( ! pFnSetSocialInterface )
		pFnSetSocialInterface = (UFunction*) UObject::GObjObjects()->Data[ 7839 ];

	UOnlineSubsystem_eventSetSocialInterface_Parms SetSocialInterface_Parms;
	SetSocialInterface_Parms.InSocialInterface = InSocialInterface;

	this->ProcessEvent ( pFnSetSocialInterface, &SetSocialInterface_Parms, NULL );

	return SetSocialInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetTitleFileCacheInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetTitleFileCacheInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetTitleFileCacheInterface = NULL;

	if ( ! pFnSetTitleFileCacheInterface )
		pFnSetTitleFileCacheInterface = (UFunction*) UObject::GObjObjects()->Data[ 7843 ];

	UOnlineSubsystem_eventSetTitleFileCacheInterface_Parms SetTitleFileCacheInterface_Parms;
	SetTitleFileCacheInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetTitleFileCacheInterface, &SetTitleFileCacheInterface_Parms, NULL );

	return SetTitleFileCacheInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetTitleFileInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetTitleFileInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetTitleFileInterface = NULL;

	if ( ! pFnSetTitleFileInterface )
		pFnSetTitleFileInterface = (UFunction*) UObject::GObjObjects()->Data[ 7848 ];

	UOnlineSubsystem_eventSetTitleFileInterface_Parms SetTitleFileInterface_Parms;
	SetTitleFileInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetTitleFileInterface, &SetTitleFileInterface_Parms, NULL );

	return SetTitleFileInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPartyChatInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPartyChatInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPartyChatInterface = NULL;

	if ( ! pFnSetPartyChatInterface )
		pFnSetPartyChatInterface = (UFunction*) UObject::GObjObjects()->Data[ 7853 ];

	UOnlineSubsystem_eventSetPartyChatInterface_Parms SetPartyChatInterface_Parms;
	SetPartyChatInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPartyChatInterface, &SetPartyChatInterface_Parms, NULL );

	return SetPartyChatInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetNewsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetNewsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetNewsInterface = NULL;

	if ( ! pFnSetNewsInterface )
		pFnSetNewsInterface = (UFunction*) UObject::GObjObjects()->Data[ 7858 ];

	UOnlineSubsystem_eventSetNewsInterface_Parms SetNewsInterface_Parms;
	SetNewsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetNewsInterface, &SetNewsInterface_Parms, NULL );

	return SetNewsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetStatsInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetStatsInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetStatsInterface = NULL;

	if ( ! pFnSetStatsInterface )
		pFnSetStatsInterface = (UFunction*) UObject::GObjObjects()->Data[ 7863 ];

	UOnlineSubsystem_eventSetStatsInterface_Parms SetStatsInterface_Parms;
	SetStatsInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetStatsInterface, &SetStatsInterface_Parms, NULL );

	return SetStatsInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetVoiceInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetVoiceInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetVoiceInterface = NULL;

	if ( ! pFnSetVoiceInterface )
		pFnSetVoiceInterface = (UFunction*) UObject::GObjObjects()->Data[ 7868 ];

	UOnlineSubsystem_eventSetVoiceInterface_Parms SetVoiceInterface_Parms;
	SetVoiceInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetVoiceInterface, &SetVoiceInterface_Parms, NULL );

	return SetVoiceInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetContentInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetContentInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetContentInterface = NULL;

	if ( ! pFnSetContentInterface )
		pFnSetContentInterface = (UFunction*) UObject::GObjObjects()->Data[ 7873 ];

	UOnlineSubsystem_eventSetContentInterface_Parms SetContentInterface_Parms;
	SetContentInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetContentInterface, &SetContentInterface_Parms, NULL );

	return SetContentInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetLobbyInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InInterface                    ( CPF_Parm )

bool UOnlineSubsystem::eventSetLobbyInterface ( class UObject* InInterface )
{
	static UFunction* pFnSetLobbyInterface = NULL;

	if ( ! pFnSetLobbyInterface )
		pFnSetLobbyInterface = (UFunction*) UObject::GObjObjects()->Data[ 7878 ];

	UOnlineSubsystem_eventSetLobbyInterface_Parms SetLobbyInterface_Parms;
	SetLobbyInterface_Parms.InInterface = InInterface;

	this->ProcessEvent ( pFnSetLobbyInterface, &SetLobbyInterface_Parms, NULL );

	return SetLobbyInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPurchaseInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPurchaseInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPurchaseInterface = NULL;

	if ( ! pFnSetPurchaseInterface )
		pFnSetPurchaseInterface = (UFunction*) UObject::GObjObjects()->Data[ 7883 ];

	UOnlineSubsystem_eventSetPurchaseInterface_Parms SetPurchaseInterface_Parms;
	SetPurchaseInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPurchaseInterface, &SetPurchaseInterface_Parms, NULL );

	return SetPurchaseInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetGameInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetGameInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetGameInterface = NULL;

	if ( ! pFnSetGameInterface )
		pFnSetGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 7888 ];

	UOnlineSubsystem_eventSetGameInterface_Parms SetGameInterface_Parms;
	SetGameInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetGameInterface, &SetGameInterface_Parms, NULL );

	return SetGameInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetSystemInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetSystemInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetSystemInterface = NULL;

	if ( ! pFnSetSystemInterface )
		pFnSetSystemInterface = (UFunction*) UObject::GObjObjects()->Data[ 7893 ];

	UOnlineSubsystem_eventSetSystemInterface_Parms SetSystemInterface_Parms;
	SetSystemInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetSystemInterface, &SetSystemInterface_Parms, NULL );

	return SetSystemInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetMarketplaceInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetMarketplaceInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetMarketplaceInterface = NULL;

	if ( ! pFnSetMarketplaceInterface )
		pFnSetMarketplaceInterface = (UFunction*) UObject::GObjObjects()->Data[ 7897 ];

	UOnlineSubsystem_eventSetMarketplaceInterface_Parms SetMarketplaceInterface_Parms;
	SetMarketplaceInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetMarketplaceInterface, &SetMarketplaceInterface_Parms, NULL );

	return SetMarketplaceInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterfaceEx ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterfaceEx = NULL;

	if ( ! pFnSetPlayerInterfaceEx )
		pFnSetPlayerInterfaceEx = (UFunction*) UObject::GObjObjects()->Data[ 7902 ];

	UOnlineSubsystem_eventSetPlayerInterfaceEx_Parms SetPlayerInterfaceEx_Parms;
	SetPlayerInterfaceEx_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterfaceEx, &SetPlayerInterfaceEx_Parms, NULL );

	return SetPlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetPlayerInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetPlayerInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetPlayerInterface = NULL;

	if ( ! pFnSetPlayerInterface )
		pFnSetPlayerInterface = (UFunction*) UObject::GObjObjects()->Data[ 7907 ];

	UOnlineSubsystem_eventSetPlayerInterface_Parms SetPlayerInterface_Parms;
	SetPlayerInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetPlayerInterface, &SetPlayerInterface_Parms, NULL );

	return SetPlayerInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.SetAccountInterface
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 NewInterface                   ( CPF_Parm )

bool UOnlineSubsystem::eventSetAccountInterface ( class UObject* NewInterface )
{
	static UFunction* pFnSetAccountInterface = NULL;

	if ( ! pFnSetAccountInterface )
		pFnSetAccountInterface = (UFunction*) UObject::GObjObjects()->Data[ 7912 ];

	UOnlineSubsystem_eventSetAccountInterface_Parms SetAccountInterface_Parms;
	SetAccountInterface_Parms.NewInterface = NewInterface;

	this->ProcessEvent ( pFnSetAccountInterface, &SetAccountInterface_Parms, NULL );

	return SetAccountInterface_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Exit
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineSubsystem::eventExit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 7915 ];

	UOnlineSubsystem_eventExit_Parms Exit_Parms;

	pFnExit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );

	pFnExit->FunctionFlags |= 0x400;
};

// Function Engine.OnlineSubsystem.PostInit
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventPostInit ( )
{
	static UFunction* pFnPostInit = NULL;

	if ( ! pFnPostInit )
		pFnPostInit = (UFunction*) UObject::GObjObjects()->Data[ 7920 ];

	UOnlineSubsystem_eventPostInit_Parms PostInit_Parms;

	this->ProcessEvent ( pFnPostInit, &PostInit_Parms, NULL );

	return PostInit_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSubsystem::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 7921 ];

	UOnlineSubsystem_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;

	return Init_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.EncodeBase64
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

TArray< unsigned char > UOnlineSubsystem::EncodeBase64 ( struct FString Text )
{
	static UFunction* pFnEncodeBase64 = NULL;

	if ( ! pFnEncodeBase64 )
		pFnEncodeBase64 = (UFunction*) UObject::GObjObjects()->Data[ 7926 ];

	UOnlineSubsystem_execEncodeBase64_Parms EncodeBase64_Parms;
	memcpy ( &EncodeBase64_Parms.Text, &Text, 0xC );

	pFnEncodeBase64->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEncodeBase64, &EncodeBase64_Parms, NULL );

	pFnEncodeBase64->FunctionFlags |= 0x400;

	return EncodeBase64_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.DecodeBase64
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_Parm | CPF_NeedCtorLink )

TArray< unsigned char > UOnlineSubsystem::DecodeBase64 ( struct FString Text )
{
	static UFunction* pFnDecodeBase64 = NULL;

	if ( ! pFnDecodeBase64 )
		pFnDecodeBase64 = (UFunction*) UObject::GObjObjects()->Data[ 7928 ];

	UOnlineSubsystem_execDecodeBase64_Parms DecodeBase64_Parms;
	memcpy ( &DecodeBase64_Parms.Text, &Text, 0xC );

	pFnDecodeBase64->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecodeBase64, &DecodeBase64_Parms, NULL );

	pFnDecodeBase64->FunctionFlags |= 0x400;

	return DecodeBase64_Parms.ReturnValue;
};

// Function Engine.OnlineSubsystem.GetFeaturePrivilegeLevel
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  Privilege                      ( CPF_Parm )
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSubsystem::GetFeaturePrivilegeLevel ( unsigned char LocalUserNum, unsigned char Privilege, struct FScriptDelegate Callback )
{
	static UFunction* pFnGetFeaturePrivilegeLevel = NULL;

	if ( ! pFnGetFeaturePrivilegeLevel )
		pFnGetFeaturePrivilegeLevel = (UFunction*) UObject::GObjObjects()->Data[ 7932 ];

	UOnlineSubsystem_execGetFeaturePrivilegeLevel_Parms GetFeaturePrivilegeLevel_Parms;
	GetFeaturePrivilegeLevel_Parms.LocalUserNum = LocalUserNum;
	GetFeaturePrivilegeLevel_Parms.Privilege = Privilege;
	memcpy ( &GetFeaturePrivilegeLevel_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnGetFeaturePrivilegeLevel, &GetFeaturePrivilegeLevel_Parms, NULL );
};

// Function Engine.OnlineSubsystem.FeaturePrivilegeLevelUpdated
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  Privilege                      ( CPF_Parm )
// unsigned char                  Level                          ( CPF_Parm )

void UOnlineSubsystem::FeaturePrivilegeLevelUpdated ( unsigned char LocalUserNum, unsigned char Privilege, unsigned char Level )
{
	static UFunction* pFnFeaturePrivilegeLevelUpdated = NULL;

	if ( ! pFnFeaturePrivilegeLevelUpdated )
		pFnFeaturePrivilegeLevelUpdated = (UFunction*) UObject::GObjObjects()->Data[ 7936 ];

	UOnlineSubsystem_execFeaturePrivilegeLevelUpdated_Parms FeaturePrivilegeLevelUpdated_Parms;
	FeaturePrivilegeLevelUpdated_Parms.LocalUserNum = LocalUserNum;
	FeaturePrivilegeLevelUpdated_Parms.Privilege = Privilege;
	FeaturePrivilegeLevelUpdated_Parms.Level = Level;

	this->ProcessEvent ( pFnFeaturePrivilegeLevelUpdated, &FeaturePrivilegeLevelUpdated_Parms, NULL );
};

// Function Engine.PlatformInterfaceBase.ClearDelegate
// [0x00020002] 
// Parameters infos:
// int                            DelegateType                   ( CPF_Parm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UPlatformInterfaceBase::ClearDelegate ( int DelegateType, struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearDelegate = NULL;

	if ( ! pFnClearDelegate )
		pFnClearDelegate = (UFunction*) UObject::GObjObjects()->Data[ 14020 ];

	UPlatformInterfaceBase_execClearDelegate_Parms ClearDelegate_Parms;
	ClearDelegate_Parms.DelegateType = DelegateType;
	memcpy ( &ClearDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDelegate, &ClearDelegate_Parms, NULL );
};

// Function Engine.PlatformInterfaceBase.AddDelegate
// [0x00020002] 
// Parameters infos:
// int                            DelegateType                   ( CPF_Parm )
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UPlatformInterfaceBase::AddDelegate ( int DelegateType, struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddDelegate = NULL;

	if ( ! pFnAddDelegate )
		pFnAddDelegate = (UFunction*) UObject::GObjObjects()->Data[ 14017 ];

	UPlatformInterfaceBase_execAddDelegate_Parms AddDelegate_Parms;
	AddDelegate_Parms.DelegateType = DelegateType;
	memcpy ( &AddDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDelegate, &AddDelegate_Parms, NULL );
};

// Function Engine.PlatformInterfaceBase.GetInAppMessageInterface
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UInAppMessageBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UInAppMessageBase* UPlatformInterfaceBase::GetInAppMessageInterface ( )
{
	static UFunction* pFnGetInAppMessageInterface = NULL;

	if ( ! pFnGetInAppMessageInterface )
		pFnGetInAppMessageInterface = (UFunction*) UObject::GObjObjects()->Data[ 14015 ];

	UPlatformInterfaceBase_execGetInAppMessageInterface_Parms GetInAppMessageInterface_Parms;

	pFnGetInAppMessageInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInAppMessageInterface, &GetInAppMessageInterface_Parms, NULL );

	pFnGetInAppMessageInterface->FunctionFlags |= 0x400;

	return GetInAppMessageInterface_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetAppNotificationsInterface
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UAppNotificationsBase*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAppNotificationsBase* UPlatformInterfaceBase::GetAppNotificationsInterface ( )
{
	static UFunction* pFnGetAppNotificationsInterface = NULL;

	if ( ! pFnGetAppNotificationsInterface )
		pFnGetAppNotificationsInterface = (UFunction*) UObject::GObjObjects()->Data[ 14013 ];

	UPlatformInterfaceBase_execGetAppNotificationsInterface_Parms GetAppNotificationsInterface_Parms;

	pFnGetAppNotificationsInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppNotificationsInterface, &GetAppNotificationsInterface_Parms, NULL );

	pFnGetAppNotificationsInterface->FunctionFlags |= 0x400;

	return GetAppNotificationsInterface_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetTwitterIntegration
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UTwitterIntegrationBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTwitterIntegrationBase* UPlatformInterfaceBase::GetTwitterIntegration ( )
{
	static UFunction* pFnGetTwitterIntegration = NULL;

	if ( ! pFnGetTwitterIntegration )
		pFnGetTwitterIntegration = (UFunction*) UObject::GObjObjects()->Data[ 14011 ];

	UPlatformInterfaceBase_execGetTwitterIntegration_Parms GetTwitterIntegration_Parms;

	pFnGetTwitterIntegration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTwitterIntegration, &GetTwitterIntegration_Parms, NULL );

	pFnGetTwitterIntegration->FunctionFlags |= 0x400;

	return GetTwitterIntegration_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetAnalyticEventsInterface
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UAnalyticEventsBase*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnalyticEventsBase* UPlatformInterfaceBase::GetAnalyticEventsInterface ( )
{
	static UFunction* pFnGetAnalyticEventsInterface = NULL;

	if ( ! pFnGetAnalyticEventsInterface )
		pFnGetAnalyticEventsInterface = (UFunction*) UObject::GObjObjects()->Data[ 14009 ];

	UPlatformInterfaceBase_execGetAnalyticEventsInterface_Parms GetAnalyticEventsInterface_Parms;

	pFnGetAnalyticEventsInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnalyticEventsInterface, &GetAnalyticEventsInterface_Parms, NULL );

	pFnGetAnalyticEventsInterface->FunctionFlags |= 0x400;

	return GetAnalyticEventsInterface_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetMicroTransactionInterface
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UMicroTransactionBase*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMicroTransactionBase* UPlatformInterfaceBase::GetMicroTransactionInterface ( )
{
	static UFunction* pFnGetMicroTransactionInterface = NULL;

	if ( ! pFnGetMicroTransactionInterface )
		pFnGetMicroTransactionInterface = (UFunction*) UObject::GObjObjects()->Data[ 14007 ];

	UPlatformInterfaceBase_execGetMicroTransactionInterface_Parms GetMicroTransactionInterface_Parms;

	pFnGetMicroTransactionInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMicroTransactionInterface, &GetMicroTransactionInterface_Parms, NULL );

	pFnGetMicroTransactionInterface->FunctionFlags |= 0x400;

	return GetMicroTransactionInterface_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetInGameAdManager
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UInGameAdManager*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UInGameAdManager* UPlatformInterfaceBase::GetInGameAdManager ( )
{
	static UFunction* pFnGetInGameAdManager = NULL;

	if ( ! pFnGetInGameAdManager )
		pFnGetInGameAdManager = (UFunction*) UObject::GObjObjects()->Data[ 14005 ];

	UPlatformInterfaceBase_execGetInGameAdManager_Parms GetInGameAdManager_Parms;

	pFnGetInGameAdManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInGameAdManager, &GetInGameAdManager_Parms, NULL );

	pFnGetInGameAdManager->FunctionFlags |= 0x400;

	return GetInGameAdManager_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetFacebookIntegration
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UFacebookIntegration*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFacebookIntegration* UPlatformInterfaceBase::GetFacebookIntegration ( )
{
	static UFunction* pFnGetFacebookIntegration = NULL;

	if ( ! pFnGetFacebookIntegration )
		pFnGetFacebookIntegration = (UFunction*) UObject::GObjObjects()->Data[ 14003 ];

	UPlatformInterfaceBase_execGetFacebookIntegration_Parms GetFacebookIntegration_Parms;

	pFnGetFacebookIntegration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFacebookIntegration, &GetFacebookIntegration_Parms, NULL );

	pFnGetFacebookIntegration->FunctionFlags |= 0x400;

	return GetFacebookIntegration_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetLocalStorageInterface
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UCloudStorageBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UCloudStorageBase* UPlatformInterfaceBase::GetLocalStorageInterface ( )
{
	static UFunction* pFnGetLocalStorageInterface = NULL;

	if ( ! pFnGetLocalStorageInterface )
		pFnGetLocalStorageInterface = (UFunction*) UObject::GObjObjects()->Data[ 14001 ];

	UPlatformInterfaceBase_execGetLocalStorageInterface_Parms GetLocalStorageInterface_Parms;

	pFnGetLocalStorageInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalStorageInterface, &GetLocalStorageInterface_Parms, NULL );

	pFnGetLocalStorageInterface->FunctionFlags |= 0x400;

	return GetLocalStorageInterface_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.GetCloudStorageInterface
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UCloudStorageBase*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UCloudStorageBase* UPlatformInterfaceBase::GetCloudStorageInterface ( )
{
	static UFunction* pFnGetCloudStorageInterface = NULL;

	if ( ! pFnGetCloudStorageInterface )
		pFnGetCloudStorageInterface = (UFunction*) UObject::GObjObjects()->Data[ 13999 ];

	UPlatformInterfaceBase_execGetCloudStorageInterface_Parms GetCloudStorageInterface_Parms;

	pFnGetCloudStorageInterface->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCloudStorageInterface, &GetCloudStorageInterface_Parms, NULL );

	pFnGetCloudStorageInterface->FunctionFlags |= 0x400;

	return GetCloudStorageInterface_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceBase.CallDelegates
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            DelegateType                   ( CPF_Parm )
// struct FPlatformInterfaceDelegateResult DelegateResult                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UPlatformInterfaceBase::CallDelegates ( int DelegateType, struct FPlatformInterfaceDelegateResult* DelegateResult )
{
	static UFunction* pFnCallDelegates = NULL;

	if ( ! pFnCallDelegates )
		pFnCallDelegates = (UFunction*) UObject::GObjObjects()->Data[ 13996 ];

	UPlatformInterfaceBase_execCallDelegates_Parms CallDelegates_Parms;
	CallDelegates_Parms.DelegateType = DelegateType;

	pFnCallDelegates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallDelegates, &CallDelegates_Parms, NULL );

	pFnCallDelegates->FunctionFlags |= 0x400;

	if ( DelegateResult )
		memcpy ( DelegateResult, &CallDelegates_Parms.DelegateResult, 0x34 );
};

// Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate
// [0x00520000] 
// Parameters infos:
// struct FPlatformInterfaceDelegateResult Result                         ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UPlatformInterfaceBase::PlatformInterfaceDelegate ( struct FPlatformInterfaceDelegateResult* Result )
{
	static UFunction* pFnPlatformInterfaceDelegate = NULL;

	if ( ! pFnPlatformInterfaceDelegate )
		pFnPlatformInterfaceDelegate = (UFunction*) UObject::GObjObjects()->Data[ 13993 ];

	UPlatformInterfaceBase_execPlatformInterfaceDelegate_Parms PlatformInterfaceDelegate_Parms;

	this->ProcessEvent ( pFnPlatformInterfaceDelegate, &PlatformInterfaceDelegate_Parms, NULL );

	if ( Result )
		memcpy ( Result, &PlatformInterfaceDelegate_Parms.Result, 0x34 );
};

// Function Engine.MicroTransactionBase.GetProductIndex
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Identifier                     ( CPF_Parm | CPF_NeedCtorLink )

int UMicroTransactionBase::eventGetProductIndex ( struct FString Identifier )
{
	static UFunction* pFnGetProductIndex = NULL;

	if ( ! pFnGetProductIndex )
		pFnGetProductIndex = (UFunction*) UObject::GObjObjects()->Data[ 26062 ];

	UMicroTransactionBase_eventGetProductIndex_Parms GetProductIndex_Parms;
	memcpy ( &GetProductIndex_Parms.Identifier, &Identifier, 0xC );

	pFnGetProductIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProductIndex, &GetProductIndex_Parms, NULL );

	pFnGetProductIndex->FunctionFlags |= 0x400;

	return GetProductIndex_Parms.ReturnValue;
};

// Function Engine.MicroTransactionBase.BeginPurchase
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

bool UMicroTransactionBase::eventBeginPurchase ( int Index )
{
	static UFunction* pFnBeginPurchase = NULL;

	if ( ! pFnBeginPurchase )
		pFnBeginPurchase = (UFunction*) UObject::GObjObjects()->Data[ 26059 ];

	UMicroTransactionBase_eventBeginPurchase_Parms BeginPurchase_Parms;
	BeginPurchase_Parms.Index = Index;

	pFnBeginPurchase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginPurchase, &BeginPurchase_Parms, NULL );

	pFnBeginPurchase->FunctionFlags |= 0x400;

	return BeginPurchase_Parms.ReturnValue;
};

// Function Engine.MicroTransactionBase.IsAllowedToMakePurchases
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMicroTransactionBase::eventIsAllowedToMakePurchases ( )
{
	static UFunction* pFnIsAllowedToMakePurchases = NULL;

	if ( ! pFnIsAllowedToMakePurchases )
		pFnIsAllowedToMakePurchases = (UFunction*) UObject::GObjObjects()->Data[ 26057 ];

	UMicroTransactionBase_eventIsAllowedToMakePurchases_Parms IsAllowedToMakePurchases_Parms;

	pFnIsAllowedToMakePurchases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAllowedToMakePurchases, &IsAllowedToMakePurchases_Parms, NULL );

	pFnIsAllowedToMakePurchases->FunctionFlags |= 0x400;

	return IsAllowedToMakePurchases_Parms.ReturnValue;
};

// Function Engine.MicroTransactionBase.QueryForAvailablePurchases
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMicroTransactionBase::eventQueryForAvailablePurchases ( )
{
	static UFunction* pFnQueryForAvailablePurchases = NULL;

	if ( ! pFnQueryForAvailablePurchases )
		pFnQueryForAvailablePurchases = (UFunction*) UObject::GObjObjects()->Data[ 26055 ];

	UMicroTransactionBase_eventQueryForAvailablePurchases_Parms QueryForAvailablePurchases_Parms;

	pFnQueryForAvailablePurchases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueryForAvailablePurchases, &QueryForAvailablePurchases_Parms, NULL );

	pFnQueryForAvailablePurchases->FunctionFlags |= 0x400;

	return QueryForAvailablePurchases_Parms.ReturnValue;
};

// Function Engine.MicroTransactionBase.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UMicroTransactionBase::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 26054 ];

	UMicroTransactionBase_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.Player.SwitchController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void UPlayer::SwitchController ( class APlayerController* PC )
{
	static UFunction* pFnSwitchController = NULL;

	if ( ! pFnSwitchController )
		pFnSwitchController = (UFunction*) UObject::GObjObjects()->Data[ 24817 ];

	UPlayer_execSwitchController_Parms SwitchController_Parms;
	SwitchController_Parms.PC = PC;

	pFnSwitchController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchController, &SwitchController_Parms, NULL );

	pFnSwitchController->FunctionFlags |= 0x400;
};

// Function Engine.Player.EventReceivedController
// [0x00120000] 
// Parameters infos:
// class UPlayer*                 PlayerRef                      ( CPF_Parm )

void UPlayer::EventReceivedController ( class UPlayer* PlayerRef )
{
	static UFunction* pFnEventReceivedController = NULL;

	if ( ! pFnEventReceivedController )
		pFnEventReceivedController = (UFunction*) UObject::GObjObjects()->Data[ 24808 ];

	UPlayer_execEventReceivedController_Parms EventReceivedController_Parms;
	EventReceivedController_Parms.PlayerRef = PlayerRef;

	this->ProcessEvent ( pFnEventReceivedController, &EventReceivedController_Parms, NULL );
};

// Function Engine.LocalPlayer.Cleanup
// [0x00024002] 
// Parameters infos:
// unsigned long                  bExit                          ( CPF_OptionalParm | CPF_Parm )

void ULocalPlayer::Cleanup ( unsigned long bExit )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 24959 ];

	ULocalPlayer_execCleanup_Parms Cleanup_Parms;
	Cleanup_Parms.bExit = bExit;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function Engine.LocalPlayer.Exit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ULocalPlayer::eventExit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 24958 ];

	ULocalPlayer_eventExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.LocalPlayer.NotifyServerConnectionClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ULocalPlayer::eventNotifyServerConnectionClose ( )
{
	static UFunction* pFnNotifyServerConnectionClose = NULL;

	if ( ! pFnNotifyServerConnectionClose )
		pFnNotifyServerConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 24957 ];

	ULocalPlayer_eventNotifyServerConnectionClose_Parms NotifyServerConnectionClose_Parms;

	this->ProcessEvent ( pFnNotifyServerConnectionClose, &NotifyServerConnectionClose_Parms, NULL );
};

// Function Engine.LocalPlayer.ViewportClosed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ULocalPlayer::eventViewportClosed ( )
{
	static UFunction* pFnViewportClosed = NULL;

	if ( ! pFnViewportClosed )
		pFnViewportClosed = (UFunction*) UObject::GObjObjects()->Data[ 24956 ];

	ULocalPlayer_eventViewportClosed_Parms ViewportClosed_Parms;

	this->ProcessEvent ( pFnViewportClosed, &ViewportClosed_Parms, NULL );
};

// Function Engine.LocalPlayer.StaticOnServerConnectionClose
// [0x00822003] ( FUNC_Final )
// Parameters infos:
// class UPlayer*                 ServerConnection               ( CPF_Parm )

void ULocalPlayer::StaticOnServerConnectionClose ( class UPlayer* ServerConnection )
{
	static UFunction* pFnStaticOnServerConnectionClose = NULL;

	if ( ! pFnStaticOnServerConnectionClose )
		pFnStaticOnServerConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 24951 ];

	ULocalPlayer_execStaticOnServerConnectionClose_Parms StaticOnServerConnectionClose_Parms;
	StaticOnServerConnectionClose_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnStaticOnServerConnectionClose, &StaticOnServerConnectionClose_Parms, NULL );
};

// Function Engine.LocalPlayer.OnServerConnectionClose
// [0x00020002] 
// Parameters infos:
// class UPlayer*                 ServerConnection               ( CPF_Parm )

void ULocalPlayer::OnServerConnectionClose ( class UPlayer* ServerConnection )
{
	static UFunction* pFnOnServerConnectionClose = NULL;

	if ( ! pFnOnServerConnectionClose )
		pFnOnServerConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 24949 ];

	ULocalPlayer_execOnServerConnectionClose_Parms OnServerConnectionClose_Parms;
	OnServerConnectionClose_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnOnServerConnectionClose, &OnServerConnectionClose_Parms, NULL );
};

// Function Engine.LocalPlayer.ServerAuthFailure
// [0x00020002] 
// Parameters infos:

void ULocalPlayer::ServerAuthFailure ( )
{
	static UFunction* pFnServerAuthFailure = NULL;

	if ( ! pFnServerAuthFailure )
		pFnServerAuthFailure = (UFunction*) UObject::GObjObjects()->Data[ 24948 ];

	ULocalPlayer_execServerAuthFailure_Parms ServerAuthFailure_Parms;

	this->ProcessEvent ( pFnServerAuthFailure, &ServerAuthFailure_Parms, NULL );
};

// Function Engine.LocalPlayer.ServerAuthTimedOut
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ULocalPlayer::eventServerAuthTimedOut ( )
{
	static UFunction* pFnServerAuthTimedOut = NULL;

	if ( ! pFnServerAuthTimedOut )
		pFnServerAuthTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 24943 ];

	ULocalPlayer_eventServerAuthTimedOut_Parms ServerAuthTimedOut_Parms;

	this->ProcessEvent ( pFnServerAuthTimedOut, &ServerAuthTimedOut_Parms, NULL );
};

// Function Engine.LocalPlayer.OnServerAuthComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// class UPlayer*                 ServerConnection               ( CPF_Parm )
// struct FString                 ExtraInfo                      ( CPF_Parm | CPF_NeedCtorLink )

void ULocalPlayer::OnServerAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo )
{
	static UFunction* pFnOnServerAuthComplete = NULL;

	if ( ! pFnOnServerAuthComplete )
		pFnOnServerAuthComplete = (UFunction*) UObject::GObjObjects()->Data[ 24938 ];

	ULocalPlayer_execOnServerAuthComplete_Parms OnServerAuthComplete_Parms;
	OnServerAuthComplete_Parms.bSuccess = bSuccess;
	memcpy ( &OnServerAuthComplete_Parms.ServerUID, &ServerUID, 0x48 );
	OnServerAuthComplete_Parms.ServerConnection = ServerConnection;
	memcpy ( &OnServerAuthComplete_Parms.ExtraInfo, &ExtraInfo, 0xC );

	this->ProcessEvent ( pFnOnServerAuthComplete, &OnServerAuthComplete_Parms, NULL );
};

// Function Engine.LocalPlayer.ProcessServerAuthResponse
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

void ULocalPlayer::ProcessServerAuthResponse ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int AuthTicketUID )
{
	static UFunction* pFnProcessServerAuthResponse = NULL;

	if ( ! pFnProcessServerAuthResponse )
		pFnProcessServerAuthResponse = (UFunction*) UObject::GObjObjects()->Data[ 24931 ];

	ULocalPlayer_execProcessServerAuthResponse_Parms ProcessServerAuthResponse_Parms;
	memcpy ( &ProcessServerAuthResponse_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &ProcessServerAuthResponse_Parms.ServerIP, &ServerIP, 0x14 );
	ProcessServerAuthResponse_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnProcessServerAuthResponse, &ProcessServerAuthResponse_Parms, NULL );
};

// Function Engine.LocalPlayer.ProcessClientAuthEndSessionRequest
// [0x00820002] 
// Parameters infos:
// class UPlayer*                 ServerConnection               ( CPF_Parm )

void ULocalPlayer::ProcessClientAuthEndSessionRequest ( class UPlayer* ServerConnection )
{
	static UFunction* pFnProcessClientAuthEndSessionRequest = NULL;

	if ( ! pFnProcessClientAuthEndSessionRequest )
		pFnProcessClientAuthEndSessionRequest = (UFunction*) UObject::GObjObjects()->Data[ 24923 ];

	ULocalPlayer_execProcessClientAuthEndSessionRequest_Parms ProcessClientAuthEndSessionRequest_Parms;
	ProcessClientAuthEndSessionRequest_Parms.ServerConnection = ServerConnection;

	this->ProcessEvent ( pFnProcessClientAuthEndSessionRequest, &ProcessClientAuthEndSessionRequest_Parms, NULL );
};

// Function Engine.LocalPlayer.ProcessClientAuthRequest
// [0x00820002] 
// Parameters infos:
// struct FUniqueNetId            ServerUID                      ( CPF_Parm )
// struct FIpAddr                 ServerIP                       ( CPF_Parm )
// int                            ServerPort                     ( CPF_Parm )
// unsigned long                  bSecure                        ( CPF_Parm )

void ULocalPlayer::ProcessClientAuthRequest ( struct FUniqueNetId ServerUID, struct FIpAddr ServerIP, int ServerPort, unsigned long bSecure )
{
	static UFunction* pFnProcessClientAuthRequest = NULL;

	if ( ! pFnProcessClientAuthRequest )
		pFnProcessClientAuthRequest = (UFunction*) UObject::GObjObjects()->Data[ 24914 ];

	ULocalPlayer_execProcessClientAuthRequest_Parms ProcessClientAuthRequest_Parms;
	memcpy ( &ProcessClientAuthRequest_Parms.ServerUID, &ServerUID, 0x48 );
	memcpy ( &ProcessClientAuthRequest_Parms.ServerIP, &ServerIP, 0x14 );
	ProcessClientAuthRequest_Parms.ServerPort = ServerPort;
	ProcessClientAuthRequest_Parms.bSecure = bSecure;

	this->ProcessEvent ( pFnProcessClientAuthRequest, &ProcessClientAuthRequest_Parms, NULL );
};

// Function Engine.LocalPlayer.NotifyServerConnectionOpen
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ULocalPlayer::eventNotifyServerConnectionOpen ( )
{
	static UFunction* pFnNotifyServerConnectionOpen = NULL;

	if ( ! pFnNotifyServerConnectionOpen )
		pFnNotifyServerConnectionOpen = (UFunction*) UObject::GObjObjects()->Data[ 24912 ];

	ULocalPlayer_eventNotifyServerConnectionOpen_Parms NotifyServerConnectionOpen_Parms;

	this->ProcessEvent ( pFnNotifyServerConnectionOpen, &NotifyServerConnectionOpen_Parms, NULL );
};

// Function Engine.LocalPlayer.GetNickname
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ULocalPlayer::eventGetNickname ( )
{
	static UFunction* pFnGetNickname = NULL;

	if ( ! pFnGetNickname )
		pFnGetNickname = (UFunction*) UObject::GObjObjects()->Data[ 24909 ];

	ULocalPlayer_eventGetNickname_Parms GetNickname_Parms;

	this->ProcessEvent ( pFnGetNickname, &GetNickname_Parms, NULL );

	return GetNickname_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.GetUniqueNetId
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FUniqueNetId            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FUniqueNetId ULocalPlayer::eventGetUniqueNetId ( )
{
	static UFunction* pFnGetUniqueNetId = NULL;

	if ( ! pFnGetUniqueNetId )
		pFnGetUniqueNetId = (UFunction*) UObject::GObjObjects()->Data[ 24905 ];

	ULocalPlayer_eventGetUniqueNetId_Parms GetUniqueNetId_Parms;

	this->ProcessEvent ( pFnGetUniqueNetId, &GetUniqueNetId_Parms, NULL );

	return GetUniqueNetId_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.FastProject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WorldLoc                       ( CPF_Parm )

struct FVector2D ULocalPlayer::FastProject ( struct FVector WorldLoc )
{
	static UFunction* pFnFastProject = NULL;

	if ( ! pFnFastProject )
		pFnFastProject = (UFunction*) UObject::GObjObjects()->Data[ 24902 ];

	ULocalPlayer_execFastProject_Parms FastProject_Parms;
	memcpy ( &FastProject_Parms.WorldLoc, &WorldLoc, 0xC );

	pFnFastProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastProject, &FastProject_Parms, NULL );

	pFnFastProject->FunctionFlags |= 0x400;

	return FastProject_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.FastDeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               RelativeScreenPos              ( CPF_Parm )
// struct FVector                 WorldOrigin                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 WorldDirection                 ( CPF_Parm | CPF_OutParm )

void ULocalPlayer::FastDeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection )
{
	static UFunction* pFnFastDeProject = NULL;

	if ( ! pFnFastDeProject )
		pFnFastDeProject = (UFunction*) UObject::GObjObjects()->Data[ 24898 ];

	ULocalPlayer_execFastDeProject_Parms FastDeProject_Parms;
	memcpy ( &FastDeProject_Parms.RelativeScreenPos, &RelativeScreenPos, 0x8 );

	pFnFastDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastDeProject, &FastDeProject_Parms, NULL );

	pFnFastDeProject->FunctionFlags |= 0x400;

	if ( WorldOrigin )
		memcpy ( WorldOrigin, &FastDeProject_Parms.WorldOrigin, 0xC );

	if ( WorldDirection )
		memcpy ( WorldDirection, &FastDeProject_Parms.WorldDirection, 0xC );
};

// Function Engine.LocalPlayer.Project
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WorldLoc                       ( CPF_Parm )

struct FVector2D ULocalPlayer::Project ( struct FVector WorldLoc )
{
	static UFunction* pFnProject = NULL;

	if ( ! pFnProject )
		pFnProject = (UFunction*) UObject::GObjObjects()->Data[ 24895 ];

	ULocalPlayer_execProject_Parms Project_Parms;
	memcpy ( &Project_Parms.WorldLoc, &WorldLoc, 0xC );

	pFnProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProject, &Project_Parms, NULL );

	pFnProject->FunctionFlags |= 0x400;

	return Project_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.DeProject
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               RelativeScreenPos              ( CPF_Parm )
// struct FVector                 WorldOrigin                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 WorldDirection                 ( CPF_Parm | CPF_OutParm )

void ULocalPlayer::DeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection )
{
	static UFunction* pFnDeProject = NULL;

	if ( ! pFnDeProject )
		pFnDeProject = (UFunction*) UObject::GObjObjects()->Data[ 24891 ];

	ULocalPlayer_execDeProject_Parms DeProject_Parms;
	memcpy ( &DeProject_Parms.RelativeScreenPos, &RelativeScreenPos, 0x8 );

	pFnDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeProject, &DeProject_Parms, NULL );

	pFnDeProject->FunctionFlags |= 0x400;

	if ( WorldOrigin )
		memcpy ( WorldOrigin, &DeProject_Parms.WorldOrigin, 0xC );

	if ( WorldDirection )
		memcpy ( WorldDirection, &DeProject_Parms.WorldDirection, 0xC );
};

// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ULocalPlayer::TouchPlayerPostProcessChain ( )
{
	static UFunction* pFnTouchPlayerPostProcessChain = NULL;

	if ( ! pFnTouchPlayerPostProcessChain )
		pFnTouchPlayerPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 24890 ];

	ULocalPlayer_execTouchPlayerPostProcessChain_Parms TouchPlayerPostProcessChain_Parms;

	pFnTouchPlayerPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouchPlayerPostProcessChain, &TouchPlayerPostProcessChain_Parms, NULL );

	pFnTouchPlayerPostProcessChain->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetPostProcessChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPostProcessChain*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

class UPostProcessChain* ULocalPlayer::GetPostProcessChain ( int InIndex )
{
	static UFunction* pFnGetPostProcessChain = NULL;

	if ( ! pFnGetPostProcessChain )
		pFnGetPostProcessChain = (UFunction*) UObject::GObjObjects()->Data[ 24887 ];

	ULocalPlayer_execGetPostProcessChain_Parms GetPostProcessChain_Parms;
	GetPostProcessChain_Parms.InIndex = InIndex;

	pFnGetPostProcessChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPostProcessChain, &GetPostProcessChain_Parms, NULL );

	pFnGetPostProcessChain->FunctionFlags |= 0x400;

	return GetPostProcessChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ULocalPlayer::RemoveAllPostProcessingChains ( )
{
	static UFunction* pFnRemoveAllPostProcessingChains = NULL;

	if ( ! pFnRemoveAllPostProcessingChains )
		pFnRemoveAllPostProcessingChains = (UFunction*) UObject::GObjObjects()->Data[ 21381 ];

	ULocalPlayer_execRemoveAllPostProcessingChains_Parms RemoveAllPostProcessingChains_Parms;

	pFnRemoveAllPostProcessingChains->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllPostProcessingChains, &RemoveAllPostProcessingChains_Parms, NULL );

	pFnRemoveAllPostProcessingChains->FunctionFlags |= 0x400;

	return RemoveAllPostProcessingChains_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.RemovePostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

bool ULocalPlayer::RemovePostProcessingChain ( int InIndex )
{
	static UFunction* pFnRemovePostProcessingChain = NULL;

	if ( ! pFnRemovePostProcessingChain )
		pFnRemovePostProcessingChain = (UFunction*) UObject::GObjObjects()->Data[ 24884 ];

	ULocalPlayer_execRemovePostProcessingChain_Parms RemovePostProcessingChain_Parms;
	RemovePostProcessingChain_Parms.InIndex = InIndex;

	pFnRemovePostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePostProcessingChain, &RemovePostProcessingChain_Parms, NULL );

	pFnRemovePostProcessingChain->FunctionFlags |= 0x400;

	return RemovePostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.InsertPostProcessingChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPostProcessChain*       InChain                        ( CPF_Parm )
// int                            InIndex                        ( CPF_Parm )
// unsigned long                  bInClone                       ( CPF_Parm )

bool ULocalPlayer::InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone )
{
	static UFunction* pFnInsertPostProcessingChain = NULL;

	if ( ! pFnInsertPostProcessingChain )
		pFnInsertPostProcessingChain = (UFunction*) UObject::GObjObjects()->Data[ 21383 ];

	ULocalPlayer_execInsertPostProcessingChain_Parms InsertPostProcessingChain_Parms;
	InsertPostProcessingChain_Parms.InChain = InChain;
	InsertPostProcessingChain_Parms.InIndex = InIndex;
	InsertPostProcessingChain_Parms.bInClone = bInClone;

	pFnInsertPostProcessingChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertPostProcessingChain, &InsertPostProcessingChain_Parms, NULL );

	pFnInsertPostProcessingChain->FunctionFlags |= 0x400;

	return InsertPostProcessingChain_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.GetTranslationContext
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTranslationContext*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UTranslationContext* ULocalPlayer::GetTranslationContext ( )
{
	static UFunction* pFnGetTranslationContext = NULL;

	if ( ! pFnGetTranslationContext )
		pFnGetTranslationContext = (UFunction*) UObject::GObjObjects()->Data[ 24879 ];

	ULocalPlayer_execGetTranslationContext_Parms GetTranslationContext_Parms;

	pFnGetTranslationContext->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTranslationContext, &GetTranslationContext_Parms, NULL );

	pFnGetTranslationContext->FunctionFlags |= 0x400;

	return GetTranslationContext_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SetControllerId
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            NewControllerId                ( CPF_Parm )

void ULocalPlayer::SetControllerId ( int NewControllerId )
{
	static UFunction* pFnSetControllerId = NULL;

	if ( ! pFnSetControllerId )
		pFnSetControllerId = (UFunction*) UObject::GObjObjects()->Data[ 24875 ];

	ULocalPlayer_execSetControllerId_Parms SetControllerId_Parms;
	SetControllerId_Parms.NewControllerId = NewControllerId;

	this->ProcessEvent ( pFnSetControllerId, &SetControllerId_Parms, NULL );
};

// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

void ULocalPlayer::ClearPostProcessSettingsOverride ( float BlendOutTime )
{
	static UFunction* pFnClearPostProcessSettingsOverride = NULL;

	if ( ! pFnClearPostProcessSettingsOverride )
		pFnClearPostProcessSettingsOverride = (UFunction*) UObject::GObjObjects()->Data[ 24873 ];

	ULocalPlayer_execClearPostProcessSettingsOverride_Parms ClearPostProcessSettingsOverride_Parms;
	ClearPostProcessSettingsOverride_Parms.BlendOutTime = BlendOutTime;

	pFnClearPostProcessSettingsOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPostProcessSettingsOverride, &ClearPostProcessSettingsOverride_Parms, NULL );

	pFnClearPostProcessSettingsOverride->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.OverridePostProcessSettingsCurve
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm | CPF_NeedCtorLink )
// struct FInterpCurveFloat       Curve                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ULocalPlayer::OverridePostProcessSettingsCurve ( struct FPostProcessSettings OverrideSettings, struct FInterpCurveFloat* Curve )
{
	static UFunction* pFnOverridePostProcessSettingsCurve = NULL;

	if ( ! pFnOverridePostProcessSettingsCurve )
		pFnOverridePostProcessSettingsCurve = (UFunction*) UObject::GObjObjects()->Data[ 24870 ];

	ULocalPlayer_execOverridePostProcessSettingsCurve_Parms OverridePostProcessSettingsCurve_Parms;
	memcpy ( &OverridePostProcessSettingsCurve_Parms.OverrideSettings, &OverrideSettings, 0x150 );

	pFnOverridePostProcessSettingsCurve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverridePostProcessSettingsCurve, &OverridePostProcessSettingsCurve_Parms, NULL );

	pFnOverridePostProcessSettingsCurve->FunctionFlags |= 0x400;

	if ( Curve )
		memcpy ( Curve, &OverridePostProcessSettingsCurve_Parms.Curve, 0x10 );
};

// Function Engine.LocalPlayer.OverridePostProcessSettings
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FPostProcessSettings    OverrideSettings               ( CPF_Parm | CPF_NeedCtorLink )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )

void ULocalPlayer::OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float BlendInTime )
{
	static UFunction* pFnOverridePostProcessSettings = NULL;

	if ( ! pFnOverridePostProcessSettings )
		pFnOverridePostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 24867 ];

	ULocalPlayer_execOverridePostProcessSettings_Parms OverridePostProcessSettings_Parms;
	memcpy ( &OverridePostProcessSettings_Parms.OverrideSettings, &OverrideSettings, 0x150 );
	OverridePostProcessSettings_Parms.BlendInTime = BlendInTime;

	pFnOverridePostProcessSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverridePostProcessSettings, &OverridePostProcessSettings_Parms, NULL );

	pFnOverridePostProcessSettings->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.GetActorVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )

bool ULocalPlayer::GetActorVisibility ( class AActor* TestActor )
{
	static UFunction* pFnGetActorVisibility = NULL;

	if ( ! pFnGetActorVisibility )
		pFnGetActorVisibility = (UFunction*) UObject::GObjObjects()->Data[ 24864 ];

	ULocalPlayer_execGetActorVisibility_Parms GetActorVisibility_Parms;
	GetActorVisibility_Parms.TestActor = TestActor;

	pFnGetActorVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorVisibility, &GetActorVisibility_Parms, NULL );

	pFnGetActorVisibility->FunctionFlags |= 0x400;

	return GetActorVisibility_Parms.ReturnValue;
};

// Function Engine.LocalPlayer.SendSplitJoin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULocalPlayer::SendSplitJoin ( )
{
	static UFunction* pFnSendSplitJoin = NULL;

	if ( ! pFnSendSplitJoin )
		pFnSendSplitJoin = (UFunction*) UObject::GObjObjects()->Data[ 22567 ];

	ULocalPlayer_execSendSplitJoin_Parms SendSplitJoin_Parms;

	pFnSendSplitJoin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendSplitJoin, &SendSplitJoin_Parms, NULL );

	pFnSendSplitJoin->FunctionFlags |= 0x400;
};

// Function Engine.LocalPlayer.SpawnPlayActor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ULocalPlayer::SpawnPlayActor ( struct FString URL, struct FString* OutError )
{
	static UFunction* pFnSpawnPlayActor = NULL;

	if ( ! pFnSpawnPlayActor )
		pFnSpawnPlayActor = (UFunction*) UObject::GObjObjects()->Data[ 22564 ];

	ULocalPlayer_execSpawnPlayActor_Parms SpawnPlayActor_Parms;
	memcpy ( &SpawnPlayActor_Parms.URL, &URL, 0xC );

	pFnSpawnPlayActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPlayActor, &SpawnPlayActor_Parms, NULL );

	pFnSpawnPlayActor->FunctionFlags |= 0x400;

	if ( OutError )
		memcpy ( OutError, &SpawnPlayActor_Parms.OutError, 0xC );

	return SpawnPlayActor_Parms.ReturnValue;
};

// Function Engine.PostProcessChain.FindPostProcessEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UPostProcessEffect*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   EffectName                     ( CPF_Parm )

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect ( struct FName EffectName )
{
	static UFunction* pFnFindPostProcessEffect = NULL;

	if ( ! pFnFindPostProcessEffect )
		pFnFindPostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 31567 ];

	UPostProcessChain_execFindPostProcessEffect_Parms FindPostProcessEffect_Parms;
	memcpy ( &FindPostProcessEffect_Parms.EffectName, &EffectName, 0x8 );

	this->ProcessEvent ( pFnFindPostProcessEffect, &FindPostProcessEffect_Parms, NULL );

	return FindPostProcessEffect_Parms.ReturnValue;
};

// Function Engine.ReachSpec.IsBlockedFor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool UReachSpec::IsBlockedFor ( class APawn* P )
{
	static UFunction* pFnIsBlockedFor = NULL;

	if ( ! pFnIsBlockedFor )
		pFnIsBlockedFor = (UFunction*) UObject::GObjObjects()->Data[ 13129 ];

	UReachSpec_execIsBlockedFor_Parms IsBlockedFor_Parms;
	IsBlockedFor_Parms.P = P;

	this->ProcessEvent ( pFnIsBlockedFor, &IsBlockedFor_Parms, NULL );

	return IsBlockedFor_Parms.ReturnValue;
};

// Function Engine.ReachSpec.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UReachSpec::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = (UFunction*) UObject::GObjObjects()->Data[ 13127 ];

	UReachSpec_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.ReachSpec.GetEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ANavigationPoint* UReachSpec::GetEnd ( )
{
	static UFunction* pFnGetEnd = NULL;

	if ( ! pFnGetEnd )
		pFnGetEnd = (UFunction*) UObject::GObjObjects()->Data[ 13125 ];

	UReachSpec_execGetEnd_Parms GetEnd_Parms;

	pFnGetEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnd, &GetEnd_Parms, NULL );

	pFnGetEnd->FunctionFlags |= 0x400;

	return GetEnd_Parms.ReturnValue;
};

// Function Engine.ReachSpec.CostFor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

int UReachSpec::CostFor ( class APawn* P )
{
	static UFunction* pFnCostFor = NULL;

	if ( ! pFnCostFor )
		pFnCostFor = (UFunction*) UObject::GObjObjects()->Data[ 13122 ];

	UReachSpec_execCostFor_Parms CostFor_Parms;
	CostFor_Parms.P = P;

	pFnCostFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCostFor, &CostFor_Parms, NULL );

	pFnCostFor->FunctionFlags |= 0x400;

	return CostFor_Parms.ReturnValue;
};

// Function Engine.SavedMove.GetDebugString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USavedMove::GetDebugString ( )
{
	static UFunction* pFnGetDebugString = NULL;

	if ( ! pFnGetDebugString )
		pFnGetDebugString = (UFunction*) UObject::GObjObjects()->Data[ 32258 ];

	USavedMove_execGetDebugString_Parms GetDebugString_Parms;

	this->ProcessEvent ( pFnGetDebugString, &GetDebugString_Parms, NULL );

	return GetDebugString_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetFlags
// [0x00022002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Flags                          ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

unsigned char USavedMove::SetFlags ( unsigned char Flags, class APlayerController* PC )
{
	static UFunction* pFnSetFlags = NULL;

	if ( ! pFnSetFlags )
		pFnSetFlags = (UFunction*) UObject::GObjObjects()->Data[ 11611 ];

	USavedMove_execSetFlags_Parms SetFlags_Parms;
	SetFlags_Parms.Flags = Flags;
	SetFlags_Parms.PC = PC;

	this->ProcessEvent ( pFnSetFlags, &SetFlags_Parms, NULL );

	return SetFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.CompressedFlags
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USavedMove::CompressedFlags ( )
{
	static UFunction* pFnCompressedFlags = NULL;

	if ( ! pFnCompressedFlags )
		pFnCompressedFlags = (UFunction*) UObject::GObjObjects()->Data[ 11715 ];

	USavedMove_execCompressedFlags_Parms CompressedFlags_Parms;

	this->ProcessEvent ( pFnCompressedFlags, &CompressedFlags_Parms, NULL );

	return CompressedFlags_Parms.ReturnValue;
};

// Function Engine.SavedMove.ResetMoveFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::ResetMoveFor ( class APawn* P )
{
	static UFunction* pFnResetMoveFor = NULL;

	if ( ! pFnResetMoveFor )
		pFnResetMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 32253 ];

	USavedMove_execResetMoveFor_Parms ResetMoveFor_Parms;
	ResetMoveFor_Parms.P = P;

	this->ProcessEvent ( pFnResetMoveFor, &ResetMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.PrepMoveFor
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::PrepMoveFor ( class APawn* P )
{
	static UFunction* pFnPrepMoveFor = NULL;

	if ( ! pFnPrepMoveFor )
		pFnPrepMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 32251 ];

	USavedMove_execPrepMoveFor_Parms PrepMoveFor_Parms;
	PrepMoveFor_Parms.P = P;

	this->ProcessEvent ( pFnPrepMoveFor, &PrepMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.SetMoveFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FVector                 newAccel                       ( CPF_Parm )
// unsigned char                  InDoubleClick                  ( CPF_Parm )

void USavedMove::SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick )
{
	static UFunction* pFnSetMoveFor = NULL;

	if ( ! pFnSetMoveFor )
		pFnSetMoveFor = (UFunction*) UObject::GObjObjects()->Data[ 32246 ];

	USavedMove_execSetMoveFor_Parms SetMoveFor_Parms;
	SetMoveFor_Parms.P = P;
	SetMoveFor_Parms.DeltaTime = DeltaTime;
	memcpy ( &SetMoveFor_Parms.newAccel, &newAccel, 0xC );
	SetMoveFor_Parms.InDoubleClick = InDoubleClick;

	this->ProcessEvent ( pFnSetMoveFor, &SetMoveFor_Parms, NULL );
};

// Function Engine.SavedMove.CanCombineWith
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USavedMove*              NewMove                        ( CPF_Parm )
// class APawn*                   inPawn                         ( CPF_Parm )
// float                          MaxDelta                       ( CPF_Parm )

bool USavedMove::CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta )
{
	static UFunction* pFnCanCombineWith = NULL;

	if ( ! pFnCanCombineWith )
		pFnCanCombineWith = (UFunction*) UObject::GObjObjects()->Data[ 32241 ];

	USavedMove_execCanCombineWith_Parms CanCombineWith_Parms;
	CanCombineWith_Parms.NewMove = NewMove;
	CanCombineWith_Parms.inPawn = inPawn;
	CanCombineWith_Parms.MaxDelta = MaxDelta;

	this->ProcessEvent ( pFnCanCombineWith, &CanCombineWith_Parms, NULL );

	return CanCombineWith_Parms.ReturnValue;
};

// Function Engine.SavedMove.SetInitialPosition
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USavedMove::SetInitialPosition ( class APawn* P )
{
	static UFunction* pFnSetInitialPosition = NULL;

	if ( ! pFnSetInitialPosition )
		pFnSetInitialPosition = (UFunction*) UObject::GObjObjects()->Data[ 32239 ];

	USavedMove_execSetInitialPosition_Parms SetInitialPosition_Parms;
	SetInitialPosition_Parms.P = P;

	this->ProcessEvent ( pFnSetInitialPosition, &SetInitialPosition_Parms, NULL );
};

// Function Engine.SavedMove.GetStartLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USavedMove::GetStartLocation ( )
{
	static UFunction* pFnGetStartLocation = NULL;

	if ( ! pFnGetStartLocation )
		pFnGetStartLocation = (UFunction*) UObject::GObjObjects()->Data[ 32237 ];

	USavedMove_execGetStartLocation_Parms GetStartLocation_Parms;

	this->ProcessEvent ( pFnGetStartLocation, &GetStartLocation_Parms, NULL );

	return GetStartLocation_Parms.ReturnValue;
};

// Function Engine.SavedMove.IsImportantMove
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 CompareAccel                   ( CPF_Parm )

bool USavedMove::IsImportantMove ( struct FVector CompareAccel )
{
	static UFunction* pFnIsImportantMove = NULL;

	if ( ! pFnIsImportantMove )
		pFnIsImportantMove = (UFunction*) UObject::GObjObjects()->Data[ 32233 ];

	USavedMove_execIsImportantMove_Parms IsImportantMove_Parms;
	memcpy ( &IsImportantMove_Parms.CompareAccel, &CompareAccel, 0xC );

	this->ProcessEvent ( pFnIsImportantMove, &IsImportantMove_Parms, NULL );

	return IsImportantMove_Parms.ReturnValue;
};

// Function Engine.SavedMove.PostUpdate
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void USavedMove::PostUpdate ( class APlayerController* P )
{
	static UFunction* pFnPostUpdate = NULL;

	if ( ! pFnPostUpdate )
		pFnPostUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32231 ];

	USavedMove_execPostUpdate_Parms PostUpdate_Parms;
	PostUpdate_Parms.P = P;

	this->ProcessEvent ( pFnPostUpdate, &PostUpdate_Parms, NULL );
};

// Function Engine.SavedMove.Clear
// [0x00020002] 
// Parameters infos:

void USavedMove::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 32230 ];

	USavedMove_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function Engine.GameViewportClient.SetHardwareMouseCursorVisibility
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsVisible                     ( CPF_Parm )

void UGameViewportClient::eventSetHardwareMouseCursorVisibility ( unsigned long bIsVisible )
{
	static UFunction* pFnSetHardwareMouseCursorVisibility = NULL;

	if ( ! pFnSetHardwareMouseCursorVisibility )
		pFnSetHardwareMouseCursorVisibility = (UFunction*) UObject::GObjObjects()->Data[ 22772 ];

	UGameViewportClient_eventSetHardwareMouseCursorVisibility_Parms SetHardwareMouseCursorVisibility_Parms;
	SetHardwareMouseCursorVisibility_Parms.bIsVisible = bIsVisible;

	this->ProcessEvent ( pFnSetHardwareMouseCursorVisibility, &SetHardwareMouseCursorVisibility_Parms, NULL );
};

// Function Engine.GameViewportClient.DebugSetUISystemEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bOldUISystemActive             ( CPF_Parm )
// unsigned long                  bGFxUISystemActive             ( CPF_Parm )

void UGameViewportClient::DebugSetUISystemEnabled ( unsigned long bOldUISystemActive, unsigned long bGFxUISystemActive )
{
	static UFunction* pFnDebugSetUISystemEnabled = NULL;

	if ( ! pFnDebugSetUISystemEnabled )
		pFnDebugSetUISystemEnabled = (UFunction*) UObject::GObjObjects()->Data[ 22769 ];

	UGameViewportClient_execDebugSetUISystemEnabled_Parms DebugSetUISystemEnabled_Parms;
	DebugSetUISystemEnabled_Parms.bOldUISystemActive = bOldUISystemActive;
	DebugSetUISystemEnabled_Parms.bGFxUISystemActive = bGFxUISystemActive;

	pFnDebugSetUISystemEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugSetUISystemEnabled, &DebugSetUISystemEnabled_Parms, NULL );

	pFnDebugSetUISystemEnabled->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.IsScaleformEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::IsScaleformEnabled ( )
{
	static UFunction* pFnIsScaleformEnabled = NULL;

	if ( ! pFnIsScaleformEnabled )
		pFnIsScaleformEnabled = (UFunction*) UObject::GObjObjects()->Data[ 22767 ];

	UGameViewportClient_execIsScaleformEnabled_Parms IsScaleformEnabled_Parms;

	pFnIsScaleformEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsScaleformEnabled, &IsScaleformEnabled_Parms, NULL );

	pFnIsScaleformEnabled->FunctionFlags |= 0x400;

	return IsScaleformEnabled_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.DisableScaleform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameViewportClient::DisableScaleform ( )
{
	static UFunction* pFnDisableScaleform = NULL;

	if ( ! pFnDisableScaleform )
		pFnDisableScaleform = (UFunction*) UObject::GObjObjects()->Data[ 22766 ];

	UGameViewportClient_execDisableScaleform_Parms DisableScaleform_Parms;

	pFnDisableScaleform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableScaleform, &DisableScaleform_Parms, NULL );

	pFnDisableScaleform->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.EnableScaleform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameViewportClient::EnableScaleform ( )
{
	static UFunction* pFnEnableScaleform = NULL;

	if ( ! pFnEnableScaleform )
		pFnEnableScaleform = (UFunction*) UObject::GObjObjects()->Data[ 22765 ];

	UGameViewportClient_execEnableScaleform_Parms EnableScaleform_Parms;

	pFnEnableScaleform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableScaleform, &EnableScaleform_Parms, NULL );

	pFnEnableScaleform->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.BecomePrimaryPlayer
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )

void UGameViewportClient::BecomePrimaryPlayer ( int PlayerIndex )
{
	static UFunction* pFnBecomePrimaryPlayer = NULL;

	if ( ! pFnBecomePrimaryPlayer )
		pFnBecomePrimaryPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22751 ];

	UGameViewportClient_execBecomePrimaryPlayer_Parms BecomePrimaryPlayer_Parms;
	BecomePrimaryPlayer_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnBecomePrimaryPlayer, &BecomePrimaryPlayer_Parms, NULL );
};

// Function Engine.GameViewportClient.OnPrimaryPlayerSwitch
// [0x00020000] 
// Parameters infos:
// class ULocalPlayer*            OldPrimaryPlayer               ( CPF_Parm )
// class ULocalPlayer*            NewPrimaryPlayer               ( CPF_Parm )

void UGameViewportClient::OnPrimaryPlayerSwitch ( class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer )
{
	static UFunction* pFnOnPrimaryPlayerSwitch = NULL;

	if ( ! pFnOnPrimaryPlayerSwitch )
		pFnOnPrimaryPlayerSwitch = (UFunction*) UObject::GObjObjects()->Data[ 22748 ];

	UGameViewportClient_execOnPrimaryPlayerSwitch_Parms OnPrimaryPlayerSwitch_Parms;
	OnPrimaryPlayerSwitch_Parms.OldPrimaryPlayer = OldPrimaryPlayer;
	OnPrimaryPlayerSwitch_Parms.NewPrimaryPlayer = NewPrimaryPlayer;

	this->ProcessEvent ( pFnOnPrimaryPlayerSwitch, &OnPrimaryPlayerSwitch_Parms, NULL );
};

// Function Engine.GameViewportClient.FixupOwnerReferences
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< int >                  IDMappings                     ( CPF_Parm | CPF_NeedCtorLink )

void UGameViewportClient::FixupOwnerReferences ( TArray< int > IDMappings )
{
	static UFunction* pFnFixupOwnerReferences = NULL;

	if ( ! pFnFixupOwnerReferences )
		pFnFixupOwnerReferences = (UFunction*) UObject::GObjObjects()->Data[ 22575 ];

	UGameViewportClient_execFixupOwnerReferences_Parms FixupOwnerReferences_Parms;
	memcpy ( &FixupOwnerReferences_Parms.IDMappings, &IDMappings, 0xC );

	pFnFixupOwnerReferences->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFixupOwnerReferences, &FixupOwnerReferences_Parms, NULL );

	pFnFixupOwnerReferences->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

class ULocalPlayer* UGameViewportClient::GetPlayerOwner ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 22743 ];

	UGameViewportClient_execGetPlayerOwner_Parms GetPlayerOwner_Parms;
	GetPlayerOwner_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ClearProgressMessages
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UGameViewportClient::ClearProgressMessages ( )
{
	static UFunction* pFnClearProgressMessages = NULL;

	if ( ! pFnClearProgressMessages )
		pFnClearProgressMessages = (UFunction*) UObject::GObjObjects()->Data[ 22741 ];

	UGameViewportClient_execClearProgressMessages_Parms ClearProgressMessages_Parms;

	this->ProcessEvent ( pFnClearProgressMessages, &ClearProgressMessages_Parms, NULL );
};

// Function Engine.GameViewportClient.SetProgressTime
// [0x00020A02] ( FUNC_Exec | FUNC_Event )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UGameViewportClient::SetProgressTime ( float T )
{
	static UFunction* pFnSetProgressTime = NULL;

	if ( ! pFnSetProgressTime )
		pFnSetProgressTime = (UFunction*) UObject::GObjObjects()->Data[ 22739 ];

	UGameViewportClient_execSetProgressTime_Parms SetProgressTime_Parms;
	SetProgressTime_Parms.T = T;

	this->ProcessEvent ( pFnSetProgressTime, &SetProgressTime_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyConnectionError
// [0x00024002] 
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UGameViewportClient::NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title )
{
	static UFunction* pFnNotifyConnectionError = NULL;

	if ( ! pFnNotifyConnectionError )
		pFnNotifyConnectionError = (UFunction*) UObject::GObjObjects()->Data[ 22734 ];

	UGameViewportClient_execNotifyConnectionError_Parms NotifyConnectionError_Parms;
	NotifyConnectionError_Parms.MessageType = MessageType;
	memcpy ( &NotifyConnectionError_Parms.Message, &Message, 0xC );
	memcpy ( &NotifyConnectionError_Parms.Title, &Title, 0xC );

	this->ProcessEvent ( pFnNotifyConnectionError, &NotifyConnectionError_Parms, NULL );
};

// Function Engine.GameViewportClient.SetProgressMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  MessageType                    ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreFutureNetworkMessages   ( CPF_OptionalParm | CPF_Parm )

void UGameViewportClient::eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages )
{
	static UFunction* pFnSetProgressMessage = NULL;

	if ( ! pFnSetProgressMessage )
		pFnSetProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 22728 ];

	UGameViewportClient_eventSetProgressMessage_Parms SetProgressMessage_Parms;
	SetProgressMessage_Parms.MessageType = MessageType;
	memcpy ( &SetProgressMessage_Parms.Message, &Message, 0xC );
	memcpy ( &SetProgressMessage_Parms.Title, &Title, 0xC );
	SetProgressMessage_Parms.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	this->ProcessEvent ( pFnSetProgressMessage, &SetProgressMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.RemoveLocalPlayer
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            ExistingPlayer                 ( CPF_Parm )

int UGameViewportClient::RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer )
{
	static UFunction* pFnRemoveLocalPlayer = NULL;

	if ( ! pFnRemoveLocalPlayer )
		pFnRemoveLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22566 ];

	UGameViewportClient_execRemoveLocalPlayer_Parms RemoveLocalPlayer_Parms;
	RemoveLocalPlayer_Parms.ExistingPlayer = ExistingPlayer;

	this->ProcessEvent ( pFnRemoveLocalPlayer, &RemoveLocalPlayer_Parms, NULL );

	return RemoveLocalPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.AddLocalPlayer
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            NewPlayer                      ( CPF_Parm )

int UGameViewportClient::AddLocalPlayer ( class ULocalPlayer* NewPlayer )
{
	static UFunction* pFnAddLocalPlayer = NULL;

	if ( ! pFnAddLocalPlayer )
		pFnAddLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22563 ];

	UGameViewportClient_execAddLocalPlayer_Parms AddLocalPlayer_Parms;
	AddLocalPlayer_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnAddLocalPlayer, &AddLocalPlayer_Parms, NULL );

	return AddLocalPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.NotifyPlayerRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameViewportClient::eventNotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 22718 ];

	UGameViewportClient_eventNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameViewportClient.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameViewportClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 22714 ];

	UGameViewportClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransitionMessage
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UGameViewportClient::DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message )
{
	static UFunction* pFnDrawTransitionMessage = NULL;

	if ( ! pFnDrawTransitionMessage )
		pFnDrawTransitionMessage = (UFunction*) UObject::GObjObjects()->Data[ 22709 ];

	UGameViewportClient_execDrawTransitionMessage_Parms DrawTransitionMessage_Parms;
	DrawTransitionMessage_Parms.Canvas = Canvas;
	memcpy ( &DrawTransitionMessage_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnDrawTransitionMessage, &DrawTransitionMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTransition
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DrawTransition ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTransition = NULL;

	if ( ! pFnDrawTransition )
		pFnDrawTransition = (UFunction*) UObject::GObjObjects()->Data[ 22702 ];

	UGameViewportClient_execDrawTransition_Parms DrawTransition_Parms;
	DrawTransition_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTransition, &DrawTransition_Parms, NULL );
};

// Function Engine.GameViewportClient.DisplayProgressMessage
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DisplayProgressMessage ( class UCanvas* Canvas )
{
	static UFunction* pFnDisplayProgressMessage = NULL;

	if ( ! pFnDisplayProgressMessage )
		pFnDisplayProgressMessage = (UFunction*) UObject::GObjObjects()->Data[ 22689 ];

	UGameViewportClient_execDisplayProgressMessage_Parms DisplayProgressMessage_Parms;
	DisplayProgressMessage_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDisplayProgressMessage, &DisplayProgressMessage_Parms, NULL );
};

// Function Engine.GameViewportClient.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 22686 ];

	UGameViewportClient_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.GameViewportClient.DrawTitleSafeArea
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UGameViewportClient::DrawTitleSafeArea ( class UCanvas* Canvas )
{
	static UFunction* pFnDrawTitleSafeArea = NULL;

	if ( ! pFnDrawTitleSafeArea )
		pFnDrawTitleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 22684 ];

	UGameViewportClient_execDrawTitleSafeArea_Parms DrawTitleSafeArea_Parms;
	DrawTitleSafeArea_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDrawTitleSafeArea, &DrawTitleSafeArea_Parms, NULL );
};

// Function Engine.GameViewportClient.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UGameViewportClient::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 22682 ];

	UGameViewportClient_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.GameViewportClient.CalculateDeadZoneForAllSides
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )
// class UCanvas*                 Canvas                         ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_OptionalParm | CPF_Parm )
// float                          fTopSafeZone                   ( CPF_Parm | CPF_OutParm )
// float                          fBottomSafeZone                ( CPF_Parm | CPF_OutParm )
// float                          fLeftSafeZone                  ( CPF_Parm | CPF_OutParm )
// float                          fRightSafeZone                 ( CPF_Parm | CPF_OutParm )

bool UGameViewportClient::CalculateDeadZoneForAllSides ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone )
{
	static UFunction* pFnCalculateDeadZoneForAllSides = NULL;

	if ( ! pFnCalculateDeadZoneForAllSides )
		pFnCalculateDeadZoneForAllSides = (UFunction*) UObject::GObjObjects()->Data[ 22666 ];

	UGameViewportClient_execCalculateDeadZoneForAllSides_Parms CalculateDeadZoneForAllSides_Parms;
	CalculateDeadZoneForAllSides_Parms.LPlayer = LPlayer;
	CalculateDeadZoneForAllSides_Parms.Canvas = Canvas;
	CalculateDeadZoneForAllSides_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateDeadZoneForAllSides, &CalculateDeadZoneForAllSides_Parms, NULL );

	if ( fTopSafeZone )
		*fTopSafeZone = CalculateDeadZoneForAllSides_Parms.fTopSafeZone;

	if ( fBottomSafeZone )
		*fBottomSafeZone = CalculateDeadZoneForAllSides_Parms.fBottomSafeZone;

	if ( fLeftSafeZone )
		*fLeftSafeZone = CalculateDeadZoneForAllSides_Parms.fLeftSafeZone;

	if ( fRightSafeZone )
		*fRightSafeZone = CalculateDeadZoneForAllSides_Parms.fRightSafeZone;

	return CalculateDeadZoneForAllSides_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CalculateSafeZoneValues
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// unsigned long                  bUseMaxPercent                 ( CPF_Parm )
// float                          out_Horizontal                 ( CPF_Parm | CPF_OutParm )
// float                          out_Vertical                   ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical )
{
	static UFunction* pFnCalculateSafeZoneValues = NULL;

	if ( ! pFnCalculateSafeZoneValues )
		pFnCalculateSafeZoneValues = (UFunction*) UObject::GObjObjects()->Data[ 22651 ];

	UGameViewportClient_execCalculateSafeZoneValues_Parms CalculateSafeZoneValues_Parms;
	CalculateSafeZoneValues_Parms.Canvas = Canvas;
	CalculateSafeZoneValues_Parms.LocalPlayerIndex = LocalPlayerIndex;
	CalculateSafeZoneValues_Parms.bUseMaxPercent = bUseMaxPercent;

	this->ProcessEvent ( pFnCalculateSafeZoneValues, &CalculateSafeZoneValues_Parms, NULL );

	if ( out_Horizontal )
		*out_Horizontal = CalculateSafeZoneValues_Parms.out_Horizontal;

	if ( out_Vertical )
		*out_Vertical = CalculateSafeZoneValues_Parms.out_Vertical;
};

// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )
// int                            LocalPlayerIndex               ( CPF_Parm )
// float                          out_Width                      ( CPF_Parm | CPF_OutParm )
// float                          out_Height                     ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height )
{
	static UFunction* pFnGetPixelSizeOfScreen = NULL;

	if ( ! pFnGetPixelSizeOfScreen )
		pFnGetPixelSizeOfScreen = (UFunction*) UObject::GObjObjects()->Data[ 22646 ];

	UGameViewportClient_execGetPixelSizeOfScreen_Parms GetPixelSizeOfScreen_Parms;
	GetPixelSizeOfScreen_Parms.Canvas = Canvas;
	GetPixelSizeOfScreen_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnGetPixelSizeOfScreen, &GetPixelSizeOfScreen_Parms, NULL );

	if ( out_Width )
		*out_Width = GetPixelSizeOfScreen_Parms.out_Width;

	if ( out_Height )
		*out_Height = GetPixelSizeOfScreen_Parms.out_Height;
};

// Function Engine.GameViewportClient.HasRightSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasRightSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasRightSafeZone = NULL;

	if ( ! pFnHasRightSafeZone )
		pFnHasRightSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22643 ];

	UGameViewportClient_execHasRightSafeZone_Parms HasRightSafeZone_Parms;
	HasRightSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasRightSafeZone, &HasRightSafeZone_Parms, NULL );

	return HasRightSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasLeftSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasLeftSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasLeftSafeZone = NULL;

	if ( ! pFnHasLeftSafeZone )
		pFnHasLeftSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22640 ];

	UGameViewportClient_execHasLeftSafeZone_Parms HasLeftSafeZone_Parms;
	HasLeftSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasLeftSafeZone, &HasLeftSafeZone_Parms, NULL );

	return HasLeftSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasBottomSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasBottomSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasBottomSafeZone = NULL;

	if ( ! pFnHasBottomSafeZone )
		pFnHasBottomSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22637 ];

	UGameViewportClient_execHasBottomSafeZone_Parms HasBottomSafeZone_Parms;
	HasBottomSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasBottomSafeZone, &HasBottomSafeZone_Parms, NULL );

	return HasBottomSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HasTopSafeZone
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerIndex               ( CPF_Parm )

bool UGameViewportClient::HasTopSafeZone ( int LocalPlayerIndex )
{
	static UFunction* pFnHasTopSafeZone = NULL;

	if ( ! pFnHasTopSafeZone )
		pFnHasTopSafeZone = (UFunction*) UObject::GObjObjects()->Data[ 22634 ];

	UGameViewportClient_execHasTopSafeZone_Parms HasTopSafeZone_Parms;
	HasTopSafeZone_Parms.LocalPlayerIndex = LocalPlayerIndex;

	this->ProcessEvent ( pFnHasTopSafeZone, &HasTopSafeZone_Parms, NULL );

	return HasTopSafeZone_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            LPlayer                        ( CPF_Parm )

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer )
{
	static UFunction* pFnConvertLocalPlayerToGamePlayerIndex = NULL;

	if ( ! pFnConvertLocalPlayerToGamePlayerIndex )
		pFnConvertLocalPlayerToGamePlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 22631 ];

	UGameViewportClient_execConvertLocalPlayerToGamePlayerIndex_Parms ConvertLocalPlayerToGamePlayerIndex_Parms;
	ConvertLocalPlayerToGamePlayerIndex_Parms.LPlayer = LPlayer;

	this->ProcessEvent ( pFnConvertLocalPlayerToGamePlayerIndex, &ConvertLocalPlayerToGamePlayerIndex_Parms, NULL );

	return ConvertLocalPlayerToGamePlayerIndex_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetSubtitleRegion
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FVector2D               MinPos                         ( CPF_Parm | CPF_OutParm )
// struct FVector2D               MaxPos                         ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos )
{
	static UFunction* pFnGetSubtitleRegion = NULL;

	if ( ! pFnGetSubtitleRegion )
		pFnGetSubtitleRegion = (UFunction*) UObject::GObjObjects()->Data[ 22628 ];

	UGameViewportClient_eventGetSubtitleRegion_Parms GetSubtitleRegion_Parms;

	this->ProcessEvent ( pFnGetSubtitleRegion, &GetSubtitleRegion_Parms, NULL );

	if ( MinPos )
		memcpy ( MinPos, &GetSubtitleRegion_Parms.MinPos, 0x8 );

	if ( MaxPos )
		memcpy ( MaxPos, &GetSubtitleRegion_Parms.MaxPos, 0x8 );
};

// Function Engine.GameViewportClient.LayoutPlayers
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventLayoutPlayers ( )
{
	static UFunction* pFnLayoutPlayers = NULL;

	if ( ! pFnLayoutPlayers )
		pFnLayoutPlayers = (UFunction*) UObject::GObjObjects()->Data[ 22623 ];

	UGameViewportClient_eventLayoutPlayers_Parms LayoutPlayers_Parms;

	this->ProcessEvent ( pFnLayoutPlayers, &LayoutPlayers_Parms, NULL );
};

// Function Engine.GameViewportClient.UpdateActiveSplitscreenType
// [0x00020002] 
// Parameters infos:

void UGameViewportClient::UpdateActiveSplitscreenType ( )
{
	static UFunction* pFnUpdateActiveSplitscreenType = NULL;

	if ( ! pFnUpdateActiveSplitscreenType )
		pFnUpdateActiveSplitscreenType = (UFunction*) UObject::GObjObjects()->Data[ 22619 ];

	UGameViewportClient_execUpdateActiveSplitscreenType_Parms UpdateActiveSplitscreenType_Parms;

	this->ProcessEvent ( pFnUpdateActiveSplitscreenType, &UpdateActiveSplitscreenType_Parms, NULL );
};

// Function Engine.GameViewportClient.GetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameViewportClient::GetSplitscreenConfiguration ( )
{
	static UFunction* pFnGetSplitscreenConfiguration = NULL;

	if ( ! pFnGetSplitscreenConfiguration )
		pFnGetSplitscreenConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 22617 ];

	UGameViewportClient_execGetSplitscreenConfiguration_Parms GetSplitscreenConfiguration_Parms;

	this->ProcessEvent ( pFnGetSplitscreenConfiguration, &GetSplitscreenConfiguration_Parms, NULL );

	return GetSplitscreenConfiguration_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// [0x00020002] 
// Parameters infos:
// unsigned char                  SplitType                      ( CPF_Parm )

void UGameViewportClient::SetSplitscreenConfiguration ( unsigned char SplitType )
{
	static UFunction* pFnSetSplitscreenConfiguration = NULL;

	if ( ! pFnSetSplitscreenConfiguration )
		pFnSetSplitscreenConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 22615 ];

	UGameViewportClient_execSetSplitscreenConfiguration_Parms SetSplitscreenConfiguration_Parms;
	SetSplitscreenConfiguration_Parms.SplitType = SplitType;

	this->ProcessEvent ( pFnSetSplitscreenConfiguration, &SetSplitscreenConfiguration_Parms, NULL );
};

// Function Engine.GameViewportClient.GameSessionEnded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGameViewportClient::eventGameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 22613 ];

	UGameViewportClient_eventGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function Engine.GameViewportClient.GetInteraction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UInteraction*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  InteractionClass               ( CPF_Parm )

class UInteraction* UGameViewportClient::GetInteraction ( class UClass* InteractionClass )
{
	static UFunction* pFnGetInteraction = NULL;

	if ( ! pFnGetInteraction )
		pFnGetInteraction = (UFunction*) UObject::GObjObjects()->Data[ 22610 ];

	UGameViewportClient_execGetInteraction_Parms GetInteraction_Parms;
	GetInteraction_Parms.InteractionClass = InteractionClass;

	pFnGetInteraction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInteraction, &GetInteraction_Parms, NULL );

	pFnGetInteraction->FunctionFlags |= 0x400;

	return GetInteraction_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.RemoveInteraction
// [0x00020002] 
// Parameters infos:
// class UInteraction*            RemInteraction                 ( CPF_Parm )

void UGameViewportClient::RemoveInteraction ( class UInteraction* RemInteraction )
{
	static UFunction* pFnRemoveInteraction = NULL;

	if ( ! pFnRemoveInteraction )
		pFnRemoveInteraction = (UFunction*) UObject::GObjObjects()->Data[ 22608 ];

	UGameViewportClient_execRemoveInteraction_Parms RemoveInteraction_Parms;
	RemoveInteraction_Parms.RemInteraction = RemInteraction;

	this->ProcessEvent ( pFnRemoveInteraction, &RemoveInteraction_Parms, NULL );
};

// Function Engine.GameViewportClient.InsertInteraction
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UInteraction*            NewInteraction                 ( CPF_Parm )
// int                            InIndex                        ( CPF_OptionalParm | CPF_Parm )

int UGameViewportClient::eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex )
{
	static UFunction* pFnInsertInteraction = NULL;

	if ( ! pFnInsertInteraction )
		pFnInsertInteraction = (UFunction*) UObject::GObjObjects()->Data[ 22602 ];

	UGameViewportClient_eventInsertInteraction_Parms InsertInteraction_Parms;
	InsertInteraction_Parms.NewInteraction = NewInteraction;
	InsertInteraction_Parms.InIndex = InIndex;

	this->ProcessEvent ( pFnInsertInteraction, &InsertInteraction_Parms, NULL );

	return InsertInteraction_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreateInitialPlayer
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGameViewportClient::eventCreateInitialPlayer ( struct FString* OutError )
{
	static UFunction* pFnCreateInitialPlayer = NULL;

	if ( ! pFnCreateInitialPlayer )
		pFnCreateInitialPlayer = (UFunction*) UObject::GObjObjects()->Data[ 22592 ];

	UGameViewportClient_eventCreateInitialPlayer_Parms CreateInitialPlayer_Parms;

	this->ProcessEvent ( pFnCreateInitialPlayer, &CreateInitialPlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreateInitialPlayer_Parms.OutError, 0xC );

	return CreateInitialPlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.Init
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UGameViewportClient::eventInit ( struct FString* OutError )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 22580 ];

	UGameViewportClient_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &Init_Parms.OutError, 0xC );

	return Init_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.FindPlayerByControllerId
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class ULocalPlayer* UGameViewportClient::eventFindPlayerByControllerId ( int ControllerId )
{
	static UFunction* pFnFindPlayerByControllerId = NULL;

	if ( ! pFnFindPlayerByControllerId )
		pFnFindPlayerByControllerId = (UFunction*) UObject::GObjObjects()->Data[ 22576 ];

	UGameViewportClient_eventFindPlayerByControllerId_Parms FindPlayerByControllerId_Parms;
	FindPlayerByControllerId_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnFindPlayerByControllerId, &FindPlayerByControllerId_Parms, NULL );

	return FindPlayerByControllerId_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.RemovePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            ExPlayer                       ( CPF_Parm )

bool UGameViewportClient::eventRemovePlayer ( class ULocalPlayer* ExPlayer )
{
	static UFunction* pFnRemovePlayer = NULL;

	if ( ! pFnRemovePlayer )
		pFnRemovePlayer = (UFunction*) UObject::GObjObjects()->Data[ 22568 ];

	UGameViewportClient_eventRemovePlayer_Parms RemovePlayer_Parms;
	RemovePlayer_Parms.ExPlayer = ExPlayer;

	this->ProcessEvent ( pFnRemovePlayer, &RemovePlayer_Parms, NULL );

	return RemovePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.CreatePlayer
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bSpawnActor                    ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class ULocalPlayer* UGameViewportClient::eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError )
{
	static UFunction* pFnCreatePlayer = NULL;

	if ( ! pFnCreatePlayer )
		pFnCreatePlayer = (UFunction*) UObject::GObjObjects()->Data[ 22556 ];

	UGameViewportClient_eventCreatePlayer_Parms CreatePlayer_Parms;
	CreatePlayer_Parms.ControllerId = ControllerId;
	CreatePlayer_Parms.bSpawnActor = bSpawnActor;

	this->ProcessEvent ( pFnCreatePlayer, &CreatePlayer_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &CreatePlayer_Parms.OutError, 0xC );

	return CreatePlayer_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.SetMouse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )

void UGameViewportClient::SetMouse ( int X, int Y )
{
	static UFunction* pFnSetMouse = NULL;

	if ( ! pFnSetMouse )
		pFnSetMouse = (UFunction*) UObject::GObjObjects()->Data[ 22553 ];

	UGameViewportClient_execSetMouse_Parms SetMouse_Parms;
	SetMouse_Parms.X = X;
	SetMouse_Parms.Y = Y;

	pFnSetMouse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouse, &SetMouse_Parms, NULL );

	pFnSetMouse->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.ForceUpdateMouseCursor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bSetCursor                     ( CPF_Parm )

void UGameViewportClient::ForceUpdateMouseCursor ( unsigned long bSetCursor )
{
	static UFunction* pFnForceUpdateMouseCursor = NULL;

	if ( ! pFnForceUpdateMouseCursor )
		pFnForceUpdateMouseCursor = (UFunction*) UObject::GObjObjects()->Data[ 22551 ];

	UGameViewportClient_execForceUpdateMouseCursor_Parms ForceUpdateMouseCursor_Parms;
	ForceUpdateMouseCursor_Parms.bSetCursor = bSetCursor;

	pFnForceUpdateMouseCursor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUpdateMouseCursor, &ForceUpdateMouseCursor_Parms, NULL );

	pFnForceUpdateMouseCursor->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.NotifySplitscreenLayoutChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UGameViewportClient::NotifySplitscreenLayoutChanged ( )
{
	static UFunction* pFnNotifySplitscreenLayoutChanged = NULL;

	if ( ! pFnNotifySplitscreenLayoutChanged )
		pFnNotifySplitscreenLayoutChanged = (UFunction*) UObject::GObjObjects()->Data[ 22550 ];

	UGameViewportClient_execNotifySplitscreenLayoutChanged_Parms NotifySplitscreenLayoutChanged_Parms;

	pFnNotifySplitscreenLayoutChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifySplitscreenLayoutChanged, &NotifySplitscreenLayoutChanged_Parms, NULL );

	pFnNotifySplitscreenLayoutChanged->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.SetCustomInteractionObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInteraction*            InInteraction                  ( CPF_Parm )

void UGameViewportClient::SetCustomInteractionObject ( class UInteraction* InInteraction )
{
	static UFunction* pFnSetCustomInteractionObject = NULL;

	if ( ! pFnSetCustomInteractionObject )
		pFnSetCustomInteractionObject = (UFunction*) UObject::GObjObjects()->Data[ 22548 ];

	UGameViewportClient_execSetCustomInteractionObject_Parms SetCustomInteractionObject_Parms;
	SetCustomInteractionObject_Parms.InInteraction = InInteraction;

	pFnSetCustomInteractionObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomInteractionObject, &SetCustomInteractionObject_Parms, NULL );

	pFnSetCustomInteractionObject->FunctionFlags |= 0x400;
};

// Function Engine.GameViewportClient.GetCustomInteractionClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIndex                        ( CPF_Parm )

class UClass* UGameViewportClient::GetCustomInteractionClass ( int InIndex )
{
	static UFunction* pFnGetCustomInteractionClass = NULL;

	if ( ! pFnGetCustomInteractionClass )
		pFnGetCustomInteractionClass = (UFunction*) UObject::GObjObjects()->Data[ 22545 ];

	UGameViewportClient_execGetCustomInteractionClass_Parms GetCustomInteractionClass_Parms;
	GetCustomInteractionClass_Parms.InIndex = InIndex;

	pFnGetCustomInteractionClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCustomInteractionClass, &GetCustomInteractionClass_Parms, NULL );

	pFnGetCustomInteractionClass->FunctionFlags |= 0x400;

	return GetCustomInteractionClass_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetNumCustomInteractions
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UGameViewportClient::GetNumCustomInteractions ( )
{
	static UFunction* pFnGetNumCustomInteractions = NULL;

	if ( ! pFnGetNumCustomInteractions )
		pFnGetNumCustomInteractions = (UFunction*) UObject::GObjObjects()->Data[ 22543 ];

	UGameViewportClient_execGetNumCustomInteractions_Parms GetNumCustomInteractions_Parms;

	pFnGetNumCustomInteractions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumCustomInteractions, &GetNumCustomInteractions_Parms, NULL );

	pFnGetNumCustomInteractions->FunctionFlags |= 0x400;

	return GetNumCustomInteractions_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.ShouldForceFullscreenViewport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::ShouldForceFullscreenViewport ( )
{
	static UFunction* pFnShouldForceFullscreenViewport = NULL;

	if ( ! pFnShouldForceFullscreenViewport )
		pFnShouldForceFullscreenViewport = (UFunction*) UObject::GObjObjects()->Data[ 22541 ];

	UGameViewportClient_execShouldForceFullscreenViewport_Parms ShouldForceFullscreenViewport_Parms;

	pFnShouldForceFullscreenViewport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldForceFullscreenViewport, &ShouldForceFullscreenViewport_Parms, NULL );

	pFnShouldForceFullscreenViewport->FunctionFlags |= 0x400;

	return ShouldForceFullscreenViewport_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetMousePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D UGameViewportClient::GetMousePosition ( )
{
	static UFunction* pFnGetMousePosition = NULL;

	if ( ! pFnGetMousePosition )
		pFnGetMousePosition = (UFunction*) UObject::GObjObjects()->Data[ 22539 ];

	UGameViewportClient_execGetMousePosition_Parms GetMousePosition_Parms;

	pFnGetMousePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMousePosition, &GetMousePosition_Parms, NULL );

	pFnGetMousePosition->FunctionFlags |= 0x400;

	return GetMousePosition_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.IsFullScreenViewport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameViewportClient::IsFullScreenViewport ( )
{
	static UFunction* pFnIsFullScreenViewport = NULL;

	if ( ! pFnIsFullScreenViewport )
		pFnIsFullScreenViewport = (UFunction*) UObject::GObjObjects()->Data[ 22537 ];

	UGameViewportClient_execIsFullScreenViewport_Parms IsFullScreenViewport_Parms;

	pFnIsFullScreenViewport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFullScreenViewport, &IsFullScreenViewport_Parms, NULL );

	pFnIsFullScreenViewport->FunctionFlags |= 0x400;

	return IsFullScreenViewport_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.GetViewportSize
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector2D               out_ViewportSize               ( CPF_Parm | CPF_OutParm )

void UGameViewportClient::GetViewportSize ( struct FVector2D* out_ViewportSize )
{
	static UFunction* pFnGetViewportSize = NULL;

	if ( ! pFnGetViewportSize )
		pFnGetViewportSize = (UFunction*) UObject::GObjObjects()->Data[ 22535 ];

	UGameViewportClient_execGetViewportSize_Parms GetViewportSize_Parms;

	pFnGetViewportSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewportSize, &GetViewportSize_Parms, NULL );

	pFnGetViewportSize->FunctionFlags |= 0x400;

	if ( out_ViewportSize )
		memcpy ( out_ViewportSize, &GetViewportSize_Parms.out_ViewportSize, 0x8 );
};

// Function Engine.GameViewportClient.ConsoleCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UGameViewportClient::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 22531 ];

	UGameViewportClient_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );

	pFnConsoleCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );

	pFnConsoleCommand->FunctionFlags |= 0x400;

	return ConsoleCommand_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.EventScaleformEnabledChanged
// [0x00120000] 
// Parameters infos:
// class UGameViewportClient*     GVC                            ( CPF_Parm )

void UGameViewportClient::EventScaleformEnabledChanged ( class UGameViewportClient* GVC )
{
	static UFunction* pFnEventScaleformEnabledChanged = NULL;

	if ( ! pFnEventScaleformEnabledChanged )
		pFnEventScaleformEnabledChanged = (UFunction*) UObject::GObjObjects()->Data[ 22534 ];

	UGameViewportClient_execEventScaleformEnabledChanged_Parms EventScaleformEnabledChanged_Parms;
	EventScaleformEnabledChanged_Parms.GVC = GVC;

	this->ProcessEvent ( pFnEventScaleformEnabledChanged, &EventScaleformEnabledChanged_Parms, NULL );
};

// Function Engine.GameViewportClient.HandleInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UGameViewportClient::HandleInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnHandleInputChar = NULL;

	if ( ! pFnHandleInputChar )
		pFnHandleInputChar = (UFunction*) UObject::GObjObjects()->Data[ 22527 ];

	UGameViewportClient_execHandleInputChar_Parms HandleInputChar_Parms;
	HandleInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnHandleInputChar, &HandleInputChar_Parms, NULL );

	return HandleInputChar_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputAxis
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_Parm )

bool UGameViewportClient::HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputAxis = NULL;

	if ( ! pFnHandleInputAxis )
		pFnHandleInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 22520 ];

	UGameViewportClient_execHandleInputAxis_Parms HandleInputAxis_Parms;
	HandleInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputAxis_Parms.Key, &Key, 0x8 );
	HandleInputAxis_Parms.Delta = Delta;
	HandleInputAxis_Parms.DeltaTime = DeltaTime;
	HandleInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputAxis, &HandleInputAxis_Parms, NULL );

	return HandleInputAxis_Parms.ReturnValue;
};

// Function Engine.GameViewportClient.HandleInputKey
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UGameViewportClient::HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnHandleInputKey = NULL;

	if ( ! pFnHandleInputKey )
		pFnHandleInputKey = (UFunction*) UObject::GObjObjects()->Data[ 22513 ];

	UGameViewportClient_execHandleInputKey_Parms HandleInputKey_Parms;
	HandleInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &HandleInputKey_Parms.Key, &Key, 0x8 );
	HandleInputKey_Parms.EventType = EventType;
	HandleInputKey_Parms.AmountDepressed = AmountDepressed;
	HandleInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnHandleInputKey, &HandleInputKey_Parms, NULL );

	return HandleInputKey_Parms.ReturnValue;
};

// Function Engine.Settings.UpdateFromURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// struct FString                 URL                            ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateFromURL ( class AGameInfo* Game, struct FString* URL )
{
	static UFunction* pFnUpdateFromURL = NULL;

	if ( ! pFnUpdateFromURL )
		pFnUpdateFromURL = (UFunction*) UObject::GObjObjects()->Data[ 8276 ];

	USettings_execUpdateFromURL_Parms UpdateFromURL_Parms;
	UpdateFromURL_Parms.Game = Game;

	pFnUpdateFromURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFromURL, &UpdateFromURL_Parms, NULL );

	pFnUpdateFromURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &UpdateFromURL_Parms.URL, 0xC );
};

// Function Engine.Settings.BuildURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::BuildURL ( struct FString* URL )
{
	static UFunction* pFnBuildURL = NULL;

	if ( ! pFnBuildURL )
		pFnBuildURL = (UFunction*) UObject::GObjObjects()->Data[ 8277 ];

	USettings_execBuildURL_Parms BuildURL_Parms;

	pFnBuildURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildURL, &BuildURL_Parms, NULL );

	pFnBuildURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &BuildURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendContextsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendContextsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendContextsToURL = NULL;

	if ( ! pFnAppendContextsToURL )
		pFnAppendContextsToURL = (UFunction*) UObject::GObjObjects()->Data[ 8280 ];

	USettings_execAppendContextsToURL_Parms AppendContextsToURL_Parms;

	pFnAppendContextsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendContextsToURL, &AppendContextsToURL_Parms, NULL );

	pFnAppendContextsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendContextsToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendPropertiesToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendPropertiesToURL ( struct FString* URL )
{
	static UFunction* pFnAppendPropertiesToURL = NULL;

	if ( ! pFnAppendPropertiesToURL )
		pFnAppendPropertiesToURL = (UFunction*) UObject::GObjObjects()->Data[ 8282 ];

	USettings_execAppendPropertiesToURL_Parms AppendPropertiesToURL_Parms;

	pFnAppendPropertiesToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendPropertiesToURL, &AppendPropertiesToURL_Parms, NULL );

	pFnAppendPropertiesToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendPropertiesToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.AppendDataBindingsToURL
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::AppendDataBindingsToURL ( struct FString* URL )
{
	static UFunction* pFnAppendDataBindingsToURL = NULL;

	if ( ! pFnAppendDataBindingsToURL )
		pFnAppendDataBindingsToURL = (UFunction*) UObject::GObjObjects()->Data[ 8284 ];

	USettings_execAppendDataBindingsToURL_Parms AppendDataBindingsToURL_Parms;

	pFnAppendDataBindingsToURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendDataBindingsToURL, &AppendDataBindingsToURL_Parms, NULL );

	pFnAppendDataBindingsToURL->FunctionFlags |= 0x400;

	if ( URL )
		memcpy ( URL, &AppendDataBindingsToURL_Parms.URL, 0xC );
};

// Function Engine.Settings.GetQoSAdvertisedStringSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FLocalizedStringSetting > QoSSettings                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings )
{
	static UFunction* pFnGetQoSAdvertisedStringSettings = NULL;

	if ( ! pFnGetQoSAdvertisedStringSettings )
		pFnGetQoSAdvertisedStringSettings = (UFunction*) UObject::GObjObjects()->Data[ 8286 ];

	USettings_execGetQoSAdvertisedStringSettings_Parms GetQoSAdvertisedStringSettings_Parms;

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedStringSettings, &GetQoSAdvertisedStringSettings_Parms, NULL );

	pFnGetQoSAdvertisedStringSettings->FunctionFlags |= 0x400;

	if ( QoSSettings )
		memcpy ( QoSSettings, &GetQoSAdvertisedStringSettings_Parms.QoSSettings, 0xC );
};

// Function Engine.Settings.GetQoSAdvertisedProperties
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FSettingsProperty > QoSProps                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps )
{
	static UFunction* pFnGetQoSAdvertisedProperties = NULL;

	if ( ! pFnGetQoSAdvertisedProperties )
		pFnGetQoSAdvertisedProperties = (UFunction*) UObject::GObjObjects()->Data[ 8288 ];

	USettings_execGetQoSAdvertisedProperties_Parms GetQoSAdvertisedProperties_Parms;

	pFnGetQoSAdvertisedProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetQoSAdvertisedProperties, &GetQoSAdvertisedProperties_Parms, NULL );

	pFnGetQoSAdvertisedProperties->FunctionFlags |= 0x400;

	if ( QoSProps )
		memcpy ( QoSProps, &GetQoSAdvertisedProperties_Parms.QoSProps, 0xC );
};

// Function Engine.Settings.GetRangedPropertyValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool USettings::GetRangedPropertyValue ( int PropertyId, float* OutValue )
{
	static UFunction* pFnGetRangedPropertyValue = NULL;

	if ( ! pFnGetRangedPropertyValue )
		pFnGetRangedPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 8294 ];

	USettings_execGetRangedPropertyValue_Parms GetRangedPropertyValue_Parms;
	GetRangedPropertyValue_Parms.PropertyId = PropertyId;

	pFnGetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRangedPropertyValue, &GetRangedPropertyValue_Parms, NULL );

	pFnGetRangedPropertyValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetRangedPropertyValue_Parms.OutValue;

	return GetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetRangedPropertyValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          NewValue                       ( CPF_Parm )

bool USettings::SetRangedPropertyValue ( int PropertyId, float NewValue )
{
	static UFunction* pFnSetRangedPropertyValue = NULL;

	if ( ! pFnSetRangedPropertyValue )
		pFnSetRangedPropertyValue = (UFunction*) UObject::GObjObjects()->Data[ 8297 ];

	USettings_execSetRangedPropertyValue_Parms SetRangedPropertyValue_Parms;
	SetRangedPropertyValue_Parms.PropertyId = PropertyId;
	SetRangedPropertyValue_Parms.NewValue = NewValue;

	pFnSetRangedPropertyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRangedPropertyValue, &SetRangedPropertyValue_Parms, NULL );

	pFnSetRangedPropertyValue->FunctionFlags |= 0x400;

	return SetRangedPropertyValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          OutMinValue                    ( CPF_Parm | CPF_OutParm )
// float                          OutMaxValue                    ( CPF_Parm | CPF_OutParm )
// float                          RangeIncrement                 ( CPF_Parm | CPF_OutParm )
// unsigned char                  bFormatAsInt                   ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt )
{
	static UFunction* pFnGetPropertyRange = NULL;

	if ( ! pFnGetPropertyRange )
		pFnGetPropertyRange = (UFunction*) UObject::GObjObjects()->Data[ 8301 ];

	USettings_execGetPropertyRange_Parms GetPropertyRange_Parms;
	GetPropertyRange_Parms.PropertyId = PropertyId;

	pFnGetPropertyRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyRange, &GetPropertyRange_Parms, NULL );

	pFnGetPropertyRange->FunctionFlags |= 0x400;

	if ( OutMinValue )
		*OutMinValue = GetPropertyRange_Parms.OutMinValue;

	if ( OutMaxValue )
		*OutMaxValue = GetPropertyRange_Parms.OutMaxValue;

	if ( RangeIncrement )
		*RangeIncrement = GetPropertyRange_Parms.RangeIncrement;

	if ( bFormatAsInt )
		*bFormatAsInt = GetPropertyRange_Parms.bFormatAsInt;

	return GetPropertyRange_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyMappingType
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// unsigned char                  OutType                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyMappingType ( int PropertyId, unsigned char* OutType )
{
	static UFunction* pFnGetPropertyMappingType = NULL;

	if ( ! pFnGetPropertyMappingType )
		pFnGetPropertyMappingType = (UFunction*) UObject::GObjObjects()->Data[ 8305 ];

	USettings_execGetPropertyMappingType_Parms GetPropertyMappingType_Parms;
	GetPropertyMappingType_Parms.PropertyId = PropertyId;

	pFnGetPropertyMappingType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyMappingType, &GetPropertyMappingType_Parms, NULL );

	pFnGetPropertyMappingType->FunctionFlags |= 0x400;

	if ( OutType )
		*OutType = GetPropertyMappingType_Parms.OutType;

	return GetPropertyMappingType_Parms.ReturnValue;
};

// Function Engine.Settings.HasStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SettingId                      ( CPF_Parm )

bool USettings::HasStringSetting ( int SettingId )
{
	static UFunction* pFnHasStringSetting = NULL;

	if ( ! pFnHasStringSetting )
		pFnHasStringSetting = (UFunction*) UObject::GObjObjects()->Data[ 8312 ];

	USettings_execHasStringSetting_Parms HasStringSetting_Parms;
	HasStringSetting_Parms.SettingId = SettingId;

	pFnHasStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasStringSetting, &HasStringSetting_Parms, NULL );

	pFnHasStringSetting->FunctionFlags |= 0x400;

	return HasStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.HasProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

bool USettings::HasProperty ( int PropertyId )
{
	static UFunction* pFnHasProperty = NULL;

	if ( ! pFnHasProperty )
		pFnHasProperty = (UFunction*) UObject::GObjObjects()->Data[ 8318 ];

	USettings_execHasProperty_Parms HasProperty_Parms;
	HasProperty_Parms.PropertyId = PropertyId;

	pFnHasProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasProperty, &HasProperty_Parms, NULL );

	pFnHasProperty->FunctionFlags |= 0x400;

	return HasProperty_Parms.ReturnValue;
};

// Function Engine.Settings.UpdateProperties
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FSettingsProperty > Props                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props )
{
	static UFunction* pFnUpdateProperties = NULL;

	if ( ! pFnUpdateProperties )
		pFnUpdateProperties = (UFunction*) UObject::GObjObjects()->Data[ 8321 ];

	USettings_execUpdateProperties_Parms UpdateProperties_Parms;
	UpdateProperties_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateProperties, &UpdateProperties_Parms, NULL );

	pFnUpdateProperties->FunctionFlags |= 0x400;

	if ( Props )
		memcpy ( Props, &UpdateProperties_Parms.Props, 0xC );
};

// Function Engine.Settings.UpdateStringSettings
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShouldAddIfMissing            ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FLocalizedStringSetting > Settings                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings )
{
	static UFunction* pFnUpdateStringSettings = NULL;

	if ( ! pFnUpdateStringSettings )
		pFnUpdateStringSettings = (UFunction*) UObject::GObjObjects()->Data[ 8324 ];

	USettings_execUpdateStringSettings_Parms UpdateStringSettings_Parms;
	UpdateStringSettings_Parms.bShouldAddIfMissing = bShouldAddIfMissing;

	pFnUpdateStringSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateStringSettings, &UpdateStringSettings_Parms, NULL );

	pFnUpdateStringSettings->FunctionFlags |= 0x400;

	if ( Settings )
		memcpy ( Settings, &UpdateStringSettings_Parms.Settings, 0xC );
};

// Function Engine.Settings.GetPropertyType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

unsigned char USettings::GetPropertyType ( int PropertyId )
{
	static UFunction* pFnGetPropertyType = NULL;

	if ( ! pFnGetPropertyType )
		pFnGetPropertyType = (UFunction*) UObject::GObjObjects()->Data[ 8328 ];

	USettings_execGetPropertyType_Parms GetPropertyType_Parms;
	GetPropertyType_Parms.PropertyId = PropertyId;

	pFnGetPropertyType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyType, &GetPropertyType_Parms, NULL );

	pFnGetPropertyType->FunctionFlags |= 0x400;

	return GetPropertyType_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyValueId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyValueId ( int PropertyId, int* ValueId )
{
	static UFunction* pFnGetPropertyValueId = NULL;

	if ( ! pFnGetPropertyValueId )
		pFnGetPropertyValueId = (UFunction*) UObject::GObjObjects()->Data[ 8332 ];

	USettings_execGetPropertyValueId_Parms GetPropertyValueId_Parms;
	GetPropertyValueId_Parms.PropertyId = PropertyId;

	pFnGetPropertyValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyValueId, &GetPropertyValueId_Parms, NULL );

	pFnGetPropertyValueId->FunctionFlags |= 0x400;

	if ( ValueId )
		*ValueId = GetPropertyValueId_Parms.ValueId;

	return GetPropertyValueId_Parms.ReturnValue;
};

// Function Engine.Settings.SetPropertyValueId
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            ValueId                        ( CPF_Parm )

bool USettings::SetPropertyValueId ( int PropertyId, int ValueId )
{
	static UFunction* pFnSetPropertyValueId = NULL;

	if ( ! pFnSetPropertyValueId )
		pFnSetPropertyValueId = (UFunction*) UObject::GObjObjects()->Data[ 8335 ];

	USettings_execSetPropertyValueId_Parms SetPropertyValueId_Parms;
	SetPropertyValueId_Parms.PropertyId = PropertyId;
	SetPropertyValueId_Parms.ValueId = ValueId;

	pFnSetPropertyValueId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyValueId, &SetPropertyValueId_Parms, NULL );

	pFnSetPropertyValueId->FunctionFlags |= 0x400;

	return SetPropertyValueId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::GetStringProperty ( int PropertyId, struct FString* Value )
{
	static UFunction* pFnGetStringProperty = NULL;

	if ( ! pFnGetStringProperty )
		pFnGetStringProperty = (UFunction*) UObject::GObjObjects()->Data[ 8339 ];

	USettings_execGetStringProperty_Parms GetStringProperty_Parms;
	GetStringProperty_Parms.PropertyId = PropertyId;

	pFnGetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringProperty, &GetStringProperty_Parms, NULL );

	pFnGetStringProperty->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &GetStringProperty_Parms.Value, 0xC );

	return GetStringProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void USettings::SetStringProperty ( int PropertyId, struct FString Value )
{
	static UFunction* pFnSetStringProperty = NULL;

	if ( ! pFnSetStringProperty )
		pFnSetStringProperty = (UFunction*) UObject::GObjObjects()->Data[ 8343 ];

	USettings_execSetStringProperty_Parms SetStringProperty_Parms;
	SetStringProperty_Parms.PropertyId = PropertyId;
	memcpy ( &SetStringProperty_Parms.Value, &Value, 0xC );

	pFnSetStringProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringProperty, &SetStringProperty_Parms, NULL );

	pFnSetStringProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetIntProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetIntProperty ( int PropertyId, int* Value )
{
	static UFunction* pFnGetIntProperty = NULL;

	if ( ! pFnGetIntProperty )
		pFnGetIntProperty = (UFunction*) UObject::GObjObjects()->Data[ 8347 ];

	USettings_execGetIntProperty_Parms GetIntProperty_Parms;
	GetIntProperty_Parms.PropertyId = PropertyId;

	pFnGetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntProperty, &GetIntProperty_Parms, NULL );

	pFnGetIntProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetIntProperty_Parms.Value;

	return GetIntProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetIntProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void USettings::SetIntProperty ( int PropertyId, int Value )
{
	static UFunction* pFnSetIntProperty = NULL;

	if ( ! pFnSetIntProperty )
		pFnSetIntProperty = (UFunction*) UObject::GObjObjects()->Data[ 8350 ];

	USettings_execSetIntProperty_Parms SetIntProperty_Parms;
	SetIntProperty_Parms.PropertyId = PropertyId;
	SetIntProperty_Parms.Value = Value;

	pFnSetIntProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntProperty, &SetIntProperty_Parms, NULL );

	pFnSetIntProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetFloatProperty
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm | CPF_OutParm )

bool USettings::GetFloatProperty ( int PropertyId, float* Value )
{
	static UFunction* pFnGetFloatProperty = NULL;

	if ( ! pFnGetFloatProperty )
		pFnGetFloatProperty = (UFunction*) UObject::GObjObjects()->Data[ 8354 ];

	USettings_execGetFloatProperty_Parms GetFloatProperty_Parms;
	GetFloatProperty_Parms.PropertyId = PropertyId;

	pFnGetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatProperty, &GetFloatProperty_Parms, NULL );

	pFnGetFloatProperty->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetFloatProperty_Parms.Value;

	return GetFloatProperty_Parms.ReturnValue;
};

// Function Engine.Settings.SetFloatProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            PropertyId                     ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void USettings::SetFloatProperty ( int PropertyId, float Value )
{
	static UFunction* pFnSetFloatProperty = NULL;

	if ( ! pFnSetFloatProperty )
		pFnSetFloatProperty = (UFunction*) UObject::GObjObjects()->Data[ 8357 ];

	USettings_execSetFloatProperty_Parms SetFloatProperty_Parms;
	SetFloatProperty_Parms.PropertyId = PropertyId;
	SetFloatProperty_Parms.Value = Value;

	pFnSetFloatProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatProperty, &SetFloatProperty_Parms, NULL );

	pFnSetFloatProperty->FunctionFlags |= 0x400;
};

// Function Engine.Settings.SetPropertyFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue )
{
	static UFunction* pFnSetPropertyFromStringByName = NULL;

	if ( ! pFnSetPropertyFromStringByName )
		pFnSetPropertyFromStringByName = (UFunction*) UObject::GObjObjects()->Data[ 8361 ];

	USettings_execSetPropertyFromStringByName_Parms SetPropertyFromStringByName_Parms;
	memcpy ( &SetPropertyFromStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnSetPropertyFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPropertyFromStringByName, &SetPropertyFromStringByName_Parms, NULL );

	pFnSetPropertyFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetPropertyFromStringByName_Parms.NewValue, 0xC );

	return SetPropertyFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsStringByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   PropertyName                   ( CPF_Parm )

struct FString USettings::GetPropertyAsStringByName ( struct FName PropertyName )
{
	static UFunction* pFnGetPropertyAsStringByName = NULL;

	if ( ! pFnGetPropertyAsStringByName )
		pFnGetPropertyAsStringByName = (UFunction*) UObject::GObjObjects()->Data[ 8364 ];

	USettings_execGetPropertyAsStringByName_Parms GetPropertyAsStringByName_Parms;
	memcpy ( &GetPropertyAsStringByName_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyAsStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsStringByName, &GetPropertyAsStringByName_Parms, NULL );

	pFnGetPropertyAsStringByName->FunctionFlags |= 0x400;

	return GetPropertyAsStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyAsString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyAsString ( int PropertyId )
{
	static UFunction* pFnGetPropertyAsString = NULL;

	if ( ! pFnGetPropertyAsString )
		pFnGetPropertyAsString = (UFunction*) UObject::GObjObjects()->Data[ 8368 ];

	USettings_execGetPropertyAsString_Parms GetPropertyAsString_Parms;
	GetPropertyAsString_Parms.PropertyId = PropertyId;

	pFnGetPropertyAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyAsString, &GetPropertyAsString_Parms, NULL );

	pFnGetPropertyAsString->FunctionFlags |= 0x400;

	return GetPropertyAsString_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            PropertyId                     ( CPF_Parm )

struct FString USettings::GetPropertyColumnHeader ( int PropertyId )
{
	static UFunction* pFnGetPropertyColumnHeader = NULL;

	if ( ! pFnGetPropertyColumnHeader )
		pFnGetPropertyColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 8371 ];

	USettings_execGetPropertyColumnHeader_Parms GetPropertyColumnHeader_Parms;
	GetPropertyColumnHeader_Parms.PropertyId = PropertyId;

	pFnGetPropertyColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyColumnHeader, &GetPropertyColumnHeader_Parms, NULL );

	pFnGetPropertyColumnHeader->FunctionFlags |= 0x400;

	return GetPropertyColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PropertyId                     ( CPF_Parm )

struct FName USettings::GetPropertyName ( int PropertyId )
{
	static UFunction* pFnGetPropertyName = NULL;

	if ( ! pFnGetPropertyName )
		pFnGetPropertyName = (UFunction*) UObject::GObjObjects()->Data[ 8374 ];

	USettings_execGetPropertyName_Parms GetPropertyName_Parms;
	GetPropertyName_Parms.PropertyId = PropertyId;

	pFnGetPropertyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyName, &GetPropertyName_Parms, NULL );

	pFnGetPropertyName->FunctionFlags |= 0x400;

	return GetPropertyName_Parms.ReturnValue;
};

// Function Engine.Settings.GetPropertyId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   PropertyName                   ( CPF_Parm )
// int                            PropertyId                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetPropertyId ( struct FName PropertyName, int* PropertyId )
{
	static UFunction* pFnGetPropertyId = NULL;

	if ( ! pFnGetPropertyId )
		pFnGetPropertyId = (UFunction*) UObject::GObjObjects()->Data[ 8377 ];

	USettings_execGetPropertyId_Parms GetPropertyId_Parms;
	memcpy ( &GetPropertyId_Parms.PropertyName, &PropertyName, 0x8 );

	pFnGetPropertyId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPropertyId, &GetPropertyId_Parms, NULL );

	pFnGetPropertyId->FunctionFlags |= 0x400;

	if ( PropertyId )
		*PropertyId = GetPropertyId_Parms.PropertyId;

	return GetPropertyId_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueFromStringByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// struct FString                 NewValue                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue )
{
	static UFunction* pFnSetStringSettingValueFromStringByName = NULL;

	if ( ! pFnSetStringSettingValueFromStringByName )
		pFnSetStringSettingValueFromStringByName = (UFunction*) UObject::GObjObjects()->Data[ 8380 ];

	USettings_execSetStringSettingValueFromStringByName_Parms SetStringSettingValueFromStringByName_Parms;
	memcpy ( &SetStringSettingValueFromStringByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueFromStringByName, &SetStringSettingValueFromStringByName_Parms, NULL );

	pFnSetStringSettingValueFromStringByName->FunctionFlags |= 0x400;

	if ( NewValue )
		memcpy ( NewValue, &SetStringSettingValueFromStringByName_Parms.NewValue, 0xC );

	return SetStringSettingValueFromStringByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueNameByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )

struct FName USettings::GetStringSettingValueNameByName ( struct FName StringSettingName )
{
	static UFunction* pFnGetStringSettingValueNameByName = NULL;

	if ( ! pFnGetStringSettingValueNameByName )
		pFnGetStringSettingValueNameByName = (UFunction*) UObject::GObjObjects()->Data[ 8384 ];

	USettings_execGetStringSettingValueNameByName_Parms GetStringSettingValueNameByName_Parms;
	memcpy ( &GetStringSettingValueNameByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueNameByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNameByName, &GetStringSettingValueNameByName_Parms, NULL );

	pFnGetStringSettingValueNameByName->FunctionFlags |= 0x400;

	return GetStringSettingValueNameByName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )

struct FName USettings::GetStringSettingValueName ( int StringSettingId, int ValueIndex )
{
	static UFunction* pFnGetStringSettingValueName = NULL;

	if ( ! pFnGetStringSettingValueName )
		pFnGetStringSettingValueName = (UFunction*) UObject::GObjObjects()->Data[ 8388 ];

	USettings_execGetStringSettingValueName_Parms GetStringSettingValueName_Parms;
	GetStringSettingValueName_Parms.StringSettingId = StringSettingId;
	GetStringSettingValueName_Parms.ValueIndex = ValueIndex;

	pFnGetStringSettingValueName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueName, &GetStringSettingValueName_Parms, NULL );

	pFnGetStringSettingValueName->FunctionFlags |= 0x400;

	return GetStringSettingValueName_Parms.ReturnValue;
};

// Function Engine.Settings.IsWildcardStringSetting
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

bool USettings::IsWildcardStringSetting ( int StringSettingId )
{
	static UFunction* pFnIsWildcardStringSetting = NULL;

	if ( ! pFnIsWildcardStringSetting )
		pFnIsWildcardStringSetting = (UFunction*) UObject::GObjObjects()->Data[ 8391 ];

	USettings_execIsWildcardStringSetting_Parms IsWildcardStringSetting_Parms;
	IsWildcardStringSetting_Parms.StringSettingId = StringSettingId;

	pFnIsWildcardStringSetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWildcardStringSetting, &IsWildcardStringSetting_Parms, NULL );

	pFnIsWildcardStringSetting->FunctionFlags |= 0x400;

	return IsWildcardStringSetting_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingColumnHeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            StringSettingId                ( CPF_Parm )

struct FString USettings::GetStringSettingColumnHeader ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingColumnHeader = NULL;

	if ( ! pFnGetStringSettingColumnHeader )
		pFnGetStringSettingColumnHeader = (UFunction*) UObject::GObjObjects()->Data[ 8395 ];

	USettings_execGetStringSettingColumnHeader_Parms GetStringSettingColumnHeader_Parms;
	GetStringSettingColumnHeader_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingColumnHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingColumnHeader, &GetStringSettingColumnHeader_Parms, NULL );

	pFnGetStringSettingColumnHeader->FunctionFlags |= 0x400;

	return GetStringSettingColumnHeader_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )

struct FName USettings::GetStringSettingName ( int StringSettingId )
{
	static UFunction* pFnGetStringSettingName = NULL;

	if ( ! pFnGetStringSettingName )
		pFnGetStringSettingName = (UFunction*) UObject::GObjObjects()->Data[ 8398 ];

	USettings_execGetStringSettingName_Parms GetStringSettingName_Parms;
	GetStringSettingName_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingName, &GetStringSettingName_Parms, NULL );

	pFnGetStringSettingName->FunctionFlags |= 0x400;

	return GetStringSettingName_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingId
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            StringSettingId                ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingId ( struct FName StringSettingName, int* StringSettingId )
{
	static UFunction* pFnGetStringSettingId = NULL;

	if ( ! pFnGetStringSettingId )
		pFnGetStringSettingId = (UFunction*) UObject::GObjObjects()->Data[ 8401 ];

	USettings_execGetStringSettingId_Parms GetStringSettingId_Parms;
	memcpy ( &GetStringSettingId_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingId, &GetStringSettingId_Parms, NULL );

	pFnGetStringSettingId->FunctionFlags |= 0x400;

	if ( StringSettingId )
		*StringSettingId = GetStringSettingId_Parms.StringSettingId;

	return GetStringSettingId_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValueByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValueByName = NULL;

	if ( ! pFnGetStringSettingValueByName )
		pFnGetStringSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 8404 ];

	USettings_execGetStringSettingValueByName_Parms GetStringSettingValueByName_Parms;
	memcpy ( &GetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );

	pFnGetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueByName, &GetStringSettingValueByName_Parms, NULL );

	pFnGetStringSettingValueByName->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValueByName_Parms.ValueIndex;

	return GetStringSettingValueByName_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValueByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   StringSettingName              ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_Parm )

void USettings::SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValueByName = NULL;

	if ( ! pFnSetStringSettingValueByName )
		pFnSetStringSettingValueByName = (UFunction*) UObject::GObjObjects()->Data[ 8408 ];

	USettings_execSetStringSettingValueByName_Parms SetStringSettingValueByName_Parms;
	memcpy ( &SetStringSettingValueByName_Parms.StringSettingName, &StringSettingName, 0x8 );
	SetStringSettingValueByName_Parms.ValueIndex = ValueIndex;
	SetStringSettingValueByName_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValueByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValueByName, &SetStringSettingValueByName_Parms, NULL );

	pFnSetStringSettingValueByName->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetStringSettingValueNames
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// TArray< struct FIdToStringMapping > Values                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USettings::GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values )
{
	static UFunction* pFnGetStringSettingValueNames = NULL;

	if ( ! pFnGetStringSettingValueNames )
		pFnGetStringSettingValueNames = (UFunction*) UObject::GObjObjects()->Data[ 8412 ];

	USettings_execGetStringSettingValueNames_Parms GetStringSettingValueNames_Parms;
	GetStringSettingValueNames_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValueNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValueNames, &GetStringSettingValueNames_Parms, NULL );

	pFnGetStringSettingValueNames->FunctionFlags |= 0x400;

	if ( Values )
		memcpy ( Values, &GetStringSettingValueNames_Parms.Values, 0xC );

	return GetStringSettingValueNames_Parms.ReturnValue;
};

// Function Engine.Settings.IncrementStringSettingValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            Direction                      ( CPF_Parm )
// unsigned long                  bShouldWrap                    ( CPF_Parm )

bool USettings::IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap )
{
	static UFunction* pFnIncrementStringSettingValue = NULL;

	if ( ! pFnIncrementStringSettingValue )
		pFnIncrementStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 8416 ];

	USettings_execIncrementStringSettingValue_Parms IncrementStringSettingValue_Parms;
	IncrementStringSettingValue_Parms.StringSettingId = StringSettingId;
	IncrementStringSettingValue_Parms.Direction = Direction;
	IncrementStringSettingValue_Parms.bShouldWrap = bShouldWrap;

	pFnIncrementStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementStringSettingValue, &IncrementStringSettingValue_Parms, NULL );

	pFnIncrementStringSettingValue->FunctionFlags |= 0x400;

	return IncrementStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.GetStringSettingValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm | CPF_OutParm )

bool USettings::GetStringSettingValue ( int StringSettingId, int* ValueIndex )
{
	static UFunction* pFnGetStringSettingValue = NULL;

	if ( ! pFnGetStringSettingValue )
		pFnGetStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 8424 ];

	USettings_execGetStringSettingValue_Parms GetStringSettingValue_Parms;
	GetStringSettingValue_Parms.StringSettingId = StringSettingId;

	pFnGetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringSettingValue, &GetStringSettingValue_Parms, NULL );

	pFnGetStringSettingValue->FunctionFlags |= 0x400;

	if ( ValueIndex )
		*ValueIndex = GetStringSettingValue_Parms.ValueIndex;

	return GetStringSettingValue_Parms.ReturnValue;
};

// Function Engine.Settings.SetStringSettingValue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// int                            StringSettingId                ( CPF_Parm )
// int                            ValueIndex                     ( CPF_Parm )
// unsigned long                  bShouldAutoAdd                 ( CPF_OptionalParm | CPF_Parm )

void USettings::SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd )
{
	static UFunction* pFnSetStringSettingValue = NULL;

	if ( ! pFnSetStringSettingValue )
		pFnSetStringSettingValue = (UFunction*) UObject::GObjObjects()->Data[ 8429 ];

	USettings_execSetStringSettingValue_Parms SetStringSettingValue_Parms;
	SetStringSettingValue_Parms.StringSettingId = StringSettingId;
	SetStringSettingValue_Parms.ValueIndex = ValueIndex;
	SetStringSettingValue_Parms.bShouldAutoAdd = bShouldAutoAdd;

	pFnSetStringSettingValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringSettingValue, &SetStringSettingValue_Parms, NULL );

	pFnSetStringSettingValue->FunctionFlags |= 0x400;
};

// Function Engine.Settings.GetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// int                            OutInt1                        ( CPF_Parm | CPF_OutParm )
// int                            OutInt2                        ( CPF_Parm | CPF_OutParm )

void USettings::GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 )
{
	static UFunction* pFnGetSettingsDataDateTime = NULL;

	if ( ! pFnGetSettingsDataDateTime )
		pFnGetSettingsDataDateTime = (UFunction*) UObject::GObjObjects()->Data[ 8433 ];

	USettings_execGetSettingsDataDateTime_Parms GetSettingsDataDateTime_Parms;

	pFnGetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataDateTime, &GetSettingsDataDateTime_Parms, NULL );

	pFnGetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataDateTime_Parms.Data, 0xC );

	if ( OutInt1 )
		*OutInt1 = GetSettingsDataDateTime_Parms.OutInt1;

	if ( OutInt2 )
		*OutInt2 = GetSettingsDataDateTime_Parms.OutInt2;
};

// Function Engine.Settings.GetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        OutBlob                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob )
{
	static UFunction* pFnGetSettingsDataBlob = NULL;

	if ( ! pFnGetSettingsDataBlob )
		pFnGetSettingsDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 8437 ];

	USettings_execGetSettingsDataBlob_Parms GetSettingsDataBlob_Parms;

	pFnGetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataBlob, &GetSettingsDataBlob_Parms, NULL );

	pFnGetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataBlob_Parms.Data, 0xC );

	if ( OutBlob )
		memcpy ( OutBlob, &GetSettingsDataBlob_Parms.OutBlob, 0xC );
};

// Function Engine.Settings.GetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

int USettings::GetSettingsDataInt ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataInt = NULL;

	if ( ! pFnGetSettingsDataInt )
		pFnGetSettingsDataInt = (UFunction*) UObject::GObjObjects()->Data[ 8441 ];

	USettings_execGetSettingsDataInt_Parms GetSettingsDataInt_Parms;

	pFnGetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataInt, &GetSettingsDataInt_Parms, NULL );

	pFnGetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataInt_Parms.Data, 0xC );

	return GetSettingsDataInt_Parms.ReturnValue;
};

// Function Engine.Settings.GetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

float USettings::GetSettingsDataFloat ( struct FSettingsData* Data )
{
	static UFunction* pFnGetSettingsDataFloat = NULL;

	if ( ! pFnGetSettingsDataFloat )
		pFnGetSettingsDataFloat = (UFunction*) UObject::GObjObjects()->Data[ 8445 ];

	USettings_execGetSettingsDataFloat_Parms GetSettingsDataFloat_Parms;

	pFnGetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSettingsDataFloat, &GetSettingsDataFloat_Parms, NULL );

	pFnGetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetSettingsDataFloat_Parms.Data, 0xC );

	return GetSettingsDataFloat_Parms.ReturnValue;
};

// Function Engine.Settings.EmptySettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::EmptySettingsData ( struct FSettingsData* Data )
{
	static UFunction* pFnEmptySettingsData = NULL;

	if ( ! pFnEmptySettingsData )
		pFnEmptySettingsData = (UFunction*) UObject::GObjObjects()->Data[ 8448 ];

	USettings_execEmptySettingsData_Parms EmptySettingsData_Parms;

	pFnEmptySettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEmptySettingsData, &EmptySettingsData_Parms, NULL );

	pFnEmptySettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &EmptySettingsData_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// struct FSettingsData           Data2Copy                      ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy )
{
	static UFunction* pFnSetSettingsData = NULL;

	if ( ! pFnSetSettingsData )
		pFnSetSettingsData = (UFunction*) UObject::GObjObjects()->Data[ 8451 ];

	USettings_execSetSettingsData_Parms SetSettingsData_Parms;

	pFnSetSettingsData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsData, &SetSettingsData_Parms, NULL );

	pFnSetSettingsData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsData_Parms.Data, 0xC );

	if ( Data2Copy )
		memcpy ( Data2Copy, &SetSettingsData_Parms.Data2Copy, 0xC );
};

// Function Engine.Settings.SetSettingsDataBlob
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        InBlob                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USettings::SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob )
{
	static UFunction* pFnSetSettingsDataBlob = NULL;

	if ( ! pFnSetSettingsDataBlob )
		pFnSetSettingsDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 8453 ];

	USettings_execSetSettingsDataBlob_Parms SetSettingsDataBlob_Parms;

	pFnSetSettingsDataBlob->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataBlob, &SetSettingsDataBlob_Parms, NULL );

	pFnSetSettingsDataBlob->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataBlob_Parms.Data, 0xC );

	if ( InBlob )
		memcpy ( InBlob, &SetSettingsDataBlob_Parms.InBlob, 0xC );
};

// Function Engine.Settings.SetSettingsDataDateTime
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt1                         ( CPF_Parm )
// int                            InInt2                         ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataDateTime = NULL;

	if ( ! pFnSetSettingsDataDateTime )
		pFnSetSettingsDataDateTime = (UFunction*) UObject::GObjObjects()->Data[ 8456 ];

	USettings_execSetSettingsDataDateTime_Parms SetSettingsDataDateTime_Parms;
	SetSettingsDataDateTime_Parms.InInt1 = InInt1;
	SetSettingsDataDateTime_Parms.InInt2 = InInt2;

	pFnSetSettingsDataDateTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataDateTime, &SetSettingsDataDateTime_Parms, NULL );

	pFnSetSettingsDataDateTime->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataDateTime_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataInt
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// int                            InInt                          ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataInt ( int InInt, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataInt = NULL;

	if ( ! pFnSetSettingsDataInt )
		pFnSetSettingsDataInt = (UFunction*) UObject::GObjObjects()->Data[ 8460 ];

	USettings_execSetSettingsDataInt_Parms SetSettingsDataInt_Parms;
	SetSettingsDataInt_Parms.InInt = InInt;

	pFnSetSettingsDataInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataInt, &SetSettingsDataInt_Parms, NULL );

	pFnSetSettingsDataInt->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataInt_Parms.Data, 0xC );
};

// Function Engine.Settings.SetSettingsDataFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          InFloat                        ( CPF_Parm )
// struct FSettingsData           Data                           ( CPF_Parm | CPF_OutParm )

void USettings::SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data )
{
	static UFunction* pFnSetSettingsDataFloat = NULL;

	if ( ! pFnSetSettingsDataFloat )
		pFnSetSettingsDataFloat = (UFunction*) UObject::GObjObjects()->Data[ 8464 ];

	USettings_execSetSettingsDataFloat_Parms SetSettingsDataFloat_Parms;
	SetSettingsDataFloat_Parms.InFloat = InFloat;

	pFnSetSettingsDataFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSettingsDataFloat, &SetSettingsDataFloat_Parms, NULL );

	pFnSetSettingsDataFloat->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetSettingsDataFloat_Parms.Data, 0xC );
};

// Function Engine.OnlineGameSearch.CreateOnlineGameSettings
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSettings* UOnlineGameSearch::eventCreateOnlineGameSettings ( )
{
	static UFunction* pFnCreateOnlineGameSettings = NULL;

	if ( ! pFnCreateOnlineGameSettings )
		pFnCreateOnlineGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 10272 ];

	UOnlineGameSearch_eventCreateOnlineGameSettings_Parms CreateOnlineGameSettings_Parms;

	this->ProcessEvent ( pFnCreateOnlineGameSettings, &CreateOnlineGameSettings_Parms, NULL );

	return CreateOnlineGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlineGameSearch.SortSearchResults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UOnlineGameSearch::eventSortSearchResults ( )
{
	static UFunction* pFnSortSearchResults = NULL;

	if ( ! pFnSortSearchResults )
		pFnSortSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 10273 ];

	UOnlineGameSearch_eventSortSearchResults_Parms SortSearchResults_Parms;

	pFnSortSearchResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortSearchResults, &SortSearchResults_Parms, NULL );

	pFnSortSearchResults->FunctionFlags |= 0x400;
};

// Function Engine.OnlineGameSearch.SetSkillOverride
// [0x00420002] 
// Parameters infos:
// int                            LeaderboardId                  ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineGameSearch::SetSkillOverride ( int LeaderboardId, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnSetSkillOverride = NULL;

	if ( ! pFnSetSkillOverride )
		pFnSetSkillOverride = (UFunction*) UObject::GObjObjects()->Data[ 10276 ];

	UOnlineGameSearch_execSetSkillOverride_Parms SetSkillOverride_Parms;
	SetSkillOverride_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnSetSkillOverride, &SetSkillOverride_Parms, NULL );

	if ( Players )
		memcpy ( Players, &SetSkillOverride_Parms.Players, 0xC );
};

// Function Engine.Surface.GetSurfaceHeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceHeight ( )
{
	static UFunction* pFnGetSurfaceHeight = NULL;

	if ( ! pFnGetSurfaceHeight )
		pFnGetSurfaceHeight = (UFunction*) UObject::GObjObjects()->Data[ 15947 ];

	USurface_execGetSurfaceHeight_Parms GetSurfaceHeight_Parms;

	pFnGetSurfaceHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceHeight, &GetSurfaceHeight_Parms, NULL );

	pFnGetSurfaceHeight->FunctionFlags |= 0x400;

	return GetSurfaceHeight_Parms.ReturnValue;
};

// Function Engine.Surface.GetSurfaceWidth
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USurface::GetSurfaceWidth ( )
{
	static UFunction* pFnGetSurfaceWidth = NULL;

	if ( ! pFnGetSurfaceWidth )
		pFnGetSurfaceWidth = (UFunction*) UObject::GObjObjects()->Data[ 15945 ];

	USurface_execGetSurfaceWidth_Parms GetSurfaceWidth_Parms;

	pFnGetSurfaceWidth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurfaceWidth, &GetSurfaceWidth_Parms, NULL );

	pFnGetSurfaceWidth->FunctionFlags |= 0x400;

	return GetSurfaceWidth_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetOrCreateInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstance*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterialInstance* UMaterialInterface::GetOrCreateInstance ( )
{
	static UFunction* pFnGetOrCreateInstance = NULL;

	if ( ! pFnGetOrCreateInstance )
		pFnGetOrCreateInstance = (UFunction*) UObject::GObjObjects()->Data[ 18228 ];

	UMaterialInterface_execGetOrCreateInstance_Parms GetOrCreateInstance_Parms;

	pFnGetOrCreateInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrCreateInstance, &GetOrCreateInstance_Parms, NULL );

	pFnGetOrCreateInstance->FunctionFlags |= 0x400;

	return GetOrCreateInstance_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  OverrideForceMiplevelsToBeResident ( CPF_Parm )
// unsigned long                  bForceMiplevelsToBeResidentValue ( CPF_Parm )
// float                          ForceDuration                  ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void UMaterialInterface::SetForceMipLevelsToBeResident ( unsigned long OverrideForceMiplevelsToBeResident, unsigned long bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups )
{
	static UFunction* pFnSetForceMipLevelsToBeResident = NULL;

	if ( ! pFnSetForceMipLevelsToBeResident )
		pFnSetForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 18223 ];

	UMaterialInterface_execSetForceMipLevelsToBeResident_Parms SetForceMipLevelsToBeResident_Parms;
	SetForceMipLevelsToBeResident_Parms.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	SetForceMipLevelsToBeResident_Parms.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	SetForceMipLevelsToBeResident_Parms.ForceDuration = ForceDuration;
	SetForceMipLevelsToBeResident_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceMipLevelsToBeResident, &SetForceMipLevelsToBeResident_Parms, NULL );

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInterface.GetMobileVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetMobileVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetMobileVectorParameterValue = NULL;

	if ( ! pFnGetMobileVectorParameterValue )
		pFnGetMobileVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18219 ];

	UMaterialInterface_execGetMobileVectorParameterValue_Parms GetMobileVectorParameterValue_Parms;
	memcpy ( &GetMobileVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMobileVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMobileVectorParameterValue, &GetMobileVectorParameterValue_Parms, NULL );

	pFnGetMobileVectorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetMobileVectorParameterValue_Parms.OutValue, 0x10 );

	return GetMobileVectorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetMobileTextureParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetMobileTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue )
{
	static UFunction* pFnGetMobileTextureParameterValue = NULL;

	if ( ! pFnGetMobileTextureParameterValue )
		pFnGetMobileTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18215 ];

	UMaterialInterface_execGetMobileTextureParameterValue_Parms GetMobileTextureParameterValue_Parms;
	memcpy ( &GetMobileTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMobileTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMobileTextureParameterValue, &GetMobileTextureParameterValue_Parms, NULL );

	pFnGetMobileTextureParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetMobileTextureParameterValue_Parms.OutValue;

	return GetMobileTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetMobileScalarParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetMobileScalarParameterValue ( struct FName ParameterName, float* OutValue )
{
	static UFunction* pFnGetMobileScalarParameterValue = NULL;

	if ( ! pFnGetMobileScalarParameterValue )
		pFnGetMobileScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18211 ];

	UMaterialInterface_execGetMobileScalarParameterValue_Parms GetMobileScalarParameterValue_Parms;
	memcpy ( &GetMobileScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMobileScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMobileScalarParameterValue, &GetMobileScalarParameterValue_Parms, NULL );

	pFnGetMobileScalarParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetMobileScalarParameterValue_Parms.OutValue;

	return GetMobileScalarParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetGroupName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetGroupName ( struct FName ParameterName, struct FName* GroupName )
{
	static UFunction* pFnGetGroupName = NULL;

	if ( ! pFnGetGroupName )
		pFnGetGroupName = (UFunction*) UObject::GObjObjects()->Data[ 18207 ];

	UMaterialInterface_execGetGroupName_Parms GetGroupName_Parms;
	memcpy ( &GetGroupName_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetGroupName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupName, &GetGroupName_Parms, NULL );

	pFnGetGroupName->FunctionFlags |= 0x400;

	if ( GroupName )
		memcpy ( GroupName, &GetGroupName_Parms.GroupName, 0x8 );

	return GetGroupName_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetLinearColorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveLinearColor OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetLinearColorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveLinearColor* OutValue )
{
	static UFunction* pFnGetLinearColorCurveParameterValue = NULL;

	if ( ! pFnGetLinearColorCurveParameterValue )
		pFnGetLinearColorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18203 ];

	UMaterialInterface_execGetLinearColorCurveParameterValue_Parms GetLinearColorCurveParameterValue_Parms;
	memcpy ( &GetLinearColorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetLinearColorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLinearColorCurveParameterValue, &GetLinearColorCurveParameterValue_Parms, NULL );

	pFnGetLinearColorCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetLinearColorCurveParameterValue_Parms.OutValue, 0x10 );

	return GetLinearColorCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetLinearColorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetLinearColorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetLinearColorParameterValue = NULL;

	if ( ! pFnGetLinearColorParameterValue )
		pFnGetLinearColorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18199 ];

	UMaterialInterface_execGetLinearColorParameterValue_Parms GetLinearColorParameterValue_Parms;
	memcpy ( &GetLinearColorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetLinearColorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLinearColorParameterValue, &GetLinearColorParameterValue_Parms, NULL );

	pFnGetLinearColorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetLinearColorParameterValue_Parms.OutValue, 0x10 );

	return GetLinearColorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue )
{
	static UFunction* pFnGetVectorCurveParameterValue = NULL;

	if ( ! pFnGetVectorCurveParameterValue )
		pFnGetVectorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18195 ];

	UMaterialInterface_execGetVectorCurveParameterValue_Parms GetVectorCurveParameterValue_Parms;
	memcpy ( &GetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorCurveParameterValue, &GetVectorCurveParameterValue_Parms, NULL );

	pFnGetVectorCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorCurveParameterValue_Parms.OutValue, 0x10 );

	return GetVectorCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetVectorParameterValue = NULL;

	if ( ! pFnGetVectorParameterValue )
		pFnGetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18191 ];

	UMaterialInterface_execGetVectorParameterValue_Parms GetVectorParameterValue_Parms;
	memcpy ( &GetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameterValue, &GetVectorParameterValue_Parms, NULL );

	pFnGetVectorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetVectorParameterValue_Parms.OutValue, 0x10 );

	return GetVectorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetTextureParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue )
{
	static UFunction* pFnGetTextureParameterValue = NULL;

	if ( ! pFnGetTextureParameterValue )
		pFnGetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18187 ];

	UMaterialInterface_execGetTextureParameterValue_Parms GetTextureParameterValue_Parms;
	memcpy ( &GetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTextureParameterValue, &GetTextureParameterValue_Parms, NULL );

	pFnGetTextureParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetTextureParameterValue_Parms.OutValue;

	return GetTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       OutValue                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue )
{
	static UFunction* pFnGetScalarCurveParameterValue = NULL;

	if ( ! pFnGetScalarCurveParameterValue )
		pFnGetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18183 ];

	UMaterialInterface_execGetScalarCurveParameterValue_Parms GetScalarCurveParameterValue_Parms;
	memcpy ( &GetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarCurveParameterValue, &GetScalarCurveParameterValue_Parms, NULL );

	pFnGetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetScalarCurveParameterValue_Parms.OutValue, 0x10 );

	return GetScalarCurveParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetScalarParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetScalarParameterValue ( struct FName ParameterName, float* OutValue )
{
	static UFunction* pFnGetScalarParameterValue = NULL;

	if ( ! pFnGetScalarParameterValue )
		pFnGetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18179 ];

	UMaterialInterface_execGetScalarParameterValue_Parms GetScalarParameterValue_Parms;
	memcpy ( &GetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScalarParameterValue, &GetScalarParameterValue_Parms, NULL );

	pFnGetScalarParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetScalarParameterValue_Parms.OutValue;

	return GetScalarParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetFontParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   OutFontValue                   ( CPF_Parm | CPF_OutParm )
// int                            OutFontPage                    ( CPF_Parm | CPF_OutParm )

bool UMaterialInterface::GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage )
{
	static UFunction* pFnGetFontParameterValue = NULL;

	if ( ! pFnGetFontParameterValue )
		pFnGetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 18174 ];

	UMaterialInterface_execGetFontParameterValue_Parms GetFontParameterValue_Parms;
	memcpy ( &GetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFontParameterValue, &GetFontParameterValue_Parms, NULL );

	pFnGetFontParameterValue->FunctionFlags |= 0x400;

	if ( OutFontValue )
		*OutFontValue = GetFontParameterValue_Parms.OutFontValue;

	if ( OutFontPage )
		*OutFontPage = GetFontParameterValue_Parms.OutFontPage;

	return GetFontParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetParameterDesc
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FString                 OutDesc                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UMaterialInterface::GetParameterDesc ( struct FName ParameterName, struct FString* OutDesc )
{
	static UFunction* pFnGetParameterDesc = NULL;

	if ( ! pFnGetParameterDesc )
		pFnGetParameterDesc = (UFunction*) UObject::GObjObjects()->Data[ 18170 ];

	UMaterialInterface_execGetParameterDesc_Parms GetParameterDesc_Parms;
	memcpy ( &GetParameterDesc_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetParameterDesc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParameterDesc, &GetParameterDesc_Parms, NULL );

	pFnGetParameterDesc->FunctionFlags |= 0x400;

	if ( OutDesc )
		memcpy ( OutDesc, &GetParameterDesc_Parms.OutDesc, 0xC );

	return GetParameterDesc_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetPhysicalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial ( )
{
	static UFunction* pFnGetPhysicalMaterial = NULL;

	if ( ! pFnGetPhysicalMaterial )
		pFnGetPhysicalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18168 ];

	UMaterialInterface_execGetPhysicalMaterial_Parms GetPhysicalMaterial_Parms;

	pFnGetPhysicalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalMaterial, &GetPhysicalMaterial_Parms, NULL );

	pFnGetPhysicalMaterial->FunctionFlags |= 0x400;

	return GetPhysicalMaterial_Parms.ReturnValue;
};

// Function Engine.MaterialInterface.GetMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterial*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterial* UMaterialInterface::GetMaterial ( )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 18166 ];

	UMaterialInterface_execGetMaterial_Parms GetMaterial_Parms;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetMaxLifespan
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InComponentDelay               ( CPF_Parm )

float UParticleSystem::GetMaxLifespan ( float InComponentDelay )
{
	static UFunction* pFnGetMaxLifespan = NULL;

	if ( ! pFnGetMaxLifespan )
		pFnGetMaxLifespan = (UFunction*) UObject::GObjObjects()->Data[ 30563 ];

	UParticleSystem_execGetMaxLifespan_Parms GetMaxLifespan_Parms;
	GetMaxLifespan_Parms.InComponentDelay = InComponentDelay;

	pFnGetMaxLifespan->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxLifespan, &GetMaxLifespan_Parms, NULL );

	pFnGetMaxLifespan->FunctionFlags |= 0x400;

	return GetMaxLifespan_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.SetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )
// float                          InDistance                     ( CPF_Parm )

bool UParticleSystem::SetLODDistance ( int LODLevelIndex, float InDistance )
{
	static UFunction* pFnSetLODDistance = NULL;

	if ( ! pFnSetLODDistance )
		pFnSetLODDistance = (UFunction*) UObject::GObjObjects()->Data[ 30559 ];

	UParticleSystem_execSetLODDistance_Parms SetLODDistance_Parms;
	SetLODDistance_Parms.LODLevelIndex = LODLevelIndex;
	SetLODDistance_Parms.InDistance = InDistance;

	pFnSetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODDistance, &SetLODDistance_Parms, NULL );

	pFnSetLODDistance->FunctionFlags |= 0x400;

	return SetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.SetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InMethod                       ( CPF_Parm )

void UParticleSystem::SetCurrentLODMethod ( unsigned char InMethod )
{
	static UFunction* pFnSetCurrentLODMethod = NULL;

	if ( ! pFnSetCurrentLODMethod )
		pFnSetCurrentLODMethod = (UFunction*) UObject::GObjObjects()->Data[ 30557 ];

	UParticleSystem_execSetCurrentLODMethod_Parms SetCurrentLODMethod_Parms;
	SetCurrentLODMethod_Parms.InMethod = InMethod;

	pFnSetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentLODMethod, &SetCurrentLODMethod_Parms, NULL );

	pFnSetCurrentLODMethod->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystem.GetLODDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LODLevelIndex                  ( CPF_Parm )

float UParticleSystem::GetLODDistance ( int LODLevelIndex )
{
	static UFunction* pFnGetLODDistance = NULL;

	if ( ! pFnGetLODDistance )
		pFnGetLODDistance = (UFunction*) UObject::GObjObjects()->Data[ 30554 ];

	UParticleSystem_execGetLODDistance_Parms GetLODDistance_Parms;
	GetLODDistance_Parms.LODLevelIndex = LODLevelIndex;

	pFnGetLODDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODDistance, &GetLODDistance_Parms, NULL );

	pFnGetLODDistance->FunctionFlags |= 0x400;

	return GetLODDistance_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetLODLevelCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystem::GetLODLevelCount ( )
{
	static UFunction* pFnGetLODLevelCount = NULL;

	if ( ! pFnGetLODLevelCount )
		pFnGetLODLevelCount = (UFunction*) UObject::GObjObjects()->Data[ 30552 ];

	UParticleSystem_execGetLODLevelCount_Parms GetLODLevelCount_Parms;

	pFnGetLODLevelCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevelCount, &GetLODLevelCount_Parms, NULL );

	pFnGetLODLevelCount->FunctionFlags |= 0x400;

	return GetLODLevelCount_Parms.ReturnValue;
};

// Function Engine.ParticleSystem.GetCurrentLODMethod
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UParticleSystem::GetCurrentLODMethod ( )
{
	static UFunction* pFnGetCurrentLODMethod = NULL;

	if ( ! pFnGetCurrentLODMethod )
		pFnGetCurrentLODMethod = (UFunction*) UObject::GObjObjects()->Data[ 30550 ];

	UParticleSystem_execGetCurrentLODMethod_Parms GetCurrentLODMethod_Parms;

	pFnGetCurrentLODMethod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentLODMethod, &GetCurrentLODMethod_Parms, NULL );

	pFnGetCurrentLODMethod->FunctionFlags |= 0x400;

	return GetCurrentLODMethod_Parms.ReturnValue;
};

// Function Engine.Texture2D.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )

class UTexture2D* UTexture2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 16075 ];

	UTexture2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.Texture2D.SetForceMipLevelsToBeResident
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void UTexture2D::SetForceMipLevelsToBeResident ( float Seconds, int CinematicTextureGroups )
{
	static UFunction* pFnSetForceMipLevelsToBeResident = NULL;

	if ( ! pFnSetForceMipLevelsToBeResident )
		pFnSetForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 16072 ];

	UTexture2D_execSetForceMipLevelsToBeResident_Parms SetForceMipLevelsToBeResident_Parms;
	SetForceMipLevelsToBeResident_Parms.Seconds = Seconds;
	SetForceMipLevelsToBeResident_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceMipLevelsToBeResident, &SetForceMipLevelsToBeResident_Parms, NULL );

	pFnSetForceMipLevelsToBeResident->FunctionFlags |= 0x400;
};

// Function Engine.TranslationContext.RegisterTranslatorTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UTranslatorTag*          InTagHandler                   ( CPF_Parm )

bool UTranslationContext::RegisterTranslatorTag ( class UTranslatorTag* InTagHandler )
{
	static UFunction* pFnRegisterTranslatorTag = NULL;

	if ( ! pFnRegisterTranslatorTag )
		pFnRegisterTranslatorTag = (UFunction*) UObject::GObjObjects()->Data[ 35126 ];

	UTranslationContext_execRegisterTranslatorTag_Parms RegisterTranslatorTag_Parms;
	RegisterTranslatorTag_Parms.InTagHandler = InTagHandler;

	pFnRegisterTranslatorTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterTranslatorTag, &RegisterTranslatorTag_Parms, NULL );

	pFnRegisterTranslatorTag->FunctionFlags |= 0x400;

	return RegisterTranslatorTag_Parms.ReturnValue;
};

// Function Engine.TranslatorTag.Translate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 InArgument                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString UTranslatorTag::Translate ( struct FString InArgument )
{
	static UFunction* pFnTranslate = NULL;

	if ( ! pFnTranslate )
		pFnTranslate = (UFunction*) UObject::GObjObjects()->Data[ 34319 ];

	UTranslatorTag_execTranslate_Parms Translate_Parms;
	memcpy ( &Translate_Parms.InArgument, &InArgument, 0xC );

	pFnTranslate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTranslate, &Translate_Parms, NULL );

	pFnTranslate->FunctionFlags |= 0x400;

	return Translate_Parms.ReturnValue;
};

// Function Engine.StringsTag.Translate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 InArgument                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString UStringsTag::Translate ( struct FString InArgument )
{
	static UFunction* pFnTranslate = NULL;

	if ( ! pFnTranslate )
		pFnTranslate = (UFunction*) UObject::GObjObjects()->Data[ 34322 ];

	UStringsTag_execTranslate_Parms Translate_Parms;
	memcpy ( &Translate_Parms.InArgument, &InArgument, 0xC );

	pFnTranslate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTranslate, &Translate_Parms, NULL );

	pFnTranslate->FunctionFlags |= 0x400;

	return Translate_Parms.ReturnValue;
};

// Function Engine.UIRoot.SafeCaps
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 StringToCap                    ( CPF_Parm | CPF_NeedCtorLink )

struct FString UUIRoot::SafeCaps ( struct FString StringToCap )
{
	static UFunction* pFnSafeCaps = NULL;

	if ( ! pFnSafeCaps )
		pFnSafeCaps = (UFunction*) UObject::GObjObjects()->Data[ 17138 ];

	UUIRoot_execSafeCaps_Parms SafeCaps_Parms;
	memcpy ( &SafeCaps_Parms.StringToCap, &StringToCap, 0xC );

	this->ProcessEvent ( pFnSafeCaps, &SafeCaps_Parms, NULL );

	return SafeCaps_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlinePlayerInterfaceEx* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlinePlayerInterfaceEx* UUIRoot::GetOnlinePlayerInterfaceEx ( )
{
	static UFunction* pFnGetOnlinePlayerInterfaceEx = NULL;

	if ( ! pFnGetOnlinePlayerInterfaceEx )
		pFnGetOnlinePlayerInterfaceEx = (UFunction*) UObject::GObjObjects()->Data[ 17134 ];

	UUIRoot_execGetOnlinePlayerInterfaceEx_Parms GetOnlinePlayerInterfaceEx_Parms;

	this->ProcessEvent ( pFnGetOnlinePlayerInterfaceEx, &GetOnlinePlayerInterfaceEx_Parms, NULL );

	return GetOnlinePlayerInterfaceEx_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlinePlayerInterface
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlinePlayerInterface*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlinePlayerInterface* UUIRoot::GetOnlinePlayerInterface ( )
{
	static UFunction* pFnGetOnlinePlayerInterface = NULL;

	if ( ! pFnGetOnlinePlayerInterface )
		pFnGetOnlinePlayerInterface = (UFunction*) UObject::GObjObjects()->Data[ 17130 ];

	UUIRoot_execGetOnlinePlayerInterface_Parms GetOnlinePlayerInterface_Parms;

	this->ProcessEvent ( pFnGetOnlinePlayerInterface, &GetOnlinePlayerInterface_Parms, NULL );

	return GetOnlinePlayerInterface_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetOnlineGameInterface
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UOnlineGameInterface*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameInterface* UUIRoot::GetOnlineGameInterface ( )
{
	static UFunction* pFnGetOnlineGameInterface = NULL;

	if ( ! pFnGetOnlineGameInterface )
		pFnGetOnlineGameInterface = (UFunction*) UObject::GObjObjects()->Data[ 17126 ];

	UUIRoot_execGetOnlineGameInterface_Parms GetOnlineGameInterface_Parms;

	this->ProcessEvent ( pFnGetOnlineGameInterface, &GetOnlineGameInterface_Parms, NULL );

	return GetOnlineGameInterface_Parms.ReturnValue;
};

// Function Engine.UIRoot.StaticResolveDataStore
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            InPlayerOwner                  ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UUIRoot::StaticResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner )
{
	static UFunction* pFnStaticResolveDataStore = NULL;

	if ( ! pFnStaticResolveDataStore )
		pFnStaticResolveDataStore = (UFunction*) UObject::GObjObjects()->Data[ 17120 ];

	UUIRoot_execStaticResolveDataStore_Parms StaticResolveDataStore_Parms;
	memcpy ( &StaticResolveDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	StaticResolveDataStore_Parms.InPlayerOwner = InPlayerOwner;

	this->ProcessEvent ( pFnStaticResolveDataStore, &StaticResolveDataStore_Parms, NULL );

	return StaticResolveDataStore_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetSceneClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UGameUISceneClient*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UGameUISceneClient* UUIRoot::GetSceneClient ( )
{
	static UFunction* pFnGetSceneClient = NULL;

	if ( ! pFnGetSceneClient )
		pFnGetSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 17118 ];

	UUIRoot_execGetSceneClient_Parms GetSceneClient_Parms;

	pFnGetSceneClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSceneClient, &GetSceneClient_Parms, NULL );

	pFnGetSceneClient->FunctionFlags |= 0x400;

	return GetSceneClient_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetCurrentUIController
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIInteraction*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIInteraction* UUIRoot::GetCurrentUIController ( )
{
	static UFunction* pFnGetCurrentUIController = NULL;

	if ( ! pFnGetCurrentUIController )
		pFnGetCurrentUIController = (UFunction*) UObject::GObjObjects()->Data[ 17116 ];

	UUIRoot_execGetCurrentUIController_Parms GetCurrentUIController_Parms;

	pFnGetCurrentUIController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentUIController, &GetCurrentUIController_Parms, NULL );

	pFnGetCurrentUIController->FunctionFlags |= 0x400;

	return GetCurrentUIController_Parms.ReturnValue;
};

// Function Engine.UIRoot.GetInputPlatformType
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            OwningPlayer                   ( CPF_OptionalParm | CPF_Parm )

unsigned char UUIRoot::GetInputPlatformType ( class ULocalPlayer* OwningPlayer )
{
	static UFunction* pFnGetInputPlatformType = NULL;

	if ( ! pFnGetInputPlatformType )
		pFnGetInputPlatformType = (UFunction*) UObject::GObjObjects()->Data[ 17113 ];

	UUIRoot_execGetInputPlatformType_Parms GetInputPlatformType_Parms;
	GetInputPlatformType_Parms.OwningPlayer = OwningPlayer;

	pFnGetInputPlatformType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInputPlatformType, &GetInputPlatformType_Parms, NULL );

	pFnGetInputPlatformType->FunctionFlags |= 0x400;

	return GetInputPlatformType_Parms.ReturnValue;
};

// Function Engine.Interaction.NotifyPlayerRemoved
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 17175 ];

	UInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.Interaction.NotifyPlayerAdded
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 17172 ];

	UInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.Interaction.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:

void UInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17171 ];

	UInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.Interaction.Initialized
// [0x00020000] 
// Parameters infos:

void UInteraction::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 17170 ];

	UInteraction_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function Engine.Interaction.OnInitialize
// [0x00120000] 
// Parameters infos:

void UInteraction::OnInitialize ( )
{
	static UFunction* pFnOnInitialize = NULL;

	if ( ! pFnOnInitialize )
		pFnOnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 17150 ];

	UInteraction_execOnInitialize_Parms OnInitialize_Parms;

	this->ProcessEvent ( pFnOnInitialize, &OnInitialize_Parms, NULL );
};

// Function Engine.Interaction.Init
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UInteraction::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 17169 ];

	UInteraction_execInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.Interaction.PostRender
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UInteraction::eventPostRender ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 17167 ];

	UInteraction_eventPostRender_Parms PostRender_Parms;
	PostRender_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function Engine.Interaction.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UInteraction::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 17165 ];

	UInteraction_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.Interaction.OnReceivedNativeInputChar
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool UInteraction::OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnOnReceivedNativeInputChar = NULL;

	if ( ! pFnOnReceivedNativeInputChar )
		pFnOnReceivedNativeInputChar = (UFunction*) UObject::GObjObjects()->Data[ 17152 ];

	UInteraction_execOnReceivedNativeInputChar_Parms OnReceivedNativeInputChar_Parms;
	OnReceivedNativeInputChar_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnOnReceivedNativeInputChar, &OnReceivedNativeInputChar_Parms, NULL );

	return OnReceivedNativeInputChar_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputAxis
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// float                          Delta                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputAxis = NULL;

	if ( ! pFnOnReceivedNativeInputAxis )
		pFnOnReceivedNativeInputAxis = (UFunction*) UObject::GObjObjects()->Data[ 17154 ];

	UInteraction_execOnReceivedNativeInputAxis_Parms OnReceivedNativeInputAxis_Parms;
	OnReceivedNativeInputAxis_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputAxis_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputAxis_Parms.Delta = Delta;
	OnReceivedNativeInputAxis_Parms.DeltaTime = DeltaTime;
	OnReceivedNativeInputAxis_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputAxis, &OnReceivedNativeInputAxis_Parms, NULL );

	return OnReceivedNativeInputAxis_Parms.ReturnValue;
};

// Function Engine.Interaction.OnReceivedNativeInputKey
// [0x00124000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UInteraction::OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnOnReceivedNativeInputKey = NULL;

	if ( ! pFnOnReceivedNativeInputKey )
		pFnOnReceivedNativeInputKey = (UFunction*) UObject::GObjObjects()->Data[ 17142 ];

	UInteraction_execOnReceivedNativeInputKey_Parms OnReceivedNativeInputKey_Parms;
	OnReceivedNativeInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &OnReceivedNativeInputKey_Parms.Key, &Key, 0x8 );
	OnReceivedNativeInputKey_Parms.EventType = EventType;
	OnReceivedNativeInputKey_Parms.AmountDepressed = AmountDepressed;
	OnReceivedNativeInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnOnReceivedNativeInputKey, &OnReceivedNativeInputKey_Parms, NULL );

	return OnReceivedNativeInputKey_Parms.ReturnValue;
};

// Function Engine.UIInteraction.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:

void UUIInteraction::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 35998 ];

	UUIInteraction_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.UIInteraction.GetNATType
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIInteraction::eventGetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 35993 ];

	UUIInteraction_eventGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetConnectedGamepadCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< unsigned long >        ControllerConnectionStatusOverrides ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int UUIInteraction::GetConnectedGamepadCount ( TArray< unsigned long > ControllerConnectionStatusOverrides )
{
	static UFunction* pFnGetConnectedGamepadCount = NULL;

	if ( ! pFnGetConnectedGamepadCount )
		pFnGetConnectedGamepadCount = (UFunction*) UObject::GObjObjects()->Data[ 35987 ];

	UUIInteraction_execGetConnectedGamepadCount_Parms GetConnectedGamepadCount_Parms;
	memcpy ( &GetConnectedGamepadCount_Parms.ControllerConnectionStatusOverrides, &ControllerConnectionStatusOverrides, 0xC );

	this->ProcessEvent ( pFnGetConnectedGamepadCount, &GetConnectedGamepadCount_Parms, NULL );

	return GetConnectedGamepadCount_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsGamepadConnected
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UUIInteraction::IsGamepadConnected ( int ControllerId )
{
	static UFunction* pFnIsGamepadConnected = NULL;

	if ( ! pFnIsGamepadConnected )
		pFnIsGamepadConnected = (UFunction*) UObject::GObjObjects()->Data[ 22600 ];

	UUIInteraction_execIsGamepadConnected_Parms IsGamepadConnected_Parms;
	IsGamepadConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsGamepadConnected, &IsGamepadConnected_Parms, NULL );

	return IsGamepadConnected_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetNumGuestsLoggedIn
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIInteraction::GetNumGuestsLoggedIn ( )
{
	static UFunction* pFnGetNumGuestsLoggedIn = NULL;

	if ( ! pFnGetNumGuestsLoggedIn )
		pFnGetNumGuestsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 35978 ];

	UUIInteraction_execGetNumGuestsLoggedIn_Parms GetNumGuestsLoggedIn_Parms;

	this->ProcessEvent ( pFnGetNumGuestsLoggedIn, &GetNumGuestsLoggedIn_Parms, NULL );

	return GetNumGuestsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoggedInPlayerCount
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

int UUIInteraction::GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnGetLoggedInPlayerCount = NULL;

	if ( ! pFnGetLoggedInPlayerCount )
		pFnGetLoggedInPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 35973 ];

	UUIInteraction_execGetLoggedInPlayerCount_Parms GetLoggedInPlayerCount_Parms;
	GetLoggedInPlayerCount_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnGetLoggedInPlayerCount, &GetLoggedInPlayerCount_Parms, NULL );

	return GetLoggedInPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIInteraction.IsLoggedIn
// [0x00026803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bRequireOnlineLogin            ( CPF_OptionalParm | CPF_Parm )

bool UUIInteraction::eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin )
{
	static UFunction* pFnIsLoggedIn = NULL;

	if ( ! pFnIsLoggedIn )
		pFnIsLoggedIn = (UFunction*) UObject::GObjObjects()->Data[ 22598 ];

	UUIInteraction_eventIsLoggedIn_Parms IsLoggedIn_Parms;
	IsLoggedIn_Parms.ControllerId = ControllerId;
	IsLoggedIn_Parms.bRequireOnlineLogin = bRequireOnlineLogin;

	this->ProcessEvent ( pFnIsLoggedIn, &IsLoggedIn_Parms, NULL );

	return IsLoggedIn_Parms.ReturnValue;
};

// Function Engine.UIInteraction.HasLinkConnection
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIInteraction::eventHasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 35964 ];

	UUIInteraction_eventHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLowestLoginStatusOfControllers
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UUIInteraction::GetLowestLoginStatusOfControllers ( )
{
	static UFunction* pFnGetLowestLoginStatusOfControllers = NULL;

	if ( ! pFnGetLowestLoginStatusOfControllers )
		pFnGetLowestLoginStatusOfControllers = (UFunction*) UObject::GObjObjects()->Data[ 35959 ];

	UUIInteraction_execGetLowestLoginStatusOfControllers_Parms GetLowestLoginStatusOfControllers_Parms;

	this->ProcessEvent ( pFnGetLowestLoginStatusOfControllers, &GetLowestLoginStatusOfControllers_Parms, NULL );

	return GetLowestLoginStatusOfControllers_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetLoginStatus
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

unsigned char UUIInteraction::eventGetLoginStatus ( int ControllerId )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 35953 ];

	UUIInteraction_eventGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.UIInteraction.NotifyPlayerRemoved
// [0x00820002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIInteraction::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 35946 ];

	UUIInteraction_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.UIInteraction.NotifyPlayerAdded
// [0x00820002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIInteraction::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 35942 ];

	UUIInteraction_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.UIInteraction.GetLocalPlayer
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

class ULocalPlayer* UUIInteraction::GetLocalPlayer ( int PlayerIndex )
{
	static UFunction* pFnGetLocalPlayer = NULL;

	if ( ! pFnGetLocalPlayer )
		pFnGetLocalPlayer = (UFunction*) UObject::GObjObjects()->Data[ 35937 ];

	UUIInteraction_execGetLocalPlayer_Parms GetLocalPlayer_Parms;
	GetLocalPlayer_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnGetLocalPlayer, &GetLocalPlayer_Parms, NULL );

	return GetLocalPlayer_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetDataStoreClient
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIInteraction::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = (UFunction*) UObject::GObjObjects()->Data[ 11294 ];

	UUIInteraction_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	pFnGetDataStoreClient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	pFnGetDataStoreClient->FunctionFlags |= 0x400;

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerControllerId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlayerIndex                    ( CPF_Parm )

int UUIInteraction::GetPlayerControllerId ( int PlayerIndex )
{
	static UFunction* pFnGetPlayerControllerId = NULL;

	if ( ! pFnGetPlayerControllerId )
		pFnGetPlayerControllerId = (UFunction*) UObject::GObjObjects()->Data[ 35934 ];

	UUIInteraction_execGetPlayerControllerId_Parms GetPlayerControllerId_Parms;
	GetPlayerControllerId_Parms.PlayerIndex = PlayerIndex;

	pFnGetPlayerControllerId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerControllerId, &GetPlayerControllerId_Parms, NULL );

	pFnGetPlayerControllerId->FunctionFlags |= 0x400;

	return GetPlayerControllerId_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

int UUIInteraction::GetPlayerIndex ( int ControllerId )
{
	static UFunction* pFnGetPlayerIndex = NULL;

	if ( ! pFnGetPlayerIndex )
		pFnGetPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 11111 ];

	UUIInteraction_execGetPlayerIndex_Parms GetPlayerIndex_Parms;
	GetPlayerIndex_Parms.ControllerId = ControllerId;

	pFnGetPlayerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerIndex, &GetPlayerIndex_Parms, NULL );

	pFnGetPlayerIndex->FunctionFlags |= 0x400;

	return GetPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIInteraction.GetPlayerCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIInteraction::GetPlayerCount ( )
{
	static UFunction* pFnGetPlayerCount = NULL;

	if ( ! pFnGetPlayerCount )
		pFnGetPlayerCount = (UFunction*) UObject::GObjObjects()->Data[ 22763 ];

	UUIInteraction_execGetPlayerCount_Parms GetPlayerCount_Parms;

	pFnGetPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerCount, &GetPlayerCount_Parms, NULL );

	pFnGetPlayerCount->FunctionFlags |= 0x400;

	return GetPlayerCount_Parms.ReturnValue;
};

// Function Engine.UIManager.FindLocalPlayerIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 P                              ( CPF_Parm )

int UUIManager::FindLocalPlayerIndex ( class UPlayer* P )
{
	static UFunction* pFnFindLocalPlayerIndex = NULL;

	if ( ! pFnFindLocalPlayerIndex )
		pFnFindLocalPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 36014 ];

	UUIManager_execFindLocalPlayerIndex_Parms FindLocalPlayerIndex_Parms;
	FindLocalPlayerIndex_Parms.P = P;

	this->ProcessEvent ( pFnFindLocalPlayerIndex, &FindLocalPlayerIndex_Parms, NULL );

	return FindLocalPlayerIndex_Parms.ReturnValue;
};

// Function Engine.UIManager.NotifyPlayerRemoved
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UUIManager::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 36011 ];

	UUIManager_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.UIManager.NotifyPlayerAdded
// [0x00020000] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UUIManager::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 36008 ];

	UUIManager_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.UIManager.PauseGame
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UUIManager::eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex )
{
	static UFunction* pFnPauseGame = NULL;

	if ( ! pFnPauseGame )
		pFnPauseGame = (UFunction*) UObject::GObjObjects()->Data[ 36003 ];

	UUIManager_eventPauseGame_Parms PauseGame_Parms;
	PauseGame_Parms.bDesiredPauseState = bDesiredPauseState;
	PauseGame_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnPauseGame, &PauseGame_Parms, NULL );
};

// Function Engine.UIManager.CanUnpauseInternalUI
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIManager::CanUnpauseInternalUI ( )
{
	static UFunction* pFnCanUnpauseInternalUI = NULL;

	if ( ! pFnCanUnpauseInternalUI )
		pFnCanUnpauseInternalUI = (UFunction*) UObject::GObjObjects()->Data[ 36001 ];

	UUIManager_execCanUnpauseInternalUI_Parms CanUnpauseInternalUI_Parms;

	pFnCanUnpauseInternalUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Parms, NULL );

	pFnCanUnpauseInternalUI->FunctionFlags |= 0x400;

	return CanUnpauseInternalUI_Parms.ReturnValue;
};

// Function Engine.UIManager.GetUIManager
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIManager*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIManager* UUIManager::GetUIManager ( )
{
	static UFunction* pFnGetUIManager = NULL;

	if ( ! pFnGetUIManager )
		pFnGetUIManager = (UFunction*) UObject::GObjObjects()->Data[ 35999 ];

	UUIManager_execGetUIManager_Parms GetUIManager_Parms;

	pFnGetUIManager->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIManager, &GetUIManager_Parms, NULL );

	pFnGetUIManager->FunctionFlags |= 0x400;

	return GetUIManager_Parms.ReturnValue;
};

// Function Engine.EnvironmentVolume.SetSplitNavMesh
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewValue                      ( CPF_Parm )

void AEnvironmentVolume::SetSplitNavMesh ( unsigned long bNewValue )
{
	static UFunction* pFnSetSplitNavMesh = NULL;

	if ( ! pFnSetSplitNavMesh )
		pFnSetSplitNavMesh = (UFunction*) UObject::GObjObjects()->Data[ 19750 ];

	AEnvironmentVolume_execSetSplitNavMesh_Parms SetSplitNavMesh_Parms;
	SetSplitNavMesh_Parms.bNewValue = bNewValue;

	pFnSetSplitNavMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSplitNavMesh, &SetSplitNavMesh_Parms, NULL );

	pFnSetSplitNavMesh->FunctionFlags |= 0x400;
};

// Function Engine.AIController.CanFireWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Wpn                            ( CPF_Parm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool AAIController::CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum )
{
	static UFunction* pFnCanFireWeapon = NULL;

	if ( ! pFnCanFireWeapon )
		pFnCanFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 13179 ];

	AAIController_execCanFireWeapon_Parms CanFireWeapon_Parms;
	CanFireWeapon_Parms.Wpn = Wpn;
	CanFireWeapon_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnCanFireWeapon, &CanFireWeapon_Parms, NULL );

	return CanFireWeapon_Parms.ReturnValue;
};

// Function Engine.AIController.NotifyWeaponFinishedFiring
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void AAIController::NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 13176 ];

	AAIController_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.W = W;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function Engine.AIController.NotifyWeaponFired
// [0x00020000] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void AAIController::NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 13173 ];

	AAIController_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.W = W;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function Engine.AIController.OnAIMoveToActor
// [0x00020002] 
// Parameters infos:
// class USeqAct_AIMoveToActor*   Action                         ( CPF_Parm )

void AAIController::OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action )
{
	static UFunction* pFnOnAIMoveToActor = NULL;

	if ( ! pFnOnAIMoveToActor )
		pFnOnAIMoveToActor = (UFunction*) UObject::GObjObjects()->Data[ 13158 ];

	AAIController_execOnAIMoveToActor_Parms OnAIMoveToActor_Parms;
	OnAIMoveToActor_Parms.Action = Action;

	this->ProcessEvent ( pFnOnAIMoveToActor, &OnAIMoveToActor_Parms, NULL );
};

// Function Engine.AIController.SetTeam
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            inTeamIdx                      ( CPF_Parm )

void AAIController::eventSetTeam ( int inTeamIdx )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 13154 ];

	AAIController_eventSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.inTeamIdx = inTeamIdx;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.AIController.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AAIController::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 13145 ];

	AAIController_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.AIController.Reset
// [0x00020002] 
// Parameters infos:

void AAIController::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 13144 ];

	AAIController_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.AIController.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AAIController::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13142 ];

	AAIController_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.CrowdAgentBase.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ACrowdAgentBase::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = (UFunction*) UObject::GObjObjects()->Data[ 17804 ];

	ACrowdAgentBase_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APathTargetPoint::ShouldBeHiddenBySHOW_NavigationNodes ( )
{
	static UFunction* pFnShouldBeHiddenBySHOW_NavigationNodes = NULL;

	if ( ! pFnShouldBeHiddenBySHOW_NavigationNodes )
		pFnShouldBeHiddenBySHOW_NavigationNodes = (UFunction*) UObject::GObjObjects()->Data[ 30706 ];

	APathTargetPoint_execShouldBeHiddenBySHOW_NavigationNodes_Parms ShouldBeHiddenBySHOW_NavigationNodes_Parms;

	pFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldBeHiddenBySHOW_NavigationNodes, &ShouldBeHiddenBySHOW_NavigationNodes_Parms, NULL );

	pFnShouldBeHiddenBySHOW_NavigationNodes->FunctionFlags |= 0x400;

	return ShouldBeHiddenBySHOW_NavigationNodes_Parms.ReturnValue;
};

// Function Engine.NavMeshObstacle.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavMeshObstacle_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ANavMeshObstacle::ApplyCheckpointRecord ( struct ANavMeshObstacle_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 26660 ];

	ANavMeshObstacle_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.NavMeshObstacle.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ANavMeshObstacle_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ANavMeshObstacle::CreateCheckpointRecord ( struct ANavMeshObstacle_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 26658 ];

	ANavMeshObstacle_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.NavMeshObstacle.SetEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void ANavMeshObstacle::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 26656 ];

	ANavMeshObstacle_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function Engine.NavMeshObstacle.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ANavMeshObstacle::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 26654 ];

	ANavMeshObstacle_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NavMeshObstacle.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ANavMeshObstacle::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26653 ];

	ANavMeshObstacle_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.NavMeshObstacle.UnRegisterObstacle
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANavMeshObstacle::UnRegisterObstacle ( )
{
	static UFunction* pFnUnRegisterObstacle = NULL;

	if ( ! pFnUnRegisterObstacle )
		pFnUnRegisterObstacle = (UFunction*) UObject::GObjObjects()->Data[ 26652 ];

	ANavMeshObstacle_execUnRegisterObstacle_Parms UnRegisterObstacle_Parms;

	pFnUnRegisterObstacle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnRegisterObstacle, &UnRegisterObstacle_Parms, NULL );

	pFnUnRegisterObstacle->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshObstacle.RegisterObstacle
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANavMeshObstacle::RegisterObstacle ( )
{
	static UFunction* pFnRegisterObstacle = NULL;

	if ( ! pFnRegisterObstacle )
		pFnRegisterObstacle = (UFunction*) UObject::GObjObjects()->Data[ 26651 ];

	ANavMeshObstacle_execRegisterObstacle_Parms RegisterObstacle_Parms;

	pFnRegisterObstacle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterObstacle, &RegisterObstacle_Parms, NULL );

	pFnRegisterObstacle->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshObstacle.GetObstacleBoudingShape
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FVector >       Shape                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ANavMeshObstacle::eventGetObstacleBoudingShape ( TArray< struct FVector >* Shape )
{
	static UFunction* pFnGetObstacleBoudingShape = NULL;

	if ( ! pFnGetObstacleBoudingShape )
		pFnGetObstacleBoudingShape = (UFunction*) UObject::GObjObjects()->Data[ 26645 ];

	ANavMeshObstacle_eventGetObstacleBoudingShape_Parms GetObstacleBoudingShape_Parms;

	this->ProcessEvent ( pFnGetObstacleBoudingShape, &GetObstacleBoudingShape_Parms, NULL );

	if ( Shape )
		memcpy ( Shape, &GetObstacleBoudingShape_Parms.Shape, 0xC );

	return GetObstacleBoudingShape_Parms.ReturnValue;
};

// Function Engine.MeshComponent.ForceMipLevelsToBeResident
// [0x00020002] 
// Parameters infos:

void UMeshComponent::ForceMipLevelsToBeResident ( )
{
	static UFunction* pFnForceMipLevelsToBeResident = NULL;

	if ( ! pFnForceMipLevelsToBeResident )
		pFnForceMipLevelsToBeResident = (UFunction*) UObject::GObjObjects()->Data[ 10375 ];

	UMeshComponent_execForceMipLevelsToBeResident_Parms ForceMipLevelsToBeResident_Parms;

	this->ProcessEvent ( pFnForceMipLevelsToBeResident, &ForceMipLevelsToBeResident_Parms, NULL );
};

// Function Engine.MeshComponent.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// class AActor*                  Value                          ( CPF_Parm )

void UMeshComponent::SetActorParameter ( struct FName Key, class AActor* Value )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 10377 ];

	UMeshComponent_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.Key, &Key, 0x8 );
	SetActorParameter_Parms.Value = Value;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.SetLinearColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMeshComponent::SetLinearColorParameter ( struct FName Key, struct FLinearColor Value )
{
	static UFunction* pFnSetLinearColorParameter = NULL;

	if ( ! pFnSetLinearColorParameter )
		pFnSetLinearColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 10372 ];

	UMeshComponent_execSetLinearColorParameter_Parms SetLinearColorParameter_Parms;
	memcpy ( &SetLinearColorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetLinearColorParameter_Parms.Value, &Value, 0x10 );

	pFnSetLinearColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorParameter, &SetLinearColorParameter_Parms, NULL );

	pFnSetLinearColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FVector                 Value                          ( CPF_Parm )

void UMeshComponent::SetVectorParameter ( struct FName Key, struct FVector Value )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 10369 ];

	UMeshComponent_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Value, &Value, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMeshComponent::SetFloatParameter ( struct FName Key, float Value )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 10366 ];

	UMeshComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.Key, &Key, 0x8 );
	SetFloatParameter_Parms.Value = Value;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.SetNameParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FName                   Value                          ( CPF_Parm )

void UMeshComponent::SetNameParameter ( struct FName Key, struct FName Value )
{
	static UFunction* pFnSetNameParameter = NULL;

	if ( ! pFnSetNameParameter )
		pFnSetNameParameter = (UFunction*) UObject::GObjObjects()->Data[ 10363 ];

	UMeshComponent_execSetNameParameter_Parms SetNameParameter_Parms;
	memcpy ( &SetNameParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetNameParameter_Parms.Value, &Value, 0x8 );

	pFnSetNameParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameParameter, &SetNameParameter_Parms, NULL );

	pFnSetNameParameter->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.ConditionalCreateMIC
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceConstant* UMeshComponent::ConditionalCreateMIC ( int ElementIndex )
{
	static UFunction* pFnConditionalCreateMIC = NULL;

	if ( ! pFnConditionalCreateMIC )
		pFnConditionalCreateMIC = (UFunction*) UObject::GObjObjects()->Data[ 10360 ];

	UMeshComponent_execConditionalCreateMIC_Parms ConditionalCreateMIC_Parms;
	ConditionalCreateMIC_Parms.ElementIndex = ElementIndex;

	pFnConditionalCreateMIC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConditionalCreateMIC, &ConditionalCreateMIC_Parms, NULL );

	pFnConditionalCreateMIC->FunctionFlags |= 0x400;

	return ConditionalCreateMIC_Parms.ReturnValue;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceTimeVarying* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceTimeVarying = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceTimeVarying )
		pFnCreateAndSetMaterialInstanceTimeVarying = (UFunction*) UObject::GObjObjects()->Data[ 10356 ];

	UMeshComponent_execCreateAndSetMaterialInstanceTimeVarying_Parms CreateAndSetMaterialInstanceTimeVarying_Parms;
	CreateAndSetMaterialInstanceTimeVarying_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceTimeVarying, &CreateAndSetMaterialInstanceTimeVarying_Parms, NULL );

	return CreateAndSetMaterialInstanceTimeVarying_Parms.ReturnValue;
};

// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceConstant = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceConstant )
		pFnCreateAndSetMaterialInstanceConstant = (UFunction*) UObject::GObjObjects()->Data[ 10352 ];

	UMeshComponent_execCreateAndSetMaterialInstanceConstant_Parms CreateAndSetMaterialInstanceConstant_Parms;
	CreateAndSetMaterialInstanceConstant_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceConstant, &CreateAndSetMaterialInstanceConstant_Parms, NULL );

	return CreateAndSetMaterialInstanceConstant_Parms.ReturnValue;
};

// Function Engine.MeshComponent.PrestreamTextures
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )
// unsigned long                  bPrioritizeCharacterTextures   ( CPF_Parm )
// int                            CinematicTextureGroups         ( CPF_OptionalParm | CPF_Parm )

void UMeshComponent::PrestreamTextures ( float Seconds, unsigned long bPrioritizeCharacterTextures, int CinematicTextureGroups )
{
	static UFunction* pFnPrestreamTextures = NULL;

	if ( ! pFnPrestreamTextures )
		pFnPrestreamTextures = (UFunction*) UObject::GObjObjects()->Data[ 10348 ];

	UMeshComponent_execPrestreamTextures_Parms PrestreamTextures_Parms;
	PrestreamTextures_Parms.Seconds = Seconds;
	PrestreamTextures_Parms.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	PrestreamTextures_Parms.CinematicTextureGroups = CinematicTextureGroups;

	pFnPrestreamTextures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrestreamTextures, &PrestreamTextures_Parms, NULL );

	pFnPrestreamTextures->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetNumElements
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UMeshComponent::GetNumElements ( )
{
	static UFunction* pFnGetNumElements = NULL;

	if ( ! pFnGetNumElements )
		pFnGetNumElements = (UFunction*) UObject::GObjObjects()->Data[ 10346 ];

	UMeshComponent_execGetNumElements_Parms GetNumElements_Parms;

	pFnGetNumElements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumElements, &GetNumElements_Parms, NULL );

	pFnGetNumElements->FunctionFlags |= 0x400;

	return GetNumElements_Parms.ReturnValue;
};

// Function Engine.MeshComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void UMeshComponent::SetMaterial ( int ElementIndex, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 10343 ];

	UMeshComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.ElementIndex = ElementIndex;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.MeshComponent.GetDefaultMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* UMeshComponent::GetDefaultMaterial ( int ElementIndex )
{
	static UFunction* pFnGetDefaultMaterial = NULL;

	if ( ! pFnGetDefaultMaterial )
		pFnGetDefaultMaterial = (UFunction*) UObject::GObjObjects()->Data[ 10340 ];

	UMeshComponent_execGetDefaultMaterial_Parms GetDefaultMaterial_Parms;
	GetDefaultMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetDefaultMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultMaterial, &GetDefaultMaterial_Parms, NULL );

	pFnGetDefaultMaterial->FunctionFlags |= 0x400;

	return GetDefaultMaterial_Parms.ReturnValue;
};

// Function Engine.MeshComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* UMeshComponent::GetMaterial ( int ElementIndex )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 10337 ];

	UMeshComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.StaticMeshComponent.LineCheckUVs
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TraceEnd                       ( CPF_Parm )
// struct FVector                 TraceStart                     ( CPF_Parm )
// struct FVector2D               OutUVs                         ( CPF_Parm | CPF_OutParm )

bool UStaticMeshComponent::LineCheckUVs ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector2D* OutUVs )
{
	static UFunction* pFnLineCheckUVs = NULL;

	if ( ! pFnLineCheckUVs )
		pFnLineCheckUVs = (UFunction*) UObject::GObjObjects()->Data[ 17606 ];

	UStaticMeshComponent_execLineCheckUVs_Parms LineCheckUVs_Parms;
	memcpy ( &LineCheckUVs_Parms.TraceEnd, &TraceEnd, 0xC );
	memcpy ( &LineCheckUVs_Parms.TraceStart, &TraceStart, 0xC );

	pFnLineCheckUVs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheckUVs, &LineCheckUVs_Parms, NULL );

	pFnLineCheckUVs->FunctionFlags |= 0x400;

	if ( OutUVs )
		memcpy ( OutUVs, &LineCheckUVs_Parms.OutUVs, 0x8 );

	return LineCheckUVs_Parms.ReturnValue;
};

// Function Engine.StaticMeshComponent.CanBecomeDynamic
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UStaticMeshComponent::CanBecomeDynamic ( )
{
	static UFunction* pFnCanBecomeDynamic = NULL;

	if ( ! pFnCanBecomeDynamic )
		pFnCanBecomeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 6881 ];

	UStaticMeshComponent_execCanBecomeDynamic_Parms CanBecomeDynamic_Parms;

	pFnCanBecomeDynamic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanBecomeDynamic, &CanBecomeDynamic_Parms, NULL );

	pFnCanBecomeDynamic->FunctionFlags |= 0x400;

	return CanBecomeDynamic_Parms.ReturnValue;
};

// Function Engine.StaticMeshComponent.SetForceStaticDecals
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInForceStaticDecals           ( CPF_Parm )

void UStaticMeshComponent::SetForceStaticDecals ( unsigned long bInForceStaticDecals )
{
	static UFunction* pFnSetForceStaticDecals = NULL;

	if ( ! pFnSetForceStaticDecals )
		pFnSetForceStaticDecals = (UFunction*) UObject::GObjObjects()->Data[ 17604 ];

	UStaticMeshComponent_execSetForceStaticDecals_Parms SetForceStaticDecals_Parms;
	SetForceStaticDecals_Parms.bInForceStaticDecals = bInForceStaticDecals;

	pFnSetForceStaticDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceStaticDecals, &SetForceStaticDecals_Parms, NULL );

	pFnSetForceStaticDecals->FunctionFlags |= 0x400;
};

// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     OtherSMC                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bDisabled                      ( CPF_Parm )

void UStaticMeshComponent::DisableRBCollisionWithSMC ( class UPrimitiveComponent* OtherSMC, unsigned long bDisabled )
{
	static UFunction* pFnDisableRBCollisionWithSMC = NULL;

	if ( ! pFnDisableRBCollisionWithSMC )
		pFnDisableRBCollisionWithSMC = (UFunction*) UObject::GObjObjects()->Data[ 17601 ];

	UStaticMeshComponent_execDisableRBCollisionWithSMC_Parms DisableRBCollisionWithSMC_Parms;
	DisableRBCollisionWithSMC_Parms.OtherSMC = OtherSMC;
	DisableRBCollisionWithSMC_Parms.bDisabled = bDisabled;

	pFnDisableRBCollisionWithSMC->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableRBCollisionWithSMC, &DisableRBCollisionWithSMC_Parms, NULL );

	pFnDisableRBCollisionWithSMC->FunctionFlags |= 0x400;
};

// Function Engine.StaticMeshComponent.SetStaticMesh
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

bool UStaticMeshComponent::SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 17597 ];

	UStaticMeshComponent_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	SetStaticMesh_Parms.bForce = bForce;

	pFnSetStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );

	pFnSetStaticMesh->FunctionFlags |= 0x400;

	return SetStaticMesh_Parms.ReturnValue;
};

// Function Engine.AICommandBase.GetUtility
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AAIController*           InAI                           ( CPF_Parm )

int UAICommandBase::eventGetUtility ( class AAIController* InAI )
{
	static UFunction* pFnGetUtility = NULL;

	if ( ! pFnGetUtility )
		pFnGetUtility = (UFunction*) UObject::GObjObjects()->Data[ 13132 ];

	UAICommandBase_eventGetUtility_Parms GetUtility_Parms;
	GetUtility_Parms.InAI = InAI;

	this->ProcessEvent ( pFnGetUtility, &GetUtility_Parms, NULL );

	return GetUtility_Parms.ReturnValue;
};

// Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AAIController*           AI                             ( CPF_Parm )

bool UInterface_NavMeshPathSwitch::eventAIActivateSwitch ( class AAIController* AI )
{
	static UFunction* pFnAIActivateSwitch = NULL;

	if ( ! pFnAIActivateSwitch )
		pFnAIActivateSwitch = (UFunction*) UObject::GObjObjects()->Data[ 23413 ];

	UInterface_NavMeshPathSwitch_eventAIActivateSwitch_Parms AIActivateSwitch_Parms;
	AIActivateSwitch_Parms.AI = AI;

	this->ProcessEvent ( pFnAIActivateSwitch, &AIActivateSwitch_Parms, NULL );

	return AIActivateSwitch_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetClosestPointOnMesh
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          SearchRadius                   ( CPF_Parm )
// struct FVector                 SearchPoint                    ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::GetClosestPointOnMesh ( float SearchRadius, struct FVector* SearchPoint )
{
	static UFunction* pFnGetClosestPointOnMesh = NULL;

	if ( ! pFnGetClosestPointOnMesh )
		pFnGetClosestPointOnMesh = (UFunction*) UObject::GObjObjects()->Data[ 26479 ];

	UNavigationHandle_execGetClosestPointOnMesh_Parms GetClosestPointOnMesh_Parms;
	GetClosestPointOnMesh_Parms.SearchRadius = SearchRadius;

	pFnGetClosestPointOnMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestPointOnMesh, &GetClosestPointOnMesh_Parms, NULL );

	pFnGetClosestPointOnMesh->FunctionFlags |= 0x400;

	if ( SearchPoint )
		memcpy ( SearchPoint, &GetClosestPointOnMesh_Parms.SearchPoint, 0xC );

	return GetClosestPointOnMesh_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.DrawBreadCrumbs
// [0x00024000] 
// Parameters infos:
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )

void UNavigationHandle::DrawBreadCrumbs ( unsigned long bPersistent )
{
	static UFunction* pFnDrawBreadCrumbs = NULL;

	if ( ! pFnDrawBreadCrumbs )
		pFnDrawBreadCrumbs = (UFunction*) UObject::GObjObjects()->Data[ 26477 ];

	UNavigationHandle_execDrawBreadCrumbs_Parms DrawBreadCrumbs_Parms;
	DrawBreadCrumbs_Parms.bPersistent = bPersistent;

	this->ProcessEvent ( pFnDrawBreadCrumbs, &DrawBreadCrumbs_Parms, NULL );
};

// Function Engine.NavigationHandle.StaticGetValidatedAnchorPosition
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartCheckBaseLocation         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct FVector                 out_NewAnchorLoc               ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::StaticGetValidatedAnchorPosition ( struct FVector StartCheckBaseLocation, struct FVector Extent, struct FVector* out_NewAnchorLoc )
{
	static UFunction* pFnStaticGetValidatedAnchorPosition = NULL;

	if ( ! pFnStaticGetValidatedAnchorPosition )
		pFnStaticGetValidatedAnchorPosition = (UFunction*) UObject::GObjObjects()->Data[ 26472 ];

	UNavigationHandle_execStaticGetValidatedAnchorPosition_Parms StaticGetValidatedAnchorPosition_Parms;
	memcpy ( &StaticGetValidatedAnchorPosition_Parms.StartCheckBaseLocation, &StartCheckBaseLocation, 0xC );
	memcpy ( &StaticGetValidatedAnchorPosition_Parms.Extent, &Extent, 0xC );

	pFnStaticGetValidatedAnchorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStaticGetValidatedAnchorPosition, &StaticGetValidatedAnchorPosition_Parms, NULL );

	pFnStaticGetValidatedAnchorPosition->FunctionFlags |= 0x400;

	if ( out_NewAnchorLoc )
		memcpy ( out_NewAnchorLoc, &StaticGetValidatedAnchorPosition_Parms.out_NewAnchorLoc, 0xC );

	return StaticGetValidatedAnchorPosition_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetValidatedAnchorPosition
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 OverrideStartLoc               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 out_NewAnchorLoc               ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::GetValidatedAnchorPosition ( struct FVector OverrideStartLoc, struct FVector* out_NewAnchorLoc )
{
	static UFunction* pFnGetValidatedAnchorPosition = NULL;

	if ( ! pFnGetValidatedAnchorPosition )
		pFnGetValidatedAnchorPosition = (UFunction*) UObject::GObjObjects()->Data[ 26468 ];

	UNavigationHandle_execGetValidatedAnchorPosition_Parms GetValidatedAnchorPosition_Parms;
	memcpy ( &GetValidatedAnchorPosition_Parms.OverrideStartLoc, &OverrideStartLoc, 0xC );

	pFnGetValidatedAnchorPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValidatedAnchorPosition, &GetValidatedAnchorPosition_Parms, NULL );

	pFnGetValidatedAnchorPosition->FunctionFlags |= 0x400;

	if ( out_NewAnchorLoc )
		memcpy ( out_NewAnchorLoc, &GetValidatedAnchorPosition_Parms.out_NewAnchorLoc, 0xC );

	return GetValidatedAnchorPosition_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetAllCoverSlotsInRadius
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 FromLoc                        ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// TArray< struct FCoverInfo >    out_CoverList                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UNavigationHandle::GetAllCoverSlotsInRadius ( struct FVector FromLoc, float Radius, TArray< struct FCoverInfo >* out_CoverList )
{
	static UFunction* pFnGetAllCoverSlotsInRadius = NULL;

	if ( ! pFnGetAllCoverSlotsInRadius )
		pFnGetAllCoverSlotsInRadius = (UFunction*) UObject::GObjObjects()->Data[ 26462 ];

	UNavigationHandle_execGetAllCoverSlotsInRadius_Parms GetAllCoverSlotsInRadius_Parms;
	memcpy ( &GetAllCoverSlotsInRadius_Parms.FromLoc, &FromLoc, 0xC );
	GetAllCoverSlotsInRadius_Parms.Radius = Radius;

	pFnGetAllCoverSlotsInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllCoverSlotsInRadius, &GetAllCoverSlotsInRadius_Parms, NULL );

	pFnGetAllCoverSlotsInRadius->FunctionFlags |= 0x400;

	if ( out_CoverList )
		memcpy ( out_CoverList, &GetAllCoverSlotsInRadius_Parms.out_CoverList, 0xC );

	return GetAllCoverSlotsInRadius_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PopulatePathfindingParamCache
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNavigationHandle::PopulatePathfindingParamCache ( )
{
	static UFunction* pFnPopulatePathfindingParamCache = NULL;

	if ( ! pFnPopulatePathfindingParamCache )
		pFnPopulatePathfindingParamCache = (UFunction*) UObject::GObjObjects()->Data[ 26460 ];

	UNavigationHandle_execPopulatePathfindingParamCache_Parms PopulatePathfindingParamCache_Parms;

	pFnPopulatePathfindingParamCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulatePathfindingParamCache, &PopulatePathfindingParamCache_Parms, NULL );

	pFnPopulatePathfindingParamCache->FunctionFlags |= 0x400;

	return PopulatePathfindingParamCache_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )

struct FVector UNavigationHandle::MoveToDesiredHeightAboveMesh ( struct FVector Point, float Height )
{
	static UFunction* pFnMoveToDesiredHeightAboveMesh = NULL;

	if ( ! pFnMoveToDesiredHeightAboveMesh )
		pFnMoveToDesiredHeightAboveMesh = (UFunction*) UObject::GObjObjects()->Data[ 26456 ];

	UNavigationHandle_execMoveToDesiredHeightAboveMesh_Parms MoveToDesiredHeightAboveMesh_Parms;
	memcpy ( &MoveToDesiredHeightAboveMesh_Parms.Point, &Point, 0xC );
	MoveToDesiredHeightAboveMesh_Parms.Height = Height;

	pFnMoveToDesiredHeightAboveMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToDesiredHeightAboveMesh, &MoveToDesiredHeightAboveMesh_Parms, NULL );

	pFnMoveToDesiredHeightAboveMesh->FunctionFlags |= 0x400;

	return MoveToDesiredHeightAboveMesh_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.CopyMovePointsFromPathCache
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 FinalDest                      ( CPF_Parm )
// TArray< struct FVector >       out_MovePoints                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNavigationHandle::CopyMovePointsFromPathCache ( struct FVector FinalDest, TArray< struct FVector >* out_MovePoints )
{
	static UFunction* pFnCopyMovePointsFromPathCache = NULL;

	if ( ! pFnCopyMovePointsFromPathCache )
		pFnCopyMovePointsFromPathCache = (UFunction*) UObject::GObjObjects()->Data[ 26452 ];

	UNavigationHandle_execCopyMovePointsFromPathCache_Parms CopyMovePointsFromPathCache_Parms;
	memcpy ( &CopyMovePointsFromPathCache_Parms.FinalDest, &FinalDest, 0xC );

	pFnCopyMovePointsFromPathCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyMovePointsFromPathCache, &CopyMovePointsFromPathCache_Parms, NULL );

	pFnCopyMovePointsFromPathCache->FunctionFlags |= 0x400;

	if ( out_MovePoints )
		memcpy ( out_MovePoints, &CopyMovePointsFromPathCache_Parms.out_MovePoints, 0xC );
};

// Function Engine.NavigationHandle.CalculatePathDistance
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 FinalDest                      ( CPF_OptionalParm | CPF_Parm )

float UNavigationHandle::CalculatePathDistance ( struct FVector FinalDest )
{
	static UFunction* pFnCalculatePathDistance = NULL;

	if ( ! pFnCalculatePathDistance )
		pFnCalculatePathDistance = (UFunction*) UObject::GObjObjects()->Data[ 26449 ];

	UNavigationHandle_execCalculatePathDistance_Parms CalculatePathDistance_Parms;
	memcpy ( &CalculatePathDistance_Parms.FinalDest, &FinalDest, 0xC );

	pFnCalculatePathDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculatePathDistance, &CalculatePathDistance_Parms, NULL );

	pFnCalculatePathDistance->FunctionFlags |= 0x400;

	return CalculatePathDistance_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetFirstMoveLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavigationHandle::GetFirstMoveLocation ( )
{
	static UFunction* pFnGetFirstMoveLocation = NULL;

	if ( ! pFnGetFirstMoveLocation )
		pFnGetFirstMoveLocation = (UFunction*) UObject::GObjObjects()->Data[ 26447 ];

	UNavigationHandle_execGetFirstMoveLocation_Parms GetFirstMoveLocation_Parms;

	pFnGetFirstMoveLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFirstMoveLocation, &GetFirstMoveLocation_Parms, NULL );

	pFnGetFirstMoveLocation->FunctionFlags |= 0x400;

	return GetFirstMoveLocation_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.IsAnchorInescapable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNavigationHandle::IsAnchorInescapable ( )
{
	static UFunction* pFnIsAnchorInescapable = NULL;

	if ( ! pFnIsAnchorInescapable )
		pFnIsAnchorInescapable = (UFunction*) UObject::GObjObjects()->Data[ 26445 ];

	UNavigationHandle_execIsAnchorInescapable_Parms IsAnchorInescapable_Parms;

	pFnIsAnchorInescapable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAnchorInescapable, &IsAnchorInescapable_Parms, NULL );

	pFnIsAnchorInescapable->FunctionFlags |= 0x400;

	return IsAnchorInescapable_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.LimitPathCacheDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          MaxDist                        ( CPF_Parm )

void UNavigationHandle::LimitPathCacheDistance ( float MaxDist )
{
	static UFunction* pFnLimitPathCacheDistance = NULL;

	if ( ! pFnLimitPathCacheDistance )
		pFnLimitPathCacheDistance = (UFunction*) UObject::GObjObjects()->Data[ 26443 ];

	UNavigationHandle_execLimitPathCacheDistance_Parms LimitPathCacheDistance_Parms;
	LimitPathCacheDistance_Parms.MaxDist = MaxDist;

	pFnLimitPathCacheDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLimitPathCacheDistance, &LimitPathCacheDistance_Parms, NULL );

	pFnLimitPathCacheDistance->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.GetValidPositionsForBox
// [0x00426400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned long                  bMustBeReachableFromStartPos   ( CPF_Parm )
// int                            MaxPositions                   ( CPF_OptionalParm | CPF_Parm )
// float                          MinRadius                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 ValidBoxAroundStartPos         ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FVector >       out_ValidPositions             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNavigationHandle::GetValidPositionsForBox ( struct FVector pos, float Radius, struct FVector Extent, unsigned long bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, struct FVector ValidBoxAroundStartPos, TArray< struct FVector >* out_ValidPositions )
{
	static UFunction* pFnGetValidPositionsForBox = NULL;

	if ( ! pFnGetValidPositionsForBox )
		pFnGetValidPositionsForBox = (UFunction*) UObject::GObjObjects()->Data[ 26433 ];

	UNavigationHandle_execGetValidPositionsForBox_Parms GetValidPositionsForBox_Parms;
	memcpy ( &GetValidPositionsForBox_Parms.pos, &pos, 0xC );
	GetValidPositionsForBox_Parms.Radius = Radius;
	memcpy ( &GetValidPositionsForBox_Parms.Extent, &Extent, 0xC );
	GetValidPositionsForBox_Parms.bMustBeReachableFromStartPos = bMustBeReachableFromStartPos;
	GetValidPositionsForBox_Parms.MaxPositions = MaxPositions;
	GetValidPositionsForBox_Parms.MinRadius = MinRadius;
	memcpy ( &GetValidPositionsForBox_Parms.ValidBoxAroundStartPos, &ValidBoxAroundStartPos, 0xC );

	pFnGetValidPositionsForBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValidPositionsForBox, &GetValidPositionsForBox_Parms, NULL );

	pFnGetValidPositionsForBox->FunctionFlags |= 0x400;

	if ( out_ValidPositions )
		memcpy ( out_ValidPositions, &GetValidPositionsForBox_Parms.out_ValidPositions, 0xC );
};

// Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 pos                            ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// TArray< struct FVector >       out_PolyCtrs                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UNavigationHandle::GetAllPolyCentersWithinBounds ( struct FVector pos, struct FVector Extent, TArray< struct FVector >* out_PolyCtrs )
{
	static UFunction* pFnGetAllPolyCentersWithinBounds = NULL;

	if ( ! pFnGetAllPolyCentersWithinBounds )
		pFnGetAllPolyCentersWithinBounds = (UFunction*) UObject::GObjObjects()->Data[ 26428 ];

	UNavigationHandle_execGetAllPolyCentersWithinBounds_Parms GetAllPolyCentersWithinBounds_Parms;
	memcpy ( &GetAllPolyCentersWithinBounds_Parms.pos, &pos, 0xC );
	memcpy ( &GetAllPolyCentersWithinBounds_Parms.Extent, &Extent, 0xC );

	pFnGetAllPolyCentersWithinBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllPolyCentersWithinBounds, &GetAllPolyCentersWithinBounds_Parms, NULL );

	pFnGetAllPolyCentersWithinBounds->FunctionFlags |= 0x400;

	if ( out_PolyCtrs )
		memcpy ( out_PolyCtrs, &GetAllPolyCentersWithinBounds_Parms.out_PolyCtrs, 0xC );
};

// Function Engine.NavigationHandle.GetCurrentEdgeType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UNavigationHandle::GetCurrentEdgeType ( )
{
	static UFunction* pFnGetCurrentEdgeType = NULL;

	if ( ! pFnGetCurrentEdgeType )
		pFnGetCurrentEdgeType = (UFunction*) UObject::GObjObjects()->Data[ 26426 ];

	UNavigationHandle_execGetCurrentEdgeType_Parms GetCurrentEdgeType_Parms;

	pFnGetCurrentEdgeType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentEdgeType, &GetCurrentEdgeType_Parms, NULL );

	pFnGetCurrentEdgeType->FunctionFlags |= 0x400;

	return GetCurrentEdgeType_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ClearCurrentEdge
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavigationHandle::ClearCurrentEdge ( )
{
	static UFunction* pFnClearCurrentEdge = NULL;

	if ( ! pFnClearCurrentEdge )
		pFnClearCurrentEdge = (UFunction*) UObject::GObjObjects()->Data[ 26425 ];

	UNavigationHandle_execClearCurrentEdge_Parms ClearCurrentEdge_Parms;

	pFnClearCurrentEdge->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCurrentEdge, &ClearCurrentEdge_Parms, NULL );

	pFnClearCurrentEdge->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.GetCurrentEdgeDebugText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNavigationHandle::GetCurrentEdgeDebugText ( )
{
	static UFunction* pFnGetCurrentEdgeDebugText = NULL;

	if ( ! pFnGetCurrentEdgeDebugText )
		pFnGetCurrentEdgeDebugText = (UFunction*) UObject::GObjObjects()->Data[ 26423 ];

	UNavigationHandle_execGetCurrentEdgeDebugText_Parms GetCurrentEdgeDebugText_Parms;

	pFnGetCurrentEdgeDebugText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentEdgeDebugText, &GetCurrentEdgeDebugText_Parms, NULL );

	pFnGetCurrentEdgeDebugText->FunctionFlags |= 0x400;

	return GetCurrentEdgeDebugText_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PrintPathCacheDebugText
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavigationHandle::PrintPathCacheDebugText ( )
{
	static UFunction* pFnPrintPathCacheDebugText = NULL;

	if ( ! pFnPrintPathCacheDebugText )
		pFnPrintPathCacheDebugText = (UFunction*) UObject::GObjObjects()->Data[ 26422 ];

	UNavigationHandle_execPrintPathCacheDebugText_Parms PrintPathCacheDebugText_Parms;

	pFnPrintPathCacheDebugText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrintPathCacheDebugText, &PrintPathCacheDebugText_Parms, NULL );

	pFnPrintPathCacheDebugText->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.DrawPathCache
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 DrawOffset                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPersistent                    ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_OptionalParm | CPF_Parm )

void UNavigationHandle::DrawPathCache ( struct FVector DrawOffset, unsigned long bPersistent, struct FColor DrawColor )
{
	static UFunction* pFnDrawPathCache = NULL;

	if ( ! pFnDrawPathCache )
		pFnDrawPathCache = (UFunction*) UObject::GObjObjects()->Data[ 26418 ];

	UNavigationHandle_execDrawPathCache_Parms DrawPathCache_Parms;
	memcpy ( &DrawPathCache_Parms.DrawOffset, &DrawOffset, 0xC );
	DrawPathCache_Parms.bPersistent = bPersistent;
	memcpy ( &DrawPathCache_Parms.DrawColor, &DrawColor, 0x4 );

	pFnDrawPathCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPathCache, &DrawPathCache_Parms, NULL );

	pFnDrawPathCache->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.ActorReachable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool UNavigationHandle::ActorReachable ( class AActor* A )
{
	static UFunction* pFnActorReachable = NULL;

	if ( ! pFnActorReachable )
		pFnActorReachable = (UFunction*) UObject::GObjObjects()->Data[ 26415 ];

	UNavigationHandle_execActorReachable_Parms ActorReachable_Parms;
	ActorReachable_Parms.A = A;

	pFnActorReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachable, &ActorReachable_Parms, NULL );

	pFnActorReachable->FunctionFlags |= 0x400;

	return ActorReachable_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PointReachable
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// struct FVector                 OverrideStartPoint             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAllowHitsInEndCollisionBox    ( CPF_OptionalParm | CPF_Parm )

bool UNavigationHandle::PointReachable ( struct FVector Point, struct FVector OverrideStartPoint, unsigned long bAllowHitsInEndCollisionBox )
{
	static UFunction* pFnPointReachable = NULL;

	if ( ! pFnPointReachable )
		pFnPointReachable = (UFunction*) UObject::GObjObjects()->Data[ 26410 ];

	UNavigationHandle_execPointReachable_Parms PointReachable_Parms;
	memcpy ( &PointReachable_Parms.Point, &Point, 0xC );
	memcpy ( &PointReachable_Parms.OverrideStartPoint, &OverrideStartPoint, 0xC );
	PointReachable_Parms.bAllowHitsInEndCollisionBox = bAllowHitsInEndCollisionBox;

	pFnPointReachable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointReachable, &PointReachable_Parms, NULL );

	pFnPointReachable->FunctionFlags |= 0x400;

	return PointReachable_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PointCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Pt                             ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )

bool UNavigationHandle::PointCheck ( struct FVector Pt, struct FVector Extent )
{
	static UFunction* pFnPointCheck = NULL;

	if ( ! pFnPointCheck )
		pFnPointCheck = (UFunction*) UObject::GObjObjects()->Data[ 26406 ];

	UNavigationHandle_execPointCheck_Parms PointCheck_Parms;
	memcpy ( &PointCheck_Parms.Pt, &Pt, 0xC );
	memcpy ( &PointCheck_Parms.Extent, &Extent, 0xC );

	pFnPointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointCheck, &PointCheck_Parms, NULL );

	pFnPointCheck->FunctionFlags |= 0x400;

	return PointCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.LineCheck
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// struct FVector                 out_HitLocation                ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitNormal                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UNavigationHandle::LineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal )
{
	static UFunction* pFnLineCheck = NULL;

	if ( ! pFnLineCheck )
		pFnLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 26399 ];

	UNavigationHandle_execLineCheck_Parms LineCheck_Parms;
	memcpy ( &LineCheck_Parms.Start, &Start, 0xC );
	memcpy ( &LineCheck_Parms.End, &End, 0xC );
	memcpy ( &LineCheck_Parms.Extent, &Extent, 0xC );

	pFnLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheck, &LineCheck_Parms, NULL );

	pFnLineCheck->FunctionFlags |= 0x400;

	if ( out_HitLocation )
		memcpy ( out_HitLocation, &LineCheck_Parms.out_HitLocation, 0xC );

	if ( out_HitNormal )
		memcpy ( out_HitNormal, &LineCheck_Parms.out_HitNormal, 0xC );

	return LineCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ObstaclePointCheck
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Pt                             ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )

bool UNavigationHandle::ObstaclePointCheck ( struct FVector Pt, struct FVector Extent )
{
	static UFunction* pFnObstaclePointCheck = NULL;

	if ( ! pFnObstaclePointCheck )
		pFnObstaclePointCheck = (UFunction*) UObject::GObjObjects()->Data[ 26395 ];

	UNavigationHandle_execObstaclePointCheck_Parms ObstaclePointCheck_Parms;
	memcpy ( &ObstaclePointCheck_Parms.Pt, &Pt, 0xC );
	memcpy ( &ObstaclePointCheck_Parms.Extent, &Extent, 0xC );

	pFnObstaclePointCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObstaclePointCheck, &ObstaclePointCheck_Parms, NULL );

	pFnObstaclePointCheck->FunctionFlags |= 0x400;

	return ObstaclePointCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ObstacleLineCheck
// [0x00426401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned long                  bIgnoreNormalMesh              ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 out_HitLoc                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// struct FVector                 out_HitNorm                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UNavigationHandle::ObstacleLineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, unsigned long bIgnoreNormalMesh, struct FVector* out_HitLoc, struct FVector* out_HitNorm )
{
	static UFunction* pFnObstacleLineCheck = NULL;

	if ( ! pFnObstacleLineCheck )
		pFnObstacleLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 26387 ];

	UNavigationHandle_execObstacleLineCheck_Parms ObstacleLineCheck_Parms;
	memcpy ( &ObstacleLineCheck_Parms.Start, &Start, 0xC );
	memcpy ( &ObstacleLineCheck_Parms.End, &End, 0xC );
	memcpy ( &ObstacleLineCheck_Parms.Extent, &Extent, 0xC );
	ObstacleLineCheck_Parms.bIgnoreNormalMesh = bIgnoreNormalMesh;

	pFnObstacleLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnObstacleLineCheck, &ObstacleLineCheck_Parms, NULL );

	pFnObstacleLineCheck->FunctionFlags |= 0x400;

	if ( out_HitLoc )
		memcpy ( out_HitLoc, &ObstacleLineCheck_Parms.out_HitLoc, 0xC );

	if ( out_HitNorm )
		memcpy ( out_HitNorm, &ObstacleLineCheck_Parms.out_HitNorm, 0xC );

	return ObstacleLineCheck_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.SuggestMovePreparation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )
// struct FVector                 MovePt                         ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::SuggestMovePreparation ( class AController* C, struct FVector* MovePt )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 26383 ];

	UNavigationHandle_execSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.C = C;

	pFnSuggestMovePreparation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	pFnSuggestMovePreparation->FunctionFlags |= 0x400;

	if ( MovePt )
		memcpy ( MovePt, &SuggestMovePreparation_Parms.MovePt, 0xC );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.FindPath
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  out_DestActor                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// int                            out_DestItem                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool UNavigationHandle::FindPath ( class AActor** out_DestActor, int* out_DestItem )
{
	static UFunction* pFnFindPath = NULL;

	if ( ! pFnFindPath )
		pFnFindPath = (UFunction*) UObject::GObjObjects()->Data[ 13464 ];

	UNavigationHandle_execFindPath_Parms FindPath_Parms;

	pFnFindPath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPath, &FindPath_Parms, NULL );

	pFnFindPath->FunctionFlags |= 0x400;

	if ( out_DestActor )
		*out_DestActor = FindPath_Parms.out_DestActor;

	if ( out_DestItem )
		*out_DestItem = FindPath_Parms.out_DestItem;

	return FindPath_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.ComputeValidFinalDestination
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 out_ComputedPosition           ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::ComputeValidFinalDestination ( struct FVector* out_ComputedPosition )
{
	static UFunction* pFnComputeValidFinalDestination = NULL;

	if ( ! pFnComputeValidFinalDestination )
		pFnComputeValidFinalDestination = (UFunction*) UObject::GObjObjects()->Data[ 26378 ];

	UNavigationHandle_execComputeValidFinalDestination_Parms ComputeValidFinalDestination_Parms;

	pFnComputeValidFinalDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeValidFinalDestination, &ComputeValidFinalDestination_Parms, NULL );

	pFnComputeValidFinalDestination->FunctionFlags |= 0x400;

	if ( out_ComputedPosition )
		memcpy ( out_ComputedPosition, &ComputeValidFinalDestination_Parms.out_ComputedPosition, 0xC );

	return ComputeValidFinalDestination_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.SetFinalDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 FinalDest                      ( CPF_Parm )

bool UNavigationHandle::SetFinalDestination ( struct FVector FinalDest )
{
	static UFunction* pFnSetFinalDestination = NULL;

	if ( ! pFnSetFinalDestination )
		pFnSetFinalDestination = (UFunction*) UObject::GObjObjects()->Data[ 26375 ];

	UNavigationHandle_execSetFinalDestination_Parms SetFinalDestination_Parms;
	memcpy ( &SetFinalDestination_Parms.FinalDest, &FinalDest, 0xC );

	pFnSetFinalDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFinalDestination, &SetFinalDestination_Parms, NULL );

	pFnSetFinalDestination->FunctionFlags |= 0x400;

	return SetFinalDestination_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetNextMoveLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          ArrivalDistance                ( CPF_Parm )
// struct FVector                 out_MoveDest                   ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::GetNextMoveLocation ( float ArrivalDistance, struct FVector* out_MoveDest )
{
	static UFunction* pFnGetNextMoveLocation = NULL;

	if ( ! pFnGetNextMoveLocation )
		pFnGetNextMoveLocation = (UFunction*) UObject::GObjObjects()->Data[ 26371 ];

	UNavigationHandle_execGetNextMoveLocation_Parms GetNextMoveLocation_Parms;
	GetNextMoveLocation_Parms.ArrivalDistance = ArrivalDistance;

	pFnGetNextMoveLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextMoveLocation, &GetNextMoveLocation_Parms, NULL );

	pFnGetNextMoveLocation->FunctionFlags |= 0x400;

	if ( out_MoveDest )
		memcpy ( out_MoveDest, &GetNextMoveLocation_Parms.out_MoveDest, 0xC );

	return GetNextMoveLocation_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetPylonFromPos
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class APylon*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Position                       ( CPF_Parm )

class APylon* UNavigationHandle::GetPylonFromPos ( struct FVector Position )
{
	static UFunction* pFnGetPylonFromPos = NULL;

	if ( ! pFnGetPylonFromPos )
		pFnGetPylonFromPos = (UFunction*) UObject::GObjObjects()->Data[ 26368 ];

	UNavigationHandle_execGetPylonFromPos_Parms GetPylonFromPos_Parms;
	memcpy ( &GetPylonFromPos_Parms.Position, &Position, 0xC );

	pFnGetPylonFromPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPylonFromPos, &GetPylonFromPos_Parms, NULL );

	pFnGetPylonFromPos->FunctionFlags |= 0x400;

	return GetPylonFromPos_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.FindPylon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNavigationHandle::FindPylon ( )
{
	static UFunction* pFnFindPylon = NULL;

	if ( ! pFnFindPylon )
		pFnFindPylon = (UFunction*) UObject::GObjObjects()->Data[ 26366 ];

	UNavigationHandle_execFindPylon_Parms FindPylon_Parms;

	pFnFindPylon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPylon, &FindPylon_Parms, NULL );

	pFnFindPylon->FunctionFlags |= 0x400;

	return FindPylon_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetBestUnfinishedPathPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavigationHandle::GetBestUnfinishedPathPoint ( )
{
	static UFunction* pFnGetBestUnfinishedPathPoint = NULL;

	if ( ! pFnGetBestUnfinishedPathPoint )
		pFnGetBestUnfinishedPathPoint = (UFunction*) UObject::GObjObjects()->Data[ 26364 ];

	UNavigationHandle_execGetBestUnfinishedPathPoint_Parms GetBestUnfinishedPathPoint_Parms;

	pFnGetBestUnfinishedPathPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestUnfinishedPathPoint, &GetBestUnfinishedPathPoint_Parms, NULL );

	pFnGetBestUnfinishedPathPoint->FunctionFlags |= 0x400;

	return GetBestUnfinishedPathPoint_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PathCache_RemoveIndex
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InIdx                          ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )

bool UNavigationHandle::PathCache_RemoveIndex ( int InIdx, int Count )
{
	static UFunction* pFnPathCache_RemoveIndex = NULL;

	if ( ! pFnPathCache_RemoveIndex )
		pFnPathCache_RemoveIndex = (UFunction*) UObject::GObjObjects()->Data[ 26360 ];

	UNavigationHandle_execPathCache_RemoveIndex_Parms PathCache_RemoveIndex_Parms;
	PathCache_RemoveIndex_Parms.InIdx = InIdx;
	PathCache_RemoveIndex_Parms.Count = Count;

	pFnPathCache_RemoveIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPathCache_RemoveIndex, &PathCache_RemoveIndex_Parms, NULL );

	pFnPathCache_RemoveIndex->FunctionFlags |= 0x400;

	return PathCache_RemoveIndex_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PathCache_GetGoalPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavigationHandle::PathCache_GetGoalPoint ( )
{
	static UFunction* pFnPathCache_GetGoalPoint = NULL;

	if ( ! pFnPathCache_GetGoalPoint )
		pFnPathCache_GetGoalPoint = (UFunction*) UObject::GObjObjects()->Data[ 26358 ];

	UNavigationHandle_execPathCache_GetGoalPoint_Parms PathCache_GetGoalPoint_Parms;

	pFnPathCache_GetGoalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPathCache_GetGoalPoint, &PathCache_GetGoalPoint_Parms, NULL );

	pFnPathCache_GetGoalPoint->FunctionFlags |= 0x400;

	return PathCache_GetGoalPoint_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.PathCache_Empty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UNavigationHandle::PathCache_Empty ( )
{
	static UFunction* pFnPathCache_Empty = NULL;

	if ( ! pFnPathCache_Empty )
		pFnPathCache_Empty = (UFunction*) UObject::GObjObjects()->Data[ 26356 ];

	UNavigationHandle_execPathCache_Empty_Parms PathCache_Empty_Parms;

	pFnPathCache_Empty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPathCache_Empty, &PathCache_Empty_Parms, NULL );

	pFnPathCache_Empty->FunctionFlags |= 0x400;

	return PathCache_Empty_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.GetPathCacheLength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UNavigationHandle::GetPathCacheLength ( )
{
	static UFunction* pFnGetPathCacheLength = NULL;

	if ( ! pFnGetPathCacheLength )
		pFnGetPathCacheLength = (UFunction*) UObject::GObjObjects()->Data[ 26354 ];

	UNavigationHandle_execGetPathCacheLength_Parms GetPathCacheLength_Parms;

	pFnGetPathCacheLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPathCacheLength, &GetPathCacheLength_Parms, NULL );

	pFnGetPathCacheLength->FunctionFlags |= 0x400;

	return GetPathCacheLength_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.CreatePathGoalEvaluator
// [0x00020002] 
// Parameters infos:
// class UNavMeshPathGoalEvaluator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )

class UNavMeshPathGoalEvaluator* UNavigationHandle::CreatePathGoalEvaluator ( class UClass* GoalEvalClass )
{
	static UFunction* pFnCreatePathGoalEvaluator = NULL;

	if ( ! pFnCreatePathGoalEvaluator )
		pFnCreatePathGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 26351 ];

	UNavigationHandle_execCreatePathGoalEvaluator_Parms CreatePathGoalEvaluator_Parms;
	CreatePathGoalEvaluator_Parms.GoalEvalClass = GoalEvalClass;

	this->ProcessEvent ( pFnCreatePathGoalEvaluator, &CreatePathGoalEvaluator_Parms, NULL );

	return CreatePathGoalEvaluator_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.CreatePathConstraint
// [0x00020002] 
// Parameters infos:
// class UNavMeshPathConstraint*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )

class UNavMeshPathConstraint* UNavigationHandle::CreatePathConstraint ( class UClass* ConstraintClass )
{
	static UFunction* pFnCreatePathConstraint = NULL;

	if ( ! pFnCreatePathConstraint )
		pFnCreatePathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 26348 ];

	UNavigationHandle_execCreatePathConstraint_Parms CreatePathConstraint_Parms;
	CreatePathConstraint_Parms.ConstraintClass = ConstraintClass;

	this->ProcessEvent ( pFnCreatePathConstraint, &CreatePathConstraint_Parms, NULL );

	return CreatePathConstraint_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.DoesPylonAHaveAPathToPylonB
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APylon*                  A                              ( CPF_Parm )
// class APylon*                  B                              ( CPF_Parm )

bool UNavigationHandle::DoesPylonAHaveAPathToPylonB ( class APylon* A, class APylon* B )
{
	static UFunction* pFnDoesPylonAHaveAPathToPylonB = NULL;

	if ( ! pFnDoesPylonAHaveAPathToPylonB )
		pFnDoesPylonAHaveAPathToPylonB = (UFunction*) UObject::GObjObjects()->Data[ 26344 ];

	UNavigationHandle_execDoesPylonAHaveAPathToPylonB_Parms DoesPylonAHaveAPathToPylonB_Parms;
	DoesPylonAHaveAPathToPylonB_Parms.A = A;
	DoesPylonAHaveAPathToPylonB_Parms.B = B;

	pFnDoesPylonAHaveAPathToPylonB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoesPylonAHaveAPathToPylonB, &DoesPylonAHaveAPathToPylonB_Parms, NULL );

	pFnDoesPylonAHaveAPathToPylonB->FunctionFlags |= 0x400;

	return DoesPylonAHaveAPathToPylonB_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.BuildFromPylonAToPylonB
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APylon*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APylon*                  A                              ( CPF_Parm )
// class APylon*                  B                              ( CPF_Parm )

class APylon* UNavigationHandle::BuildFromPylonAToPylonB ( class APylon* A, class APylon* B )
{
	static UFunction* pFnBuildFromPylonAToPylonB = NULL;

	if ( ! pFnBuildFromPylonAToPylonB )
		pFnBuildFromPylonAToPylonB = (UFunction*) UObject::GObjObjects()->Data[ 26340 ];

	UNavigationHandle_execBuildFromPylonAToPylonB_Parms BuildFromPylonAToPylonB_Parms;
	BuildFromPylonAToPylonB_Parms.A = A;
	BuildFromPylonAToPylonB_Parms.B = B;

	pFnBuildFromPylonAToPylonB->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildFromPylonAToPylonB, &BuildFromPylonAToPylonB_Parms, NULL );

	pFnBuildFromPylonAToPylonB->FunctionFlags |= 0x400;

	return BuildFromPylonAToPylonB_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.AddGoalEvaluator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathGoalEvaluator* Evaluator                      ( CPF_Parm )

void UNavigationHandle::AddGoalEvaluator ( class UNavMeshPathGoalEvaluator* Evaluator )
{
	static UFunction* pFnAddGoalEvaluator = NULL;

	if ( ! pFnAddGoalEvaluator )
		pFnAddGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 26338 ];

	UNavigationHandle_execAddGoalEvaluator_Parms AddGoalEvaluator_Parms;
	AddGoalEvaluator_Parms.Evaluator = Evaluator;

	pFnAddGoalEvaluator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGoalEvaluator, &AddGoalEvaluator_Parms, NULL );

	pFnAddGoalEvaluator->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.AddPathConstraint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UNavMeshPathConstraint*  Constraint                     ( CPF_Parm )

void UNavigationHandle::AddPathConstraint ( class UNavMeshPathConstraint* Constraint )
{
	static UFunction* pFnAddPathConstraint = NULL;

	if ( ! pFnAddPathConstraint )
		pFnAddPathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 26336 ];

	UNavigationHandle_execAddPathConstraint_Parms AddPathConstraint_Parms;
	AddPathConstraint_Parms.Constraint = Constraint;

	pFnAddPathConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPathConstraint, &AddPathConstraint_Parms, NULL );

	pFnAddPathConstraint->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.ClearConstraints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavigationHandle::ClearConstraints ( )
{
	static UFunction* pFnClearConstraints = NULL;

	if ( ! pFnClearConstraints )
		pFnClearConstraints = (UFunction*) UObject::GObjObjects()->Data[ 26335 ];

	UNavigationHandle_execClearConstraints_Parms ClearConstraints_Parms;

	pFnClearConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearConstraints, &ClearConstraints_Parms, NULL );

	pFnClearConstraints->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.GetNextBreadCrumb
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 out_BreadCrumbLoc              ( CPF_Parm | CPF_OutParm )

bool UNavigationHandle::GetNextBreadCrumb ( struct FVector* out_BreadCrumbLoc )
{
	static UFunction* pFnGetNextBreadCrumb = NULL;

	if ( ! pFnGetNextBreadCrumb )
		pFnGetNextBreadCrumb = (UFunction*) UObject::GObjObjects()->Data[ 26332 ];

	UNavigationHandle_execGetNextBreadCrumb_Parms GetNextBreadCrumb_Parms;

	pFnGetNextBreadCrumb->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNextBreadCrumb, &GetNextBreadCrumb_Parms, NULL );

	pFnGetNextBreadCrumb->FunctionFlags |= 0x400;

	if ( out_BreadCrumbLoc )
		memcpy ( out_BreadCrumbLoc, &GetNextBreadCrumb_Parms.out_BreadCrumbLoc, 0xC );

	return GetNextBreadCrumb_Parms.ReturnValue;
};

// Function Engine.NavigationHandle.UpdateBreadCrumbs
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 InLocation                     ( CPF_Parm )

void UNavigationHandle::UpdateBreadCrumbs ( struct FVector InLocation )
{
	static UFunction* pFnUpdateBreadCrumbs = NULL;

	if ( ! pFnUpdateBreadCrumbs )
		pFnUpdateBreadCrumbs = (UFunction*) UObject::GObjObjects()->Data[ 26330 ];

	UNavigationHandle_execUpdateBreadCrumbs_Parms UpdateBreadCrumbs_Parms;
	memcpy ( &UpdateBreadCrumbs_Parms.InLocation, &InLocation, 0xC );

	pFnUpdateBreadCrumbs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBreadCrumbs, &UpdateBreadCrumbs_Parms, NULL );

	pFnUpdateBreadCrumbs->FunctionFlags |= 0x400;
};

// Function Engine.NavigationHandle.CopyPathStoreToPathCache
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FPathStore              InStore                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UNavigationHandle::CopyPathStoreToPathCache ( struct FPathStore* InStore )
{
	static UFunction* pFnCopyPathStoreToPathCache = NULL;

	if ( ! pFnCopyPathStoreToPathCache )
		pFnCopyPathStoreToPathCache = (UFunction*) UObject::GObjObjects()->Data[ 26328 ];

	UNavigationHandle_execCopyPathStoreToPathCache_Parms CopyPathStoreToPathCache_Parms;

	pFnCopyPathStoreToPathCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyPathStoreToPathCache, &CopyPathStoreToPathCache_Parms, NULL );

	pFnCopyPathStoreToPathCache->FunctionFlags |= 0x400;

	if ( InStore )
		memcpy ( InStore, &CopyPathStoreToPathCache_Parms.InStore, 0xC );
};

// Function Engine.NavMeshGoal_Filter.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNavMeshGoal_Filter::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 26540 ];

	UNavMeshGoal_Filter_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                ( CPF_Parm )
// int                            InMinDistancePathShouldBe      ( CPF_Parm )

bool UNavMeshGoalFilter_MinPathDistance::MustBeLongerPathThan ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe )
{
	static UFunction* pFnMustBeLongerPathThan = NULL;

	if ( ! pFnMustBeLongerPathThan )
		pFnMustBeLongerPathThan = (UFunction*) UObject::GObjObjects()->Data[ 26606 ];

	UNavMeshGoalFilter_MinPathDistance_execMustBeLongerPathThan_Parms MustBeLongerPathThan_Parms;
	MustBeLongerPathThan_Parms.FilterContainer = FilterContainer;
	MustBeLongerPathThan_Parms.InMinDistancePathShouldBe = InMinDistancePathShouldBe;

	this->ProcessEvent ( pFnMustBeLongerPathThan, &MustBeLongerPathThan_Parms, NULL );

	return MustBeLongerPathThan_Parms.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                ( CPF_Parm )
// float                          InDistanceToCheck              ( CPF_Const | CPF_Parm )

bool UNavMeshGoalFilter_NotNearOtherAI::NotNearOtherAI ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck )
{
	static UFunction* pFnNotNearOtherAI = NULL;

	if ( ! pFnNotNearOtherAI )
		pFnNotNearOtherAI = (UFunction*) UObject::GObjObjects()->Data[ 26612 ];

	UNavMeshGoalFilter_NotNearOtherAI_execNotNearOtherAI_Parms NotNearOtherAI_Parms;
	NotNearOtherAI_Parms.FilterContainer = FilterContainer;
	NotNearOtherAI_Parms.InDistanceToCheck = InDistanceToCheck;

	this->ProcessEvent ( pFnNotNearOtherAI, &NotNearOtherAI_Parms, NULL );

	return NotNearOtherAI_Parms.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                ( CPF_Parm )
// struct FVector                 InOutOfViewLocation            ( CPF_Parm )

bool UNavMeshGoalFilter_OutOfViewFrom::MustBeHiddenFromThisPoint ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InOutOfViewLocation )
{
	static UFunction* pFnMustBeHiddenFromThisPoint = NULL;

	if ( ! pFnMustBeHiddenFromThisPoint )
		pFnMustBeHiddenFromThisPoint = (UFunction*) UObject::GObjObjects()->Data[ 26619 ];

	UNavMeshGoalFilter_OutOfViewFrom_execMustBeHiddenFromThisPoint_Parms MustBeHiddenFromThisPoint_Parms;
	MustBeHiddenFromThisPoint_Parms.FilterContainer = FilterContainer;
	memcpy ( &MustBeHiddenFromThisPoint_Parms.InOutOfViewLocation, &InOutOfViewLocation, 0xC );

	this->ProcessEvent ( pFnMustBeHiddenFromThisPoint, &MustBeHiddenFromThisPoint_Parms, NULL );

	return MustBeHiddenFromThisPoint_Parms.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                ( CPF_Parm )
// struct FVector                 InLocation                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// float                          InEpsilon                      ( CPF_Parm )

bool UNavMeshGoalFilter_OutSideOfDotProductWedge::OutsideOfDotProductWedge ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InLocation, struct FRotator InRotation, float InEpsilon )
{
	static UFunction* pFnOutsideOfDotProductWedge = NULL;

	if ( ! pFnOutsideOfDotProductWedge )
		pFnOutsideOfDotProductWedge = (UFunction*) UObject::GObjObjects()->Data[ 26627 ];

	UNavMeshGoalFilter_OutSideOfDotProductWedge_execOutsideOfDotProductWedge_Parms OutsideOfDotProductWedge_Parms;
	OutsideOfDotProductWedge_Parms.FilterContainer = FilterContainer;
	memcpy ( &OutsideOfDotProductWedge_Parms.InLocation, &InLocation, 0xC );
	memcpy ( &OutsideOfDotProductWedge_Parms.InRotation, &InRotation, 0xC );
	OutsideOfDotProductWedge_Parms.InEpsilon = InEpsilon;

	this->ProcessEvent ( pFnOutsideOfDotProductWedge, &OutsideOfDotProductWedge_Parms, NULL );

	return OutsideOfDotProductWedge_Parms.ReturnValue;
};

// Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                ( CPF_Parm )
// struct FVector                 InOverrideExtentToCheck        ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoalFilter_PolyEncompassesAI::MakeSureAIFits ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InOverrideExtentToCheck )
{
	static UFunction* pFnMakeSureAIFits = NULL;

	if ( ! pFnMakeSureAIFits )
		pFnMakeSureAIFits = (UFunction*) UObject::GObjObjects()->Data[ 26635 ];

	UNavMeshGoalFilter_PolyEncompassesAI_execMakeSureAIFits_Parms MakeSureAIFits_Parms;
	MakeSureAIFits_Parms.FilterContainer = FilterContainer;
	memcpy ( &MakeSureAIFits_Parms.InOverrideExtentToCheck, &InOverrideExtentToCheck, 0xC );

	this->ProcessEvent ( pFnMakeSureAIFits, &MakeSureAIFits_Parms, NULL );

	return MakeSureAIFits_Parms.ReturnValue;
};

// Function Engine.NavMeshPathConstraint.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNavMeshPathConstraint::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 26669 ];

	UNavMeshPathConstraint_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.NavMeshPathConstraint.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNavMeshPathConstraint::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26668 ];

	UNavMeshPathConstraint_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_AlongLine.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_AlongLine::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26677 ];

	UNavMeshPath_AlongLine_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_AlongLine.AlongLine
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )

bool UNavMeshPath_AlongLine::AlongLine ( class UNavigationHandle* NavHandle, struct FVector Dir )
{
	static UFunction* pFnAlongLine = NULL;

	if ( ! pFnAlongLine )
		pFnAlongLine = (UFunction*) UObject::GObjObjects()->Data[ 26672 ];

	UNavMeshPath_AlongLine_execAlongLine_Parms AlongLine_Parms;
	AlongLine_Parms.NavHandle = NavHandle;
	memcpy ( &AlongLine_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnAlongLine, &AlongLine_Parms, NULL );

	return AlongLine_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )

bool UNavMeshPath_EnforceTwoWayEdges::EnforceTwoWayEdges ( class UNavigationHandle* NavHandle )
{
	static UFunction* pFnEnforceTwoWayEdges = NULL;

	if ( ! pFnEnforceTwoWayEdges )
		pFnEnforceTwoWayEdges = (UFunction*) UObject::GObjObjects()->Data[ 26678 ];

	UNavMeshPath_EnforceTwoWayEdges_execEnforceTwoWayEdges_Parms EnforceTwoWayEdges_Parms;
	EnforceTwoWayEdges_Parms.NavHandle = NavHandle;

	this->ProcessEvent ( pFnEnforceTwoWayEdges, &EnforceTwoWayEdges_Parms, NULL );

	return EnforceTwoWayEdges_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_MinDistBetweenSpecsOfType::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26694 ];

	UNavMeshPath_MinDistBetweenSpecsOfType_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// float                          InMinDist                      ( CPF_Parm )
// unsigned char                  InEdgeType                     ( CPF_Parm )
// struct FVector                 LastLocation                   ( CPF_OptionalParm | CPF_Parm )
// float                          InPenalty                      ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshPath_MinDistBetweenSpecsOfType::EnforceMinDist ( class UNavigationHandle* NavHandle, float InMinDist, unsigned char InEdgeType, struct FVector LastLocation, float InPenalty )
{
	static UFunction* pFnEnforceMinDist = NULL;

	if ( ! pFnEnforceMinDist )
		pFnEnforceMinDist = (UFunction*) UObject::GObjObjects()->Data[ 26686 ];

	UNavMeshPath_MinDistBetweenSpecsOfType_execEnforceMinDist_Parms EnforceMinDist_Parms;
	EnforceMinDist_Parms.NavHandle = NavHandle;
	EnforceMinDist_Parms.InMinDist = InMinDist;
	EnforceMinDist_Parms.InEdgeType = InEdgeType;
	memcpy ( &EnforceMinDist_Parms.LastLocation, &LastLocation, 0xC );
	EnforceMinDist_Parms.InPenalty = InPenalty;

	this->ProcessEvent ( pFnEnforceMinDist, &EnforceMinDist_Parms, NULL );

	return EnforceMinDist_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_SameCoverLink.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_SameCoverLink::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26700 ];

	UNavMeshPath_SameCoverLink_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_SameCoverLink.SameCoverLink
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// class ACoverLink*              InLink                         ( CPF_Parm )

void UNavMeshPath_SameCoverLink::SameCoverLink ( class UNavigationHandle* NavHandle, class ACoverLink* InLink )
{
	static UFunction* pFnSameCoverLink = NULL;

	if ( ! pFnSameCoverLink )
		pFnSameCoverLink = (UFunction*) UObject::GObjObjects()->Data[ 26696 ];

	UNavMeshPath_SameCoverLink_execSameCoverLink_Parms SameCoverLink_Parms;
	SameCoverLink_Parms.NavHandle = NavHandle;
	SameCoverLink_Parms.InLink = InLink;

	this->ProcessEvent ( pFnSameCoverLink, &SameCoverLink_Parms, NULL );
};

// Function Engine.NavMeshPath_Toward.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_Toward::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26713 ];

	UNavMeshPath_Toward_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_Toward.TowardPoint
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )

bool UNavMeshPath_Toward::eventTowardPoint ( class UNavigationHandle* NavHandle, struct FVector Point )
{
	static UFunction* pFnTowardPoint = NULL;

	if ( ! pFnTowardPoint )
		pFnTowardPoint = (UFunction*) UObject::GObjObjects()->Data[ 13460 ];

	UNavMeshPath_Toward_eventTowardPoint_Parms TowardPoint_Parms;
	TowardPoint_Parms.NavHandle = NavHandle;
	memcpy ( &TowardPoint_Parms.Point, &Point, 0xC );

	this->ProcessEvent ( pFnTowardPoint, &TowardPoint_Parms, NULL );

	return TowardPoint_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_Toward.TowardGoal
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )

bool UNavMeshPath_Toward::TowardGoal ( class UNavigationHandle* NavHandle, class AActor* Goal )
{
	static UFunction* pFnTowardGoal = NULL;

	if ( ! pFnTowardGoal )
		pFnTowardGoal = (UFunction*) UObject::GObjObjects()->Data[ 26705 ];

	UNavMeshPath_Toward_execTowardGoal_Parms TowardGoal_Parms;
	TowardGoal_Parms.NavHandle = NavHandle;
	TowardGoal_Parms.Goal = Goal;

	this->ProcessEvent ( pFnTowardGoal, &TowardGoal_Parms, NULL );

	return TowardGoal_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_WithinDistanceEnvelope::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26730 ];

	UNavMeshPath_WithinDistanceEnvelope_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 InEnvelopeTestPoint            ( CPF_Parm )
// float                          InMaxDistance                  ( CPF_Parm )
// float                          InMinDistance                  ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )
// float                          InSoftStartPenalty             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTossOutSpecsThatLeave     ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave )
{
	static UFunction* pFnStayWithinEnvelopeToLoc = NULL;

	if ( ! pFnStayWithinEnvelopeToLoc )
		pFnStayWithinEnvelopeToLoc = (UFunction*) UObject::GObjObjects()->Data[ 26720 ];

	UNavMeshPath_WithinDistanceEnvelope_execStayWithinEnvelopeToLoc_Parms StayWithinEnvelopeToLoc_Parms;
	StayWithinEnvelopeToLoc_Parms.NavHandle = NavHandle;
	memcpy ( &StayWithinEnvelopeToLoc_Parms.InEnvelopeTestPoint, &InEnvelopeTestPoint, 0xC );
	StayWithinEnvelopeToLoc_Parms.InMaxDistance = InMaxDistance;
	StayWithinEnvelopeToLoc_Parms.InMinDistance = InMinDistance;
	StayWithinEnvelopeToLoc_Parms.bInSoft = bInSoft;
	StayWithinEnvelopeToLoc_Parms.InSoftStartPenalty = InSoftStartPenalty;
	StayWithinEnvelopeToLoc_Parms.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	this->ProcessEvent ( pFnStayWithinEnvelopeToLoc, &StayWithinEnvelopeToLoc_Parms, NULL );

	return StayWithinEnvelopeToLoc_Parms.ReturnValue;
};

// Function Engine.NavMeshPath_WithinTraversalDist.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshPath_WithinTraversalDist::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26740 ];

	UNavMeshPath_WithinTraversalDist_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// float                          InMaxTraversalDist             ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshPath_WithinTraversalDist::DontExceedMaxDist ( class UNavigationHandle* NavHandle, float InMaxTraversalDist, unsigned long bInSoft )
{
	static UFunction* pFnDontExceedMaxDist = NULL;

	if ( ! pFnDontExceedMaxDist )
		pFnDontExceedMaxDist = (UFunction*) UObject::GObjObjects()->Data[ 26734 ];

	UNavMeshPath_WithinTraversalDist_execDontExceedMaxDist_Parms DontExceedMaxDist_Parms;
	DontExceedMaxDist_Parms.NavHandle = NavHandle;
	DontExceedMaxDist_Parms.InMaxTraversalDist = InMaxTraversalDist;
	DontExceedMaxDist_Parms.bInSoft = bInSoft;

	this->ProcessEvent ( pFnDontExceedMaxDist, &DontExceedMaxDist_Parms, NULL );

	return DontExceedMaxDist_Parms.ReturnValue;
};

// Function Engine.NavMeshPathGoalEvaluator.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UNavMeshPathGoalEvaluator::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 26497 ];

	UNavMeshPathGoalEvaluator_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.NavMeshPathGoalEvaluator.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNavMeshPathGoalEvaluator::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26496 ];

	UNavMeshPathGoalEvaluator_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_At.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_At::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26524 ];

	UNavMeshGoal_At_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_At.AtLocation
// [0x00026802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 GoalLocation                   ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInWeightPartialByDist         ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_At::eventAtLocation ( class UNavigationHandle* NavHandle, struct FVector GoalLocation, float Dist, unsigned long bReturnPartial, unsigned long bInWeightPartialByDist )
{
	static UFunction* pFnAtLocation = NULL;

	if ( ! pFnAtLocation )
		pFnAtLocation = (UFunction*) UObject::GObjObjects()->Data[ 13462 ];

	UNavMeshGoal_At_eventAtLocation_Parms AtLocation_Parms;
	AtLocation_Parms.NavHandle = NavHandle;
	memcpy ( &AtLocation_Parms.GoalLocation, &GoalLocation, 0xC );
	AtLocation_Parms.Dist = Dist;
	AtLocation_Parms.bReturnPartial = bReturnPartial;
	AtLocation_Parms.bInWeightPartialByDist = bInWeightPartialByDist;

	this->ProcessEvent ( pFnAtLocation, &AtLocation_Parms, NULL );

	return AtLocation_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_At.AtActor
// [0x00826002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// class AActor*                  GoalActor                      ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInWeightPartialByDist         ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_At::AtActor ( class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, unsigned long bReturnPartial, unsigned long bInWeightPartialByDist )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = (UFunction*) UObject::GObjObjects()->Data[ 26508 ];

	UNavMeshGoal_At_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.NavHandle = NavHandle;
	AtActor_Parms.GoalActor = GoalActor;
	AtActor_Parms.Dist = Dist;
	AtActor_Parms.bReturnPartial = bReturnPartial;
	AtActor_Parms.bInWeightPartialByDist = bInWeightPartialByDist;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	return AtActor_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_At.RecycleNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_At::RecycleNative ( )
{
	static UFunction* pFnRecycleNative = NULL;

	if ( ! pFnRecycleNative )
		pFnRecycleNative = (UFunction*) UObject::GObjObjects()->Data[ 26507 ];

	UNavMeshGoal_At_execRecycleNative_Parms RecycleNative_Parms;

	pFnRecycleNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleNative, &RecycleNative_Parms, NULL );

	pFnRecycleNative->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_ClosestActorInList::RecycleInternal ( )
{
	static UFunction* pFnRecycleInternal = NULL;

	if ( ! pFnRecycleInternal )
		pFnRecycleInternal = (UFunction*) UObject::GObjObjects()->Data[ 26536 ];

	UNavMeshGoal_ClosestActorInList_execRecycleInternal_Parms RecycleInternal_Parms;

	pFnRecycleInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleInternal, &RecycleInternal_Parms, NULL );

	pFnRecycleInternal->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_ClosestActorInList.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UNavMeshGoal_ClosestActorInList::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26535 ];

	UNavMeshGoal_ClosestActorInList_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList
// [0x00422002] 
// Parameters infos:
// class UNavMeshGoal_ClosestActorInList* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// TArray< struct FBiasedGoalActor > InGoalList                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UNavMeshGoal_ClosestActorInList* UNavMeshGoal_ClosestActorInList::ClosestActorInList ( class UNavigationHandle* NavHandle, TArray< struct FBiasedGoalActor >* InGoalList )
{
	static UFunction* pFnClosestActorInList = NULL;

	if ( ! pFnClosestActorInList )
		pFnClosestActorInList = (UFunction*) UObject::GObjObjects()->Data[ 26529 ];

	UNavMeshGoal_ClosestActorInList_execClosestActorInList_Parms ClosestActorInList_Parms;
	ClosestActorInList_Parms.NavHandle = NavHandle;

	this->ProcessEvent ( pFnClosestActorInList, &ClosestActorInList_Parms, NULL );

	if ( InGoalList )
		memcpy ( InGoalList, &ClosestActorInList_Parms.InGoalList, 0xC );

	return ClosestActorInList_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_GenericFilterContainer.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_GenericFilterContainer::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26565 ];

	UNavMeshGoal_GenericFilterContainer_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UNavMeshGoal_GenericFilterContainer::GetGoalPoint ( )
{
	static UFunction* pFnGetGoalPoint = NULL;

	if ( ! pFnGetGoalPoint )
		pFnGetGoalPoint = (UFunction*) UObject::GObjObjects()->Data[ 26563 ];

	UNavMeshGoal_GenericFilterContainer_execGetGoalPoint_Parms GetGoalPoint_Parms;

	pFnGetGoalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGoalPoint, &GetGoalPoint_Parms, NULL );

	pFnGetGoalPoint->FunctionFlags |= 0x400;

	return GetGoalPoint_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType
// [0x00020002] 
// Parameters infos:
// class UNavMeshGoal_Filter*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  Filter_Class                   ( CPF_Parm )

class UNavMeshGoal_Filter* UNavMeshGoal_GenericFilterContainer::GetFilterOfType ( class UClass* Filter_Class )
{
	static UFunction* pFnGetFilterOfType = NULL;

	if ( ! pFnGetFilterOfType )
		pFnGetFilterOfType = (UFunction*) UObject::GObjObjects()->Data[ 26560 ];

	UNavMeshGoal_GenericFilterContainer_execGetFilterOfType_Parms GetFilterOfType_Parms;
	GetFilterOfType_Parms.Filter_Class = Filter_Class;

	this->ProcessEvent ( pFnGetFilterOfType, &GetFilterOfType_Parms, NULL );

	return GetFilterOfType_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandleFromSeedList
// [0x00426002] 
// Parameters infos:
// class UNavMeshGoal_GenericFilterContainer* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FVector >       InSearchSeeds                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::CreateAndAddFilterToNavHandleFromSeedList ( class UNavigationHandle* NavHandle, int InMaxPathVisits, TArray< struct FVector >* InSearchSeeds )
{
	static UFunction* pFnCreateAndAddFilterToNavHandleFromSeedList = NULL;

	if ( ! pFnCreateAndAddFilterToNavHandleFromSeedList )
		pFnCreateAndAddFilterToNavHandleFromSeedList = (UFunction*) UObject::GObjObjects()->Data[ 26553 ];

	UNavMeshGoal_GenericFilterContainer_execCreateAndAddFilterToNavHandleFromSeedList_Parms CreateAndAddFilterToNavHandleFromSeedList_Parms;
	CreateAndAddFilterToNavHandleFromSeedList_Parms.NavHandle = NavHandle;
	CreateAndAddFilterToNavHandleFromSeedList_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnCreateAndAddFilterToNavHandleFromSeedList, &CreateAndAddFilterToNavHandleFromSeedList_Parms, NULL );

	if ( InSearchSeeds )
		memcpy ( InSearchSeeds, &CreateAndAddFilterToNavHandleFromSeedList_Parms.InSearchSeeds, 0xC );

	return CreateAndAddFilterToNavHandleFromSeedList_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle
// [0x00026002] 
// Parameters infos:
// class UNavMeshGoal_GenericFilterContainer* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )

class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::CreateAndAddFilterToNavHandle ( class UNavigationHandle* NavHandle, int InMaxPathVisits )
{
	static UFunction* pFnCreateAndAddFilterToNavHandle = NULL;

	if ( ! pFnCreateAndAddFilterToNavHandle )
		pFnCreateAndAddFilterToNavHandle = (UFunction*) UObject::GObjObjects()->Data[ 26548 ];

	UNavMeshGoal_GenericFilterContainer_execCreateAndAddFilterToNavHandle_Parms CreateAndAddFilterToNavHandle_Parms;
	CreateAndAddFilterToNavHandle_Parms.NavHandle = NavHandle;
	CreateAndAddFilterToNavHandle_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnCreateAndAddFilterToNavHandle, &CreateAndAddFilterToNavHandle_Parms, NULL );

	return CreateAndAddFilterToNavHandle_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_Null.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_Null::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26573 ];

	UNavMeshGoal_Null_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_Null.RecycleNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_Null::RecycleNative ( )
{
	static UFunction* pFnRecycleNative = NULL;

	if ( ! pFnRecycleNative )
		pFnRecycleNative = (UFunction*) UObject::GObjObjects()->Data[ 26572 ];

	UNavMeshGoal_Null_execRecycleNative_Parms RecycleNative_Parms;

	pFnRecycleNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleNative, &RecycleNative_Parms, NULL );

	pFnRecycleNative->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_Null.GoUntilBust
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_Null::GoUntilBust ( class UNavigationHandle* NavHandle, int InMaxPathVisits )
{
	static UFunction* pFnGoUntilBust = NULL;

	if ( ! pFnGoUntilBust )
		pFnGoUntilBust = (UFunction*) UObject::GObjObjects()->Data[ 26567 ];

	UNavMeshGoal_Null_execGoUntilBust_Parms GoUntilBust_Parms;
	GoUntilBust_Parms.NavHandle = NavHandle;
	GoUntilBust_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnGoUntilBust, &GoUntilBust_Parms, NULL );

	return GoUntilBust_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_PolyEncompassesAI::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26580 ];

	UNavMeshGoal_PolyEncompassesAI_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 InOverrideExtentToCheck        ( CPF_Const | CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_PolyEncompassesAI::MakeSureAIFits ( class UNavigationHandle* NavHandle, struct FVector InOverrideExtentToCheck )
{
	static UFunction* pFnMakeSureAIFits = NULL;

	if ( ! pFnMakeSureAIFits )
		pFnMakeSureAIFits = (UFunction*) UObject::GObjObjects()->Data[ 26575 ];

	UNavMeshGoal_PolyEncompassesAI_execMakeSureAIFits_Parms MakeSureAIFits_Parms;
	MakeSureAIFits_Parms.NavHandle = NavHandle;
	memcpy ( &MakeSureAIFits_Parms.InOverrideExtentToCheck, &InOverrideExtentToCheck, 0xC );

	this->ProcessEvent ( pFnMakeSureAIFits, &MakeSureAIFits_Parms, NULL );

	return MakeSureAIFits_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_Random.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_Random::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26591 ];

	UNavMeshGoal_Random_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_Random.RecycleNative
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNavMeshGoal_Random::RecycleNative ( )
{
	static UFunction* pFnRecycleNative = NULL;

	if ( ! pFnRecycleNative )
		pFnRecycleNative = (UFunction*) UObject::GObjObjects()->Data[ 26590 ];

	UNavMeshGoal_Random_execRecycleNative_Parms RecycleNative_Parms;

	pFnRecycleNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecycleNative, &RecycleNative_Parms, NULL );

	pFnRecycleNative->FunctionFlags |= 0x400;
};

// Function Engine.NavMeshGoal_Random.FindRandom
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// int                            InMinDist                      ( CPF_OptionalParm | CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_Random::FindRandom ( class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits )
{
	static UFunction* pFnFindRandom = NULL;

	if ( ! pFnFindRandom )
		pFnFindRandom = (UFunction*) UObject::GObjObjects()->Data[ 26584 ];

	UNavMeshGoal_Random_execFindRandom_Parms FindRandom_Parms;
	FindRandom_Parms.NavHandle = NavHandle;
	FindRandom_Parms.InMinDist = InMinDist;
	FindRandom_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnFindRandom, &FindRandom_Parms, NULL );

	return FindRandom_Parms.ReturnValue;
};

// Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle
// [0x00020002] 
// Parameters infos:

void UNavMeshGoal_WithinDistanceEnvelope::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 26604 ];

	UNavMeshGoal_WithinDistanceEnvelope_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UNavigationHandle*       NavHandle                      ( CPF_Parm )
// struct FVector                 InEnvelopeTestPoint            ( CPF_Parm )
// float                          InMaxDistance                  ( CPF_Parm )
// float                          InMinDistance                  ( CPF_Parm )
// float                          InMinTraversalDist             ( CPF_OptionalParm | CPF_Parm )

bool UNavMeshGoal_WithinDistanceEnvelope::GoalWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist )
{
	static UFunction* pFnGoalWithinEnvelopeToLoc = NULL;

	if ( ! pFnGoalWithinEnvelopeToLoc )
		pFnGoalWithinEnvelopeToLoc = (UFunction*) UObject::GObjObjects()->Data[ 26596 ];

	UNavMeshGoal_WithinDistanceEnvelope_execGoalWithinEnvelopeToLoc_Parms GoalWithinEnvelopeToLoc_Parms;
	GoalWithinEnvelopeToLoc_Parms.NavHandle = NavHandle;
	memcpy ( &GoalWithinEnvelopeToLoc_Parms.InEnvelopeTestPoint, &InEnvelopeTestPoint, 0xC );
	GoalWithinEnvelopeToLoc_Parms.InMaxDistance = InMaxDistance;
	GoalWithinEnvelopeToLoc_Parms.InMinDistance = InMinDistance;
	GoalWithinEnvelopeToLoc_Parms.InMinTraversalDist = InMinTraversalDist;

	this->ProcessEvent ( pFnGoalWithinEnvelopeToLoc, &GoalWithinEnvelopeToLoc_Parms, NULL );

	return GoalWithinEnvelopeToLoc_Parms.ReturnValue;
};

// Function Engine.PathConstraint.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UPathConstraint::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 30625 ];

	UPathConstraint_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.PathConstraint.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UPathConstraint::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30624 ];

	UPathConstraint_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_AlongLine.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AlongLine::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30633 ];

	UPath_AlongLine_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_AlongLine.AlongLine
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Dir                            ( CPF_Parm )

bool UPath_AlongLine::AlongLine ( class APawn* P, struct FVector Dir )
{
	static UFunction* pFnAlongLine = NULL;

	if ( ! pFnAlongLine )
		pFnAlongLine = (UFunction*) UObject::GObjObjects()->Data[ 30628 ];

	UPath_AlongLine_execAlongLine_Parms AlongLine_Parms;
	AlongLine_Parms.P = P;
	memcpy ( &AlongLine_Parms.Dir, &Dir, 0xC );

	this->ProcessEvent ( pFnAlongLine, &AlongLine_Parms, NULL );

	return AlongLine_Parms.ReturnValue;
};

// Function Engine.Path_AvoidInEscapableNodes.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AvoidInEscapableNodes::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30644 ];

	UPath_AvoidInEscapableNodes_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_AvoidInEscapableNodes.DontGetStuck
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool UPath_AvoidInEscapableNodes::DontGetStuck ( class APawn* P )
{
	static UFunction* pFnDontGetStuck = NULL;

	if ( ! pFnDontGetStuck )
		pFnDontGetStuck = (UFunction*) UObject::GObjObjects()->Data[ 30640 ];

	UPath_AvoidInEscapableNodes_execDontGetStuck_Parms DontGetStuck_Parms;
	DontGetStuck_Parms.P = P;

	this->ProcessEvent ( pFnDontGetStuck, &DontGetStuck_Parms, NULL );

	return DontGetStuck_Parms.ReturnValue;
};

// Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void UPath_AvoidInEscapableNodes::CachePawnReacFlags ( class APawn* P )
{
	static UFunction* pFnCachePawnReacFlags = NULL;

	if ( ! pFnCachePawnReacFlags )
		pFnCachePawnReacFlags = (UFunction*) UObject::GObjObjects()->Data[ 30638 ];

	UPath_AvoidInEscapableNodes_execCachePawnReacFlags_Parms CachePawnReacFlags_Parms;
	CachePawnReacFlags_Parms.P = P;

	pFnCachePawnReacFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCachePawnReacFlags, &CachePawnReacFlags_Parms, NULL );

	pFnCachePawnReacFlags->FunctionFlags |= 0x400;
};

// Function Engine.Path_MinDistBetweenSpecsOfType.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_MinDistBetweenSpecsOfType::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30655 ];

	UPath_MinDistBetweenSpecsOfType_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          InMinDist                      ( CPF_Parm )
// class UClass*                  InSpecClass                    ( CPF_Parm )
// struct FVector                 LastLocation                   ( CPF_OptionalParm | CPF_Parm )

bool UPath_MinDistBetweenSpecsOfType::EnforceMinDist ( class APawn* P, float InMinDist, class UClass* InSpecClass, struct FVector LastLocation )
{
	static UFunction* pFnEnforceMinDist = NULL;

	if ( ! pFnEnforceMinDist )
		pFnEnforceMinDist = (UFunction*) UObject::GObjObjects()->Data[ 30648 ];

	UPath_MinDistBetweenSpecsOfType_execEnforceMinDist_Parms EnforceMinDist_Parms;
	EnforceMinDist_Parms.P = P;
	EnforceMinDist_Parms.InMinDist = InMinDist;
	EnforceMinDist_Parms.InSpecClass = InSpecClass;
	memcpy ( &EnforceMinDist_Parms.LastLocation, &LastLocation, 0xC );

	this->ProcessEvent ( pFnEnforceMinDist, &EnforceMinDist_Parms, NULL );

	return EnforceMinDist_Parms.ReturnValue;
};

// Function Engine.Path_TowardGoal.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_TowardGoal::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30662 ];

	UPath_TowardGoal_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_TowardGoal.TowardGoal
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )

bool UPath_TowardGoal::TowardGoal ( class APawn* P, class AActor* Goal )
{
	static UFunction* pFnTowardGoal = NULL;

	if ( ! pFnTowardGoal )
		pFnTowardGoal = (UFunction*) UObject::GObjObjects()->Data[ 30657 ];

	UPath_TowardGoal_execTowardGoal_Parms TowardGoal_Parms;
	TowardGoal_Parms.P = P;
	TowardGoal_Parms.Goal = Goal;

	this->ProcessEvent ( pFnTowardGoal, &TowardGoal_Parms, NULL );

	return TowardGoal_Parms.ReturnValue;
};

// Function Engine.Path_TowardPoint.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_TowardPoint::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30669 ];

	UPath_TowardPoint_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_TowardPoint.TowardPoint
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 Point                          ( CPF_Parm )

bool UPath_TowardPoint::TowardPoint ( class APawn* P, struct FVector Point )
{
	static UFunction* pFnTowardPoint = NULL;

	if ( ! pFnTowardPoint )
		pFnTowardPoint = (UFunction*) UObject::GObjObjects()->Data[ 30664 ];

	UPath_TowardPoint_execTowardPoint_Parms TowardPoint_Parms;
	TowardPoint_Parms.P = P;
	memcpy ( &TowardPoint_Parms.Point, &Point, 0xC );

	this->ProcessEvent ( pFnTowardPoint, &TowardPoint_Parms, NULL );

	return TowardPoint_Parms.ReturnValue;
};

// Function Engine.Path_WithinDistanceEnvelope.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_WithinDistanceEnvelope::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30686 ];

	UPath_WithinDistanceEnvelope_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 InEnvelopeTestPoint            ( CPF_Parm )
// float                          InMaxDistance                  ( CPF_Parm )
// float                          InMinDistance                  ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )
// float                          InSoftStartPenalty             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyTossOutSpecsThatLeave     ( CPF_OptionalParm | CPF_Parm )

bool UPath_WithinDistanceEnvelope::StayWithinEnvelopeToLoc ( class APawn* P, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave )
{
	static UFunction* pFnStayWithinEnvelopeToLoc = NULL;

	if ( ! pFnStayWithinEnvelopeToLoc )
		pFnStayWithinEnvelopeToLoc = (UFunction*) UObject::GObjObjects()->Data[ 30676 ];

	UPath_WithinDistanceEnvelope_execStayWithinEnvelopeToLoc_Parms StayWithinEnvelopeToLoc_Parms;
	StayWithinEnvelopeToLoc_Parms.P = P;
	memcpy ( &StayWithinEnvelopeToLoc_Parms.InEnvelopeTestPoint, &InEnvelopeTestPoint, 0xC );
	StayWithinEnvelopeToLoc_Parms.InMaxDistance = InMaxDistance;
	StayWithinEnvelopeToLoc_Parms.InMinDistance = InMinDistance;
	StayWithinEnvelopeToLoc_Parms.bInSoft = bInSoft;
	StayWithinEnvelopeToLoc_Parms.InSoftStartPenalty = InSoftStartPenalty;
	StayWithinEnvelopeToLoc_Parms.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	this->ProcessEvent ( pFnStayWithinEnvelopeToLoc, &StayWithinEnvelopeToLoc_Parms, NULL );

	return StayWithinEnvelopeToLoc_Parms.ReturnValue;
};

// Function Engine.Path_WithinTraversalDist.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_WithinTraversalDist::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 30696 ];

	UPath_WithinTraversalDist_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// float                          InMaxTraversalDist             ( CPF_Parm )
// unsigned long                  bInSoft                        ( CPF_OptionalParm | CPF_Parm )

bool UPath_WithinTraversalDist::DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft )
{
	static UFunction* pFnDontExceedMaxDist = NULL;

	if ( ! pFnDontExceedMaxDist )
		pFnDontExceedMaxDist = (UFunction*) UObject::GObjObjects()->Data[ 30690 ];

	UPath_WithinTraversalDist_execDontExceedMaxDist_Parms DontExceedMaxDist_Parms;
	DontExceedMaxDist_Parms.P = P;
	DontExceedMaxDist_Parms.InMaxTraversalDist = InMaxTraversalDist;
	DontExceedMaxDist_Parms.bInSoft = bInSoft;

	this->ProcessEvent ( pFnDontExceedMaxDist, &DontExceedMaxDist_Parms, NULL );

	return DontExceedMaxDist_Parms.ReturnValue;
};

// Function Engine.PathGoalEvaluator.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UPathGoalEvaluator::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 22837 ];

	UPathGoalEvaluator_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function Engine.PathGoalEvaluator.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UPathGoalEvaluator::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 22836 ];

	UPathGoalEvaluator_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Goal_AtActor.Recycle
// [0x00020002] 
// Parameters infos:

void UGoal_AtActor::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 22858 ];

	UGoal_AtActor_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Goal_AtActor.AtActor
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// class AActor*                  Goal                           ( CPF_Parm )
// float                          Dist                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bReturnPartial                 ( CPF_OptionalParm | CPF_Parm )

bool UGoal_AtActor::AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial )
{
	static UFunction* pFnAtActor = NULL;

	if ( ! pFnAtActor )
		pFnAtActor = (UFunction*) UObject::GObjObjects()->Data[ 22842 ];

	UGoal_AtActor_execAtActor_Parms AtActor_Parms;
	AtActor_Parms.P = P;
	AtActor_Parms.Goal = Goal;
	AtActor_Parms.Dist = Dist;
	AtActor_Parms.bReturnPartial = bReturnPartial;

	this->ProcessEvent ( pFnAtActor, &AtActor_Parms, NULL );

	return AtActor_Parms.ReturnValue;
};

// Function Engine.Goal_Null.Recycle
// [0x00020002] 
// Parameters infos:

void UGoal_Null::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 22864 ];

	UGoal_Null_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.Goal_Null.GoUntilBust
// [0x00026002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// int                            InMaxPathVisits                ( CPF_OptionalParm | CPF_Parm )

bool UGoal_Null::GoUntilBust ( class APawn* P, int InMaxPathVisits )
{
	static UFunction* pFnGoUntilBust = NULL;

	if ( ! pFnGoUntilBust )
		pFnGoUntilBust = (UFunction*) UObject::GObjObjects()->Data[ 22859 ];

	UGoal_Null_execGoUntilBust_Parms GoUntilBust_Parms;
	GoUntilBust_Parms.P = P;
	GoUntilBust_Parms.InMaxPathVisits = InMaxPathVisits;

	this->ProcessEvent ( pFnGoUntilBust, &GoUntilBust_Parms, NULL );

	return GoUntilBust_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.CreateForceField
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_ForceField*  AnimNotifyData                 ( CPF_Const | CPF_Parm )

bool ASkeletalMeshActor::eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData )
{
	static UFunction* pFnCreateForceField = NULL;

	if ( ! pFnCreateForceField )
		pFnCreateForceField = (UFunction*) UObject::GObjObjects()->Data[ 33777 ];

	ASkeletalMeshActor_eventCreateForceField_Parms CreateForceField_Parms;
	CreateForceField_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnCreateForceField, &CreateForceField_Parms, NULL );

	return CreateForceField_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ASkeletalMeshActor::SkelMeshActorOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnSkelMeshActorOnParticleSystemFinished = NULL;

	if ( ! pFnSkelMeshActorOnParticleSystemFinished )
		pFnSkelMeshActorOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 33775 ];

	ASkeletalMeshActor_execSkelMeshActorOnParticleSystemFinished_Parms SkelMeshActorOnParticleSystemFinished_Parms;
	SkelMeshActorOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnSkelMeshActorOnParticleSystemFinished, &SkelMeshActorOnParticleSystemFinished_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PlayParticleEffect
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 ( CPF_Const | CPF_Parm )

bool ASkeletalMeshActor::eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = (UFunction*) UObject::GObjObjects()->Data[ 33768 ];

	ASkeletalMeshActor_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;
	PlayParticleEffect_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );

	return PlayParticleEffect_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASkeletalMeshActor::ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 33766 ];

	ASkeletalMeshActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.SkeletalMeshActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ASkeletalMeshActor::CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 33764 ];

	ASkeletalMeshActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x1C );
};

// Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 33762 ];

	ASkeletalMeshActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.TakeDamage
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASkeletalMeshActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 33753 ];

	ASkeletalMeshActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.DoKismetAttachment
// [0x00020102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void ASkeletalMeshActor::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 33746 ];

	ASkeletalMeshActor_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetSkelControlTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetSkelControlTarget* Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetSkelControlTarget ( class USeqAct_SetSkelControlTarget* Action )
{
	static UFunction* pFnOnSetSkelControlTarget = NULL;

	if ( ! pFnOnSetSkelControlTarget )
		pFnOnSetSkelControlTarget = (UFunction*) UObject::GObjObjects()->Data[ 33743 ];

	ASkeletalMeshActor_eventOnSetSkelControlTarget_Parms OnSetSkelControlTarget_Parms;
	OnSetSkelControlTarget_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetSkelControlTarget, &OnSetSkelControlTarget_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_UpdatePhysBonesFromAnim* Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnUpdatePhysBonesFromAnim ( class USeqAct_UpdatePhysBonesFromAnim* Action )
{
	static UFunction* pFnOnUpdatePhysBonesFromAnim = NULL;

	if ( ! pFnOnUpdatePhysBonesFromAnim )
		pFnOnUpdatePhysBonesFromAnim = (UFunction*) UObject::GObjObjects()->Data[ 33741 ];

	ASkeletalMeshActor_eventOnUpdatePhysBonesFromAnim_Parms OnUpdatePhysBonesFromAnim_Parms;
	OnUpdatePhysBonesFromAnim_Parms.Action = Action;

	this->ProcessEvent ( pFnOnUpdatePhysBonesFromAnim, &OnUpdatePhysBonesFromAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetMesh
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USeqAct_SetMesh*         Action                         ( CPF_Parm )

void ASkeletalMeshActor::eventOnSetMesh ( class USeqAct_SetMesh* Action )
{
	static UFunction* pFnOnSetMesh = NULL;

	if ( ! pFnOnSetMesh )
		pFnOnSetMesh = (UFunction*) UObject::GObjObjects()->Data[ 33739 ];

	ASkeletalMeshActor_eventOnSetMesh_Parms OnSetMesh_Parms;
	OnSetMesh_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMesh, &OnSetMesh_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 33737 ];

	ASkeletalMeshActor_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* ASkeletalMeshActor::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 33735 ];

	ASkeletalMeshActor_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// class USeqAct_PlayFaceFXAnim*  inAction                       ( CPF_Parm )

void ASkeletalMeshActor::OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction )
{
	static UFunction* pFnOnPlayFaceFXAnim = NULL;

	if ( ! pFnOnPlayFaceFXAnim )
		pFnOnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 33732 ];

	ASkeletalMeshActor_execOnPlayFaceFXAnim_Parms OnPlayFaceFXAnim_Parms;
	OnPlayFaceFXAnim_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* ASkeletalMeshActor::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 33730 ];

	ASkeletalMeshActor_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 33729 ];

	ASkeletalMeshActor_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )
// class UAkEvent*                AkEventToPlay                  ( CPF_Parm )

bool ASkeletalMeshActor::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 33722 ];

	ASkeletalMeshActor_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;
	PlayActorFaceFXAnim_Parms.AkEventToPlay = AkEventToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshActor.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 33720 ];

	ASkeletalMeshActor_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;
	MAT_FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 33718 ];

	ASkeletalMeshActor_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void ASkeletalMeshActor::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 33709 ];

	ASkeletalMeshActor_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;
	SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 33707 ];

	ASkeletalMeshActor_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	MAT_BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActor::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 33705 ];

	ASkeletalMeshActor_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 33703 ];

	ASkeletalMeshActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ASkeletalMeshActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 33700 ];

	ASkeletalMeshActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ASkeletalMeshActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 33698 ];

	ASkeletalMeshActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.UpdateAnimSetList
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ASkeletalMeshActor::UpdateAnimSetList ( )
{
	static UFunction* pFnUpdateAnimSetList = NULL;

	if ( ! pFnUpdateAnimSetList )
		pFnUpdateAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 33697 ];

	ASkeletalMeshActor_execUpdateAnimSetList_Parms UpdateAnimSetList_Parms;

	pFnUpdateAnimSetList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimSetList, &UpdateAnimSetList_Parms, NULL );

	pFnUpdateAnimSetList->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActor.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 33696 ];

	ASkeletalMeshActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SkeletalMeshActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 33695 ];

	ASkeletalMeshActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// [0x00020102] 
// Parameters infos:

void ASkeletalMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent ( )
{
	static UFunction* pFnSetMaterialBasedOnExtremeContent = NULL;

	if ( ! pFnSetMaterialBasedOnExtremeContent )
		pFnSetMaterialBasedOnExtremeContent = (UFunction*) UObject::GObjObjects()->Data[ 33793 ];

	ASkeletalMeshActorBasedOnExtremeContent_execSetMaterialBasedOnExtremeContent_Parms SetMaterialBasedOnExtremeContent_Parms;

	this->ProcessEvent ( pFnSetMaterialBasedOnExtremeContent, &SetMaterialBasedOnExtremeContent_Parms, NULL );
};

// Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActorBasedOnExtremeContent::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 33792 ];

	ASkeletalMeshActorBasedOnExtremeContent_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 33843 ];

	ASkeletalMeshActorMAT_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 33840 ];

	ASkeletalMeshActorMAT_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void ASkeletalMeshActorMAT::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 33838 ];

	ASkeletalMeshActorMAT_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 33830 ];

	ASkeletalMeshActorMAT_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;
	MAT_SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void ASkeletalMeshActorMAT::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 33822 ];

	ASkeletalMeshActorMAT_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;
	SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.ClearAnimNodes
// [0x00020102] 
// Parameters infos:

void ASkeletalMeshActorMAT::ClearAnimNodes ( )
{
	static UFunction* pFnClearAnimNodes = NULL;

	if ( ! pFnClearAnimNodes )
		pFnClearAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 33821 ];

	ASkeletalMeshActorMAT_execClearAnimNodes_Parms ClearAnimNodes_Parms;

	this->ProcessEvent ( pFnClearAnimNodes, &ClearAnimNodes_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.CacheAnimNodes
// [0x00020102] 
// Parameters infos:

void ASkeletalMeshActorMAT::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 33819 ];

	ASkeletalMeshActorMAT_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASkeletalMeshActorMAT::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 33817 ];

	ASkeletalMeshActorMAT_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASkeletalMeshActorMAT::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 33816 ];

	ASkeletalMeshActorMAT_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          ControlStrength                ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetSkelControlStrength ( struct FName SkelControlName, float ControlStrength )
{
	static UFunction* pFnMAT_SetSkelControlStrength = NULL;

	if ( ! pFnMAT_SetSkelControlStrength )
		pFnMAT_SetSkelControlStrength = (UFunction*) UObject::GObjObjects()->Data[ 33813 ];

	ASkeletalMeshActorMAT_execMAT_SetSkelControlStrength_Parms MAT_SetSkelControlStrength_Parms;
	memcpy ( &MAT_SetSkelControlStrength_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlStrength_Parms.ControlStrength = ControlStrength;

	pFnMAT_SetSkelControlStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlStrength, &MAT_SetSkelControlStrength_Parms, NULL );

	pFnMAT_SetSkelControlStrength->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnMAT_SetSkelControlScale = NULL;

	if ( ! pFnMAT_SetSkelControlScale )
		pFnMAT_SetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 33810 ];

	ASkeletalMeshActorMAT_execMAT_SetSkelControlScale_Parms MAT_SetSkelControlScale_Parms;
	memcpy ( &MAT_SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlScale_Parms.Scale = Scale;

	pFnMAT_SetSkelControlScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlScale, &MAT_SetSkelControlScale_Parms, NULL );

	pFnMAT_SetSkelControlScale->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void ASkeletalMeshActorMAT::MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnMAT_SetMorphWeight = NULL;

	if ( ! pFnMAT_SetMorphWeight )
		pFnMAT_SetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 33807 ];

	ASkeletalMeshActorMAT_execMAT_SetMorphWeight_Parms MAT_SetMorphWeight_Parms;
	memcpy ( &MAT_SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	MAT_SetMorphWeight_Parms.MorphWeight = MorphWeight;

	pFnMAT_SetMorphWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetMorphWeight, &MAT_SetMorphWeight_Parms, NULL );

	pFnMAT_SetMorphWeight->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ASkeletalMeshActorMAT::MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 33804 ];

	ASkeletalMeshActorMAT_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function Engine.AnimNotify.FindNextNotifyOfClass
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )
// class UClass*                  NotifyClass                    ( CPF_Parm )
// struct FAnimNotifyEvent        OutEvent                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UAnimNotify::FindNextNotifyOfClass ( class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent )
{
	static UFunction* pFnFindNextNotifyOfClass = NULL;

	if ( ! pFnFindNextNotifyOfClass )
		pFnFindNextNotifyOfClass = (UFunction*) UObject::GObjObjects()->Data[ 14724 ];

	UAnimNotify_execFindNextNotifyOfClass_Parms FindNextNotifyOfClass_Parms;
	FindNextNotifyOfClass_Parms.AnimSeqInstigator = AnimSeqInstigator;
	FindNextNotifyOfClass_Parms.NotifyClass = NotifyClass;

	this->ProcessEvent ( pFnFindNextNotifyOfClass, &FindNextNotifyOfClass_Parms, NULL );

	if ( OutEvent )
		memcpy ( OutEvent, &FindNextNotifyOfClass_Parms.OutEvent, 0x14 );

	return FindNextNotifyOfClass_Parms.ReturnValue;
};

// Function Engine.AnimNotify_Scripted.NotifyEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_Scripted::eventNotifyEnd ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotifyEnd = NULL;

	if ( ! pFnNotifyEnd )
		pFnNotifyEnd = (UFunction*) UObject::GObjObjects()->Data[ 14746 ];

	UAnimNotify_Scripted_eventNotifyEnd_Parms NotifyEnd_Parms;
	NotifyEnd_Parms.Owner = Owner;
	NotifyEnd_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotifyEnd, &NotifyEnd_Parms, NULL );
};

// Function Engine.AnimNotify_Scripted.Notify
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_Scripted::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 14743 ];

	UAnimNotify_Scripted_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_PawnMaterialParam.Notify
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_PawnMaterialParam::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 14990 ];

	UAnimNotify_PawnMaterialParam_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_ViewShake.Notify
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_ViewShake::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 15072 ];

	UAnimNotify_ViewShake_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.AnimNotify_Trails.GetNumSteps
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InLastTrailIndex               ( CPF_Parm )

int UAnimNotify_Trails::GetNumSteps ( int InLastTrailIndex )
{
	static UFunction* pFnGetNumSteps = NULL;

	if ( ! pFnGetNumSteps )
		pFnGetNumSteps = (UFunction*) UObject::GObjObjects()->Data[ 15057 ];

	UAnimNotify_Trails_execGetNumSteps_Parms GetNumSteps_Parms;
	GetNumSteps_Parms.InLastTrailIndex = InLastTrailIndex;

	pFnGetNumSteps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumSteps, &GetNumSteps_Parms, NULL );

	pFnGetNumSteps->FunctionFlags |= 0x400;

	return GetNumSteps_Parms.ReturnValue;
};

// Function Engine.AnimNode.ReplayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNode::ReplayAnim ( )
{
	static UFunction* pFnReplayAnim = NULL;

	if ( ! pFnReplayAnim )
		pFnReplayAnim = (UFunction*) UObject::GObjObjects()->Data[ 14279 ];

	UAnimNode_execReplayAnim_Parms ReplayAnim_Parms;

	pFnReplayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplayAnim, &ReplayAnim_Parms, NULL );

	pFnReplayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNode::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 14278 ];

	UAnimNode_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNode::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 14274 ];

	UAnimNode_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* UAnimNode::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 14271 ];

	UAnimNode_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.AnimNode.OnCeaseRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnCeaseRelevant ( )
{
	static UFunction* pFnOnCeaseRelevant = NULL;

	if ( ! pFnOnCeaseRelevant )
		pFnOnCeaseRelevant = (UFunction*) UObject::GObjObjects()->Data[ 14270 ];

	UAnimNode_eventOnCeaseRelevant_Parms OnCeaseRelevant_Parms;

	this->ProcessEvent ( pFnOnCeaseRelevant, &OnCeaseRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnBecomeRelevant
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnBecomeRelevant ( )
{
	static UFunction* pFnOnBecomeRelevant = NULL;

	if ( ! pFnOnBecomeRelevant )
		pFnOnBecomeRelevant = (UFunction*) UObject::GObjObjects()->Data[ 14269 ];

	UAnimNode_eventOnBecomeRelevant_Parms OnBecomeRelevant_Parms;

	this->ProcessEvent ( pFnOnBecomeRelevant, &OnBecomeRelevant_Parms, NULL );
};

// Function Engine.AnimNode.OnInit
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAnimNode::eventOnInit ( )
{
	static UFunction* pFnOnInit = NULL;

	if ( ! pFnOnInit )
		pFnOnInit = (UFunction*) UObject::GObjObjects()->Data[ 14268 ];

	UAnimNode_eventOnInit_Parms OnInit_Parms;

	this->ProcessEvent ( pFnOnInit, &OnInit_Parms, NULL );
};

// Function Engine.AnimNodeBlendBase.ReplayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeBlendBase::ReplayAnim ( )
{
	static UFunction* pFnReplayAnim = NULL;

	if ( ! pFnReplayAnim )
		pFnReplayAnim = (UFunction*) UObject::GObjObjects()->Data[ 14294 ];

	UAnimNodeBlendBase_execReplayAnim_Parms ReplayAnim_Parms;

	pFnReplayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplayAnim, &ReplayAnim_Parms, NULL );

	pFnReplayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendBase.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeBlendBase::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 14293 ];

	UAnimNodeBlendBase_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendBase.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendBase::PlayAnim ( unsigned long bLoop, float Rate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 14289 ];

	UAnimNodeBlendBase_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.Rate = Rate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            MaskIndex                      ( CPF_Parm )
// float                          DesiredWeight                  ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNode_MultiBlendPerBone::SetMaskWeight ( int MaskIndex, float DesiredWeight, float BlendTime )
{
	static UFunction* pFnSetMaskWeight = NULL;

	if ( ! pFnSetMaskWeight )
		pFnSetMaskWeight = (UFunction*) UObject::GObjObjects()->Data[ 14325 ];

	UAnimNode_MultiBlendPerBone_execSetMaskWeight_Parms SetMaskWeight_Parms;
	SetMaskWeight_Parms.MaskIndex = MaskIndex;
	SetMaskWeight_Parms.DesiredWeight = DesiredWeight;
	SetMaskWeight_Parms.BlendTime = BlendTime;

	pFnSetMaskWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaskWeight, &SetMaskWeight_Parms, NULL );

	pFnSetMaskWeight->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ProfileIndex                   ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByIndex ( int ProfileIndex )
{
	static UFunction* pFnSetActiveProfileByIndex = NULL;

	if ( ! pFnSetActiveProfileByIndex )
		pFnSetActiveProfileByIndex = (UFunction*) UObject::GObjObjects()->Data[ 14392 ];

	UAnimNodeAimOffset_execSetActiveProfileByIndex_Parms SetActiveProfileByIndex_Parms;
	SetActiveProfileByIndex_Parms.ProfileIndex = ProfileIndex;

	pFnSetActiveProfileByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByIndex, &SetActiveProfileByIndex_Parms, NULL );

	pFnSetActiveProfileByIndex->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ProfileName                    ( CPF_Parm )

void UAnimNodeAimOffset::SetActiveProfileByName ( struct FName ProfileName )
{
	static UFunction* pFnSetActiveProfileByName = NULL;

	if ( ! pFnSetActiveProfileByName )
		pFnSetActiveProfileByName = (UFunction*) UObject::GObjObjects()->Data[ 14390 ];

	UAnimNodeAimOffset_execSetActiveProfileByName_Parms SetActiveProfileByName_Parms;
	memcpy ( &SetActiveProfileByName_Parms.ProfileName, &ProfileName, 0x8 );

	pFnSetActiveProfileByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveProfileByName, &SetActiveProfileByName_Parms, NULL );

	pFnSetActiveProfileByName->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlend.SetBlendTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlend::SetBlendTarget ( float BlendTarget, float BlendTime )
{
	static UFunction* pFnSetBlendTarget = NULL;

	if ( ! pFnSetBlendTarget )
		pFnSetBlendTarget = (UFunction*) UObject::GObjObjects()->Data[ 14336 ];

	UAnimNodeBlend_execSetBlendTarget_Parms SetBlendTarget_Parms;
	SetBlendTarget_Parms.BlendTarget = BlendTarget;
	SetBlendTarget_Parms.BlendTime = BlendTime;

	pFnSetBlendTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlendTarget, &SetBlendTarget_Parms, NULL );

	pFnSetBlendTarget->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeAdditiveBlending.SetBlendTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeAdditiveBlending::SetBlendTarget ( float BlendTarget, float BlendTime )
{
	static UFunction* pFnSetBlendTarget = NULL;

	if ( ! pFnSetBlendTarget )
		pFnSetBlendTarget = (UFunction*) UObject::GObjObjects()->Data[ 14340 ];

	UAnimNodeAdditiveBlending_execSetBlendTarget_Parms SetBlendTarget_Parms;
	SetBlendTarget_Parms.BlendTarget = BlendTarget;
	SetBlendTarget_Parms.BlendTime = BlendTime;

	pFnSetBlendTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlendTarget, &SetBlendTarget_Parms, NULL );

	pFnSetBlendTarget->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendPerBone.SetBlendTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          BlendTarget                    ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlendPerBone::SetBlendTarget ( float BlendTarget, float BlendTime )
{
	static UFunction* pFnSetBlendTarget = NULL;

	if ( ! pFnSetBlendTarget )
		pFnSetBlendTarget = (UFunction*) UObject::GObjObjects()->Data[ 14467 ];

	UAnimNodeBlendPerBone_execSetBlendTarget_Parms SetBlendTarget_Parms;
	SetBlendTarget_Parms.BlendTarget = BlendTarget;
	SetBlendTarget_Parms.BlendTime = BlendTime;

	pFnSetBlendTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlendTarget, &SetBlendTarget_Parms, NULL );

	pFnSetBlendTarget->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.GetActiveChild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild ( )
{
	static UFunction* pFnGetActiveChild = NULL;

	if ( ! pFnGetActiveChild )
		pFnGetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 14485 ];

	UAnimNodeCrossfader_execGetActiveChild_Parms GetActiveChild_Parms;

	pFnGetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveChild, &GetActiveChild_Parms, NULL );

	pFnGetActiveChild->FunctionFlags |= 0x400;

	return GetActiveChild_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.GetAnimName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeCrossfader::GetAnimName ( )
{
	static UFunction* pFnGetAnimName = NULL;

	if ( ! pFnGetAnimName )
		pFnGetAnimName = (UFunction*) UObject::GObjObjects()->Data[ 14483 ];

	UAnimNodeCrossfader_execGetAnimName_Parms GetAnimName_Parms;

	pFnGetAnimName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimName, &GetAnimName_Parms, NULL );

	pFnGetAnimName->FunctionFlags |= 0x400;

	return GetAnimName_Parms.ReturnValue;
};

// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate )
{
	static UFunction* pFnBlendToLoopingAnim = NULL;

	if ( ! pFnBlendToLoopingAnim )
		pFnBlendToLoopingAnim = (UFunction*) UObject::GObjObjects()->Data[ 14479 ];

	UAnimNodeCrossfader_execBlendToLoopingAnim_Parms BlendToLoopingAnim_Parms;
	memcpy ( &BlendToLoopingAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	BlendToLoopingAnim_Parms.BlendInTime = BlendInTime;
	BlendToLoopingAnim_Parms.Rate = Rate;

	pFnBlendToLoopingAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlendToLoopingAnim, &BlendToLoopingAnim_Parms, NULL );

	pFnBlendToLoopingAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDontBlendOut                  ( CPF_OptionalParm | CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeCrossfader::PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate )
{
	static UFunction* pFnPlayOneShotAnim = NULL;

	if ( ! pFnPlayOneShotAnim )
		pFnPlayOneShotAnim = (UFunction*) UObject::GObjObjects()->Data[ 14473 ];

	UAnimNodeCrossfader_execPlayOneShotAnim_Parms PlayOneShotAnim_Parms;
	memcpy ( &PlayOneShotAnim_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	PlayOneShotAnim_Parms.BlendInTime = BlendInTime;
	PlayOneShotAnim_Parms.BlendOutTime = BlendOutTime;
	PlayOneShotAnim_Parms.bDontBlendOut = bDontBlendOut;
	PlayOneShotAnim_Parms.Rate = Rate;

	pFnPlayOneShotAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayOneShotAnim, &PlayOneShotAnim_Parms, NULL );

	pFnPlayOneShotAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// [0x00024003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 14598 ];

	UAnimNodePlayCustomAnim_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 14596 ];

	UAnimNodePlayCustomAnim_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 14593 ];

	UAnimNodePlayCustomAnim_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodePlayCustomAnim::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 14590 ];

	UAnimNodePlayCustomAnim_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );
};

// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodePlayCustomAnim::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 14588 ];

	UAnimNodePlayCustomAnim_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 14581 ];

	UAnimNodePlayCustomAnim_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

float UAnimNodePlayCustomAnim::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 14573 ];

	UAnimNodePlayCustomAnim_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeBlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ChildIndex                     ( CPF_Parm )
// float                          BlendTime                      ( CPF_Parm )

void UAnimNodeBlendList::SetActiveChild ( int ChildIndex, float BlendTime )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = (UFunction*) UObject::GObjObjects()->Data[ 14403 ];

	UAnimNodeBlendList_execSetActiveChild_Parms SetActiveChild_Parms;
	SetActiveChild_Parms.ChildIndex = ChildIndex;
	SetActiveChild_Parms.BlendTime = BlendTime;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            TargetIdx                      ( CPF_Parm )
// struct FName                   StartBoneName                  ( CPF_Parm )
// float                          PerBoneIncrease                ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeBlendMultiBone::SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease )
{
	static UFunction* pFnSetTargetStartBone = NULL;

	if ( ! pFnSetTargetStartBone )
		pFnSetTargetStartBone = (UFunction*) UObject::GObjObjects()->Data[ 14456 ];

	UAnimNodeBlendMultiBone_execSetTargetStartBone_Parms SetTargetStartBone_Parms;
	SetTargetStartBone_Parms.TargetIdx = TargetIdx;
	memcpy ( &SetTargetStartBone_Parms.StartBoneName, &StartBoneName, 0x8 );
	SetTargetStartBone_Parms.PerBoneIncrease = PerBoneIncrease;

	pFnSetTargetStartBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetStartBone, &SetTargetStartBone_Parms, NULL );

	pFnSetTargetStartBone->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.TickChildWeights
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void UAnimNodeSlot::TickChildWeights ( float DeltaSeconds )
{
	static UFunction* pFnTickChildWeights = NULL;

	if ( ! pFnTickChildWeights )
		pFnTickChildWeights = (UFunction*) UObject::GObjObjects()->Data[ 14694 ];

	UAnimNodeSlot_execTickChildWeights_Parms TickChildWeights_Parms;
	TickChildWeights_Parms.DeltaSeconds = DeltaSeconds;

	pFnTickChildWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickChildWeights, &TickChildWeights_Parms, NULL );

	pFnTickChildWeights->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetRootBoneRotationOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneRotationOption = NULL;

	if ( ! pFnSetRootBoneRotationOption )
		pFnSetRootBoneRotationOption = (UFunction*) UObject::GObjObjects()->Data[ 14690 ];

	UAnimNodeSlot_execSetRootBoneRotationOption_Parms SetRootBoneRotationOption_Parms;
	SetRootBoneRotationOption_Parms.AxisX = AxisX;
	SetRootBoneRotationOption_Parms.AxisY = AxisY;
	SetRootBoneRotationOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneRotationOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneRotationOption, &SetRootBoneRotationOption_Parms, NULL );

	pFnSetRootBoneRotationOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSlot::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 14686 ];

	UAnimNodeSlot_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneAxisOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );

	pFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq ( )
{
	static UFunction* pFnGetCustomAnimNodeSeq = NULL;

	if ( ! pFnGetCustomAnimNodeSeq )
		pFnGetCustomAnimNodeSeq = (UFunction*) UObject::GObjObjects()->Data[ 14684 ];

	UAnimNodeSlot_execGetCustomAnimNodeSeq_Parms GetCustomAnimNodeSeq_Parms;

	pFnGetCustomAnimNodeSeq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCustomAnimNodeSeq, &GetCustomAnimNodeSeq_Parms, NULL );

	pFnGetCustomAnimNodeSeq->FunctionFlags |= 0x400;

	return GetCustomAnimNodeSeq_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewStatus                     ( CPF_Parm )

void UAnimNodeSlot::SetActorAnimEndNotification ( unsigned long bNewStatus )
{
	static UFunction* pFnSetActorAnimEndNotification = NULL;

	if ( ! pFnSetActorAnimEndNotification )
		pFnSetActorAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 14682 ];

	UAnimNodeSlot_execSetActorAnimEndNotification_Parms SetActorAnimEndNotification_Parms;
	SetActorAnimEndNotification_Parms.bNewStatus = bNewStatus;

	pFnSetActorAnimEndNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorAnimEndNotification, &SetActorAnimEndNotification_Parms, NULL );

	pFnSetActorAnimEndNotification->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )

void UAnimNodeSlot::SetCustomAnim ( struct FName AnimName )
{
	static UFunction* pFnSetCustomAnim = NULL;

	if ( ! pFnSetCustomAnim )
		pFnSetCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 14680 ];

	UAnimNodeSlot_execSetCustomAnim_Parms SetCustomAnim_Parms;
	memcpy ( &SetCustomAnim_Parms.AnimName, &AnimName, 0x8 );

	pFnSetCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomAnim, &SetCustomAnim_Parms, NULL );

	pFnSetCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.SetAllowPauseAnims
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSet                           ( CPF_Parm )

void UAnimNodeSlot::SetAllowPauseAnims ( unsigned long bSet )
{
	static UFunction* pFnSetAllowPauseAnims = NULL;

	if ( ! pFnSetAllowPauseAnims )
		pFnSetAllowPauseAnims = (UFunction*) UObject::GObjObjects()->Data[ 14678 ];

	UAnimNodeSlot_execSetAllowPauseAnims_Parms SetAllowPauseAnims_Parms;
	SetAllowPauseAnims_Parms.bSet = bSet;

	pFnSetAllowPauseAnims->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllowPauseAnims, &SetAllowPauseAnims_Parms, NULL );

	pFnSetAllowPauseAnims->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.StopCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void UAnimNodeSlot::StopCustomAnim ( float BlendOutTime )
{
	static UFunction* pFnStopCustomAnim = NULL;

	if ( ! pFnStopCustomAnim )
		pFnStopCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 14676 ];

	UAnimNodeSlot_execStopCustomAnim_Parms StopCustomAnim_Parms;
	StopCustomAnim_Parms.BlendOutTime = BlendOutTime;

	pFnStopCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCustomAnim, &StopCustomAnim_Parms, NULL );

	pFnStopCustomAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSlot.GetPlayedAnimation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UAnimNodeSlot::GetPlayedAnimation ( )
{
	static UFunction* pFnGetPlayedAnimation = NULL;

	if ( ! pFnGetPlayedAnimation )
		pFnGetPlayedAnimation = (UFunction*) UObject::GObjObjects()->Data[ 14674 ];

	UAnimNodeSlot_execGetPlayedAnimation_Parms GetPlayedAnimation_Parms;

	pFnGetPlayedAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayedAnimation, &GetPlayedAnimation_Parms, NULL );

	pFnGetPlayedAnimation->FunctionFlags |= 0x400;

	return GetPlayedAnimation_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

bool UAnimNodeSlot::PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayCustomAnimByDuration = NULL;

	if ( ! pFnPlayCustomAnimByDuration )
		pFnPlayCustomAnimByDuration = (UFunction*) UObject::GObjObjects()->Data[ 14666 ];

	UAnimNodeSlot_execPlayCustomAnimByDuration_Parms PlayCustomAnimByDuration_Parms;
	memcpy ( &PlayCustomAnimByDuration_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnimByDuration_Parms.Duration = Duration;
	PlayCustomAnimByDuration_Parms.BlendInTime = BlendInTime;
	PlayCustomAnimByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnimByDuration_Parms.bLooping = bLooping;
	PlayCustomAnimByDuration_Parms.bOverride = bOverride;

	pFnPlayCustomAnimByDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnimByDuration, &PlayCustomAnimByDuration_Parms, NULL );

	pFnPlayCustomAnimByDuration->FunctionFlags |= 0x400;

	return PlayCustomAnimByDuration_Parms.ReturnValue;
};

// Function Engine.AnimNodeSlot.PlayCustomAnim
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )
// float                          EndTime                        ( CPF_OptionalParm | CPF_Parm )

float UAnimNodeSlot::PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime, float EndTime )
{
	static UFunction* pFnPlayCustomAnim = NULL;

	if ( ! pFnPlayCustomAnim )
		pFnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 14656 ];

	UAnimNodeSlot_execPlayCustomAnim_Parms PlayCustomAnim_Parms;
	memcpy ( &PlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayCustomAnim_Parms.Rate = Rate;
	PlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCustomAnim_Parms.bLooping = bLooping;
	PlayCustomAnim_Parms.bOverride = bOverride;
	PlayCustomAnim_Parms.StartTime = StartTime;
	PlayCustomAnim_Parms.EndTime = EndTime;

	pFnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCustomAnim, &PlayCustomAnim_Parms, NULL );

	pFnPlayCustomAnim->FunctionFlags |= 0x400;

	return PlayCustomAnim_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimNodeSynch::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 14720 ];

	UAnimNodeSynch_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimNodeSynch::GetRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetRelativePosition = NULL;

	if ( ! pFnGetRelativePosition )
		pFnGetRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 14717 ];

	UAnimNodeSynch_execGetRelativePosition_Parms GetRelativePosition_Parms;
	memcpy ( &GetRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRelativePosition, &GetRelativePosition_Parms, NULL );

	pFnGetRelativePosition->FunctionFlags |= 0x400;

	return GetRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.ForceRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimNodeSynch::ForceRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceRelativePosition = NULL;

	if ( ! pFnForceRelativePosition )
		pFnForceRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 14714 ];

	UAnimNodeSynch_execForceRelativePosition_Parms ForceRelativePosition_Parms;
	memcpy ( &ForceRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceRelativePosition, &ForceRelativePosition_Parms, NULL );

	pFnForceRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup ( struct FName GroupName )
{
	static UFunction* pFnGetMasterNodeOfGroup = NULL;

	if ( ! pFnGetMasterNodeOfGroup )
		pFnGetMasterNodeOfGroup = (UFunction*) UObject::GObjObjects()->Data[ 14711 ];

	UAnimNodeSynch_execGetMasterNodeOfGroup_Parms GetMasterNodeOfGroup_Parms;
	memcpy ( &GetMasterNodeOfGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnGetMasterNodeOfGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMasterNodeOfGroup, &GetMasterNodeOfGroup_Parms, NULL );

	pFnGetMasterNodeOfGroup->FunctionFlags |= 0x400;

	return GetMasterNodeOfGroup_Parms.ReturnValue;
};

// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnRemoveNodeFromGroup = NULL;

	if ( ! pFnRemoveNodeFromGroup )
		pFnRemoveNodeFromGroup = (UFunction*) UObject::GObjObjects()->Data[ 14708 ];

	UAnimNodeSynch_execRemoveNodeFromGroup_Parms RemoveNodeFromGroup_Parms;
	RemoveNodeFromGroup_Parms.SeqNode = SeqNode;
	memcpy ( &RemoveNodeFromGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnRemoveNodeFromGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveNodeFromGroup, &RemoveNodeFromGroup_Parms, NULL );

	pFnRemoveNodeFromGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSynch.AddNodeToGroup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )

void UAnimNodeSynch::AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName )
{
	static UFunction* pFnAddNodeToGroup = NULL;

	if ( ! pFnAddNodeToGroup )
		pFnAddNodeToGroup = (UFunction*) UObject::GObjObjects()->Data[ 14705 ];

	UAnimNodeSynch_execAddNodeToGroup_Parms AddNodeToGroup_Parms;
	AddNodeToGroup_Parms.SeqNode = SeqNode;
	memcpy ( &AddNodeToGroup_Parms.GroupName, &GroupName, 0x8 );

	pFnAddNodeToGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNodeToGroup, &AddNodeToGroup_Parms, NULL );

	pFnAddNodeToGroup->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

int UAnimTree::GetGroupIndex ( struct FName GroupName )
{
	static UFunction* pFnGetGroupIndex = NULL;

	if ( ! pFnGetGroupIndex )
		pFnGetGroupIndex = (UFunction*) UObject::GObjObjects()->Data[ 15209 ];

	UAnimTree_execGetGroupIndex_Parms GetGroupIndex_Parms;
	memcpy ( &GetGroupIndex_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupIndex, &GetGroupIndex_Parms, NULL );

	pFnGetGroupIndex->FunctionFlags |= 0x400;

	return GetGroupIndex_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRateScale ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRateScale = NULL;

	if ( ! pFnGetGroupRateScale )
		pFnGetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 15206 ];

	UAnimTree_execGetGroupRateScale_Parms GetGroupRateScale_Parms;
	memcpy ( &GetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRateScale, &GetGroupRateScale_Parms, NULL );

	pFnGetGroupRateScale->FunctionFlags |= 0x400;

	return GetGroupRateScale_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetGroupRateScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          NewRateScale                   ( CPF_Parm )

void UAnimTree::SetGroupRateScale ( struct FName GroupName, float NewRateScale )
{
	static UFunction* pFnSetGroupRateScale = NULL;

	if ( ! pFnSetGroupRateScale )
		pFnSetGroupRateScale = (UFunction*) UObject::GObjObjects()->Data[ 15203 ];

	UAnimTree_execSetGroupRateScale_Parms SetGroupRateScale_Parms;
	memcpy ( &SetGroupRateScale_Parms.GroupName, &GroupName, 0x8 );
	SetGroupRateScale_Parms.NewRateScale = NewRateScale;

	pFnSetGroupRateScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGroupRateScale, &SetGroupRateScale_Parms, NULL );

	pFnSetGroupRateScale->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

float UAnimTree::GetGroupRelativePosition ( struct FName GroupName )
{
	static UFunction* pFnGetGroupRelativePosition = NULL;

	if ( ! pFnGetGroupRelativePosition )
		pFnGetGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 15200 ];

	UAnimTree_execGetGroupRelativePosition_Parms GetGroupRelativePosition_Parms;
	memcpy ( &GetGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRelativePosition, &GetGroupRelativePosition_Parms, NULL );

	pFnGetGroupRelativePosition->FunctionFlags |= 0x400;

	return GetGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimTree.ForceGroupRelativePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   GroupName                      ( CPF_Parm )
// float                          RelativePosition               ( CPF_Parm )

void UAnimTree::ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition )
{
	static UFunction* pFnForceGroupRelativePosition = NULL;

	if ( ! pFnForceGroupRelativePosition )
		pFnForceGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 15197 ];

	UAnimTree_execForceGroupRelativePosition_Parms ForceGroupRelativePosition_Parms;
	memcpy ( &ForceGroupRelativePosition_Parms.GroupName, &GroupName, 0x8 );
	ForceGroupRelativePosition_Parms.RelativePosition = RelativePosition;

	pFnForceGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGroupRelativePosition, &ForceGroupRelativePosition_Parms, NULL );

	pFnForceGroupRelativePosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.GetGroupNotifyMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupNotifyMaster = NULL;

	if ( ! pFnGetGroupNotifyMaster )
		pFnGetGroupNotifyMaster = (UFunction*) UObject::GObjObjects()->Data[ 15194 ];

	UAnimTree_execGetGroupNotifyMaster_Parms GetGroupNotifyMaster_Parms;
	memcpy ( &GetGroupNotifyMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupNotifyMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupNotifyMaster, &GetGroupNotifyMaster_Parms, NULL );

	pFnGetGroupNotifyMaster->FunctionFlags |= 0x400;

	return GetGroupNotifyMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.GetGroupSynchMaster
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNodeSequence*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GroupName                      ( CPF_Parm )

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster ( struct FName GroupName )
{
	static UFunction* pFnGetGroupSynchMaster = NULL;

	if ( ! pFnGetGroupSynchMaster )
		pFnGetGroupSynchMaster = (UFunction*) UObject::GObjObjects()->Data[ 15191 ];

	UAnimTree_execGetGroupSynchMaster_Parms GetGroupSynchMaster_Parms;
	memcpy ( &GetGroupSynchMaster_Parms.GroupName, &GroupName, 0x8 );

	pFnGetGroupSynchMaster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupSynchMaster, &GetGroupSynchMaster_Parms, NULL );

	pFnGetGroupSynchMaster->FunctionFlags |= 0x400;

	return GetGroupSynchMaster_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetAnimGroupForNode
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// struct FName                   GroupName                      ( CPF_Parm )
// unsigned long                  bCreateIfNotFound              ( CPF_OptionalParm | CPF_Parm )

bool UAnimTree::SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound )
{
	static UFunction* pFnSetAnimGroupForNode = NULL;

	if ( ! pFnSetAnimGroupForNode )
		pFnSetAnimGroupForNode = (UFunction*) UObject::GObjObjects()->Data[ 15186 ];

	UAnimTree_execSetAnimGroupForNode_Parms SetAnimGroupForNode_Parms;
	SetAnimGroupForNode_Parms.SeqNode = SeqNode;
	memcpy ( &SetAnimGroupForNode_Parms.GroupName, &GroupName, 0x8 );
	SetAnimGroupForNode_Parms.bCreateIfNotFound = bCreateIfNotFound;

	pFnSetAnimGroupForNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimGroupForNode, &SetAnimGroupForNode_Parms, NULL );

	pFnSetAnimGroupForNode->FunctionFlags |= 0x400;

	return SetAnimGroupForNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.SetUseSavedPose
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bUseSaved                      ( CPF_Parm )

void UAnimTree::SetUseSavedPose ( unsigned long bUseSaved )
{
	static UFunction* pFnSetUseSavedPose = NULL;

	if ( ! pFnSetUseSavedPose )
		pFnSetUseSavedPose = (UFunction*) UObject::GObjObjects()->Data[ 15184 ];

	UAnimTree_execSetUseSavedPose_Parms SetUseSavedPose_Parms;
	SetUseSavedPose_Parms.bUseSaved = bUseSaved;

	pFnSetUseSavedPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUseSavedPose, &SetUseSavedPose_Parms, NULL );

	pFnSetUseSavedPose->FunctionFlags |= 0x400;
};

// Function Engine.AnimTree.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* UAnimTree::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 15181 ];

	UAnimTree_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.AnimTree.AllSkelControlsNamed
// [0x00420404] ( FUNC_Native )
// Parameters infos:
// class UClass*                  SkelClass                      ( CPF_Parm )
// struct FName                   ControlName                    ( CPF_Parm )
// class USkelControlBase*        OutControl                     ( CPF_Parm | CPF_OutParm )

void UAnimTree::AllSkelControlsNamed ( class UClass* SkelClass, struct FName ControlName, class USkelControlBase** OutControl )
{
	static UFunction* pFnAllSkelControlsNamed = NULL;

	if ( ! pFnAllSkelControlsNamed )
		pFnAllSkelControlsNamed = (UFunction*) UObject::GObjObjects()->Data[ 15177 ];

	UAnimTree_execAllSkelControlsNamed_Parms AllSkelControlsNamed_Parms;
	AllSkelControlsNamed_Parms.SkelClass = SkelClass;
	memcpy ( &AllSkelControlsNamed_Parms.ControlName, &ControlName, 0x8 );

	pFnAllSkelControlsNamed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllSkelControlsNamed, &AllSkelControlsNamed_Parms, NULL );

	pFnAllSkelControlsNamed->FunctionFlags |= 0x400;

	if ( OutControl )
		*OutControl = AllSkelControlsNamed_Parms.OutControl;
};

// Function Engine.AnimTree.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* UAnimTree::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 15174 ];

	UAnimTree_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.SetRootBoneRotationOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSequence::SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneRotationOption = NULL;

	if ( ! pFnSetRootBoneRotationOption )
		pFnSetRootBoneRotationOption = (UFunction*) UObject::GObjObjects()->Data[ 14533 ];

	UAnimNodeSequence_execSetRootBoneRotationOption_Parms SetRootBoneRotationOption_Parms;
	SetRootBoneRotationOption_Parms.AxisX = AxisX;
	SetRootBoneRotationOption_Parms.AxisY = AxisY;
	SetRootBoneRotationOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneRotationOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneRotationOption, &SetRootBoneRotationOption_Parms, NULL );

	pFnSetRootBoneRotationOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.SetRootBoneAxisOption
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSequence::SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetRootBoneAxisOption = NULL;

	if ( ! pFnSetRootBoneAxisOption )
		pFnSetRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 14528 ];

	UAnimNodeSequence_execSetRootBoneAxisOption_Parms SetRootBoneAxisOption_Parms;
	SetRootBoneAxisOption_Parms.AxisX = AxisX;
	SetRootBoneAxisOption_Parms.AxisY = AxisY;
	SetRootBoneAxisOption_Parms.AxisZ = AxisZ;

	pFnSetRootBoneAxisOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootBoneAxisOption, &SetRootBoneAxisOption_Parms, NULL );

	pFnSetRootBoneAxisOption->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.GetTimeLeft
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetTimeLeft ( )
{
	static UFunction* pFnGetTimeLeft = NULL;

	if ( ! pFnGetTimeLeft )
		pFnGetTimeLeft = (UFunction*) UObject::GObjObjects()->Data[ 14526 ];

	UAnimNodeSequence_execGetTimeLeft_Parms GetTimeLeft_Parms;

	pFnGetTimeLeft->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeLeft, &GetTimeLeft_Parms, NULL );

	pFnGetTimeLeft->FunctionFlags |= 0x400;

	return GetTimeLeft_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetAnimPlaybackLength ( )
{
	static UFunction* pFnGetAnimPlaybackLength = NULL;

	if ( ! pFnGetAnimPlaybackLength )
		pFnGetAnimPlaybackLength = (UFunction*) UObject::GObjObjects()->Data[ 14524 ];

	UAnimNodeSequence_execGetAnimPlaybackLength_Parms GetAnimPlaybackLength_Parms;

	pFnGetAnimPlaybackLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimPlaybackLength, &GetAnimPlaybackLength_Parms, NULL );

	pFnGetAnimPlaybackLength->FunctionFlags |= 0x400;

	return GetAnimPlaybackLength_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetGlobalPlayRate ( )
{
	static UFunction* pFnGetGlobalPlayRate = NULL;

	if ( ! pFnGetGlobalPlayRate )
		pFnGetGlobalPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 14522 ];

	UAnimNodeSequence_execGetGlobalPlayRate_Parms GetGlobalPlayRate_Parms;

	pFnGetGlobalPlayRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalPlayRate, &GetGlobalPlayRate_Parms, NULL );

	pFnGetGlobalPlayRate->FunctionFlags |= 0x400;

	return GetGlobalPlayRate_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetGroupRelativePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetGroupRelativePosition ( )
{
	static UFunction* pFnGetGroupRelativePosition = NULL;

	if ( ! pFnGetGroupRelativePosition )
		pFnGetGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 14520 ];

	UAnimNodeSequence_execGetGroupRelativePosition_Parms GetGroupRelativePosition_Parms;

	pFnGetGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupRelativePosition, &GetGroupRelativePosition_Parms, NULL );

	pFnGetGroupRelativePosition->FunctionFlags |= 0x400;

	return GetGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindGroupPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          GroupRelativePosition          ( CPF_Parm )

float UAnimNodeSequence::FindGroupPosition ( float GroupRelativePosition )
{
	static UFunction* pFnFindGroupPosition = NULL;

	if ( ! pFnFindGroupPosition )
		pFnFindGroupPosition = (UFunction*) UObject::GObjObjects()->Data[ 14517 ];

	UAnimNodeSequence_execFindGroupPosition_Parms FindGroupPosition_Parms;
	FindGroupPosition_Parms.GroupRelativePosition = GroupRelativePosition;

	pFnFindGroupPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGroupPosition, &FindGroupPosition_Parms, NULL );

	pFnFindGroupPosition->FunctionFlags |= 0x400;

	return FindGroupPosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.FindGroupRelativePosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          GroupRelativePosition          ( CPF_Parm )

float UAnimNodeSequence::FindGroupRelativePosition ( float GroupRelativePosition )
{
	static UFunction* pFnFindGroupRelativePosition = NULL;

	if ( ! pFnFindGroupRelativePosition )
		pFnFindGroupRelativePosition = (UFunction*) UObject::GObjObjects()->Data[ 14514 ];

	UAnimNodeSequence_execFindGroupRelativePosition_Parms FindGroupRelativePosition_Parms;
	FindGroupRelativePosition_Parms.GroupRelativePosition = GroupRelativePosition;

	pFnFindGroupRelativePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGroupRelativePosition, &FindGroupRelativePosition_Parms, NULL );

	pFnFindGroupRelativePosition->FunctionFlags |= 0x400;

	return FindGroupRelativePosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.GetNormalizedPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UAnimNodeSequence::GetNormalizedPosition ( )
{
	static UFunction* pFnGetNormalizedPosition = NULL;

	if ( ! pFnGetNormalizedPosition )
		pFnGetNormalizedPosition = (UFunction*) UObject::GObjObjects()->Data[ 14512 ];

	UAnimNodeSequence_execGetNormalizedPosition_Parms GetNormalizedPosition_Parms;

	pFnGetNormalizedPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNormalizedPosition, &GetNormalizedPosition_Parms, NULL );

	pFnGetNormalizedPosition->FunctionFlags |= 0x400;

	return GetNormalizedPosition_Parms.ReturnValue;
};

// Function Engine.AnimNodeSequence.SetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewTime                        ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )

void UAnimNodeSequence::SetPosition ( float NewTime, unsigned long bFireNotifies )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 14509 ];

	UAnimNodeSequence_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewTime = NewTime;
	SetPosition_Parms.bFireNotifies = bFireNotifies;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.ReplayAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeSequence::ReplayAnim ( )
{
	static UFunction* pFnReplayAnim = NULL;

	if ( ! pFnReplayAnim )
		pFnReplayAnim = (UFunction*) UObject::GObjObjects()->Data[ 14508 ];

	UAnimNodeSequence_execReplayAnim_Parms ReplayAnim_Parms;

	pFnReplayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplayAnim, &ReplayAnim_Parms, NULL );

	pFnReplayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.StopAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAnimNodeSequence::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 14507 ];

	UAnimNodeSequence_execStopAnim_Parms StopAnim_Parms;

	pFnStopAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );

	pFnStopAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// float                          InRate                         ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

void UAnimNodeSequence::PlayAnim ( unsigned long bLoop, float InRate, float StartTime )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 14503 ];

	UAnimNodeSequence_execPlayAnim_Parms PlayAnim_Parms;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.InRate = InRate;
	PlayAnim_Parms.StartTime = StartTime;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequence.SetAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   Sequence                       ( CPF_Parm )

void UAnimNodeSequence::SetAnim ( struct FName Sequence )
{
	static UFunction* pFnSetAnim = NULL;

	if ( ! pFnSetAnim )
		pFnSetAnim = (UFunction*) UObject::GObjObjects()->Data[ 14501 ];

	UAnimNodeSequence_execSetAnim_Parms SetAnim_Parms;
	memcpy ( &SetAnim_Parms.Sequence, &Sequence, 0x8 );

	pFnSetAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnim, &SetAnim_Parms, NULL );

	pFnSetAnim->FunctionFlags |= 0x400;
};

// Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate ( )
{
	static UFunction* pFnCheckAnimsUpToDate = NULL;

	if ( ! pFnCheckAnimsUpToDate )
		pFnCheckAnimsUpToDate = (UFunction*) UObject::GObjObjects()->Data[ 14643 ];

	UAnimNodeSequenceBlendByAim_execCheckAnimsUpToDate_Parms CheckAnimsUpToDate_Parms;

	pFnCheckAnimsUpToDate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckAnimsUpToDate, &CheckAnimsUpToDate_Parms, NULL );

	pFnCheckAnimsUpToDate->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeMultiPose.UpdateMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UMorphTarget*            Target                         ( CPF_Parm )
// float                          InWeight                       ( CPF_Parm )

bool UMorphNodeMultiPose::UpdateMorphTarget ( class UMorphTarget* Target, float InWeight )
{
	static UFunction* pFnUpdateMorphTarget = NULL;

	if ( ! pFnUpdateMorphTarget )
		pFnUpdateMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 26086 ];

	UMorphNodeMultiPose_execUpdateMorphTarget_Parms UpdateMorphTarget_Parms;
	UpdateMorphTarget_Parms.Target = Target;
	UpdateMorphTarget_Parms.InWeight = InWeight;

	pFnUpdateMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMorphTarget, &UpdateMorphTarget_Parms, NULL );

	pFnUpdateMorphTarget->FunctionFlags |= 0x400;

	return UpdateMorphTarget_Parms.ReturnValue;
};

// Function Engine.MorphNodeMultiPose.RemoveMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UMorphNodeMultiPose::RemoveMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnRemoveMorphTarget = NULL;

	if ( ! pFnRemoveMorphTarget )
		pFnRemoveMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 26084 ];

	UMorphNodeMultiPose_execRemoveMorphTarget_Parms RemoveMorphTarget_Parms;
	memcpy ( &RemoveMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnRemoveMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMorphTarget, &RemoveMorphTarget_Parms, NULL );

	pFnRemoveMorphTarget->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeMultiPose.AddMorphTarget
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )
// float                          InWeight                       ( CPF_OptionalParm | CPF_Parm )

bool UMorphNodeMultiPose::AddMorphTarget ( struct FName MorphTargetName, float InWeight )
{
	static UFunction* pFnAddMorphTarget = NULL;

	if ( ! pFnAddMorphTarget )
		pFnAddMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 26080 ];

	UMorphNodeMultiPose_execAddMorphTarget_Parms AddMorphTarget_Parms;
	memcpy ( &AddMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );
	AddMorphTarget_Parms.InWeight = InWeight;

	pFnAddMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddMorphTarget, &AddMorphTarget_Parms, NULL );

	pFnAddMorphTarget->FunctionFlags |= 0x400;

	return AddMorphTarget_Parms.ReturnValue;
};

// Function Engine.MorphNodePose.SetMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   MorphTargetName                ( CPF_Parm )

void UMorphNodePose::SetMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnSetMorphTarget = NULL;

	if ( ! pFnSetMorphTarget )
		pFnSetMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 26093 ];

	UMorphNodePose_execSetMorphTarget_Parms SetMorphTarget_Parms;
	memcpy ( &SetMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnSetMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMorphTarget, &SetMorphTarget_Parms, NULL );

	pFnSetMorphTarget->FunctionFlags |= 0x400;
};

// Function Engine.MorphNodeWeight.SetNodeWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          NewWeight                      ( CPF_Parm )

void UMorphNodeWeight::SetNodeWeight ( float NewWeight )
{
	static UFunction* pFnSetNodeWeight = NULL;

	if ( ! pFnSetNodeWeight )
		pFnSetNodeWeight = (UFunction*) UObject::GObjObjects()->Data[ 26103 ];

	UMorphNodeWeight_execSetNodeWeight_Parms SetNodeWeight_Parms;
	SetNodeWeight_Parms.NewWeight = NewWeight;

	pFnSetNodeWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNodeWeight, &SetNodeWeight_Parms, NULL );

	pFnSetNodeWeight->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlBase.GetControlMetadataWeight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkelControlBase::GetControlMetadataWeight ( )
{
	static UFunction* pFnGetControlMetadataWeight = NULL;

	if ( ! pFnGetControlMetadataWeight )
		pFnGetControlMetadataWeight = (UFunction*) UObject::GObjObjects()->Data[ 33293 ];

	USkelControlBase_execGetControlMetadataWeight_Parms GetControlMetadataWeight_Parms;

	pFnGetControlMetadataWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetControlMetadataWeight, &GetControlMetadataWeight_Parms, NULL );

	pFnGetControlMetadataWeight->FunctionFlags |= 0x400;

	return GetControlMetadataWeight_Parms.ReturnValue;
};

// Function Engine.SkelControlBase.TickSkelControl
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void USkelControlBase::eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnTickSkelControl = NULL;

	if ( ! pFnTickSkelControl )
		pFnTickSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 33290 ];

	USkelControlBase_eventTickSkelControl_Parms TickSkelControl_Parms;
	TickSkelControl_Parms.DeltaTime = DeltaTime;
	TickSkelControl_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnTickSkelControl, &TickSkelControl_Parms, NULL );
};

// Function Engine.SkelControlBase.SetSkelControlStrength
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewStrength                    ( CPF_Parm )
// float                          InBlendTime                    ( CPF_Parm )

void USkelControlBase::SetSkelControlStrength ( float NewStrength, float InBlendTime )
{
	static UFunction* pFnSetSkelControlStrength = NULL;

	if ( ! pFnSetSkelControlStrength )
		pFnSetSkelControlStrength = (UFunction*) UObject::GObjObjects()->Data[ 33287 ];

	USkelControlBase_execSetSkelControlStrength_Parms SetSkelControlStrength_Parms;
	SetSkelControlStrength_Parms.NewStrength = NewStrength;
	SetSkelControlStrength_Parms.InBlendTime = InBlendTime;

	pFnSetSkelControlStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlStrength, &SetSkelControlStrength_Parms, NULL );

	pFnSetSkelControlStrength->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlBase.SetSkelControlActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInActive                      ( CPF_Parm )

void USkelControlBase::SetSkelControlActive ( unsigned long bInActive )
{
	static UFunction* pFnSetSkelControlActive = NULL;

	if ( ! pFnSetSkelControlActive )
		pFnSetSkelControlActive = (UFunction*) UObject::GObjObjects()->Data[ 33285 ];

	USkelControlBase_execSetSkelControlActive_Parms SetSkelControlActive_Parms;
	SetSkelControlActive_Parms.bInActive = bInActive;

	pFnSetSkelControlActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkelControlActive, &SetSkelControlActive_Parms, NULL );

	pFnSetSkelControlActive->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.CanLookAtPoint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 PointLoc                       ( CPF_Parm )
// unsigned long                  bDrawDebugInfo                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugUsePersistentLines       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDebugFlushLinesFirst          ( CPF_OptionalParm | CPF_Parm )

bool USkelControlLookAt::CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst )
{
	static UFunction* pFnCanLookAtPoint = NULL;

	if ( ! pFnCanLookAtPoint )
		pFnCanLookAtPoint = (UFunction*) UObject::GObjObjects()->Data[ 33397 ];

	USkelControlLookAt_execCanLookAtPoint_Parms CanLookAtPoint_Parms;
	memcpy ( &CanLookAtPoint_Parms.PointLoc, &PointLoc, 0xC );
	CanLookAtPoint_Parms.bDrawDebugInfo = bDrawDebugInfo;
	CanLookAtPoint_Parms.bDebugUsePersistentLines = bDebugUsePersistentLines;
	CanLookAtPoint_Parms.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	pFnCanLookAtPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanLookAtPoint, &CanLookAtPoint_Parms, NULL );

	pFnCanLookAtPoint->FunctionFlags |= 0x400;

	return CanLookAtPoint_Parms.ReturnValue;
};

// Function Engine.SkelControlLookAt.SetLookAtAlpha
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DesiredAlpha                   ( CPF_Parm )
// float                          DesiredBlendTime               ( CPF_Parm )

void USkelControlLookAt::SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime )
{
	static UFunction* pFnSetLookAtAlpha = NULL;

	if ( ! pFnSetLookAtAlpha )
		pFnSetLookAtAlpha = (UFunction*) UObject::GObjObjects()->Data[ 33394 ];

	USkelControlLookAt_execSetLookAtAlpha_Parms SetLookAtAlpha_Parms;
	SetLookAtAlpha_Parms.DesiredAlpha = DesiredAlpha;
	SetLookAtAlpha_Parms.DesiredBlendTime = DesiredBlendTime;

	pFnSetLookAtAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLookAtAlpha, &SetLookAtAlpha_Parms, NULL );

	pFnSetLookAtAlpha->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USkelControlLookAt::InterpolateTargetLocation ( float DeltaTime )
{
	static UFunction* pFnInterpolateTargetLocation = NULL;

	if ( ! pFnInterpolateTargetLocation )
		pFnInterpolateTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 33392 ];

	USkelControlLookAt_execInterpolateTargetLocation_Parms InterpolateTargetLocation_Parms;
	InterpolateTargetLocation_Parms.DeltaTime = DeltaTime;

	pFnInterpolateTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateTargetLocation, &InterpolateTargetLocation_Parms, NULL );

	pFnInterpolateTargetLocation->FunctionFlags |= 0x400;
};

// Function Engine.SkelControlLookAt.SetTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTargetLocation              ( CPF_Parm )

void USkelControlLookAt::SetTargetLocation ( struct FVector NewTargetLocation )
{
	static UFunction* pFnSetTargetLocation = NULL;

	if ( ! pFnSetTargetLocation )
		pFnSetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 33390 ];

	USkelControlLookAt_execSetTargetLocation_Parms SetTargetLocation_Parms;
	memcpy ( &SetTargetLocation_Parms.NewTargetLocation, &NewTargetLocation, 0xC );

	pFnSetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetLocation, &SetTargetLocation_Parms, NULL );

	pFnSetTargetLocation->FunctionFlags |= 0x400;
};

// Function Engine.AnimSequence.GetNotifyTimeByClass
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NotifyClass                    ( CPF_Parm )
// float                          PlayRate                       ( CPF_OptionalParm | CPF_Parm )
// float                          StartPosition                  ( CPF_OptionalParm | CPF_Parm )
// class UAnimNotify*             out_Notify                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// float                          out_Duration                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

float UAnimSequence::GetNotifyTimeByClass ( class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration )
{
	static UFunction* pFnGetNotifyTimeByClass = NULL;

	if ( ! pFnGetNotifyTimeByClass )
		pFnGetNotifyTimeByClass = (UFunction*) UObject::GObjObjects()->Data[ 14094 ];

	UAnimSequence_execGetNotifyTimeByClass_Parms GetNotifyTimeByClass_Parms;
	GetNotifyTimeByClass_Parms.NotifyClass = NotifyClass;
	GetNotifyTimeByClass_Parms.PlayRate = PlayRate;
	GetNotifyTimeByClass_Parms.StartPosition = StartPosition;

	pFnGetNotifyTimeByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNotifyTimeByClass, &GetNotifyTimeByClass_Parms, NULL );

	pFnGetNotifyTimeByClass->FunctionFlags |= 0x400;

	if ( out_Notify )
		*out_Notify = GetNotifyTimeByClass_Parms.out_Notify;

	if ( out_Duration )
		*out_Duration = GetNotifyTimeByClass_Parms.out_Duration;

	return GetNotifyTimeByClass_Parms.ReturnValue;
};

// Function Engine.MorphTargetSet.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* UMorphTargetSet::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 26141 ];

	UMorphTargetSet_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.DecalManager.SpawnDecal
// [0x00824002] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UMaterialInterface*      DecalMaterial                  ( CPF_Parm )
// struct FVector                 DecalLocation                  ( CPF_Parm )
// struct FRotator                DecalOrientation               ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          Thickness                      ( CPF_Parm )
// unsigned long                  bNoClip                        ( CPF_Parm )
// float                          DecalRotation                  ( CPF_OptionalParm | CPF_Parm )
// class UPrimitiveComponent*     HitComponent                   ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bProjectOnTerrain              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bProjectOnSkeletalMeshes       ( CPF_OptionalParm | CPF_Parm )
// struct FName                   HitBone                        ( CPF_OptionalParm | CPF_Parm )
// int                            HitNodeIndex                   ( CPF_OptionalParm | CPF_Parm )
// int                            HitLevelIndex                  ( CPF_OptionalParm | CPF_Parm )
// float                          InDecalLifeSpan                ( CPF_OptionalParm | CPF_Parm )
// int                            InFracturedStaticMeshComponentIndex ( CPF_OptionalParm | CPF_Parm )
// float                          InDepthBias                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               InBlendRange                   ( CPF_OptionalParm | CPF_Parm )

class UDecalComponent* ADecalManager::SpawnDecal ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, struct FVector2D InBlendRange )
{
	static UFunction* pFnSpawnDecal = NULL;

	if ( ! pFnSpawnDecal )
		pFnSpawnDecal = (UFunction*) UObject::GObjObjects()->Data[ 18022 ];

	ADecalManager_execSpawnDecal_Parms SpawnDecal_Parms;
	SpawnDecal_Parms.DecalMaterial = DecalMaterial;
	memcpy ( &SpawnDecal_Parms.DecalLocation, &DecalLocation, 0xC );
	memcpy ( &SpawnDecal_Parms.DecalOrientation, &DecalOrientation, 0xC );
	SpawnDecal_Parms.Width = Width;
	SpawnDecal_Parms.Height = Height;
	SpawnDecal_Parms.Thickness = Thickness;
	SpawnDecal_Parms.bNoClip = bNoClip;
	SpawnDecal_Parms.DecalRotation = DecalRotation;
	SpawnDecal_Parms.HitComponent = HitComponent;
	SpawnDecal_Parms.bProjectOnTerrain = bProjectOnTerrain;
	SpawnDecal_Parms.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	memcpy ( &SpawnDecal_Parms.HitBone, &HitBone, 0x8 );
	SpawnDecal_Parms.HitNodeIndex = HitNodeIndex;
	SpawnDecal_Parms.HitLevelIndex = HitLevelIndex;
	SpawnDecal_Parms.InDecalLifeSpan = InDecalLifeSpan;
	SpawnDecal_Parms.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	SpawnDecal_Parms.InDepthBias = InDepthBias;
	memcpy ( &SpawnDecal_Parms.InBlendRange, &InBlendRange, 0x8 );

	this->ProcessEvent ( pFnSpawnDecal, &SpawnDecal_Parms, NULL );

	return SpawnDecal_Parms.ReturnValue;
};

// Function Engine.DecalManager.GetPooledComponent
// [0x00080002] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UDecalComponent* ADecalManager::GetPooledComponent ( )
{
	static UFunction* pFnGetPooledComponent = NULL;

	if ( ! pFnGetPooledComponent )
		pFnGetPooledComponent = (UFunction*) UObject::GObjObjects()->Data[ 18018 ];

	ADecalManager_execGetPooledComponent_Parms GetPooledComponent_Parms;

	this->ProcessEvent ( pFnGetPooledComponent, &GetPooledComponent_Parms, NULL );

	return GetPooledComponent_Parms.ReturnValue;
};

// Function Engine.DecalManager.SetDecalParameters
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// class UDecalComponent*         TheDecal                       ( CPF_Parm | CPF_EditInline )
// class UMaterialInterface*      DecalMaterial                  ( CPF_Parm )
// struct FVector                 DecalLocation                  ( CPF_Parm )
// struct FRotator                DecalOrientation               ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          Thickness                      ( CPF_Parm )
// unsigned long                  bNoClip                        ( CPF_Parm )
// float                          DecalRotation                  ( CPF_Parm )
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bProjectOnTerrain              ( CPF_Parm )
// unsigned long                  bProjectOnSkeletalMeshes       ( CPF_Parm )
// struct FName                   HitBone                        ( CPF_Parm )
// int                            HitNodeIndex                   ( CPF_Parm )
// int                            HitLevelIndex                  ( CPF_Parm )
// int                            InFracturedStaticMeshComponentIndex ( CPF_Parm )
// float                          DepthBias                      ( CPF_Parm )
// struct FVector2D               BlendRange                     ( CPF_Parm )

void ADecalManager::SetDecalParameters ( class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, struct FVector2D BlendRange )
{
	static UFunction* pFnSetDecalParameters = NULL;

	if ( ! pFnSetDecalParameters )
		pFnSetDecalParameters = (UFunction*) UObject::GObjObjects()->Data[ 17999 ];

	ADecalManager_execSetDecalParameters_Parms SetDecalParameters_Parms;
	SetDecalParameters_Parms.TheDecal = TheDecal;
	SetDecalParameters_Parms.DecalMaterial = DecalMaterial;
	memcpy ( &SetDecalParameters_Parms.DecalLocation, &DecalLocation, 0xC );
	memcpy ( &SetDecalParameters_Parms.DecalOrientation, &DecalOrientation, 0xC );
	SetDecalParameters_Parms.Width = Width;
	SetDecalParameters_Parms.Height = Height;
	SetDecalParameters_Parms.Thickness = Thickness;
	SetDecalParameters_Parms.bNoClip = bNoClip;
	SetDecalParameters_Parms.DecalRotation = DecalRotation;
	SetDecalParameters_Parms.HitComponent = HitComponent;
	SetDecalParameters_Parms.bProjectOnTerrain = bProjectOnTerrain;
	SetDecalParameters_Parms.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	memcpy ( &SetDecalParameters_Parms.HitBone, &HitBone, 0x8 );
	SetDecalParameters_Parms.HitNodeIndex = HitNodeIndex;
	SetDecalParameters_Parms.HitLevelIndex = HitLevelIndex;
	SetDecalParameters_Parms.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	SetDecalParameters_Parms.DepthBias = DepthBias;
	memcpy ( &SetDecalParameters_Parms.BlendRange, &BlendRange, 0x8 );

	this->ProcessEvent ( pFnSetDecalParameters, &SetDecalParameters_Parms, NULL );
};

// Function Engine.DecalManager.CanSpawnDecals
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ADecalManager::CanSpawnDecals ( )
{
	static UFunction* pFnCanSpawnDecals = NULL;

	if ( ! pFnCanSpawnDecals )
		pFnCanSpawnDecals = (UFunction*) UObject::GObjObjects()->Data[ 17997 ];

	ADecalManager_execCanSpawnDecals_Parms CanSpawnDecals_Parms;

	this->ProcessEvent ( pFnCanSpawnDecals, &CanSpawnDecals_Parms, NULL );

	return CanSpawnDecals_Parms.ReturnValue;
};

// Function Engine.DecalManager.SpawnDecalOnParticleCollision
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UMaterialInterface*      DecalMaterial                  ( CPF_Parm )
// struct FVector                 DecalLocation                  ( CPF_Parm )
// struct FRotator                DecalOrientation               ( CPF_Parm )
// float                          Width                          ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          Thickness                      ( CPF_Parm )
// unsigned long                  bNoClip                        ( CPF_Parm )
// float                          DecalLifetime                  ( CPF_Parm )
// float                          InDepthBias                    ( CPF_Parm )
// struct FVector2D               InBlendRange                   ( CPF_Parm )

void ADecalManager::eventSpawnDecalOnParticleCollision ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalLifetime, float InDepthBias, struct FVector2D InBlendRange )
{
	static UFunction* pFnSpawnDecalOnParticleCollision = NULL;

	if ( ! pFnSpawnDecalOnParticleCollision )
		pFnSpawnDecalOnParticleCollision = (UFunction*) UObject::GObjObjects()->Data[ 17985 ];

	ADecalManager_eventSpawnDecalOnParticleCollision_Parms SpawnDecalOnParticleCollision_Parms;
	SpawnDecalOnParticleCollision_Parms.DecalMaterial = DecalMaterial;
	memcpy ( &SpawnDecalOnParticleCollision_Parms.DecalLocation, &DecalLocation, 0xC );
	memcpy ( &SpawnDecalOnParticleCollision_Parms.DecalOrientation, &DecalOrientation, 0xC );
	SpawnDecalOnParticleCollision_Parms.Width = Width;
	SpawnDecalOnParticleCollision_Parms.Height = Height;
	SpawnDecalOnParticleCollision_Parms.Thickness = Thickness;
	SpawnDecalOnParticleCollision_Parms.bNoClip = bNoClip;
	SpawnDecalOnParticleCollision_Parms.DecalLifetime = DecalLifetime;
	SpawnDecalOnParticleCollision_Parms.InDepthBias = InDepthBias;
	memcpy ( &SpawnDecalOnParticleCollision_Parms.InBlendRange, &InBlendRange, 0x8 );

	this->ProcessEvent ( pFnSpawnDecalOnParticleCollision, &SpawnDecalOnParticleCollision_Parms, NULL );
};

// Function Engine.DecalManager.DecalFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UDecalComponent*         Decal                          ( CPF_Parm | CPF_EditInline )

void ADecalManager::eventDecalFinished ( class UDecalComponent* Decal )
{
	static UFunction* pFnDecalFinished = NULL;

	if ( ! pFnDecalFinished )
		pFnDecalFinished = (UFunction*) UObject::GObjObjects()->Data[ 17983 ];

	ADecalManager_eventDecalFinished_Parms DecalFinished_Parms;
	DecalFinished_Parms.Decal = Decal;

	this->ProcessEvent ( pFnDecalFinished, &DecalFinished_Parms, NULL );
};

// Function Engine.DecalManager.AreDynamicDecalsEnabled
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ADecalManager::AreDynamicDecalsEnabled ( )
{
	static UFunction* pFnAreDynamicDecalsEnabled = NULL;

	if ( ! pFnAreDynamicDecalsEnabled )
		pFnAreDynamicDecalsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 17981 ];

	ADecalManager_execAreDynamicDecalsEnabled_Parms AreDynamicDecalsEnabled_Parms;

	pFnAreDynamicDecalsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreDynamicDecalsEnabled, &AreDynamicDecalsEnabled_Parms, NULL );

	pFnAreDynamicDecalsEnabled->FunctionFlags |= 0x400;

	return AreDynamicDecalsEnabled_Parms.ReturnValue;
};

// Function Engine.DecalComponent.GetOrCreateDecalMaterialInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInstance*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterialInstance* UDecalComponent::GetOrCreateDecalMaterialInstance ( )
{
	static UFunction* pFnGetOrCreateDecalMaterialInstance = NULL;

	if ( ! pFnGetOrCreateDecalMaterialInstance )
		pFnGetOrCreateDecalMaterialInstance = (UFunction*) UObject::GObjObjects()->Data[ 17959 ];

	UDecalComponent_execGetOrCreateDecalMaterialInstance_Parms GetOrCreateDecalMaterialInstance_Parms;

	pFnGetOrCreateDecalMaterialInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrCreateDecalMaterialInstance, &GetOrCreateDecalMaterialInstance_Parms, NULL );

	pFnGetOrCreateDecalMaterialInstance->FunctionFlags |= 0x400;

	return GetOrCreateDecalMaterialInstance_Parms.ReturnValue;
};

// Function Engine.DecalComponent.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// class AActor*                  Value                          ( CPF_Parm )

void UDecalComponent::SetActorParameter ( struct FName Key, class AActor* Value )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 17961 ];

	UDecalComponent_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.Key, &Key, 0x8 );
	SetActorParameter_Parms.Value = Value;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.SetLinearColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UDecalComponent::SetLinearColorParameter ( struct FName Key, struct FLinearColor Value )
{
	static UFunction* pFnSetLinearColorParameter = NULL;

	if ( ! pFnSetLinearColorParameter )
		pFnSetLinearColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 17956 ];

	UDecalComponent_execSetLinearColorParameter_Parms SetLinearColorParameter_Parms;
	memcpy ( &SetLinearColorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetLinearColorParameter_Parms.Value, &Value, 0x10 );

	pFnSetLinearColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorParameter, &SetLinearColorParameter_Parms, NULL );

	pFnSetLinearColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FVector                 Value                          ( CPF_Parm )

void UDecalComponent::SetVectorParameter ( struct FName Key, struct FVector Value )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 17953 ];

	UDecalComponent_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Value, &Value, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UDecalComponent::SetFloatParameter ( struct FName Key, float Value )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 17950 ];

	UDecalComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.Key, &Key, 0x8 );
	SetFloatParameter_Parms.Value = Value;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.SetNameParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FName                   Value                          ( CPF_Parm )

void UDecalComponent::SetNameParameter ( struct FName Key, struct FName Value )
{
	static UFunction* pFnSetNameParameter = NULL;

	if ( ! pFnSetNameParameter )
		pFnSetNameParameter = (UFunction*) UObject::GObjObjects()->Data[ 17947 ];

	UDecalComponent_execSetNameParameter_Parms SetNameParameter_Parms;
	memcpy ( &SetNameParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetNameParameter_Parms.Value, &Value, 0x8 );

	pFnSetNameParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameParameter, &SetNameParameter_Parms, NULL );

	pFnSetNameParameter->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.IsWaitingForResetToDefaultsToComplete
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UDecalComponent::IsWaitingForResetToDefaultsToComplete ( )
{
	static UFunction* pFnIsWaitingForResetToDefaultsToComplete = NULL;

	if ( ! pFnIsWaitingForResetToDefaultsToComplete )
		pFnIsWaitingForResetToDefaultsToComplete = (UFunction*) UObject::GObjObjects()->Data[ 17945 ];

	UDecalComponent_execIsWaitingForResetToDefaultsToComplete_Parms IsWaitingForResetToDefaultsToComplete_Parms;

	pFnIsWaitingForResetToDefaultsToComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWaitingForResetToDefaultsToComplete, &IsWaitingForResetToDefaultsToComplete_Parms, NULL );

	pFnIsWaitingForResetToDefaultsToComplete->FunctionFlags |= 0x400;

	return IsWaitingForResetToDefaultsToComplete_Parms.ReturnValue;
};

// Function Engine.DecalComponent.GetDecalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UMaterialInterface* UDecalComponent::GetDecalMaterial ( )
{
	static UFunction* pFnGetDecalMaterial = NULL;

	if ( ! pFnGetDecalMaterial )
		pFnGetDecalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 17943 ];

	UDecalComponent_execGetDecalMaterial_Parms GetDecalMaterial_Parms;

	pFnGetDecalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDecalMaterial, &GetDecalMaterial_Parms, NULL );

	pFnGetDecalMaterial->FunctionFlags |= 0x400;

	return GetDecalMaterial_Parms.ReturnValue;
};

// Function Engine.DecalComponent.SetDecalMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewDecalMaterial               ( CPF_Parm )

void UDecalComponent::SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial )
{
	static UFunction* pFnSetDecalMaterial = NULL;

	if ( ! pFnSetDecalMaterial )
		pFnSetDecalMaterial = (UFunction*) UObject::GObjObjects()->Data[ 17941 ];

	UDecalComponent_execSetDecalMaterial_Parms SetDecalMaterial_Parms;
	SetDecalMaterial_Parms.NewDecalMaterial = NewDecalMaterial;

	pFnSetDecalMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDecalMaterial, &SetDecalMaterial_Parms, NULL );

	pFnSetDecalMaterial->FunctionFlags |= 0x400;
};

// Function Engine.DecalComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UDecalComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 17940 ];

	UDecalComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AFogVolumeDensityInfo::ApplyCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 20075 ];

	AFogVolumeDensityInfo_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AFogVolumeDensityInfo::CreateCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 20073 ];

	AFogVolumeDensityInfo_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AFogVolumeDensityInfo::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 20071 ];

	AFogVolumeDensityInfo_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.FogVolumeDensityInfo.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AFogVolumeDensityInfo::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 20069 ];

	AFogVolumeDensityInfo_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AFogVolumeDensityInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 20067 ];

	AFogVolumeDensityInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AFogVolumeDensityInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20066 ];

	AFogVolumeDensityInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.ExponentialHeightFogComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UExponentialHeightFogComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 19764 ];

	UExponentialHeightFogComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.FogVolumeDensityComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UFogVolumeDensityComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 20051 ];

	UFogVolumeDensityComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.ApexDestructibleActor.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void AApexDestructibleActor::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 15354 ];

	AApexDestructibleActor_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.ApexDestructibleActor.TakeRadiusDamage
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AApexDestructibleActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 15344 ];

	AApexDestructibleActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	pFnTakeRadiusDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );

	pFnTakeRadiusDamage->FunctionFlags |= 0x400;
};

// Function Engine.ApexDestructibleActor.TakeDamage
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AApexDestructibleActor::TakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 15336 ];

	AApexDestructibleActor_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	pFnTakeDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );

	pFnTakeDamage->FunctionFlags |= 0x400;
};

// Function Engine.ApexDestructibleActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AApexDestructibleActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 15335 ];

	AApexDestructibleActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.ApexDestructibleActor.CacheFractureEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AApexDestructibleActor::CacheFractureEffects ( )
{
	static UFunction* pFnCacheFractureEffects = NULL;

	if ( ! pFnCacheFractureEffects )
		pFnCacheFractureEffects = (UFunction*) UObject::GObjObjects()->Data[ 15334 ];

	AApexDestructibleActor_execCacheFractureEffects_Parms CacheFractureEffects_Parms;

	pFnCacheFractureEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheFractureEffects, &CacheFractureEffects_Parms, NULL );

	pFnCacheFractureEffects->FunctionFlags |= 0x400;
};

// Function Engine.ApexDestructibleActor.SpawnFractureEmitter
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         EmitterTemplate                ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FVector                 SpawnDirection                 ( CPF_Parm )

void AApexDestructibleActor::eventSpawnFractureEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FVector SpawnDirection )
{
	static UFunction* pFnSpawnFractureEmitter = NULL;

	if ( ! pFnSpawnFractureEmitter )
		pFnSpawnFractureEmitter = (UFunction*) UObject::GObjObjects()->Data[ 15328 ];

	AApexDestructibleActor_eventSpawnFractureEmitter_Parms SpawnFractureEmitter_Parms;
	SpawnFractureEmitter_Parms.EmitterTemplate = EmitterTemplate;
	memcpy ( &SpawnFractureEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnFractureEmitter_Parms.SpawnDirection, &SpawnDirection, 0xC );

	this->ProcessEvent ( pFnSpawnFractureEmitter, &SpawnFractureEmitter_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatorController           ( CPF_Parm )
// float                          DamageAmount                   ( CPF_Parm )
// class UClass*                  dmgType                        ( CPF_Parm )

void AFracturedStaticMeshActor::NotifyHitByExplosion ( class AController* InstigatorController, float DamageAmount, class UClass* dmgType )
{
	static UFunction* pFnNotifyHitByExplosion = NULL;

	if ( ! pFnNotifyHitByExplosion )
		pFnNotifyHitByExplosion = (UFunction*) UObject::GObjObjects()->Data[ 20928 ];

	AFracturedStaticMeshActor_execNotifyHitByExplosion_Parms NotifyHitByExplosion_Parms;
	NotifyHitByExplosion_Parms.InstigatorController = InstigatorController;
	NotifyHitByExplosion_Parms.DamageAmount = DamageAmount;
	NotifyHitByExplosion_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnNotifyHitByExplosion, &NotifyHitByExplosion_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventSetLoseChunkReplacementMaterial ( )
{
	static UFunction* pFnSetLoseChunkReplacementMaterial = NULL;

	if ( ! pFnSetLoseChunkReplacementMaterial )
		pFnSetLoseChunkReplacementMaterial = (UFunction*) UObject::GObjObjects()->Data[ 20925 ];

	AFracturedStaticMeshActor_eventSetLoseChunkReplacementMaterial_Parms SetLoseChunkReplacementMaterial_Parms;

	this->ProcessEvent ( pFnSetLoseChunkReplacementMaterial, &SetLoseChunkReplacementMaterial_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventHideFragmentsToMaximizeMemoryUsage ( )
{
	static UFunction* pFnHideFragmentsToMaximizeMemoryUsage = NULL;

	if ( ! pFnHideFragmentsToMaximizeMemoryUsage )
		pFnHideFragmentsToMaximizeMemoryUsage = (UFunction*) UObject::GObjObjects()->Data[ 20920 ];

	AFracturedStaticMeshActor_eventHideFragmentsToMaximizeMemoryUsage_Parms HideFragmentsToMaximizeMemoryUsage_Parms;

	this->ProcessEvent ( pFnHideFragmentsToMaximizeMemoryUsage, &HideFragmentsToMaximizeMemoryUsage_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.HideOneFragment
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventHideOneFragment ( )
{
	static UFunction* pFnHideOneFragment = NULL;

	if ( ! pFnHideOneFragment )
		pFnHideOneFragment = (UFunction*) UObject::GObjObjects()->Data[ 20916 ];

	AFracturedStaticMeshActor_eventHideOneFragment_Parms HideOneFragment_Parms;

	this->ProcessEvent ( pFnHideOneFragment, &HideOneFragment_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.ResetVisibility
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void AFracturedStaticMeshActor::eventResetVisibility ( )
{
	static UFunction* pFnResetVisibility = NULL;

	if ( ! pFnResetVisibility )
		pFnResetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 20915 ];

	AFracturedStaticMeshActor_eventResetVisibility_Parms ResetVisibility_Parms;

	pFnResetVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetVisibility, &ResetVisibility_Parms, NULL );

	pFnResetVisibility->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          RBStrength                     ( CPF_Parm )
// unsigned long                  bWantPhysChunksAndParticles    ( CPF_Parm )

void AFracturedStaticMeshActor::eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles )
{
	static UFunction* pFnBreakOffPartsInRadius = NULL;

	if ( ! pFnBreakOffPartsInRadius )
		pFnBreakOffPartsInRadius = (UFunction*) UObject::GObjObjects()->Data[ 20910 ];

	AFracturedStaticMeshActor_eventBreakOffPartsInRadius_Parms BreakOffPartsInRadius_Parms;
	memcpy ( &BreakOffPartsInRadius_Parms.Origin, &Origin, 0xC );
	BreakOffPartsInRadius_Parms.Radius = Radius;
	BreakOffPartsInRadius_Parms.RBStrength = RBStrength;
	BreakOffPartsInRadius_Parms.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	pFnBreakOffPartsInRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakOffPartsInRadius, &BreakOffPartsInRadius_Parms, NULL );

	pFnBreakOffPartsInRadius->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshActor.Explode
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventExplode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 20902 ];

	AFracturedStaticMeshActor_eventExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.TakeDamage
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AFracturedStaticMeshActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 20872 ];

	AFracturedStaticMeshActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.RemoveDecals
// [0x00080501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            IndexToRemoveDecalsFrom        ( CPF_Parm )

void AFracturedStaticMeshActor::RemoveDecals ( int IndexToRemoveDecalsFrom )
{
	static UFunction* pFnRemoveDecals = NULL;

	if ( ! pFnRemoveDecals )
		pFnRemoveDecals = (UFunction*) UObject::GObjObjects()->Data[ 20870 ];

	AFracturedStaticMeshActor_execRemoveDecals_Parms RemoveDecals_Parms;
	RemoveDecals_Parms.IndexToRemoveDecalsFrom = IndexToRemoveDecalsFrom;

	pFnRemoveDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveDecals, &RemoveDecals_Parms, NULL );

	pFnRemoveDecals->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// class APawn*                   EffectInstigator               ( CPF_Parm )
// unsigned char                  bWantPhysChunksAndParticles    ( CPF_Parm | CPF_OutParm )

bool AFracturedStaticMeshActor::FractureEffectIsRelevant ( unsigned long bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles )
{
	static UFunction* pFnFractureEffectIsRelevant = NULL;

	if ( ! pFnFractureEffectIsRelevant )
		pFnFractureEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 17499 ];

	AFracturedStaticMeshActor_execFractureEffectIsRelevant_Parms FractureEffectIsRelevant_Parms;
	FractureEffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	FractureEffectIsRelevant_Parms.EffectInstigator = EffectInstigator;

	this->ProcessEvent ( pFnFractureEffectIsRelevant, &FractureEffectIsRelevant_Parms, NULL );

	if ( bWantPhysChunksAndParticles )
		*bWantPhysChunksAndParticles = FractureEffectIsRelevant_Parms.bWantPhysChunksAndParticles;

	return FractureEffectIsRelevant_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  dmgType                        ( CPF_Parm )

bool AFracturedStaticMeshActor::IsFracturedByDamageType ( class UClass* dmgType )
{
	static UFunction* pFnIsFracturedByDamageType = NULL;

	if ( ! pFnIsFracturedByDamageType )
		pFnIsFracturedByDamageType = (UFunction*) UObject::GObjObjects()->Data[ 17497 ];

	AFracturedStaticMeshActor_execIsFracturedByDamageType_Parms IsFracturedByDamageType_Parms;
	IsFracturedByDamageType_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnIsFracturedByDamageType, &IsFracturedByDamageType_Parms, NULL );

	return IsFracturedByDamageType_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.SpawnDeferredParts
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AFracturedStaticMeshActor::eventSpawnDeferredParts ( )
{
	static UFunction* pFnSpawnDeferredParts = NULL;

	if ( ! pFnSpawnDeferredParts )
		pFnSpawnDeferredParts = (UFunction*) UObject::GObjObjects()->Data[ 20854 ];

	AFracturedStaticMeshActor_eventSpawnDeferredParts_Parms SpawnDeferredParts_Parms;

	pFnSpawnDeferredParts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnDeferredParts, &SpawnDeferredParts_Parms, NULL );

	pFnSpawnDeferredParts->FunctionFlags |= 0x400;

	return SpawnDeferredParts_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands
// [0x00420D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// TArray< int >                  IgnoreFrags                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector                 ChunkDir                       ( CPF_Parm )
// TArray< class AFracturedStaticMeshPart* > DisableCollWithPart            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWantPhysChunks                ( CPF_Parm )
// TArray< unsigned char >        FragmentVis                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AFracturedStaticMeshActor::eventBreakOffIsolatedIslands ( TArray< int > IgnoreFrags, struct FVector ChunkDir, TArray< class AFracturedStaticMeshPart* > DisableCollWithPart, unsigned long bWantPhysChunks, TArray< unsigned char >* FragmentVis )
{
	static UFunction* pFnBreakOffIsolatedIslands = NULL;

	if ( ! pFnBreakOffIsolatedIslands )
		pFnBreakOffIsolatedIslands = (UFunction*) UObject::GObjObjects()->Data[ 20845 ];

	AFracturedStaticMeshActor_eventBreakOffIsolatedIslands_Parms BreakOffIsolatedIslands_Parms;
	memcpy ( &BreakOffIsolatedIslands_Parms.IgnoreFrags, &IgnoreFrags, 0xC );
	memcpy ( &BreakOffIsolatedIslands_Parms.ChunkDir, &ChunkDir, 0xC );
	memcpy ( &BreakOffIsolatedIslands_Parms.DisableCollWithPart, &DisableCollWithPart, 0xC );
	BreakOffIsolatedIslands_Parms.bWantPhysChunks = bWantPhysChunks;

	pFnBreakOffIsolatedIslands->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakOffIsolatedIslands, &BreakOffIsolatedIslands_Parms, NULL );

	pFnBreakOffIsolatedIslands->FunctionFlags |= 0x400;

	if ( FragmentVis )
		memcpy ( FragmentVis, &BreakOffIsolatedIslands_Parms.FragmentVis, 0xC );
};

// Function Engine.FracturedStaticMeshActor.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AFracturedStaticMeshActor_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AFracturedStaticMeshActor::ApplyCheckpointRecord ( struct AFracturedStaticMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 20843 ];

	AFracturedStaticMeshActor_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x10 );
};

// Function Engine.FracturedStaticMeshActor.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AFracturedStaticMeshActor_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AFracturedStaticMeshActor::CreateCheckpointRecord ( struct AFracturedStaticMeshActor_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 20841 ];

	AFracturedStaticMeshActor_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x10 );
};

// Function Engine.FracturedStaticMeshActor.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AFracturedStaticMeshActor::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 20839 ];

	AFracturedStaticMeshActor_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.ResetHealth
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AFracturedStaticMeshActor::ResetHealth ( )
{
	static UFunction* pFnResetHealth = NULL;

	if ( ! pFnResetHealth )
		pFnResetHealth = (UFunction*) UObject::GObjObjects()->Data[ 20836 ];

	AFracturedStaticMeshActor_execResetHealth_Parms ResetHealth_Parms;

	pFnResetHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetHealth, &ResetHealth_Parms, NULL );

	pFnResetHealth->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 20834 ];

	AFracturedStaticMeshActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.FracturedStaticMeshActor.SpawnPartMulti
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< int >                  ChunkIndices                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector                 InitialVel                     ( CPF_Parm )
// struct FVector                 InitialAngVel                  ( CPF_Parm )
// float                          RelativeScale                  ( CPF_Parm )
// unsigned long                  bExplosion                     ( CPF_Parm )

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPartMulti ( TArray< int > ChunkIndices, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion )
{
	static UFunction* pFnSpawnPartMulti = NULL;

	if ( ! pFnSpawnPartMulti )
		pFnSpawnPartMulti = (UFunction*) UObject::GObjObjects()->Data[ 20826 ];

	AFracturedStaticMeshActor_execSpawnPartMulti_Parms SpawnPartMulti_Parms;
	memcpy ( &SpawnPartMulti_Parms.ChunkIndices, &ChunkIndices, 0xC );
	memcpy ( &SpawnPartMulti_Parms.InitialVel, &InitialVel, 0xC );
	memcpy ( &SpawnPartMulti_Parms.InitialAngVel, &InitialAngVel, 0xC );
	SpawnPartMulti_Parms.RelativeScale = RelativeScale;
	SpawnPartMulti_Parms.bExplosion = bExplosion;

	pFnSpawnPartMulti->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPartMulti, &SpawnPartMulti_Parms, NULL );

	pFnSpawnPartMulti->FunctionFlags |= 0x400;

	return SpawnPartMulti_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshActor.SpawnPart
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ChunkIndex                     ( CPF_Parm )
// struct FVector                 InitialVel                     ( CPF_Parm )
// struct FVector                 InitialAngVel                  ( CPF_Parm )
// float                          RelativeScale                  ( CPF_Parm )
// unsigned long                  bExplosion                     ( CPF_Parm )

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPart ( int ChunkIndex, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion )
{
	static UFunction* pFnSpawnPart = NULL;

	if ( ! pFnSpawnPart )
		pFnSpawnPart = (UFunction*) UObject::GObjObjects()->Data[ 20819 ];

	AFracturedStaticMeshActor_execSpawnPart_Parms SpawnPart_Parms;
	SpawnPart_Parms.ChunkIndex = ChunkIndex;
	memcpy ( &SpawnPart_Parms.InitialVel, &InitialVel, 0xC );
	memcpy ( &SpawnPart_Parms.InitialAngVel, &InitialAngVel, 0xC );
	SpawnPart_Parms.RelativeScale = RelativeScale;
	SpawnPart_Parms.bExplosion = bExplosion;

	pFnSpawnPart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPart, &SpawnPart_Parms, NULL );

	pFnSpawnPart->FunctionFlags |= 0x400;

	return SpawnPart_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// float                          RBStrength                     ( CPF_Parm )
// unsigned long                  bWantPhysChunksAndParticles    ( CPF_Parm )

void AFracturedStaticMeshPart::eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles )
{
	static UFunction* pFnBreakOffPartsInRadius = NULL;

	if ( ! pFnBreakOffPartsInRadius )
		pFnBreakOffPartsInRadius = (UFunction*) UObject::GObjObjects()->Data[ 20974 ];

	AFracturedStaticMeshPart_eventBreakOffPartsInRadius_Parms BreakOffPartsInRadius_Parms;
	memcpy ( &BreakOffPartsInRadius_Parms.Origin, &Origin, 0xC );
	BreakOffPartsInRadius_Parms.Radius = Radius;
	BreakOffPartsInRadius_Parms.RBStrength = RBStrength;
	BreakOffPartsInRadius_Parms.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	this->ProcessEvent ( pFnBreakOffPartsInRadius, &BreakOffPartsInRadius_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.Explode
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFracturedStaticMeshPart::eventExplode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 20973 ];

	AFracturedStaticMeshPart_eventExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AFracturedStaticMeshPart::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 20971 ];

	AFracturedStaticMeshPart_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.TryToCleanUp
// [0x00020102] 
// Parameters infos:

void AFracturedStaticMeshPart::TryToCleanUp ( )
{
	static UFunction* pFnTryToCleanUp = NULL;

	if ( ! pFnTryToCleanUp )
		pFnTryToCleanUp = (UFunction*) UObject::GObjObjects()->Data[ 20970 ];

	AFracturedStaticMeshPart_execTryToCleanUp_Parms TryToCleanUp_Parms;

	this->ProcessEvent ( pFnTryToCleanUp, &TryToCleanUp_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AFracturedStaticMeshPart::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 20962 ];

	AFracturedStaticMeshPart_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FracturedStaticMeshPart.RecyclePart
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAddToFreePool                 ( CPF_Parm )

void AFracturedStaticMeshPart::RecyclePart ( unsigned long bAddToFreePool )
{
	static UFunction* pFnRecyclePart = NULL;

	if ( ! pFnRecyclePart )
		pFnRecyclePart = (UFunction*) UObject::GObjObjects()->Data[ 20960 ];

	AFracturedStaticMeshPart_execRecyclePart_Parms RecyclePart_Parms;
	RecyclePart_Parms.bAddToFreePool = bAddToFreePool;

	pFnRecyclePart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecyclePart, &RecyclePart_Parms, NULL );

	pFnRecyclePart->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshPart.Initialize
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AFracturedStaticMeshPart::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 20959 ];

	AFracturedStaticMeshPart_execInitialize_Parms Initialize_Parms;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function Engine.FractureManager.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void AFractureManager::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 21023 ];

	AFractureManager_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.FractureManager.ReturnPartActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AFracturedStaticMeshPart* Part                           ( CPF_Parm )

void AFractureManager::eventReturnPartActor ( class AFracturedStaticMeshPart* Part )
{
	static UFunction* pFnReturnPartActor = NULL;

	if ( ! pFnReturnPartActor )
		pFnReturnPartActor = (UFunction*) UObject::GObjObjects()->Data[ 21021 ];

	AFractureManager_eventReturnPartActor_Parms ReturnPartActor_Parms;
	ReturnPartActor_Parms.Part = Part;

	this->ProcessEvent ( pFnReturnPartActor, &ReturnPartActor_Parms, NULL );
};

// Function Engine.FractureManager.SpawnPartActor
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AFracturedStaticMeshActor* Parent                         ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class AFracturedStaticMeshPart* AFractureManager::eventSpawnPartActor ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnSpawnPartActor = NULL;

	if ( ! pFnSpawnPartActor )
		pFnSpawnPartActor = (UFunction*) UObject::GObjObjects()->Data[ 21015 ];

	AFractureManager_eventSpawnPartActor_Parms SpawnPartActor_Parms;
	SpawnPartActor_Parms.Parent = Parent;
	memcpy ( &SpawnPartActor_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &SpawnPartActor_Parms.SpawnRotation, &SpawnRotation, 0xC );

	this->ProcessEvent ( pFnSpawnPartActor, &SpawnPartActor_Parms, NULL );

	return SpawnPartActor_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetFSMPart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AFracturedStaticMeshPart* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AFracturedStaticMeshActor* Parent                         ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class AFracturedStaticMeshPart* AFractureManager::GetFSMPart ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnGetFSMPart = NULL;

	if ( ! pFnGetFSMPart )
		pFnGetFSMPart = (UFunction*) UObject::GObjObjects()->Data[ 21010 ];

	AFractureManager_execGetFSMPart_Parms GetFSMPart_Parms;
	GetFSMPart_Parms.Parent = Parent;
	memcpy ( &GetFSMPart_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &GetFSMPart_Parms.SpawnRotation, &SpawnRotation, 0xC );

	pFnGetFSMPart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMPart, &GetFSMPart_Parms, NULL );

	pFnGetFSMPart->FunctionFlags |= 0x400;

	return GetFSMPart_Parms.ReturnValue;
};

// Function Engine.FractureManager.ResetPoolVisibility
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AFractureManager::ResetPoolVisibility ( )
{
	static UFunction* pFnResetPoolVisibility = NULL;

	if ( ! pFnResetPoolVisibility )
		pFnResetPoolVisibility = (UFunction*) UObject::GObjObjects()->Data[ 21009 ];

	AFractureManager_execResetPoolVisibility_Parms ResetPoolVisibility_Parms;

	pFnResetPoolVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPoolVisibility, &ResetPoolVisibility_Parms, NULL );

	pFnResetPoolVisibility->FunctionFlags |= 0x400;
};

// Function Engine.FractureManager.CreateFSMParts
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AFractureManager::CreateFSMParts ( )
{
	static UFunction* pFnCreateFSMParts = NULL;

	if ( ! pFnCreateFSMParts )
		pFnCreateFSMParts = (UFunction*) UObject::GObjObjects()->Data[ 21008 ];

	AFractureManager_execCreateFSMParts_Parms CreateFSMParts_Parms;

	pFnCreateFSMParts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateFSMParts, &CreateFSMParts_Parms, NULL );

	pFnCreateFSMParts->FunctionFlags |= 0x400;
};

// Function Engine.FractureManager.CleanUpFSMParts
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AFractureManager::CleanUpFSMParts ( )
{
	static UFunction* pFnCleanUpFSMParts = NULL;

	if ( ! pFnCleanUpFSMParts )
		pFnCleanUpFSMParts = (UFunction*) UObject::GObjObjects()->Data[ 21006 ];

	AFractureManager_execCleanUpFSMParts_Parms CleanUpFSMParts_Parms;

	this->ProcessEvent ( pFnCleanUpFSMParts, &CleanUpFSMParts_Parms, NULL );
};

// Function Engine.FractureManager.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFractureManager::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 21005 ];

	AFractureManager_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.FractureManager.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AFractureManager::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 21004 ];

	AFractureManager_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.FractureManager.GetFSMFractureCullDistanceScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetFSMFractureCullDistanceScale ( )
{
	static UFunction* pFnGetFSMFractureCullDistanceScale = NULL;

	if ( ! pFnGetFSMFractureCullDistanceScale )
		pFnGetFSMFractureCullDistanceScale = (UFunction*) UObject::GObjObjects()->Data[ 20868 ];

	AFractureManager_execGetFSMFractureCullDistanceScale_Parms GetFSMFractureCullDistanceScale_Parms;

	pFnGetFSMFractureCullDistanceScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMFractureCullDistanceScale, &GetFSMFractureCullDistanceScale_Parms, NULL );

	pFnGetFSMFractureCullDistanceScale->FunctionFlags |= 0x400;

	return GetFSMFractureCullDistanceScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetFSMRadialSpawnChanceScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetFSMRadialSpawnChanceScale ( )
{
	static UFunction* pFnGetFSMRadialSpawnChanceScale = NULL;

	if ( ! pFnGetFSMRadialSpawnChanceScale )
		pFnGetFSMRadialSpawnChanceScale = (UFunction*) UObject::GObjObjects()->Data[ 21002 ];

	AFractureManager_execGetFSMRadialSpawnChanceScale_Parms GetFSMRadialSpawnChanceScale_Parms;

	pFnGetFSMRadialSpawnChanceScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMRadialSpawnChanceScale, &GetFSMRadialSpawnChanceScale_Parms, NULL );

	pFnGetFSMRadialSpawnChanceScale->FunctionFlags |= 0x400;

	return GetFSMRadialSpawnChanceScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetFSMDirectSpawnChanceScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetFSMDirectSpawnChanceScale ( )
{
	static UFunction* pFnGetFSMDirectSpawnChanceScale = NULL;

	if ( ! pFnGetFSMDirectSpawnChanceScale )
		pFnGetFSMDirectSpawnChanceScale = (UFunction*) UObject::GObjObjects()->Data[ 20900 ];

	AFractureManager_execGetFSMDirectSpawnChanceScale_Parms GetFSMDirectSpawnChanceScale_Parms;

	pFnGetFSMDirectSpawnChanceScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFSMDirectSpawnChanceScale, &GetFSMDirectSpawnChanceScale_Parms, NULL );

	pFnGetFSMDirectSpawnChanceScale->FunctionFlags |= 0x400;

	return GetFSMDirectSpawnChanceScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.GetNumFSMPartsScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AFractureManager::GetNumFSMPartsScale ( )
{
	static UFunction* pFnGetNumFSMPartsScale = NULL;

	if ( ! pFnGetNumFSMPartsScale )
		pFnGetNumFSMPartsScale = (UFunction*) UObject::GObjObjects()->Data[ 21000 ];

	AFractureManager_execGetNumFSMPartsScale_Parms GetNumFSMPartsScale_Parms;

	pFnGetNumFSMPartsScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumFSMPartsScale, &GetNumFSMPartsScale_Parms, NULL );

	pFnGetNumFSMPartsScale->FunctionFlags |= 0x400;

	return GetNumFSMPartsScale_Parms.ReturnValue;
};

// Function Engine.FractureManager.SpawnChunkDestroyEffect
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         Effect                         ( CPF_Parm )
// struct FBox                    ChunkBox                       ( CPF_Parm )
// struct FVector                 ChunkDir                       ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void AFractureManager::eventSpawnChunkDestroyEffect ( class UParticleSystem* Effect, struct FBox ChunkBox, struct FVector ChunkDir, float Scale )
{
	static UFunction* pFnSpawnChunkDestroyEffect = NULL;

	if ( ! pFnSpawnChunkDestroyEffect )
		pFnSpawnChunkDestroyEffect = (UFunction*) UObject::GObjObjects()->Data[ 20993 ];

	AFractureManager_eventSpawnChunkDestroyEffect_Parms SpawnChunkDestroyEffect_Parms;
	SpawnChunkDestroyEffect_Parms.Effect = Effect;
	memcpy ( &SpawnChunkDestroyEffect_Parms.ChunkBox, &ChunkBox, 0x1C );
	memcpy ( &SpawnChunkDestroyEffect_Parms.ChunkDir, &ChunkDir, 0xC );
	SpawnChunkDestroyEffect_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSpawnChunkDestroyEffect, &SpawnChunkDestroyEffect_Parms, NULL );
};

// Function Engine.ImageReflection.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AImageReflection::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 23100 ];

	AImageReflection_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.ImageReflection.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AImageReflection::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 23098 ];

	AImageReflection_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.ImageReflection.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AImageReflection::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23097 ];

	AImageReflection_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.ImageReflectionShadowPlane.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AImageReflectionShadowPlane::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 23116 ];

	AImageReflectionShadowPlane_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.ImageReflectionShadowPlane.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AImageReflectionShadowPlane::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 23114 ];

	AImageReflectionShadowPlane_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.ImageReflectionShadowPlane.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AImageReflectionShadowPlane::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 23113 ];

	AImageReflectionShadowPlane_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UImageReflectionShadowPlaneComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 23109 ];

	UImageReflectionShadowPlaneComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.FracturedBaseComponent.GetNumVisibleFragments
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UFracturedBaseComponent::GetNumVisibleFragments ( )
{
	static UFunction* pFnGetNumVisibleFragments = NULL;

	if ( ! pFnGetNumVisibleFragments )
		pFnGetNumVisibleFragments = (UFunction*) UObject::GObjObjects()->Data[ 20298 ];

	UFracturedBaseComponent_execGetNumVisibleFragments_Parms GetNumVisibleFragments_Parms;

	pFnGetNumVisibleFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumVisibleFragments, &GetNumVisibleFragments_Parms, NULL );

	pFnGetNumVisibleFragments->FunctionFlags |= 0x400;

	return GetNumVisibleFragments_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.GetNumFragments
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UFracturedBaseComponent::GetNumFragments ( )
{
	static UFunction* pFnGetNumFragments = NULL;

	if ( ! pFnGetNumFragments )
		pFnGetNumFragments = (UFunction*) UObject::GObjObjects()->Data[ 20296 ];

	UFracturedBaseComponent_execGetNumFragments_Parms GetNumFragments_Parms;

	pFnGetNumFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumFragments, &GetNumFragments_Parms, NULL );

	pFnGetNumFragments->FunctionFlags |= 0x400;

	return GetNumFragments_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.IsFragmentVisible
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedBaseComponent::IsFragmentVisible ( int FragmentIndex )
{
	static UFunction* pFnIsFragmentVisible = NULL;

	if ( ! pFnIsFragmentVisible )
		pFnIsFragmentVisible = (UFunction*) UObject::GObjObjects()->Data[ 20293 ];

	UFracturedBaseComponent_execIsFragmentVisible_Parms IsFragmentVisible_Parms;
	IsFragmentVisible_Parms.FragmentIndex = FragmentIndex;

	pFnIsFragmentVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFragmentVisible, &IsFragmentVisible_Parms, NULL );

	pFnIsFragmentVisible->FunctionFlags |= 0x400;

	return IsFragmentVisible_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.GetVisibleFragments
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< unsigned char > UFracturedBaseComponent::GetVisibleFragments ( )
{
	static UFunction* pFnGetVisibleFragments = NULL;

	if ( ! pFnGetVisibleFragments )
		pFnGetVisibleFragments = (UFunction*) UObject::GObjObjects()->Data[ 20290 ];

	UFracturedBaseComponent_execGetVisibleFragments_Parms GetVisibleFragments_Parms;

	pFnGetVisibleFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVisibleFragments, &GetVisibleFragments_Parms, NULL );

	pFnGetVisibleFragments->FunctionFlags |= 0x400;

	return GetVisibleFragments_Parms.ReturnValue;
};

// Function Engine.FracturedBaseComponent.SetStaticMesh
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             NewMesh                        ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

bool UFracturedBaseComponent::SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce )
{
	static UFunction* pFnSetStaticMesh = NULL;

	if ( ! pFnSetStaticMesh )
		pFnSetStaticMesh = (UFunction*) UObject::GObjObjects()->Data[ 20286 ];

	UFracturedBaseComponent_execSetStaticMesh_Parms SetStaticMesh_Parms;
	SetStaticMesh_Parms.NewMesh = NewMesh;
	SetStaticMesh_Parms.bForce = bForce;

	pFnSetStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStaticMesh, &SetStaticMesh_Parms, NULL );

	pFnSetStaticMesh->FunctionFlags |= 0x400;

	return SetStaticMesh_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* UFracturedStaticMeshComponent::GetFracturedMeshPhysMaterial ( )
{
	static UFunction* pFnGetFracturedMeshPhysMaterial = NULL;

	if ( ! pFnGetFracturedMeshPhysMaterial )
		pFnGetFracturedMeshPhysMaterial = (UFunction*) UObject::GObjObjects()->Data[ 20355 ];

	UFracturedStaticMeshComponent_execGetFracturedMeshPhysMaterial_Parms GetFracturedMeshPhysMaterial_Parms;

	pFnGetFracturedMeshPhysMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFracturedMeshPhysMaterial, &GetFracturedMeshPhysMaterial_Parms, NULL );

	pFnGetFracturedMeshPhysMaterial->FunctionFlags |= 0x400;

	return GetFracturedMeshPhysMaterial_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.RecreatePhysState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UFracturedStaticMeshComponent::RecreatePhysState ( )
{
	static UFunction* pFnRecreatePhysState = NULL;

	if ( ! pFnRecreatePhysState )
		pFnRecreatePhysState = (UFunction*) UObject::GObjObjects()->Data[ 20354 ];

	UFracturedStaticMeshComponent_execRecreatePhysState_Parms RecreatePhysState_Parms;

	pFnRecreatePhysState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecreatePhysState, &RecreatePhysState_Parms, NULL );

	pFnRecreatePhysState->FunctionFlags |= 0x400;
};

// Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< int >                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// TArray< int >                  AdditionalVisibleFragments     ( CPF_Parm | CPF_NeedCtorLink )

TArray< int > UFracturedStaticMeshComponent::GetBoundaryHiddenFragments ( TArray< int > AdditionalVisibleFragments )
{
	static UFunction* pFnGetBoundaryHiddenFragments = NULL;

	if ( ! pFnGetBoundaryHiddenFragments )
		pFnGetBoundaryHiddenFragments = (UFunction*) UObject::GObjObjects()->Data[ 20349 ];

	UFracturedStaticMeshComponent_execGetBoundaryHiddenFragments_Parms GetBoundaryHiddenFragments_Parms;
	memcpy ( &GetBoundaryHiddenFragments_Parms.AdditionalVisibleFragments, &AdditionalVisibleFragments, 0xC );

	pFnGetBoundaryHiddenFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundaryHiddenFragments, &GetBoundaryHiddenFragments_Parms, NULL );

	pFnGetBoundaryHiddenFragments->FunctionFlags |= 0x400;

	return GetBoundaryHiddenFragments_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFragmentGroups
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FFragmentGroup > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// TArray< int >                  IgnoreFragments                ( CPF_Parm | CPF_NeedCtorLink )
// float                          MinConnectionArea              ( CPF_Parm )

TArray< struct FFragmentGroup > UFracturedStaticMeshComponent::GetFragmentGroups ( TArray< int > IgnoreFragments, float MinConnectionArea )
{
	static UFunction* pFnGetFragmentGroups = NULL;

	if ( ! pFnGetFragmentGroups )
		pFnGetFragmentGroups = (UFunction*) UObject::GObjObjects()->Data[ 20343 ];

	UFracturedStaticMeshComponent_execGetFragmentGroups_Parms GetFragmentGroups_Parms;
	memcpy ( &GetFragmentGroups_Parms.IgnoreFragments, &IgnoreFragments, 0xC );
	GetFragmentGroups_Parms.MinConnectionArea = MinConnectionArea;

	pFnGetFragmentGroups->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFragmentGroups, &GetFragmentGroups_Parms, NULL );

	pFnGetFragmentGroups->FunctionFlags |= 0x400;

	return GetFragmentGroups_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UFracturedStaticMeshComponent::GetCoreFragmentIndex ( )
{
	static UFunction* pFnGetCoreFragmentIndex = NULL;

	if ( ! pFnGetCoreFragmentIndex )
		pFnGetCoreFragmentIndex = (UFunction*) UObject::GObjObjects()->Data[ 20341 ];

	UFracturedStaticMeshComponent_execGetCoreFragmentIndex_Parms GetCoreFragmentIndex_Parms;

	pFnGetCoreFragmentIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCoreFragmentIndex, &GetCoreFragmentIndex_Parms, NULL );

	pFnGetCoreFragmentIndex->FunctionFlags |= 0x400;

	return GetCoreFragmentIndex_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

struct FVector UFracturedStaticMeshComponent::GetFragmentAverageExteriorNormal ( int FragmentIndex )
{
	static UFunction* pFnGetFragmentAverageExteriorNormal = NULL;

	if ( ! pFnGetFragmentAverageExteriorNormal )
		pFnGetFragmentAverageExteriorNormal = (UFunction*) UObject::GObjObjects()->Data[ 20338 ];

	UFracturedStaticMeshComponent_execGetFragmentAverageExteriorNormal_Parms GetFragmentAverageExteriorNormal_Parms;
	GetFragmentAverageExteriorNormal_Parms.FragmentIndex = FragmentIndex;

	pFnGetFragmentAverageExteriorNormal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFragmentAverageExteriorNormal, &GetFragmentAverageExteriorNormal_Parms, NULL );

	pFnGetFragmentAverageExteriorNormal->FunctionFlags |= 0x400;

	return GetFragmentAverageExteriorNormal_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.GetFragmentBox
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBox                    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

struct FBox UFracturedStaticMeshComponent::GetFragmentBox ( int FragmentIndex )
{
	static UFunction* pFnGetFragmentBox = NULL;

	if ( ! pFnGetFragmentBox )
		pFnGetFragmentBox = (UFunction*) UObject::GObjObjects()->Data[ 20335 ];

	UFracturedStaticMeshComponent_execGetFragmentBox_Parms GetFragmentBox_Parms;
	GetFragmentBox_Parms.FragmentIndex = FragmentIndex;

	pFnGetFragmentBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFragmentBox, &GetFragmentBox_Parms, NULL );

	pFnGetFragmentBox->FunctionFlags |= 0x400;

	return GetFragmentBox_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedStaticMeshComponent::IsNoPhysFragment ( int FragmentIndex )
{
	static UFunction* pFnIsNoPhysFragment = NULL;

	if ( ! pFnIsNoPhysFragment )
		pFnIsNoPhysFragment = (UFunction*) UObject::GObjObjects()->Data[ 20332 ];

	UFracturedStaticMeshComponent_execIsNoPhysFragment_Parms IsNoPhysFragment_Parms;
	IsNoPhysFragment_Parms.FragmentIndex = FragmentIndex;

	pFnIsNoPhysFragment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsNoPhysFragment, &IsNoPhysFragment_Parms, NULL );

	pFnIsNoPhysFragment->FunctionFlags |= 0x400;

	return IsNoPhysFragment_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.IsRootFragment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedStaticMeshComponent::IsRootFragment ( int FragmentIndex )
{
	static UFunction* pFnIsRootFragment = NULL;

	if ( ! pFnIsRootFragment )
		pFnIsRootFragment = (UFunction*) UObject::GObjObjects()->Data[ 20329 ];

	UFracturedStaticMeshComponent_execIsRootFragment_Parms IsRootFragment_Parms;
	IsRootFragment_Parms.FragmentIndex = FragmentIndex;

	pFnIsRootFragment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsRootFragment, &IsRootFragment_Parms, NULL );

	pFnIsRootFragment->FunctionFlags |= 0x400;

	return IsRootFragment_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            FragmentIndex                  ( CPF_Parm )

bool UFracturedStaticMeshComponent::IsFragmentDestroyable ( int FragmentIndex )
{
	static UFunction* pFnIsFragmentDestroyable = NULL;

	if ( ! pFnIsFragmentDestroyable )
		pFnIsFragmentDestroyable = (UFunction*) UObject::GObjObjects()->Data[ 20326 ];

	UFracturedStaticMeshComponent_execIsFragmentDestroyable_Parms IsFragmentDestroyable_Parms;
	IsFragmentDestroyable_Parms.FragmentIndex = FragmentIndex;

	pFnIsFragmentDestroyable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFragmentDestroyable, &IsFragmentDestroyable_Parms, NULL );

	pFnIsFragmentDestroyable->FunctionFlags |= 0x400;

	return IsFragmentDestroyable_Parms.ReturnValue;
};

// Function Engine.FracturedStaticMeshComponent.SetVisibleFragments
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        VisibilityFactors              ( CPF_Parm | CPF_NeedCtorLink )

void UFracturedStaticMeshComponent::SetVisibleFragments ( TArray< unsigned char > VisibilityFactors )
{
	static UFunction* pFnSetVisibleFragments = NULL;

	if ( ! pFnSetVisibleFragments )
		pFnSetVisibleFragments = (UFunction*) UObject::GObjObjects()->Data[ 20323 ];

	UFracturedStaticMeshComponent_execSetVisibleFragments_Parms SetVisibleFragments_Parms;
	memcpy ( &SetVisibleFragments_Parms.VisibilityFactors, &VisibilityFactors, 0xC );

	pFnSetVisibleFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisibleFragments, &SetVisibleFragments_Parms, NULL );

	pFnSetVisibleFragments->FunctionFlags |= 0x400;
};

// Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor
// [0x00020002] 
// Parameters infos:

void UImageBasedReflectionComponent::OnUpdatePropertyReflectionColor ( )
{
	static UFunction* pFnOnUpdatePropertyReflectionColor = NULL;

	if ( ! pFnOnUpdatePropertyReflectionColor )
		pFnOnUpdatePropertyReflectionColor = (UFunction*) UObject::GObjObjects()->Data[ 23093 ];

	UImageBasedReflectionComponent_execOnUpdatePropertyReflectionColor_Parms OnUpdatePropertyReflectionColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyReflectionColor, &OnUpdatePropertyReflectionColor_Parms, NULL );
};

// Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UImageBasedReflectionComponent::UpdateImageReflectionParameters ( )
{
	static UFunction* pFnUpdateImageReflectionParameters = NULL;

	if ( ! pFnUpdateImageReflectionParameters )
		pFnUpdateImageReflectionParameters = (UFunction*) UObject::GObjObjects()->Data[ 23092 ];

	UImageBasedReflectionComponent_execUpdateImageReflectionParameters_Parms UpdateImageReflectionParameters_Parms;

	pFnUpdateImageReflectionParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateImageReflectionParameters, &UpdateImageReflectionParameters_Parms, NULL );

	pFnUpdateImageReflectionParameters->FunctionFlags |= 0x400;
};

// Function Engine.ImageBasedReflectionComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void UImageBasedReflectionComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 23090 ];

	UImageBasedReflectionComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.IsInMapOrTransientPackage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMaterialInstance::IsInMapOrTransientPackage ( )
{
	static UFunction* pFnIsInMapOrTransientPackage = NULL;

	if ( ! pFnIsInMapOrTransientPackage )
		pFnIsInMapOrTransientPackage = (UFunction*) UObject::GObjObjects()->Data[ 24489 ];

	UMaterialInstance_execIsInMapOrTransientPackage_Parms IsInMapOrTransientPackage_Parms;

	pFnIsInMapOrTransientPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInMapOrTransientPackage, &IsInMapOrTransientPackage_Parms, NULL );

	pFnIsInMapOrTransientPackage->FunctionFlags |= 0x400;

	return IsInMapOrTransientPackage_Parms.ReturnValue;
};

// Function Engine.MaterialInstance.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstance::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 24488 ];

	UMaterialInstance_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstance::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24484 ];

	UMaterialInstance_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.GetTextureParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm | CPF_OutParm )

bool UMaterialInstance::GetTextureParameterValue ( struct FName ParameterName, class UTexture** Value )
{
	static UFunction* pFnGetTextureParameterValue = NULL;

	if ( ! pFnGetTextureParameterValue )
		pFnGetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24480 ];

	UMaterialInstance_execGetTextureParameterValue_Parms GetTextureParameterValue_Parms;
	memcpy ( &GetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTextureParameterValue, &GetTextureParameterValue_Parms, NULL );

	pFnGetTextureParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		*Value = GetTextureParameterValue_Parms.Value;

	return GetTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInstance.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstance::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24477 ];

	UMaterialInstance_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstance::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24474 ];

	UMaterialInstance_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetScalarCurveParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstance.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstance::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24471 ];

	UMaterialInstance_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstance::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24468 ];

	UMaterialInstance_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstance.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstance::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 24466 ];

	UMaterialInstance_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// class AActor*                  Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetActorParameter ( struct FName Key, class AActor* Value )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24545 ];

	UMaterialInstanceConstant_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.Key, &Key, 0x8 );
	SetActorParameter_Parms.Value = Value;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetLinearColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetLinearColorParameter ( struct FName Key, struct FLinearColor Value )
{
	static UFunction* pFnSetLinearColorParameter = NULL;

	if ( ! pFnSetLinearColorParameter )
		pFnSetLinearColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24546 ];

	UMaterialInstanceConstant_execSetLinearColorParameter_Parms SetLinearColorParameter_Parms;
	memcpy ( &SetLinearColorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetLinearColorParameter_Parms.Value, &Value, 0x10 );

	pFnSetLinearColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorParameter, &SetLinearColorParameter_Parms, NULL );

	pFnSetLinearColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FVector                 V                              ( CPF_Parm )

void UMaterialInstanceConstant::SetVectorParameter ( struct FName Key, struct FVector V )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24549 ];

	UMaterialInstanceConstant_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetVectorParameter_Parms.V, &V, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetFloatParameter ( struct FName Key, float Value )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 24552 ];

	UMaterialInstanceConstant_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.Key, &Key, 0x8 );
	SetFloatParameter_Parms.Value = Value;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetNameParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FName                   Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetNameParameter ( struct FName Key, struct FName Value )
{
	static UFunction* pFnSetNameParameter = NULL;

	if ( ! pFnSetNameParameter )
		pFnSetNameParameter = (UFunction*) UObject::GObjObjects()->Data[ 24555 ];

	UMaterialInstanceConstant_execSetNameParameter_Parms SetNameParameter_Parms;
	memcpy ( &SetNameParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetNameParameter_Parms.Value, &Value, 0x8 );

	pFnSetNameParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameParameter, &SetNameParameter_Parms, NULL );

	pFnSetNameParameter->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceConstant::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 24544 ];

	UMaterialInstanceConstant_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.GetMobileVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInstanceConstant::GetMobileVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue )
{
	static UFunction* pFnGetMobileVectorParameterValue = NULL;

	if ( ! pFnGetMobileVectorParameterValue )
		pFnGetMobileVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24540 ];

	UMaterialInstanceConstant_execGetMobileVectorParameterValue_Parms GetMobileVectorParameterValue_Parms;
	memcpy ( &GetMobileVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMobileVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMobileVectorParameterValue, &GetMobileVectorParameterValue_Parms, NULL );

	pFnGetMobileVectorParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		memcpy ( OutValue, &GetMobileVectorParameterValue_Parms.OutValue, 0x10 );

	return GetMobileVectorParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInstanceConstant.GetMobileTextureParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInstanceConstant::GetMobileTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue )
{
	static UFunction* pFnGetMobileTextureParameterValue = NULL;

	if ( ! pFnGetMobileTextureParameterValue )
		pFnGetMobileTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24536 ];

	UMaterialInstanceConstant_execGetMobileTextureParameterValue_Parms GetMobileTextureParameterValue_Parms;
	memcpy ( &GetMobileTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMobileTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMobileTextureParameterValue, &GetMobileTextureParameterValue_Parms, NULL );

	pFnGetMobileTextureParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetMobileTextureParameterValue_Parms.OutValue;

	return GetMobileTextureParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInstanceConstant.GetMobileScalarParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          OutValue                       ( CPF_Parm | CPF_OutParm )

bool UMaterialInstanceConstant::GetMobileScalarParameterValue ( struct FName ParameterName, float* OutValue )
{
	static UFunction* pFnGetMobileScalarParameterValue = NULL;

	if ( ! pFnGetMobileScalarParameterValue )
		pFnGetMobileScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24532 ];

	UMaterialInstanceConstant_execGetMobileScalarParameterValue_Parms GetMobileScalarParameterValue_Parms;
	memcpy ( &GetMobileScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMobileScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMobileScalarParameterValue, &GetMobileScalarParameterValue_Parms, NULL );

	pFnGetMobileScalarParameterValue->FunctionFlags |= 0x400;

	if ( OutValue )
		*OutValue = GetMobileScalarParameterValue_Parms.OutValue;

	return GetMobileScalarParameterValue_Parms.ReturnValue;
};

// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceConstant::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24528 ];

	UMaterialInstanceConstant_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24525 ];

	UMaterialInstanceConstant_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24522 ];

	UMaterialInstanceConstant_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceConstant::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 24519 ];

	UMaterialInstanceConstant_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceConstant.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceConstant::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 24517 ];

	UMaterialInstanceConstant_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.CheckForVectorParameterConflicts
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )

bool UMaterialInstanceTimeVarying::CheckForVectorParameterConflicts ( struct FName ParameterName )
{
	static UFunction* pFnCheckForVectorParameterConflicts = NULL;

	if ( ! pFnCheckForVectorParameterConflicts )
		pFnCheckForVectorParameterConflicts = (UFunction*) UObject::GObjObjects()->Data[ 25358 ];

	UMaterialInstanceTimeVarying_execCheckForVectorParameterConflicts_Parms CheckForVectorParameterConflicts_Parms;
	memcpy ( &CheckForVectorParameterConflicts_Parms.ParameterName, &ParameterName, 0x8 );

	pFnCheckForVectorParameterConflicts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForVectorParameterConflicts, &CheckForVectorParameterConflicts_Parms, NULL );

	pFnCheckForVectorParameterConflicts->FunctionFlags |= 0x400;

	return CheckForVectorParameterConflicts_Parms.ReturnValue;
};

// Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UMaterialInstanceTimeVarying::GetMaxDurationFromAllParameters ( )
{
	static UFunction* pFnGetMaxDurationFromAllParameters = NULL;

	if ( ! pFnGetMaxDurationFromAllParameters )
		pFnGetMaxDurationFromAllParameters = (UFunction*) UObject::GObjObjects()->Data[ 25356 ];

	UMaterialInstanceTimeVarying_execGetMaxDurationFromAllParameters_Parms GetMaxDurationFromAllParameters_Parms;

	pFnGetMaxDurationFromAllParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxDurationFromAllParameters, &GetMaxDurationFromAllParameters_Parms, NULL );

	pFnGetMaxDurationFromAllParameters->FunctionFlags |= 0x400;

	return GetMaxDurationFromAllParameters_Parms.ReturnValue;
};

// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMaterialInstanceTimeVarying::ClearParameterValues ( )
{
	static UFunction* pFnClearParameterValues = NULL;

	if ( ! pFnClearParameterValues )
		pFnClearParameterValues = (UFunction*) UObject::GObjObjects()->Data[ 25355 ];

	UMaterialInstanceTimeVarying_execClearParameterValues_Parms ClearParameterValues_Parms;

	pFnClearParameterValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameterValues, &ClearParameterValues_Parms, NULL );

	pFnClearParameterValues->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UFont*                   FontValue                      ( CPF_Parm )
// int                            FontPage                       ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage )
{
	static UFunction* pFnSetFontParameterValue = NULL;

	if ( ! pFnSetFontParameterValue )
		pFnSetFontParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25351 ];

	UMaterialInstanceTimeVarying_execSetFontParameterValue_Parms SetFontParameterValue_Parms;
	memcpy ( &SetFontParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetFontParameterValue_Parms.FontValue = FontValue;
	SetFontParameterValue_Parms.FontPage = FontPage;

	pFnSetFontParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontParameterValue, &SetFontParameterValue_Parms, NULL );

	pFnSetFontParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetVectorStartTime = NULL;

	if ( ! pFnSetVectorStartTime )
		pFnSetVectorStartTime = (UFunction*) UObject::GObjObjects()->Data[ 25348 ];

	UMaterialInstanceTimeVarying_execSetVectorStartTime_Parms SetVectorStartTime_Parms;
	memcpy ( &SetVectorStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetVectorStartTime_Parms.Value = Value;

	pFnSetVectorStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorStartTime, &SetVectorStartTime_Parms, NULL );

	pFnSetVectorStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetLinearColorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveLinearColor Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetLinearColorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveLinearColor* Value )
{
	static UFunction* pFnSetLinearColorCurveParameterValue = NULL;

	if ( ! pFnSetLinearColorCurveParameterValue )
		pFnSetLinearColorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25345 ];

	UMaterialInstanceTimeVarying_execSetLinearColorCurveParameterValue_Parms SetLinearColorCurveParameterValue_Parms;
	memcpy ( &SetLinearColorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetLinearColorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorCurveParameterValue, &SetLinearColorCurveParameterValue_Parms, NULL );

	pFnSetLinearColorCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetLinearColorCurveParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstanceTimeVarying.SetLinearColorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Const | CPF_Parm | CPF_OutParm )

void UMaterialInstanceTimeVarying::SetLinearColorParameterValue ( struct FName ParameterName, struct FLinearColor* Value )
{
	static UFunction* pFnSetLinearColorParameterValue = NULL;

	if ( ! pFnSetLinearColorParameterValue )
		pFnSetLinearColorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25342 ];

	UMaterialInstanceTimeVarying_execSetLinearColorParameterValue_Parms SetLinearColorParameterValue_Parms;
	memcpy ( &SetLinearColorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetLinearColorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorParameterValue, &SetLinearColorParameterValue_Parms, NULL );

	pFnSetLinearColorParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetLinearColorParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveVector      Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* Value )
{
	static UFunction* pFnSetVectorCurveParameterValue = NULL;

	if ( ! pFnSetVectorCurveParameterValue )
		pFnSetVectorCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25339 ];

	UMaterialInstanceTimeVarying_execSetVectorCurveParameterValue_Parms SetVectorCurveParameterValue_Parms;
	memcpy ( &SetVectorCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorCurveParameterValue, &SetVectorCurveParameterValue_Parms, NULL );

	pFnSetVectorCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetVectorCurveParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25336 ];

	UMaterialInstanceTimeVarying_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameterValue_Parms.Value, &Value, 0x10 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25333 ];

	UMaterialInstanceTimeVarying_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetDuration ( float Value )
{
	static UFunction* pFnSetDuration = NULL;

	if ( ! pFnSetDuration )
		pFnSetDuration = (UFunction*) UObject::GObjObjects()->Data[ 25331 ];

	UMaterialInstanceTimeVarying_execSetDuration_Parms SetDuration_Parms;
	SetDuration_Parms.Value = Value;

	pFnSetDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDuration, &SetDuration_Parms, NULL );

	pFnSetDuration->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarStartTime ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarStartTime = NULL;

	if ( ! pFnSetScalarStartTime )
		pFnSetScalarStartTime = (UFunction*) UObject::GObjObjects()->Data[ 25328 ];

	UMaterialInstanceTimeVarying_execSetScalarStartTime_Parms SetScalarStartTime_Parms;
	memcpy ( &SetScalarStartTime_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarStartTime_Parms.Value = Value;

	pFnSetScalarStartTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarStartTime, &SetScalarStartTime_Parms, NULL );

	pFnSetScalarStartTime->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FInterpCurveFloat       Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value )
{
	static UFunction* pFnSetScalarCurveParameterValue = NULL;

	if ( ! pFnSetScalarCurveParameterValue )
		pFnSetScalarCurveParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25325 ];

	UMaterialInstanceTimeVarying_execSetScalarCurveParameterValue_Parms SetScalarCurveParameterValue_Parms;
	memcpy ( &SetScalarCurveParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetScalarCurveParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarCurveParameterValue, &SetScalarCurveParameterValue_Parms, NULL );

	pFnSetScalarCurveParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetScalarCurveParameterValue_Parms.Value, 0x10 );
};

// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 25322 ];

	UMaterialInstanceTimeVarying_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function Engine.MaterialInstanceTimeVarying.SetParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      NewParent                      ( CPF_Parm )

void UMaterialInstanceTimeVarying::SetParent ( class UMaterialInterface* NewParent )
{
	static UFunction* pFnSetParent = NULL;

	if ( ! pFnSetParent )
		pFnSetParent = (UFunction*) UObject::GObjObjects()->Data[ 25320 ];

	UMaterialInstanceTimeVarying_execSetParent_Parms SetParent_Parms;
	SetParent_Parms.NewParent = NewParent;

	pFnSetParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParent, &SetParent_Parms, NULL );

	pFnSetParent->FunctionFlags |= 0x400;
};

// Function Engine.EmitterCameraLensEffectBase.UpdateLocation
// [0x00420500] ( FUNC_Native )
// Parameters infos:
// float                          CamFOVDeg                      ( CPF_Parm )
// struct FVector                 CamLoc                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                CamRot                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AEmitterCameraLensEffectBase::UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot )
{
	static UFunction* pFnUpdateLocation = NULL;

	if ( ! pFnUpdateLocation )
		pFnUpdateLocation = (UFunction*) UObject::GObjObjects()->Data[ 19253 ];

	AEmitterCameraLensEffectBase_execUpdateLocation_Parms UpdateLocation_Parms;
	UpdateLocation_Parms.CamFOVDeg = CamFOVDeg;

	pFnUpdateLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLocation, &UpdateLocation_Parms, NULL );

	pFnUpdateLocation->FunctionFlags |= 0x400;

	if ( CamLoc )
		memcpy ( CamLoc, &UpdateLocation_Parms.CamLoc, 0xC );

	if ( CamRot )
		memcpy ( CamRot, &UpdateLocation_Parms.CamRot, 0xC );
};

// Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect
// [0x00020102] 
// Parameters infos:

void AEmitterCameraLensEffectBase::ActivateLensEffect ( )
{
	static UFunction* pFnActivateLensEffect = NULL;

	if ( ! pFnActivateLensEffect )
		pFnActivateLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 19251 ];

	AEmitterCameraLensEffectBase_execActivateLensEffect_Parms ActivateLensEffect_Parms;

	this->ProcessEvent ( pFnActivateLensEffect, &ActivateLensEffect_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AEmitterCameraLensEffectBase::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19250 ];

	AEmitterCameraLensEffectBase_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered
// [0x00020000] 
// Parameters infos:

void AEmitterCameraLensEffectBase::NotifyRetriggered ( )
{
	static UFunction* pFnNotifyRetriggered = NULL;

	if ( ! pFnNotifyRetriggered )
		pFnNotifyRetriggered = (UFunction*) UObject::GObjObjects()->Data[ 19249 ];

	AEmitterCameraLensEffectBase_execNotifyRetriggered_Parms NotifyRetriggered_Parms;

	this->ProcessEvent ( pFnNotifyRetriggered, &NotifyRetriggered_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.RegisterCamera
// [0x00020002] 
// Parameters infos:
// class ACamera*                 C                              ( CPF_Parm )

void AEmitterCameraLensEffectBase::RegisterCamera ( class ACamera* C )
{
	static UFunction* pFnRegisterCamera = NULL;

	if ( ! pFnRegisterCamera )
		pFnRegisterCamera = (UFunction*) UObject::GObjObjects()->Data[ 19247 ];

	AEmitterCameraLensEffectBase_execRegisterCamera_Parms RegisterCamera_Parms;
	RegisterCamera_Parms.C = C;

	this->ProcessEvent ( pFnRegisterCamera, &RegisterCamera_Parms, NULL );
};

// Function Engine.EmitterCameraLensEffectBase.Destroyed
// [0x00020002] 
// Parameters infos:

void AEmitterCameraLensEffectBase::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 19246 ];

	AEmitterCameraLensEffectBase_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class UParticleModuleEventSendToGame* InEvent                        ( CPF_Parm )
// struct FVector                 InCollideDirection             ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 InHitLocation                  ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 InHitNormal                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FName                   InBoneName                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void AParticleEventManager::eventHandleParticleModuleEventSendToGame ( class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName )
{
	static UFunction* pFnHandleParticleModuleEventSendToGame = NULL;

	if ( ! pFnHandleParticleModuleEventSendToGame )
		pFnHandleParticleModuleEventSendToGame = (UFunction*) UObject::GObjObjects()->Data[ 29595 ];

	AParticleEventManager_eventHandleParticleModuleEventSendToGame_Parms HandleParticleModuleEventSendToGame_Parms;
	HandleParticleModuleEventSendToGame_Parms.InEvent = InEvent;

	this->ProcessEvent ( pFnHandleParticleModuleEventSendToGame, &HandleParticleModuleEventSendToGame_Parms, NULL );

	if ( InCollideDirection )
		memcpy ( InCollideDirection, &HandleParticleModuleEventSendToGame_Parms.InCollideDirection, 0xC );

	if ( InHitLocation )
		memcpy ( InHitLocation, &HandleParticleModuleEventSendToGame_Parms.InHitLocation, 0xC );

	if ( InHitNormal )
		memcpy ( InHitNormal, &HandleParticleModuleEventSendToGame_Parms.InHitNormal, 0xC );

	if ( InBoneName )
		memcpy ( InBoneName, &HandleParticleModuleEventSendToGame_Parms.InBoneName, 0x8 );
};

// Function Engine.ParticleSystemComponent.DoThumbnailWarmup
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::DoThumbnailWarmup ( )
{
	static UFunction* pFnDoThumbnailWarmup = NULL;

	if ( ! pFnDoThumbnailWarmup )
		pFnDoThumbnailWarmup = (UFunction*) UObject::GObjObjects()->Data[ 19102 ];

	UParticleSystemComponent_execDoThumbnailWarmup_Parms DoThumbnailWarmup_Parms;

	pFnDoThumbnailWarmup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoThumbnailWarmup, &DoThumbnailWarmup_Parms, NULL );

	pFnDoThumbnailWarmup->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetParameters
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FParticleSysParam > Params                         ( CPF_Parm | CPF_NeedCtorLink )

void UParticleSystemComponent::SetParameters ( TArray< struct FParticleSysParam > Params )
{
	static UFunction* pFnSetParameters = NULL;

	if ( ! pFnSetParameters )
		pFnSetParameters = (UFunction*) UObject::GObjObjects()->Data[ 19097 ];

	UParticleSystemComponent_execSetParameters_Parms SetParameters_Parms;
	memcpy ( &SetParameters_Parms.Params, &Params, 0xC );

	this->ProcessEvent ( pFnSetParameters, &SetParameters_Parms, NULL );
};

// Function Engine.ParticleSystemComponent.SetLinearColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FLinearColor            Value                          ( CPF_Parm )

void UParticleSystemComponent::SetLinearColorParameter ( struct FName Key, struct FLinearColor Value )
{
	static UFunction* pFnSetLinearColorParameter = NULL;

	if ( ! pFnSetLinearColorParameter )
		pFnSetLinearColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19094 ];

	UParticleSystemComponent_execSetLinearColorParameter_Parms SetLinearColorParameter_Parms;
	memcpy ( &SetLinearColorParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetLinearColorParameter_Parms.Value, &Value, 0x10 );

	pFnSetLinearColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearColorParameter, &SetLinearColorParameter_Parms, NULL );

	pFnSetLinearColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetNameParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FName                   Value                          ( CPF_Parm )

void UParticleSystemComponent::SetNameParameter ( struct FName Key, struct FName Value )
{
	static UFunction* pFnSetNameParameter = NULL;

	if ( ! pFnSetNameParameter )
		pFnSetNameParameter = (UFunction*) UObject::GObjObjects()->Data[ 19091 ];

	UParticleSystemComponent_execSetNameParameter_Parms SetNameParameter_Parms;
	memcpy ( &SetNameParameter_Parms.Key, &Key, 0x8 );
	memcpy ( &SetNameParameter_Parms.Value, &Value, 0x8 );

	pFnSetNameParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameParameter, &SetNameParameter_Parms, NULL );

	pFnSetNameParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetStopSpawning
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InEmitterIndex                 ( CPF_Parm )
// unsigned long                  bInStopSpawning                ( CPF_Parm )

void UParticleSystemComponent::SetStopSpawning ( int InEmitterIndex, unsigned long bInStopSpawning )
{
	static UFunction* pFnSetStopSpawning = NULL;

	if ( ! pFnSetStopSpawning )
		pFnSetStopSpawning = (UFunction*) UObject::GObjObjects()->Data[ 19088 ];

	UParticleSystemComponent_execSetStopSpawning_Parms SetStopSpawning_Parms;
	SetStopSpawning_Parms.InEmitterIndex = InEmitterIndex;
	SetStopSpawning_Parms.bInStopSpawning = bInStopSpawning;

	pFnSetStopSpawning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStopSpawning, &SetStopSpawning_Parms, NULL );

	pFnSetStopSpawning->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ResetToDefaults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 19087 ];

	UParticleSystemComponent_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNowActive                     ( CPF_Parm )
// unsigned long                  bFlagAsJustAttached            ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::SetActive ( unsigned long bNowActive, unsigned long bFlagAsJustAttached )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = (UFunction*) UObject::GObjObjects()->Data[ 18791 ];

	UParticleSystemComponent_execSetActive_Parms SetActive_Parms;
	SetActive_Parms.bNowActive = bNowActive;
	SetActive_Parms.bFlagAsJustAttached = bFlagAsJustAttached;

	pFnSetActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );

	pFnSetActive->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ClearAllParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::ClearAllParameters ( )
{
	static UFunction* pFnClearAllParameters = NULL;

	if ( ! pFnClearAllParameters )
		pFnClearAllParameters = (UFunction*) UObject::GObjObjects()->Data[ 19084 ];

	UParticleSystemComponent_execClearAllParameters_Parms ClearAllParameters_Parms;

	pFnClearAllParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllParameters, &ClearAllParameters_Parms, NULL );

	pFnClearAllParameters->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ClearParameter
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// unsigned char                  ParameterType                  ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ClearParameter ( struct FName ParameterName, unsigned char ParameterType )
{
	static UFunction* pFnClearParameter = NULL;

	if ( ! pFnClearParameter )
		pFnClearParameter = (UFunction*) UObject::GObjObjects()->Data[ 19081 ];

	UParticleSystemComponent_execClearParameter_Parms ClearParameter_Parms;
	memcpy ( &ClearParameter_Parms.ParameterName, &ParameterName, 0x8 );
	ClearParameter_Parms.ParameterType = ParameterType;

	pFnClearParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearParameter, &ClearParameter_Parms, NULL );

	pFnClearParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetMaterialParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class UMaterialInterface*      OutMaterial                    ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial )
{
	static UFunction* pFnGetMaterialParameter = NULL;

	if ( ! pFnGetMaterialParameter )
		pFnGetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 19077 ];

	UParticleSystemComponent_execGetMaterialParameter_Parms GetMaterialParameter_Parms;
	memcpy ( &GetMaterialParameter_Parms.InName, &InName, 0x8 );

	pFnGetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterialParameter, &GetMaterialParameter_Parms, NULL );

	pFnGetMaterialParameter->FunctionFlags |= 0x400;

	if ( OutMaterial )
		*OutMaterial = GetMaterialParameter_Parms.OutMaterial;

	return GetMaterialParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetActorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// class AActor*                  OutActor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetActorParameter ( struct FName InName, class AActor** OutActor )
{
	static UFunction* pFnGetActorParameter = NULL;

	if ( ! pFnGetActorParameter )
		pFnGetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19073 ];

	UParticleSystemComponent_execGetActorParameter_Parms GetActorParameter_Parms;
	memcpy ( &GetActorParameter_Parms.InName, &InName, 0x8 );

	pFnGetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorParameter, &GetActorParameter_Parms, NULL );

	pFnGetActorParameter->FunctionFlags |= 0x400;

	if ( OutActor )
		*OutActor = GetActorParameter_Parms.OutActor;

	return GetActorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetColorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FColor                  OutColor                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetColorParameter ( struct FName InName, struct FColor* OutColor )
{
	static UFunction* pFnGetColorParameter = NULL;

	if ( ! pFnGetColorParameter )
		pFnGetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19069 ];

	UParticleSystemComponent_execGetColorParameter_Parms GetColorParameter_Parms;
	memcpy ( &GetColorParameter_Parms.InName, &InName, 0x8 );

	pFnGetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetColorParameter, &GetColorParameter_Parms, NULL );

	pFnGetColorParameter->FunctionFlags |= 0x400;

	if ( OutColor )
		memcpy ( OutColor, &GetColorParameter_Parms.OutColor, 0x4 );

	return GetColorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetVectorParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// struct FVector                 OutVector                      ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetVectorParameter ( struct FName InName, struct FVector* OutVector )
{
	static UFunction* pFnGetVectorParameter = NULL;

	if ( ! pFnGetVectorParameter )
		pFnGetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19065 ];

	UParticleSystemComponent_execGetVectorParameter_Parms GetVectorParameter_Parms;
	memcpy ( &GetVectorParameter_Parms.InName, &InName, 0x8 );

	pFnGetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVectorParameter, &GetVectorParameter_Parms, NULL );

	pFnGetVectorParameter->FunctionFlags |= 0x400;

	if ( OutVector )
		memcpy ( OutVector, &GetVectorParameter_Parms.OutVector, 0xC );

	return GetVectorParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetFloatParameter
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InName                         ( CPF_Const | CPF_Parm )
// float                          OutFloat                       ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetFloatParameter ( struct FName InName, float* OutFloat )
{
	static UFunction* pFnGetFloatParameter = NULL;

	if ( ! pFnGetFloatParameter )
		pFnGetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 19061 ];

	UParticleSystemComponent_execGetFloatParameter_Parms GetFloatParameter_Parms;
	memcpy ( &GetFloatParameter_Parms.InName, &InName, 0x8 );

	pFnGetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatParameter, &GetFloatParameter_Parms, NULL );

	pFnGetFloatParameter->FunctionFlags |= 0x400;

	if ( OutFloat )
		*OutFloat = GetFloatParameter_Parms.OutFloat;

	return GetFloatParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetMeshParameter
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ParameterName                  ( CPF_Parm )
// class UStaticMesh*             Param                          ( CPF_Parm | CPF_OutParm )

bool UParticleSystemComponent::GetMeshParameter ( struct FName ParameterName, class UStaticMesh** Param )
{
	static UFunction* pFnGetMeshParameter = NULL;

	if ( ! pFnGetMeshParameter )
		pFnGetMeshParameter = (UFunction*) UObject::GObjObjects()->Data[ 19057 ];

	UParticleSystemComponent_execGetMeshParameter_Parms GetMeshParameter_Parms;
	memcpy ( &GetMeshParameter_Parms.ParameterName, &ParameterName, 0x8 );

	pFnGetMeshParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMeshParameter, &GetMeshParameter_Parms, NULL );

	pFnGetMeshParameter->FunctionFlags |= 0x400;

	if ( Param )
		*Param = GetMeshParameter_Parms.Param;

	return GetMeshParameter_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetMeshParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UStaticMesh*             Param                          ( CPF_Parm )

void UParticleSystemComponent::SetMeshParameter ( struct FName ParameterName, class UStaticMesh* Param )
{
	static UFunction* pFnSetMeshParameter = NULL;

	if ( ! pFnSetMeshParameter )
		pFnSetMeshParameter = (UFunction*) UObject::GObjObjects()->Data[ 19054 ];

	UParticleSystemComponent_execSetMeshParameter_Parms SetMeshParameter_Parms;
	memcpy ( &SetMeshParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetMeshParameter_Parms.Param = Param;

	pFnSetMeshParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMeshParameter, &SetMeshParameter_Parms, NULL );

	pFnSetMeshParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetMaterialParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UMaterialInterface*      Param                          ( CPF_Parm )

void UParticleSystemComponent::SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = (UFunction*) UObject::GObjObjects()->Data[ 19051 ];

	UParticleSystemComponent_execSetMaterialParameter_Parms SetMaterialParameter_Parms;
	memcpy ( &SetMaterialParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetMaterialParameter_Parms.Param = Param;

	pFnSetMaterialParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );

	pFnSetMaterialParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetActorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 10748 ];

	UParticleSystemComponent_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	pFnSetActorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );

	pFnSetActorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetColorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Param                          ( CPF_Parm )

void UParticleSystemComponent::SetColorParameter ( struct FName ParameterName, struct FColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19046 ];

	UParticleSystemComponent_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x4 );

	pFnSetColorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );

	pFnSetColorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetVectorRandParameter
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 ParamLow                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UParticleSystemComponent::SetVectorRandParameter ( struct FName ParameterName, struct FVector* Param, struct FVector* ParamLow )
{
	static UFunction* pFnSetVectorRandParameter = NULL;

	if ( ! pFnSetVectorRandParameter )
		pFnSetVectorRandParameter = (UFunction*) UObject::GObjObjects()->Data[ 19042 ];

	UParticleSystemComponent_execSetVectorRandParameter_Parms SetVectorRandParameter_Parms;
	memcpy ( &SetVectorRandParameter_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorRandParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorRandParameter, &SetVectorRandParameter_Parms, NULL );

	pFnSetVectorRandParameter->FunctionFlags |= 0x400;

	if ( Param )
		memcpy ( Param, &SetVectorRandParameter_Parms.Param, 0xC );

	if ( ParamLow )
		memcpy ( ParamLow, &SetVectorRandParameter_Parms.ParamLow, 0xC );
};

// Function Engine.ParticleSystemComponent.SetVectorParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void UParticleSystemComponent::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 19039 ];

	UParticleSystemComponent_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetFloatRandParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )
// float                          ParamLow                       ( CPF_Parm )

void UParticleSystemComponent::SetFloatRandParameter ( struct FName ParameterName, float Param, float ParamLow )
{
	static UFunction* pFnSetFloatRandParameter = NULL;

	if ( ! pFnSetFloatRandParameter )
		pFnSetFloatRandParameter = (UFunction*) UObject::GObjObjects()->Data[ 19035 ];

	UParticleSystemComponent_execSetFloatRandParameter_Parms SetFloatRandParameter_Parms;
	memcpy ( &SetFloatRandParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatRandParameter_Parms.Param = Param;
	SetFloatRandParameter_Parms.ParamLow = ParamLow;

	pFnSetFloatRandParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatRandParameter, &SetFloatRandParameter_Parms, NULL );

	pFnSetFloatRandParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetFloatParameter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void UParticleSystemComponent::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 19032 ];

	UParticleSystemComponent_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	pFnSetFloatParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );

	pFnSetFloatParameter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetEditorLODLevel ( )
{
	static UFunction* pFnGetEditorLODLevel = NULL;

	if ( ! pFnGetEditorLODLevel )
		pFnGetEditorLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19030 ];

	UParticleSystemComponent_execGetEditorLODLevel_Parms GetEditorLODLevel_Parms;

	pFnGetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEditorLODLevel, &GetEditorLODLevel_Parms, NULL );

	pFnGetEditorLODLevel->FunctionFlags |= 0x400;

	return GetEditorLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UParticleSystemComponent::GetLODLevel ( )
{
	static UFunction* pFnGetLODLevel = NULL;

	if ( ! pFnGetLODLevel )
		pFnGetLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19028 ];

	UParticleSystemComponent_execGetLODLevel_Parms GetLODLevel_Parms;

	pFnGetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLODLevel, &GetLODLevel_Parms, NULL );

	pFnGetLODLevel->FunctionFlags |= 0x400;

	return GetLODLevel_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetEditorLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetEditorLODLevel = NULL;

	if ( ! pFnSetEditorLODLevel )
		pFnSetEditorLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19026 ];

	UParticleSystemComponent_execSetEditorLODLevel_Parms SetEditorLODLevel_Parms;
	SetEditorLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetEditorLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEditorLODLevel, &SetEditorLODLevel_Parms, NULL );

	pFnSetEditorLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InLODLevel                     ( CPF_Parm )

void UParticleSystemComponent::SetLODLevel ( int InLODLevel )
{
	static UFunction* pFnSetLODLevel = NULL;

	if ( ! pFnSetLODLevel )
		pFnSetLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 19024 ];

	UParticleSystemComponent_execSetLODLevel_Parms SetLODLevel_Parms;
	SetLODLevel_Parms.InLODLevel = InLODLevel;

	pFnSetLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLODLevel, &SetLODLevel_Parms, NULL );

	pFnSetLODLevel->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SystemHasCompleted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UParticleSystemComponent::SystemHasCompleted ( )
{
	static UFunction* pFnSystemHasCompleted = NULL;

	if ( ! pFnSystemHasCompleted )
		pFnSystemHasCompleted = (UFunction*) UObject::GObjObjects()->Data[ 19022 ];

	UParticleSystemComponent_execSystemHasCompleted_Parms SystemHasCompleted_Parms;

	pFnSystemHasCompleted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSystemHasCompleted, &SystemHasCompleted_Parms, NULL );

	pFnSystemHasCompleted->FunctionFlags |= 0x400;

	return SystemHasCompleted_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.GetMaxLifespan
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UParticleSystemComponent::GetMaxLifespan ( )
{
	static UFunction* pFnGetMaxLifespan = NULL;

	if ( ! pFnGetMaxLifespan )
		pFnGetMaxLifespan = (UFunction*) UObject::GObjObjects()->Data[ 19020 ];

	UParticleSystemComponent_execGetMaxLifespan_Parms GetMaxLifespan_Parms;

	pFnGetMaxLifespan->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxLifespan, &GetMaxLifespan_Parms, NULL );

	pFnGetMaxLifespan->FunctionFlags |= 0x400;

	return GetMaxLifespan_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 EffectLocation                 ( CPF_Const | CPF_Parm | CPF_OutParm )

int UParticleSystemComponent::DetermineLODLevelForLocation ( struct FVector* EffectLocation )
{
	static UFunction* pFnDetermineLODLevelForLocation = NULL;

	if ( ! pFnDetermineLODLevelForLocation )
		pFnDetermineLODLevelForLocation = (UFunction*) UObject::GObjObjects()->Data[ 19017 ];

	UParticleSystemComponent_execDetermineLODLevelForLocation_Parms DetermineLODLevelForLocation_Parms;

	pFnDetermineLODLevelForLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineLODLevelForLocation, &DetermineLODLevelForLocation_Parms, NULL );

	pFnDetermineLODLevelForLocation->FunctionFlags |= 0x400;

	if ( EffectLocation )
		memcpy ( EffectLocation, &DetermineLODLevelForLocation_Parms.EffectLocation, 0xC );

	return DetermineLODLevelForLocation_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewTargetStrength              ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetStrength = NULL;

	if ( ! pFnSetBeamTargetStrength )
		pFnSetBeamTargetStrength = (UFunction*) UObject::GObjObjects()->Data[ 19013 ];

	UParticleSystemComponent_execSetBeamTargetStrength_Parms SetBeamTargetStrength_Parms;
	SetBeamTargetStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamTargetStrength_Parms.NewTargetStrength = NewTargetStrength;
	SetBeamTargetStrength_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetStrength, &SetBeamTargetStrength_Parms, NULL );

	pFnSetBeamTargetStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetTangent = NULL;

	if ( ! pFnSetBeamTargetTangent )
		pFnSetBeamTargetTangent = (UFunction*) UObject::GObjObjects()->Data[ 19009 ];

	UParticleSystemComponent_execSetBeamTargetTangent_Parms SetBeamTargetTangent_Parms;
	SetBeamTargetTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamTargetTangent_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetTangent, &SetBeamTargetTangent_Parms, NULL );

	pFnSetBeamTargetTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTargetPoint                 ( CPF_Parm )
// int                            TargetIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex )
{
	static UFunction* pFnSetBeamTargetPoint = NULL;

	if ( ! pFnSetBeamTargetPoint )
		pFnSetBeamTargetPoint = (UFunction*) UObject::GObjObjects()->Data[ 19005 ];

	UParticleSystemComponent_execSetBeamTargetPoint_Parms SetBeamTargetPoint_Parms;
	SetBeamTargetPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamTargetPoint_Parms.NewTargetPoint, &NewTargetPoint, 0xC );
	SetBeamTargetPoint_Parms.TargetIndex = TargetIndex;

	pFnSetBeamTargetPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTargetPoint, &SetBeamTargetPoint_Parms, NULL );

	pFnSetBeamTargetPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewSourceStrength              ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceStrength = NULL;

	if ( ! pFnSetBeamSourceStrength )
		pFnSetBeamSourceStrength = (UFunction*) UObject::GObjObjects()->Data[ 19001 ];

	UParticleSystemComponent_execSetBeamSourceStrength_Parms SetBeamSourceStrength_Parms;
	SetBeamSourceStrength_Parms.EmitterIndex = EmitterIndex;
	SetBeamSourceStrength_Parms.NewSourceStrength = NewSourceStrength;
	SetBeamSourceStrength_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceStrength, &SetBeamSourceStrength_Parms, NULL );

	pFnSetBeamSourceStrength->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewTangentPoint                ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourceTangent = NULL;

	if ( ! pFnSetBeamSourceTangent )
		pFnSetBeamSourceTangent = (UFunction*) UObject::GObjObjects()->Data[ 18997 ];

	UParticleSystemComponent_execSetBeamSourceTangent_Parms SetBeamSourceTangent_Parms;
	SetBeamSourceTangent_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourceTangent_Parms.NewTangentPoint, &NewTangentPoint, 0xC );
	SetBeamSourceTangent_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourceTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourceTangent, &SetBeamSourceTangent_Parms, NULL );

	pFnSetBeamSourceTangent->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewSourcePoint                 ( CPF_Parm )
// int                            SourceIndex                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex )
{
	static UFunction* pFnSetBeamSourcePoint = NULL;

	if ( ! pFnSetBeamSourcePoint )
		pFnSetBeamSourcePoint = (UFunction*) UObject::GObjObjects()->Data[ 18993 ];

	UParticleSystemComponent_execSetBeamSourcePoint_Parms SetBeamSourcePoint_Parms;
	SetBeamSourcePoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamSourcePoint_Parms.NewSourcePoint, &NewSourcePoint, 0xC );
	SetBeamSourcePoint_Parms.SourceIndex = SourceIndex;

	pFnSetBeamSourcePoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamSourcePoint, &SetBeamSourcePoint_Parms, NULL );

	pFnSetBeamSourcePoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          Distance                       ( CPF_Parm )

void UParticleSystemComponent::SetBeamDistance ( int EmitterIndex, float Distance )
{
	static UFunction* pFnSetBeamDistance = NULL;

	if ( ! pFnSetBeamDistance )
		pFnSetBeamDistance = (UFunction*) UObject::GObjObjects()->Data[ 18990 ];

	UParticleSystemComponent_execSetBeamDistance_Parms SetBeamDistance_Parms;
	SetBeamDistance_Parms.EmitterIndex = EmitterIndex;
	SetBeamDistance_Parms.Distance = Distance;

	pFnSetBeamDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamDistance, &SetBeamDistance_Parms, NULL );

	pFnSetBeamDistance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// struct FVector                 NewEndPoint                    ( CPF_Parm )

void UParticleSystemComponent::SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint )
{
	static UFunction* pFnSetBeamEndPoint = NULL;

	if ( ! pFnSetBeamEndPoint )
		pFnSetBeamEndPoint = (UFunction*) UObject::GObjObjects()->Data[ 18987 ];

	UParticleSystemComponent_execSetBeamEndPoint_Parms SetBeamEndPoint_Parms;
	SetBeamEndPoint_Parms.EmitterIndex = EmitterIndex;
	memcpy ( &SetBeamEndPoint_Parms.NewEndPoint, &NewEndPoint, 0xC );

	pFnSetBeamEndPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamEndPoint, &SetBeamEndPoint_Parms, NULL );

	pFnSetBeamEndPoint->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// float                          NewFactor                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamTessellationFactor ( int EmitterIndex, float NewFactor )
{
	static UFunction* pFnSetBeamTessellationFactor = NULL;

	if ( ! pFnSetBeamTessellationFactor )
		pFnSetBeamTessellationFactor = (UFunction*) UObject::GObjObjects()->Data[ 18984 ];

	UParticleSystemComponent_execSetBeamTessellationFactor_Parms SetBeamTessellationFactor_Parms;
	SetBeamTessellationFactor_Parms.EmitterIndex = EmitterIndex;
	SetBeamTessellationFactor_Parms.NewFactor = NewFactor;

	pFnSetBeamTessellationFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamTessellationFactor, &SetBeamTessellationFactor_Parms, NULL );

	pFnSetBeamTessellationFactor->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetBeamType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// int                            NewMethod                      ( CPF_Parm )

void UParticleSystemComponent::SetBeamType ( int EmitterIndex, int NewMethod )
{
	static UFunction* pFnSetBeamType = NULL;

	if ( ! pFnSetBeamType )
		pFnSetBeamType = (UFunction*) UObject::GObjObjects()->Data[ 18981 ];

	UParticleSystemComponent_execSetBeamType_Parms SetBeamType_Parms;
	SetBeamType_Parms.EmitterIndex = EmitterIndex;
	SetBeamType_Parms.NewMethod = NewMethod;

	pFnSetBeamType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBeamType, &SetBeamType_Parms, NULL );

	pFnSetBeamType->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::RewindEmitterInstances ( )
{
	static UFunction* pFnRewindEmitterInstances = NULL;

	if ( ! pFnRewindEmitterInstances )
		pFnRewindEmitterInstances = (UFunction*) UObject::GObjObjects()->Data[ 18980 ];

	UParticleSystemComponent_execRewindEmitterInstances_Parms RewindEmitterInstances_Parms;

	pFnRewindEmitterInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstances, &RewindEmitterInstances_Parms, NULL );

	pFnRewindEmitterInstances->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )

void UParticleSystemComponent::RewindEmitterInstance ( int EmitterIndex )
{
	static UFunction* pFnRewindEmitterInstance = NULL;

	if ( ! pFnRewindEmitterInstance )
		pFnRewindEmitterInstance = (UFunction*) UObject::GObjObjects()->Data[ 18978 ];

	UParticleSystemComponent_execRewindEmitterInstance_Parms RewindEmitterInstance_Parms;
	RewindEmitterInstance_Parms.EmitterIndex = EmitterIndex;

	pFnRewindEmitterInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRewindEmitterInstance, &RewindEmitterInstance_Parms, NULL );

	pFnRewindEmitterInstance->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnCompleted ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnCompleted = NULL;

	if ( ! pFnSetKillOnCompleted )
		pFnSetKillOnCompleted = (UFunction*) UObject::GObjObjects()->Data[ 18975 ];

	UParticleSystemComponent_execSetKillOnCompleted_Parms SetKillOnCompleted_Parms;
	SetKillOnCompleted_Parms.EmitterIndex = EmitterIndex;
	SetKillOnCompleted_Parms.bKill = bKill;

	pFnSetKillOnCompleted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnCompleted, &SetKillOnCompleted_Parms, NULL );

	pFnSetKillOnCompleted->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            EmitterIndex                   ( CPF_Parm )
// unsigned long                  bKill                          ( CPF_Parm )

void UParticleSystemComponent::SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill )
{
	static UFunction* pFnSetKillOnDeactivate = NULL;

	if ( ! pFnSetKillOnDeactivate )
		pFnSetKillOnDeactivate = (UFunction*) UObject::GObjObjects()->Data[ 18972 ];

	UParticleSystemComponent_execSetKillOnDeactivate_Parms SetKillOnDeactivate_Parms;
	SetKillOnDeactivate_Parms.EmitterIndex = EmitterIndex;
	SetKillOnDeactivate_Parms.bKill = bKill;

	pFnSetKillOnDeactivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKillOnDeactivate, &SetKillOnDeactivate_Parms, NULL );

	pFnSetKillOnDeactivate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UParticleSystemComponent::GetSkipBoundsUpdate ( )
{
	static UFunction* pFnGetSkipBoundsUpdate = NULL;

	if ( ! pFnGetSkipBoundsUpdate )
		pFnGetSkipBoundsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 18970 ];

	UParticleSystemComponent_execGetSkipBoundsUpdate_Parms GetSkipBoundsUpdate_Parms;

	pFnGetSkipBoundsUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkipBoundsUpdate, &GetSkipBoundsUpdate_Parms, NULL );

	pFnGetSkipBoundsUpdate->FunctionFlags |= 0x400;

	return GetSkipBoundsUpdate_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInSkipBoundsUpdate            ( CPF_Parm )

void UParticleSystemComponent::SetSkipBoundsUpdate ( unsigned long bInSkipBoundsUpdate )
{
	static UFunction* pFnSetSkipBoundsUpdate = NULL;

	if ( ! pFnSetSkipBoundsUpdate )
		pFnSetSkipBoundsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 18968 ];

	UParticleSystemComponent_execSetSkipBoundsUpdate_Parms SetSkipBoundsUpdate_Parms;
	SetSkipBoundsUpdate_Parms.bInSkipBoundsUpdate = bInSkipBoundsUpdate;

	pFnSetSkipBoundsUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkipBoundsUpdate, &SetSkipBoundsUpdate_Parms, NULL );

	pFnSetSkipBoundsUpdate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick ( )
{
	static UFunction* pFnGetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnGetSkipUpdateDynamicDataDuringTick )
		pFnGetSkipUpdateDynamicDataDuringTick = (UFunction*) UObject::GObjObjects()->Data[ 18966 ];

	UParticleSystemComponent_execGetSkipUpdateDynamicDataDuringTick_Parms GetSkipUpdateDynamicDataDuringTick_Parms;

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkipUpdateDynamicDataDuringTick, &GetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnGetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;

	return GetSkipUpdateDynamicDataDuringTick_Parms.ReturnValue;
};

// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInSkipUpdateDynamicDataDuringTick ( CPF_Parm )

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick )
{
	static UFunction* pFnSetSkipUpdateDynamicDataDuringTick = NULL;

	if ( ! pFnSetSkipUpdateDynamicDataDuringTick )
		pFnSetSkipUpdateDynamicDataDuringTick = (UFunction*) UObject::GObjObjects()->Data[ 18964 ];

	UParticleSystemComponent_execSetSkipUpdateDynamicDataDuringTick_Parms SetSkipUpdateDynamicDataDuringTick_Parms;
	SetSkipUpdateDynamicDataDuringTick_Parms.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkipUpdateDynamicDataDuringTick, &SetSkipUpdateDynamicDataDuringTick_Parms, NULL );

	pFnSetSkipUpdateDynamicDataDuringTick->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.KillParticlesInEmitter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   InEmitterName                  ( CPF_Parm )

void UParticleSystemComponent::KillParticlesInEmitter ( struct FName InEmitterName )
{
	static UFunction* pFnKillParticlesInEmitter = NULL;

	if ( ! pFnKillParticlesInEmitter )
		pFnKillParticlesInEmitter = (UFunction*) UObject::GObjObjects()->Data[ 18962 ];

	UParticleSystemComponent_execKillParticlesInEmitter_Parms KillParticlesInEmitter_Parms;
	memcpy ( &KillParticlesInEmitter_Parms.InEmitterName, &InEmitterName, 0x8 );

	pFnKillParticlesInEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillParticlesInEmitter, &KillParticlesInEmitter_Parms, NULL );

	pFnKillParticlesInEmitter->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.KillParticlesForced
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::KillParticlesForced ( )
{
	static UFunction* pFnKillParticlesForced = NULL;

	if ( ! pFnKillParticlesForced )
		pFnKillParticlesForced = (UFunction*) UObject::GObjObjects()->Data[ 18961 ];

	UParticleSystemComponent_execKillParticlesForced_Parms KillParticlesForced_Parms;

	pFnKillParticlesForced->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillParticlesForced, &KillParticlesForced_Parms, NULL );

	pFnKillParticlesForced->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.DeactivateSystem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UParticleSystemComponent::DeactivateSystem ( )
{
	static UFunction* pFnDeactivateSystem = NULL;

	if ( ! pFnDeactivateSystem )
		pFnDeactivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 18960 ];

	UParticleSystemComponent_execDeactivateSystem_Parms DeactivateSystem_Parms;

	pFnDeactivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateSystem, &DeactivateSystem_Parms, NULL );

	pFnDeactivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.ActivateSystem
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bFlagAsJustAttached            ( CPF_OptionalParm | CPF_Parm )

void UParticleSystemComponent::ActivateSystem ( unsigned long bFlagAsJustAttached )
{
	static UFunction* pFnActivateSystem = NULL;

	if ( ! pFnActivateSystem )
		pFnActivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 10740 ];

	UParticleSystemComponent_execActivateSystem_Parms ActivateSystem_Parms;
	ActivateSystem_Parms.bFlagAsJustAttached = bFlagAsJustAttached;

	pFnActivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSystem, &ActivateSystem_Parms, NULL );

	pFnActivateSystem->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )

void UParticleSystemComponent::SetTemplate ( class UParticleSystem* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 10737 ];

	UParticleSystemComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.ParticleSystemComponent.OnSystemFinished
// [0x00120000] 
// Parameters infos:
// class UParticleSystemComponent* PSystem                        ( CPF_Parm | CPF_EditInline )

void UParticleSystemComponent::OnSystemFinished ( class UParticleSystemComponent* PSystem )
{
	static UFunction* pFnOnSystemFinished = NULL;

	if ( ! pFnOnSystemFinished )
		pFnOnSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 18956 ];

	UParticleSystemComponent_execOnSystemFinished_Parms OnSystemFinished_Parms;
	OnSystemFinished_Parms.PSystem = PSystem;

	this->ProcessEvent ( pFnOnSystemFinished, &OnSystemFinished_Parms, NULL );
};

// Function Engine.ParticleEmitter.GetMaxLifespan
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InComponentDelay               ( CPF_Parm )

float UParticleEmitter::GetMaxLifespan ( float InComponentDelay )
{
	static UFunction* pFnGetMaxLifespan = NULL;

	if ( ! pFnGetMaxLifespan )
		pFnGetMaxLifespan = (UFunction*) UObject::GObjObjects()->Data[ 29592 ];

	UParticleEmitter_execGetMaxLifespan_Parms GetMaxLifespan_Parms;
	GetMaxLifespan_Parms.InComponentDelay = InComponentDelay;

	pFnGetMaxLifespan->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxLifespan, &GetMaxLifespan_Parms, NULL );

	pFnGetMaxLifespan->FunctionFlags |= 0x400;

	return GetMaxLifespan_Parms.ReturnValue;
};

// Function Engine.ParticleModuleEventSendToGame.DoEvent
// [0x00420000] 
// Parameters infos:
// struct FVector                 InCollideDirection             ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 InHitLocation                  ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 InHitNormal                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FName                   InBoneName                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void UParticleModuleEventSendToGame::DoEvent ( struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName )
{
	static UFunction* pFnDoEvent = NULL;

	if ( ! pFnDoEvent )
		pFnDoEvent = (UFunction*) UObject::GObjObjects()->Data[ 29906 ];

	UParticleModuleEventSendToGame_execDoEvent_Parms DoEvent_Parms;

	this->ProcessEvent ( pFnDoEvent, &DoEvent_Parms, NULL );

	if ( InCollideDirection )
		memcpy ( InCollideDirection, &DoEvent_Parms.InCollideDirection, 0xC );

	if ( InHitLocation )
		memcpy ( InHitLocation, &DoEvent_Parms.InHitLocation, 0xC );

	if ( InHitNormal )
		memcpy ( InHitNormal, &DoEvent_Parms.InHitNormal, 0xC );

	if ( InBoneName )
		memcpy ( InBoneName, &DoEvent_Parms.InBoneName, 0x8 );
};

// Function Engine.KActor.Reset
// [0x00020102] 
// Parameters infos:

void AKActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 24167 ];

	AKActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.KActor.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKActor::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 24161 ];

	AKActor_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 24159 ];

	AKActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KActor.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AKActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 24147 ];

	AKActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AKActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 24139 ];

	AKActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.KActor.ApplyImpulse
// [0x00824802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ImpulseDir                     ( CPF_Parm )
// float                          ImpulseMag                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AKActor::eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType )
{
	static UFunction* pFnApplyImpulse = NULL;

	if ( ! pFnApplyImpulse )
		pFnApplyImpulse = (UFunction*) UObject::GObjObjects()->Data[ 24132 ];

	AKActor_eventApplyImpulse_Parms ApplyImpulse_Parms;
	memcpy ( &ApplyImpulse_Parms.ImpulseDir, &ImpulseDir, 0xC );
	ApplyImpulse_Parms.ImpulseMag = ImpulseMag;
	memcpy ( &ApplyImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpulse_Parms.HitInfo, &HitInfo, 0x1C );
	ApplyImpulse_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyImpulse, &ApplyImpulse_Parms, NULL );
};

// Function Engine.KActor.ReplicatedEvent
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 24129 ];

	AKActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KActor.SpawnedByKismet
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 24128 ];

	AKActor_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.KActor.SetPhysicalCollisionProperties
// [0x00020102] 
// Parameters infos:

void AKActor::SetPhysicalCollisionProperties ( )
{
	static UFunction* pFnSetPhysicalCollisionProperties = NULL;

	if ( ! pFnSetPhysicalCollisionProperties )
		pFnSetPhysicalCollisionProperties = (UFunction*) UObject::GObjObjects()->Data[ 24126 ];

	AKActor_execSetPhysicalCollisionProperties_Parms SetPhysicalCollisionProperties_Parms;

	this->ProcessEvent ( pFnSetPhysicalCollisionProperties, &SetPhysicalCollisionProperties_Parms, NULL );
};

// Function Engine.KActor.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 24125 ];

	AKActor_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.KActor.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void AKActor::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 24123 ];

	AKActor_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.KActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24122 ];

	AKActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.KActor.ResolveRBState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActor::ResolveRBState ( )
{
	static UFunction* pFnResolveRBState = NULL;

	if ( ! pFnResolveRBState )
		pFnResolveRBState = (UFunction*) UObject::GObjObjects()->Data[ 24121 ];

	AKActor_execResolveRBState_Parms ResolveRBState_Parms;

	pFnResolveRBState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveRBState, &ResolveRBState_Parms, NULL );

	pFnResolveRBState->FunctionFlags |= 0x400;
};

// Function Engine.KActor.GetKActorPhysMaterial
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial ( )
{
	static UFunction* pFnGetKActorPhysMaterial = NULL;

	if ( ! pFnGetKActorPhysMaterial )
		pFnGetKActorPhysMaterial = (UFunction*) UObject::GObjObjects()->Data[ 24119 ];

	AKActor_execGetKActorPhysMaterial_Parms GetKActorPhysMaterial_Parms;

	pFnGetKActorPhysMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetKActorPhysMaterial, &GetKActorPhysMaterial_Parms, NULL );

	pFnGetKActorPhysMaterial->FunctionFlags |= 0x400;

	return GetKActorPhysMaterial_Parms.ReturnValue;
};

// Function Engine.KActorFromStatic.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AKActorFromStatic::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 24205 ];

	AKActorFromStatic_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KActorFromStatic.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AKActorFromStatic::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 24200 ];

	AKActorFromStatic_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.KActorFromStatic.Bump
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AKActorFromStatic::eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = (UFunction*) UObject::GObjObjects()->Data[ 24196 ];

	AKActorFromStatic_eventBump_Parms Bump_Parms;
	Bump_Parms.Other = Other;
	Bump_Parms.OtherComp = OtherComp;
	memcpy ( &Bump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function Engine.KActorFromStatic.ReceiveImpulse
// [0x00820002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AKActorFromStatic::ReceiveImpulse ( class APawn* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnReceiveImpulse = NULL;

	if ( ! pFnReceiveImpulse )
		pFnReceiveImpulse = (UFunction*) UObject::GObjObjects()->Data[ 24190 ];

	AKActorFromStatic_execReceiveImpulse_Parms ReceiveImpulse_Parms;
	ReceiveImpulse_Parms.Other = Other;
	memcpy ( &ReceiveImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReceiveImpulse_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnReceiveImpulse, &ReceiveImpulse_Parms, NULL );
};

// Function Engine.KActorFromStatic.ApplyImpulse
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ImpulseDir                     ( CPF_Parm )
// float                          ImpulseMag                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class UClass*                  DamageType                     ( CPF_OptionalParm | CPF_Parm )

void AKActorFromStatic::eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType )
{
	static UFunction* pFnApplyImpulse = NULL;

	if ( ! pFnApplyImpulse )
		pFnApplyImpulse = (UFunction*) UObject::GObjObjects()->Data[ 24181 ];

	AKActorFromStatic_eventApplyImpulse_Parms ApplyImpulse_Parms;
	memcpy ( &ApplyImpulse_Parms.ImpulseDir, &ImpulseDir, 0xC );
	ApplyImpulse_Parms.ImpulseMag = ImpulseMag;
	memcpy ( &ApplyImpulse_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyImpulse_Parms.HitInfo, &HitInfo, 0x1C );
	ApplyImpulse_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyImpulse, &ApplyImpulse_Parms, NULL );
};

// Function Engine.KActorFromStatic.MakeDynamic
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class AKActorFromStatic*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMeshComponent*    MovableMesh                    ( CPF_Parm | CPF_EditInline )

class AKActorFromStatic* AKActorFromStatic::MakeDynamic ( class UStaticMeshComponent* MovableMesh )
{
	static UFunction* pFnMakeDynamic = NULL;

	if ( ! pFnMakeDynamic )
		pFnMakeDynamic = (UFunction*) UObject::GObjObjects()->Data[ 6883 ];

	AKActorFromStatic_execMakeDynamic_Parms MakeDynamic_Parms;
	MakeDynamic_Parms.MovableMesh = MovableMesh;

	pFnMakeDynamic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeDynamic, &MakeDynamic_Parms, NULL );

	pFnMakeDynamic->FunctionFlags |= 0x400;

	return MakeDynamic_Parms.ReturnValue;
};

// Function Engine.KActorFromStatic.MakeStatic
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKActorFromStatic::MakeStatic ( )
{
	static UFunction* pFnMakeStatic = NULL;

	if ( ! pFnMakeStatic )
		pFnMakeStatic = (UFunction*) UObject::GObjObjects()->Data[ 24179 ];

	AKActorFromStatic_execMakeStatic_Parms MakeStatic_Parms;

	pFnMakeStatic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeStatic, &MakeStatic_Parms, NULL );

	pFnMakeStatic->FunctionFlags |= 0x400;
};

// Function Engine.KActorFromStatic.BecomeStatic
// [0x00020002] 
// Parameters infos:

void AKActorFromStatic::BecomeStatic ( )
{
	static UFunction* pFnBecomeStatic = NULL;

	if ( ! pFnBecomeStatic )
		pFnBecomeStatic = (UFunction*) UObject::GObjObjects()->Data[ 24178 ];

	AKActorFromStatic_execBecomeStatic_Parms BecomeStatic_Parms;

	this->ProcessEvent ( pFnBecomeStatic, &BecomeStatic_Parms, NULL );
};

// Function Engine.KActorFromStatic.OnWakeRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKActorFromStatic::eventOnWakeRBPhysics ( )
{
	static UFunction* pFnOnWakeRBPhysics = NULL;

	if ( ! pFnOnWakeRBPhysics )
		pFnOnWakeRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 24177 ];

	AKActorFromStatic_eventOnWakeRBPhysics_Parms OnWakeRBPhysics_Parms;

	this->ProcessEvent ( pFnOnWakeRBPhysics, &OnWakeRBPhysics_Parms, NULL );
};

// Function Engine.KActorFromStatic.OnSleepRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKActorFromStatic::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = (UFunction*) UObject::GObjObjects()->Data[ 24176 ];

	AKActorFromStatic_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function Engine.KActorFromStatic.DisablePrecomputedLighting
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActorFromStatic::DisablePrecomputedLighting ( )
{
	static UFunction* pFnDisablePrecomputedLighting = NULL;

	if ( ! pFnDisablePrecomputedLighting )
		pFnDisablePrecomputedLighting = (UFunction*) UObject::GObjObjects()->Data[ 24172 ];

	AKActorFromStatic_execDisablePrecomputedLighting_Parms DisablePrecomputedLighting_Parms;

	pFnDisablePrecomputedLighting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisablePrecomputedLighting, &DisablePrecomputedLighting_Parms, NULL );

	pFnDisablePrecomputedLighting->FunctionFlags |= 0x400;
};

// Function Engine.KActorSpawnable.ResetComponents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKActorSpawnable::ResetComponents ( )
{
	static UFunction* pFnResetComponents = NULL;

	if ( ! pFnResetComponents )
		pFnResetComponents = (UFunction*) UObject::GObjObjects()->Data[ 24222 ];

	AKActorSpawnable_execResetComponents_Parms ResetComponents_Parms;

	pFnResetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetComponents, &ResetComponents_Parms, NULL );

	pFnResetComponents->FunctionFlags |= 0x400;
};

// Function Engine.KActorSpawnable.RecycleInternal
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKActorSpawnable::eventRecycleInternal ( )
{
	static UFunction* pFnRecycleInternal = NULL;

	if ( ! pFnRecycleInternal )
		pFnRecycleInternal = (UFunction*) UObject::GObjObjects()->Data[ 24221 ];

	AKActorSpawnable_eventRecycleInternal_Parms RecycleInternal_Parms;

	this->ProcessEvent ( pFnRecycleInternal, &RecycleInternal_Parms, NULL );
};

// Function Engine.KActorSpawnable.Recycle
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 24220 ];

	AKActorSpawnable_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function Engine.KActorSpawnable.Initialize
// [0x00020102] 
// Parameters infos:

void AKActorSpawnable::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 24219 ];

	AKActorSpawnable_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function Engine.KAsset.DoKismetAttachment
// [0x00020102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void AKAsset::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 24261 ];

	AKAsset_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.KAsset.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        inAction                       ( CPF_Parm )

void AKAsset::OnTeleport ( class USeqAct_Teleport* inAction )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 24258 ];

	AKAsset_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.KAsset.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AKAsset::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 24256 ];

	AKAsset_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.KAsset.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AKAsset::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 24246 ];

	AKAsset_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.KAsset.TakeDamage
// [0x00824902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AKAsset::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 24237 ];

	AKAsset_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.KAsset.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AKAsset::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 24235 ];

	AKAsset_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.KAsset.SetMeshAndPhysAsset
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USkeletalMesh*           NewMesh                        ( CPF_Parm )
// class UPhysicsAsset*           NewPhysAsset                   ( CPF_Parm )

void AKAsset::SetMeshAndPhysAsset ( class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset )
{
	static UFunction* pFnSetMeshAndPhysAsset = NULL;

	if ( ! pFnSetMeshAndPhysAsset )
		pFnSetMeshAndPhysAsset = (UFunction*) UObject::GObjObjects()->Data[ 24232 ];

	AKAsset_execSetMeshAndPhysAsset_Parms SetMeshAndPhysAsset_Parms;
	SetMeshAndPhysAsset_Parms.NewMesh = NewMesh;
	SetMeshAndPhysAsset_Parms.NewPhysAsset = NewPhysAsset;

	this->ProcessEvent ( pFnSetMeshAndPhysAsset, &SetMeshAndPhysAsset_Parms, NULL );
};

// Function Engine.KAsset.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKAsset::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24231 ];

	AKAsset_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.OnSetVelocity
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetVelocity*     Action                         ( CPF_Parm )

void APawn::OnSetVelocity ( class USeqAct_SetVelocity* Action )
{
	static UFunction* pFnOnSetVelocity = NULL;

	if ( ! pFnOnSetVelocity )
		pFnOnSetVelocity = (UFunction*) UObject::GObjObjects()->Data[ 26026 ];

	APawn_execOnSetVelocity_Parms OnSetVelocity_Parms;
	OnSetVelocity_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetVelocity, &OnSetVelocity_Parms, NULL );
};

// Function Engine.Pawn.Speak
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USoundCue*               Cue                            ( CPF_Parm )

void APawn::eventSpeak ( class USoundCue* Cue )
{
	static UFunction* pFnSpeak = NULL;

	if ( ! pFnSpeak )
		pFnSpeak = (UFunction*) UObject::GObjObjects()->Data[ 26024 ];

	APawn_eventSpeak_Parms Speak_Parms;
	Speak_Parms.Cue = Cue;

	this->ProcessEvent ( pFnSpeak, &Speak_Parms, NULL );
};

// Function Engine.Pawn.SetScalarParameterInterp
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FScalarParameterInterpStruct ScalarParameterInterp          ( CPF_Const | CPF_Parm | CPF_OutParm )

void APawn::SetScalarParameterInterp ( struct FScalarParameterInterpStruct* ScalarParameterInterp )
{
	static UFunction* pFnSetScalarParameterInterp = NULL;

	if ( ! pFnSetScalarParameterInterp )
		pFnSetScalarParameterInterp = (UFunction*) UObject::GObjObjects()->Data[ 14996 ];

	APawn_execSetScalarParameterInterp_Parms SetScalarParameterInterp_Parms;

	pFnSetScalarParameterInterp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterInterp, &SetScalarParameterInterp_Parms, NULL );

	pFnSetScalarParameterInterp->FunctionFlags |= 0x400;

	if ( ScalarParameterInterp )
		memcpy ( ScalarParameterInterp, &SetScalarParameterInterp_Parms.ScalarParameterInterp, 0x14 );
};

// Function Engine.Pawn.SetRootMotionInterpCurrentTime
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// float                          inTime                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUpdateSkelPose                ( CPF_OptionalParm | CPF_Parm )

void APawn::SetRootMotionInterpCurrentTime ( float inTime, float DeltaTime, unsigned long bUpdateSkelPose )
{
	static UFunction* pFnSetRootMotionInterpCurrentTime = NULL;

	if ( ! pFnSetRootMotionInterpCurrentTime )
		pFnSetRootMotionInterpCurrentTime = (UFunction*) UObject::GObjObjects()->Data[ 26019 ];

	APawn_execSetRootMotionInterpCurrentTime_Parms SetRootMotionInterpCurrentTime_Parms;
	SetRootMotionInterpCurrentTime_Parms.inTime = inTime;
	SetRootMotionInterpCurrentTime_Parms.DeltaTime = DeltaTime;
	SetRootMotionInterpCurrentTime_Parms.bUpdateSkelPose = bUpdateSkelPose;

	pFnSetRootMotionInterpCurrentTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRootMotionInterpCurrentTime, &SetRootMotionInterpCurrentTime_Parms, NULL );

	pFnSetRootMotionInterpCurrentTime->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetCinematicMode
// [0x00020100] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )

void APawn::SetCinematicMode ( unsigned long bInCinematicMode )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 26017 ];

	APawn_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function Engine.Pawn.ZeroMovementVariables
// [0x00020102] 
// Parameters infos:

void APawn::ZeroMovementVariables ( )
{
	static UFunction* pFnZeroMovementVariables = NULL;

	if ( ! pFnZeroMovementVariables )
		pFnZeroMovementVariables = (UFunction*) UObject::GObjObjects()->Data[ 26016 ];

	APawn_execZeroMovementVariables_Parms ZeroMovementVariables_Parms;

	this->ProcessEvent ( pFnZeroMovementVariables, &ZeroMovementVariables_Parms, NULL );
};

// Function Engine.Pawn.ClearPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearPathStep ( )
{
	static UFunction* pFnClearPathStep = NULL;

	if ( ! pFnClearPathStep )
		pFnClearPathStep = (UFunction*) UObject::GObjObjects()->Data[ 26015 ];

	APawn_execClearPathStep_Parms ClearPathStep_Parms;

	pFnClearPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPathStep, &ClearPathStep_Parms, NULL );

	pFnClearPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.DrawPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::DrawPathStep ( class UCanvas* C )
{
	static UFunction* pFnDrawPathStep = NULL;

	if ( ! pFnDrawPathStep )
		pFnDrawPathStep = (UFunction*) UObject::GObjObjects()->Data[ 26013 ];

	APawn_execDrawPathStep_Parms DrawPathStep_Parms;
	DrawPathStep_Parms.C = C;

	pFnDrawPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawPathStep, &DrawPathStep_Parms, NULL );

	pFnDrawPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathChild ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathChild = NULL;

	if ( ! pFnIncrementPathChild )
		pFnIncrementPathChild = (UFunction*) UObject::GObjObjects()->Data[ 26010 ];

	APawn_execIncrementPathChild_Parms IncrementPathChild_Parms;
	IncrementPathChild_Parms.Cnt = Cnt;
	IncrementPathChild_Parms.C = C;

	pFnIncrementPathChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathChild, &IncrementPathChild_Parms, NULL );

	pFnIncrementPathChild->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IncrementPathStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Cnt                            ( CPF_Parm )
// class UCanvas*                 C                              ( CPF_Parm )

void APawn::IncrementPathStep ( int Cnt, class UCanvas* C )
{
	static UFunction* pFnIncrementPathStep = NULL;

	if ( ! pFnIncrementPathStep )
		pFnIncrementPathStep = (UFunction*) UObject::GObjObjects()->Data[ 26007 ];

	APawn_execIncrementPathStep_Parms IncrementPathStep_Parms;
	IncrementPathStep_Parms.Cnt = Cnt;
	IncrementPathStep_Parms.C = C;

	pFnIncrementPathStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPathStep, &IncrementPathStep_Parms, NULL );

	pFnIncrementPathStep->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.CreatePathGoalEvaluator
// [0x00020002] 
// Parameters infos:
// class UPathGoalEvaluator*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )

class UPathGoalEvaluator* APawn::CreatePathGoalEvaluator ( class UClass* GoalEvalClass )
{
	static UFunction* pFnCreatePathGoalEvaluator = NULL;

	if ( ! pFnCreatePathGoalEvaluator )
		pFnCreatePathGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 22856 ];

	APawn_execCreatePathGoalEvaluator_Parms CreatePathGoalEvaluator_Parms;
	CreatePathGoalEvaluator_Parms.GoalEvalClass = GoalEvalClass;

	this->ProcessEvent ( pFnCreatePathGoalEvaluator, &CreatePathGoalEvaluator_Parms, NULL );

	return CreatePathGoalEvaluator_Parms.ReturnValue;
};

// Function Engine.Pawn.CreatePathConstraint
// [0x00020002] 
// Parameters infos:
// class UPathConstraint*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )

class UPathConstraint* APawn::CreatePathConstraint ( class UClass* ConstraintClass )
{
	static UFunction* pFnCreatePathConstraint = NULL;

	if ( ! pFnCreatePathConstraint )
		pFnCreatePathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 26003 ];

	APawn_execCreatePathConstraint_Parms CreatePathConstraint_Parms;
	CreatePathConstraint_Parms.ConstraintClass = ConstraintClass;

	this->ProcessEvent ( pFnCreatePathConstraint, &CreatePathConstraint_Parms, NULL );

	return CreatePathConstraint_Parms.ReturnValue;
};

// Function Engine.Pawn.AddGoalEvaluator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathGoalEvaluator*      Evaluator                      ( CPF_Parm )

void APawn::AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator )
{
	static UFunction* pFnAddGoalEvaluator = NULL;

	if ( ! pFnAddGoalEvaluator )
		pFnAddGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 26001 ];

	APawn_execAddGoalEvaluator_Parms AddGoalEvaluator_Parms;
	AddGoalEvaluator_Parms.Evaluator = Evaluator;

	pFnAddGoalEvaluator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGoalEvaluator, &AddGoalEvaluator_Parms, NULL );

	pFnAddGoalEvaluator->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.AddPathConstraint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPathConstraint*         Constraint                     ( CPF_Parm )

void APawn::AddPathConstraint ( class UPathConstraint* Constraint )
{
	static UFunction* pFnAddPathConstraint = NULL;

	if ( ! pFnAddPathConstraint )
		pFnAddPathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 25999 ];

	APawn_execAddPathConstraint_Parms AddPathConstraint_Parms;
	AddPathConstraint_Parms.Constraint = Constraint;

	pFnAddPathConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPathConstraint, &AddPathConstraint_Parms, NULL );

	pFnAddPathConstraint->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearConstraints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ClearConstraints ( )
{
	static UFunction* pFnClearConstraints = NULL;

	if ( ! pFnClearConstraints )
		pFnClearConstraints = (UFunction*) UObject::GObjObjects()->Data[ 25998 ];

	APawn_execClearConstraints_Parms ClearConstraints_Parms;

	pFnClearConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearConstraints, &ClearConstraints_Parms, NULL );

	pFnClearConstraints->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SoakPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSoakPause ( )
{
	static UFunction* pFnSoakPause = NULL;

	if ( ! pFnSoakPause )
		pFnSoakPause = (UFunction*) UObject::GObjObjects()->Data[ 25996 ];

	APawn_eventSoakPause_Parms SoakPause_Parms;

	this->ProcessEvent ( pFnSoakPause, &SoakPause_Parms, NULL );
};

// Function Engine.Pawn.BecomeViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void APawn::eventBecomeViewTarget ( class APlayerController* PC )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 25994 ];

	APawn_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;
	BecomeViewTarget_Parms.PC = PC;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function Engine.Pawn.MessagePlayer
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void APawn::eventMessagePlayer ( struct FString msg )
{
	static UFunction* pFnMessagePlayer = NULL;

	if ( ! pFnMessagePlayer )
		pFnMessagePlayer = (UFunction*) UObject::GObjObjects()->Data[ 16525 ];

	APawn_eventMessagePlayer_Parms MessagePlayer_Parms;
	memcpy ( &MessagePlayer_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnMessagePlayer, &MessagePlayer_Parms, NULL );
};

// Function Engine.Pawn.HandleTeleport
// [0x00824102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class UObject* >       DestList                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bUpdateRotation                ( CPF_Parm )
// unsigned long                  bCheckOverlap                  ( CPF_Parm )
// float                          TeleportDistance               ( CPF_OptionalParm | CPF_Parm )
// TArray< class AVolume* >       TeleportVolumes                ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            PreferredDestIndex             ( CPF_OptionalParm | CPF_Parm )

bool APawn::HandleTeleport ( TArray< class UObject* > DestList, unsigned long bUpdateRotation, unsigned long bCheckOverlap, float TeleportDistance, TArray< class AVolume* > TeleportVolumes, int PreferredDestIndex )
{
	static UFunction* pFnHandleTeleport = NULL;

	if ( ! pFnHandleTeleport )
		pFnHandleTeleport = (UFunction*) UObject::GObjObjects()->Data[ 25974 ];

	APawn_execHandleTeleport_Parms HandleTeleport_Parms;
	memcpy ( &HandleTeleport_Parms.DestList, &DestList, 0xC );
	HandleTeleport_Parms.bUpdateRotation = bUpdateRotation;
	HandleTeleport_Parms.bCheckOverlap = bCheckOverlap;
	HandleTeleport_Parms.TeleportDistance = TeleportDistance;
	memcpy ( &HandleTeleport_Parms.TeleportVolumes, &TeleportVolumes, 0xC );
	HandleTeleport_Parms.PreferredDestIndex = PreferredDestIndex;

	this->ProcessEvent ( pFnHandleTeleport, &HandleTeleport_Parms, NULL );

	return HandleTeleport_Parms.ReturnValue;
};

// Function Engine.Pawn.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void APawn::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 25970 ];

	APawn_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function Engine.Pawn.OnSetMaterial
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetMaterial*     Action                         ( CPF_Parm )

void APawn::OnSetMaterial ( class USeqAct_SetMaterial* Action )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 25968 ];

	APawn_execOnSetMaterial_Parms OnSetMaterial_Parms;
	OnSetMaterial_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function Engine.Pawn.GetDamageScaling
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetDamageScaling ( )
{
	static UFunction* pFnGetDamageScaling = NULL;

	if ( ! pFnGetDamageScaling )
		pFnGetDamageScaling = (UFunction*) UObject::GObjObjects()->Data[ 25966 ];

	APawn_execGetDamageScaling_Parms GetDamageScaling_Parms;

	this->ProcessEvent ( pFnGetDamageScaling, &GetDamageScaling_Parms, NULL );

	return GetDamageScaling_Parms.ReturnValue;
};

// Function Engine.Pawn.DoKismetAttachment
// [0x00020102] 
// Parameters infos:
// class AActor*                  Attachment                     ( CPF_Parm )
// class USeqAct_AttachToActor*   Action                         ( CPF_Parm )

void APawn::DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action )
{
	static UFunction* pFnDoKismetAttachment = NULL;

	if ( ! pFnDoKismetAttachment )
		pFnDoKismetAttachment = (UFunction*) UObject::GObjObjects()->Data[ 25959 ];

	APawn_execDoKismetAttachment_Parms DoKismetAttachment_Parms;
	DoKismetAttachment_Parms.Attachment = Attachment;
	DoKismetAttachment_Parms.Action = Action;

	this->ProcessEvent ( pFnDoKismetAttachment, &DoKismetAttachment_Parms, NULL );
};

// Function Engine.Pawn.SpawnedByKismet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 25958 ];

	APawn_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function Engine.Pawn.IsStationary
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsStationary ( )
{
	static UFunction* pFnIsStationary = NULL;

	if ( ! pFnIsStationary )
		pFnIsStationary = (UFunction*) UObject::GObjObjects()->Data[ 25956 ];

	APawn_execIsStationary_Parms IsStationary_Parms;

	this->ProcessEvent ( pFnIsStationary, &IsStationary_Parms, NULL );

	return IsStationary_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionExtent
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::GetCollisionExtent ( )
{
	static UFunction* pFnGetCollisionExtent = NULL;

	if ( ! pFnGetCollisionExtent )
		pFnGetCollisionExtent = (UFunction*) UObject::GObjObjects()->Data[ 16514 ];

	APawn_execGetCollisionExtent_Parms GetCollisionExtent_Parms;

	this->ProcessEvent ( pFnGetCollisionExtent, &GetCollisionExtent_Parms, NULL );

	return GetCollisionExtent_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionHeight
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionHeight ( )
{
	static UFunction* pFnGetCollisionHeight = NULL;

	if ( ! pFnGetCollisionHeight )
		pFnGetCollisionHeight = (UFunction*) UObject::GObjObjects()->Data[ 23452 ];

	APawn_execGetCollisionHeight_Parms GetCollisionHeight_Parms;

	this->ProcessEvent ( pFnGetCollisionHeight, &GetCollisionHeight_Parms, NULL );

	return GetCollisionHeight_Parms.ReturnValue;
};

// Function Engine.Pawn.GetCollisionRadius
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetCollisionRadius ( )
{
	static UFunction* pFnGetCollisionRadius = NULL;

	if ( ! pFnGetCollisionRadius )
		pFnGetCollisionRadius = (UFunction*) UObject::GObjObjects()->Data[ 25953 ];

	APawn_execGetCollisionRadius_Parms GetCollisionRadius_Parms;

	this->ProcessEvent ( pFnGetCollisionRadius, &GetCollisionRadius_Parms, NULL );

	return GetCollisionRadius_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 16407 ];

	APawn_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = (UFunction*) UObject::GObjObjects()->Data[ 16413 ];

	APawn_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Pawn.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = (UFunction*) UObject::GObjObjects()->Data[ 16410 ];

	APawn_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayWeaponSwitch
// [0x00020100] 
// Parameters infos:
// class AWeapon*                 OldWeapon                      ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APawn::PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 25950 ];

	APawn_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;
	PlayWeaponSwitch_Parms.OldWeapon = OldWeapon;
	PlayWeaponSwitch_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function Engine.Pawn.SetActiveWeapon
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void APawn::SetActiveWeapon ( class AWeapon* NewWeapon )
{
	static UFunction* pFnSetActiveWeapon = NULL;

	if ( ! pFnSetActiveWeapon )
		pFnSetActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 25948 ];

	APawn_execSetActiveWeapon_Parms SetActiveWeapon_Parms;
	SetActiveWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnSetActiveWeapon, &SetActiveWeapon_Parms, NULL );
};

// Function Engine.Pawn.TossInventory
// [0x00824002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )
// struct FVector                 ForceVelocity                  ( CPF_OptionalParm | CPF_Parm )

void APawn::TossInventory ( class AInventory* Inv, struct FVector ForceVelocity )
{
	static UFunction* pFnTossInventory = NULL;

	if ( ! pFnTossInventory )
		pFnTossInventory = (UFunction*) UObject::GObjObjects()->Data[ 25939 ];

	APawn_execTossInventory_Parms TossInventory_Parms;
	TossInventory_Parms.Inv = Inv;
	memcpy ( &TossInventory_Parms.ForceVelocity, &ForceVelocity, 0xC );

	this->ProcessEvent ( pFnTossInventory, &TossInventory_Parms, NULL );
};

// Function Engine.Pawn.ThrowActiveWeapon
// [0x00024002] 
// Parameters infos:
// unsigned long                  bDestroyWeap                   ( CPF_OptionalParm | CPF_Parm )

void APawn::ThrowActiveWeapon ( unsigned long bDestroyWeap )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 25937 ];

	APawn_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;
	ThrowActiveWeapon_Parms.bDestroyWeap = bDestroyWeap;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function Engine.Pawn.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void APawn::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 25935 ];

	APawn_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.Pawn.FindInventoryType
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bAllowSubclass                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* APawn::FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass )
{
	static UFunction* pFnFindInventoryType = NULL;

	if ( ! pFnFindInventoryType )
		pFnFindInventoryType = (UFunction*) UObject::GObjObjects()->Data[ 16451 ];

	APawn_execFindInventoryType_Parms FindInventoryType_Parms;
	FindInventoryType_Parms.DesiredClass = DesiredClass;
	FindInventoryType_Parms.bAllowSubclass = bAllowSubclass;

	this->ProcessEvent ( pFnFindInventoryType, &FindInventoryType_Parms, NULL );

	return FindInventoryType_Parms.ReturnValue;
};

// Function Engine.Pawn.CreateInventory
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInvClass                    ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* APawn::eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 16453 ];

	APawn_eventCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInvClass = NewInvClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function Engine.Pawn.AddDefaultInventory
// [0x00020000] 
// Parameters infos:

void APawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 25930 ];

	APawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function Engine.Pawn.StopDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStopDriving ( class AVehicle* V )
{
	static UFunction* pFnStopDriving = NULL;

	if ( ! pFnStopDriving )
		pFnStopDriving = (UFunction*) UObject::GObjObjects()->Data[ 25928 ];

	APawn_eventStopDriving_Parms StopDriving_Parms;
	StopDriving_Parms.V = V;

	this->ProcessEvent ( pFnStopDriving, &StopDriving_Parms, NULL );
};

// Function Engine.Pawn.StartDriving
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AVehicle*                V                              ( CPF_Parm )

void APawn::eventStartDriving ( class AVehicle* V )
{
	static UFunction* pFnStartDriving = NULL;

	if ( ! pFnStartDriving )
		pFnStartDriving = (UFunction*) UObject::GObjObjects()->Data[ 25926 ];

	APawn_eventStartDriving_Parms StartDriving_Parms;
	StartDriving_Parms.V = V;

	this->ProcessEvent ( pFnStartDriving, &StartDriving_Parms, NULL );
};

// Function Engine.Pawn.CanThrowWeapon
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanThrowWeapon ( )
{
	static UFunction* pFnCanThrowWeapon = NULL;

	if ( ! pFnCanThrowWeapon )
		pFnCanThrowWeapon = (UFunction*) UObject::GObjObjects()->Data[ 25922 ];

	APawn_execCanThrowWeapon_Parms CanThrowWeapon_Parms;

	this->ProcessEvent ( pFnCanThrowWeapon, &CanThrowWeapon_Parms, NULL );

	return CanThrowWeapon_Parms.ReturnValue;
};

// Function Engine.Pawn.Suicide
// [0x00020002] 
// Parameters infos:

void APawn::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 25921 ];

	APawn_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Pawn.GetVehicleBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AVehicle*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AVehicle* APawn::GetVehicleBase ( )
{
	static UFunction* pFnGetVehicleBase = NULL;

	if ( ! pFnGetVehicleBase )
		pFnGetVehicleBase = (UFunction*) UObject::GObjObjects()->Data[ 25919 ];

	APawn_execGetVehicleBase_Parms GetVehicleBase_Parms;

	pFnGetVehicleBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVehicleBase, &GetVehicleBase_Parms, NULL );

	pFnGetVehicleBase->FunctionFlags |= 0x400;

	return GetVehicleBase_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayLanded
// [0x00020000] 
// Parameters infos:
// float                          ImpactVel                      ( CPF_Parm )

void APawn::PlayLanded ( float ImpactVel )
{
	static UFunction* pFnPlayLanded = NULL;

	if ( ! pFnPlayLanded )
		pFnPlayLanded = (UFunction*) UObject::GObjObjects()->Data[ 25917 ];

	APawn_execPlayLanded_Parms PlayLanded_Parms;
	PlayLanded_Parms.ImpactVel = ImpactVel;

	this->ProcessEvent ( pFnPlayLanded, &PlayLanded_Parms, NULL );
};

// Function Engine.Pawn.CannotJumpNow
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CannotJumpNow ( )
{
	static UFunction* pFnCannotJumpNow = NULL;

	if ( ! pFnCannotJumpNow )
		pFnCannotJumpNow = (UFunction*) UObject::GObjObjects()->Data[ 11992 ];

	APawn_execCannotJumpNow_Parms CannotJumpNow_Parms;

	this->ProcessEvent ( pFnCannotJumpNow, &CannotJumpNow_Parms, NULL );

	return CannotJumpNow_Parms.ReturnValue;
};

// Function Engine.Pawn.PlayFootStepSound
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void APawn::eventPlayFootStepSound ( int FootDown )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 25915 ];

	APawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function Engine.Pawn.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = (UFunction*) UObject::GObjObjects()->Data[ 25914 ];

	APawn_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function Engine.Pawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void APawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 25911 ];

	APawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Pawn.SetDyingPhysics
// [0x00020002] 
// Parameters infos:

void APawn::SetDyingPhysics ( )
{
	static UFunction* pFnSetDyingPhysics = NULL;

	if ( ! pFnSetDyingPhysics )
		pFnSetDyingPhysics = (UFunction*) UObject::GObjObjects()->Data[ 25864 ];

	APawn_execSetDyingPhysics_Parms SetDyingPhysics_Parms;

	this->ProcessEvent ( pFnSetDyingPhysics, &SetDyingPhysics_Parms, NULL );
};

// Function Engine.Pawn.TurnOff
// [0x00020102] 
// Parameters infos:

void APawn::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 25863 ];

	APawn_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.Pawn.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void APawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 25856 ];

	APawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function Engine.Pawn.PlayDyingSound
// [0x00020000] 
// Parameters infos:

void APawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = (UFunction*) UObject::GObjObjects()->Data[ 25855 ];

	APawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function Engine.Pawn.DoJump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUpdating                      ( CPF_Parm )

bool APawn::DoJump ( unsigned long bUpdating )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = (UFunction*) UObject::GObjObjects()->Data[ 11955 ];

	APawn_execDoJump_Parms DoJump_Parms;
	DoJump_Parms.bUpdating = bUpdating;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );

	return DoJump_Parms.ReturnValue;
};

// Function Engine.Pawn.CheckWaterJump
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WallNormal                     ( CPF_Parm | CPF_OutParm )

bool APawn::CheckWaterJump ( struct FVector* WallNormal )
{
	static UFunction* pFnCheckWaterJump = NULL;

	if ( ! pFnCheckWaterJump )
		pFnCheckWaterJump = (UFunction*) UObject::GObjObjects()->Data[ 12085 ];

	APawn_execCheckWaterJump_Parms CheckWaterJump_Parms;

	this->ProcessEvent ( pFnCheckWaterJump, &CheckWaterJump_Parms, NULL );

	if ( WallNormal )
		memcpy ( WallNormal, &CheckWaterJump_Parms.WallNormal, 0xC );

	return CheckWaterJump_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDrowningDamage
// [0x00020000] 
// Parameters infos:

void APawn::TakeDrowningDamage ( )
{
	static UFunction* pFnTakeDrowningDamage = NULL;

	if ( ! pFnTakeDrowningDamage )
		pFnTakeDrowningDamage = (UFunction*) UObject::GObjObjects()->Data[ 25845 ];

	APawn_execTakeDrowningDamage_Parms TakeDrowningDamage_Parms;

	this->ProcessEvent ( pFnTakeDrowningDamage, &TakeDrowningDamage_Parms, NULL );
};

// Function Engine.Pawn.BreathTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventBreathTimer ( )
{
	static UFunction* pFnBreathTimer = NULL;

	if ( ! pFnBreathTimer )
		pFnBreathTimer = (UFunction*) UObject::GObjObjects()->Data[ 25844 ];

	APawn_eventBreathTimer_Parms BreathTimer_Parms;

	this->ProcessEvent ( pFnBreathTimer, &BreathTimer_Parms, NULL );
};

// Function Engine.Pawn.TouchingWaterVolume
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TouchingWaterVolume ( )
{
	static UFunction* pFnTouchingWaterVolume = NULL;

	if ( ! pFnTouchingWaterVolume )
		pFnTouchingWaterVolume = (UFunction*) UObject::GObjObjects()->Data[ 12088 ];

	APawn_execTouchingWaterVolume_Parms TouchingWaterVolume_Parms;

	this->ProcessEvent ( pFnTouchingWaterVolume, &TouchingWaterVolume_Parms, NULL );

	return TouchingWaterVolume_Parms.ReturnValue;
};

// Function Engine.Pawn.HeadVolumeChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APhysicsVolume*          newHeadVolume                  ( CPF_Parm )

void APawn::eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume )
{
	static UFunction* pFnHeadVolumeChange = NULL;

	if ( ! pFnHeadVolumeChange )
		pFnHeadVolumeChange = (UFunction*) UObject::GObjObjects()->Data[ 25841 ];

	APawn_eventHeadVolumeChange_Parms HeadVolumeChange_Parms;
	HeadVolumeChange_Parms.newHeadVolume = newHeadVolume;

	this->ProcessEvent ( pFnHeadVolumeChange, &HeadVolumeChange_Parms, NULL );
};

// Function Engine.Pawn.TickSpecial
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void APawn::eventTickSpecial ( float DeltaTime )
{
	static UFunction* pFnTickSpecial = NULL;

	if ( ! pFnTickSpecial )
		pFnTickSpecial = (UFunction*) UObject::GObjObjects()->Data[ 25839 ];

	APawn_eventTickSpecial_Parms TickSpecial_Parms;
	TickSpecial_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickSpecial, &TickSpecial_Parms, NULL );
};

// Function Engine.Pawn.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void APawn::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 25836 ];

	APawn_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function Engine.Pawn.Falling
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void APawn::eventFalling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 25835 ];

	APawn_eventFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function Engine.Pawn.DelayTriggerDeath
// [0x00020002] 
// Parameters infos:

void APawn::DelayTriggerDeath ( )
{
	static UFunction* pFnDelayTriggerDeath = NULL;

	if ( ! pFnDelayTriggerDeath )
		pFnDelayTriggerDeath = (UFunction*) UObject::GObjObjects()->Data[ 25834 ];

	APawn_execDelayTriggerDeath_Parms DelayTriggerDeath_Parms;

	this->ProcessEvent ( pFnDelayTriggerDeath, &DelayTriggerDeath_Parms, NULL );
};

// Function Engine.Pawn.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool APawn::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 11505 ];

	APawn_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Pawn.ThrowWeaponOnDeath
// [0x00020002] 
// Parameters infos:

void APawn::ThrowWeaponOnDeath ( )
{
	static UFunction* pFnThrowWeaponOnDeath = NULL;

	if ( ! pFnThrowWeaponOnDeath )
		pFnThrowWeaponOnDeath = (UFunction*) UObject::GObjObjects()->Data[ 25829 ];

	APawn_execThrowWeaponOnDeath_Parms ThrowWeaponOnDeath_Parms;

	this->ProcessEvent ( pFnThrowWeaponOnDeath, &ThrowWeaponOnDeath_Parms, NULL );
};

// Function Engine.Pawn.IsSameTeam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool APawn::eventIsSameTeam ( class APawn* Other )
{
	static UFunction* pFnIsSameTeam = NULL;

	if ( ! pFnIsSameTeam )
		pFnIsSameTeam = (UFunction*) UObject::GObjObjects()->Data[ 25826 ];

	APawn_eventIsSameTeam_Parms IsSameTeam_Parms;
	IsSameTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnIsSameTeam, &IsSameTeam_Parms, NULL );

	return IsSameTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeam
// [0x00020102] 
// Parameters infos:
// class ATeamInfo*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ATeamInfo* APawn::GetTeam ( )
{
	static UFunction* pFnGetTeam = NULL;

	if ( ! pFnGetTeam )
		pFnGetTeam = (UFunction*) UObject::GObjObjects()->Data[ 25824 ];

	APawn_execGetTeam_Parms GetTeam_Parms;

	this->ProcessEvent ( pFnGetTeam, &GetTeam_Parms, NULL );

	return GetTeam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APawn::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 25822 ];

	APawn_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.Pawn.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void APawn::eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 25811 ];

	APawn_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Pawn.SetKillInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* APawn::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = (UFunction*) UObject::GObjObjects()->Data[ 25807 ];

	APawn_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Pawn.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void APawn::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 25800 ];

	APawn_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );
	NotifyTakeHit_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function Engine.Pawn.TakeRadiusDamageOnBones
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// TArray< struct FName >         Bones                          ( CPF_Parm | CPF_NeedCtorLink )

bool APawn::eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, TArray< struct FName > Bones )
{
	static UFunction* pFnTakeRadiusDamageOnBones = NULL;

	if ( ! pFnTakeRadiusDamageOnBones )
		pFnTakeRadiusDamageOnBones = (UFunction*) UObject::GObjObjects()->Data[ 25781 ];

	APawn_eventTakeRadiusDamageOnBones_Parms TakeRadiusDamageOnBones_Parms;
	TakeRadiusDamageOnBones_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamageOnBones_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamageOnBones_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamageOnBones_Parms.DamageType = DamageType;
	TakeRadiusDamageOnBones_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamageOnBones_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamageOnBones_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamageOnBones_Parms.DamageCauser = DamageCauser;
	memcpy ( &TakeRadiusDamageOnBones_Parms.Bones, &Bones, 0xC );

	this->ProcessEvent ( pFnTakeRadiusDamageOnBones, &TakeRadiusDamageOnBones_Parms, NULL );

	return TakeRadiusDamageOnBones_Parms.ReturnValue;
};

// Function Engine.Pawn.PruneDamagedBoneList
// [0x00420000] 
// Parameters infos:
// TArray< struct FName >         Bones                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APawn::PruneDamagedBoneList ( TArray< struct FName >* Bones )
{
	static UFunction* pFnPruneDamagedBoneList = NULL;

	if ( ! pFnPruneDamagedBoneList )
		pFnPruneDamagedBoneList = (UFunction*) UObject::GObjObjects()->Data[ 25778 ];

	APawn_execPruneDamagedBoneList_Parms PruneDamagedBoneList_Parms;

	this->ProcessEvent ( pFnPruneDamagedBoneList, &PruneDamagedBoneList_Parms, NULL );

	if ( Bones )
		memcpy ( Bones, &PruneDamagedBoneList_Parms.Bones, 0xC );
};

// Function Engine.Pawn.HealDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )
// class AController*             Healer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

bool APawn::eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = (UFunction*) UObject::GObjObjects()->Data[ 25773 ];

	APawn_eventHealDamage_Parms HealDamage_Parms;
	HealDamage_Parms.Amount = Amount;
	HealDamage_Parms.Healer = Healer;
	HealDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );

	return HealDamage_Parms.ReturnValue;
};

// Function Engine.Pawn.AdjustDamage
// [0x00420000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// int                            InDamage                       ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void APawn::AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = (UFunction*) UObject::GObjObjects()->Data[ 25765 ];

	APawn_execAdjustDamage_Parms AdjustDamage_Parms;
	AdjustDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDamage_Parms.DamageType = DamageType;
	memcpy ( &AdjustDamage_Parms.HitInfo, &HitInfo, 0x1C );
	AdjustDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );

	if ( InDamage )
		*InDamage = AdjustDamage_Parms.InDamage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDamage_Parms.Momentum, 0xC );
};

// Function Engine.Pawn.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void APawn::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = (UFunction*) UObject::GObjObjects()->Data[ 25764 ];

	APawn_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function Engine.Pawn.Gasp
// [0x00020000] 
// Parameters infos:

void APawn::Gasp ( )
{
	static UFunction* pFnGasp = NULL;

	if ( ! pFnGasp )
		pFnGasp = (UFunction*) UObject::GObjObjects()->Data[ 25763 ];

	APawn_execGasp_Parms Gasp_Parms;

	this->ProcessEvent ( pFnGasp, &Gasp_Parms, NULL );
};

// Function Engine.Pawn.OnGiveInventory
// [0x00020102] 
// Parameters infos:
// class USeqAct_GiveInventory*   inAction                       ( CPF_Parm )

void APawn::OnGiveInventory ( class USeqAct_GiveInventory* inAction )
{
	static UFunction* pFnOnGiveInventory = NULL;

	if ( ! pFnOnGiveInventory )
		pFnOnGiveInventory = (UFunction*) UObject::GObjObjects()->Data[ 25756 ];

	APawn_execOnGiveInventory_Parms OnGiveInventory_Parms;
	OnGiveInventory_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGiveInventory, &OnGiveInventory_Parms, NULL );
};

// Function Engine.Pawn.OnAssignController
// [0x00020002] 
// Parameters infos:
// class USeqAct_AssignController* inAction                       ( CPF_Parm )

void APawn::OnAssignController ( class USeqAct_AssignController* inAction )
{
	static UFunction* pFnOnAssignController = NULL;

	if ( ! pFnOnAssignController )
		pFnOnAssignController = (UFunction*) UObject::GObjObjects()->Data[ 25752 ];

	APawn_execOnAssignController_Parms OnAssignController_Parms;
	OnAssignController_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnAssignController, &OnAssignController_Parms, NULL );
};

// Function Engine.Pawn.ReceivedNewEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USequenceEvent*          Evt                            ( CPF_Parm )

void APawn::eventReceivedNewEvent ( class USequenceEvent* Evt )
{
	static UFunction* pFnReceivedNewEvent = NULL;

	if ( ! pFnReceivedNewEvent )
		pFnReceivedNewEvent = (UFunction*) UObject::GObjObjects()->Data[ 25750 ];

	APawn_eventReceivedNewEvent_Parms ReceivedNewEvent_Parms;
	ReceivedNewEvent_Parms.Evt = Evt;

	this->ProcessEvent ( pFnReceivedNewEvent, &ReceivedNewEvent_Parms, NULL );
};

// Function Engine.Pawn.SpawnDefaultController
// [0x00020002] 
// Parameters infos:

void APawn::SpawnDefaultController ( )
{
	static UFunction* pFnSpawnDefaultController = NULL;

	if ( ! pFnSpawnDefaultController )
		pFnSpawnDefaultController = (UFunction*) UObject::GObjObjects()->Data[ 25749 ];

	APawn_execSpawnDefaultController_Parms SpawnDefaultController_Parms;

	this->ProcessEvent ( pFnSpawnDefaultController, &SpawnDefaultController_Parms, NULL );
};

// Function Engine.Pawn.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 25748 ];

	APawn_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 25747 ];

	APawn_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Pawn.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APawn::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 25746 ];

	APawn_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Pawn.DetachFromController
// [0x00024002] 
// Parameters infos:
// unsigned long                  bDestroyController             ( CPF_OptionalParm | CPF_Parm )

void APawn::DetachFromController ( unsigned long bDestroyController )
{
	static UFunction* pFnDetachFromController = NULL;

	if ( ! pFnDetachFromController )
		pFnDetachFromController = (UFunction*) UObject::GObjObjects()->Data[ 25743 ];

	APawn_execDetachFromController_Parms DetachFromController_Parms;
	DetachFromController_Parms.bDestroyController = bDestroyController;

	this->ProcessEvent ( pFnDetachFromController, &DetachFromController_Parms, NULL );
};

// Function Engine.Pawn.CrushedBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 25741 ];

	APawn_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Pawn.CanBeBaseForPawn
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   aPawn                          ( CPF_Parm )

bool APawn::CanBeBaseForPawn ( class APawn* aPawn )
{
	static UFunction* pFnCanBeBaseForPawn = NULL;

	if ( ! pFnCanBeBaseForPawn )
		pFnCanBeBaseForPawn = (UFunction*) UObject::GObjObjects()->Data[ 25738 ];

	APawn_execCanBeBaseForPawn_Parms CanBeBaseForPawn_Parms;
	CanBeBaseForPawn_Parms.aPawn = aPawn;

	this->ProcessEvent ( pFnCanBeBaseForPawn, &CanBeBaseForPawn_Parms, NULL );

	return CanBeBaseForPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.BaseChange
// [0x00020822] ( FUNC_Event )
// Parameters infos:

void APawn::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = (UFunction*) UObject::GObjObjects()->Data[ 25736 ];

	APawn_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function Engine.Pawn.StuckOnPawn
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void APawn::eventStuckOnPawn ( class APawn* OtherPawn )
{
	static UFunction* pFnStuckOnPawn = NULL;

	if ( ! pFnStuckOnPawn )
		pFnStuckOnPawn = (UFunction*) UObject::GObjObjects()->Data[ 25734 ];

	APawn_eventStuckOnPawn_Parms StuckOnPawn_Parms;
	StuckOnPawn_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnStuckOnPawn, &StuckOnPawn_Parms, NULL );
};

// Function Engine.Pawn.JumpOffPawn
// [0x00020002] 
// Parameters infos:

void APawn::JumpOffPawn ( )
{
	static UFunction* pFnJumpOffPawn = NULL;

	if ( ! pFnJumpOffPawn )
		pFnJumpOffPawn = (UFunction*) UObject::GObjObjects()->Data[ 25733 ];

	APawn_execJumpOffPawn_Parms JumpOffPawn_Parms;

	this->ProcessEvent ( pFnJumpOffPawn, &JumpOffPawn_Parms, NULL );
};

// Function Engine.Pawn.gibbedBy
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::gibbedBy ( class AActor* Other )
{
	static UFunction* pFngibbedBy = NULL;

	if ( ! pFngibbedBy )
		pFngibbedBy = (UFunction*) UObject::GObjObjects()->Data[ 25731 ];

	APawn_execgibbedBy_Parms gibbedBy_Parms;
	gibbedBy_Parms.Other = Other;

	this->ProcessEvent ( pFngibbedBy, &gibbedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void APawn::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 25729 ];

	APawn_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Pawn.EncroachingOn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 25726 ];

	APawn_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Pawn.FaceRotation
// [0x00024102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_OptionalParm | CPF_Parm )

void APawn::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 25723 ];

	APawn_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Pawn.UpdatePawnRotation
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::eventUpdatePawnRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnUpdatePawnRotation = NULL;

	if ( ! pFnUpdatePawnRotation )
		pFnUpdatePawnRotation = (UFunction*) UObject::GObjObjects()->Data[ 25721 ];

	APawn_eventUpdatePawnRotation_Parms UpdatePawnRotation_Parms;
	memcpy ( &UpdatePawnRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnUpdatePawnRotation, &UpdatePawnRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientSetRotation
// [0x00020002] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::ClientSetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 25719 ];

	APawn_execClientSetRotation_Parms ClientSetRotation_Parms;
	memcpy ( &ClientSetRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function Engine.Pawn.ClientRestart
// [0x00020102] 
// Parameters infos:

void APawn::ClientRestart ( )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = (UFunction*) UObject::GObjObjects()->Data[ 25718 ];

	APawn_execClientRestart_Parms ClientRestart_Parms;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function Engine.Pawn.Restart
// [0x00020000] 
// Parameters infos:

void APawn::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = (UFunction*) UObject::GObjObjects()->Data[ 25717 ];

	APawn_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function Engine.Pawn.TakeFallingDamage
// [0x00020002] 
// Parameters infos:

void APawn::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = (UFunction*) UObject::GObjObjects()->Data[ 25715 ];

	APawn_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function Engine.Pawn.KilledBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   EventInstigator                ( CPF_Parm )

void APawn::KilledBy ( class APawn* EventInstigator )
{
	static UFunction* pFnKilledBy = NULL;

	if ( ! pFnKilledBy )
		pFnKilledBy = (UFunction*) UObject::GObjObjects()->Data[ 25712 ];

	APawn_execKilledBy_Parms KilledBy_Parms;
	KilledBy_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnKilledBy, &KilledBy_Parms, NULL );
};

// Function Engine.Pawn.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void APawn::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 25707 ];

	APawn_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.Pawn.HandleMomentum
// [0x00024002] 
// Parameters infos:
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void APawn::HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnHandleMomentum = NULL;

	if ( ! pFnHandleMomentum )
		pFnHandleMomentum = (UFunction*) UObject::GObjObjects()->Data[ 25702 ];

	APawn_execHandleMomentum_Parms HandleMomentum_Parms;
	memcpy ( &HandleMomentum_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &HandleMomentum_Parms.HitLocation, &HitLocation, 0xC );
	HandleMomentum_Parms.DamageType = DamageType;
	memcpy ( &HandleMomentum_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnHandleMomentum, &HandleMomentum_Parms, NULL );
};

// Function Engine.Pawn.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 25700 ];

	APawn_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function Engine.Pawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void APawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 25698 ];

	APawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function Engine.Pawn.ShouldCrouch
// [0x00020002] 
// Parameters infos:
// unsigned long                  bCrouch                        ( CPF_Parm )

void APawn::ShouldCrouch ( unsigned long bCrouch )
{
	static UFunction* pFnShouldCrouch = NULL;

	if ( ! pFnShouldCrouch )
		pFnShouldCrouch = (UFunction*) UObject::GObjObjects()->Data[ 25696 ];

	APawn_execShouldCrouch_Parms ShouldCrouch_Parms;
	ShouldCrouch_Parms.bCrouch = bCrouch;

	this->ProcessEvent ( pFnShouldCrouch, &ShouldCrouch_Parms, NULL );
};

// Function Engine.Pawn.UnCrouch
// [0x00020102] 
// Parameters infos:

void APawn::UnCrouch ( )
{
	static UFunction* pFnUnCrouch = NULL;

	if ( ! pFnUnCrouch )
		pFnUnCrouch = (UFunction*) UObject::GObjObjects()->Data[ 25695 ];

	APawn_execUnCrouch_Parms UnCrouch_Parms;

	this->ProcessEvent ( pFnUnCrouch, &UnCrouch_Parms, NULL );
};

// Function Engine.Pawn.OutsideWorldBounds
// [0x00020922] ( FUNC_Event )
// Parameters infos:

void APawn::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 25694 ];

	APawn_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function Engine.Pawn.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void APawn::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 25692 ];

	APawn_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function Engine.Pawn.ClientMessage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void APawn::eventClientMessage ( struct FString S, struct FName Type )
{
	static UFunction* pFnClientMessage = NULL;

	if ( ! pFnClientMessage )
		pFnClientMessage = (UFunction*) UObject::GObjObjects()->Data[ 25689 ];

	APawn_eventClientMessage_Parms ClientMessage_Parms;
	memcpy ( &ClientMessage_Parms.S, &S, 0xC );
	memcpy ( &ClientMessage_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnClientMessage, &ClientMessage_Parms, NULL );
};

// Function Engine.Pawn.HandlePickup
// [0x00020002] 
// Parameters infos:
// class AInventory*              Inv                            ( CPF_Parm )

void APawn::HandlePickup ( class AInventory* Inv )
{
	static UFunction* pFnHandlePickup = NULL;

	if ( ! pFnHandlePickup )
		pFnHandlePickup = (UFunction*) UObject::GObjObjects()->Data[ 25687 ];

	APawn_execHandlePickup_Parms HandlePickup_Parms;
	HandlePickup_Parms.Inv = Inv;

	this->ProcessEvent ( pFnHandlePickup, &HandlePickup_Parms, NULL );
};

// Function Engine.Pawn.LineOfSightTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::LineOfSightTo ( class AActor* Other )
{
	static UFunction* pFnLineOfSightTo = NULL;

	if ( ! pFnLineOfSightTo )
		pFnLineOfSightTo = (UFunction*) UObject::GObjObjects()->Data[ 24769 ];

	APawn_execLineOfSightTo_Parms LineOfSightTo_Parms;
	LineOfSightTo_Parms.Other = Other;

	this->ProcessEvent ( pFnLineOfSightTo, &LineOfSightTo_Parms, NULL );

	return LineOfSightTo_Parms.ReturnValue;
};

// Function Engine.Pawn.SetMoveTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void APawn::SetMoveTarget ( class AActor* NewTarget )
{
	static UFunction* pFnSetMoveTarget = NULL;

	if ( ! pFnSetMoveTarget )
		pFnSetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 25684 ];

	APawn_execSetMoveTarget_Parms SetMoveTarget_Parms;
	SetMoveTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnSetMoveTarget, &SetMoveTarget_Parms, NULL );
};

// Function Engine.Pawn.InGodMode
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InGodMode ( )
{
	static UFunction* pFnInGodMode = NULL;

	if ( ! pFnInGodMode )
		pFnInGodMode = (UFunction*) UObject::GObjObjects()->Data[ 21495 ];

	APawn_execInGodMode_Parms InGodMode_Parms;

	this->ProcessEvent ( pFnInGodMode, &InGodMode_Parms, NULL );

	return InGodMode_Parms.ReturnValue;
};

// Function Engine.Pawn.SetViewRotation
// [0x00020102] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void APawn::SetViewRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetViewRotation = NULL;

	if ( ! pFnSetViewRotation )
		pFnSetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 25682 ];

	APawn_execSetViewRotation_Parms SetViewRotation_Parms;
	memcpy ( &SetViewRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnSetViewRotation, &SetViewRotation_Parms, NULL );
};

// Function Engine.Pawn.GetAdjustedAimFor
// [0x00020102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator APawn::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 25678 ];

	APawn_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function Engine.Pawn.InFreeCam
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventInFreeCam ( )
{
	static UFunction* pFnInFreeCam = NULL;

	if ( ! pFnInFreeCam )
		pFnInFreeCam = (UFunction*) UObject::GObjObjects()->Data[ 25675 ];

	APawn_eventInFreeCam_Parms InFreeCam_Parms;

	this->ProcessEvent ( pFnInFreeCam, &InFreeCam_Parms, NULL );

	return InFreeCam_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBaseAimRotation
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::eventGetBaseAimRotation ( )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = (UFunction*) UObject::GObjObjects()->Data[ 9426 ];

	APawn_eventGetBaseAimRotation_Parms GetBaseAimRotation_Parms;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );

	return GetBaseAimRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetWeaponStartTraceLocation
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 CurrentWeapon                  ( CPF_OptionalParm | CPF_Parm )

struct FVector APawn::eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 25672 ];

	APawn_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.CurrentWeapon = CurrentWeapon;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetPawnViewLocation
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector APawn::eventGetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 25670 ];

	APawn_eventGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	pFnGetPawnViewLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	pFnGetPawnViewLocation->FunctionFlags |= 0x400;

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetViewRotation
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator APawn::eventGetViewRotation ( )
{
	static UFunction* pFnGetViewRotation = NULL;

	if ( ! pFnGetViewRotation )
		pFnGetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 23967 ];

	APawn_eventGetViewRotation_Parms GetViewRotation_Parms;

	pFnGetViewRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetViewRotation, &GetViewRotation_Parms, NULL );

	pFnGetViewRotation->FunctionFlags |= 0x400;

	return GetViewRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.GetActorEyesViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void APawn::eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetActorEyesViewPoint = NULL;

	if ( ! pFnGetActorEyesViewPoint )
		pFnGetActorEyesViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 25667 ];

	APawn_eventGetActorEyesViewPoint_Parms GetActorEyesViewPoint_Parms;

	this->ProcessEvent ( pFnGetActorEyesViewPoint, &GetActorEyesViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetActorEyesViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetActorEyesViewPoint_Parms.out_Rotation, 0xC );
};

// Function Engine.Pawn.ProcessViewRotation
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void APawn::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 25663 ];

	APawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function Engine.Pawn.IsFirstPerson
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFirstPerson ( )
{
	static UFunction* pFnIsFirstPerson = NULL;

	if ( ! pFnIsFirstPerson )
		pFnIsFirstPerson = (UFunction*) UObject::GObjObjects()->Data[ 25660 ];

	APawn_execIsFirstPerson_Parms IsFirstPerson_Parms;

	this->ProcessEvent ( pFnIsFirstPerson, &IsFirstPerson_Parms, NULL );

	return IsFirstPerson_Parms.ReturnValue;
};

// Function Engine.Pawn.IsLocalHuman
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsLocalHuman ( )
{
	static UFunction* pFnIsLocalHuman = NULL;

	if ( ! pFnIsLocalHuman )
		pFnIsLocalHuman = (UFunction*) UObject::GObjObjects()->Data[ 25658 ];

	APawn_execIsLocalHuman_Parms IsLocalHuman_Parms;

	pFnIsLocalHuman->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocalHuman, &IsLocalHuman_Parms, NULL );

	pFnIsLocalHuman->FunctionFlags |= 0x400;

	return IsLocalHuman_Parms.ReturnValue;
};

// Function Engine.Pawn.IsPlayerPawn
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsPlayerPawn ( )
{
	static UFunction* pFnIsPlayerPawn = NULL;

	if ( ! pFnIsPlayerPawn )
		pFnIsPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 16432 ];

	APawn_execIsPlayerPawn_Parms IsPlayerPawn_Parms;

	pFnIsPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayerPawn, &IsPlayerPawn_Parms, NULL );

	pFnIsPlayerPawn->FunctionFlags |= 0x400;

	return IsPlayerPawn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsLocallyControlled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsLocallyControlled ( )
{
	static UFunction* pFnIsLocallyControlled = NULL;

	if ( ! pFnIsLocallyControlled )
		pFnIsLocallyControlled = (UFunction*) UObject::GObjObjects()->Data[ 7057 ];

	APawn_execIsLocallyControlled_Parms IsLocallyControlled_Parms;

	pFnIsLocallyControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocallyControlled, &IsLocallyControlled_Parms, NULL );

	pFnIsLocallyControlled->FunctionFlags |= 0x400;

	return IsLocallyControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.IsHumanControlled
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             PawnController                 ( CPF_OptionalParm | CPF_Parm )

bool APawn::IsHumanControlled ( class AController* PawnController )
{
	static UFunction* pFnIsHumanControlled = NULL;

	if ( ! pFnIsHumanControlled )
		pFnIsHumanControlled = (UFunction*) UObject::GObjObjects()->Data[ 7055 ];

	APawn_execIsHumanControlled_Parms IsHumanControlled_Parms;
	IsHumanControlled_Parms.PawnController = PawnController;

	pFnIsHumanControlled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHumanControlled, &IsHumanControlled_Parms, NULL );

	pFnIsHumanControlled->FunctionFlags |= 0x400;

	return IsHumanControlled_Parms.ReturnValue;
};

// Function Engine.Pawn.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void APawn::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 25649 ];

	APawn_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Pawn.ClimbLadder
// [0x00020002] 
// Parameters infos:
// class ALadderVolume*           L                              ( CPF_Parm )

void APawn::ClimbLadder ( class ALadderVolume* L )
{
	static UFunction* pFnClimbLadder = NULL;

	if ( ! pFnClimbLadder )
		pFnClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 25647 ];

	APawn_execClimbLadder_Parms ClimbLadder_Parms;
	ClimbLadder_Parms.L = L;

	this->ProcessEvent ( pFnClimbLadder, &ClimbLadder_Parms, NULL );
};

// Function Engine.Pawn.EndClimbLadder
// [0x00020002] 
// Parameters infos:
// class ALadderVolume*           OldLadder                      ( CPF_Parm )

void APawn::EndClimbLadder ( class ALadderVolume* OldLadder )
{
	static UFunction* pFnEndClimbLadder = NULL;

	if ( ! pFnEndClimbLadder )
		pFnEndClimbLadder = (UFunction*) UObject::GObjObjects()->Data[ 25645 ];

	APawn_execEndClimbLadder_Parms EndClimbLadder_Parms;
	EndClimbLadder_Parms.OldLadder = OldLadder;

	this->ProcessEvent ( pFnEndClimbLadder, &EndClimbLadder_Parms, NULL );
};

// Function Engine.Pawn.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 25643 ];

	APawn_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function Engine.Pawn.SetWalking
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bNewIsWalking                  ( CPF_Parm )

void APawn::eventSetWalking ( unsigned long bNewIsWalking )
{
	static UFunction* pFnSetWalking = NULL;

	if ( ! pFnSetWalking )
		pFnSetWalking = (UFunction*) UObject::GObjObjects()->Data[ 25641 ];

	APawn_eventSetWalking_Parms SetWalking_Parms;
	SetWalking_Parms.bNewIsWalking = bNewIsWalking;

	this->ProcessEvent ( pFnSetWalking, &SetWalking_Parms, NULL );
};

// Function Engine.Pawn.RangedAttackTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::RangedAttackTime ( )
{
	static UFunction* pFnRangedAttackTime = NULL;

	if ( ! pFnRangedAttackTime )
		pFnRangedAttackTime = (UFunction*) UObject::GObjObjects()->Data[ 25639 ];

	APawn_execRangedAttackTime_Parms RangedAttackTime_Parms;

	this->ProcessEvent ( pFnRangedAttackTime, &RangedAttackTime_Parms, NULL );

	return RangedAttackTime_Parms.ReturnValue;
};

// Function Engine.Pawn.RecommendLongRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::RecommendLongRangedAttack ( )
{
	static UFunction* pFnRecommendLongRangedAttack = NULL;

	if ( ! pFnRecommendLongRangedAttack )
		pFnRecommendLongRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 25637 ];

	APawn_execRecommendLongRangedAttack_Parms RecommendLongRangedAttack_Parms;

	this->ProcessEvent ( pFnRecommendLongRangedAttack, &RecommendLongRangedAttack_Parms, NULL );

	return RecommendLongRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanGrabLadder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanGrabLadder ( )
{
	static UFunction* pFnCanGrabLadder = NULL;

	if ( ! pFnCanGrabLadder )
		pFnCanGrabLadder = (UFunction*) UObject::GObjObjects()->Data[ 24288 ];

	APawn_execCanGrabLadder_Parms CanGrabLadder_Parms;

	this->ProcessEvent ( pFnCanGrabLadder, &CanGrabLadder_Parms, NULL );

	return CanGrabLadder_Parms.ReturnValue;
};

// Function Engine.Pawn.DropToGround
// [0x00020002] 
// Parameters infos:

void APawn::DropToGround ( )
{
	static UFunction* pFnDropToGround = NULL;

	if ( ! pFnDropToGround )
		pFnDropToGround = (UFunction*) UObject::GObjObjects()->Data[ 25636 ];

	APawn_execDropToGround_Parms DropToGround_Parms;

	this->ProcessEvent ( pFnDropToGround, &DropToGround_Parms, NULL );
};

// Function Engine.Pawn.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName APawn::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 11556 ];

	APawn_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Pawn.UnPossessed
// [0x00020002] 
// Parameters infos:

void APawn::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 25634 ];

	APawn_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Pawn.UpdateControllerOnPossess
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::UpdateControllerOnPossess ( unsigned long bVehicleTransition )
{
	static UFunction* pFnUpdateControllerOnPossess = NULL;

	if ( ! pFnUpdateControllerOnPossess )
		pFnUpdateControllerOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 25632 ];

	APawn_execUpdateControllerOnPossess_Parms UpdateControllerOnPossess_Parms;
	UpdateControllerOnPossess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnUpdateControllerOnPossess, &UpdateControllerOnPossess_Parms, NULL );
};

// Function Engine.Pawn.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void APawn::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 25629 ];

	APawn_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Pawn.PlayTeleportEffect
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOut                           ( CPF_Parm )
// unsigned long                  bSound                         ( CPF_Parm )

void APawn::PlayTeleportEffect ( unsigned long bOut, unsigned long bSound )
{
	static UFunction* pFnPlayTeleportEffect = NULL;

	if ( ! pFnPlayTeleportEffect )
		pFnPlayTeleportEffect = (UFunction*) UObject::GObjObjects()->Data[ 25626 ];

	APawn_execPlayTeleportEffect_Parms PlayTeleportEffect_Parms;
	PlayTeleportEffect_Parms.bOut = bOut;
	PlayTeleportEffect_Parms.bSound = bSound;

	this->ProcessEvent ( pFnPlayTeleportEffect, &PlayTeleportEffect_Parms, NULL );
};

// Function Engine.Pawn.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APawn::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 9593 ];

	APawn_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.Pawn.NeedToTurn
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 targ                           ( CPF_Parm )

bool APawn::NeedToTurn ( struct FVector targ )
{
	static UFunction* pFnNeedToTurn = NULL;

	if ( ! pFnNeedToTurn )
		pFnNeedToTurn = (UFunction*) UObject::GObjObjects()->Data[ 25621 ];

	APawn_execNeedToTurn_Parms NeedToTurn_Parms;
	memcpy ( &NeedToTurn_Parms.targ, &targ, 0xC );

	this->ProcessEvent ( pFnNeedToTurn, &NeedToTurn_Parms, NULL );

	return NeedToTurn_Parms.ReturnValue;
};

// Function Engine.Pawn.IsFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsFiring ( )
{
	static UFunction* pFnIsFiring = NULL;

	if ( ! pFnIsFiring )
		pFnIsFiring = (UFunction*) UObject::GObjObjects()->Data[ 25617 ];

	APawn_execIsFiring_Parms IsFiring_Parms;

	this->ProcessEvent ( pFnIsFiring, &IsFiring_Parms, NULL );

	return IsFiring_Parms.ReturnValue;
};

// Function Engine.Pawn.HasRangedAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::HasRangedAttack ( )
{
	static UFunction* pFnHasRangedAttack = NULL;

	if ( ! pFnHasRangedAttack )
		pFnHasRangedAttack = (UFunction*) UObject::GObjObjects()->Data[ 25615 ];

	APawn_execHasRangedAttack_Parms HasRangedAttack_Parms;

	this->ProcessEvent ( pFnHasRangedAttack, &HasRangedAttack_Parms, NULL );

	return HasRangedAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.FireOnRelease
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::FireOnRelease ( )
{
	static UFunction* pFnFireOnRelease = NULL;

	if ( ! pFnFireOnRelease )
		pFnFireOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 25611 ];

	APawn_execFireOnRelease_Parms FireOnRelease_Parms;

	this->ProcessEvent ( pFnFireOnRelease, &FireOnRelease_Parms, NULL );

	return FireOnRelease_Parms.ReturnValue;
};

// Function Engine.Pawn.TooCloseToAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::TooCloseToAttack ( class AActor* Other )
{
	static UFunction* pFnTooCloseToAttack = NULL;

	if ( ! pFnTooCloseToAttack )
		pFnTooCloseToAttack = (UFunction*) UObject::GObjObjects()->Data[ 25608 ];

	APawn_execTooCloseToAttack_Parms TooCloseToAttack_Parms;
	TooCloseToAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnTooCloseToAttack, &TooCloseToAttack_Parms, NULL );

	return TooCloseToAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.CanAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool APawn::CanAttack ( class AActor* Other )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 25603 ];

	APawn_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.Other = Other;

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function Engine.Pawn.BotFire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFinished                      ( CPF_Parm )

bool APawn::BotFire ( unsigned long bFinished )
{
	static UFunction* pFnBotFire = NULL;

	if ( ! pFnBotFire )
		pFnBotFire = (UFunction*) UObject::GObjObjects()->Data[ 25600 ];

	APawn_execBotFire_Parms BotFire_Parms;
	BotFire_Parms.bFinished = bFinished;

	this->ProcessEvent ( pFnBotFire, &BotFire_Parms, NULL );

	return BotFire_Parms.ReturnValue;
};

// Function Engine.Pawn.WeaponStoppedFiring
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = (UFunction*) UObject::GObjObjects()->Data[ 25597 ];

	APawn_execWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;
	WeaponStoppedFiring_Parms.InWeapon = InWeapon;
	WeaponStoppedFiring_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function Engine.Pawn.WeaponFired
// [0x00024102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void APawn::WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 25593 ];

	APawn_execWeaponFired_Parms WeaponFired_Parms;
	WeaponFired_Parms.InWeapon = InWeapon;
	WeaponFired_Parms.bViaReplication = bViaReplication;
	memcpy ( &WeaponFired_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function Engine.Pawn.FlashLocationUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// struct FVector                 InFlashLocation                ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication )
{
	static UFunction* pFnFlashLocationUpdated = NULL;

	if ( ! pFnFlashLocationUpdated )
		pFnFlashLocationUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25589 ];

	APawn_execFlashLocationUpdated_Parms FlashLocationUpdated_Parms;
	FlashLocationUpdated_Parms.InWeapon = InWeapon;
	memcpy ( &FlashLocationUpdated_Parms.InFlashLocation, &InFlashLocation, 0xC );
	FlashLocationUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashLocationUpdated, &FlashLocationUpdated_Parms, NULL );
};

// Function Engine.Pawn.ClearFlashLocation
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )

void APawn::ClearFlashLocation ( class AWeapon* InWeapon )
{
	static UFunction* pFnClearFlashLocation = NULL;

	if ( ! pFnClearFlashLocation )
		pFnClearFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 25587 ];

	APawn_execClearFlashLocation_Parms ClearFlashLocation_Parms;
	ClearFlashLocation_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnClearFlashLocation, &ClearFlashLocation_Parms, NULL );
};

// Function Engine.Pawn.SetFlashLocation
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// struct FVector                 NewLoc                         ( CPF_Parm )

void APawn::SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc )
{
	static UFunction* pFnSetFlashLocation = NULL;

	if ( ! pFnSetFlashLocation )
		pFnSetFlashLocation = (UFunction*) UObject::GObjObjects()->Data[ 25583 ];

	APawn_execSetFlashLocation_Parms SetFlashLocation_Parms;
	SetFlashLocation_Parms.InWeapon = InWeapon;
	SetFlashLocation_Parms.InFiringMode = InFiringMode;
	memcpy ( &SetFlashLocation_Parms.NewLoc, &NewLoc, 0xC );

	this->ProcessEvent ( pFnSetFlashLocation, &SetFlashLocation_Parms, NULL );
};

// Function Engine.Pawn.ClearFlashCount
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )

void APawn::ClearFlashCount ( class AWeapon* InWeapon )
{
	static UFunction* pFnClearFlashCount = NULL;

	if ( ! pFnClearFlashCount )
		pFnClearFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 25581 ];

	APawn_execClearFlashCount_Parms ClearFlashCount_Parms;
	ClearFlashCount_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnClearFlashCount, &ClearFlashCount_Parms, NULL );
};

// Function Engine.Pawn.FlashCountUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFlashCount                   ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication )
{
	static UFunction* pFnFlashCountUpdated = NULL;

	if ( ! pFnFlashCountUpdated )
		pFnFlashCountUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25577 ];

	APawn_execFlashCountUpdated_Parms FlashCountUpdated_Parms;
	FlashCountUpdated_Parms.InWeapon = InWeapon;
	FlashCountUpdated_Parms.InFlashCount = InFlashCount;
	FlashCountUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFlashCountUpdated, &FlashCountUpdated_Parms, NULL );
};

// Function Engine.Pawn.IncrementFlashCount
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )

void APawn::IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = (UFunction*) UObject::GObjObjects()->Data[ 25574 ];

	APawn_execIncrementFlashCount_Parms IncrementFlashCount_Parms;
	IncrementFlashCount_Parms.InWeapon = InWeapon;
	IncrementFlashCount_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function Engine.Pawn.FiringModeUpdated
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )
// unsigned long                  bViaReplication                ( CPF_Parm )

void APawn::FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication )
{
	static UFunction* pFnFiringModeUpdated = NULL;

	if ( ! pFnFiringModeUpdated )
		pFnFiringModeUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25570 ];

	APawn_execFiringModeUpdated_Parms FiringModeUpdated_Parms;
	FiringModeUpdated_Parms.InWeapon = InWeapon;
	FiringModeUpdated_Parms.InFiringMode = InFiringMode;
	FiringModeUpdated_Parms.bViaReplication = bViaReplication;

	this->ProcessEvent ( pFnFiringModeUpdated, &FiringModeUpdated_Parms, NULL );
};

// Function Engine.Pawn.SetFiringMode
// [0x00020102] 
// Parameters infos:
// class AWeapon*                 InWeapon                       ( CPF_Parm )
// unsigned char                  InFiringMode                   ( CPF_Parm )

void APawn::SetFiringMode ( class AWeapon* InWeapon, unsigned char InFiringMode )
{
	static UFunction* pFnSetFiringMode = NULL;

	if ( ! pFnSetFiringMode )
		pFnSetFiringMode = (UFunction*) UObject::GObjObjects()->Data[ 25567 ];

	APawn_execSetFiringMode_Parms SetFiringMode_Parms;
	SetFiringMode_Parms.InWeapon = InWeapon;
	SetFiringMode_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnSetFiringMode, &SetFiringMode_Parms, NULL );
};

// Function Engine.Pawn.GetWeaponFiringMode
// [0x00020102] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 InWeapon                       ( CPF_Parm )

unsigned char APawn::GetWeaponFiringMode ( class AWeapon* InWeapon )
{
	static UFunction* pFnGetWeaponFiringMode = NULL;

	if ( ! pFnGetWeaponFiringMode )
		pFnGetWeaponFiringMode = (UFunction*) UObject::GObjObjects()->Data[ 25564 ];

	APawn_execGetWeaponFiringMode_Parms GetWeaponFiringMode_Parms;
	GetWeaponFiringMode_Parms.InWeapon = InWeapon;

	this->ProcessEvent ( pFnGetWeaponFiringMode, &GetWeaponFiringMode_Parms, NULL );

	return GetWeaponFiringMode_Parms.ReturnValue;
};

// Function Engine.Pawn.StopFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StopFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = (UFunction*) UObject::GObjObjects()->Data[ 25562 ];

	APawn_execStopFire_Parms StopFire_Parms;
	StopFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function Engine.Pawn.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void APawn::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 25560 ];

	APawn_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function Engine.Pawn.StopFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::StopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = (UFunction*) UObject::GObjObjects()->Data[ 9416 ];

	APawn_execStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );

	return StopFiring_Parms.ReturnValue;
};

// Function Engine.Pawn.Reset
// [0x00020002] 
// Parameters infos:

void APawn::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 25558 ];

	APawn_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Pawn.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void APawn::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 25557 ];

	APawn_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Pawn.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void APawn::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 25556 ];

	APawn_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Pawn.SpecialMoveThruEdge
// [0x00024800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  EdgeType                       ( CPF_Parm )
// int                            Dir                            ( CPF_Parm )
// struct FVector                 MoveStart                      ( CPF_Parm )
// struct FVector                 MoveDest                       ( CPF_Parm )
// class AActor*                  RelActor                       ( CPF_OptionalParm | CPF_Parm )
// int                            RelItem                        ( CPF_OptionalParm | CPF_Parm )
// class UNavigationHandle*       NavHandle                      ( CPF_OptionalParm | CPF_Parm )

bool APawn::eventSpecialMoveThruEdge ( unsigned char EdgeType, int Dir, struct FVector MoveStart, struct FVector MoveDest, class AActor* RelActor, int RelItem, class UNavigationHandle* NavHandle )
{
	static UFunction* pFnSpecialMoveThruEdge = NULL;

	if ( ! pFnSpecialMoveThruEdge )
		pFnSpecialMoveThruEdge = (UFunction*) UObject::GObjObjects()->Data[ 25547 ];

	APawn_eventSpecialMoveThruEdge_Parms SpecialMoveThruEdge_Parms;
	SpecialMoveThruEdge_Parms.EdgeType = EdgeType;
	SpecialMoveThruEdge_Parms.Dir = Dir;
	memcpy ( &SpecialMoveThruEdge_Parms.MoveStart, &MoveStart, 0xC );
	memcpy ( &SpecialMoveThruEdge_Parms.MoveDest, &MoveDest, 0xC );
	SpecialMoveThruEdge_Parms.RelActor = RelActor;
	SpecialMoveThruEdge_Parms.RelItem = RelItem;
	SpecialMoveThruEdge_Parms.NavHandle = NavHandle;

	this->ProcessEvent ( pFnSpecialMoveThruEdge, &SpecialMoveThruEdge_Parms, NULL );

	return SpecialMoveThruEdge_Parms.ReturnValue;
};

// Function Engine.Pawn.SpecialMoveTo
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )
// class AActor*                  Next                           ( CPF_Parm )

bool APawn::SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next )
{
	static UFunction* pFnSpecialMoveTo = NULL;

	if ( ! pFnSpecialMoveTo )
		pFnSpecialMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 13288 ];

	APawn_execSpecialMoveTo_Parms SpecialMoveTo_Parms;
	SpecialMoveTo_Parms.Start = Start;
	SpecialMoveTo_Parms.End = End;
	SpecialMoveTo_Parms.Next = Next;

	this->ProcessEvent ( pFnSpecialMoveTo, &SpecialMoveTo_Parms, NULL );

	return SpecialMoveTo_Parms.ReturnValue;
};

// Function Engine.Pawn.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 25542 ];

	APawn_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;

	return TermRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.InitRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 25540 ];

	APawn_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;

	return InitRagdoll_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBoundingCylinder
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm | CPF_OutParm )
// float                          CollisionHeight                ( CPF_Parm | CPF_OutParm )

void APawn::GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight )
{
	static UFunction* pFnGetBoundingCylinder = NULL;

	if ( ! pFnGetBoundingCylinder )
		pFnGetBoundingCylinder = (UFunction*) UObject::GObjObjects()->Data[ 25537 ];

	APawn_execGetBoundingCylinder_Parms GetBoundingCylinder_Parms;

	pFnGetBoundingCylinder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundingCylinder, &GetBoundingCylinder_Parms, NULL );

	pFnGetBoundingCylinder->FunctionFlags |= 0x400;

	if ( CollisionRadius )
		*CollisionRadius = GetBoundingCylinder_Parms.CollisionRadius;

	if ( CollisionHeight )
		*CollisionHeight = GetBoundingCylinder_Parms.CollisionHeight;
};

// Function Engine.Pawn.ReachedDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::ReachedDesiredRotation ( )
{
	static UFunction* pFnReachedDesiredRotation = NULL;

	if ( ! pFnReachedDesiredRotation )
		pFnReachedDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 25535 ];

	APawn_execReachedDesiredRotation_Parms ReachedDesiredRotation_Parms;

	pFnReachedDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedDesiredRotation, &ReachedDesiredRotation_Parms, NULL );

	pFnReachedDesiredRotation->FunctionFlags |= 0x400;

	return ReachedDesiredRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.SetPushesRigidBodies
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  NewPush                        ( CPF_Parm )

void APawn::SetPushesRigidBodies ( unsigned long NewPush )
{
	static UFunction* pFnSetPushesRigidBodies = NULL;

	if ( ! pFnSetPushesRigidBodies )
		pFnSetPushesRigidBodies = (UFunction*) UObject::GObjObjects()->Data[ 25533 ];

	APawn_execSetPushesRigidBodies_Parms SetPushesRigidBodies_Parms;
	SetPushesRigidBodies_Parms.NewPush = NewPush;

	pFnSetPushesRigidBodies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPushesRigidBodies, &SetPushesRigidBodies_Parms, NULL );

	pFnSetPushesRigidBodies->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ForceCrouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APawn::ForceCrouch ( )
{
	static UFunction* pFnForceCrouch = NULL;

	if ( ! pFnForceCrouch )
		pFnForceCrouch = (UFunction*) UObject::GObjObjects()->Data[ 25532 ];

	APawn_execForceCrouch_Parms ForceCrouch_Parms;

	pFnForceCrouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceCrouch, &ForceCrouch_Parms, NULL );

	pFnForceCrouch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ReachedPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )
// class AActor*                  NewAnchor                      ( CPF_Parm )

bool APawn::ReachedPoint ( struct FVector Point, class AActor* NewAnchor )
{
	static UFunction* pFnReachedPoint = NULL;

	if ( ! pFnReachedPoint )
		pFnReachedPoint = (UFunction*) UObject::GObjObjects()->Data[ 25528 ];

	APawn_execReachedPoint_Parms ReachedPoint_Parms;
	memcpy ( &ReachedPoint_Parms.Point, &Point, 0xC );
	ReachedPoint_Parms.NewAnchor = NewAnchor;

	pFnReachedPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedPoint, &ReachedPoint_Parms, NULL );

	pFnReachedPoint->FunctionFlags |= 0x400;

	return ReachedPoint_Parms.ReturnValue;
};

// Function Engine.Pawn.ReachedDestination
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Goal                           ( CPF_Parm )

bool APawn::ReachedDestination ( class AActor* Goal )
{
	static UFunction* pFnReachedDestination = NULL;

	if ( ! pFnReachedDestination )
		pFnReachedDestination = (UFunction*) UObject::GObjObjects()->Data[ 13152 ];

	APawn_execReachedDestination_Parms ReachedDestination_Parms;
	ReachedDestination_Parms.Goal = Goal;

	pFnReachedDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReachedDestination, &ReachedDestination_Parms, NULL );

	pFnReachedDestination->FunctionFlags |= 0x400;

	return ReachedDestination_Parms.ReturnValue;
};

// Function Engine.Pawn.GetBestAnchor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bStartPoint                    ( CPF_Parm )
// unsigned long                  bOnlyCheckVisible              ( CPF_Parm )
// float                          out_Dist                       ( CPF_Parm | CPF_OutParm )

class ANavigationPoint* APawn::GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist )
{
	static UFunction* pFnGetBestAnchor = NULL;

	if ( ! pFnGetBestAnchor )
		pFnGetBestAnchor = (UFunction*) UObject::GObjObjects()->Data[ 22854 ];

	APawn_execGetBestAnchor_Parms GetBestAnchor_Parms;
	GetBestAnchor_Parms.TestActor = TestActor;
	memcpy ( &GetBestAnchor_Parms.TestLocation, &TestLocation, 0xC );
	GetBestAnchor_Parms.bStartPoint = bStartPoint;
	GetBestAnchor_Parms.bOnlyCheckVisible = bOnlyCheckVisible;

	pFnGetBestAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestAnchor, &GetBestAnchor_Parms, NULL );

	pFnGetBestAnchor->FunctionFlags |= 0x400;

	if ( out_Dist )
		*out_Dist = GetBestAnchor_Parms.out_Dist;

	return GetBestAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.SetAnchor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        NewAnchor                      ( CPF_Parm )

void APawn::SetAnchor ( class ANavigationPoint* NewAnchor )
{
	static UFunction* pFnSetAnchor = NULL;

	if ( ! pFnSetAnchor )
		pFnSetAnchor = (UFunction*) UObject::GObjObjects()->Data[ 25520 ];

	APawn_execSetAnchor_Parms SetAnchor_Parms;
	SetAnchor_Parms.NewAnchor = NewAnchor;

	pFnSetAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnchor, &SetAnchor_Parms, NULL );

	pFnSetAnchor->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetRemoteViewPitch
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NewRemoteViewPitch             ( CPF_Parm )

void APawn::SetRemoteViewPitch ( int NewRemoteViewPitch )
{
	static UFunction* pFnSetRemoteViewPitch = NULL;

	if ( ! pFnSetRemoteViewPitch )
		pFnSetRemoteViewPitch = (UFunction*) UObject::GObjObjects()->Data[ 11977 ];

	APawn_execSetRemoteViewPitch_Parms SetRemoteViewPitch_Parms;
	SetRemoteViewPitch_Parms.NewRemoteViewPitch = NewRemoteViewPitch;

	pFnSetRemoteViewPitch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRemoteViewPitch, &SetRemoteViewPitch_Parms, NULL );

	pFnSetRemoteViewPitch->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsInvisible ( )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = (UFunction*) UObject::GObjObjects()->Data[ 25517 ];

	APawn_execIsInvisible_Parms IsInvisible_Parms;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function Engine.Pawn.IsValidEnemyTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  PRI                            ( CPF_Const | CPF_Parm )
// unsigned long                  bNoPRIisEnemy                  ( CPF_Parm )

bool APawn::IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy )
{
	static UFunction* pFnIsValidEnemyTargetFor = NULL;

	if ( ! pFnIsValidEnemyTargetFor )
		pFnIsValidEnemyTargetFor = (UFunction*) UObject::GObjObjects()->Data[ 25513 ];

	APawn_execIsValidEnemyTargetFor_Parms IsValidEnemyTargetFor_Parms;
	IsValidEnemyTargetFor_Parms.PRI = PRI;
	IsValidEnemyTargetFor_Parms.bNoPRIisEnemy = bNoPRIisEnemy;

	pFnIsValidEnemyTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidEnemyTargetFor, &IsValidEnemyTargetFor_Parms, NULL );

	pFnIsValidEnemyTargetFor->FunctionFlags |= 0x400;

	return IsValidEnemyTargetFor_Parms.ReturnValue;
};

// Function Engine.Pawn.GetFallDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float APawn::GetFallDuration ( )
{
	static UFunction* pFnGetFallDuration = NULL;

	if ( ! pFnGetFallDuration )
		pFnGetFallDuration = (UFunction*) UObject::GObjObjects()->Data[ 25511 ];

	APawn_execGetFallDuration_Parms GetFallDuration_Parms;

	pFnGetFallDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFallDuration, &GetFallDuration_Parms, NULL );

	pFnGetFallDuration->FunctionFlags |= 0x400;

	return GetFallDuration_Parms.ReturnValue;
};

// Function Engine.Pawn.SuggestJumpVelocity
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Destination                    ( CPF_Parm )
// struct FVector                 Start                          ( CPF_Parm )
// unsigned long                  bRequireFallLanding            ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 JumpVelocity                   ( CPF_Parm | CPF_OutParm )

bool APawn::SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, unsigned long bRequireFallLanding, struct FVector* JumpVelocity )
{
	static UFunction* pFnSuggestJumpVelocity = NULL;

	if ( ! pFnSuggestJumpVelocity )
		pFnSuggestJumpVelocity = (UFunction*) UObject::GObjObjects()->Data[ 25505 ];

	APawn_execSuggestJumpVelocity_Parms SuggestJumpVelocity_Parms;
	memcpy ( &SuggestJumpVelocity_Parms.Destination, &Destination, 0xC );
	memcpy ( &SuggestJumpVelocity_Parms.Start, &Start, 0xC );
	SuggestJumpVelocity_Parms.bRequireFallLanding = bRequireFallLanding;

	pFnSuggestJumpVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestJumpVelocity, &SuggestJumpVelocity_Parms, NULL );

	pFnSuggestJumpVelocity->FunctionFlags |= 0x400;

	if ( JumpVelocity )
		memcpy ( JumpVelocity, &SuggestJumpVelocity_Parms.JumpVelocity, 0xC );

	return SuggestJumpVelocity_Parms.ReturnValue;
};

// Function Engine.Pawn.ValidAnchor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::ValidAnchor ( )
{
	static UFunction* pFnValidAnchor = NULL;

	if ( ! pFnValidAnchor )
		pFnValidAnchor = (UFunction*) UObject::GObjObjects()->Data[ 22852 ];

	APawn_execValidAnchor_Parms ValidAnchor_Parms;

	pFnValidAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidAnchor, &ValidAnchor_Parms, NULL );

	pFnValidAnchor->FunctionFlags |= 0x400;

	return ValidAnchor_Parms.ReturnValue;
};

// Function Engine.Pawn.AdjustDestination
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  GoalActor                      ( CPF_Parm )
// struct FVector                 Dest                           ( CPF_OptionalParm | CPF_Parm )

struct FVector APawn::AdjustDestination ( class AActor* GoalActor, struct FVector Dest )
{
	static UFunction* pFnAdjustDestination = NULL;

	if ( ! pFnAdjustDestination )
		pFnAdjustDestination = (UFunction*) UObject::GObjObjects()->Data[ 25501 ];

	APawn_execAdjustDestination_Parms AdjustDestination_Parms;
	AdjustDestination_Parms.GoalActor = GoalActor;
	memcpy ( &AdjustDestination_Parms.Dest, &Dest, 0xC );

	pFnAdjustDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustDestination, &AdjustDestination_Parms, NULL );

	pFnAdjustDestination->FunctionFlags |= 0x400;

	return AdjustDestination_Parms.ReturnValue;
};

// Function Engine.Pawn.IsAliveAndWell
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsAliveAndWell ( )
{
	static UFunction* pFnIsAliveAndWell = NULL;

	if ( ! pFnIsAliveAndWell )
		pFnIsAliveAndWell = (UFunction*) UObject::GObjObjects()->Data[ 25499 ];

	APawn_execIsAliveAndWell_Parms IsAliveAndWell_Parms;

	pFnIsAliveAndWell->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAliveAndWell, &IsAliveAndWell_Parms, NULL );

	pFnIsAliveAndWell->FunctionFlags |= 0x400;

	return IsAliveAndWell_Parms.ReturnValue;
};

// Function Engine.Pawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APawn::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 25497 ];

	APawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Pawn.SetSkelControlScale
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void APawn::eventSetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnSetSkelControlScale = NULL;

	if ( ! pFnSetSkelControlScale )
		pFnSetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 25494 ];

	APawn_eventSetSkelControlScale_Parms SetSkelControlScale_Parms;
	memcpy ( &SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	SetSkelControlScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetSkelControlScale, &SetSkelControlScale_Parms, NULL );
};

// Function Engine.Pawn.SetMorphWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void APawn::eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnSetMorphWeight = NULL;

	if ( ! pFnSetMorphWeight )
		pFnSetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 25491 ];

	APawn_eventSetMorphWeight_Parms SetMorphWeight_Parms;
	memcpy ( &SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	SetMorphWeight_Parms.MorphWeight = MorphWeight;

	this->ProcessEvent ( pFnSetMorphWeight, &SetMorphWeight_Parms, NULL );
};

// Function Engine.Pawn.GetActorFaceFXAsset
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UFaceFXAsset*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UFaceFXAsset* APawn::eventGetActorFaceFXAsset ( )
{
	static UFunction* pFnGetActorFaceFXAsset = NULL;

	if ( ! pFnGetActorFaceFXAsset )
		pFnGetActorFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 25488 ];

	APawn_eventGetActorFaceFXAsset_Parms GetActorFaceFXAsset_Parms;

	this->ProcessEvent ( pFnGetActorFaceFXAsset, &GetActorFaceFXAsset_Parms, NULL );

	return GetActorFaceFXAsset_Parms.ReturnValue;
};

// Function Engine.Pawn.FaceFXAudioFinished
// [0x00020100] 
// Parameters infos:
// class UAudioComponent*         AC                             ( CPF_Parm | CPF_EditInline )

void APawn::FaceFXAudioFinished ( class UAudioComponent* AC )
{
	static UFunction* pFnFaceFXAudioFinished = NULL;

	if ( ! pFnFaceFXAudioFinished )
		pFnFaceFXAudioFinished = (UFunction*) UObject::GObjObjects()->Data[ 25486 ];

	APawn_execFaceFXAudioFinished_Parms FaceFXAudioFinished_Parms;
	FaceFXAudioFinished_Parms.AC = AC;

	this->ProcessEvent ( pFnFaceFXAudioFinished, &FaceFXAudioFinished_Parms, NULL );
};

// Function Engine.Pawn.OnPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// class USeqAct_PlayFaceFXAnim*  inAction                       ( CPF_Parm )

void APawn::OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction )
{
	static UFunction* pFnOnPlayFaceFXAnim = NULL;

	if ( ! pFnOnPlayFaceFXAnim )
		pFnOnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 25479 ];

	APawn_execOnPlayFaceFXAnim_Parms OnPlayFaceFXAnim_Parms;
	OnPlayFaceFXAnim_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnPlayFaceFXAnim, &OnPlayFaceFXAnim_Parms, NULL );
};

// Function Engine.Pawn.CanActorPlayFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::CanActorPlayFaceFXAnim ( )
{
	static UFunction* pFnCanActorPlayFaceFXAnim = NULL;

	if ( ! pFnCanActorPlayFaceFXAnim )
		pFnCanActorPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 25477 ];

	APawn_execCanActorPlayFaceFXAnim_Parms CanActorPlayFaceFXAnim_Parms;

	this->ProcessEvent ( pFnCanActorPlayFaceFXAnim, &CanActorPlayFaceFXAnim_Parms, NULL );

	return CanActorPlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Pawn.IsActorPlayingFaceFXAnim
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsActorPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsActorPlayingFaceFXAnim = NULL;

	if ( ! pFnIsActorPlayingFaceFXAnim )
		pFnIsActorPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 25475 ];

	APawn_execIsActorPlayingFaceFXAnim_Parms IsActorPlayingFaceFXAnim_Parms;

	this->ProcessEvent ( pFnIsActorPlayingFaceFXAnim, &IsActorPlayingFaceFXAnim_Parms, NULL );

	return IsActorPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Pawn.GetFaceFXAudioComponent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UAudioComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UAudioComponent* APawn::eventGetFaceFXAudioComponent ( )
{
	static UFunction* pFnGetFaceFXAudioComponent = NULL;

	if ( ! pFnGetFaceFXAudioComponent )
		pFnGetFaceFXAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 25473 ];

	APawn_eventGetFaceFXAudioComponent_Parms GetFaceFXAudioComponent_Parms;

	this->ProcessEvent ( pFnGetFaceFXAudioComponent, &GetFaceFXAudioComponent_Parms, NULL );

	return GetFaceFXAudioComponent_Parms.ReturnValue;
};

// Function Engine.Pawn.StopActorFaceFXAnim
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventStopActorFaceFXAnim ( )
{
	static UFunction* pFnStopActorFaceFXAnim = NULL;

	if ( ! pFnStopActorFaceFXAnim )
		pFnStopActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 25472 ];

	APawn_eventStopActorFaceFXAnim_Parms StopActorFaceFXAnim_Parms;

	this->ProcessEvent ( pFnStopActorFaceFXAnim, &StopActorFaceFXAnim_Parms, NULL );
};

// Function Engine.Pawn.PlayActorFaceFXAnim
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          AnimSet                        ( CPF_Parm )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SeqName                        ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )
// class UAkEvent*                AkEventToPlay                  ( CPF_Parm )

bool APawn::eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay )
{
	static UFunction* pFnPlayActorFaceFXAnim = NULL;

	if ( ! pFnPlayActorFaceFXAnim )
		pFnPlayActorFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 9328 ];

	APawn_eventPlayActorFaceFXAnim_Parms PlayActorFaceFXAnim_Parms;
	PlayActorFaceFXAnim_Parms.AnimSet = AnimSet;
	memcpy ( &PlayActorFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	memcpy ( &PlayActorFaceFXAnim_Parms.SeqName, &SeqName, 0xC );
	PlayActorFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;
	PlayActorFaceFXAnim_Parms.AkEventToPlay = AkEventToPlay;

	this->ProcessEvent ( pFnPlayActorFaceFXAnim, &PlayActorFaceFXAnim_Parms, NULL );

	return PlayActorFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.Pawn.MAT_FinishAIGroup
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void APawn::eventMAT_FinishAIGroup ( )
{
	static UFunction* pFnMAT_FinishAIGroup = NULL;

	if ( ! pFnMAT_FinishAIGroup )
		pFnMAT_FinishAIGroup = (UFunction*) UObject::GObjObjects()->Data[ 25466 ];

	APawn_eventMAT_FinishAIGroup_Parms MAT_FinishAIGroup_Parms;

	this->ProcessEvent ( pFnMAT_FinishAIGroup, &MAT_FinishAIGroup_Parms, NULL );
};

// Function Engine.Pawn.MAT_BeginAIGroup
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 StartLoc                       ( CPF_Parm )
// struct FRotator                StartRot                       ( CPF_Parm )

void APawn::eventMAT_BeginAIGroup ( struct FVector StartLoc, struct FRotator StartRot )
{
	static UFunction* pFnMAT_BeginAIGroup = NULL;

	if ( ! pFnMAT_BeginAIGroup )
		pFnMAT_BeginAIGroup = (UFunction*) UObject::GObjObjects()->Data[ 25463 ];

	APawn_eventMAT_BeginAIGroup_Parms MAT_BeginAIGroup_Parms;
	memcpy ( &MAT_BeginAIGroup_Parms.StartLoc, &StartLoc, 0xC );
	memcpy ( &MAT_BeginAIGroup_Parms.StartRot, &StartRot, 0xC );

	this->ProcessEvent ( pFnMAT_BeginAIGroup, &MAT_BeginAIGroup_Parms, NULL );
};

// Function Engine.Pawn.FinishAIGroup
// [0x00020100] 
// Parameters infos:

void APawn::FinishAIGroup ( )
{
	static UFunction* pFnFinishAIGroup = NULL;

	if ( ! pFnFinishAIGroup )
		pFnFinishAIGroup = (UFunction*) UObject::GObjObjects()->Data[ 25462 ];

	APawn_execFinishAIGroup_Parms FinishAIGroup_Parms;

	this->ProcessEvent ( pFnFinishAIGroup, &FinishAIGroup_Parms, NULL );
};

// Function Engine.Pawn.BeginAIGroup
// [0x00020100] 
// Parameters infos:

void APawn::BeginAIGroup ( )
{
	static UFunction* pFnBeginAIGroup = NULL;

	if ( ! pFnBeginAIGroup )
		pFnBeginAIGroup = (UFunction*) UObject::GObjObjects()->Data[ 25461 ];

	APawn_execBeginAIGroup_Parms BeginAIGroup_Parms;

	this->ProcessEvent ( pFnBeginAIGroup, &BeginAIGroup_Parms, NULL );
};

// Function Engine.Pawn.InterpolationFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )

void APawn::eventInterpolationFinished ( class USeqAct_Interp* InterpAction )
{
	static UFunction* pFnInterpolationFinished = NULL;

	if ( ! pFnInterpolationFinished )
		pFnInterpolationFinished = (UFunction*) UObject::GObjObjects()->Data[ 25459 ];

	APawn_eventInterpolationFinished_Parms InterpolationFinished_Parms;
	InterpolationFinished_Parms.InterpAction = InterpAction;

	this->ProcessEvent ( pFnInterpolationFinished, &InterpolationFinished_Parms, NULL );
};

// Function Engine.Pawn.InterpolationStarted
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USeqAct_Interp*          InterpAction                   ( CPF_Parm )
// class UInterpGroupInst*        GroupInst                      ( CPF_Parm )

void APawn::eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst )
{
	static UFunction* pFnInterpolationStarted = NULL;

	if ( ! pFnInterpolationStarted )
		pFnInterpolationStarted = (UFunction*) UObject::GObjObjects()->Data[ 25456 ];

	APawn_eventInterpolationStarted_Parms InterpolationStarted_Parms;
	InterpolationStarted_Parms.InterpAction = InterpAction;
	InterpolationStarted_Parms.GroupInst = GroupInst;

	this->ProcessEvent ( pFnInterpolationStarted, &InterpolationStarted_Parms, NULL );
};

// Function Engine.Pawn.MAT_SetSkelControlStrength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          ControlStrength                ( CPF_Parm )

void APawn::MAT_SetSkelControlStrength ( struct FName SkelControlName, float ControlStrength )
{
	static UFunction* pFnMAT_SetSkelControlStrength = NULL;

	if ( ! pFnMAT_SetSkelControlStrength )
		pFnMAT_SetSkelControlStrength = (UFunction*) UObject::GObjObjects()->Data[ 25453 ];

	APawn_execMAT_SetSkelControlStrength_Parms MAT_SetSkelControlStrength_Parms;
	memcpy ( &MAT_SetSkelControlStrength_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlStrength_Parms.ControlStrength = ControlStrength;

	pFnMAT_SetSkelControlStrength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlStrength, &MAT_SetSkelControlStrength_Parms, NULL );

	pFnMAT_SetSkelControlStrength->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetSkelControlScale
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SkelControlName                ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void APawn::MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale )
{
	static UFunction* pFnMAT_SetSkelControlScale = NULL;

	if ( ! pFnMAT_SetSkelControlScale )
		pFnMAT_SetSkelControlScale = (UFunction*) UObject::GObjObjects()->Data[ 25450 ];

	APawn_execMAT_SetSkelControlScale_Parms MAT_SetSkelControlScale_Parms;
	memcpy ( &MAT_SetSkelControlScale_Parms.SkelControlName, &SkelControlName, 0x8 );
	MAT_SetSkelControlScale_Parms.Scale = Scale;

	pFnMAT_SetSkelControlScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetSkelControlScale, &MAT_SetSkelControlScale_Parms, NULL );

	pFnMAT_SetSkelControlScale->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetMorphWeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   MorphNodeName                  ( CPF_Parm )
// float                          MorphWeight                    ( CPF_Parm )

void APawn::MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight )
{
	static UFunction* pFnMAT_SetMorphWeight = NULL;

	if ( ! pFnMAT_SetMorphWeight )
		pFnMAT_SetMorphWeight = (UFunction*) UObject::GObjObjects()->Data[ 25447 ];

	APawn_execMAT_SetMorphWeight_Parms MAT_SetMorphWeight_Parms;
	memcpy ( &MAT_SetMorphWeight_Parms.MorphNodeName, &MorphNodeName, 0x8 );
	MAT_SetMorphWeight_Parms.MorphWeight = MorphWeight;

	pFnMAT_SetMorphWeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetMorphWeight, &MAT_SetMorphWeight_Parms, NULL );

	pFnMAT_SetMorphWeight->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void APawn::MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 25444 ];

	APawn_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void APawn::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 25436 ];

	APawn_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;
	MAT_SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )
// unsigned long                  bEnableRootMotion              ( CPF_Parm )

void APawn::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 25428 ];

	APawn_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;
	SetAnimPosition_Parms.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function Engine.Pawn.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 25426 ];

	APawn_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;
	MAT_FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::eventFinishAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 25424 ];

	APawn_eventFinishAnimControl_Parms FinishAnimControl_Parms;
	FinishAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function Engine.Pawn.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 25422 ];

	APawn_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	MAT_BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UInterpGroup*            InInterpGroup                  ( CPF_Parm )

void APawn::eventBeginAnimControl ( class UInterpGroup* InInterpGroup )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 25420 ];

	APawn_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	BeginAnimControl_Parms.InInterpGroup = InInterpGroup;

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function Engine.Pawn.RestoreAnimSetsToDefault
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::eventRestoreAnimSetsToDefault ( )
{
	static UFunction* pFnRestoreAnimSetsToDefault = NULL;

	if ( ! pFnRestoreAnimSetsToDefault )
		pFnRestoreAnimSetsToDefault = (UFunction*) UObject::GObjObjects()->Data[ 25418 ];

	APawn_eventRestoreAnimSetsToDefault_Parms RestoreAnimSetsToDefault_Parms;

	this->ProcessEvent ( pFnRestoreAnimSetsToDefault, &RestoreAnimSetsToDefault_Parms, NULL );

	return RestoreAnimSetsToDefault_Parms.ReturnValue;
};

// Function Engine.Pawn.AnimSetListUpdated
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void APawn::eventAnimSetListUpdated ( )
{
	static UFunction* pFnAnimSetListUpdated = NULL;

	if ( ! pFnAnimSetListUpdated )
		pFnAnimSetListUpdated = (UFunction*) UObject::GObjObjects()->Data[ 25417 ];

	APawn_eventAnimSetListUpdated_Parms AnimSetListUpdated_Parms;

	this->ProcessEvent ( pFnAnimSetListUpdated, &AnimSetListUpdated_Parms, NULL );
};

// Function Engine.Pawn.AddAnimSets
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< class UAnimSet* >      CustomAnimSets                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void APawn::AddAnimSets ( TArray< class UAnimSet* >* CustomAnimSets )
{
	static UFunction* pFnAddAnimSets = NULL;

	if ( ! pFnAddAnimSets )
		pFnAddAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 25414 ];

	APawn_execAddAnimSets_Parms AddAnimSets_Parms;

	pFnAddAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAnimSets, &AddAnimSets_Parms, NULL );

	pFnAddAnimSets->FunctionFlags |= 0x400;

	if ( CustomAnimSets )
		memcpy ( CustomAnimSets, &AddAnimSets_Parms.CustomAnimSets, 0xC );
};

// Function Engine.Pawn.BuildScriptAnimSetList
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void APawn::eventBuildScriptAnimSetList ( )
{
	static UFunction* pFnBuildScriptAnimSetList = NULL;

	if ( ! pFnBuildScriptAnimSetList )
		pFnBuildScriptAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 25413 ];

	APawn_eventBuildScriptAnimSetList_Parms BuildScriptAnimSetList_Parms;

	this->ProcessEvent ( pFnBuildScriptAnimSetList, &BuildScriptAnimSetList_Parms, NULL );
};

// Function Engine.Pawn.UpdateAnimSetList
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APawn::UpdateAnimSetList ( )
{
	static UFunction* pFnUpdateAnimSetList = NULL;

	if ( ! pFnUpdateAnimSetList )
		pFnUpdateAnimSetList = (UFunction*) UObject::GObjObjects()->Data[ 25412 ];

	APawn_execUpdateAnimSetList_Parms UpdateAnimSetList_Parms;

	pFnUpdateAnimSetList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimSetList, &UpdateAnimSetList_Parms, NULL );

	pFnUpdateAnimSetList->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ClearAnimNodes
// [0x00020102] 
// Parameters infos:

void APawn::ClearAnimNodes ( )
{
	static UFunction* pFnClearAnimNodes = NULL;

	if ( ! pFnClearAnimNodes )
		pFnClearAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 25411 ];

	APawn_execClearAnimNodes_Parms ClearAnimNodes_Parms;

	this->ProcessEvent ( pFnClearAnimNodes, &ClearAnimNodes_Parms, NULL );
};

// Function Engine.Pawn.CacheAnimNodes
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void APawn::eventCacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 25410 ];

	APawn_eventCacheAnimNodes_Parms CacheAnimNodes_Parms;

	pFnCacheAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );

	pFnCacheAnimNodes->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void APawn::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 25408 ];

	APawn_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.Pawn.IsDesiredRotationLocked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsDesiredRotationLocked ( )
{
	static UFunction* pFnIsDesiredRotationLocked = NULL;

	if ( ! pFnIsDesiredRotationLocked )
		pFnIsDesiredRotationLocked = (UFunction*) UObject::GObjObjects()->Data[ 25406 ];

	APawn_execIsDesiredRotationLocked_Parms IsDesiredRotationLocked_Parms;

	pFnIsDesiredRotationLocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDesiredRotationLocked, &IsDesiredRotationLocked_Parms, NULL );

	pFnIsDesiredRotationLocked->FunctionFlags |= 0x400;

	return IsDesiredRotationLocked_Parms.ReturnValue;
};

// Function Engine.Pawn.IsDesiredRotationInUse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APawn::IsDesiredRotationInUse ( )
{
	static UFunction* pFnIsDesiredRotationInUse = NULL;

	if ( ! pFnIsDesiredRotationInUse )
		pFnIsDesiredRotationInUse = (UFunction*) UObject::GObjObjects()->Data[ 25404 ];

	APawn_execIsDesiredRotationInUse_Parms IsDesiredRotationInUse_Parms;

	pFnIsDesiredRotationInUse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDesiredRotationInUse, &IsDesiredRotationInUse_Parms, NULL );

	pFnIsDesiredRotationInUse->FunctionFlags |= 0x400;

	return IsDesiredRotationInUse_Parms.ReturnValue;
};

// Function Engine.Pawn.CheckDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APawn::CheckDesiredRotation ( )
{
	static UFunction* pFnCheckDesiredRotation = NULL;

	if ( ! pFnCheckDesiredRotation )
		pFnCheckDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 25403 ];

	APawn_execCheckDesiredRotation_Parms CheckDesiredRotation_Parms;

	pFnCheckDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckDesiredRotation, &CheckDesiredRotation_Parms, NULL );

	pFnCheckDesiredRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.ResetDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void APawn::ResetDesiredRotation ( )
{
	static UFunction* pFnResetDesiredRotation = NULL;

	if ( ! pFnResetDesiredRotation )
		pFnResetDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 25402 ];

	APawn_execResetDesiredRotation_Parms ResetDesiredRotation_Parms;

	pFnResetDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDesiredRotation, &ResetDesiredRotation_Parms, NULL );

	pFnResetDesiredRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.LockDesiredRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  Lock                           ( CPF_Parm )
// unsigned long                  InUnlockWhenReached            ( CPF_OptionalParm | CPF_Parm )

void APawn::LockDesiredRotation ( unsigned long Lock, unsigned long InUnlockWhenReached )
{
	static UFunction* pFnLockDesiredRotation = NULL;

	if ( ! pFnLockDesiredRotation )
		pFnLockDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 25399 ];

	APawn_execLockDesiredRotation_Parms LockDesiredRotation_Parms;
	LockDesiredRotation_Parms.Lock = Lock;
	LockDesiredRotation_Parms.InUnlockWhenReached = InUnlockWhenReached;

	pFnLockDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLockDesiredRotation, &LockDesiredRotation_Parms, NULL );

	pFnLockDesiredRotation->FunctionFlags |= 0x400;
};

// Function Engine.Pawn.SetDesiredRotation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                TargetDesiredRotation          ( CPF_Parm )
// unsigned long                  InLockDesiredRotation          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InUnlockWhenReached            ( CPF_OptionalParm | CPF_Parm )
// float                          InterpolationTime              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bResetRotationRate             ( CPF_OptionalParm | CPF_Parm )

bool APawn::SetDesiredRotation ( struct FRotator TargetDesiredRotation, unsigned long InLockDesiredRotation, unsigned long InUnlockWhenReached, float InterpolationTime, unsigned long bResetRotationRate )
{
	static UFunction* pFnSetDesiredRotation = NULL;

	if ( ! pFnSetDesiredRotation )
		pFnSetDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 11941 ];

	APawn_execSetDesiredRotation_Parms SetDesiredRotation_Parms;
	memcpy ( &SetDesiredRotation_Parms.TargetDesiredRotation, &TargetDesiredRotation, 0xC );
	SetDesiredRotation_Parms.InLockDesiredRotation = InLockDesiredRotation;
	SetDesiredRotation_Parms.InUnlockWhenReached = InUnlockWhenReached;
	SetDesiredRotation_Parms.InterpolationTime = InterpolationTime;
	SetDesiredRotation_Parms.bResetRotationRate = bResetRotationRate;

	pFnSetDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDesiredRotation, &SetDesiredRotation_Parms, NULL );

	pFnSetDesiredRotation->FunctionFlags |= 0x400;

	return SetDesiredRotation_Parms.ReturnValue;
};

// Function Engine.Pawn.PickWallAdjust
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 WallHitNormal                  ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )

bool APawn::PickWallAdjust ( struct FVector WallHitNormal, class AActor* HitActor )
{
	static UFunction* pFnPickWallAdjust = NULL;

	if ( ! pFnPickWallAdjust )
		pFnPickWallAdjust = (UFunction*) UObject::GObjObjects()->Data[ 25390 ];

	APawn_execPickWallAdjust_Parms PickWallAdjust_Parms;
	memcpy ( &PickWallAdjust_Parms.WallHitNormal, &WallHitNormal, 0xC );
	PickWallAdjust_Parms.HitActor = HitActor;

	pFnPickWallAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickWallAdjust, &PickWallAdjust_Parms, NULL );

	pFnPickWallAdjust->FunctionFlags |= 0x400;

	return PickWallAdjust_Parms.ReturnValue;
};

// Function Engine.Vehicle.ZeroMovementVariables
// [0x00020102] 
// Parameters infos:

void AVehicle::ZeroMovementVariables ( )
{
	static UFunction* pFnZeroMovementVariables = NULL;

	if ( ! pFnZeroMovementVariables )
		pFnZeroMovementVariables = (UFunction*) UObject::GObjObjects()->Data[ 34531 ];

	AVehicle_execZeroMovementVariables_Parms ZeroMovementVariables_Parms;

	this->ProcessEvent ( pFnZeroMovementVariables, &ZeroMovementVariables_Parms, NULL );
};

// Function Engine.Vehicle.NotifyDriverTakeHit
// [0x00020000] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void AVehicle::NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyDriverTakeHit = NULL;

	if ( ! pFnNotifyDriverTakeHit )
		pFnNotifyDriverTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 34525 ];

	AVehicle_execNotifyDriverTakeHit_Parms NotifyDriverTakeHit_Parms;
	NotifyDriverTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyDriverTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyDriverTakeHit_Parms.Damage = Damage;
	NotifyDriverTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyDriverTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyDriverTakeHit, &NotifyDriverTakeHit_Parms, NULL );
};

// Function Engine.Vehicle.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AVehicle::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 34523 ];

	AVehicle_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Vehicle.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void AVehicle::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 34522 ];

	AVehicle_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.Vehicle.SetDriving
// [0x00020102] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void AVehicle::SetDriving ( unsigned long B )
{
	static UFunction* pFnSetDriving = NULL;

	if ( ! pFnSetDriving )
		pFnSetDriving = (UFunction*) UObject::GObjObjects()->Data[ 34520 ];

	AVehicle_execSetDriving_Parms SetDriving_Parms;
	SetDriving_Parms.B = B;

	this->ProcessEvent ( pFnSetDriving, &SetDriving_Parms, NULL );
};

// Function Engine.Vehicle.GetEntryLocation
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector AVehicle::eventGetEntryLocation ( )
{
	static UFunction* pFnGetEntryLocation = NULL;

	if ( ! pFnGetEntryLocation )
		pFnGetEntryLocation = (UFunction*) UObject::GObjObjects()->Data[ 34518 ];

	AVehicle_eventGetEntryLocation_Parms GetEntryLocation_Parms;

	this->ProcessEvent ( pFnGetEntryLocation, &GetEntryLocation_Parms, NULL );

	return GetEntryLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.CrushedBy
// [0x00020000] 
// Parameters infos:
// class APawn*                   OtherPawn                      ( CPF_Parm )

void AVehicle::CrushedBy ( class APawn* OtherPawn )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = (UFunction*) UObject::GObjObjects()->Data[ 34516 ];

	AVehicle_execCrushedBy_Parms CrushedBy_Parms;
	CrushedBy_Parms.OtherPawn = OtherPawn;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function Engine.Vehicle.PancakeOther
// [0x00020002] 
// Parameters infos:
// class APawn*                   Other                          ( CPF_Parm )

void AVehicle::PancakeOther ( class APawn* Other )
{
	static UFunction* pFnPancakeOther = NULL;

	if ( ! pFnPancakeOther )
		pFnPancakeOther = (UFunction*) UObject::GObjObjects()->Data[ 34514 ];

	AVehicle_execPancakeOther_Parms PancakeOther_Parms;
	PancakeOther_Parms.Other = Other;

	this->ProcessEvent ( pFnPancakeOther, &PancakeOther_Parms, NULL );
};

// Function Engine.Vehicle.EncroachingOn
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )

bool AVehicle::eventEncroachingOn ( class AActor* Other )
{
	static UFunction* pFnEncroachingOn = NULL;

	if ( ! pFnEncroachingOn )
		pFnEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 34506 ];

	AVehicle_eventEncroachingOn_Parms EncroachingOn_Parms;
	EncroachingOn_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachingOn, &EncroachingOn_Parms, NULL );

	return EncroachingOn_Parms.ReturnValue;
};

// Function Engine.Vehicle.GetCollisionDamageInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AController* AVehicle::GetCollisionDamageInstigator ( )
{
	static UFunction* pFnGetCollisionDamageInstigator = NULL;

	if ( ! pFnGetCollisionDamageInstigator )
		pFnGetCollisionDamageInstigator = (UFunction*) UObject::GObjObjects()->Data[ 34504 ];

	AVehicle_execGetCollisionDamageInstigator_Parms GetCollisionDamageInstigator_Parms;

	this->ProcessEvent ( pFnGetCollisionDamageInstigator, &GetCollisionDamageInstigator_Parms, NULL );

	return GetCollisionDamageInstigator_Parms.ReturnValue;
};

// Function Engine.Vehicle.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AVehicle::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 34502 ];

	AVehicle_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function Engine.Vehicle.FaceRotation
// [0x00024100] 
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )
// float                          DeltaTime                      ( CPF_OptionalParm | CPF_Parm )

void AVehicle::FaceRotation ( struct FRotator NewRotation, float DeltaTime )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = (UFunction*) UObject::GObjObjects()->Data[ 34499 ];

	AVehicle_execFaceRotation_Parms FaceRotation_Parms;
	memcpy ( &FaceRotation_Parms.NewRotation, &NewRotation, 0xC );
	FaceRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function Engine.Vehicle.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName AVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 34496 ];

	AVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlayDying
// [0x00020100] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void AVehicle::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 34493 ];

	AVehicle_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function Engine.Vehicle.DriverDied
// [0x00020002] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void AVehicle::DriverDied ( class UClass* DamageType )
{
	static UFunction* pFnDriverDied = NULL;

	if ( ! pFnDriverDied )
		pFnDriverDied = (UFunction*) UObject::GObjObjects()->Data[ 34489 ];

	AVehicle_execDriverDied_Parms DriverDied_Parms;
	DriverDied_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnDriverDied, &DriverDied_Parms, NULL );
};

// Function Engine.Vehicle.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool AVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 34484 ];

	AVehicle_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.Vehicle.ThrowActiveWeapon
// [0x00024000] 
// Parameters infos:
// unsigned long                  bDestroyWeap                   ( CPF_OptionalParm | CPF_Parm )

void AVehicle::ThrowActiveWeapon ( unsigned long bDestroyWeap )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = (UFunction*) UObject::GObjObjects()->Data[ 34482 ];

	AVehicle_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;
	ThrowActiveWeapon_Parms.bDestroyWeap = bDestroyWeap;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function Engine.Vehicle.AdjustDriverDamage
// [0x00420002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// int                            Damage                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void AVehicle::AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum )
{
	static UFunction* pFnAdjustDriverDamage = NULL;

	if ( ! pFnAdjustDriverDamage )
		pFnAdjustDriverDamage = (UFunction*) UObject::GObjObjects()->Data[ 34476 ];

	AVehicle_execAdjustDriverDamage_Parms AdjustDriverDamage_Parms;
	AdjustDriverDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AdjustDriverDamage_Parms.HitLocation, &HitLocation, 0xC );
	AdjustDriverDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnAdjustDriverDamage, &AdjustDriverDamage_Parms, NULL );

	if ( Damage )
		*Damage = AdjustDriverDamage_Parms.Damage;

	if ( Momentum )
		memcpy ( Momentum, &AdjustDriverDamage_Parms.Momentum, 0xC );
};

// Function Engine.Vehicle.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AVehicle::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 34468 ];

	AVehicle_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.Vehicle.SetKillInstigator
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

class AController* AVehicle::SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType )
{
	static UFunction* pFnSetKillInstigator = NULL;

	if ( ! pFnSetKillInstigator )
		pFnSetKillInstigator = (UFunction*) UObject::GObjObjects()->Data[ 34464 ];

	AVehicle_execSetKillInstigator_Parms SetKillInstigator_Parms;
	SetKillInstigator_Parms.InstigatedBy = InstigatedBy;
	SetKillInstigator_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnSetKillInstigator, &SetKillInstigator_Parms, NULL );

	return SetKillInstigator_Parms.ReturnValue;
};

// Function Engine.Vehicle.UnPossessed
// [0x00020002] 
// Parameters infos:

void AVehicle::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = (UFunction*) UObject::GObjObjects()->Data[ 34463 ];

	AVehicle_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function Engine.Vehicle.TryExitPos
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )
// struct FVector                 ExitPos                        ( CPF_Parm )
// unsigned long                  bMustFindGround                ( CPF_Parm )

bool AVehicle::TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround )
{
	static UFunction* pFnTryExitPos = NULL;

	if ( ! pFnTryExitPos )
		pFnTryExitPos = (UFunction*) UObject::GObjObjects()->Data[ 34452 ];

	AVehicle_execTryExitPos_Parms TryExitPos_Parms;
	TryExitPos_Parms.ExitingDriver = ExitingDriver;
	memcpy ( &TryExitPos_Parms.ExitPos, &ExitPos, 0xC );
	TryExitPos_Parms.bMustFindGround = bMustFindGround;

	this->ProcessEvent ( pFnTryExitPos, &TryExitPos_Parms, NULL );

	return TryExitPos_Parms.ReturnValue;
};

// Function Engine.Vehicle.FindAutoExit
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_Parm )

bool AVehicle::FindAutoExit ( class APawn* ExitingDriver )
{
	static UFunction* pFnFindAutoExit = NULL;

	if ( ! pFnFindAutoExit )
		pFnFindAutoExit = (UFunction*) UObject::GObjObjects()->Data[ 34446 ];

	AVehicle_execFindAutoExit_Parms FindAutoExit_Parms;
	FindAutoExit_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnFindAutoExit, &FindAutoExit_Parms, NULL );

	return FindAutoExit_Parms.ReturnValue;
};

// Function Engine.Vehicle.PlaceExitingDriver
// [0x00824002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_OptionalParm | CPF_Parm )

bool AVehicle::PlaceExitingDriver ( class APawn* ExitingDriver )
{
	static UFunction* pFnPlaceExitingDriver = NULL;

	if ( ! pFnPlaceExitingDriver )
		pFnPlaceExitingDriver = (UFunction*) UObject::GObjObjects()->Data[ 34437 ];

	AVehicle_execPlaceExitingDriver_Parms PlaceExitingDriver_Parms;
	PlaceExitingDriver_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnPlaceExitingDriver, &PlaceExitingDriver_Parms, NULL );

	return PlaceExitingDriver_Parms.ReturnValue;
};

// Function Engine.Vehicle.DriverLeft
// [0x00020002] 
// Parameters infos:

void AVehicle::DriverLeft ( )
{
	static UFunction* pFnDriverLeft = NULL;

	if ( ! pFnDriverLeft )
		pFnDriverLeft = (UFunction*) UObject::GObjObjects()->Data[ 34436 ];

	AVehicle_execDriverLeft_Parms DriverLeft_Parms;

	this->ProcessEvent ( pFnDriverLeft, &DriverLeft_Parms, NULL );
};

// Function Engine.Vehicle.SetInputs
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )

void AVehicle::SetInputs ( float InForward, float InStrafe, float InUp )
{
	static UFunction* pFnSetInputs = NULL;

	if ( ! pFnSetInputs )
		pFnSetInputs = (UFunction*) UObject::GObjObjects()->Data[ 34432 ];

	AVehicle_execSetInputs_Parms SetInputs_Parms;
	SetInputs_Parms.InForward = InForward;
	SetInputs_Parms.InStrafe = InStrafe;
	SetInputs_Parms.InUp = InUp;

	this->ProcessEvent ( pFnSetInputs, &SetInputs_Parms, NULL );
};

// Function Engine.Vehicle.DriverLeave
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceLeave                    ( CPF_Parm )

bool AVehicle::eventDriverLeave ( unsigned long bForceLeave )
{
	static UFunction* pFnDriverLeave = NULL;

	if ( ! pFnDriverLeave )
		pFnDriverLeave = (UFunction*) UObject::GObjObjects()->Data[ 9353 ];

	AVehicle_eventDriverLeave_Parms DriverLeave_Parms;
	DriverLeave_Parms.bForceLeave = bForceLeave;

	this->ProcessEvent ( pFnDriverLeave, &DriverLeave_Parms, NULL );

	return DriverLeave_Parms.ReturnValue;
};

// Function Engine.Vehicle.GetExitRotation
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             C                              ( CPF_Parm )

struct FRotator AVehicle::GetExitRotation ( class AController* C )
{
	static UFunction* pFnGetExitRotation = NULL;

	if ( ! pFnGetExitRotation )
		pFnGetExitRotation = (UFunction*) UObject::GObjObjects()->Data[ 34424 ];

	AVehicle_execGetExitRotation_Parms GetExitRotation_Parms;
	GetExitRotation_Parms.C = C;

	this->ProcessEvent ( pFnGetExitRotation, &GetExitRotation_Parms, NULL );

	return GetExitRotation_Parms.ReturnValue;
};

// Function Engine.Vehicle.ContinueOnFoot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::eventContinueOnFoot ( )
{
	static UFunction* pFnContinueOnFoot = NULL;

	if ( ! pFnContinueOnFoot )
		pFnContinueOnFoot = (UFunction*) UObject::GObjObjects()->Data[ 34422 ];

	AVehicle_eventContinueOnFoot_Parms ContinueOnFoot_Parms;

	this->ProcessEvent ( pFnContinueOnFoot, &ContinueOnFoot_Parms, NULL );

	return ContinueOnFoot_Parms.ReturnValue;
};

// Function Engine.Vehicle.DetachDriver
// [0x00020100] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::DetachDriver ( class APawn* P )
{
	static UFunction* pFnDetachDriver = NULL;

	if ( ! pFnDetachDriver )
		pFnDetachDriver = (UFunction*) UObject::GObjObjects()->Data[ 34420 ];

	AVehicle_execDetachDriver_Parms DetachDriver_Parms;
	DetachDriver_Parms.P = P;

	this->ProcessEvent ( pFnDetachDriver, &DetachDriver_Parms, NULL );
};

// Function Engine.Vehicle.AttachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void AVehicle::AttachDriver ( class APawn* P )
{
	static UFunction* pFnAttachDriver = NULL;

	if ( ! pFnAttachDriver )
		pFnAttachDriver = (UFunction*) UObject::GObjObjects()->Data[ 34418 ];

	AVehicle_execAttachDriver_Parms AttachDriver_Parms;
	AttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnAttachDriver, &AttachDriver_Parms, NULL );
};

// Function Engine.Vehicle.EntryAnnouncement
// [0x00020000] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void AVehicle::EntryAnnouncement ( class AController* C )
{
	static UFunction* pFnEntryAnnouncement = NULL;

	if ( ! pFnEntryAnnouncement )
		pFnEntryAnnouncement = (UFunction*) UObject::GObjObjects()->Data[ 34416 ];

	AVehicle_execEntryAnnouncement_Parms EntryAnnouncement_Parms;
	EntryAnnouncement_Parms.C = C;

	this->ProcessEvent ( pFnEntryAnnouncement, &EntryAnnouncement_Parms, NULL );
};

// Function Engine.Vehicle.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void AVehicle::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 34413 ];

	AVehicle_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function Engine.Vehicle.DriverEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::DriverEnter ( class APawn* P )
{
	static UFunction* pFnDriverEnter = NULL;

	if ( ! pFnDriverEnter )
		pFnDriverEnter = (UFunction*) UObject::GObjObjects()->Data[ 34409 ];

	AVehicle_execDriverEnter_Parms DriverEnter_Parms;
	DriverEnter_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnter, &DriverEnter_Parms, NULL );

	return DriverEnter_Parms.ReturnValue;
};

// Function Engine.Vehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 9356 ];

	AVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.Vehicle.AnySeatAvailable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::AnySeatAvailable ( )
{
	static UFunction* pFnAnySeatAvailable = NULL;

	if ( ! pFnAnySeatAvailable )
		pFnAnySeatAvailable = (UFunction*) UObject::GObjObjects()->Data[ 34406 ];

	AVehicle_execAnySeatAvailable_Parms AnySeatAvailable_Parms;

	this->ProcessEvent ( pFnAnySeatAvailable, &AnySeatAvailable_Parms, NULL );

	return AnySeatAvailable_Parms.ReturnValue;
};

// Function Engine.Vehicle.CanEnterVehicle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool AVehicle::CanEnterVehicle ( class APawn* P )
{
	static UFunction* pFnCanEnterVehicle = NULL;

	if ( ! pFnCanEnterVehicle )
		pFnCanEnterVehicle = (UFunction*) UObject::GObjObjects()->Data[ 34403 ];

	AVehicle_execCanEnterVehicle_Parms CanEnterVehicle_Parms;
	CanEnterVehicle_Parms.P = P;

	this->ProcessEvent ( pFnCanEnterVehicle, &CanEnterVehicle_Parms, NULL );

	return CanEnterVehicle_Parms.ReturnValue;
};

// Function Engine.Vehicle.Destroyed_HandleDriver
// [0x00020102] 
// Parameters infos:

void AVehicle::Destroyed_HandleDriver ( )
{
	static UFunction* pFnDestroyed_HandleDriver = NULL;

	if ( ! pFnDestroyed_HandleDriver )
		pFnDestroyed_HandleDriver = (UFunction*) UObject::GObjObjects()->Data[ 34401 ];

	AVehicle_execDestroyed_HandleDriver_Parms Destroyed_HandleDriver_Parms;

	this->ProcessEvent ( pFnDestroyed_HandleDriver, &Destroyed_HandleDriver_Parms, NULL );
};

// Function Engine.Vehicle.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 34400 ];

	AVehicle_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Vehicle.CheatFly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatFly ( )
{
	static UFunction* pFnCheatFly = NULL;

	if ( ! pFnCheatFly )
		pFnCheatFly = (UFunction*) UObject::GObjObjects()->Data[ 34398 ];

	AVehicle_execCheatFly_Parms CheatFly_Parms;

	this->ProcessEvent ( pFnCheatFly, &CheatFly_Parms, NULL );

	return CheatFly_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatGhost
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatGhost ( )
{
	static UFunction* pFnCheatGhost = NULL;

	if ( ! pFnCheatGhost )
		pFnCheatGhost = (UFunction*) UObject::GObjObjects()->Data[ 34396 ];

	AVehicle_execCheatGhost_Parms CheatGhost_Parms;

	this->ProcessEvent ( pFnCheatGhost, &CheatGhost_Parms, NULL );

	return CheatGhost_Parms.ReturnValue;
};

// Function Engine.Vehicle.CheatWalk
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AVehicle::CheatWalk ( )
{
	static UFunction* pFnCheatWalk = NULL;

	if ( ! pFnCheatWalk )
		pFnCheatWalk = (UFunction*) UObject::GObjObjects()->Data[ 34394 ];

	AVehicle_execCheatWalk_Parms CheatWalk_Parms;

	this->ProcessEvent ( pFnCheatWalk, &CheatWalk_Parms, NULL );

	return CheatWalk_Parms.ReturnValue;
};

// Function Engine.Vehicle.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34393 ];

	AVehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Vehicle.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void AVehicle::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = (UFunction*) UObject::GObjObjects()->Data[ 34392 ];

	AVehicle_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function Engine.Vehicle.PlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void AVehicle::PlayerChangedTeam ( )
{
	static UFunction* pFnPlayerChangedTeam = NULL;

	if ( ! pFnPlayerChangedTeam )
		pFnPlayerChangedTeam = (UFunction*) UObject::GObjObjects()->Data[ 34391 ];

	AVehicle_execPlayerChangedTeam_Parms PlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnPlayerChangedTeam, &PlayerChangedTeam_Parms, NULL );
};

// Function Engine.Vehicle.DriverRadiusDamage
// [0x00024002] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AVehicle::DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnDriverRadiusDamage = NULL;

	if ( ! pFnDriverRadiusDamage )
		pFnDriverRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 34382 ];

	AVehicle_execDriverRadiusDamage_Parms DriverRadiusDamage_Parms;
	DriverRadiusDamage_Parms.DamageAmount = DamageAmount;
	DriverRadiusDamage_Parms.DamageRadius = DamageRadius;
	DriverRadiusDamage_Parms.EventInstigator = EventInstigator;
	DriverRadiusDamage_Parms.DamageType = DamageType;
	DriverRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &DriverRadiusDamage_Parms.HitLocation, &HitLocation, 0xC );
	DriverRadiusDamage_Parms.DamageCauser = DamageCauser;
	DriverRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnDriverRadiusDamage, &DriverRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void AVehicle::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 34372 ];

	AVehicle_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.Vehicle.GetTargetLocation
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  RequestedBy                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRequestAlternateLoc           ( CPF_OptionalParm | CPF_Parm )

struct FVector AVehicle::GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc )
{
	static UFunction* pFnGetTargetLocation = NULL;

	if ( ! pFnGetTargetLocation )
		pFnGetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 34368 ];

	AVehicle_execGetTargetLocation_Parms GetTargetLocation_Parms;
	GetTargetLocation_Parms.RequestedBy = RequestedBy;
	GetTargetLocation_Parms.bRequestAlternateLoc = bRequestAlternateLoc;

	pFnGetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocation, &GetTargetLocation_Parms, NULL );

	pFnGetTargetLocation->FunctionFlags |= 0x400;

	return GetTargetLocation_Parms.ReturnValue;
};

// Function Engine.Vehicle.GetMaxRiseForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float AVehicle::GetMaxRiseForce ( )
{
	static UFunction* pFnGetMaxRiseForce = NULL;

	if ( ! pFnGetMaxRiseForce )
		pFnGetMaxRiseForce = (UFunction*) UObject::GObjObjects()->Data[ 34366 ];

	AVehicle_execGetMaxRiseForce_Parms GetMaxRiseForce_Parms;

	pFnGetMaxRiseForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxRiseForce, &GetMaxRiseForce_Parms, NULL );

	pFnGetMaxRiseForce->FunctionFlags |= 0x400;

	return GetMaxRiseForce_Parms.ReturnValue;
};

// Function Engine.Vehicle.Suicide
// [0x00020002] 
// Parameters infos:

void AVehicle::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = (UFunction*) UObject::GObjObjects()->Data[ 34365 ];

	AVehicle_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function Engine.Vehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void AVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 34360 ];

	AVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.SVehicle.GetSVehicleDebug
// [0x00420102] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASVehicle::GetSVehicleDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetSVehicleDebug = NULL;

	if ( ! pFnGetSVehicleDebug )
		pFnGetSVehicleDebug = (UFunction*) UObject::GObjObjects()->Data[ 34734 ];

	ASVehicle_execGetSVehicleDebug_Parms GetSVehicleDebug_Parms;

	this->ProcessEvent ( pFnGetSVehicleDebug, &GetSVehicleDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetSVehicleDebug_Parms.DebugInfo, 0xC );
};

// Function Engine.SVehicle.HermiteEval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Slip                           ( CPF_Parm )

float ASVehicle::HermiteEval ( float Slip )
{
	static UFunction* pFnHermiteEval = NULL;

	if ( ! pFnHermiteEval )
		pFnHermiteEval = (UFunction*) UObject::GObjObjects()->Data[ 34719 ];

	ASVehicle_execHermiteEval_Parms HermiteEval_Parms;
	HermiteEval_Parms.Slip = Slip;

	this->ProcessEvent ( pFnHermiteEval, &HermiteEval_Parms, NULL );

	return HermiteEval_Parms.ReturnValue;
};

// Function Engine.SVehicle.DisplayWheelsDebug
// [0x00820102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void ASVehicle::DisplayWheelsDebug ( class AHUD* HUD, float YL )
{
	static UFunction* pFnDisplayWheelsDebug = NULL;

	if ( ! pFnDisplayWheelsDebug )
		pFnDisplayWheelsDebug = (UFunction*) UObject::GObjObjects()->Data[ 34690 ];

	ASVehicle_execDisplayWheelsDebug_Parms DisplayWheelsDebug_Parms;
	DisplayWheelsDebug_Parms.HUD = HUD;
	DisplayWheelsDebug_Parms.YL = YL;

	this->ProcessEvent ( pFnDisplayWheelsDebug, &DisplayWheelsDebug_Parms, NULL );
};

// Function Engine.SVehicle.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ASVehicle::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 34683 ];

	ASVehicle_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.SVehicle.PostTeleport
// [0x00020002] 
// Parameters infos:
// class ATeleporter*             OutTeleporter                  ( CPF_Parm )

void ASVehicle::PostTeleport ( class ATeleporter* OutTeleporter )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = (UFunction*) UObject::GObjObjects()->Data[ 34681 ];

	ASVehicle_execPostTeleport_Parms PostTeleport_Parms;
	PostTeleport_Parms.OutTeleporter = OutTeleporter;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function Engine.SVehicle.SuspensionHeavyShift
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void ASVehicle::eventSuspensionHeavyShift ( float Delta )
{
	static UFunction* pFnSuspensionHeavyShift = NULL;

	if ( ! pFnSuspensionHeavyShift )
		pFnSuspensionHeavyShift = (UFunction*) UObject::GObjObjects()->Data[ 34679 ];

	ASVehicle_eventSuspensionHeavyShift_Parms SuspensionHeavyShift_Parms;
	SuspensionHeavyShift_Parms.Delta = Delta;

	this->ProcessEvent ( pFnSuspensionHeavyShift, &SuspensionHeavyShift_Parms, NULL );
};

// Function Engine.SVehicle.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASVehicle::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 34674 ];

	ASVehicle_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function Engine.SVehicle.DrivingStatusChanged
// [0x00020102] 
// Parameters infos:

void ASVehicle::DrivingStatusChanged ( )
{
	static UFunction* pFnDrivingStatusChanged = NULL;

	if ( ! pFnDrivingStatusChanged )
		pFnDrivingStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 34673 ];

	ASVehicle_execDrivingStatusChanged_Parms DrivingStatusChanged_Parms;

	this->ProcessEvent ( pFnDrivingStatusChanged, &DrivingStatusChanged_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayExitSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayExitSound ( )
{
	static UFunction* pFnVehiclePlayExitSound = NULL;

	if ( ! pFnVehiclePlayExitSound )
		pFnVehiclePlayExitSound = (UFunction*) UObject::GObjObjects()->Data[ 34672 ];

	ASVehicle_execVehiclePlayExitSound_Parms VehiclePlayExitSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayExitSound, &VehiclePlayExitSound_Parms, NULL );
};

// Function Engine.SVehicle.VehiclePlayEnterSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::VehiclePlayEnterSound ( )
{
	static UFunction* pFnVehiclePlayEnterSound = NULL;

	if ( ! pFnVehiclePlayEnterSound )
		pFnVehiclePlayEnterSound = (UFunction*) UObject::GObjObjects()->Data[ 34671 ];

	ASVehicle_execVehiclePlayEnterSound_Parms VehiclePlayEnterSound_Parms;

	this->ProcessEvent ( pFnVehiclePlayEnterSound, &VehiclePlayEnterSound_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSoundTimed ( )
{
	static UFunction* pFnStopEngineSoundTimed = NULL;

	if ( ! pFnStopEngineSoundTimed )
		pFnStopEngineSoundTimed = (UFunction*) UObject::GObjObjects()->Data[ 34670 ];

	ASVehicle_execStopEngineSoundTimed_Parms StopEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStopEngineSoundTimed, &StopEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StopEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopEngineSound ( )
{
	static UFunction* pFnStopEngineSound = NULL;

	if ( ! pFnStopEngineSound )
		pFnStopEngineSound = (UFunction*) UObject::GObjObjects()->Data[ 34669 ];

	ASVehicle_execStopEngineSound_Parms StopEngineSound_Parms;

	this->ProcessEvent ( pFnStopEngineSound, &StopEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSoundTimed
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSoundTimed ( )
{
	static UFunction* pFnStartEngineSoundTimed = NULL;

	if ( ! pFnStartEngineSoundTimed )
		pFnStartEngineSoundTimed = (UFunction*) UObject::GObjObjects()->Data[ 34668 ];

	ASVehicle_execStartEngineSoundTimed_Parms StartEngineSoundTimed_Parms;

	this->ProcessEvent ( pFnStartEngineSoundTimed, &StartEngineSoundTimed_Parms, NULL );
};

// Function Engine.SVehicle.StartEngineSound
// [0x00020102] 
// Parameters infos:

void ASVehicle::StartEngineSound ( )
{
	static UFunction* pFnStartEngineSound = NULL;

	if ( ! pFnStartEngineSound )
		pFnStartEngineSound = (UFunction*) UObject::GObjObjects()->Data[ 34667 ];

	ASVehicle_execStartEngineSound_Parms StartEngineSound_Parms;

	this->ProcessEvent ( pFnStartEngineSound, &StartEngineSound_Parms, NULL );
};

// Function Engine.SVehicle.HasWheelsOnGround
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASVehicle::HasWheelsOnGround ( )
{
	static UFunction* pFnHasWheelsOnGround = NULL;

	if ( ! pFnHasWheelsOnGround )
		pFnHasWheelsOnGround = (UFunction*) UObject::GObjObjects()->Data[ 34665 ];

	ASVehicle_execHasWheelsOnGround_Parms HasWheelsOnGround_Parms;

	pFnHasWheelsOnGround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasWheelsOnGround, &HasWheelsOnGround_Parms, NULL );

	pFnHasWheelsOnGround->FunctionFlags |= 0x400;

	return HasWheelsOnGround_Parms.ReturnValue;
};

// Function Engine.SVehicle.TryToDrive
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ASVehicle::TryToDrive ( class APawn* P )
{
	static UFunction* pFnTryToDrive = NULL;

	if ( ! pFnTryToDrive )
		pFnTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 34662 ];

	ASVehicle_execTryToDrive_Parms TryToDrive_Parms;
	TryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnTryToDrive, &TryToDrive_Parms, NULL );

	return TryToDrive_Parms.ReturnValue;
};

// Function Engine.SVehicle.GetDefaultCameraMode
// [0x00020102] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       RequestedBy                    ( CPF_Parm )

struct FName ASVehicle::GetDefaultCameraMode ( class APlayerController* RequestedBy )
{
	static UFunction* pFnGetDefaultCameraMode = NULL;

	if ( ! pFnGetDefaultCameraMode )
		pFnGetDefaultCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 34659 ];

	ASVehicle_execGetDefaultCameraMode_Parms GetDefaultCameraMode_Parms;
	GetDefaultCameraMode_Parms.RequestedBy = RequestedBy;

	this->ProcessEvent ( pFnGetDefaultCameraMode, &GetDefaultCameraMode_Parms, NULL );

	return GetDefaultCameraMode_Parms.ReturnValue;
};

// Function Engine.SVehicle.CalcCamera
// [0x00C20102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )
// struct FVector                 out_CamLoc                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_CamRot                     ( CPF_Parm | CPF_OutParm )
// float                          out_FOV                        ( CPF_Parm | CPF_OutParm )

bool ASVehicle::CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = (UFunction*) UObject::GObjObjects()->Data[ 34650 ];

	ASVehicle_execCalcCamera_Parms CalcCamera_Parms;
	CalcCamera_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );

	if ( out_CamLoc )
		memcpy ( out_CamLoc, &CalcCamera_Parms.out_CamLoc, 0xC );

	if ( out_CamRot )
		memcpy ( out_CamRot, &CalcCamera_Parms.out_CamRot, 0xC );

	if ( out_FOV )
		*out_FOV = CalcCamera_Parms.out_FOV;

	return CalcCamera_Parms.ReturnValue;
};

// Function Engine.SVehicle.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASVehicle::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 34645 ];

	ASVehicle_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function Engine.SVehicle.AddVelocity
// [0x00024002] 
// Parameters infos:
// struct FVector                 NewVelocity                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )

void ASVehicle::AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnAddVelocity = NULL;

	if ( ! pFnAddVelocity )
		pFnAddVelocity = (UFunction*) UObject::GObjObjects()->Data[ 34640 ];

	ASVehicle_execAddVelocity_Parms AddVelocity_Parms;
	memcpy ( &AddVelocity_Parms.NewVelocity, &NewVelocity, 0xC );
	memcpy ( &AddVelocity_Parms.HitLocation, &HitLocation, 0xC );
	AddVelocity_Parms.DamageType = DamageType;
	memcpy ( &AddVelocity_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnAddVelocity, &AddVelocity_Parms, NULL );
};

// Function Engine.SVehicle.InitVehicleRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           RagdollMesh                    ( CPF_Parm )
// class UPhysicsAsset*           RagdollPhysAsset               ( CPF_Parm )
// struct FVector                 ActorMove                      ( CPF_Parm )
// unsigned long                  bClearAnimTree                 ( CPF_Parm )

void ASVehicle::InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove, unsigned long bClearAnimTree )
{
	static UFunction* pFnInitVehicleRagdoll = NULL;

	if ( ! pFnInitVehicleRagdoll )
		pFnInitVehicleRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 34635 ];

	ASVehicle_execInitVehicleRagdoll_Parms InitVehicleRagdoll_Parms;
	InitVehicleRagdoll_Parms.RagdollMesh = RagdollMesh;
	InitVehicleRagdoll_Parms.RagdollPhysAsset = RagdollPhysAsset;
	memcpy ( &InitVehicleRagdoll_Parms.ActorMove, &ActorMove, 0xC );
	InitVehicleRagdoll_Parms.bClearAnimTree = bClearAnimTree;

	pFnInitVehicleRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitVehicleRagdoll, &InitVehicleRagdoll_Parms, NULL );

	pFnInitVehicleRagdoll->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.TakeRadiusDamage
// [0x00824102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          DamageFalloffExponent          ( CPF_OptionalParm | CPF_Parm )

void ASVehicle::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 34619 ];

	ASVehicle_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;
	TakeRadiusDamage_Parms.DamageFalloffExponent = DamageFalloffExponent;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function Engine.SVehicle.StopVehicleSounds
// [0x00020102] 
// Parameters infos:

void ASVehicle::StopVehicleSounds ( )
{
	static UFunction* pFnStopVehicleSounds = NULL;

	if ( ! pFnStopVehicleSounds )
		pFnStopVehicleSounds = (UFunction*) UObject::GObjObjects()->Data[ 34618 ];

	ASVehicle_execStopVehicleSounds_Parms StopVehicleSounds_Parms;

	this->ProcessEvent ( pFnStopVehicleSounds, &StopVehicleSounds_Parms, NULL );
};

// Function Engine.SVehicle.TurnOff
// [0x00020102] 
// Parameters infos:

void ASVehicle::TurnOff ( )
{
	static UFunction* pFnTurnOff = NULL;

	if ( ! pFnTurnOff )
		pFnTurnOff = (UFunction*) UObject::GObjObjects()->Data[ 34617 ];

	ASVehicle_execTurnOff_Parms TurnOff_Parms;

	this->ProcessEvent ( pFnTurnOff, &TurnOff_Parms, NULL );
};

// Function Engine.SVehicle.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 34616 ];

	ASVehicle_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.SVehicle.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ASVehicle::eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 34610 ];

	ASVehicle_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function Engine.SVehicle.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASVehicle::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34609 ];

	ASVehicle_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SVehicle.SetWheelCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            WheelNum                       ( CPF_Parm )
// unsigned long                  bCollision                     ( CPF_Parm )

void ASVehicle::SetWheelCollision ( int WheelNum, unsigned long bCollision )
{
	static UFunction* pFnSetWheelCollision = NULL;

	if ( ! pFnSetWheelCollision )
		pFnSetWheelCollision = (UFunction*) UObject::GObjObjects()->Data[ 34606 ];

	ASVehicle_execSetWheelCollision_Parms SetWheelCollision_Parms;
	SetWheelCollision_Parms.WheelNum = WheelNum;
	SetWheelCollision_Parms.bCollision = bCollision;

	pFnSetWheelCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWheelCollision, &SetWheelCollision_Parms, NULL );

	pFnSetWheelCollision->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.IsSleeping
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASVehicle::IsSleeping ( )
{
	static UFunction* pFnIsSleeping = NULL;

	if ( ! pFnIsSleeping )
		pFnIsSleeping = (UFunction*) UObject::GObjObjects()->Data[ 34604 ];

	ASVehicle_execIsSleeping_Parms IsSleeping_Parms;

	pFnIsSleeping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSleeping, &IsSleeping_Parms, NULL );

	pFnIsSleeping->FunctionFlags |= 0x400;

	return IsSleeping_Parms.ReturnValue;
};

// Function Engine.SVehicle.AddTorque
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Torque                         ( CPF_Parm )

void ASVehicle::AddTorque ( struct FVector Torque )
{
	static UFunction* pFnAddTorque = NULL;

	if ( ! pFnAddTorque )
		pFnAddTorque = (UFunction*) UObject::GObjObjects()->Data[ 34602 ];

	ASVehicle_execAddTorque_Parms AddTorque_Parms;
	memcpy ( &AddTorque_Parms.Torque, &Torque, 0xC );

	pFnAddTorque->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTorque, &AddTorque_Parms, NULL );

	pFnAddTorque->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.AddImpulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )

void ASVehicle::AddImpulse ( struct FVector Impulse )
{
	static UFunction* pFnAddImpulse = NULL;

	if ( ! pFnAddImpulse )
		pFnAddImpulse = (UFunction*) UObject::GObjObjects()->Data[ 34600 ];

	ASVehicle_execAddImpulse_Parms AddImpulse_Parms;
	memcpy ( &AddImpulse_Parms.Impulse, &Impulse, 0xC );

	pFnAddImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddImpulse, &AddImpulse_Parms, NULL );

	pFnAddImpulse->FunctionFlags |= 0x400;
};

// Function Engine.SVehicle.AddForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Force                          ( CPF_Parm )

void ASVehicle::AddForce ( struct FVector Force )
{
	static UFunction* pFnAddForce = NULL;

	if ( ! pFnAddForce )
		pFnAddForce = (UFunction*) UObject::GObjObjects()->Data[ 34598 ];

	ASVehicle_execAddForce_Parms AddForce_Parms;
	memcpy ( &AddForce_Parms.Force, &Force, 0xC );

	pFnAddForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddForce, &AddForce_Parms, NULL );

	pFnAddForce->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.OnToggleConstraintDrive
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleConstraintDrive* Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnToggleConstraintDrive ( class USeqAct_ToggleConstraintDrive* Action )
{
	static UFunction* pFnOnToggleConstraintDrive = NULL;

	if ( ! pFnOnToggleConstraintDrive )
		pFnOnToggleConstraintDrive = (UFunction*) UObject::GObjObjects()->Data[ 31988 ];

	ARB_ConstraintActor_execOnToggleConstraintDrive_Parms OnToggleConstraintDrive_Parms;
	OnToggleConstraintDrive_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleConstraintDrive, &OnToggleConstraintDrive_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 31984 ];

	ARB_ConstraintActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.OnDestroy
// [0x00020102] 
// Parameters infos:
// class USeqAct_Destroy*         Action                         ( CPF_Parm )

void ARB_ConstraintActor::OnDestroy ( class USeqAct_Destroy* Action )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = (UFunction*) UObject::GObjObjects()->Data[ 31982 ];

	ARB_ConstraintActor_execOnDestroy_Parms OnDestroy_Parms;
	OnDestroy_Parms.Action = Action;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function Engine.RB_ConstraintActor.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_ConstraintActor::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = (UFunction*) UObject::GObjObjects()->Data[ 31981 ];

	ARB_ConstraintActor_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.InitConstraint
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  Actor1                         ( CPF_Parm )
// class AActor*                  Actor2                         ( CPF_Parm )
// struct FName                   Actor1Bone                     ( CPF_OptionalParm | CPF_Parm )
// struct FName                   Actor2Bone                     ( CPF_OptionalParm | CPF_Parm )
// float                          BreakThreshold                 ( CPF_OptionalParm | CPF_Parm )

void ARB_ConstraintActor::InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = (UFunction*) UObject::GObjObjects()->Data[ 31975 ];

	ARB_ConstraintActor_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.Actor1 = Actor1;
	InitConstraint_Parms.Actor2 = Actor2;
	memcpy ( &InitConstraint_Parms.Actor1Bone, &Actor1Bone, 0x8 );
	memcpy ( &InitConstraint_Parms.Actor2Bone, &Actor2Bone, 0x8 );
	InitConstraint_Parms.BreakThreshold = BreakThreshold;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintActor.SetDisableCollision
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  NewDisableCollision            ( CPF_Parm )

void ARB_ConstraintActor::SetDisableCollision ( unsigned long NewDisableCollision )
{
	static UFunction* pFnSetDisableCollision = NULL;

	if ( ! pFnSetDisableCollision )
		pFnSetDisableCollision = (UFunction*) UObject::GObjObjects()->Data[ 31973 ];

	ARB_ConstraintActor_execSetDisableCollision_Parms SetDisableCollision_Parms;
	SetDisableCollision_Parms.NewDisableCollision = NewDisableCollision;

	pFnSetDisableCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDisableCollision, &SetDisableCollision_Parms, NULL );

	pFnSetDisableCollision->FunctionFlags |= 0x400;
};

// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_LineImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 32114 ];

	ARB_LineImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_LineImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32112 ];

	ARB_LineImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_LineImpulseActor.FireLineImpulse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ARB_LineImpulseActor::FireLineImpulse ( )
{
	static UFunction* pFnFireLineImpulse = NULL;

	if ( ! pFnFireLineImpulse )
		pFnFireLineImpulse = (UFunction*) UObject::GObjObjects()->Data[ 32111 ];

	ARB_LineImpulseActor_execFireLineImpulse_Parms FireLineImpulse_Parms;

	pFnFireLineImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireLineImpulse, &FireLineImpulse_Parms, NULL );

	pFnFireLineImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ARB_RadialImpulseActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 32155 ];

	ARB_RadialImpulseActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.RB_RadialImpulseActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialImpulseActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32153 ];

	ARB_RadialImpulseActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_Thruster.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ARB_Thruster::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32184 ];

	ARB_Thruster_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.WorldAttractor.OnSetWorldAttractorParam
// [0x00020002] 
// Parameters infos:
// class USeqAct_SetWorldAttractorParam* Action                         ( CPF_Parm )

void AWorldAttractor::OnSetWorldAttractorParam ( class USeqAct_SetWorldAttractorParam* Action )
{
	static UFunction* pFnOnSetWorldAttractorParam = NULL;

	if ( ! pFnOnSetWorldAttractorParam )
		pFnOnSetWorldAttractorParam = (UFunction*) UObject::GObjObjects()->Data[ 32839 ];

	AWorldAttractor_execOnSetWorldAttractorParam_Parms OnSetWorldAttractorParam_Parms;
	OnSetWorldAttractorParam_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetWorldAttractorParam, &OnSetWorldAttractorParam_Parms, NULL );
};

// Function Engine.RB_RadialImpulseComponent.FireImpulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Origin                         ( CPF_Parm )

void URB_RadialImpulseComponent::FireImpulse ( struct FVector Origin )
{
	static UFunction* pFnFireImpulse = NULL;

	if ( ! pFnFireImpulse )
		pFnFireImpulse = (UFunction*) UObject::GObjObjects()->Data[ 32148 ];

	URB_RadialImpulseComponent_execFireImpulse_Parms FireImpulse_Parms;
	memcpy ( &FireImpulse_Parms.Origin, &Origin, 0xC );

	pFnFireImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireImpulse, &FireImpulse_Parms, NULL );

	pFnFireImpulse->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GetOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FQuat URB_Handle::GetOrientation ( )
{
	static UFunction* pFnGetOrientation = NULL;

	if ( ! pFnGetOrientation )
		pFnGetOrientation = (UFunction*) UObject::GObjObjects()->Data[ 32097 ];

	URB_Handle_execGetOrientation_Parms GetOrientation_Parms;

	pFnGetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrientation, &GetOrientation_Parms, NULL );

	pFnGetOrientation->FunctionFlags |= 0x400;

	return GetOrientation_Parms.ReturnValue;
};

// Function Engine.RB_Handle.SetOrientation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FQuat                   NewOrientation                 ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_Handle::SetOrientation ( struct FQuat* NewOrientation )
{
	static UFunction* pFnSetOrientation = NULL;

	if ( ! pFnSetOrientation )
		pFnSetOrientation = (UFunction*) UObject::GObjObjects()->Data[ 32095 ];

	URB_Handle_execSetOrientation_Parms SetOrientation_Parms;

	pFnSetOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOrientation, &SetOrientation_Parms, NULL );

	pFnSetOrientation->FunctionFlags |= 0x400;

	if ( NewOrientation )
		memcpy ( NewOrientation, &SetOrientation_Parms.NewOrientation, 0x10 );
};

// Function Engine.RB_Handle.UpdateSmoothLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_Handle::UpdateSmoothLocation ( struct FVector* NewLocation )
{
	static UFunction* pFnUpdateSmoothLocation = NULL;

	if ( ! pFnUpdateSmoothLocation )
		pFnUpdateSmoothLocation = (UFunction*) UObject::GObjObjects()->Data[ 32093 ];

	URB_Handle_execUpdateSmoothLocation_Parms UpdateSmoothLocation_Parms;

	pFnUpdateSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSmoothLocation, &UpdateSmoothLocation_Parms, NULL );

	pFnUpdateSmoothLocation->FunctionFlags |= 0x400;

	if ( NewLocation )
		memcpy ( NewLocation, &UpdateSmoothLocation_Parms.NewLocation, 0xC );
};

// Function Engine.RB_Handle.SetSmoothLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )
// float                          MoveTime                       ( CPF_Parm )

void URB_Handle::SetSmoothLocation ( struct FVector NewLocation, float MoveTime )
{
	static UFunction* pFnSetSmoothLocation = NULL;

	if ( ! pFnSetSmoothLocation )
		pFnSetSmoothLocation = (UFunction*) UObject::GObjObjects()->Data[ 32090 ];

	URB_Handle_execSetSmoothLocation_Parms SetSmoothLocation_Parms;
	memcpy ( &SetSmoothLocation_Parms.NewLocation, &NewLocation, 0xC );
	SetSmoothLocation_Parms.MoveTime = MoveTime;

	pFnSetSmoothLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSmoothLocation, &SetSmoothLocation_Parms, NULL );

	pFnSetSmoothLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.SetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 NewLocation                    ( CPF_Parm )

void URB_Handle::SetLocation ( struct FVector NewLocation )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 32088 ];

	URB_Handle_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.NewLocation, &NewLocation, 0xC );

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.ReleaseComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Handle::ReleaseComponent ( )
{
	static UFunction* pFnReleaseComponent = NULL;

	if ( ! pFnReleaseComponent )
		pFnReleaseComponent = (UFunction*) UObject::GObjObjects()->Data[ 32087 ];

	URB_Handle_execReleaseComponent_Parms ReleaseComponent_Parms;

	pFnReleaseComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseComponent, &ReleaseComponent_Parms, NULL );

	pFnReleaseComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_Handle.GrabComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName                     ( CPF_Parm )
// struct FVector                 GrabLocation                   ( CPF_Parm )
// unsigned long                  bConstrainRotation             ( CPF_Parm )

void URB_Handle::GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation )
{
	static UFunction* pFnGrabComponent = NULL;

	if ( ! pFnGrabComponent )
		pFnGrabComponent = (UFunction*) UObject::GObjObjects()->Data[ 32082 ];

	URB_Handle_execGrabComponent_Parms GrabComponent_Parms;
	GrabComponent_Parms.Component = Component;
	memcpy ( &GrabComponent_Parms.InBoneName, &InBoneName, 0x8 );
	memcpy ( &GrabComponent_Parms.GrabLocation, &GrabLocation, 0xC );
	GrabComponent_Parms.bConstrainRotation = bConstrainRotation;

	pFnGrabComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGrabComponent, &GrabComponent_Parms, NULL );

	pFnGrabComponent->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void URB_Spring::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 32181 ];

	URB_Spring_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function Engine.RB_Spring.SetComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     InComponent1                   ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName1                    ( CPF_Parm )
// struct FVector                 Position1                      ( CPF_Parm )
// class UPrimitiveComponent*     InComponent2                   ( CPF_Parm | CPF_EditInline )
// struct FName                   InBoneName2                    ( CPF_Parm )
// struct FVector                 Position2                      ( CPF_Parm )

void URB_Spring::SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 )
{
	static UFunction* pFnSetComponents = NULL;

	if ( ! pFnSetComponents )
		pFnSetComponents = (UFunction*) UObject::GObjObjects()->Data[ 32174 ];

	URB_Spring_execSetComponents_Parms SetComponents_Parms;
	SetComponents_Parms.InComponent1 = InComponent1;
	memcpy ( &SetComponents_Parms.InBoneName1, &InBoneName1, 0x8 );
	memcpy ( &SetComponents_Parms.Position1, &Position1, 0xC );
	SetComponents_Parms.InComponent2 = InComponent2;
	memcpy ( &SetComponents_Parms.InBoneName2, &InBoneName2, 0x8 );
	memcpy ( &SetComponents_Parms.Position2, &Position2, 0xC );

	pFnSetComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetComponents, &SetComponents_Parms, NULL );

	pFnSetComponents->FunctionFlags |= 0x400;
};

// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterialPropertyBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  DesiredClass                   ( CPF_Parm )

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty ( class UClass* DesiredClass )
{
	static UFunction* pFnGetPhysicalMaterialProperty = NULL;

	if ( ! pFnGetPhysicalMaterialProperty )
		pFnGetPhysicalMaterialProperty = (UFunction*) UObject::GObjObjects()->Data[ 30978 ];

	UPhysicalMaterial_execGetPhysicalMaterialProperty_Parms GetPhysicalMaterialProperty_Parms;
	GetPhysicalMaterialProperty_Parms.DesiredClass = DesiredClass;

	pFnGetPhysicalMaterialProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicalMaterialProperty, &GetPhysicalMaterialProperty_Parms, NULL );

	pFnGetPhysicalMaterialProperty->FunctionFlags |= 0x400;

	return GetPhysicalMaterialProperty_Parms.ReturnValue;
};

// Function Engine.PhysicalMaterial.FindFractureSounds
// [0x00420102] 
// Parameters infos:
// class USoundCue*               OutSoundExplosion              ( CPF_Parm | CPF_OutParm )
// class USoundCue*               OutSoundSingle                 ( CPF_Parm | CPF_OutParm )

void UPhysicalMaterial::FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle )
{
	static UFunction* pFnFindFractureSounds = NULL;

	if ( ! pFnFindFractureSounds )
		pFnFindFractureSounds = (UFunction*) UObject::GObjObjects()->Data[ 30971 ];

	UPhysicalMaterial_execFindFractureSounds_Parms FindFractureSounds_Parms;

	this->ProcessEvent ( pFnFindFractureSounds, &FindFractureSounds_Parms, NULL );

	if ( OutSoundExplosion )
		*OutSoundExplosion = FindFractureSounds_Parms.OutSoundExplosion;

	if ( OutSoundSingle )
		*OutSoundSingle = FindFractureSounds_Parms.OutSoundSingle;
};

// Function Engine.PhysicalMaterial.FindPhysEffectInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FPhysEffectInfo         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )

struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo ( unsigned char Type )
{
	static UFunction* pFnFindPhysEffectInfo = NULL;

	if ( ! pFnFindPhysEffectInfo )
		pFnFindPhysEffectInfo = (UFunction*) UObject::GObjObjects()->Data[ 20837 ];

	UPhysicalMaterial_execFindPhysEffectInfo_Parms FindPhysEffectInfo_Parms;
	FindPhysEffectInfo_Parms.Type = Type;

	pFnFindPhysEffectInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPhysEffectInfo, &FindPhysEffectInfo_Parms, NULL );

	pFnFindPhysEffectInfo->FunctionFlags |= 0x400;

	return FindPhysEffectInfo_Parms.ReturnValue;
};

// Function Engine.PhysicsAsset.FindBodyIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )

int UPhysicsAsset::FindBodyIndex ( struct FName BodyName )
{
	static UFunction* pFnFindBodyIndex = NULL;

	if ( ! pFnFindBodyIndex )
		pFnFindBodyIndex = (UFunction*) UObject::GObjObjects()->Data[ 31010 ];

	UPhysicsAsset_execFindBodyIndex_Parms FindBodyIndex_Parms;
	memcpy ( &FindBodyIndex_Parms.BodyName, &BodyName, 0x8 );

	pFnFindBodyIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyIndex, &FindBodyIndex_Parms, NULL );

	pFnFindBodyIndex->FunctionFlags |= 0x400;

	return FindBodyIndex_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_ConstraintInstance*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConName                        ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindConstraintInstance = NULL;

	if ( ! pFnFindConstraintInstance )
		pFnFindConstraintInstance = (UFunction*) UObject::GObjObjects()->Data[ 31105 ];

	UPhysicsAssetInstance_execFindConstraintInstance_Parms FindConstraintInstance_Parms;
	memcpy ( &FindConstraintInstance_Parms.ConName, &ConName, 0x8 );
	FindConstraintInstance_Parms.InAsset = InAsset;

	pFnFindConstraintInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintInstance, &FindConstraintInstance_Parms, NULL );

	pFnFindConstraintInstance->FunctionFlags |= 0x400;

	return FindConstraintInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.FindBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BodyName                       ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset )
{
	static UFunction* pFnFindBodyInstance = NULL;

	if ( ! pFnFindBodyInstance )
		pFnFindBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 31101 ];

	UPhysicsAssetInstance_execFindBodyInstance_Parms FindBodyInstance_Parms;
	memcpy ( &FindBodyInstance_Parms.BodyName, &BodyName, 0x8 );
	FindBodyInstance_Parms.InAsset = InAsset;

	pFnFindBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstance, &FindBodyInstance_Parms, NULL );

	pFnFindBodyInstance->FunctionFlags |= 0x400;

	return FindBodyInstance_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBonesFixed = NULL;

	if ( ! pFnSetFullAnimWeightBonesFixed )
		pFnSetFullAnimWeightBonesFixed = (UFunction*) UObject::GObjObjects()->Data[ 31098 ];

	UPhysicsAssetInstance_execSetFullAnimWeightBonesFixed_Parms SetFullAnimWeightBonesFixed_Parms;
	SetFullAnimWeightBonesFixed_Parms.bNewFixed = bNewFixed;
	SetFullAnimWeightBonesFixed_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBonesFixed, &SetFullAnimWeightBonesFixed_Parms, NULL );

	pFnSetFullAnimWeightBonesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetFullAnimWeightBlockRigidBody = NULL;

	if ( ! pFnSetFullAnimWeightBlockRigidBody )
		pFnSetFullAnimWeightBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 31095 ];

	UPhysicsAssetInstance_execSetFullAnimWeightBlockRigidBody_Parms SetFullAnimWeightBlockRigidBody_Parms;
	SetFullAnimWeightBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	SetFullAnimWeightBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFullAnimWeightBlockRigidBody, &SetFullAnimWeightBlockRigidBody_Parms, NULL );

	pFnSetFullAnimWeightBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh )
{
	static UFunction* pFnSetNamedBodiesBlockRigidBody = NULL;

	if ( ! pFnSetNamedBodiesBlockRigidBody )
		pFnSetNamedBodiesBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 31090 ];

	UPhysicsAssetInstance_execSetNamedBodiesBlockRigidBody_Parms SetNamedBodiesBlockRigidBody_Parms;
	SetNamedBodiesBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;
	memcpy ( &SetNamedBodiesBlockRigidBody_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedBodiesBlockRigidBody_Parms.SkelMesh = SkelMesh;

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesBlockRigidBody, &SetNamedBodiesBlockRigidBody_Parms, NULL );

	pFnSetNamedBodiesBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          InBoneLinearSpring             ( CPF_Parm )
// float                          InBoneAngularSpring            ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )

void UPhysicsAssetInstance::SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp )
{
	static UFunction* pFnSetNamedRBBoneSprings = NULL;

	if ( ! pFnSetNamedRBBoneSprings )
		pFnSetNamedRBBoneSprings = (UFunction*) UObject::GObjObjects()->Data[ 31083 ];

	UPhysicsAssetInstance_execSetNamedRBBoneSprings_Parms SetNamedRBBoneSprings_Parms;
	SetNamedRBBoneSprings_Parms.bEnable = bEnable;
	memcpy ( &SetNamedRBBoneSprings_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedRBBoneSprings_Parms.InBoneLinearSpring = InBoneLinearSpring;
	SetNamedRBBoneSprings_Parms.InBoneAngularSpring = InBoneAngularSpring;
	SetNamedRBBoneSprings_Parms.SkelMeshComp = SkelMeshComp;

	pFnSetNamedRBBoneSprings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedRBBoneSprings, &SetNamedRBBoneSprings_Parms, NULL );

	pFnSetNamedRBBoneSprings->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularVelocityDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularVelocityDrive )
		pFnSetNamedMotorsAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 31076 ];

	UPhysicsAssetInstance_execSetNamedMotorsAngularVelocityDrive_Parms SetNamedMotorsAngularVelocityDrive_Parms;
	SetNamedMotorsAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularVelocityDrive_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedMotorsAngularVelocityDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularVelocityDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularVelocityDrive, &SetNamedMotorsAngularVelocityDrive_Parms, NULL );

	pFnSetNamedMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement )
{
	static UFunction* pFnSetNamedMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetNamedMotorsAngularPositionDrive )
		pFnSetNamedMotorsAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 31069 ];

	UPhysicsAssetInstance_execSetNamedMotorsAngularPositionDrive_Parms SetNamedMotorsAngularPositionDrive_Parms;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetNamedMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	memcpy ( &SetNamedMotorsAngularPositionDrive_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedMotorsAngularPositionDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetNamedMotorsAngularPositionDrive_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedMotorsAngularPositionDrive, &SetNamedMotorsAngularPositionDrive_Parms, NULL );

	pFnSetNamedMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularDriveParams = NULL;

	if ( ! pFnSetAllMotorsAngularDriveParams )
		pFnSetAllMotorsAngularDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 31063 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularDriveParams_Parms SetAllMotorsAngularDriveParams_Parms;
	SetAllMotorsAngularDriveParams_Parms.InSpring = InSpring;
	SetAllMotorsAngularDriveParams_Parms.InDamping = InDamping;
	SetAllMotorsAngularDriveParams_Parms.InForceLimit = InForceLimit;
	SetAllMotorsAngularDriveParams_Parms.SkelMesh = SkelMesh;
	SetAllMotorsAngularDriveParams_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularDriveParams, &SetAllMotorsAngularDriveParams_Parms, NULL );

	pFnSetAllMotorsAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMeshComp                   ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularVelocityDrive = NULL;

	if ( ! pFnSetAllMotorsAngularVelocityDrive )
		pFnSetAllMotorsAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 31058 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularVelocityDrive_Parms SetAllMotorsAngularVelocityDrive_Parms;
	SetAllMotorsAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularVelocityDrive_Parms.SkelMeshComp = SkelMeshComp;
	SetAllMotorsAngularVelocityDrive_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularVelocityDrive, &SetAllMotorsAngularVelocityDrive_Parms, NULL );

	pFnSetAllMotorsAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetAllMotorsAngularPositionDrive = NULL;

	if ( ! pFnSetAllMotorsAngularPositionDrive )
		pFnSetAllMotorsAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 31053 ];

	UPhysicsAssetInstance_execSetAllMotorsAngularPositionDrive_Parms SetAllMotorsAngularPositionDrive_Parms;
	SetAllMotorsAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAllMotorsAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;
	SetAllMotorsAngularPositionDrive_Parms.SkelMesh = SkelMesh;
	SetAllMotorsAngularPositionDrive_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllMotorsAngularPositionDrive, &SetAllMotorsAngularPositionDrive_Parms, NULL );

	pFnSetAllMotorsAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )
// class USkeletalMeshComponent*  InSkelMesh                     ( CPF_Parm | CPF_EditInline )
// unsigned long                  InbInstanceAlwaysFullAnimWeight ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Const | CPF_Parm | CPF_OutParm )

void UPhysicsAssetInstance::ForceAllBodiesBelowUnfixed ( class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, unsigned long InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName )
{
	static UFunction* pFnForceAllBodiesBelowUnfixed = NULL;

	if ( ! pFnForceAllBodiesBelowUnfixed )
		pFnForceAllBodiesBelowUnfixed = (UFunction*) UObject::GObjObjects()->Data[ 31048 ];

	UPhysicsAssetInstance_execForceAllBodiesBelowUnfixed_Parms ForceAllBodiesBelowUnfixed_Parms;
	ForceAllBodiesBelowUnfixed_Parms.InAsset = InAsset;
	ForceAllBodiesBelowUnfixed_Parms.InSkelMesh = InSkelMesh;
	ForceAllBodiesBelowUnfixed_Parms.InbInstanceAlwaysFullAnimWeight = InbInstanceAlwaysFullAnimWeight;

	pFnForceAllBodiesBelowUnfixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceAllBodiesBelowUnfixed, &ForceAllBodiesBelowUnfixed_Parms, NULL );

	pFnForceAllBodiesBelowUnfixed->FunctionFlags |= 0x400;

	if ( InBoneName )
		memcpy ( InBoneName, &ForceAllBodiesBelowUnfixed_Parms.InBoneName, 0x8 );
};

// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// unsigned long                  bSetOtherBodiesToComplement    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipFullAnimWeightBodies      ( CPF_OptionalParm | CPF_Parm )

void UPhysicsAssetInstance::SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies )
{
	static UFunction* pFnSetNamedBodiesFixed = NULL;

	if ( ! pFnSetNamedBodiesFixed )
		pFnSetNamedBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 31041 ];

	UPhysicsAssetInstance_execSetNamedBodiesFixed_Parms SetNamedBodiesFixed_Parms;
	SetNamedBodiesFixed_Parms.bNewFixed = bNewFixed;
	memcpy ( &SetNamedBodiesFixed_Parms.BoneNames, &BoneNames, 0xC );
	SetNamedBodiesFixed_Parms.SkelMesh = SkelMesh;
	SetNamedBodiesFixed_Parms.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	SetNamedBodiesFixed_Parms.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	pFnSetNamedBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNamedBodiesFixed, &SetNamedBodiesFixed_Parms, NULL );

	pFnSetNamedBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void UPhysicsAssetInstance::SetAllBodiesFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetAllBodiesFixed = NULL;

	if ( ! pFnSetAllBodiesFixed )
		pFnSetAllBodiesFixed = (UFunction*) UObject::GObjObjects()->Data[ 31039 ];

	UPhysicsAssetInstance_execSetAllBodiesFixed_Parms SetAllBodiesFixed_Parms;
	SetAllBodiesFixed_Parms.bNewFixed = bNewFixed;

	pFnSetAllBodiesFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAllBodiesFixed, &SetAllBodiesFixed_Parms, NULL );

	pFnSetAllBodiesFixed->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InBoneName                     ( CPF_Parm )
// class UPhysicsAsset*           InAsset                        ( CPF_Parm )
// class USkeletalMesh*           InSkelMesh                     ( CPF_Parm )

float UPhysicsAssetInstance::GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh )
{
	static UFunction* pFnGetTotalMassBelowBone = NULL;

	if ( ! pFnGetTotalMassBelowBone )
		pFnGetTotalMassBelowBone = (UFunction*) UObject::GObjObjects()->Data[ 31034 ];

	UPhysicsAssetInstance_execGetTotalMassBelowBone_Parms GetTotalMassBelowBone_Parms;
	memcpy ( &GetTotalMassBelowBone_Parms.InBoneName, &InBoneName, 0x8 );
	GetTotalMassBelowBone_Parms.InAsset = InAsset;
	GetTotalMassBelowBone_Parms.InSkelMesh = InSkelMesh;

	pFnGetTotalMassBelowBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalMassBelowBone, &GetTotalMassBelowBone_Parms, NULL );

	pFnGetTotalMassBelowBone->FunctionFlags |= 0x400;

	return GetTotalMassBelowBone_Parms.ReturnValue;
};

// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InAngularSpringScale           ( CPF_Parm )
// float                          InAngularDampingScale          ( CPF_Parm )
// float                          InAngularForceLimitScale       ( CPF_Parm )

void UPhysicsAssetInstance::SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale )
{
	static UFunction* pFnSetAngularDriveScale = NULL;

	if ( ! pFnSetAngularDriveScale )
		pFnSetAngularDriveScale = (UFunction*) UObject::GObjObjects()->Data[ 31030 ];

	UPhysicsAssetInstance_execSetAngularDriveScale_Parms SetAngularDriveScale_Parms;
	SetAngularDriveScale_Parms.InAngularSpringScale = InAngularSpringScale;
	SetAngularDriveScale_Parms.InAngularDampingScale = InAngularDampingScale;
	SetAngularDriveScale_Parms.InAngularForceLimitScale = InAngularForceLimitScale;

	pFnSetAngularDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveScale, &SetAngularDriveScale_Parms, NULL );

	pFnSetAngularDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpringScale            ( CPF_Parm )
// float                          InLinearDampingScale           ( CPF_Parm )
// float                          InLinearForceLimitScale        ( CPF_Parm )

void UPhysicsAssetInstance::SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale )
{
	static UFunction* pFnSetLinearDriveScale = NULL;

	if ( ! pFnSetLinearDriveScale )
		pFnSetLinearDriveScale = (UFunction*) UObject::GObjObjects()->Data[ 31026 ];

	UPhysicsAssetInstance_execSetLinearDriveScale_Parms SetLinearDriveScale_Parms;
	SetLinearDriveScale_Parms.InLinearSpringScale = InLinearSpringScale;
	SetLinearDriveScale_Parms.InLinearDampingScale = InLinearDampingScale;
	SetLinearDriveScale_Parms.InLinearForceLimitScale = InLinearForceLimitScale;

	pFnSetLinearDriveScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveScale, &SetLinearDriveScale_Parms, NULL );

	pFnSetLinearDriveScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.UpdateDampingProperties
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void URB_BodyInstance::UpdateDampingProperties ( )
{
	static UFunction* pFnUpdateDampingProperties = NULL;

	if ( ! pFnUpdateDampingProperties )
		pFnUpdateDampingProperties = (UFunction*) UObject::GObjObjects()->Data[ 31854 ];

	URB_BodyInstance_execUpdateDampingProperties_Parms UpdateDampingProperties_Parms;

	pFnUpdateDampingProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDampingProperties, &UpdateDampingProperties_Parms, NULL );

	pFnUpdateDampingProperties->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.UpdateMassProperties
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodySetup*           Setup                          ( CPF_Parm )

void URB_BodyInstance::UpdateMassProperties ( class URB_BodySetup* Setup )
{
	static UFunction* pFnUpdateMassProperties = NULL;

	if ( ! pFnUpdateMassProperties )
		pFnUpdateMassProperties = (UFunction*) UObject::GObjObjects()->Data[ 31852 ];

	URB_BodyInstance_execUpdateMassProperties_Parms UpdateMassProperties_Parms;
	UpdateMassProperties_Parms.Setup = Setup;

	pFnUpdateMassProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMassProperties, &UpdateMassProperties_Parms, NULL );

	pFnUpdateMassProperties->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Threshold                      ( CPF_Parm )

void URB_BodyInstance::SetContactReportForceThreshold ( float Threshold )
{
	static UFunction* pFnSetContactReportForceThreshold = NULL;

	if ( ! pFnSetContactReportForceThreshold )
		pFnSetContactReportForceThreshold = (UFunction*) UObject::GObjObjects()->Data[ 31850 ];

	URB_BodyInstance_execSetContactReportForceThreshold_Parms SetContactReportForceThreshold_Parms;
	SetContactReportForceThreshold_Parms.Threshold = Threshold;

	pFnSetContactReportForceThreshold->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetContactReportForceThreshold, &SetContactReportForceThreshold_Parms, NULL );

	pFnSetContactReportForceThreshold->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableCollisionResponse
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableResponse                ( CPF_Parm )

void URB_BodyInstance::EnableCollisionResponse ( unsigned long bEnableResponse )
{
	static UFunction* pFnEnableCollisionResponse = NULL;

	if ( ! pFnEnableCollisionResponse )
		pFnEnableCollisionResponse = (UFunction*) UObject::GObjObjects()->Data[ 31848 ];

	URB_BodyInstance_execEnableCollisionResponse_Parms EnableCollisionResponse_Parms;
	EnableCollisionResponse_Parms.bEnableResponse = bEnableResponse;

	pFnEnableCollisionResponse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCollisionResponse, &EnableCollisionResponse_Parms, NULL );

	pFnEnableCollisionResponse->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicalMaterial*       NewPhysMaterial                ( CPF_Parm )

void URB_BodyInstance::SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial )
{
	static UFunction* pFnSetPhysMaterialOverride = NULL;

	if ( ! pFnSetPhysMaterialOverride )
		pFnSetPhysMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 31846 ];

	URB_BodyInstance_execSetPhysMaterialOverride_Parms SetPhysMaterialOverride_Parms;
	SetPhysMaterialOverride_Parms.NewPhysMaterial = NewPhysMaterial;

	pFnSetPhysMaterialOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysMaterialOverride, &SetPhysMaterialOverride_Parms, NULL );

	pFnSetPhysMaterialOverride->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBlockRigidBody
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewBlockRigidBody             ( CPF_Parm )

void URB_BodyInstance::SetBlockRigidBody ( unsigned long bNewBlockRigidBody )
{
	static UFunction* pFnSetBlockRigidBody = NULL;

	if ( ! pFnSetBlockRigidBody )
		pFnSetBlockRigidBody = (UFunction*) UObject::GObjObjects()->Data[ 31844 ];

	URB_BodyInstance_execSetBlockRigidBody_Parms SetBlockRigidBody_Parms;
	SetBlockRigidBody_Parms.bNewBlockRigidBody = bNewBlockRigidBody;

	pFnSetBlockRigidBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBlockRigidBody, &SetBlockRigidBody_Parms, NULL );

	pFnSetBlockRigidBody->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bTeleport                      ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnSetBoneSpringTarget = NULL;

	if ( ! pFnSetBoneSpringTarget )
		pFnSetBoneSpringTarget = (UFunction*) UObject::GObjObjects()->Data[ 31841 ];

	URB_BodyInstance_execSetBoneSpringTarget_Parms SetBoneSpringTarget_Parms;
	SetBoneSpringTarget_Parms.bTeleport = bTeleport;

	pFnSetBoneSpringTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringTarget, &SetBoneSpringTarget_Parms, NULL );

	pFnSetBoneSpringTarget->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &SetBoneSpringTarget_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.SetBoneSpringParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InLinearSpring                 ( CPF_Parm )
// float                          InLinearDamping                ( CPF_Parm )
// float                          InAngularSpring                ( CPF_Parm )
// float                          InAngularDamping               ( CPF_Parm )

void URB_BodyInstance::SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping )
{
	static UFunction* pFnSetBoneSpringParams = NULL;

	if ( ! pFnSetBoneSpringParams )
		pFnSetBoneSpringParams = (UFunction*) UObject::GObjObjects()->Data[ 31836 ];

	URB_BodyInstance_execSetBoneSpringParams_Parms SetBoneSpringParams_Parms;
	SetBoneSpringParams_Parms.InLinearSpring = InLinearSpring;
	SetBoneSpringParams_Parms.InLinearDamping = InLinearDamping;
	SetBoneSpringParams_Parms.InAngularSpring = InAngularSpring;
	SetBoneSpringParams_Parms.InAngularDamping = InAngularDamping;

	pFnSetBoneSpringParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpringParams, &SetBoneSpringParams_Parms, NULL );

	pFnSetBoneSpringParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.EnableBoneSpring
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnableLinear                ( CPF_Parm )
// unsigned long                  bInEnableAngular               ( CPF_Parm )
// struct FMatrix                 InBoneTarget                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_BodyInstance::EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget )
{
	static UFunction* pFnEnableBoneSpring = NULL;

	if ( ! pFnEnableBoneSpring )
		pFnEnableBoneSpring = (UFunction*) UObject::GObjObjects()->Data[ 31832 ];

	URB_BodyInstance_execEnableBoneSpring_Parms EnableBoneSpring_Parms;
	EnableBoneSpring_Parms.bInEnableLinear = bInEnableLinear;
	EnableBoneSpring_Parms.bInEnableAngular = bInEnableAngular;

	pFnEnableBoneSpring->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableBoneSpring, &EnableBoneSpring_Parms, NULL );

	pFnEnableBoneSpring->FunctionFlags |= 0x400;

	if ( InBoneTarget )
		memcpy ( InBoneTarget, &EnableBoneSpring_Parms.InBoneTarget, 0x40 );
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Point                          ( CPF_Parm )

struct FVector URB_BodyInstance::GetUnrealWorldVelocityAtPoint ( struct FVector Point )
{
	static UFunction* pFnGetUnrealWorldVelocityAtPoint = NULL;

	if ( ! pFnGetUnrealWorldVelocityAtPoint )
		pFnGetUnrealWorldVelocityAtPoint = (UFunction*) UObject::GObjObjects()->Data[ 31829 ];

	URB_BodyInstance_execGetUnrealWorldVelocityAtPoint_Parms GetUnrealWorldVelocityAtPoint_Parms;
	memcpy ( &GetUnrealWorldVelocityAtPoint_Parms.Point, &Point, 0xC );

	pFnGetUnrealWorldVelocityAtPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldVelocityAtPoint, &GetUnrealWorldVelocityAtPoint_Parms, NULL );

	pFnGetUnrealWorldVelocityAtPoint->FunctionFlags |= 0x400;

	return GetUnrealWorldVelocityAtPoint_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity ( )
{
	static UFunction* pFnGetUnrealWorldAngularVelocity = NULL;

	if ( ! pFnGetUnrealWorldAngularVelocity )
		pFnGetUnrealWorldAngularVelocity = (UFunction*) UObject::GObjObjects()->Data[ 31827 ];

	URB_BodyInstance_execGetUnrealWorldAngularVelocity_Parms GetUnrealWorldAngularVelocity_Parms;

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldAngularVelocity, &GetUnrealWorldAngularVelocity_Parms, NULL );

	pFnGetUnrealWorldAngularVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldAngularVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_BodyInstance::GetUnrealWorldVelocity ( )
{
	static UFunction* pFnGetUnrealWorldVelocity = NULL;

	if ( ! pFnGetUnrealWorldVelocity )
		pFnGetUnrealWorldVelocity = (UFunction*) UObject::GObjObjects()->Data[ 31825 ];

	URB_BodyInstance_execGetUnrealWorldVelocity_Parms GetUnrealWorldVelocity_Parms;

	pFnGetUnrealWorldVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldVelocity, &GetUnrealWorldVelocity_Parms, NULL );

	pFnGetUnrealWorldVelocity->FunctionFlags |= 0x400;

	return GetUnrealWorldVelocity_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix URB_BodyInstance::GetUnrealWorldTM ( )
{
	static UFunction* pFnGetUnrealWorldTM = NULL;

	if ( ! pFnGetUnrealWorldTM )
		pFnGetUnrealWorldTM = (UFunction*) UObject::GObjObjects()->Data[ 31823 ];

	URB_BodyInstance_execGetUnrealWorldTM_Parms GetUnrealWorldTM_Parms;

	pFnGetUnrealWorldTM->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnrealWorldTM, &GetUnrealWorldTM_Parms, NULL );

	pFnGetUnrealWorldTM->FunctionFlags |= 0x400;

	return GetUnrealWorldTM_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 31821 ];

	URB_BodyInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsValidBodyInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsValidBodyInstance ( )
{
	static UFunction* pFnIsValidBodyInstance = NULL;

	if ( ! pFnIsValidBodyInstance )
		pFnIsValidBodyInstance = (UFunction*) UObject::GObjObjects()->Data[ 31819 ];

	URB_BodyInstance_execIsValidBodyInstance_Parms IsValidBodyInstance_Parms;

	pFnIsValidBodyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidBodyInstance, &IsValidBodyInstance_Parms, NULL );

	pFnIsValidBodyInstance->FunctionFlags |= 0x400;

	return IsValidBodyInstance_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.IsFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool URB_BodyInstance::IsFixed ( )
{
	static UFunction* pFnIsFixed = NULL;

	if ( ! pFnIsFixed )
		pFnIsFixed = (UFunction*) UObject::GObjObjects()->Data[ 10771 ];

	URB_BodyInstance_execIsFixed_Parms IsFixed_Parms;

	pFnIsFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFixed, &IsFixed_Parms, NULL );

	pFnIsFixed->FunctionFlags |= 0x400;

	return IsFixed_Parms.ReturnValue;
};

// Function Engine.RB_BodyInstance.SetFixed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFixed                      ( CPF_Parm )

void URB_BodyInstance::SetFixed ( unsigned long bNewFixed )
{
	static UFunction* pFnSetFixed = NULL;

	if ( ! pFnSetFixed )
		pFnSetFixed = (UFunction*) UObject::GObjObjects()->Data[ 10773 ];

	URB_BodyInstance_execSetFixed_Parms SetFixed_Parms;
	SetFixed_Parms.bNewFixed = bNewFixed;

	pFnSetFixed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFixed, &SetFixed_Parms, NULL );

	pFnSetFixed->FunctionFlags |= 0x400;
};

// Function Engine.RB_BodyInstance.GetBodyMass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float URB_BodyInstance::GetBodyMass ( )
{
	static UFunction* pFnGetBodyMass = NULL;

	if ( ! pFnGetBodyMass )
		pFnGetBodyMass = (UFunction*) UObject::GObjObjects()->Data[ 24188 ];

	URB_BodyInstance_execGetBodyMass_Parms GetBodyMass_Parms;

	pFnGetBodyMass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBodyMass, &GetBodyMass_Parms, NULL );

	pFnGetBodyMass->FunctionFlags |= 0x400;

	return GetBodyMass_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 NewTM                          ( CPF_Parm | CPF_OutParm )

void URB_ConstraintInstance::MoveKinActorTransform ( struct FMatrix* NewTM )
{
	static UFunction* pFnMoveKinActorTransform = NULL;

	if ( ! pFnMoveKinActorTransform )
		pFnMoveKinActorTransform = (UFunction*) UObject::GObjObjects()->Data[ 31962 ];

	URB_ConstraintInstance_execMoveKinActorTransform_Parms MoveKinActorTransform_Parms;

	pFnMoveKinActorTransform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveKinActorTransform, &MoveKinActorTransform_Parms, NULL );

	pFnMoveKinActorTransform->FunctionFlags |= 0x400;

	if ( NewTM )
		memcpy ( NewTM, &MoveKinActorTransform_Parms.NewTM, 0x40 );
};

// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewLimitSize                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearLimitSize ( float NewLimitSize )
{
	static UFunction* pFnSetLinearLimitSize = NULL;

	if ( ! pFnSetLinearLimitSize )
		pFnSetLinearLimitSize = (UFunction*) UObject::GObjObjects()->Data[ 31960 ];

	URB_ConstraintInstance_execSetLinearLimitSize_Parms SetLinearLimitSize_Parms;
	SetLinearLimitSize_Parms.NewLimitSize = NewLimitSize;

	pFnSetLinearLimitSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearLimitSize, &SetLinearLimitSize_Parms, NULL );

	pFnSetLinearLimitSize->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSwing1LimitScale             ( CPF_Parm )
// float                          InSwing2LimitScale             ( CPF_Parm )
// float                          InTwistLimitScale              ( CPF_Parm )
// class URB_ConstraintSetup*     InSetup                        ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup )
{
	static UFunction* pFnSetAngularDOFLimitScale = NULL;

	if ( ! pFnSetAngularDOFLimitScale )
		pFnSetAngularDOFLimitScale = (UFunction*) UObject::GObjObjects()->Data[ 31955 ];

	URB_ConstraintInstance_execSetAngularDOFLimitScale_Parms SetAngularDOFLimitScale_Parms;
	SetAngularDOFLimitScale_Parms.InSwing1LimitScale = InSwing1LimitScale;
	SetAngularDOFLimitScale_Parms.InSwing2LimitScale = InSwing2LimitScale;
	SetAngularDOFLimitScale_Parms.InTwistLimitScale = InTwistLimitScale;
	SetAngularDOFLimitScale_Parms.InSetup = InSetup;

	pFnSetAngularDOFLimitScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDOFLimitScale, &SetAngularDOFLimitScale_Parms, NULL );

	pFnSetAngularDOFLimitScale->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetAngularDriveParams = NULL;

	if ( ! pFnSetAngularDriveParams )
		pFnSetAngularDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 31951 ];

	URB_ConstraintInstance_execSetAngularDriveParams_Parms SetAngularDriveParams_Parms;
	SetAngularDriveParams_Parms.InSpring = InSpring;
	SetAngularDriveParams_Parms.InDamping = InDamping;
	SetAngularDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetAngularDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularDriveParams, &SetAngularDriveParams_Parms, NULL );

	pFnSetAngularDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetAngularVelocityTarget = NULL;

	if ( ! pFnSetAngularVelocityTarget )
		pFnSetAngularVelocityTarget = (UFunction*) UObject::GObjObjects()->Data[ 31949 ];

	URB_ConstraintInstance_execSetAngularVelocityTarget_Parms SetAngularVelocityTarget_Parms;
	memcpy ( &SetAngularVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetAngularVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityTarget, &SetAngularVelocityTarget_Parms, NULL );

	pFnSetAngularVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   InPosTarget                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void URB_ConstraintInstance::SetAngularPositionTarget ( struct FQuat* InPosTarget )
{
	static UFunction* pFnSetAngularPositionTarget = NULL;

	if ( ! pFnSetAngularPositionTarget )
		pFnSetAngularPositionTarget = (UFunction*) UObject::GObjObjects()->Data[ 31947 ];

	URB_ConstraintInstance_execSetAngularPositionTarget_Parms SetAngularPositionTarget_Parms;

	pFnSetAngularPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionTarget, &SetAngularPositionTarget_Parms, NULL );

	pFnSetAngularPositionTarget->FunctionFlags |= 0x400;

	if ( InPosTarget )
		memcpy ( InPosTarget, &SetAngularPositionTarget_Parms.InPosTarget, 0x10 );
};

// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          InSpring                       ( CPF_Parm )
// float                          InDamping                      ( CPF_Parm )
// float                          InForceLimit                   ( CPF_Parm )

void URB_ConstraintInstance::SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit )
{
	static UFunction* pFnSetLinearDriveParams = NULL;

	if ( ! pFnSetLinearDriveParams )
		pFnSetLinearDriveParams = (UFunction*) UObject::GObjObjects()->Data[ 31943 ];

	URB_ConstraintInstance_execSetLinearDriveParams_Parms SetLinearDriveParams_Parms;
	SetLinearDriveParams_Parms.InSpring = InSpring;
	SetLinearDriveParams_Parms.InDamping = InDamping;
	SetLinearDriveParams_Parms.InForceLimit = InForceLimit;

	pFnSetLinearDriveParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearDriveParams, &SetLinearDriveParams_Parms, NULL );

	pFnSetLinearDriveParams->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InVelTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityTarget ( struct FVector InVelTarget )
{
	static UFunction* pFnSetLinearVelocityTarget = NULL;

	if ( ! pFnSetLinearVelocityTarget )
		pFnSetLinearVelocityTarget = (UFunction*) UObject::GObjObjects()->Data[ 31941 ];

	URB_ConstraintInstance_execSetLinearVelocityTarget_Parms SetLinearVelocityTarget_Parms;
	memcpy ( &SetLinearVelocityTarget_Parms.InVelTarget, &InVelTarget, 0xC );

	pFnSetLinearVelocityTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityTarget, &SetLinearVelocityTarget_Parms, NULL );

	pFnSetLinearVelocityTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InPosTarget                    ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionTarget ( struct FVector InPosTarget )
{
	static UFunction* pFnSetLinearPositionTarget = NULL;

	if ( ! pFnSetLinearPositionTarget )
		pFnSetLinearPositionTarget = (UFunction*) UObject::GObjObjects()->Data[ 31939 ];

	URB_ConstraintInstance_execSetLinearPositionTarget_Parms SetLinearPositionTarget_Parms;
	memcpy ( &SetLinearPositionTarget_Parms.InPosTarget, &InPosTarget, 0xC );

	pFnSetLinearPositionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionTarget, &SetLinearPositionTarget_Parms, NULL );

	pFnSetLinearPositionTarget->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularVelocityDrive = NULL;

	if ( ! pFnSetAngularVelocityDrive )
		pFnSetAngularVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 31936 ];

	URB_ConstraintInstance_execSetAngularVelocityDrive_Parms SetAngularVelocityDrive_Parms;
	SetAngularVelocityDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularVelocityDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularVelocityDrive, &SetAngularVelocityDrive_Parms, NULL );

	pFnSetAngularVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableSwingDrive              ( CPF_Parm )
// unsigned long                  bEnableTwistDrive              ( CPF_Parm )

void URB_ConstraintInstance::SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive )
{
	static UFunction* pFnSetAngularPositionDrive = NULL;

	if ( ! pFnSetAngularPositionDrive )
		pFnSetAngularPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 31933 ];

	URB_ConstraintInstance_execSetAngularPositionDrive_Parms SetAngularPositionDrive_Parms;
	SetAngularPositionDrive_Parms.bEnableSwingDrive = bEnableSwingDrive;
	SetAngularPositionDrive_Parms.bEnableTwistDrive = bEnableTwistDrive;

	pFnSetAngularPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAngularPositionDrive, &SetAngularPositionDrive_Parms, NULL );

	pFnSetAngularPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearVelocityDrive = NULL;

	if ( ! pFnSetLinearVelocityDrive )
		pFnSetLinearVelocityDrive = (UFunction*) UObject::GObjObjects()->Data[ 31929 ];

	URB_ConstraintInstance_execSetLinearVelocityDrive_Parms SetLinearVelocityDrive_Parms;
	SetLinearVelocityDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearVelocityDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearVelocityDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearVelocityDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearVelocityDrive, &SetLinearVelocityDrive_Parms, NULL );

	pFnSetLinearVelocityDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnableXDrive                  ( CPF_Parm )
// unsigned long                  bEnableYDrive                  ( CPF_Parm )
// unsigned long                  bEnableZDrive                  ( CPF_Parm )

void URB_ConstraintInstance::SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive )
{
	static UFunction* pFnSetLinearPositionDrive = NULL;

	if ( ! pFnSetLinearPositionDrive )
		pFnSetLinearPositionDrive = (UFunction*) UObject::GObjObjects()->Data[ 31925 ];

	URB_ConstraintInstance_execSetLinearPositionDrive_Parms SetLinearPositionDrive_Parms;
	SetLinearPositionDrive_Parms.bEnableXDrive = bEnableXDrive;
	SetLinearPositionDrive_Parms.bEnableYDrive = bEnableYDrive;
	SetLinearPositionDrive_Parms.bEnableZDrive = bEnableZDrive;

	pFnSetLinearPositionDrive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLinearPositionDrive, &SetLinearPositionDrive_Parms, NULL );

	pFnSetLinearPositionDrive->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector URB_ConstraintInstance::GetConstraintLocation ( )
{
	static UFunction* pFnGetConstraintLocation = NULL;

	if ( ! pFnGetConstraintLocation )
		pFnGetConstraintLocation = (UFunction*) UObject::GObjObjects()->Data[ 31923 ];

	URB_ConstraintInstance_execGetConstraintLocation_Parms GetConstraintLocation_Parms;

	pFnGetConstraintLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetConstraintLocation, &GetConstraintLocation_Parms, NULL );

	pFnGetConstraintLocation->FunctionFlags |= 0x400;

	return GetConstraintLocation_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAssetInstance*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance ( )
{
	static UFunction* pFnGetPhysicsAssetInstance = NULL;

	if ( ! pFnGetPhysicsAssetInstance )
		pFnGetPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 31921 ];

	URB_ConstraintInstance_execGetPhysicsAssetInstance_Parms GetPhysicsAssetInstance_Parms;

	pFnGetPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAssetInstance, &GetPhysicsAssetInstance_Parms, NULL );

	pFnGetPhysicsAssetInstance->FunctionFlags |= 0x400;

	return GetPhysicsAssetInstance_Parms.ReturnValue;
};

// Function Engine.RB_ConstraintInstance.TermConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void URB_ConstraintInstance::TermConstraint ( )
{
	static UFunction* pFnTermConstraint = NULL;

	if ( ! pFnTermConstraint )
		pFnTermConstraint = (UFunction*) UObject::GObjObjects()->Data[ 10774 ];

	URB_ConstraintInstance_execTermConstraint_Parms TermConstraint_Parms;

	pFnTermConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermConstraint, &TermConstraint_Parms, NULL );

	pFnTermConstraint->FunctionFlags |= 0x400;
};

// Function Engine.RB_ConstraintInstance.InitConstraint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     PrimComp1                      ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     PrimComp2                      ( CPF_Parm | CPF_EditInline )
// class URB_ConstraintSetup*     Setup                          ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// class AActor*                  InOwner                        ( CPF_Parm )
// class UPrimitiveComponent*     InPrimComp                     ( CPF_Parm | CPF_EditInline )
// unsigned long                  bMakeKinForBody1               ( CPF_Parm )

void URB_ConstraintInstance::InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 )
{
	static UFunction* pFnInitConstraint = NULL;

	if ( ! pFnInitConstraint )
		pFnInitConstraint = (UFunction*) UObject::GObjObjects()->Data[ 31913 ];

	URB_ConstraintInstance_execInitConstraint_Parms InitConstraint_Parms;
	InitConstraint_Parms.PrimComp1 = PrimComp1;
	InitConstraint_Parms.PrimComp2 = PrimComp2;
	InitConstraint_Parms.Setup = Setup;
	InitConstraint_Parms.Scale = Scale;
	InitConstraint_Parms.InOwner = InOwner;
	InitConstraint_Parms.InPrimComp = InPrimComp;
	InitConstraint_Parms.bMakeKinForBody1 = bMakeKinForBody1;

	pFnInitConstraint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitConstraint, &InitConstraint_Parms, NULL );

	pFnInitConstraint->FunctionFlags |= 0x400;
};

// Function Engine.NxGenericForceFieldBrush.StopsProjectile
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  P                              ( CPF_Parm )

bool ANxGenericForceFieldBrush::StopsProjectile ( class AActor* P )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = (UFunction*) UObject::GObjObjects()->Data[ 26936 ];

	ANxGenericForceFieldBrush_execStopsProjectile_Parms StopsProjectile_Parms;
	StopsProjectile_Parms.P = P;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );

	return StopsProjectile_Parms.ReturnValue;
};

// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ANxGenericForceFieldBrush::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 26935 ];

	ANxGenericForceFieldBrush_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.NxForceField.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANxForceField::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 26756 ];

	ANxForceField_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NxForceField.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceField::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26755 ];

	ANxForceField_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxCylindricalForceFieldCapsule::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26771 ];

	ANxCylindricalForceFieldCapsule_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldGeneric.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceFieldGeneric::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26825 ];

	ANxForceFieldGeneric_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldRadial.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceFieldRadial::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26852 ];

	ANxForceFieldRadial_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldTornado.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxForceFieldTornado::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26876 ];

	ANxForceFieldTornado_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxGenericForceFieldBox.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ANxGenericForceFieldBox::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26907 ];

	ANxGenericForceFieldBox_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.NxForceFieldSpawnable.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ANxForceFieldSpawnable::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 26860 ];

	ANxForceFieldSpawnable_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_CylindricalForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_CylindricalForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32059 ];

	ARB_CylindricalForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.RB_RadialForceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ARB_RadialForceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32139 ];

	ARB_RadialForceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.NxForceFieldComponent.DoInitRBPhys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UNxForceFieldComponent::DoInitRBPhys ( )
{
	static UFunction* pFnDoInitRBPhys = NULL;

	if ( ! pFnDoInitRBPhys )
		pFnDoInitRBPhys = (UFunction*) UObject::GObjObjects()->Data[ 26791 ];

	UNxForceFieldComponent_execDoInitRBPhys_Parms DoInitRBPhys_Parms;

	pFnDoInitRBPhys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoInitRBPhys, &DoInitRBPhys_Parms, NULL );

	pFnDoInitRBPhys->FunctionFlags |= 0x400;
};

// Function Engine.ForceFieldShape.GetDrawComponent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShape::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20213 ];

	UForceFieldShape_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShape.FillByCylinder
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShape::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20208 ];

	UForceFieldShape_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByCapsule
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20205 ];

	UForceFieldShape_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillByBox
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Dimension                      ( CPF_Parm )

void UForceFieldShape::eventFillByBox ( struct FVector Dimension )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20203 ];

	UForceFieldShape_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Dimension, &Dimension, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShape.FillBySphere
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShape::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20201 ];

	UForceFieldShape_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeBox::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20230 ];

	UForceFieldShapeBox_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeBox.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20225 ];

	UForceFieldShapeBox_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20222 ];

	UForceFieldShapeBox_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20220 ];

	UForceFieldShapeBox_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeBox::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20218 ];

	UForceFieldShapeBox_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeBox.GetRadii
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UForceFieldShapeBox::eventGetRadii ( )
{
	static UFunction* pFnGetRadii = NULL;

	if ( ! pFnGetRadii )
		pFnGetRadii = (UFunction*) UObject::GObjObjects()->Data[ 20216 ];

	UForceFieldShapeBox_eventGetRadii_Parms GetRadii_Parms;

	this->ProcessEvent ( pFnGetRadii, &GetRadii_Parms, NULL );

	return GetRadii_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeCapsule::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20250 ];

	UForceFieldShapeCapsule_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20245 ];

	UForceFieldShapeCapsule_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20242 ];

	UForceFieldShapeCapsule_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20240 ];

	UForceFieldShapeCapsule_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeCapsule::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20238 ];

	UForceFieldShapeCapsule_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeCapsule.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = (UFunction*) UObject::GObjObjects()->Data[ 20236 ];

	UForceFieldShapeCapsule_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeCapsule.GetHeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeCapsule::eventGetHeight ( )
{
	static UFunction* pFnGetHeight = NULL;

	if ( ! pFnGetHeight )
		pFnGetHeight = (UFunction*) UObject::GObjObjects()->Data[ 20234 ];

	UForceFieldShapeCapsule_eventGetHeight_Parms GetHeight_Parms;

	this->ProcessEvent ( pFnGetHeight, &GetHeight_Parms, NULL );

	return GetHeight_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UPrimitiveComponent* UForceFieldShapeSphere::eventGetDrawComponent ( )
{
	static UFunction* pFnGetDrawComponent = NULL;

	if ( ! pFnGetDrawComponent )
		pFnGetDrawComponent = (UFunction*) UObject::GObjObjects()->Data[ 20272 ];

	UForceFieldShapeSphere_eventGetDrawComponent_Parms GetDrawComponent_Parms;

	this->ProcessEvent ( pFnGetDrawComponent, &GetDrawComponent_Parms, NULL );

	return GetDrawComponent_Parms.ReturnValue;
};

// Function Engine.ForceFieldShapeSphere.FillByCylinder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BottomRadius                   ( CPF_Parm )
// float                          TopRadius                      ( CPF_Parm )
// float                          Height                         ( CPF_Parm )
// float                          HeightOffset                   ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset )
{
	static UFunction* pFnFillByCylinder = NULL;

	if ( ! pFnFillByCylinder )
		pFnFillByCylinder = (UFunction*) UObject::GObjObjects()->Data[ 20263 ];

	UForceFieldShapeSphere_eventFillByCylinder_Parms FillByCylinder_Parms;
	FillByCylinder_Parms.BottomRadius = BottomRadius;
	FillByCylinder_Parms.TopRadius = TopRadius;
	FillByCylinder_Parms.Height = Height;
	FillByCylinder_Parms.HeightOffset = HeightOffset;

	this->ProcessEvent ( pFnFillByCylinder, &FillByCylinder_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByCapsule
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Height                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByCapsule ( float Height, float Radius )
{
	static UFunction* pFnFillByCapsule = NULL;

	if ( ! pFnFillByCapsule )
		pFnFillByCapsule = (UFunction*) UObject::GObjObjects()->Data[ 20260 ];

	UForceFieldShapeSphere_eventFillByCapsule_Parms FillByCapsule_Parms;
	FillByCapsule_Parms.Height = Height;
	FillByCapsule_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillByCapsule, &FillByCapsule_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillByBox
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 Extent                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillByBox ( struct FVector Extent )
{
	static UFunction* pFnFillByBox = NULL;

	if ( ! pFnFillByBox )
		pFnFillByBox = (UFunction*) UObject::GObjObjects()->Data[ 20258 ];

	UForceFieldShapeSphere_eventFillByBox_Parms FillByBox_Parms;
	memcpy ( &FillByBox_Parms.Extent, &Extent, 0xC );

	this->ProcessEvent ( pFnFillByBox, &FillByBox_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.FillBySphere
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Radius                         ( CPF_Parm )

void UForceFieldShapeSphere::eventFillBySphere ( float Radius )
{
	static UFunction* pFnFillBySphere = NULL;

	if ( ! pFnFillBySphere )
		pFnFillBySphere = (UFunction*) UObject::GObjObjects()->Data[ 20256 ];

	UForceFieldShapeSphere_eventFillBySphere_Parms FillBySphere_Parms;
	FillBySphere_Parms.Radius = Radius;

	this->ProcessEvent ( pFnFillBySphere, &FillBySphere_Parms, NULL );
};

// Function Engine.ForceFieldShapeSphere.GetRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UForceFieldShapeSphere::eventGetRadius ( )
{
	static UFunction* pFnGetRadius = NULL;

	if ( ! pFnGetRadius )
		pFnGetRadius = (UFunction*) UObject::GObjObjects()->Data[ 20254 ];

	UForceFieldShapeSphere_eventGetRadius_Parms GetRadius_Parms;

	this->ProcessEvent ( pFnGetRadius, &GetRadius_Parms, NULL );

	return GetRadius_Parms.ReturnValue;
};

// Function Engine.SequenceObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USequenceObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 7218 ];

	USequenceObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SequenceObject.ShouldClearNameOnPasting
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventShouldClearNameOnPasting ( )
{
	static UFunction* pFnShouldClearNameOnPasting = NULL;

	if ( ! pFnShouldClearNameOnPasting )
		pFnShouldClearNameOnPasting = (UFunction*) UObject::GObjObjects()->Data[ 10114 ];

	USequenceObject_eventShouldClearNameOnPasting_Parms ShouldClearNameOnPasting_Parms;

	this->ProcessEvent ( pFnShouldClearNameOnPasting, &ShouldClearNameOnPasting_Parms, NULL );

	return ShouldClearNameOnPasting_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsPastingIntoLevelSequenceAllowed ( )
{
	static UFunction* pFnIsPastingIntoLevelSequenceAllowed = NULL;

	if ( ! pFnIsPastingIntoLevelSequenceAllowed )
		pFnIsPastingIntoLevelSequenceAllowed = (UFunction*) UObject::GObjObjects()->Data[ 10112 ];

	USequenceObject_eventIsPastingIntoLevelSequenceAllowed_Parms IsPastingIntoLevelSequenceAllowed_Parms;

	this->ProcessEvent ( pFnIsPastingIntoLevelSequenceAllowed, &IsPastingIntoLevelSequenceAllowed_Parms, NULL );

	return IsPastingIntoLevelSequenceAllowed_Parms.ReturnValue;
};

// Function Engine.SequenceObject.IsValidLevelSequenceObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USequenceObject::eventIsValidLevelSequenceObject ( )
{
	static UFunction* pFnIsValidLevelSequenceObject = NULL;

	if ( ! pFnIsValidLevelSequenceObject )
		pFnIsValidLevelSequenceObject = (UFunction*) UObject::GObjObjects()->Data[ 10110 ];

	USequenceObject_eventIsValidLevelSequenceObject_Parms IsValidLevelSequenceObject_Parms;

	this->ProcessEvent ( pFnIsValidLevelSequenceObject, &IsValidLevelSequenceObject_Parms, NULL );

	return IsValidLevelSequenceObject_Parms.ReturnValue;
};

// Function Engine.SequenceObject.GetWorldInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AWorldInfo*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AWorldInfo* USequenceObject::GetWorldInfo ( )
{
	static UFunction* pFnGetWorldInfo = NULL;

	if ( ! pFnGetWorldInfo )
		pFnGetWorldInfo = (UFunction*) UObject::GObjObjects()->Data[ 10108 ];

	USequenceObject_execGetWorldInfo_Parms GetWorldInfo_Parms;

	pFnGetWorldInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldInfo, &GetWorldInfo_Parms, NULL );

	pFnGetWorldInfo->FunctionFlags |= 0x400;

	return GetWorldInfo_Parms.ReturnValue;
};

// Function Engine.SequenceObject.ScriptLog
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 LogText                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWarning                       ( CPF_OptionalParm | CPF_Parm )

void USequenceObject::ScriptLog ( struct FString LogText, unsigned long bWarning )
{
	static UFunction* pFnScriptLog = NULL;

	if ( ! pFnScriptLog )
		pFnScriptLog = (UFunction*) UObject::GObjObjects()->Data[ 10105 ];

	USequenceObject_execScriptLog_Parms ScriptLog_Parms;
	memcpy ( &ScriptLog_Parms.LogText, &LogText, 0xC );
	ScriptLog_Parms.bWarning = bWarning;

	pFnScriptLog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScriptLog, &ScriptLog_Parms, NULL );

	pFnScriptLog->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.ForceActivateOutput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            OutputIdx                      ( CPF_Parm )

void USequenceOp::ForceActivateOutput ( int OutputIdx )
{
	static UFunction* pFnForceActivateOutput = NULL;

	if ( ! pFnForceActivateOutput )
		pFnForceActivateOutput = (UFunction*) UObject::GObjObjects()->Data[ 10257 ];

	USequenceOp_execForceActivateOutput_Parms ForceActivateOutput_Parms;
	ForceActivateOutput_Parms.OutputIdx = OutputIdx;

	pFnForceActivateOutput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceActivateOutput, &ForceActivateOutput_Parms, NULL );

	pFnForceActivateOutput->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.ForceActivateInput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InputIdx                       ( CPF_Parm )

void USequenceOp::ForceActivateInput ( int InputIdx )
{
	static UFunction* pFnForceActivateInput = NULL;

	if ( ! pFnForceActivateInput )
		pFnForceActivateInput = (UFunction*) UObject::GObjObjects()->Data[ 10255 ];

	USequenceOp_execForceActivateInput_Parms ForceActivateInput_Parms;
	ForceActivateInput_Parms.InputIdx = InputIdx;

	pFnForceActivateInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceActivateInput, &ForceActivateInput_Parms, NULL );

	pFnForceActivateInput->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.GetController
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class AController* USequenceOp::GetController ( class AActor* TheActor )
{
	static UFunction* pFnGetController = NULL;

	if ( ! pFnGetController )
		pFnGetController = (UFunction*) UObject::GObjObjects()->Data[ 10250 ];

	USequenceOp_execGetController_Parms GetController_Parms;
	GetController_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetController, &GetController_Parms, NULL );

	return GetController_Parms.ReturnValue;
};

// Function Engine.SequenceOp.GetPawn
// [0x00020002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TheActor                       ( CPF_Parm )

class APawn* USequenceOp::GetPawn ( class AActor* TheActor )
{
	static UFunction* pFnGetPawn = NULL;

	if ( ! pFnGetPawn )
		pFnGetPawn = (UFunction*) UObject::GObjObjects()->Data[ 10245 ];

	USequenceOp_execGetPawn_Parms GetPawn_Parms;
	GetPawn_Parms.TheActor = TheActor;

	this->ProcessEvent ( pFnGetPawn, &GetPawn_Parms, NULL );

	return GetPawn_Parms.ReturnValue;
};

// Function Engine.SequenceOp.Reset
// [0x00020000] 
// Parameters infos:

void USequenceOp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 10244 ];

	USequenceOp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceOp.PublishLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PublishLinkedVariableValues ( )
{
	static UFunction* pFnPublishLinkedVariableValues = NULL;

	if ( ! pFnPublishLinkedVariableValues )
		pFnPublishLinkedVariableValues = (UFunction*) UObject::GObjObjects()->Data[ 10243 ];

	USequenceOp_execPublishLinkedVariableValues_Parms PublishLinkedVariableValues_Parms;

	pFnPublishLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPublishLinkedVariableValues, &PublishLinkedVariableValues_Parms, NULL );

	pFnPublishLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.PopulateLinkedVariableValues
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USequenceOp::PopulateLinkedVariableValues ( )
{
	static UFunction* pFnPopulateLinkedVariableValues = NULL;

	if ( ! pFnPopulateLinkedVariableValues )
		pFnPopulateLinkedVariableValues = (UFunction*) UObject::GObjObjects()->Data[ 10242 ];

	USequenceOp_execPopulateLinkedVariableValues_Parms PopulateLinkedVariableValues_Parms;

	pFnPopulateLinkedVariableValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateLinkedVariableValues, &PopulateLinkedVariableValues_Parms, NULL );

	pFnPopulateLinkedVariableValues->FunctionFlags |= 0x400;
};

// Function Engine.SequenceOp.VersionUpdated
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USequenceOp::eventVersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 10239 ];

	USequenceOp_eventVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SequenceOp.Deactivated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 10238 ];

	USequenceOp_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function Engine.SequenceOp.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceOp::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 10237 ];

	USequenceOp_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SequenceOp.ActivateNamedOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 LinkDesc                       ( CPF_Parm | CPF_NeedCtorLink )

bool USequenceOp::ActivateNamedOutputLink ( struct FString LinkDesc )
{
	static UFunction* pFnActivateNamedOutputLink = NULL;

	if ( ! pFnActivateNamedOutputLink )
		pFnActivateNamedOutputLink = (UFunction*) UObject::GObjObjects()->Data[ 10234 ];

	USequenceOp_execActivateNamedOutputLink_Parms ActivateNamedOutputLink_Parms;
	memcpy ( &ActivateNamedOutputLink_Parms.LinkDesc, &LinkDesc, 0xC );

	pFnActivateNamedOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateNamedOutputLink, &ActivateNamedOutputLink_Parms, NULL );

	pFnActivateNamedOutputLink->FunctionFlags |= 0x400;

	return ActivateNamedOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.ActivateOutputLink
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            OutputIdx                      ( CPF_Parm )

bool USequenceOp::ActivateOutputLink ( int OutputIdx )
{
	static UFunction* pFnActivateOutputLink = NULL;

	if ( ! pFnActivateOutputLink )
		pFnActivateOutputLink = (UFunction*) UObject::GObjObjects()->Data[ 10231 ];

	USequenceOp_execActivateOutputLink_Parms ActivateOutputLink_Parms;
	ActivateOutputLink_Parms.OutputIdx = OutputIdx;

	pFnActivateOutputLink->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateOutputLink, &ActivateOutputLink_Parms, NULL );

	pFnActivateOutputLink->FunctionFlags |= 0x400;

	return ActivateOutputLink_Parms.ReturnValue;
};

// Function Engine.SequenceOp.LinkedVariables
// [0x00424405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  VarClass                       ( CPF_Parm )
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// class USequenceVariable*       OutVariable                    ( CPF_Parm | CPF_OutParm )

void USequenceOp::LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable )
{
	static UFunction* pFnLinkedVariables = NULL;

	if ( ! pFnLinkedVariables )
		pFnLinkedVariables = (UFunction*) UObject::GObjObjects()->Data[ 10227 ];

	USequenceOp_execLinkedVariables_Parms LinkedVariables_Parms;
	LinkedVariables_Parms.VarClass = VarClass;
	memcpy ( &LinkedVariables_Parms.inDesc, &inDesc, 0xC );

	pFnLinkedVariables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLinkedVariables, &LinkedVariables_Parms, NULL );

	pFnLinkedVariables->FunctionFlags |= 0x400;

	if ( OutVariable )
		*OutVariable = LinkedVariables_Parms.OutVariable;
};

// Function Engine.SequenceOp.GetBoolVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        boolVars                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars )
{
	static UFunction* pFnGetBoolVars = NULL;

	if ( ! pFnGetBoolVars )
		pFnGetBoolVars = (UFunction*) UObject::GObjObjects()->Data[ 10223 ];

	USequenceOp_execGetBoolVars_Parms GetBoolVars_Parms;
	memcpy ( &GetBoolVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetBoolVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoolVars, &GetBoolVars_Parms, NULL );

	pFnGetBoolVars->FunctionFlags |= 0x400;

	if ( boolVars )
		memcpy ( boolVars, &GetBoolVars_Parms.boolVars, 0xC );
};

// Function Engine.SequenceOp.GetInterpDataVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< class UInterpData* >   outIData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData )
{
	static UFunction* pFnGetInterpDataVars = NULL;

	if ( ! pFnGetInterpDataVars )
		pFnGetInterpDataVars = (UFunction*) UObject::GObjObjects()->Data[ 10219 ];

	USequenceOp_execGetInterpDataVars_Parms GetInterpDataVars_Parms;
	memcpy ( &GetInterpDataVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetInterpDataVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInterpDataVars, &GetInterpDataVars_Parms, NULL );

	pFnGetInterpDataVars->FunctionFlags |= 0x400;

	if ( outIData )
		memcpy ( outIData, &GetInterpDataVars_Parms.outIData, 0xC );
};

// Function Engine.SequenceOp.GetObjectVars
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 inDesc                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< class UObject* >       objVars                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars )
{
	static UFunction* pFnGetObjectVars = NULL;

	if ( ! pFnGetObjectVars )
		pFnGetObjectVars = (UFunction*) UObject::GObjObjects()->Data[ 7186 ];

	USequenceOp_execGetObjectVars_Parms GetObjectVars_Parms;
	memcpy ( &GetObjectVars_Parms.inDesc, &inDesc, 0xC );

	pFnGetObjectVars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectVars, &GetObjectVars_Parms, NULL );

	pFnGetObjectVars->FunctionFlags |= 0x400;

	if ( objVars )
		memcpy ( objVars, &GetObjectVars_Parms.objVars, 0xC );
};

// Function Engine.SequenceOp.GetLinkedObjects
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  ObjectType                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRecurse                       ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceObject* > out_Objects                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequenceOp::GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects )
{
	static UFunction* pFnGetLinkedObjects = NULL;

	if ( ! pFnGetLinkedObjects )
		pFnGetLinkedObjects = (UFunction*) UObject::GObjObjects()->Data[ 10211 ];

	USequenceOp_execGetLinkedObjects_Parms GetLinkedObjects_Parms;
	GetLinkedObjects_Parms.ObjectType = ObjectType;
	GetLinkedObjects_Parms.bRecurse = bRecurse;

	pFnGetLinkedObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLinkedObjects, &GetLinkedObjects_Parms, NULL );

	pFnGetLinkedObjects->FunctionFlags |= 0x400;

	if ( out_Objects )
		memcpy ( out_Objects, &GetLinkedObjects_Parms.out_Objects, 0xC );
};

// Function Engine.SequenceOp.HasLinkedOps
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bConsiderInputLinks            ( CPF_OptionalParm | CPF_Parm )

bool USequenceOp::HasLinkedOps ( unsigned long bConsiderInputLinks )
{
	static UFunction* pFnHasLinkedOps = NULL;

	if ( ! pFnHasLinkedOps )
		pFnHasLinkedOps = (UFunction*) UObject::GObjObjects()->Data[ 10208 ];

	USequenceOp_execHasLinkedOps_Parms HasLinkedOps_Parms;
	HasLinkedOps_Parms.bConsiderInputLinks = bConsiderInputLinks;

	pFnHasLinkedOps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasLinkedOps, &HasLinkedOps_Parms, NULL );

	pFnHasLinkedOps->FunctionFlags |= 0x400;

	return HasLinkedOps_Parms.ReturnValue;
};

// Function Engine.Sequence.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnabled                     ( CPF_Parm )

void USequence::SetEnabled ( unsigned long bInEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 31657 ];

	USequence_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bInEnabled = bInEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.Sequence.Reset
// [0x00020002] 
// Parameters infos:

void USequence::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 31654 ];

	USequence_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.Sequence.FindSeqObjectsByName
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 SeqObjName                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bCheckComment                  ( CPF_Parm )
// unsigned long                  bRecursive                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseFullLevelName              ( CPF_OptionalParm | CPF_Parm )
// TArray< class USequenceObject* > OutputObjects                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequence::FindSeqObjectsByName ( struct FString SeqObjName, unsigned long bCheckComment, unsigned long bRecursive, unsigned long bUseFullLevelName, TArray< class USequenceObject* >* OutputObjects )
{
	static UFunction* pFnFindSeqObjectsByName = NULL;

	if ( ! pFnFindSeqObjectsByName )
		pFnFindSeqObjectsByName = (UFunction*) UObject::GObjObjects()->Data[ 31647 ];

	USequence_execFindSeqObjectsByName_Parms FindSeqObjectsByName_Parms;
	memcpy ( &FindSeqObjectsByName_Parms.SeqObjName, &SeqObjName, 0xC );
	FindSeqObjectsByName_Parms.bCheckComment = bCheckComment;
	FindSeqObjectsByName_Parms.bRecursive = bRecursive;
	FindSeqObjectsByName_Parms.bUseFullLevelName = bUseFullLevelName;

	pFnFindSeqObjectsByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSeqObjectsByName, &FindSeqObjectsByName_Parms, NULL );

	pFnFindSeqObjectsByName->FunctionFlags |= 0x400;

	if ( OutputObjects )
		memcpy ( OutputObjects, &FindSeqObjectsByName_Parms.OutputObjects, 0xC );
};

// Function Engine.Sequence.FindSeqObjectsByClass
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  DesiredClass                   ( CPF_Parm )
// unsigned long                  bRecursive                     ( CPF_Parm )
// TArray< class USequenceObject* > OutputObjects                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USequence::FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects )
{
	static UFunction* pFnFindSeqObjectsByClass = NULL;

	if ( ! pFnFindSeqObjectsByClass )
		pFnFindSeqObjectsByClass = (UFunction*) UObject::GObjObjects()->Data[ 7109 ];

	USequence_execFindSeqObjectsByClass_Parms FindSeqObjectsByClass_Parms;
	FindSeqObjectsByClass_Parms.DesiredClass = DesiredClass;
	FindSeqObjectsByClass_Parms.bRecursive = bRecursive;

	pFnFindSeqObjectsByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSeqObjectsByClass, &FindSeqObjectsByClass_Parms, NULL );

	pFnFindSeqObjectsByClass->FunctionFlags |= 0x400;

	if ( OutputObjects )
		memcpy ( OutputObjects, &FindSeqObjectsByClass_Parms.OutputObjects, 0xC );
};

// Function Engine.PrefabSequence.GetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APrefabInstance* UPrefabSequence::GetOwnerPrefab ( )
{
	static UFunction* pFnGetOwnerPrefab = NULL;

	if ( ! pFnGetOwnerPrefab )
		pFnGetOwnerPrefab = (UFunction*) UObject::GObjObjects()->Data[ 31662 ];

	UPrefabSequence_execGetOwnerPrefab_Parms GetOwnerPrefab_Parms;

	pFnGetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerPrefab, &GetOwnerPrefab_Parms, NULL );

	pFnGetOwnerPrefab->FunctionFlags |= 0x400;

	return GetOwnerPrefab_Parms.ReturnValue;
};

// Function Engine.PrefabSequence.SetOwnerPrefab
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APrefabInstance*         InOwner                        ( CPF_Parm )

void UPrefabSequence::SetOwnerPrefab ( class APrefabInstance* InOwner )
{
	static UFunction* pFnSetOwnerPrefab = NULL;

	if ( ! pFnSetOwnerPrefab )
		pFnSetOwnerPrefab = (UFunction*) UObject::GObjObjects()->Data[ 31660 ];

	UPrefabSequence_execSetOwnerPrefab_Parms SetOwnerPrefab_Parms;
	SetOwnerPrefab_Parms.InOwner = InOwner;

	pFnSetOwnerPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOwnerPrefab, &SetOwnerPrefab_Parms, NULL );

	pFnSetOwnerPrefab->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActivateRemoteEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32376 ];

	USeqAct_ActivateRemoteEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraFade.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraFade::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32455 ];

	USeqAct_CameraFade_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraLookAt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32476 ];

	USeqAct_CameraLookAt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_CameraShake.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_CameraShake::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32478 ];

	USeqAct_CameraShake_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ChangeCollision::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 7217 ];

	USeqAct_ChangeCollision_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConvertToString.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ConvertToString::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32498 ];

	USeqAct_ConvertToString_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_DrawText.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_DrawText::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32523 ];

	USeqAct_DrawText_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_GetLocationAndRotation::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32548 ];

	USeqAct_GetLocationAndRotation_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_GetVelocity.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_GetVelocity::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32557 ];

	USeqAct_GetVelocity_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_HeadTrackingControl.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_HeadTrackingControl::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 32579 ];

	USeqAct_HeadTrackingControl_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_HeadTrackingControl.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_HeadTrackingControl::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32577 ];

	USeqAct_HeadTrackingControl_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USeqAct_Latent::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 32383 ];

	USeqAct_Latent_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function Engine.SeqAct_Latent.AbortFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  latentActor                    ( CPF_Parm )

void USeqAct_Latent::AbortFor ( class AActor* latentActor )
{
	static UFunction* pFnAbortFor = NULL;

	if ( ! pFnAbortFor )
		pFnAbortFor = (UFunction*) UObject::GObjObjects()->Data[ 32381 ];

	USeqAct_Latent_execAbortFor_Parms AbortFor_Parms;
	AbortFor_Parms.latentActor = latentActor;

	pFnAbortFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbortFor, &AbortFor_Parms, NULL );

	pFnAbortFor->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ActorFactory::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32404 ];

	USeqAct_ActorFactory_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ProjectileFactory::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32713 ];

	USeqAct_ProjectileFactory_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_AIMoveToActor.PickDestination
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Requestor                      ( CPF_Parm )

class AActor* USeqAct_AIMoveToActor::PickDestination ( class AActor* Requestor )
{
	static UFunction* pFnPickDestination = NULL;

	if ( ! pFnPickDestination )
		pFnPickDestination = (UFunction*) UObject::GObjObjects()->Data[ 13162 ];

	USeqAct_AIMoveToActor_execPickDestination_Parms PickDestination_Parms;
	PickDestination_Parms.Requestor = Requestor;

	this->ProcessEvent ( pFnPickDestination, &PickDestination_Parms, NULL );

	return PickDestination_Parms.ReturnValue;
};

// Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AIMoveToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32427 ];

	USeqAct_AIMoveToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Delay.ResetDelayActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USeqAct_Delay::ResetDelayActive ( )
{
	static UFunction* pFnResetDelayActive = NULL;

	if ( ! pFnResetDelayActive )
		pFnResetDelayActive = (UFunction*) UObject::GObjObjects()->Data[ 32507 ];

	USeqAct_Delay_execResetDelayActive_Parms ResetDelayActive_Parms;

	pFnResetDelayActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDelayActive, &ResetDelayActive_Parms, NULL );

	pFnResetDelayActive->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Delay.Reset
// [0x00020002] 
// Parameters infos:

void USeqAct_Delay::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 32506 ];

	USeqAct_Delay_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqAct_Interp.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Interp::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32626 ];

	USeqAct_Interp_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Interp.Reset
// [0x00020002] 
// Parameters infos:

void USeqAct_Interp::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 32625 ];

	USeqAct_Interp_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void USeqAct_Interp::AddPlayerToDirectorTracks ( class APlayerController* PC )
{
	static UFunction* pFnAddPlayerToDirectorTracks = NULL;

	if ( ! pFnAddPlayerToDirectorTracks )
		pFnAddPlayerToDirectorTracks = (UFunction*) UObject::GObjObjects()->Data[ 11287 ];

	USeqAct_Interp_execAddPlayerToDirectorTracks_Parms AddPlayerToDirectorTracks_Parms;
	AddPlayerToDirectorTracks_Parms.PC = PC;

	pFnAddPlayerToDirectorTracks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayerToDirectorTracks, &AddPlayerToDirectorTracks_Parms, NULL );

	pFnAddPlayerToDirectorTracks->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.Stop
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USeqAct_Interp::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 32623 ];

	USeqAct_Interp_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_Interp.SetPosition
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewPosition                    ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_OptionalParm | CPF_Parm )

void USeqAct_Interp::SetPosition ( float NewPosition, unsigned long bJump )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 32620 ];

	USeqAct_Interp_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.NewPosition = NewPosition;
	SetPosition_Parms.bJump = bJump;

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function Engine.SeqAct_PlaySound.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlaySound::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32703 ];

	USeqAct_PlaySound_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_StreamInTextures.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_StreamInTextures::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32883 ];

	USeqAct_StreamInTextures_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_WaitForLevelsVisible.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_WaitForLevelsVisible::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 32937 ];

	USeqAct_WaitForLevelsVisible_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_WaitForLevelsVisible.CheckLevelsVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqAct_WaitForLevelsVisible::CheckLevelsVisible ( )
{
	static UFunction* pFnCheckLevelsVisible = NULL;

	if ( ! pFnCheckLevelsVisible )
		pFnCheckLevelsVisible = (UFunction*) UObject::GObjObjects()->Data[ 12607 ];

	USeqAct_WaitForLevelsVisible_execCheckLevelsVisible_Parms CheckLevelsVisible_Parms;

	pFnCheckLevelsVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckLevelsVisible, &CheckLevelsVisible_Parms, NULL );

	pFnCheckLevelsVisible->FunctionFlags |= 0x400;

	return CheckLevelsVisible_Parms.ReturnValue;
};

// Function Engine.SeqAct_Log.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Log::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32530 ];

	USeqAct_Log_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ModifyHealth.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ModifyHealth::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32650 ];

	USeqAct_ModifyHealth_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ParticleEventGenerator::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32678 ];

	USeqAct_ParticleEventGenerator_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_PlayCameraAnim::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32689 ];

	USeqAct_PlayCameraAnim_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetCameraTarget::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32735 ];

	USeqAct_SetCameraTarget_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetFloat::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32759 ];

	USeqAct_SetFloat_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetInt.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetInt::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32764 ];

	USeqAct_SetInt_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetLocation.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetLocation::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32771 ];

	USeqAct_SetLocation_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetObject.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetObject::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32796 ];

	USeqAct_SetObject_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetString.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetString::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32813 ];

	USeqAct_SetString_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_RandomSwitch.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_RandomSwitch::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32723 ];

	USeqAct_RandomSwitch_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Trace.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Trace::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32928 ];

	USeqAct_Trace_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqCond_CompareBool.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqCond_CompareBool::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32940 ];

	USeqCond_CompareBool_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqCond_GetServerType.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqCond_GetServerType::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32946 ];

	USeqCond_GetServerType_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqCond_IsBenchmarking::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32954 ];

	USeqCond_IsBenchmarking_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USeqCond_IsLoggedIn::eventCheckLogins ( )
{
	static UFunction* pFnCheckLogins = NULL;

	if ( ! pFnCheckLogins )
		pFnCheckLogins = (UFunction*) UObject::GObjObjects()->Data[ 32957 ];

	USeqCond_IsLoggedIn_eventCheckLogins_Parms CheckLogins_Parms;

	this->ProcessEvent ( pFnCheckLogins, &CheckLogins_Parms, NULL );

	return CheckLogins_Parms.ReturnValue;
};

// Function Engine.SeqCond_IsPIE.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqCond_IsPIE::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32963 ];

	USeqCond_IsPIE_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 32971 ];

	USeqCond_SwitchBase_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchBase::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 32969 ];

	USeqCond_SwitchBase_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchBase::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 32966 ];

	USeqCond_SwitchBase_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchBase::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 32965 ];

	USeqCond_SwitchBase_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 32984 ];

	USeqCond_SwitchClass_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchClass::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 32982 ];

	USeqCond_SwitchClass_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchClass::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 32979 ];

	USeqCond_SwitchClass_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchClass::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 32978 ];

	USeqCond_SwitchClass_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            RemoveIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventRemoveValueEntry ( int RemoveIndex )
{
	static UFunction* pFnRemoveValueEntry = NULL;

	if ( ! pFnRemoveValueEntry )
		pFnRemoveValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 32999 ];

	USeqCond_SwitchObject_eventRemoveValueEntry_Parms RemoveValueEntry_Parms;
	RemoveValueEntry_Parms.RemoveIndex = RemoveIndex;

	this->ProcessEvent ( pFnRemoveValueEntry, &RemoveValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            InsertIndex                    ( CPF_Parm )

void USeqCond_SwitchObject::eventInsertValueEntry ( int InsertIndex )
{
	static UFunction* pFnInsertValueEntry = NULL;

	if ( ! pFnInsertValueEntry )
		pFnInsertValueEntry = (UFunction*) UObject::GObjObjects()->Data[ 32997 ];

	USeqCond_SwitchObject_eventInsertValueEntry_Parms InsertValueEntry_Parms;
	InsertValueEntry_Parms.InsertIndex = InsertIndex;

	this->ProcessEvent ( pFnInsertValueEntry, &InsertValueEntry_Parms, NULL );
};

// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ValueIndex                     ( CPF_Parm )

bool USeqCond_SwitchObject::eventIsFallThruEnabled ( int ValueIndex )
{
	static UFunction* pFnIsFallThruEnabled = NULL;

	if ( ! pFnIsFallThruEnabled )
		pFnIsFallThruEnabled = (UFunction*) UObject::GObjObjects()->Data[ 32994 ];

	USeqCond_SwitchObject_eventIsFallThruEnabled_Parms IsFallThruEnabled_Parms;
	IsFallThruEnabled_Parms.ValueIndex = ValueIndex;

	this->ProcessEvent ( pFnIsFallThruEnabled, &IsFallThruEnabled_Parms, NULL );

	return IsFallThruEnabled_Parms.ReturnValue;
};

// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqCond_SwitchObject::eventVerifyDefaultCaseValue ( )
{
	static UFunction* pFnVerifyDefaultCaseValue = NULL;

	if ( ! pFnVerifyDefaultCaseValue )
		pFnVerifyDefaultCaseValue = (UFunction*) UObject::GObjObjects()->Data[ 32992 ];

	USeqCond_SwitchObject_eventVerifyDefaultCaseValue_Parms VerifyDefaultCaseValue_Parms;

	this->ProcessEvent ( pFnVerifyDefaultCaseValue, &VerifyDefaultCaseValue_Parms, NULL );
};

// Function Engine.SequenceEvent.Toggled
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 33019 ];

	USequenceEvent_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SequenceEvent.Reset
// [0x00020002] 
// Parameters infos:

void USequenceEvent::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 33018 ];

	USequenceEvent_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SequenceEvent.CheckActivate
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPushTop                       ( CPF_OptionalParm | CPF_Parm )
// TArray< int >                  ActivateIndices                ( CPF_Const | CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USequenceEvent::CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = (UFunction*) UObject::GObjObjects()->Data[ 7110 ];

	USequenceEvent_execCheckActivate_Parms CheckActivate_Parms;
	CheckActivate_Parms.InOriginator = InOriginator;
	CheckActivate_Parms.InInstigator = InInstigator;
	CheckActivate_Parms.bTest = bTest;
	CheckActivate_Parms.bPushTop = bPushTop;

	pFnCheckActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );

	pFnCheckActivate->FunctionFlags |= 0x400;

	if ( ActivateIndices )
		memcpy ( ActivateIndices, &CheckActivate_Parms.ActivateIndices, 0xC );

	return CheckActivate_Parms.ReturnValue;
};

// Function Engine.SequenceEvent.RegisterEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void USequenceEvent::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 33011 ];

	USequenceEvent_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_LevelLoaded::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33033 ];

	USeqEvent_LevelLoaded_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// [0x00020002] 
// Parameters infos:

void USeqEvent_Mover::NotifyFinishedOpen ( )
{
	static UFunction* pFnNotifyFinishedOpen = NULL;

	if ( ! pFnNotifyFinishedOpen )
		pFnNotifyFinishedOpen = (UFunction*) UObject::GObjObjects()->Data[ 33060 ];

	USeqEvent_Mover_execNotifyFinishedOpen_Parms NotifyFinishedOpen_Parms;

	this->ProcessEvent ( pFnNotifyFinishedOpen, &NotifyFinishedOpen_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyDetached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyDetached ( class AActor* Other )
{
	static UFunction* pFnNotifyDetached = NULL;

	if ( ! pFnNotifyDetached )
		pFnNotifyDetached = (UFunction*) UObject::GObjObjects()->Data[ 33055 ];

	USeqEvent_Mover_execNotifyDetached_Parms NotifyDetached_Parms;
	NotifyDetached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyDetached, &NotifyDetached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyAttached
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void USeqEvent_Mover::NotifyAttached ( class AActor* Other )
{
	static UFunction* pFnNotifyAttached = NULL;

	if ( ! pFnNotifyAttached )
		pFnNotifyAttached = (UFunction*) UObject::GObjObjects()->Data[ 33051 ];

	USeqEvent_Mover_execNotifyAttached_Parms NotifyAttached_Parms;
	NotifyAttached_Parms.Other = Other;

	this->ProcessEvent ( pFnNotifyAttached, &NotifyAttached_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// [0x00020002] 
// Parameters infos:
// class AActor*                  Hit                            ( CPF_Parm )

void USeqEvent_Mover::NotifyEncroachingOn ( class AActor* Hit )
{
	static UFunction* pFnNotifyEncroachingOn = NULL;

	if ( ! pFnNotifyEncroachingOn )
		pFnNotifyEncroachingOn = (UFunction*) UObject::GObjObjects()->Data[ 33046 ];

	USeqEvent_Mover_execNotifyEncroachingOn_Parms NotifyEncroachingOn_Parms;
	NotifyEncroachingOn_Parms.Hit = Hit;

	this->ProcessEvent ( pFnNotifyEncroachingOn, &NotifyEncroachingOn_Parms, NULL );
};

// Function Engine.SeqEvent_Mover.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Mover::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 33044 ];

	USeqEvent_Mover_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_ParticleEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33071 ];

	USeqEvent_ParticleEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_RemoteEvent::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33078 ];

	USeqEvent_RemoteEvent_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Toggled
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_TakeDamage::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 33106 ];

	USeqEvent_TakeDamage_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_TakeDamage::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33104 ];

	USeqEvent_TakeDamage_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_TakeDamage.Reset
// [0x00020002] 
// Parameters infos:

void USeqEvent_TakeDamage::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 33103 ];

	USeqEvent_TakeDamage_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.HandleDamage
// [0x00020002] 
// Parameters infos:
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class UClass*                  inDamageType                   ( CPF_Parm )
// int                            inAmount                       ( CPF_Parm )

void USeqEvent_TakeDamage::HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount )
{
	static UFunction* pFnHandleDamage = NULL;

	if ( ! pFnHandleDamage )
		pFnHandleDamage = (UFunction*) UObject::GObjObjects()->Data[ 33095 ];

	USeqEvent_TakeDamage_execHandleDamage_Parms HandleDamage_Parms;
	HandleDamage_Parms.InOriginator = InOriginator;
	HandleDamage_Parms.InInstigator = InInstigator;
	HandleDamage_Parms.inDamageType = inDamageType;
	HandleDamage_Parms.inAmount = inAmount;

	this->ProcessEvent ( pFnHandleDamage, &HandleDamage_Parms, NULL );
};

// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  inDamageType                   ( CPF_Parm )

bool USeqEvent_TakeDamage::IsValidDamageType ( class UClass* inDamageType )
{
	static UFunction* pFnIsValidDamageType = NULL;

	if ( ! pFnIsValidDamageType )
		pFnIsValidDamageType = (UFunction*) UObject::GObjObjects()->Data[ 33090 ];

	USeqEvent_TakeDamage_execIsValidDamageType_Parms IsValidDamageType_Parms;
	IsValidDamageType_Parms.inDamageType = inDamageType;

	this->ProcessEvent ( pFnIsValidDamageType, &IsValidDamageType_Parms, NULL );

	return IsValidDamageType_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_Touch::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33128 ];

	USeqEvent_Touch_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void USeqEvent_Touch::NotifyTouchingPawnDied ( class APawn* P )
{
	static UFunction* pFnNotifyTouchingPawnDied = NULL;

	if ( ! pFnNotifyTouchingPawnDied )
		pFnNotifyTouchingPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 33126 ];

	USeqEvent_Touch_execNotifyTouchingPawnDied_Parms NotifyTouchingPawnDied_Parms;
	NotifyTouchingPawnDied_Parms.P = P;

	this->ProcessEvent ( pFnNotifyTouchingPawnDied, &NotifyTouchingPawnDied_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.Toggled
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqEvent_Touch::eventToggled ( )
{
	static UFunction* pFnToggled = NULL;

	if ( ! pFnToggled )
		pFnToggled = (UFunction*) UObject::GObjObjects()->Data[ 33124 ];

	USeqEvent_Touch_eventToggled_Parms Toggled_Parms;

	this->ProcessEvent ( pFnToggled, &Toggled_Parms, NULL );
};

// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckUnTouchActivate = NULL;

	if ( ! pFnCheckUnTouchActivate )
		pFnCheckUnTouchActivate = (UFunction*) UObject::GObjObjects()->Data[ 33119 ];

	USeqEvent_Touch_execCheckUnTouchActivate_Parms CheckUnTouchActivate_Parms;
	CheckUnTouchActivate_Parms.InOriginator = InOriginator;
	CheckUnTouchActivate_Parms.InInstigator = InInstigator;
	CheckUnTouchActivate_Parms.bTest = bTest;

	pFnCheckUnTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUnTouchActivate, &CheckUnTouchActivate_Parms, NULL );

	pFnCheckUnTouchActivate->FunctionFlags |= 0x400;

	return CheckUnTouchActivate_Parms.ReturnValue;
};

// Function Engine.SeqEvent_Touch.CheckTouchActivate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool USeqEvent_Touch::CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest )
{
	static UFunction* pFnCheckTouchActivate = NULL;

	if ( ! pFnCheckTouchActivate )
		pFnCheckTouchActivate = (UFunction*) UObject::GObjObjects()->Data[ 11365 ];

	USeqEvent_Touch_execCheckTouchActivate_Parms CheckTouchActivate_Parms;
	CheckTouchActivate_Parms.InOriginator = InOriginator;
	CheckTouchActivate_Parms.InInstigator = InInstigator;
	CheckTouchActivate_Parms.bTest = bTest;

	pFnCheckTouchActivate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTouchActivate, &CheckTouchActivate_Parms, NULL );

	pFnCheckTouchActivate->FunctionFlags |= 0x400;

	return CheckTouchActivate_Parms.ReturnValue;
};

// Function Engine.SeqVar_Object.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_Object::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 33157 ];

	USeqVar_Object_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_Object.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Object::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 13165 ];

	USeqVar_Object_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_ObjectList.SetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 NewValue                       ( CPF_Parm )

void USeqVar_ObjectList::SetObjectValue ( class UObject* NewValue )
{
	static UFunction* pFnSetObjectValue = NULL;

	if ( ! pFnSetObjectValue )
		pFnSetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 33176 ];

	USeqVar_ObjectList_execSetObjectValue_Parms SetObjectValue_Parms;
	SetObjectValue_Parms.NewValue = NewValue;

	this->ProcessEvent ( pFnSetObjectValue, &SetObjectValue_Parms, NULL );
};

// Function Engine.SeqVar_ObjectList.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_ObjectList::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 33174 ];

	USeqVar_ObjectList_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_Player.GetObjectValue
// [0x00020002] 
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* USeqVar_Player::GetObjectValue ( )
{
	static UFunction* pFnGetObjectValue = NULL;

	if ( ! pFnGetObjectValue )
		pFnGetObjectValue = (UFunction*) UObject::GObjObjects()->Data[ 33189 ];

	USeqVar_Player_execGetObjectValue_Parms GetObjectValue_Parms;

	this->ProcessEvent ( pFnGetObjectValue, &GetObjectValue_Parms, NULL );

	return GetObjectValue_Parms.ReturnValue;
};

// Function Engine.SeqVar_Player.UpdatePlayersList
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USeqVar_Player::UpdatePlayersList ( )
{
	static UFunction* pFnUpdatePlayersList = NULL;

	if ( ! pFnUpdatePlayersList )
		pFnUpdatePlayersList = (UFunction*) UObject::GObjObjects()->Data[ 33188 ];

	USeqVar_Player_execUpdatePlayersList_Parms UpdatePlayersList_Parms;

	pFnUpdatePlayersList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePlayersList, &UpdatePlayersList_Parms, NULL );

	pFnUpdatePlayersList->FunctionFlags |= 0x400;
};

// Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void AAmbientSoundSimpleToggleable::ApplyCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 13864 ];

	AAmbientSoundSimpleToggleable_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void AAmbientSoundSimpleToggleable::CreateCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 13862 ];

	AAmbientSoundSimpleToggleable_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AAmbientSoundSimpleToggleable::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 13860 ];

	AAmbientSoundSimpleToggleable_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StopPlaying ( )
{
	static UFunction* pFnStopPlaying = NULL;

	if ( ! pFnStopPlaying )
		pFnStopPlaying = (UFunction*) UObject::GObjObjects()->Data[ 13859 ];

	AAmbientSoundSimpleToggleable_execStopPlaying_Parms StopPlaying_Parms;

	this->ProcessEvent ( pFnStopPlaying, &StopPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// [0x00020102] 
// Parameters infos:

void AAmbientSoundSimpleToggleable::StartPlaying ( )
{
	static UFunction* pFnStartPlaying = NULL;

	if ( ! pFnStartPlaying )
		pFnStartPlaying = (UFunction*) UObject::GObjObjects()->Data[ 13858 ];

	AAmbientSoundSimpleToggleable_execStartPlaying_Parms StartPlaying_Parms;

	this->ProcessEvent ( pFnStartPlaying, &StartPlaying_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AAmbientSoundSimpleToggleable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 13856 ];

	AAmbientSoundSimpleToggleable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAmbientSoundSimpleToggleable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13855 ];

	AAmbientSoundSimpleToggleable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.SoundNodeWave.GeneratePCMData
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// int                            SamplesNeeded                  ( CPF_Parm )
// TArray< unsigned char >        Buffer                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USoundNodeWave::eventGeneratePCMData ( int SamplesNeeded, TArray< unsigned char >* Buffer )
{
	static UFunction* pFnGeneratePCMData = NULL;

	if ( ! pFnGeneratePCMData )
		pFnGeneratePCMData = (UFunction*) UObject::GObjObjects()->Data[ 34057 ];

	USoundNodeWave_eventGeneratePCMData_Parms GeneratePCMData_Parms;
	GeneratePCMData_Parms.SamplesNeeded = SamplesNeeded;

	this->ProcessEvent ( pFnGeneratePCMData, &GeneratePCMData_Parms, NULL );

	if ( Buffer )
		memcpy ( Buffer, &GeneratePCMData_Parms.Buffer, 0xC );
};

// Function Engine.SoundNodeWaveStreaming.GeneratePCMData
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            SamplesNeeded                  ( CPF_Parm )
// TArray< unsigned char >        Buffer                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USoundNodeWaveStreaming::eventGeneratePCMData ( int SamplesNeeded, TArray< unsigned char >* Buffer )
{
	static UFunction* pFnGeneratePCMData = NULL;

	if ( ! pFnGeneratePCMData )
		pFnGeneratePCMData = (UFunction*) UObject::GObjObjects()->Data[ 34074 ];

	USoundNodeWaveStreaming_eventGeneratePCMData_Parms GeneratePCMData_Parms;
	GeneratePCMData_Parms.SamplesNeeded = SamplesNeeded;

	pFnGeneratePCMData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGeneratePCMData, &GeneratePCMData_Parms, NULL );

	pFnGeneratePCMData->FunctionFlags |= 0x400;

	if ( Buffer )
		memcpy ( Buffer, &GeneratePCMData_Parms.Buffer, 0xC );
};

// Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USoundNodeWaveStreaming::eventAvailableAudioBytes ( )
{
	static UFunction* pFnAvailableAudioBytes = NULL;

	if ( ! pFnAvailableAudioBytes )
		pFnAvailableAudioBytes = (UFunction*) UObject::GObjObjects()->Data[ 34072 ];

	USoundNodeWaveStreaming_eventAvailableAudioBytes_Parms AvailableAudioBytes_Parms;

	pFnAvailableAudioBytes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAvailableAudioBytes, &AvailableAudioBytes_Parms, NULL );

	pFnAvailableAudioBytes->FunctionFlags |= 0x400;

	return AvailableAudioBytes_Parms.ReturnValue;
};

// Function Engine.SoundNodeWaveStreaming.ResetAudio
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void USoundNodeWaveStreaming::eventResetAudio ( )
{
	static UFunction* pFnResetAudio = NULL;

	if ( ! pFnResetAudio )
		pFnResetAudio = (UFunction*) UObject::GObjObjects()->Data[ 34071 ];

	USoundNodeWaveStreaming_eventResetAudio_Parms ResetAudio_Parms;

	pFnResetAudio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetAudio, &ResetAudio_Parms, NULL );

	pFnResetAudio->FunctionFlags |= 0x400;
};

// Function Engine.SoundNodeWaveStreaming.QueueSilence
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )

void USoundNodeWaveStreaming::eventQueueSilence ( float Seconds )
{
	static UFunction* pFnQueueSilence = NULL;

	if ( ! pFnQueueSilence )
		pFnQueueSilence = (UFunction*) UObject::GObjObjects()->Data[ 34069 ];

	USoundNodeWaveStreaming_eventQueueSilence_Parms QueueSilence_Parms;
	QueueSilence_Parms.Seconds = Seconds;

	pFnQueueSilence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueSilence, &QueueSilence_Parms, NULL );

	pFnQueueSilence->FunctionFlags |= 0x400;
};

// Function Engine.SoundNodeWaveStreaming.QueueAudio
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        Data                           ( CPF_Parm | CPF_NeedCtorLink )

void USoundNodeWaveStreaming::eventQueueAudio ( TArray< unsigned char > Data )
{
	static UFunction* pFnQueueAudio = NULL;

	if ( ! pFnQueueAudio )
		pFnQueueAudio = (UFunction*) UObject::GObjObjects()->Data[ 34066 ];

	USoundNodeWaveStreaming_eventQueueAudio_Parms QueueAudio_Parms;
	memcpy ( &QueueAudio_Parms.Data, &Data, 0xC );

	pFnQueueAudio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueAudio, &QueueAudio_Parms, NULL );

	pFnQueueAudio->FunctionFlags |= 0x400;
};

// Function Engine.Terrain.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATerrain::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 34963 ];

	ATerrain_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Terrain.CalcLayerBounds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ATerrain::CalcLayerBounds ( )
{
	static UFunction* pFnCalcLayerBounds = NULL;

	if ( ! pFnCalcLayerBounds )
		pFnCalcLayerBounds = (UFunction*) UObject::GObjObjects()->Data[ 34962 ];

	ATerrain_execCalcLayerBounds_Parms CalcLayerBounds_Parms;

	pFnCalcLayerBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcLayerBounds, &CalcLayerBounds_Parms, NULL );

	pFnCalcLayerBounds->FunctionFlags |= 0x400;
};

// Function Engine.TerrainLayerSetup.PostBeginPlay
// [0x00020100] 
// Parameters infos:

void UTerrainLayerSetup::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 35014 ];

	UTerrainLayerSetup_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// [0x00020001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bVerbose                       ( CPF_Parm )

void UDataStoreClient::DebugDumpDataStoreInfo ( unsigned long bVerbose )
{
	static UFunction* pFnDebugDumpDataStoreInfo = NULL;

	if ( ! pFnDebugDumpDataStoreInfo )
		pFnDebugDumpDataStoreInfo = (UFunction*) UObject::GObjObjects()->Data[ 17873 ];

	UDataStoreClient_execDebugDumpDataStoreInfo_Parms DebugDumpDataStoreInfo_Parms;
	DebugDumpDataStoreInfo_Parms.bVerbose = bVerbose;

	this->ProcessEvent ( pFnDebugDumpDataStoreInfo, &DebugDumpDataStoreInfo_Parms, NULL );
};

// Function Engine.DataStoreClient.NotifyGameSessionEnded
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UDataStoreClient::eventNotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17866 ];

	UDataStoreClient_eventNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.DataStoreClient.FindDataStoreClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  RequiredMetaClass              ( CPF_Parm )

class UClass* UDataStoreClient::FindDataStoreClass ( class UClass* RequiredMetaClass )
{
	static UFunction* pFnFindDataStoreClass = NULL;

	if ( ! pFnFindDataStoreClass )
		pFnFindDataStoreClass = (UFunction*) UObject::GObjObjects()->Data[ 11299 ];

	UDataStoreClient_execFindDataStoreClass_Parms FindDataStoreClass_Parms;
	FindDataStoreClass_Parms.RequiredMetaClass = RequiredMetaClass;

	this->ProcessEvent ( pFnFindDataStoreClass, &FindDataStoreClass_Parms, NULL );

	return FindDataStoreClass_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.GetPlayerDataStoreClasses
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// TArray< class UClass* >        out_DataStoreClasses           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UDataStoreClient::GetPlayerDataStoreClasses ( TArray< class UClass* >* out_DataStoreClasses )
{
	static UFunction* pFnGetPlayerDataStoreClasses = NULL;

	if ( ! pFnGetPlayerDataStoreClasses )
		pFnGetPlayerDataStoreClasses = (UFunction*) UObject::GObjObjects()->Data[ 11314 ];

	UDataStoreClient_execGetPlayerDataStoreClasses_Parms GetPlayerDataStoreClasses_Parms;

	this->ProcessEvent ( pFnGetPlayerDataStoreClasses, &GetPlayerDataStoreClasses_Parms, NULL );

	if ( out_DataStoreClasses )
		memcpy ( out_DataStoreClasses, &GetPlayerDataStoreClasses_Parms.out_DataStoreClasses, 0xC );
};

// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

int UDataStoreClient::FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindPlayerDataStoreIndex = NULL;

	if ( ! pFnFindPlayerDataStoreIndex )
		pFnFindPlayerDataStoreIndex = (UFunction*) UObject::GObjObjects()->Data[ 17858 ];

	UDataStoreClient_execFindPlayerDataStoreIndex_Parms FindPlayerDataStoreIndex_Parms;
	FindPlayerDataStoreIndex_Parms.PlayerOwner = PlayerOwner;

	pFnFindPlayerDataStoreIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPlayerDataStoreIndex, &FindPlayerDataStoreIndex_Parms, NULL );

	pFnFindPlayerDataStoreIndex->FunctionFlags |= 0x400;

	return FindPlayerDataStoreIndex_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.UnregisterDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )

bool UDataStoreClient::UnregisterDataStore ( class UUIDataStore* DataStore )
{
	static UFunction* pFnUnregisterDataStore = NULL;

	if ( ! pFnUnregisterDataStore )
		pFnUnregisterDataStore = (UFunction*) UObject::GObjObjects()->Data[ 11321 ];

	UDataStoreClient_execUnregisterDataStore_Parms UnregisterDataStore_Parms;
	UnregisterDataStore_Parms.DataStore = DataStore;

	pFnUnregisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterDataStore, &UnregisterDataStore_Parms, NULL );

	pFnUnregisterDataStore->FunctionFlags |= 0x400;

	return UnregisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.RegisterDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UUIDataStore*            DataStore                      ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

bool UDataStoreClient::RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegisterDataStore = NULL;

	if ( ! pFnRegisterDataStore )
		pFnRegisterDataStore = (UFunction*) UObject::GObjObjects()->Data[ 11303 ];

	UDataStoreClient_execRegisterDataStore_Parms RegisterDataStore_Parms;
	RegisterDataStore_Parms.DataStore = DataStore;
	RegisterDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnRegisterDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterDataStore, &RegisterDataStore_Parms, NULL );

	pFnRegisterDataStore->FunctionFlags |= 0x400;

	return RegisterDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.CreateDataStore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_CoerceParm )
// class UClass*                  DataStoreClass                 ( CPF_Parm )

class UUIDataStore* UDataStoreClient::CreateDataStore ( class UClass* DataStoreClass )
{
	static UFunction* pFnCreateDataStore = NULL;

	if ( ! pFnCreateDataStore )
		pFnCreateDataStore = (UFunction*) UObject::GObjObjects()->Data[ 11301 ];

	UDataStoreClient_execCreateDataStore_Parms CreateDataStore_Parms;
	CreateDataStore_Parms.DataStoreClass = DataStoreClass;

	pFnCreateDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDataStore, &CreateDataStore_Parms, NULL );

	pFnCreateDataStore->FunctionFlags |= 0x400;

	return CreateDataStore_Parms.ReturnValue;
};

// Function Engine.DataStoreClient.FindDataStore
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UUIDataStore*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DataStoreTag                   ( CPF_Parm )
// class ULocalPlayer*            PlayerOwner                    ( CPF_OptionalParm | CPF_Parm )

class UUIDataStore* UDataStoreClient::FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnFindDataStore = NULL;

	if ( ! pFnFindDataStore )
		pFnFindDataStore = (UFunction*) UObject::GObjObjects()->Data[ 11297 ];

	UDataStoreClient_execFindDataStore_Parms FindDataStore_Parms;
	memcpy ( &FindDataStore_Parms.DataStoreTag, &DataStoreTag, 0x8 );
	FindDataStore_Parms.PlayerOwner = PlayerOwner;

	pFnFindDataStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindDataStore, &FindDataStore_Parms, NULL );

	pFnFindDataStore->FunctionFlags |= 0x400;

	return FindDataStore_Parms.ReturnValue;
};

// Function Engine.Console.OutputText
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UConsole::eventOutputText ( struct FString Text )
{
	static UFunction* pFnOutputText = NULL;

	if ( ! pFnOutputText )
		pFnOutputText = (UFunction*) UObject::GObjObjects()->Data[ 17219 ];

	UConsole_eventOutputText_Parms OutputText_Parms;
	memcpy ( &OutputText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnOutputText, &OutputText_Parms, NULL );
};

// Function Engine.Console.UpdateCompleteIndices
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UConsole::UpdateCompleteIndices ( )
{
	static UFunction* pFnUpdateCompleteIndices = NULL;

	if ( ! pFnUpdateCompleteIndices )
		pFnUpdateCompleteIndices = (UFunction*) UObject::GObjObjects()->Data[ 17221 ];

	UConsole_execUpdateCompleteIndices_Parms UpdateCompleteIndices_Parms;

	pFnUpdateCompleteIndices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCompleteIndices, &UpdateCompleteIndices_Parms, NULL );

	pFnUpdateCompleteIndices->FunctionFlags |= 0x400;
};

// Function Engine.Console.BuildRuntimeAutoCompleteList
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void UConsole::BuildRuntimeAutoCompleteList ( unsigned long bForce )
{
	static UFunction* pFnBuildRuntimeAutoCompleteList = NULL;

	if ( ! pFnBuildRuntimeAutoCompleteList )
		pFnBuildRuntimeAutoCompleteList = (UFunction*) UObject::GObjObjects()->Data[ 17222 ];

	UConsole_execBuildRuntimeAutoCompleteList_Parms BuildRuntimeAutoCompleteList_Parms;
	BuildRuntimeAutoCompleteList_Parms.bForce = bForce;

	pFnBuildRuntimeAutoCompleteList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildRuntimeAutoCompleteList, &BuildRuntimeAutoCompleteList_Parms, NULL );

	pFnBuildRuntimeAutoCompleteList->FunctionFlags |= 0x400;
};

// Function Engine.Input.SetBind
// [0x00C20202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FName                   BindName                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UInput::SetBind ( struct FString Command, struct FName* BindName )
{
	static UFunction* pFnSetBind = NULL;

	if ( ! pFnSetBind )
		pFnSetBind = (UFunction*) UObject::GObjObjects()->Data[ 23268 ];

	UInput_execSetBind_Parms SetBind_Parms;
	memcpy ( &SetBind_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnSetBind, &SetBind_Parms, NULL );

	if ( BindName )
		memcpy ( BindName, &SetBind_Parms.BindName, 0x8 );
};

// Function Engine.Input.GetBind
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   Key                            ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FString UInput::GetBind ( struct FName* Key )
{
	static UFunction* pFnGetBind = NULL;

	if ( ! pFnGetBind )
		pFnGetBind = (UFunction*) UObject::GObjObjects()->Data[ 23265 ];

	UInput_execGetBind_Parms GetBind_Parms;

	pFnGetBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBind, &GetBind_Parms, NULL );

	pFnGetBind->FunctionFlags |= 0x400;

	if ( Key )
		memcpy ( Key, &GetBind_Parms.Key, 0x8 );

	return GetBind_Parms.ReturnValue;
};

// Function Engine.Input.ResetInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UInput::ResetInput ( )
{
	static UFunction* pFnResetInput = NULL;

	if ( ! pFnResetInput )
		pFnResetInput = (UFunction*) UObject::GObjObjects()->Data[ 23264 ];

	UInput_execResetInput_Parms ResetInput_Parms;

	pFnResetInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetInput, &ResetInput_Parms, NULL );

	pFnResetInput->FunctionFlags |= 0x400;
};

// Function Engine.PlayerInput.PreClientTravel
// [0x00020000] 
// Parameters infos:
// struct FString                 PendingURL                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void UPlayerInput::PreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 31359 ];

	UPlayerInput_execPreClientTravel_Parms PreClientTravel_Parms;
	memcpy ( &PreClientTravel_Parms.PendingURL, &PendingURL, 0xC );
	PreClientTravel_Parms.TravelType = TravelType;
	PreClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function Engine.PlayerInput.ClientInitInputSystem
// [0x00020000] 
// Parameters infos:

void UPlayerInput::ClientInitInputSystem ( )
{
	static UFunction* pFnClientInitInputSystem = NULL;

	if ( ! pFnClientInitInputSystem )
		pFnClientInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 31358 ];

	UPlayerInput_execClientInitInputSystem_Parms ClientInitInputSystem_Parms;

	this->ProcessEvent ( pFnClientInitInputSystem, &ClientInitInputSystem_Parms, NULL );
};

// Function Engine.PlayerInput.InitInputSystem
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UPlayerInput::InitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = (UFunction*) UObject::GObjObjects()->Data[ 31357 ];

	UPlayerInput_execInitInputSystem_Parms InitInputSystem_Parms;

	pFnInitInputSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );

	pFnInitInputSystem->FunctionFlags |= 0x400;
};

// Function Engine.PlayerInput.SmoothMouse
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          aMouse                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// int                            Index                          ( CPF_Parm )
// unsigned char                  SampleCount                    ( CPF_Parm | CPF_OutParm )

float UPlayerInput::SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount )
{
	static UFunction* pFnSmoothMouse = NULL;

	if ( ! pFnSmoothMouse )
		pFnSmoothMouse = (UFunction*) UObject::GObjObjects()->Data[ 31350 ];

	UPlayerInput_execSmoothMouse_Parms SmoothMouse_Parms;
	SmoothMouse_Parms.aMouse = aMouse;
	SmoothMouse_Parms.DeltaTime = DeltaTime;
	SmoothMouse_Parms.Index = Index;

	this->ProcessEvent ( pFnSmoothMouse, &SmoothMouse_Parms, NULL );

	if ( SampleCount )
		*SampleCount = SmoothMouse_Parms.SampleCount;

	return SmoothMouse_Parms.ReturnValue;
};

// Function Engine.PlayerInput.ClearSmoothing
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::ClearSmoothing ( )
{
	static UFunction* pFnClearSmoothing = NULL;

	if ( ! pFnClearSmoothing )
		pFnClearSmoothing = (UFunction*) UObject::GObjObjects()->Data[ 31348 ];

	UPlayerInput_execClearSmoothing_Parms ClearSmoothing_Parms;

	this->ProcessEvent ( pFnClearSmoothing, &ClearSmoothing_Parms, NULL );
};

// Function Engine.PlayerInput.SmartJump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::SmartJump ( )
{
	static UFunction* pFnSmartJump = NULL;

	if ( ! pFnSmartJump )
		pFnSmartJump = (UFunction*) UObject::GObjObjects()->Data[ 31347 ];

	UPlayerInput_execSmartJump_Parms SmartJump_Parms;

	this->ProcessEvent ( pFnSmartJump, &SmartJump_Parms, NULL );
};

// Function Engine.PlayerInput.Jump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UPlayerInput::Jump ( )
{
	static UFunction* pFnJump = NULL;

	if ( ! pFnJump )
		pFnJump = (UFunction*) UObject::GObjObjects()->Data[ 31346 ];

	UPlayerInput_execJump_Parms Jump_Parms;

	this->ProcessEvent ( pFnJump, &Jump_Parms, NULL );
};

// Function Engine.PlayerInput.ProcessInputMatching
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::ProcessInputMatching ( float DeltaTime )
{
	static UFunction* pFnProcessInputMatching = NULL;

	if ( ! pFnProcessInputMatching )
		pFnProcessInputMatching = (UFunction*) UObject::GObjObjects()->Data[ 31336 ];

	UPlayerInput_execProcessInputMatching_Parms ProcessInputMatching_Parms;
	ProcessInputMatching_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessInputMatching, &ProcessInputMatching_Parms, NULL );
};

// Function Engine.PlayerInput.CheckForDoubleClickMove
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

unsigned char UPlayerInput::CheckForDoubleClickMove ( float DeltaTime )
{
	static UFunction* pFnCheckForDoubleClickMove = NULL;

	if ( ! pFnCheckForDoubleClickMove )
		pFnCheckForDoubleClickMove = (UFunction*) UObject::GObjObjects()->Data[ 11990 ];

	UPlayerInput_execCheckForDoubleClickMove_Parms CheckForDoubleClickMove_Parms;
	CheckForDoubleClickMove_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnCheckForDoubleClickMove, &CheckForDoubleClickMove_Parms, NULL );

	return CheckForDoubleClickMove_Parms.ReturnValue;
};

// Function Engine.PlayerInput.CatchDoubleClickInput
// [0x00020002] 
// Parameters infos:

void UPlayerInput::CatchDoubleClickInput ( )
{
	static UFunction* pFnCatchDoubleClickInput = NULL;

	if ( ! pFnCatchDoubleClickInput )
		pFnCatchDoubleClickInput = (UFunction*) UObject::GObjObjects()->Data[ 31337 ];

	UPlayerInput_execCatchDoubleClickInput_Parms CatchDoubleClickInput_Parms;

	this->ProcessEvent ( pFnCatchDoubleClickInput, &CatchDoubleClickInput_Parms, NULL );
};

// Function Engine.PlayerInput.PlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 31332 ];

	UPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function Engine.PlayerInput.AdjustMouseSensitivity
// [0x00020002] 
// Parameters infos:
// float                          FOVScale                       ( CPF_Parm )

void UPlayerInput::AdjustMouseSensitivity ( float FOVScale )
{
	static UFunction* pFnAdjustMouseSensitivity = NULL;

	if ( ! pFnAdjustMouseSensitivity )
		pFnAdjustMouseSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 31330 ];

	UPlayerInput_execAdjustMouseSensitivity_Parms AdjustMouseSensitivity_Parms;
	AdjustMouseSensitivity_Parms.FOVScale = FOVScale;

	this->ProcessEvent ( pFnAdjustMouseSensitivity, &AdjustMouseSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.PostProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PostProcessInput ( float DeltaTime )
{
	static UFunction* pFnPostProcessInput = NULL;

	if ( ! pFnPostProcessInput )
		pFnPostProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 31328 ];

	UPlayerInput_execPostProcessInput_Parms PostProcessInput_Parms;
	PostProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPostProcessInput, &PostProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.PreProcessInput
// [0x00020000] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UPlayerInput::PreProcessInput ( float DeltaTime )
{
	static UFunction* pFnPreProcessInput = NULL;

	if ( ! pFnPreProcessInput )
		pFnPreProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 31326 ];

	UPlayerInput_execPreProcessInput_Parms PreProcessInput_Parms;
	PreProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPreProcessInput, &PreProcessInput_Parms, NULL );
};

// Function Engine.PlayerInput.DrawHUD
// [0x00020000] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void UPlayerInput::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 31324 ];

	UPlayerInput_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function Engine.PlayerInput.SetSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void UPlayerInput::SetSensitivity ( float F )
{
	static UFunction* pFnSetSensitivity = NULL;

	if ( ! pFnSetSensitivity )
		pFnSetSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 31322 ];

	UPlayerInput_execSetSensitivity_Parms SetSensitivity_Parms;
	SetSensitivity_Parms.F = F;

	this->ProcessEvent ( pFnSetSensitivity, &SetSensitivity_Parms, NULL );
};

// Function Engine.PlayerInput.InvertTurn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertTurn ( )
{
	static UFunction* pFnInvertTurn = NULL;

	if ( ! pFnInvertTurn )
		pFnInvertTurn = (UFunction*) UObject::GObjObjects()->Data[ 31320 ];

	UPlayerInput_execInvertTurn_Parms InvertTurn_Parms;

	this->ProcessEvent ( pFnInvertTurn, &InvertTurn_Parms, NULL );

	return InvertTurn_Parms.ReturnValue;
};

// Function Engine.PlayerInput.InvertMouse
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UPlayerInput::InvertMouse ( )
{
	static UFunction* pFnInvertMouse = NULL;

	if ( ! pFnInvertMouse )
		pFnInvertMouse = (UFunction*) UObject::GObjObjects()->Data[ 31318 ];

	UPlayerInput_execInvertMouse_Parms InvertMouse_Parms;

	this->ProcessEvent ( pFnInvertMouse, &InvertMouse_Parms, NULL );

	return InvertMouse_Parms.ReturnValue;
};

// Function Engine.PlayerInput.CancelMobileInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UPlayerInput::CancelMobileInput ( )
{
	static UFunction* pFnCancelMobileInput = NULL;

	if ( ! pFnCancelMobileInput )
		pFnCancelMobileInput = (UFunction*) UObject::GObjObjects()->Data[ 31317 ];

	UPlayerInput_execCancelMobileInput_Parms CancelMobileInput_Parms;

	pFnCancelMobileInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelMobileInput, &CancelMobileInput_Parms, NULL );

	pFnCancelMobileInput->FunctionFlags |= 0x400;
};

// Function Engine.UISceneClient.InitializeSceneClient
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UUISceneClient::eventInitializeSceneClient ( )
{
	static UFunction* pFnInitializeSceneClient = NULL;

	if ( ! pFnInitializeSceneClient )
		pFnInitializeSceneClient = (UFunction*) UObject::GObjObjects()->Data[ 22456 ];

	UUISceneClient_eventInitializeSceneClient_Parms InitializeSceneClient_Parms;

	this->ProcessEvent ( pFnInitializeSceneClient, &InitializeSceneClient_Parms, NULL );
};

// Function Engine.UISceneClient.GetInverseCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUISceneClient::GetInverseCanvasToScreen ( )
{
	static UFunction* pFnGetInverseCanvasToScreen = NULL;

	if ( ! pFnGetInverseCanvasToScreen )
		pFnGetInverseCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 22454 ];

	UUISceneClient_execGetInverseCanvasToScreen_Parms GetInverseCanvasToScreen_Parms;

	pFnGetInverseCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInverseCanvasToScreen, &GetInverseCanvasToScreen_Parms, NULL );

	pFnGetInverseCanvasToScreen->FunctionFlags |= 0x400;

	return GetInverseCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.GetCanvasToScreen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix UUISceneClient::GetCanvasToScreen ( )
{
	static UFunction* pFnGetCanvasToScreen = NULL;

	if ( ! pFnGetCanvasToScreen )
		pFnGetCanvasToScreen = (UFunction*) UObject::GObjObjects()->Data[ 22452 ];

	UUISceneClient_execGetCanvasToScreen_Parms GetCanvasToScreen_Parms;

	pFnGetCanvasToScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanvasToScreen, &GetCanvasToScreen_Parms, NULL );

	pFnGetCanvasToScreen->FunctionFlags |= 0x400;

	return GetCanvasToScreen_Parms.ReturnValue;
};

// Function Engine.UISceneClient.IsUIActive
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Flags                          ( CPF_OptionalParm | CPF_Parm )

bool UUISceneClient::IsUIActive ( int Flags )
{
	static UFunction* pFnIsUIActive = NULL;

	if ( ! pFnIsUIActive )
		pFnIsUIActive = (UFunction*) UObject::GObjObjects()->Data[ 22449 ];

	UUISceneClient_execIsUIActive_Parms IsUIActive_Parms;
	IsUIActive_Parms.Flags = Flags;

	pFnIsUIActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUIActive, &IsUIActive_Parms, NULL );

	pFnIsUIActive->FunctionFlags |= 0x400;

	return IsUIActive_Parms.ReturnValue;
};

// Function Engine.UISoundTheme.ProcessSoundEvent
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SoundEventName                 ( CPF_Parm )
// class APlayerController*       SoundOwner                     ( CPF_OptionalParm | CPF_Parm )

void UUISoundTheme::eventProcessSoundEvent ( struct FName SoundEventName, class APlayerController* SoundOwner )
{
	static UFunction* pFnProcessSoundEvent = NULL;

	if ( ! pFnProcessSoundEvent )
		pFnProcessSoundEvent = (UFunction*) UObject::GObjObjects()->Data[ 36037 ];

	UUISoundTheme_eventProcessSoundEvent_Parms ProcessSoundEvent_Parms;
	memcpy ( &ProcessSoundEvent_Parms.SoundEventName, &SoundEventName, 0x8 );
	ProcessSoundEvent_Parms.SoundOwner = SoundOwner;

	this->ProcessEvent ( pFnProcessSoundEvent, &ProcessSoundEvent_Parms, NULL );
};

// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UUIDataStoreSubscriber::ClearBoundDataStores ( )
{
	static UFunction* pFnClearBoundDataStores = NULL;

	if ( ! pFnClearBoundDataStores )
		pFnClearBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 35891 ];

	UUIDataStoreSubscriber_execClearBoundDataStores_Parms ClearBoundDataStores_Parms;

	pFnClearBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBoundDataStores, &ClearBoundDataStores_Parms, NULL );

	pFnClearBoundDataStores->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataStoreSubscriber::GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnGetBoundDataStores = NULL;

	if ( ! pFnGetBoundDataStores )
		pFnGetBoundDataStores = (UFunction*) UObject::GObjObjects()->Data[ 35888 ];

	UUIDataStoreSubscriber_execGetBoundDataStores_Parms GetBoundDataStores_Parms;

	pFnGetBoundDataStores->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoundDataStores, &GetBoundDataStores_Parms, NULL );

	pFnGetBoundDataStores->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &GetBoundDataStores_Parms.out_BoundDataStores, 0xC );
};

// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnNotifyDataStoreValueUpdated = NULL;

	if ( ! pFnNotifyDataStoreValueUpdated )
		pFnNotifyDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 35882 ];

	UUIDataStoreSubscriber_execNotifyDataStoreValueUpdated_Parms NotifyDataStoreValueUpdated_Parms;
	NotifyDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	NotifyDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &NotifyDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	NotifyDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	NotifyDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyDataStoreValueUpdated, &NotifyDataStoreValueUpdated_Parms, NULL );

	pFnNotifyDataStoreValueUpdated->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStoreSubscriber::RefreshSubscriberValue ( int BindingIndex )
{
	static UFunction* pFnRefreshSubscriberValue = NULL;

	if ( ! pFnRefreshSubscriberValue )
		pFnRefreshSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 35879 ];

	UUIDataStoreSubscriber_execRefreshSubscriberValue_Parms RefreshSubscriberValue_Parms;
	RefreshSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnRefreshSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSubscriberValue, &RefreshSubscriberValue_Parms, NULL );

	pFnRefreshSubscriberValue->FunctionFlags |= 0x400;

	return RefreshSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStoreSubscriber::GetDataStoreBinding ( int BindingIndex )
{
	static UFunction* pFnGetDataStoreBinding = NULL;

	if ( ! pFnGetDataStoreBinding )
		pFnGetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 35876 ];

	UUIDataStoreSubscriber_execGetDataStoreBinding_Parms GetDataStoreBinding_Parms;
	GetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnGetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDataStoreBinding, &GetDataStoreBinding_Parms, NULL );

	pFnGetDataStoreBinding->FunctionFlags |= 0x400;

	return GetDataStoreBinding_Parms.ReturnValue;
};

// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// struct FString                 MarkupText                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )

void UUIDataStoreSubscriber::SetDataStoreBinding ( struct FString MarkupText, int BindingIndex )
{
	static UFunction* pFnSetDataStoreBinding = NULL;

	if ( ! pFnSetDataStoreBinding )
		pFnSetDataStoreBinding = (UFunction*) UObject::GObjObjects()->Data[ 35873 ];

	UUIDataStoreSubscriber_execSetDataStoreBinding_Parms SetDataStoreBinding_Parms;
	memcpy ( &SetDataStoreBinding_Parms.MarkupText, &MarkupText, 0xC );
	SetDataStoreBinding_Parms.BindingIndex = BindingIndex;

	pFnSetDataStoreBinding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataStoreBinding, &SetDataStoreBinding_Parms, NULL );

	pFnSetDataStoreBinding->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// [0x00424400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BindingIndex                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class UUIDataStore* >  out_BoundDataStores            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStorePublisher::SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores )
{
	static UFunction* pFnSaveSubscriberValue = NULL;

	if ( ! pFnSaveSubscriberValue )
		pFnSaveSubscriberValue = (UFunction*) UObject::GObjObjects()->Data[ 35892 ];

	UUIDataStorePublisher_execSaveSubscriberValue_Parms SaveSubscriberValue_Parms;
	SaveSubscriberValue_Parms.BindingIndex = BindingIndex;

	pFnSaveSubscriberValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveSubscriberValue, &SaveSubscriberValue_Parms, NULL );

	pFnSaveSubscriberValue->FunctionFlags |= 0x400;

	if ( out_BoundDataStores )
		memcpy ( out_BoundDataStores, &SaveSubscriberValue_Parms.out_BoundDataStores, 0xC );

	return SaveSubscriberValue_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePlayerDataBase::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35295 ];

	UUIDataProvider_OnlinePlayerDataBase_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayerDataBase::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35293 ];

	UUIDataProvider_OnlinePlayerDataBase_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnGameInviteReceived = NULL;

	if ( ! pFnOnGameInviteReceived )
		pFnOnGameInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 35326 ];

	UUIDataProvider_OnlineFriendMessages_execOnGameInviteReceived_Parms OnGameInviteReceived_Parms;
	OnGameInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnGameInviteReceived_Parms.InviterName, &InviterName, 0xC );

	this->ProcessEvent ( pFnOnGameInviteReceived, &OnGameInviteReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineFriendMessages::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35324 ];

	UUIDataProvider_OnlineFriendMessages_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = (UFunction*) UObject::GObjObjects()->Data[ 35319 ];

	UUIDataProvider_OnlineFriendMessages_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x48 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0xC );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 35314 ];

	UUIDataProvider_OnlineFriendMessages_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x48 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::ReadMessages ( )
{
	static UFunction* pFnReadMessages = NULL;

	if ( ! pFnReadMessages )
		pFnReadMessages = (UFunction*) UObject::GObjObjects()->Data[ 35311 ];

	UUIDataProvider_OnlineFriendMessages_execReadMessages_Parms ReadMessages_Parms;

	this->ProcessEvent ( pFnReadMessages, &ReadMessages_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriendMessages::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35308 ];

	UUIDataProvider_OnlineFriendMessages_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineFriendMessages::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35304 ];

	UUIDataProvider_OnlineFriendMessages_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriends::eventRefreshFriendsList ( )
{
	static UFunction* pFnRefreshFriendsList = NULL;

	if ( ! pFnRefreshFriendsList )
		pFnRefreshFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 35360 ];

	UUIDataProvider_OnlineFriends_eventRefreshFriendsList_Parms RefreshFriendsList_Parms;

	this->ProcessEvent ( pFnRefreshFriendsList, &RefreshFriendsList_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineFriends::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35356 ];

	UUIDataProvider_OnlineFriends_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFriendsReadComplete = NULL;

	if ( ! pFnOnFriendsReadComplete )
		pFnOnFriendsReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 35352 ];

	UUIDataProvider_OnlineFriends_execOnFriendsReadComplete_Parms OnFriendsReadComplete_Parms;
	OnFriendsReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFriendsReadComplete, &OnFriendsReadComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlineFriends::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35349 ];

	UUIDataProvider_OnlineFriends_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlineFriends::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35345 ];

	UUIDataProvider_OnlineFriends_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePartyChatList::eventRefreshMembersList ( )
{
	static UFunction* pFnRefreshMembersList = NULL;

	if ( ! pFnRefreshMembersList )
		pFnRefreshMembersList = (UFunction*) UObject::GObjObjects()->Data[ 35385 ];

	UUIDataProvider_OnlinePartyChatList_eventRefreshMembersList_Parms RefreshMembersList_Parms;

	this->ProcessEvent ( pFnRefreshMembersList, &RefreshMembersList_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePartyChatList::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35381 ];

	UUIDataProvider_OnlinePartyChatList_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePartyChatList::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35378 ];

	UUIDataProvider_OnlinePartyChatList_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePartyChatList::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35374 ];

	UUIDataProvider_OnlinePartyChatList_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnExternalUIChange ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChange = NULL;

	if ( ! pFnOnExternalUIChange )
		pFnOnExternalUIChange = (UFunction*) UObject::GObjObjects()->Data[ 35451 ];

	UUIDataProvider_OnlinePlayerStorage_execOnExternalUIChange_Parms OnExternalUIChange_Parms;
	OnExternalUIChange_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChange, &OnExternalUIChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlinePlayerStorage::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = (UFunction*) UObject::GObjObjects()->Data[ 35449 ];

	UUIDataProvider_OnlinePlayerStorage_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 35445 ];

	UUIDataProvider_OnlinePlayerStorage_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlinePlayerStorage::ShowDeviceSelection ( )
{
	static UFunction* pFnShowDeviceSelection = NULL;

	if ( ! pFnShowDeviceSelection )
		pFnShowDeviceSelection = (UFunction*) UObject::GObjObjects()->Data[ 35443 ];

	UUIDataProvider_OnlinePlayerStorage_execShowDeviceSelection_Parms ShowDeviceSelection_Parms;

	this->ProcessEvent ( pFnShowDeviceSelection, &ShowDeviceSelection_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlinePlayerStorage::RefreshStorageData ( )
{
	static UFunction* pFnRefreshStorageData = NULL;

	if ( ! pFnRefreshStorageData )
		pFnRefreshStorageData = (UFunction*) UObject::GObjObjects()->Data[ 35440 ];

	UUIDataProvider_OnlinePlayerStorage_execRefreshStorageData_Parms RefreshStorageData_Parms;

	this->ProcessEvent ( pFnRefreshStorageData, &RefreshStorageData_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange
// [0x00820002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35434 ];

	UUIDataProvider_OnlinePlayerStorage_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadStorageComplete = NULL;

	if ( ! pFnOnReadStorageComplete )
		pFnOnReadStorageComplete = (UFunction*) UObject::GObjObjects()->Data[ 35429 ];

	UUIDataProvider_OnlinePlayerStorage_execOnReadStorageComplete_Parms OnReadStorageComplete_Parms;
	OnReadStorageComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadStorageComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadStorageComplete, &OnReadStorageComplete_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_OnlinePlayerStorage::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35426 ];

	UUIDataProvider_OnlinePlayerStorage_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35422 ];

	UUIDataProvider_OnlinePlayerStorage_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnClearReadCompleteDelegate = NULL;

	if ( ! pFnClearReadCompleteDelegate )
		pFnClearReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 35419 ];

	UUIDataProvider_OnlinePlayerStorage_execClearReadCompleteDelegate_Parms ClearReadCompleteDelegate_Parms;
	ClearReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	ClearReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearReadCompleteDelegate, &ClearReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlinePlayerStorage::AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnAddReadCompleteDelegate = NULL;

	if ( ! pFnAddReadCompleteDelegate )
		pFnAddReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 35416 ];

	UUIDataProvider_OnlinePlayerStorage_execAddReadCompleteDelegate_Parms AddReadCompleteDelegate_Parms;
	AddReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	AddReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddReadCompleteDelegate, &AddReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.GetData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UUIDataProvider_OnlinePlayerStorage::GetData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnGetData = NULL;

	if ( ! pFnGetData )
		pFnGetData = (UFunction*) UObject::GObjObjects()->Data[ 35411 ];

	UUIDataProvider_OnlinePlayerStorage_execGetData_Parms GetData_Parms;
	GetData_Parms.PlayerInterface = PlayerInterface;
	GetData_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetData, &GetData_Parms, NULL );

	return GetData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlinePlayerStorage::WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnWriteData = NULL;

	if ( ! pFnWriteData )
		pFnWriteData = (UFunction*) UObject::GObjObjects()->Data[ 35405 ];

	UUIDataProvider_OnlinePlayerStorage_execWriteData_Parms WriteData_Parms;
	WriteData_Parms.PlayerInterface = PlayerInterface;
	WriteData_Parms.LocalUserNum = LocalUserNum;
	WriteData_Parms.DeviceID = DeviceID;
	WriteData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnWriteData, &WriteData_Parms, NULL );

	return WriteData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlinePlayerStorage::ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadData = NULL;

	if ( ! pFnReadData )
		pFnReadData = (UFunction*) UObject::GObjObjects()->Data[ 35399 ];

	UUIDataProvider_OnlinePlayerStorage_execReadData_Parms ReadData_Parms;
	ReadData_Parms.PlayerInterface = PlayerInterface;
	ReadData_Parms.LocalUserNum = LocalUserNum;
	ReadData_Parms.DeviceID = DeviceID;
	ReadData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadData, &ReadData_Parms, NULL );

	return ReadData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.OnStorageDeviceChange
// [0x00020000] 
// Parameters infos:

void UUIDataProvider_OnlineProfileSettings::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = (UFunction*) UObject::GObjObjects()->Data[ 35484 ];

	UUIDataProvider_OnlineProfileSettings_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_OnlineProfileSettings::RefreshStorageData ( )
{
	static UFunction* pFnRefreshStorageData = NULL;

	if ( ! pFnRefreshStorageData )
		pFnRefreshStorageData = (UFunction*) UObject::GObjObjects()->Data[ 35481 ];

	UUIDataProvider_OnlineProfileSettings_execRefreshStorageData_Parms RefreshStorageData_Parms;

	this->ProcessEvent ( pFnRefreshStorageData, &RefreshStorageData_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineProfileSettings::ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnClearReadCompleteDelegate = NULL;

	if ( ! pFnClearReadCompleteDelegate )
		pFnClearReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 35478 ];

	UUIDataProvider_OnlineProfileSettings_execClearReadCompleteDelegate_Parms ClearReadCompleteDelegate_Parms;
	ClearReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	ClearReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearReadCompleteDelegate, &ClearReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate
// [0x00020002] 
// Parameters infos:
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_OnlineProfileSettings::AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnAddReadCompleteDelegate = NULL;

	if ( ! pFnAddReadCompleteDelegate )
		pFnAddReadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 35475 ];

	UUIDataProvider_OnlineProfileSettings_execAddReadCompleteDelegate_Parms AddReadCompleteDelegate_Parms;
	AddReadCompleteDelegate_Parms.PlayerInterface = PlayerInterface;
	AddReadCompleteDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddReadCompleteDelegate, &AddReadCompleteDelegate_Parms, NULL );
};

// Function Engine.UIDataProvider_OnlineProfileSettings.GetData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UUIDataProvider_OnlineProfileSettings::GetData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum )
{
	static UFunction* pFnGetData = NULL;

	if ( ! pFnGetData )
		pFnGetData = (UFunction*) UObject::GObjObjects()->Data[ 35470 ];

	UUIDataProvider_OnlineProfileSettings_execGetData_Parms GetData_Parms;
	GetData_Parms.PlayerInterface = PlayerInterface;
	GetData_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetData, &GetData_Parms, NULL );

	return GetData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.WriteData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlineProfileSettings::WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnWriteData = NULL;

	if ( ! pFnWriteData )
		pFnWriteData = (UFunction*) UObject::GObjObjects()->Data[ 35464 ];

	UUIDataProvider_OnlineProfileSettings_execWriteData_Parms WriteData_Parms;
	WriteData_Parms.PlayerInterface = PlayerInterface;
	WriteData_Parms.LocalUserNum = LocalUserNum;
	WriteData_Parms.DeviceID = DeviceID;
	WriteData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnWriteData, &WriteData_Parms, NULL );

	return WriteData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_OnlineProfileSettings.ReadData
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlinePlayerInterface*  PlayerInterface                ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UUIDataProvider_OnlineProfileSettings::ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadData = NULL;

	if ( ! pFnReadData )
		pFnReadData = (UFunction*) UObject::GObjObjects()->Data[ 35458 ];

	UUIDataProvider_OnlineProfileSettings_execReadData_Parms ReadData_Parms;
	ReadData_Parms.PlayerInterface = PlayerInterface;
	ReadData_Parms.LocalUserNum = LocalUserNum;
	ReadData_Parms.DeviceID = DeviceID;
	ReadData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadData, &ReadData_Parms, NULL );

	return ReadData_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements
// [0x00020002] 
// Parameters infos:

void UUIDataProvider_PlayerAchievements::UpdateAchievements ( )
{
	static UFunction* pFnUpdateAchievements = NULL;

	if ( ! pFnUpdateAchievements )
		pFnUpdateAchievements = (UFunction*) UObject::GObjObjects()->Data[ 35513 ];

	UUIDataProvider_PlayerAchievements_execUpdateAchievements_Parms UpdateAchievements_Parms;

	this->ProcessEvent ( pFnUpdateAchievements, &UpdateAchievements_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35511 ];

	UUIDataProvider_PlayerAchievements_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataProvider_PlayerAchievements::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35509 ];

	UUIDataProvider_PlayerAchievements_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35506 ];

	UUIDataProvider_PlayerAchievements_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementUnlocked ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnPlayerAchievementUnlocked = NULL;

	if ( ! pFnOnPlayerAchievementUnlocked )
		pFnOnPlayerAchievementUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 35504 ];

	UUIDataProvider_PlayerAchievements_execOnPlayerAchievementUnlocked_Parms OnPlayerAchievementUnlocked_Parms;
	OnPlayerAchievementUnlocked_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnPlayerAchievementUnlocked, &OnPlayerAchievementUnlocked_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged
// [0x00020002] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementsChanged ( int TitleId )
{
	static UFunction* pFnOnPlayerAchievementsChanged = NULL;

	if ( ! pFnOnPlayerAchievementsChanged )
		pFnOnPlayerAchievementsChanged = (UFunction*) UObject::GObjObjects()->Data[ 35500 ];

	UUIDataProvider_PlayerAchievements_execOnPlayerAchievementsChanged_Parms OnPlayerAchievementsChanged_Parms;
	OnPlayerAchievementsChanged_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnOnPlayerAchievementsChanged, &OnPlayerAchievementsChanged_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails
// [0x00420002] 
// Parameters infos:
// int                            AchievementId                  ( CPF_Const | CPF_Parm )
// struct FAchievementDetails     OutAchievementDetails          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUIDataProvider_PlayerAchievements::GetAchievementDetails ( int AchievementId, struct FAchievementDetails* OutAchievementDetails )
{
	static UFunction* pFnGetAchievementDetails = NULL;

	if ( ! pFnGetAchievementDetails )
		pFnGetAchievementDetails = (UFunction*) UObject::GObjObjects()->Data[ 35496 ];

	UUIDataProvider_PlayerAchievements_execGetAchievementDetails_Parms GetAchievementDetails_Parms;
	GetAchievementDetails_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementDetails, &GetAchievementDetails_Parms, NULL );

	if ( OutAchievementDetails )
		memcpy ( OutAchievementDetails, &GetAchievementDetails_Parms.OutAchievementDetails, 0xC0 );
};

// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName
// [0x00024000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AchievementId                  ( CPF_Parm )
// unsigned long                  bReturnLockedIcon              ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataProvider_PlayerAchievements::GetAchievementIconPathName ( int AchievementId, unsigned long bReturnLockedIcon )
{
	static UFunction* pFnGetAchievementIconPathName = NULL;

	if ( ! pFnGetAchievementIconPathName )
		pFnGetAchievementIconPathName = (UFunction*) UObject::GObjObjects()->Data[ 35492 ];

	UUIDataProvider_PlayerAchievements_execGetAchievementIconPathName_Parms GetAchievementIconPathName_Parms;
	GetAchievementIconPathName_Parms.AchievementId = AchievementId;
	GetAchievementIconPathName_Parms.bReturnLockedIcon = bReturnLockedIcon;

	this->ProcessEvent ( pFnGetAchievementIconPathName, &GetAchievementIconPathName_Parms, NULL );

	return GetAchievementIconPathName_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons
// [0x00020000] 
// Parameters infos:

void UUIDataProvider_PlayerAchievements::PopulateAchievementIcons ( )
{
	static UFunction* pFnPopulateAchievementIcons = NULL;

	if ( ! pFnPopulateAchievementIcons )
		pFnPopulateAchievementIcons = (UFunction*) UObject::GObjObjects()->Data[ 35491 ];

	UUIDataProvider_PlayerAchievements_execPopulateAchievementIcons_Parms PopulateAchievementIcons_Parms;

	this->ProcessEvent ( pFnPopulateAchievementIcons, &PopulateAchievementIcons_Parms, NULL );
};

// Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIDataProvider_PlayerAchievements::GetMaxTotalGamerScore ( )
{
	static UFunction* pFnGetMaxTotalGamerScore = NULL;

	if ( ! pFnGetMaxTotalGamerScore )
		pFnGetMaxTotalGamerScore = (UFunction*) UObject::GObjObjects()->Data[ 35489 ];

	UUIDataProvider_PlayerAchievements_execGetMaxTotalGamerScore_Parms GetMaxTotalGamerScore_Parms;

	pFnGetMaxTotalGamerScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxTotalGamerScore, &GetMaxTotalGamerScore_Parms, NULL );

	pFnGetMaxTotalGamerScore->FunctionFlags |= 0x400;

	return GetMaxTotalGamerScore_Parms.ReturnValue;
};

// Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UUIDataProvider_PlayerAchievements::GetTotalGamerScore ( )
{
	static UFunction* pFnGetTotalGamerScore = NULL;

	if ( ! pFnGetTotalGamerScore )
		pFnGetTotalGamerScore = (UFunction*) UObject::GObjObjects()->Data[ 35487 ];

	UUIDataProvider_PlayerAchievements_execGetTotalGamerScore_Parms GetTotalGamerScore_Parms;

	pFnGetTotalGamerScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalGamerScore, &GetTotalGamerScore_Parms, NULL );

	pFnGetTotalGamerScore->FunctionFlags |= 0x400;

	return GetTotalGamerScore_Parms.ReturnValue;
};

// Function Engine.UIDataStore.GetDataStoreClient
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UDataStoreClient*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDataStoreClient* UUIDataStore::GetDataStoreClient ( )
{
	static UFunction* pFnGetDataStoreClient = NULL;

	if ( ! pFnGetDataStoreClient )
		pFnGetDataStoreClient = (UFunction*) UObject::GObjObjects()->Data[ 35551 ];

	UUIDataStore_execGetDataStoreClient_Parms GetDataStoreClient_Parms;

	this->ProcessEvent ( pFnGetDataStoreClient, &GetDataStoreClient_Parms, NULL );

	return GetDataStoreClient_Parms.ReturnValue;
};

// Function Engine.UIDataStore.RefreshSubscribers
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FName                   PropertyTag                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInvalidateValues              ( CPF_OptionalParm | CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_OptionalParm | CPF_Parm )
// int                            ArrayIndex                     ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore::eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnRefreshSubscribers = NULL;

	if ( ! pFnRefreshSubscribers )
		pFnRefreshSubscribers = (UFunction*) UObject::GObjObjects()->Data[ 35542 ];

	UUIDataStore_eventRefreshSubscribers_Parms RefreshSubscribers_Parms;
	memcpy ( &RefreshSubscribers_Parms.PropertyTag, &PropertyTag, 0x8 );
	RefreshSubscribers_Parms.bInvalidateValues = bInvalidateValues;
	RefreshSubscribers_Parms.SourceProvider = SourceProvider;
	RefreshSubscribers_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnRefreshSubscribers, &RefreshSubscribers_Parms, NULL );
};

// Function Engine.UIDataStore.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 17871 ];

	UUIDataStore_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore.SubscriberDetached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberDetached = NULL;

	if ( ! pFnSubscriberDetached )
		pFnSubscriberDetached = (UFunction*) UObject::GObjObjects()->Data[ 35539 ];

	UUIDataStore_eventSubscriberDetached_Parms SubscriberDetached_Parms;
	SubscriberDetached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberDetached, &SubscriberDetached_Parms, NULL );
};

// Function Engine.UIDataStore.SubscriberAttached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataStoreSubscriber*  Subscriber                     ( CPF_Parm )

void UUIDataStore::eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber )
{
	static UFunction* pFnSubscriberAttached = NULL;

	if ( ! pFnSubscriberAttached )
		pFnSubscriberAttached = (UFunction*) UObject::GObjObjects()->Data[ 35536 ];

	UUIDataStore_eventSubscriberAttached_Parms SubscriberAttached_Parms;
	SubscriberAttached_Parms.Subscriber = Subscriber;

	this->ProcessEvent ( pFnSubscriberAttached, &SubscriberAttached_Parms, NULL );
};

// Function Engine.UIDataStore.Unregistered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 35534 ];

	UUIDataStore_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore.Registered
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 35532 ];

	UUIDataStore_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore.OnDataStoreValueUpdated
// [0x00120000] 
// Parameters infos:
// class UUIDataStore*            SourceDataStore                ( CPF_Parm )
// unsigned long                  bValuesInvalidated             ( CPF_Parm )
// struct FName                   PropertyTag                    ( CPF_Parm )
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// int                            ArrayIndex                     ( CPF_Parm )

void UUIDataStore::OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex )
{
	static UFunction* pFnOnDataStoreValueUpdated = NULL;

	if ( ! pFnOnDataStoreValueUpdated )
		pFnOnDataStoreValueUpdated = (UFunction*) UObject::GObjObjects()->Data[ 35525 ];

	UUIDataStore_execOnDataStoreValueUpdated_Parms OnDataStoreValueUpdated_Parms;
	OnDataStoreValueUpdated_Parms.SourceDataStore = SourceDataStore;
	OnDataStoreValueUpdated_Parms.bValuesInvalidated = bValuesInvalidated;
	memcpy ( &OnDataStoreValueUpdated_Parms.PropertyTag, &PropertyTag, 0x8 );
	OnDataStoreValueUpdated_Parms.SourceProvider = SourceProvider;
	OnDataStoreValueUpdated_Parms.ArrayIndex = ArrayIndex;

	this->ProcessEvent ( pFnOnDataStoreValueUpdated, &OnDataStoreValueUpdated_Parms, NULL );
};

// Function Engine.UIDataStore_DynamicResource.Unregistered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_DynamicResource::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 35577 ];

	UUIDataStore_DynamicResource_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore_DynamicResource.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_DynamicResource::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 35572 ];

	UUIDataStore_DynamicResource_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore_DynamicResource.OnLoginChange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataStore_DynamicResource::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35570 ];

	UUIDataStore_DynamicResource_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	pFnOnLoginChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );

	pFnOnLoginChange->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_DynamicResource.GetResourceProviders
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// TArray< class UUIResourceCombinationProvider* > out_Providers                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_DynamicResource::GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceCombinationProvider* >* out_Providers )
{
	static UFunction* pFnGetResourceProviders = NULL;

	if ( ! pFnGetResourceProviders )
		pFnGetResourceProviders = (UFunction*) UObject::GObjObjects()->Data[ 35565 ];

	UUIDataStore_DynamicResource_execGetResourceProviders_Parms GetResourceProviders_Parms;
	memcpy ( &GetResourceProviders_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviders, &GetResourceProviders_Parms, NULL );

	pFnGetResourceProviders->FunctionFlags |= 0x400;

	if ( out_Providers )
		memcpy ( out_Providers, &GetResourceProviders_Parms.out_Providers, 0xC );

	return GetResourceProviders_Parms.ReturnValue;
};

// Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_DynamicResource::FindProviderTypeIndex ( struct FName ProviderTag )
{
	static UFunction* pFnFindProviderTypeIndex = NULL;

	if ( ! pFnFindProviderTypeIndex )
		pFnFindProviderTypeIndex = (UFunction*) UObject::GObjObjects()->Data[ 35562 ];

	UUIDataStore_DynamicResource_execFindProviderTypeIndex_Parms FindProviderTypeIndex_Parms;
	memcpy ( &FindProviderTypeIndex_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnFindProviderTypeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderTypeIndex, &FindProviderTypeIndex_Parms, NULL );

	pFnFindProviderTypeIndex->FunctionFlags |= 0x400;

	return FindProviderTypeIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.GetResourceProviders
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )
// TArray< class UUIResourceDataProvider* > out_Providers                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_GameResource::GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceDataProvider* >* out_Providers )
{
	static UFunction* pFnGetResourceProviders = NULL;

	if ( ! pFnGetResourceProviders )
		pFnGetResourceProviders = (UFunction*) UObject::GObjObjects()->Data[ 35596 ];

	UUIDataStore_GameResource_execGetResourceProviders_Parms GetResourceProviders_Parms;
	memcpy ( &GetResourceProviders_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnGetResourceProviders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceProviders, &GetResourceProviders_Parms, NULL );

	pFnGetResourceProviders->FunctionFlags |= 0x400;

	if ( out_Providers )
		memcpy ( out_Providers, &GetResourceProviders_Parms.out_Providers, 0xC );

	return GetResourceProviders_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ProviderTag                    ( CPF_Parm )

int UUIDataStore_GameResource::FindProviderTypeIndex ( struct FName ProviderTag )
{
	static UFunction* pFnFindProviderTypeIndex = NULL;

	if ( ! pFnFindProviderTypeIndex )
		pFnFindProviderTypeIndex = (UFunction*) UObject::GObjObjects()->Data[ 35593 ];

	UUIDataStore_GameResource_execFindProviderTypeIndex_Parms FindProviderTypeIndex_Parms;
	memcpy ( &FindProviderTypeIndex_Parms.ProviderTag, &ProviderTag, 0x8 );

	pFnFindProviderTypeIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindProviderTypeIndex, &FindProviderTypeIndex_Parms, NULL );

	pFnFindProviderTypeIndex->FunctionFlags |= 0x400;

	return FindProviderTypeIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_MenuItems.Unregistered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_MenuItems::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 35657 ];

	UUIDataStore_MenuItems_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore_MenuItems.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_MenuItems::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 35655 ];

	UUIDataStore_MenuItems_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged
// [0x00024002] 
// Parameters infos:
// class UUIDataProvider*         SourceProvider                 ( CPF_Parm )
// struct FName                   PropTag                        ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_MenuItems::OnGameSettingsChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag )
{
	static UFunction* pFnOnGameSettingsChanged = NULL;

	if ( ! pFnOnGameSettingsChanged )
		pFnOnGameSettingsChanged = (UFunction*) UObject::GObjObjects()->Data[ 35651 ];

	UUIDataStore_MenuItems_execOnGameSettingsChanged_Parms OnGameSettingsChanged_Parms;
	OnGameSettingsChanged_Parms.SourceProvider = SourceProvider;
	memcpy ( &OnGameSettingsChanged_Parms.PropTag, &PropTag, 0x8 );

	this->ProcessEvent ( pFnOnGameSettingsChanged, &OnGameSettingsChanged_Parms, NULL );
};

// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_GameState::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 35603 ];

	UUIDataStore_GameState_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );

	return NotifyGameSessionEnded_Parms.ReturnValue;
};

// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// [0x00120000] 
// Parameters infos:

void UUIDataStore_GameState::OnRefreshDataFieldValue ( )
{
	static UFunction* pFnOnRefreshDataFieldValue = NULL;

	if ( ! pFnOnRefreshDataFieldValue )
		pFnOnRefreshDataFieldValue = (UFunction*) UObject::GObjObjects()->Data[ 35601 ];

	UUIDataStore_GameState_execOnRefreshDataFieldValue_Parms OnRefreshDataFieldValue_Parms;

	this->ProcessEvent ( pFnOnRefreshDataFieldValue, &OnRefreshDataFieldValue_Parms, NULL );
};

// Function Engine.UIDataStore_Registry.SetData
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )

void UUIDataStore_Registry::eventSetData ( struct FString Key, struct FString Value )
{
	static UFunction* pFnSetData = NULL;

	if ( ! pFnSetData )
		pFnSetData = (UFunction*) UObject::GObjObjects()->Data[ 35850 ];

	UUIDataStore_Registry_eventSetData_Parms SetData_Parms;
	memcpy ( &SetData_Parms.Key, &Key, 0xC );
	memcpy ( &SetData_Parms.Value, &Value, 0xC );

	this->ProcessEvent ( pFnSetData, &SetData_Parms, NULL );
};

// Function Engine.UIDataStore_Registry.GetData
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 out_Data                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUIDataStore_Registry::eventGetData ( struct FString Key, struct FString* out_Data )
{
	static UFunction* pFnGetData = NULL;

	if ( ! pFnGetData )
		pFnGetData = (UFunction*) UObject::GObjObjects()->Data[ 35845 ];

	UUIDataStore_Registry_eventGetData_Parms GetData_Parms;
	memcpy ( &GetData_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnGetData, &GetData_Parms, NULL );

	if ( out_Data )
		memcpy ( out_Data, &GetData_Parms.out_Data, 0xC );

	return GetData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlineGameSearch::ClearAllSearchResults ( )
{
	static UFunction* pFnClearAllSearchResults = NULL;

	if ( ! pFnClearAllSearchResults )
		pFnClearAllSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 35717 ];

	UUIDataStore_OnlineGameSearch_execClearAllSearchResults_Parms ClearAllSearchResults_Parms;

	this->ProcessEvent ( pFnClearAllSearchResults, &ClearAllSearchResults_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnMoveToPrevious = NULL;

	if ( ! pFnMoveToPrevious )
		pFnMoveToPrevious = (UFunction*) UObject::GObjObjects()->Data[ 35715 ];

	UUIDataStore_OnlineGameSearch_eventMoveToPrevious_Parms MoveToPrevious_Parms;
	MoveToPrevious_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnMoveToPrevious, &MoveToPrevious_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventMoveToNext ( unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnMoveToNext = NULL;

	if ( ! pFnMoveToNext )
		pFnMoveToNext = (UFunction*) UObject::GObjObjects()->Data[ 35713 ];

	UUIDataStore_OnlineGameSearch_eventMoveToNext_Parms MoveToNext_Parms;
	MoveToNext_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnMoveToNext, &MoveToNext_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SearchName                     ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSetCurrentByName = NULL;

	if ( ! pFnSetCurrentByName )
		pFnSetCurrentByName = (UFunction*) UObject::GObjObjects()->Data[ 35709 ];

	UUIDataStore_OnlineGameSearch_eventSetCurrentByName_Parms SetCurrentByName_Parms;
	memcpy ( &SetCurrentByName_Parms.SearchName, &SearchName, 0x8 );
	SetCurrentByName_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSetCurrentByName, &SetCurrentByName_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

void UUIDataStore_OnlineGameSearch::eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSetCurrentByIndex = NULL;

	if ( ! pFnSetCurrentByIndex )
		pFnSetCurrentByIndex = (UFunction*) UObject::GObjObjects()->Data[ 35706 ];

	UUIDataStore_OnlineGameSearch_eventSetCurrentByIndex_Parms SetCurrentByIndex_Parms;
	SetCurrentByIndex_Parms.NewIndex = NewIndex;
	SetCurrentByIndex_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSetCurrentByIndex, &SetCurrentByIndex_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SearchTag                      ( CPF_Parm )

int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex ( struct FName SearchTag )
{
	static UFunction* pFnFindSearchConfigurationIndex = NULL;

	if ( ! pFnFindSearchConfigurationIndex )
		pFnFindSearchConfigurationIndex = (UFunction*) UObject::GObjObjects()->Data[ 35702 ];

	UUIDataStore_OnlineGameSearch_execFindSearchConfigurationIndex_Parms FindSearchConfigurationIndex_Parms;
	memcpy ( &FindSearchConfigurationIndex_Parms.SearchTag, &SearchTag, 0x8 );

	this->ProcessEvent ( pFnFindSearchConfigurationIndex, &FindSearchConfigurationIndex_Parms, NULL );

	return FindSearchConfigurationIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::eventGetActiveGameSearch ( )
{
	static UFunction* pFnGetActiveGameSearch = NULL;

	if ( ! pFnGetActiveGameSearch )
		pFnGetActiveGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 35700 ];

	UUIDataStore_OnlineGameSearch_eventGetActiveGameSearch_Parms GetActiveGameSearch_Parms;

	this->ProcessEvent ( pFnGetActiveGameSearch, &GetActiveGameSearch_Parms, NULL );

	return GetActiveGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::eventGetCurrentGameSearch ( )
{
	static UFunction* pFnGetCurrentGameSearch = NULL;

	if ( ! pFnGetCurrentGameSearch )
		pFnGetCurrentGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 35698 ];

	UUIDataStore_OnlineGameSearch_eventGetCurrentGameSearch_Parms GetCurrentGameSearch_Parms;

	this->ProcessEvent ( pFnGetCurrentGameSearch, &GetCurrentGameSearch_Parms, NULL );

	return GetCurrentGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )

bool UUIDataStore_OnlineGameSearch::eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex )
{
	static UFunction* pFnShowHostGamercard = NULL;

	if ( ! pFnShowHostGamercard )
		pFnShowHostGamercard = (UFunction*) UObject::GObjObjects()->Data[ 35692 ];

	UUIDataStore_OnlineGameSearch_eventShowHostGamercard_Parms ShowHostGamercard_Parms;
	ShowHostGamercard_Parms.ControllerIndex = ControllerIndex;
	ShowHostGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowHostGamercard, &ShowHostGamercard_Parms, NULL );

	return ShowHostGamercard_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ListIndex                      ( CPF_Parm )
// struct FOnlineGameSearchResult Result                         ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_OnlineGameSearch::eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result )
{
	static UFunction* pFnGetSearchResultFromIndex = NULL;

	if ( ! pFnGetSearchResultFromIndex )
		pFnGetSearchResultFromIndex = (UFunction*) UObject::GObjObjects()->Data[ 35688 ];

	UUIDataStore_OnlineGameSearch_eventGetSearchResultFromIndex_Parms GetSearchResultFromIndex_Parms;
	GetSearchResultFromIndex_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnGetSearchResultFromIndex, &GetSearchResultFromIndex_Parms, NULL );

	if ( Result )
		memcpy ( Result, &GetSearchResultFromIndex_Parms.Result, 0x8 );

	return GetSearchResultFromIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlineGameSearch::OnSearchComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnSearchComplete = NULL;

	if ( ! pFnOnSearchComplete )
		pFnOnSearchComplete = (UFunction*) UObject::GObjObjects()->Data[ 35686 ];

	UUIDataStore_OnlineGameSearch_execOnSearchComplete_Parms OnSearchComplete_Parms;
	OnSearchComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnSearchComplete, &OnSearchComplete_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerId                   ( CPF_Parm )
// class UOnlineGameSearch*       Search                         ( CPF_Parm )

bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search )
{
	static UFunction* pFnOverrideQuerySubmission = NULL;

	if ( ! pFnOverrideQuerySubmission )
		pFnOverrideQuerySubmission = (UFunction*) UObject::GObjObjects()->Data[ 35682 ];

	UUIDataStore_OnlineGameSearch_execOverrideQuerySubmission_Parms OverrideQuerySubmission_Parms;
	OverrideQuerySubmission_Parms.ControllerId = ControllerId;
	OverrideQuerySubmission_Parms.Search = Search;

	this->ProcessEvent ( pFnOverrideQuerySubmission, &OverrideQuerySubmission_Parms, NULL );

	return OverrideQuerySubmission_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )
// unsigned long                  bInvalidateExistingSearchResults ( CPF_OptionalParm | CPF_Parm )

bool UUIDataStore_OnlineGameSearch::eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults )
{
	static UFunction* pFnSubmitGameSearch = NULL;

	if ( ! pFnSubmitGameSearch )
		pFnSubmitGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 35678 ];

	UUIDataStore_OnlineGameSearch_eventSubmitGameSearch_Parms SubmitGameSearch_Parms;
	SubmitGameSearch_Parms.ControllerIndex = ControllerIndex;
	SubmitGameSearch_Parms.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	this->ProcessEvent ( pFnSubmitGameSearch, &SubmitGameSearch_Parms, NULL );

	return SubmitGameSearch_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults ( )
{
	static UFunction* pFnInvalidateCurrentSearchResults = NULL;

	if ( ! pFnInvalidateCurrentSearchResults )
		pFnInvalidateCurrentSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 35674 ];

	UUIDataStore_OnlineGameSearch_execInvalidateCurrentSearchResults_Parms InvalidateCurrentSearchResults_Parms;

	this->ProcessEvent ( pFnInvalidateCurrentSearchResults, &InvalidateCurrentSearchResults_Parms, NULL );

	return InvalidateCurrentSearchResults_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSearch.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSearch::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 35673 ];

	UUIDataStore_OnlineGameSearch_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlinePlayerStorage*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class UOnlinePlayerStorage* UUIDataStore_OnlinePlayerData::eventGetCachedPlayerStorage ( int ControllerId )
{
	static UFunction* pFnGetCachedPlayerStorage = NULL;

	if ( ! pFnGetCachedPlayerStorage )
		pFnGetCachedPlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 35795 ];

	UUIDataStore_OnlinePlayerData_eventGetCachedPlayerStorage_Parms GetCachedPlayerStorage_Parms;
	GetCachedPlayerStorage_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetCachedPlayerStorage, &GetCachedPlayerStorage_Parms, NULL );

	return GetCachedPlayerStorage_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class UOnlineProfileSettings* UUIDataStore_OnlinePlayerData::eventGetCachedPlayerProfile ( int ControllerId )
{
	static UFunction* pFnGetCachedPlayerProfile = NULL;

	if ( ! pFnGetCachedPlayerProfile )
		pFnGetCachedPlayerProfile = (UFunction*) UObject::GObjObjects()->Data[ 35789 ];

	UUIDataStore_OnlinePlayerData_eventGetCachedPlayerProfile_Parms GetCachedPlayerProfile_Parms;
	GetCachedPlayerProfile_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetCachedPlayerProfile, &GetCachedPlayerProfile_Parms, NULL );

	return GetCachedPlayerProfile_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates
// [0x00020000] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = (UFunction*) UObject::GObjObjects()->Data[ 35788 ];

	UUIDataStore_OnlinePlayerData_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// [0x00020000] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::RegisterDelegates ( )
{
	static UFunction* pFnRegisterDelegates = NULL;

	if ( ! pFnRegisterDelegates )
		pFnRegisterDelegates = (UFunction*) UObject::GObjObjects()->Data[ 35787 ];

	UUIDataStore_OnlinePlayerData_execRegisterDelegates_Parms RegisterDelegates_Parms;

	this->ProcessEvent ( pFnRegisterDelegates, &RegisterDelegates_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange ( )
{
	static UFunction* pFnOnPlayerDataChange = NULL;

	if ( ! pFnOnPlayerDataChange )
		pFnOnPlayerDataChange = (UFunction*) UObject::GObjObjects()->Data[ 35785 ];

	UUIDataStore_OnlinePlayerData_execOnPlayerDataChange_Parms OnPlayerDataChange_Parms;

	this->ProcessEvent ( pFnOnPlayerDataChange, &OnPlayerDataChange_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 35781 ];

	UUIDataStore_OnlinePlayerData_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlinePlayerData::eventOnUnregister ( )
{
	static UFunction* pFnOnUnregister = NULL;

	if ( ! pFnOnUnregister )
		pFnOnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 35778 ];

	UUIDataStore_OnlinePlayerData_eventOnUnregister_Parms OnUnregister_Parms;

	this->ProcessEvent ( pFnOnUnregister, &OnUnregister_Parms, NULL );
};

// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            InPlayer                       ( CPF_Parm )

void UUIDataStore_OnlinePlayerData::eventOnRegister ( class ULocalPlayer* InPlayer )
{
	static UFunction* pFnOnRegister = NULL;

	if ( ! pFnOnRegister )
		pFnOnRegister = (UFunction*) UObject::GObjObjects()->Data[ 35774 ];

	UUIDataStore_OnlinePlayerData_eventOnRegister_Parms OnRegister_Parms;
	OnRegister_Parms.InPlayer = InPlayer;

	this->ProcessEvent ( pFnOnRegister, &OnRegister_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UOnlineStatsRead*        StatsToSort                    ( CPF_Parm )

void UUIDataStore_OnlineStats::SortResultsByRank ( class UOnlineStatsRead* StatsToSort )
{
	static UFunction* pFnSortResultsByRank = NULL;

	if ( ! pFnSortResultsByRank )
		pFnSortResultsByRank = (UFunction*) UObject::GObjObjects()->Data[ 35838 ];

	UUIDataStore_OnlineStats_execSortResultsByRank_Parms SortResultsByRank_Parms;
	SortResultsByRank_Parms.StatsToSort = StatsToSort;

	pFnSortResultsByRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortResultsByRank, &SortResultsByRank_Parms, NULL );

	pFnSortResultsByRank->FunctionFlags |= 0x400;
};

// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UUIDataStore_OnlineStats::OnReadComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadComplete = NULL;

	if ( ! pFnOnReadComplete )
		pFnOnReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 35836 ];

	UUIDataStore_OnlineStats_execOnReadComplete_Parms OnReadComplete_Parms;
	OnReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadComplete, &OnReadComplete_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ConrollerIndex                 ( CPF_Parm )
// int                            ListIndex                      ( CPF_Parm )

bool UUIDataStore_OnlineStats::eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex )
{
	static UFunction* pFnShowGamercard = NULL;

	if ( ! pFnShowGamercard )
		pFnShowGamercard = (UFunction*) UObject::GObjObjects()->Data[ 35829 ];

	UUIDataStore_OnlineStats_eventShowGamercard_Parms ShowGamercard_Parms;
	ShowGamercard_Parms.ConrollerIndex = ConrollerIndex;
	ShowGamercard_Parms.ListIndex = ListIndex;

	this->ProcessEvent ( pFnShowGamercard, &ShowGamercard_Parms, NULL );

	return ShowGamercard_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.RefreshStats
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )

bool UUIDataStore_OnlineStats::eventRefreshStats ( unsigned char ControllerIndex )
{
	static UFunction* pFnRefreshStats = NULL;

	if ( ! pFnRefreshStats )
		pFnRefreshStats = (UFunction*) UObject::GObjObjects()->Data[ 35823 ];

	UUIDataStore_OnlineStats_eventRefreshStats_Parms RefreshStats_Parms;
	RefreshStats_Parms.ControllerIndex = ControllerIndex;

	this->ProcessEvent ( pFnRefreshStats, &RefreshStats_Parms, NULL );

	return RefreshStats_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// [0x00020002] 
// Parameters infos:

void UUIDataStore_OnlineStats::SetStatsReadInfo ( )
{
	static UFunction* pFnSetStatsReadInfo = NULL;

	if ( ! pFnSetStatsReadInfo )
		pFnSetStatsReadInfo = (UFunction*) UObject::GObjObjects()->Data[ 35822 ];

	UUIDataStore_OnlineStats_execSetStatsReadInfo_Parms SetStatsReadInfo_Parms;

	this->ProcessEvent ( pFnSetStatsReadInfo, &SetStatsReadInfo_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineStats.Init
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineStats::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 35820 ];

	UUIDataStore_OnlineStats_eventInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.Unregistered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventUnregistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnUnregistered = NULL;

	if ( ! pFnUnregistered )
		pFnUnregistered = (UFunction*) UObject::GObjObjects()->Data[ 35749 ];

	UUIDataStore_OnlineGameSettings_eventUnregistered_Parms Unregistered_Parms;
	Unregistered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnUnregistered, &Unregistered_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.Registered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            PlayerOwner                    ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventRegistered ( class ULocalPlayer* PlayerOwner )
{
	static UFunction* pFnRegistered = NULL;

	if ( ! pFnRegistered )
		pFnRegistered = (UFunction*) UObject::GObjObjects()->Data[ 35747 ];

	UUIDataStore_OnlineGameSettings_eventRegistered_Parms Registered_Parms;
	Registered_Parms.PlayerOwner = PlayerOwner;

	this->ProcessEvent ( pFnRegistered, &Registered_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSettings::eventMoveToPrevious ( )
{
	static UFunction* pFnMoveToPrevious = NULL;

	if ( ! pFnMoveToPrevious )
		pFnMoveToPrevious = (UFunction*) UObject::GObjObjects()->Data[ 35745 ];

	UUIDataStore_OnlineGameSettings_eventMoveToPrevious_Parms MoveToPrevious_Parms;

	this->ProcessEvent ( pFnMoveToPrevious, &MoveToPrevious_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UUIDataStore_OnlineGameSettings::eventMoveToNext ( )
{
	static UFunction* pFnMoveToNext = NULL;

	if ( ! pFnMoveToNext )
		pFnMoveToNext = (UFunction*) UObject::GObjObjects()->Data[ 35743 ];

	UUIDataStore_OnlineGameSettings_eventMoveToNext_Parms MoveToNext_Parms;

	this->ProcessEvent ( pFnMoveToNext, &MoveToNext_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SettingsName                   ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventSetCurrentByName ( struct FName SettingsName )
{
	static UFunction* pFnSetCurrentByName = NULL;

	if ( ! pFnSetCurrentByName )
		pFnSetCurrentByName = (UFunction*) UObject::GObjObjects()->Data[ 35740 ];

	UUIDataStore_OnlineGameSettings_eventSetCurrentByName_Parms SetCurrentByName_Parms;
	memcpy ( &SetCurrentByName_Parms.SettingsName, &SettingsName, 0x8 );

	this->ProcessEvent ( pFnSetCurrentByName, &SetCurrentByName_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            NewIndex                       ( CPF_Parm )

void UUIDataStore_OnlineGameSettings::eventSetCurrentByIndex ( int NewIndex )
{
	static UFunction* pFnSetCurrentByIndex = NULL;

	if ( ! pFnSetCurrentByIndex )
		pFnSetCurrentByIndex = (UFunction*) UObject::GObjObjects()->Data[ 35738 ];

	UUIDataStore_OnlineGameSettings_eventSetCurrentByIndex_Parms SetCurrentByIndex_Parms;
	SetCurrentByIndex_Parms.NewIndex = NewIndex;

	this->ProcessEvent ( pFnSetCurrentByIndex, &SetCurrentByIndex_Parms, NULL );
};

// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UUIDataProvider_Settings* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::eventGetCurrentProvider ( )
{
	static UFunction* pFnGetCurrentProvider = NULL;

	if ( ! pFnGetCurrentProvider )
		pFnGetCurrentProvider = (UFunction*) UObject::GObjObjects()->Data[ 35736 ];

	UUIDataStore_OnlineGameSettings_eventGetCurrentProvider_Parms GetCurrentProvider_Parms;

	this->ProcessEvent ( pFnGetCurrentProvider, &GetCurrentProvider_Parms, NULL );

	return GetCurrentProvider_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::eventGetCurrentGameSettings ( )
{
	static UFunction* pFnGetCurrentGameSettings = NULL;

	if ( ! pFnGetCurrentGameSettings )
		pFnGetCurrentGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 35734 ];

	UUIDataStore_OnlineGameSettings_eventGetCurrentGameSettings_Parms GetCurrentGameSettings_Parms;

	this->ProcessEvent ( pFnGetCurrentGameSettings, &GetCurrentGameSettings_Parms, NULL );

	return GetCurrentGameSettings_Parms.ReturnValue;
};

// Function Engine.UIDataStore_OnlineGameSettings.CreateGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ControllerIndex                ( CPF_Parm )

bool UUIDataStore_OnlineGameSettings::eventCreateGame ( unsigned char ControllerIndex )
{
	static UFunction* pFnCreateGame = NULL;

	if ( ! pFnCreateGame )
		pFnCreateGame = (UFunction*) UObject::GObjObjects()->Data[ 35729 ];

	UUIDataStore_OnlineGameSettings_eventCreateGame_Parms CreateGame_Parms;
	CreateGame_Parms.ControllerIndex = ControllerIndex;

	this->ProcessEvent ( pFnCreateGame, &CreateGame_Parms, NULL );

	return CreateGame_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  DesiredPlatform                ( CPF_Parm )

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform )
{
	static UFunction* pFnHasAliasMappingForPlatform = NULL;

	if ( ! pFnHasAliasMappingForPlatform )
		pFnHasAliasMappingForPlatform = (UFunction*) UObject::GObjObjects()->Data[ 35643 ];

	UUIDataStore_InputAlias_execHasAliasMappingForPlatform_Parms HasAliasMappingForPlatform_Parms;
	memcpy ( &HasAliasMappingForPlatform_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	HasAliasMappingForPlatform_Parms.DesiredPlatform = DesiredPlatform;

	pFnHasAliasMappingForPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasAliasMappingForPlatform, &HasAliasMappingForPlatform_Parms, NULL );

	pFnHasAliasMappingForPlatform->FunctionFlags |= 0x400;

	return HasAliasMappingForPlatform_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )

int UUIDataStore_InputAlias::FindInputAliasIndex ( struct FName DesiredAlias )
{
	static UFunction* pFnFindInputAliasIndex = NULL;

	if ( ! pFnFindInputAliasIndex )
		pFnFindInputAliasIndex = (UFunction*) UObject::GObjObjects()->Data[ 35640 ];

	UUIDataStore_InputAlias_execFindInputAliasIndex_Parms FindInputAliasIndex_Parms;
	memcpy ( &FindInputAliasIndex_Parms.DesiredAlias, &DesiredAlias, 0x8 );

	pFnFindInputAliasIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInputAliasIndex, &FindInputAliasIndex_Parms, NULL );

	pFnFindInputAliasIndex->FunctionFlags |= 0x400;

	return FindInputAliasIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyDataByIndex = NULL;

	if ( ! pFnGetAliasInputKeyDataByIndex )
		pFnGetAliasInputKeyDataByIndex = (UFunction*) UObject::GObjObjects()->Data[ 35635 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyDataByIndex_Parms GetAliasInputKeyDataByIndex_Parms;
	GetAliasInputKeyDataByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyDataByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyDataByIndex, &GetAliasInputKeyDataByIndex_Parms, NULL );

	pFnGetAliasInputKeyDataByIndex->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyDataByIndex_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyDataByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )
// struct FRawInputKeyEventData   out_InputKeyData               ( CPF_Parm | CPF_OutParm )

bool UUIDataStore_InputAlias::GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData )
{
	static UFunction* pFnGetAliasInputKeyData = NULL;

	if ( ! pFnGetAliasInputKeyData )
		pFnGetAliasInputKeyData = (UFunction*) UObject::GObjObjects()->Data[ 35630 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyData_Parms GetAliasInputKeyData_Parms;
	memcpy ( &GetAliasInputKeyData_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyData_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyData, &GetAliasInputKeyData_Parms, NULL );

	pFnGetAliasInputKeyData->FunctionFlags |= 0x400;

	if ( out_InputKeyData )
		memcpy ( out_InputKeyData, &GetAliasInputKeyData_Parms.out_InputKeyData, 0xC );

	return GetAliasInputKeyData_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyNameByIndex = NULL;

	if ( ! pFnGetAliasInputKeyNameByIndex )
		pFnGetAliasInputKeyNameByIndex = (UFunction*) UObject::GObjObjects()->Data[ 35626 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyNameByIndex_Parms GetAliasInputKeyNameByIndex_Parms;
	GetAliasInputKeyNameByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasInputKeyNameByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyNameByIndex, &GetAliasInputKeyNameByIndex_Parms, NULL );

	pFnGetAliasInputKeyNameByIndex->FunctionFlags |= 0x400;

	return GetAliasInputKeyNameByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FName UUIDataStore_InputAlias::GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasInputKeyName = NULL;

	if ( ! pFnGetAliasInputKeyName )
		pFnGetAliasInputKeyName = (UFunction*) UObject::GObjObjects()->Data[ 35622 ];

	UUIDataStore_InputAlias_execGetAliasInputKeyName_Parms GetAliasInputKeyName_Parms;
	memcpy ( &GetAliasInputKeyName_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasInputKeyName_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasInputKeyName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasInputKeyName, &GetAliasInputKeyName_Parms, NULL );

	pFnGetAliasInputKeyName->FunctionFlags |= 0x400;

	return GetAliasInputKeyName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AliasIndex                     ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkupByIndex = NULL;

	if ( ! pFnGetAliasFontMarkupByIndex )
		pFnGetAliasFontMarkupByIndex = (UFunction*) UObject::GObjObjects()->Data[ 35618 ];

	UUIDataStore_InputAlias_execGetAliasFontMarkupByIndex_Parms GetAliasFontMarkupByIndex_Parms;
	GetAliasFontMarkupByIndex_Parms.AliasIndex = AliasIndex;
	GetAliasFontMarkupByIndex_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkupByIndex, &GetAliasFontMarkupByIndex_Parms, NULL );

	pFnGetAliasFontMarkupByIndex->FunctionFlags |= 0x400;

	return GetAliasFontMarkupByIndex_Parms.ReturnValue;
};

// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   DesiredAlias                   ( CPF_Parm )
// unsigned char                  OverridePlatform               ( CPF_OptionalParm | CPF_Parm )

struct FString UUIDataStore_InputAlias::GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform )
{
	static UFunction* pFnGetAliasFontMarkup = NULL;

	if ( ! pFnGetAliasFontMarkup )
		pFnGetAliasFontMarkup = (UFunction*) UObject::GObjObjects()->Data[ 35614 ];

	UUIDataStore_InputAlias_execGetAliasFontMarkup_Parms GetAliasFontMarkup_Parms;
	memcpy ( &GetAliasFontMarkup_Parms.DesiredAlias, &DesiredAlias, 0x8 );
	GetAliasFontMarkup_Parms.OverridePlatform = OverridePlatform;

	pFnGetAliasFontMarkup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAliasFontMarkup, &GetAliasFontMarkup_Parms, NULL );

	pFnGetAliasFontMarkup->FunctionFlags |= 0x400;

	return GetAliasFontMarkup_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 MappedString                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UUIDataStore_StringAliasMap::GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString )
{
	static UFunction* pFnGetStringWithFieldName = NULL;

	if ( ! pFnGetStringWithFieldName )
		pFnGetStringWithFieldName = (UFunction*) UObject::GObjObjects()->Data[ 35869 ];

	UUIDataStore_StringAliasMap_execGetStringWithFieldName_Parms GetStringWithFieldName_Parms;
	memcpy ( &GetStringWithFieldName_Parms.FieldName, &FieldName, 0xC );

	pFnGetStringWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringWithFieldName, &GetStringWithFieldName_Parms, NULL );

	pFnGetStringWithFieldName->FunctionFlags |= 0x400;

	if ( MappedString )
		memcpy ( MappedString, &GetStringWithFieldName_Parms.MappedString, 0xC );

	return GetStringWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FieldName                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SetName                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

int UUIDataStore_StringAliasMap::FindMappingWithFieldName ( struct FString FieldName, struct FString SetName )
{
	static UFunction* pFnFindMappingWithFieldName = NULL;

	if ( ! pFnFindMappingWithFieldName )
		pFnFindMappingWithFieldName = (UFunction*) UObject::GObjObjects()->Data[ 35865 ];

	UUIDataStore_StringAliasMap_execFindMappingWithFieldName_Parms FindMappingWithFieldName_Parms;
	memcpy ( &FindMappingWithFieldName_Parms.FieldName, &FieldName, 0xC );
	memcpy ( &FindMappingWithFieldName_Parms.SetName, &SetName, 0xC );

	pFnFindMappingWithFieldName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMappingWithFieldName, &FindMappingWithFieldName_Parms, NULL );

	pFnFindMappingWithFieldName->FunctionFlags |= 0x400;

	return FindMappingWithFieldName_Parms.ReturnValue;
};

// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner ( )
{
	static UFunction* pFnGetPlayerOwner = NULL;

	if ( ! pFnGetPlayerOwner )
		pFnGetPlayerOwner = (UFunction*) UObject::GObjObjects()->Data[ 35863 ];

	UUIDataStore_StringAliasMap_execGetPlayerOwner_Parms GetPlayerOwner_Parms;

	pFnGetPlayerOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerOwner, &GetPlayerOwner_Parms, NULL );

	pFnGetPlayerOwner->FunctionFlags |= 0x400;

	return GetPlayerOwner_Parms.ReturnValue;
};

// Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UProperty*               UnsupportedProperty            ( CPF_Parm )

bool UUIPropertyDataProvider::CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty )
{
	static UFunction* pFnCanSupportComplexPropertyType = NULL;

	if ( ! pFnCanSupportComplexPropertyType )
		pFnCanSupportComplexPropertyType = (UFunction*) UObject::GObjObjects()->Data[ 28895 ];

	UUIPropertyDataProvider_execCanSupportComplexPropertyType_Parms CanSupportComplexPropertyType_Parms;
	CanSupportComplexPropertyType_Parms.UnsupportedProperty = UnsupportedProperty;

	this->ProcessEvent ( pFnCanSupportComplexPropertyType, &CanSupportComplexPropertyType_Parms, NULL );

	return CanSupportComplexPropertyType_Parms.ReturnValue;
};

// Function Engine.UIResourceDataProvider.InitializeProvider
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsEditor                      ( CPF_Parm )

void UUIResourceDataProvider::eventInitializeProvider ( unsigned long bIsEditor )
{
	static UFunction* pFnInitializeProvider = NULL;

	if ( ! pFnInitializeProvider )
		pFnInitializeProvider = (UFunction*) UObject::GObjObjects()->Data[ 28899 ];

	UUIResourceDataProvider_eventInitializeProvider_Parms InitializeProvider_Parms;
	InitializeProvider_Parms.bIsEditor = bIsEditor;

	this->ProcessEvent ( pFnInitializeProvider, &InitializeProvider_Parms, NULL );
};

// Function Engine.UIResourceCombinationProvider.ClearProviderReferences
// [0x00020002] 
// Parameters infos:

void UUIResourceCombinationProvider::ClearProviderReferences ( )
{
	static UFunction* pFnClearProviderReferences = NULL;

	if ( ! pFnClearProviderReferences )
		pFnClearProviderReferences = (UFunction*) UObject::GObjObjects()->Data[ 36031 ];

	UUIResourceCombinationProvider_execClearProviderReferences_Parms ClearProviderReferences_Parms;

	this->ProcessEvent ( pFnClearProviderReferences, &ClearProviderReferences_Parms, NULL );
};

// Function Engine.UIResourceCombinationProvider.InitializeProvider
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bIsEditor                      ( CPF_Parm )
// class UUIResourceDataProvider* InStaticResourceProvider       ( CPF_Parm )
// class UUIDataProvider_OnlineProfileSettings* InProfileProvider              ( CPF_Parm )

void UUIResourceCombinationProvider::eventInitializeProvider ( unsigned long bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider )
{
	static UFunction* pFnInitializeProvider = NULL;

	if ( ! pFnInitializeProvider )
		pFnInitializeProvider = (UFunction*) UObject::GObjObjects()->Data[ 36027 ];

	UUIResourceCombinationProvider_eventInitializeProvider_Parms InitializeProvider_Parms;
	InitializeProvider_Parms.bIsEditor = bIsEditor;
	InitializeProvider_Parms.InStaticResourceProvider = InStaticResourceProvider;
	InitializeProvider_Parms.InProfileProvider = InProfileProvider;

	this->ProcessEvent ( pFnInitializeProvider, &InitializeProvider_Parms, NULL );
};

// Function Engine.GameUISceneClient.FindLocalPlayerIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPlayer*                 P                              ( CPF_Parm )

int UGameUISceneClient::FindLocalPlayerIndex ( class UPlayer* P )
{
	static UFunction* pFnFindLocalPlayerIndex = NULL;

	if ( ! pFnFindLocalPlayerIndex )
		pFnFindLocalPlayerIndex = (UFunction*) UObject::GObjObjects()->Data[ 22491 ];

	UGameUISceneClient_execFindLocalPlayerIndex_Parms FindLocalPlayerIndex_Parms;
	FindLocalPlayerIndex_Parms.P = P;

	this->ProcessEvent ( pFnFindLocalPlayerIndex, &FindLocalPlayerIndex_Parms, NULL );

	return FindLocalPlayerIndex_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            RemovedPlayer                  ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer )
{
	static UFunction* pFnNotifyPlayerRemoved = NULL;

	if ( ! pFnNotifyPlayerRemoved )
		pFnNotifyPlayerRemoved = (UFunction*) UObject::GObjObjects()->Data[ 22488 ];

	UGameUISceneClient_execNotifyPlayerRemoved_Parms NotifyPlayerRemoved_Parms;
	NotifyPlayerRemoved_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerRemoved_Parms.RemovedPlayer = RemovedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerRemoved, &NotifyPlayerRemoved_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyPlayerAdded
// [0x00020002] 
// Parameters infos:
// int                            PlayerIndex                    ( CPF_Parm )
// class ULocalPlayer*            AddedPlayer                    ( CPF_Parm )

void UGameUISceneClient::NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer )
{
	static UFunction* pFnNotifyPlayerAdded = NULL;

	if ( ! pFnNotifyPlayerAdded )
		pFnNotifyPlayerAdded = (UFunction*) UObject::GObjObjects()->Data[ 22485 ];

	UGameUISceneClient_execNotifyPlayerAdded_Parms NotifyPlayerAdded_Parms;
	NotifyPlayerAdded_Parms.PlayerIndex = PlayerIndex;
	NotifyPlayerAdded_Parms.AddedPlayer = AddedPlayer;

	this->ProcessEvent ( pFnNotifyPlayerAdded, &NotifyPlayerAdded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// [0x00020000] 
// Parameters infos:

void UGameUISceneClient::NotifyGameSessionEnded ( )
{
	static UFunction* pFnNotifyGameSessionEnded = NULL;

	if ( ! pFnNotifyGameSessionEnded )
		pFnNotifyGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 22484 ];

	UGameUISceneClient_execNotifyGameSessionEnded_Parms NotifyGameSessionEnded_Parms;

	this->ProcessEvent ( pFnNotifyGameSessionEnded, &NotifyGameSessionEnded_Parms, NULL );
};

// Function Engine.GameUISceneClient.NotifyClientTravel
// [0x00020000] 
// Parameters infos:
// class APlayerController*       TravellingPlayer               ( CPF_Parm )
// struct FString                 TravelURL                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  TravelType                     ( CPF_Parm )
// unsigned long                  bIsSeamlessTravel              ( CPF_Parm )

void UGameUISceneClient::NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel )
{
	static UFunction* pFnNotifyClientTravel = NULL;

	if ( ! pFnNotifyClientTravel )
		pFnNotifyClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 22479 ];

	UGameUISceneClient_execNotifyClientTravel_Parms NotifyClientTravel_Parms;
	NotifyClientTravel_Parms.TravellingPlayer = TravellingPlayer;
	memcpy ( &NotifyClientTravel_Parms.TravelURL, &TravelURL, 0xC );
	NotifyClientTravel_Parms.TravelType = TravelType;
	NotifyClientTravel_Parms.bIsSeamlessTravel = bIsSeamlessTravel;

	this->ProcessEvent ( pFnNotifyClientTravel, &NotifyClientTravel_Parms, NULL );
};

// Function Engine.GameUISceneClient.PauseGame
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDesiredPauseState             ( CPF_Parm )
// int                            PlayerIndex                    ( CPF_OptionalParm | CPF_Parm )

void UGameUISceneClient::eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex )
{
	static UFunction* pFnPauseGame = NULL;

	if ( ! pFnPauseGame )
		pFnPauseGame = (UFunction*) UObject::GObjObjects()->Data[ 22475 ];

	UGameUISceneClient_eventPauseGame_Parms PauseGame_Parms;
	PauseGame_Parms.bDesiredPauseState = bDesiredPauseState;
	PauseGame_Parms.PlayerIndex = PlayerIndex;

	this->ProcessEvent ( pFnPauseGame, &PauseGame_Parms, NULL );
};

// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UGameUISceneClient::CanUnpauseInternalUI ( )
{
	static UFunction* pFnCanUnpauseInternalUI = NULL;

	if ( ! pFnCanUnpauseInternalUI )
		pFnCanUnpauseInternalUI = (UFunction*) UObject::GObjObjects()->Data[ 22473 ];

	UGameUISceneClient_execCanUnpauseInternalUI_Parms CanUnpauseInternalUI_Parms;

	pFnCanUnpauseInternalUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUnpauseInternalUI, &CanUnpauseInternalUI_Parms, NULL );

	pFnCanUnpauseInternalUI->FunctionFlags |= 0x400;

	return CanUnpauseInternalUI_Parms.ReturnValue;
};

// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGameUISceneClient::RequestInputProcessingUpdate ( )
{
	static UFunction* pFnRequestInputProcessingUpdate = NULL;

	if ( ! pFnRequestInputProcessingUpdate )
		pFnRequestInputProcessingUpdate = (UFunction*) UObject::GObjObjects()->Data[ 22472 ];

	UGameUISceneClient_execRequestInputProcessingUpdate_Parms RequestInputProcessingUpdate_Parms;

	pFnRequestInputProcessingUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestInputProcessingUpdate, &RequestInputProcessingUpdate_Parms, NULL );

	pFnRequestInputProcessingUpdate->FunctionFlags |= 0x400;
};

// Function Engine.GameUISceneClient.GetCurrentNetMode
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UGameUISceneClient::GetCurrentNetMode ( )
{
	static UFunction* pFnGetCurrentNetMode = NULL;

	if ( ! pFnGetCurrentNetMode )
		pFnGetCurrentNetMode = (UFunction*) UObject::GObjObjects()->Data[ 22470 ];

	UGameUISceneClient_execGetCurrentNetMode_Parms GetCurrentNetMode_Parms;

	pFnGetCurrentNetMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentNetMode, &GetCurrentNetMode_Parms, NULL );

	pFnGetCurrentNetMode->FunctionFlags |= 0x400;

	return GetCurrentNetMode_Parms.ReturnValue;
};

// Function Engine.InteractiveFoliageActor.Touch
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AInteractiveFoliageActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 23404 ];

	AInteractiveFoliageActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	pFnTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );

	pFnTouch->FunctionFlags |= 0x400;
};

// Function Engine.InteractiveFoliageActor.TakeDamage
// [0x00024D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AInteractiveFoliageActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 23396 ];

	AInteractiveFoliageActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	pFnTakeDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );

	pFnTakeDamage->FunctionFlags |= 0x400;
};

// Function Engine.FluidInfluenceActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AFluidInfluenceActor::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19959 ];

	AFluidInfluenceActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.FluidInfluenceActor.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void AFluidInfluenceActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 19957 ];

	AFluidInfluenceActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AFluidSurfaceActor::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 20033 ];

	AFluidSurfaceActor_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.FluidSurfaceActor.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void AFluidSurfaceActor::eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 20025 ];

	AFluidSurfaceActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function Engine.FluidSurfaceComponent.SetSimulationPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetSimulationPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetSimulationPosition = NULL;

	if ( ! pFnSetSimulationPosition )
		pFnSetSimulationPosition = (UFunction*) UObject::GObjObjects()->Data[ 20022 ];

	UFluidSurfaceComponent_execSetSimulationPosition_Parms SetSimulationPosition_Parms;
	memcpy ( &SetSimulationPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetSimulationPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSimulationPosition, &SetSimulationPosition_Parms, NULL );

	pFnSetSimulationPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.SetDetailPosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )

void UFluidSurfaceComponent::SetDetailPosition ( struct FVector WorldPos )
{
	static UFunction* pFnSetDetailPosition = NULL;

	if ( ! pFnSetDetailPosition )
		pFnSetDetailPosition = (UFunction*) UObject::GObjObjects()->Data[ 20020 ];

	UFluidSurfaceComponent_execSetDetailPosition_Parms SetDetailPosition_Parms;
	memcpy ( &SetDetailPosition_Parms.WorldPos, &WorldPos, 0xC );

	pFnSetDetailPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDetailPosition, &SetDetailPosition_Parms, NULL );

	pFnSetDetailPosition->FunctionFlags |= 0x400;
};

// Function Engine.FluidSurfaceComponent.ApplyForce
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 WorldPos                       ( CPF_Parm )
// float                          Strength                       ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// unsigned long                  bImpulse                       ( CPF_OptionalParm | CPF_Parm )

void UFluidSurfaceComponent::ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse )
{
	static UFunction* pFnApplyForce = NULL;

	if ( ! pFnApplyForce )
		pFnApplyForce = (UFunction*) UObject::GObjObjects()->Data[ 7034 ];

	UFluidSurfaceComponent_execApplyForce_Parms ApplyForce_Parms;
	memcpy ( &ApplyForce_Parms.WorldPos, &WorldPos, 0xC );
	ApplyForce_Parms.Strength = Strength;
	ApplyForce_Parms.Radius = Radius;
	ApplyForce_Parms.bImpulse = bImpulse;

	pFnApplyForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyForce, &ApplyForce_Parms, NULL );

	pFnApplyForce->FunctionFlags |= 0x400;
};

// Function Engine.SpeedTreeComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  MeshType                       ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void USpeedTreeComponent::SetMaterial ( unsigned char MeshType, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 34162 ];

	USpeedTreeComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.MeshType = MeshType;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.SpeedTreeComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MeshType                       ( CPF_Parm )

class UMaterialInterface* USpeedTreeComponent::GetMaterial ( unsigned char MeshType )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 34159 ];

	USpeedTreeComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.MeshType = MeshType;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.LensFlareSource.SetActorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class AActor*                  Param                          ( CPF_Parm )

void ALensFlareSource::SetActorParameter ( struct FName ParameterName, class AActor* Param )
{
	static UFunction* pFnSetActorParameter = NULL;

	if ( ! pFnSetActorParameter )
		pFnSetActorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24688 ];

	ALensFlareSource_execSetActorParameter_Parms SetActorParameter_Parms;
	memcpy ( &SetActorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetActorParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetActorParameter, &SetActorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetExtColorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Red                            ( CPF_Parm )
// float                          Green                          ( CPF_Parm )
// float                          Blue                           ( CPF_Parm )
// float                          Alpha                          ( CPF_Parm )

void ALensFlareSource::SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha )
{
	static UFunction* pFnSetExtColorParameter = NULL;

	if ( ! pFnSetExtColorParameter )
		pFnSetExtColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24682 ];

	ALensFlareSource_execSetExtColorParameter_Parms SetExtColorParameter_Parms;
	memcpy ( &SetExtColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetExtColorParameter_Parms.Red = Red;
	SetExtColorParameter_Parms.Green = Green;
	SetExtColorParameter_Parms.Blue = Blue;
	SetExtColorParameter_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnSetExtColorParameter, &SetExtColorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetColorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FLinearColor            Param                          ( CPF_Parm )

void ALensFlareSource::SetColorParameter ( struct FName ParameterName, struct FLinearColor Param )
{
	static UFunction* pFnSetColorParameter = NULL;

	if ( ! pFnSetColorParameter )
		pFnSetColorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24679 ];

	ALensFlareSource_execSetColorParameter_Parms SetColorParameter_Parms;
	memcpy ( &SetColorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetColorParameter_Parms.Param, &Param, 0x10 );

	this->ProcessEvent ( pFnSetColorParameter, &SetColorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetVectorParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FVector                 Param                          ( CPF_Parm )

void ALensFlareSource::SetVectorParameter ( struct FName ParameterName, struct FVector Param )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 24676 ];

	ALensFlareSource_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.ParameterName, &ParameterName, 0x8 );
	memcpy ( &SetVectorParameter_Parms.Param, &Param, 0xC );

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.SetFloatParameter
// [0x00020100] 
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Param                          ( CPF_Parm )

void ALensFlareSource::SetFloatParameter ( struct FName ParameterName, float Param )
{
	static UFunction* pFnSetFloatParameter = NULL;

	if ( ! pFnSetFloatParameter )
		pFnSetFloatParameter = (UFunction*) UObject::GObjObjects()->Data[ 24673 ];

	ALensFlareSource_execSetFloatParameter_Parms SetFloatParameter_Parms;
	memcpy ( &SetFloatParameter_Parms.ParameterName, &ParameterName, 0x8 );
	SetFloatParameter_Parms.Param = Param;

	this->ProcessEvent ( pFnSetFloatParameter, &SetFloatParameter_Parms, NULL );
};

// Function Engine.LensFlareSource.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ALensFlareSource::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 24671 ];

	ALensFlareSource_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.LensFlareSource.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALensFlareSource::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 24669 ];

	ALensFlareSource_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.LensFlareSource.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ALensFlareSource::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 24668 ];

	ALensFlareSource_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.LensFlareSource.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULensFlare*              NewTemplate                    ( CPF_Parm )

void ALensFlareSource::SetTemplate ( class ULensFlare* NewTemplate )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 24666 ];

	ALensFlareSource_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.CreateAndSetMaterialInstanceConstant
// [0x00020002] 
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInstanceConstant* ULensFlareComponent::CreateAndSetMaterialInstanceConstant ( int ElementIndex )
{
	static UFunction* pFnCreateAndSetMaterialInstanceConstant = NULL;

	if ( ! pFnCreateAndSetMaterialInstanceConstant )
		pFnCreateAndSetMaterialInstanceConstant = (UFunction*) UObject::GObjObjects()->Data[ 24660 ];

	ULensFlareComponent_execCreateAndSetMaterialInstanceConstant_Parms CreateAndSetMaterialInstanceConstant_Parms;
	CreateAndSetMaterialInstanceConstant_Parms.ElementIndex = ElementIndex;

	this->ProcessEvent ( pFnCreateAndSetMaterialInstanceConstant, &CreateAndSetMaterialInstanceConstant_Parms, NULL );

	return CreateAndSetMaterialInstanceConstant_Parms.ReturnValue;
};

// Function Engine.LensFlareComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void ULensFlareComponent::SetMaterial ( int ElementIndex, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 24657 ];

	ULensFlareComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.ElementIndex = ElementIndex;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.GetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInterface*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ElementIndex                   ( CPF_Parm )

class UMaterialInterface* ULensFlareComponent::GetMaterial ( int ElementIndex )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 24654 ];

	ULensFlareComponent_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.ElementIndex = ElementIndex;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	return GetMaterial_Parms.ReturnValue;
};

// Function Engine.LensFlareComponent.SetIsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bInIsActive                    ( CPF_Parm )

void ULensFlareComponent::SetIsActive ( unsigned long bInIsActive )
{
	static UFunction* pFnSetIsActive = NULL;

	if ( ! pFnSetIsActive )
		pFnSetIsActive = (UFunction*) UObject::GObjObjects()->Data[ 24652 ];

	ULensFlareComponent_execSetIsActive_Parms SetIsActive_Parms;
	SetIsActive_Parms.bInIsActive = bInIsActive;

	pFnSetIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIsActive, &SetIsActive_Parms, NULL );

	pFnSetIsActive->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetSourceColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FLinearColor            InSourceColor                  ( CPF_Parm )

void ULensFlareComponent::SetSourceColor ( struct FLinearColor InSourceColor )
{
	static UFunction* pFnSetSourceColor = NULL;

	if ( ! pFnSetSourceColor )
		pFnSetSourceColor = (UFunction*) UObject::GObjObjects()->Data[ 24650 ];

	ULensFlareComponent_execSetSourceColor_Parms SetSourceColor_Parms;
	memcpy ( &SetSourceColor_Parms.InSourceColor, &InSourceColor, 0x10 );

	pFnSetSourceColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSourceColor, &SetSourceColor_Parms, NULL );

	pFnSetSourceColor->FunctionFlags |= 0x400;
};

// Function Engine.LensFlareComponent.SetTemplate
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ULensFlare*              NewTemplate                    ( CPF_Parm )
// unsigned long                  bForceSet                      ( CPF_OptionalParm | CPF_Parm )

void ULensFlareComponent::SetTemplate ( class ULensFlare* NewTemplate, unsigned long bForceSet )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 24647 ];

	ULensFlareComponent_execSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bForceSet = bForceSet;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.SetCurrentFrame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Row                            ( CPF_Parm )
// int                            Col                            ( CPF_Parm )

void UTextureFlipBook::SetCurrentFrame ( int Row, int Col )
{
	static UFunction* pFnSetCurrentFrame = NULL;

	if ( ! pFnSetCurrentFrame )
		pFnSetCurrentFrame = (UFunction*) UObject::GObjObjects()->Data[ 35100 ];

	UTextureFlipBook_execSetCurrentFrame_Parms SetCurrentFrame_Parms;
	SetCurrentFrame_Parms.Row = Row;
	SetCurrentFrame_Parms.Col = Col;

	pFnSetCurrentFrame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentFrame, &SetCurrentFrame_Parms, NULL );

	pFnSetCurrentFrame->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 35099 ];

	UTextureFlipBook_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 35098 ];

	UTextureFlipBook_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureFlipBook.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureFlipBook::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 35097 ];

	UTextureFlipBook_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.ResetSourceRegions
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UTexture2DComposite::ResetSourceRegions ( )
{
	static UFunction* pFnResetSourceRegions = NULL;

	if ( ! pFnResetSourceRegions )
		pFnResetSourceRegions = (UFunction*) UObject::GObjObjects()->Data[ 35048 ];

	UTexture2DComposite_execResetSourceRegions_Parms ResetSourceRegions_Parms;

	pFnResetSourceRegions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetSourceRegions, &ResetSourceRegions_Parms, NULL );

	pFnResetSourceRegions->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.UpdateCompositeTexture
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            NumMipsToGenerate              ( CPF_Parm )

void UTexture2DComposite::UpdateCompositeTexture ( int NumMipsToGenerate )
{
	static UFunction* pFnUpdateCompositeTexture = NULL;

	if ( ! pFnUpdateCompositeTexture )
		pFnUpdateCompositeTexture = (UFunction*) UObject::GObjObjects()->Data[ 35046 ];

	UTexture2DComposite_execUpdateCompositeTexture_Parms UpdateCompositeTexture_Parms;
	UpdateCompositeTexture_Parms.NumMipsToGenerate = NumMipsToGenerate;

	pFnUpdateCompositeTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCompositeTexture, &UpdateCompositeTexture_Parms, NULL );

	pFnUpdateCompositeTexture->FunctionFlags |= 0x400;
};

// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTexture2DComposite::SourceTexturesFullyStreamedIn ( )
{
	static UFunction* pFnSourceTexturesFullyStreamedIn = NULL;

	if ( ! pFnSourceTexturesFullyStreamedIn )
		pFnSourceTexturesFullyStreamedIn = (UFunction*) UObject::GObjObjects()->Data[ 35044 ];

	UTexture2DComposite_execSourceTexturesFullyStreamedIn_Parms SourceTexturesFullyStreamedIn_Parms;

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSourceTexturesFullyStreamedIn, &SourceTexturesFullyStreamedIn_Parms, NULL );

	pFnSourceTexturesFullyStreamedIn->FunctionFlags |= 0x400;

	return SourceTexturesFullyStreamedIn_Parms.ReturnValue;
};

// Function Engine.Texture2DDynamic.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTexture2DDynamic*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InIsResolveTarget              ( CPF_OptionalParm | CPF_Parm )

class UTexture2DDynamic* UTexture2DDynamic::Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 35071 ];

	UTexture2DDynamic_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	Create_Parms.InIsResolveTarget = InIsResolveTarget;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.Texture2DDynamic.UpdateMipFromPNG
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            MipIdx                         ( CPF_Parm )
// TArray< unsigned char >        MipData                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UTexture2DDynamic::UpdateMipFromPNG ( int MipIdx, TArray< unsigned char >* MipData )
{
	static UFunction* pFnUpdateMipFromPNG = NULL;

	if ( ! pFnUpdateMipFromPNG )
		pFnUpdateMipFromPNG = (UFunction*) UObject::GObjObjects()->Data[ 35067 ];

	UTexture2DDynamic_execUpdateMipFromPNG_Parms UpdateMipFromPNG_Parms;
	UpdateMipFromPNG_Parms.MipIdx = MipIdx;

	pFnUpdateMipFromPNG->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMipFromPNG, &UpdateMipFromPNG_Parms, NULL );

	pFnUpdateMipFromPNG->FunctionFlags |= 0x400;

	if ( MipData )
		memcpy ( MipData, &UpdateMipFromPNG_Parms.MipData, 0xC );
};

// Function Engine.Texture2DDynamic.UpdateMipFromJPEG
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            MipIdx                         ( CPF_Parm )
// TArray< unsigned char >        MipData                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UTexture2DDynamic::UpdateMipFromJPEG ( int MipIdx, TArray< unsigned char >* MipData )
{
	static UFunction* pFnUpdateMipFromJPEG = NULL;

	if ( ! pFnUpdateMipFromJPEG )
		pFnUpdateMipFromJPEG = (UFunction*) UObject::GObjObjects()->Data[ 35063 ];

	UTexture2DDynamic_execUpdateMipFromJPEG_Parms UpdateMipFromJPEG_Parms;
	UpdateMipFromJPEG_Parms.MipIdx = MipIdx;

	pFnUpdateMipFromJPEG->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMipFromJPEG, &UpdateMipFromJPEG_Parms, NULL );

	pFnUpdateMipFromJPEG->FunctionFlags |= 0x400;

	if ( MipData )
		memcpy ( MipData, &UpdateMipFromJPEG_Parms.MipData, 0xC );
};

// Function Engine.Texture2DDynamic.UpdateMip
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            MipIdx                         ( CPF_Parm )
// TArray< unsigned char >        MipData                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UTexture2DDynamic::UpdateMip ( int MipIdx, TArray< unsigned char >* MipData )
{
	static UFunction* pFnUpdateMip = NULL;

	if ( ! pFnUpdateMip )
		pFnUpdateMip = (UFunction*) UObject::GObjObjects()->Data[ 35059 ];

	UTexture2DDynamic_execUpdateMip_Parms UpdateMip_Parms;
	UpdateMip_Parms.MipIdx = MipIdx;

	pFnUpdateMip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMip, &UpdateMip_Parms, NULL );

	pFnUpdateMip->FunctionFlags |= 0x400;

	if ( MipData )
		memcpy ( MipData, &UpdateMip_Parms.MipData, 0xC );
};

// Function Engine.Texture2DDynamic.Init
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  InIsResolveTarget              ( CPF_OptionalParm | CPF_Parm )

void UTexture2DDynamic::Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 35054 ];

	UTexture2DDynamic_execInit_Parms Init_Parms;
	Init_Parms.InSizeX = InSizeX;
	Init_Parms.InSizeY = InSizeY;
	Init_Parms.InFormat = InFormat;
	Init_Parms.InIsResolveTarget = InIsResolveTarget;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Stop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Stop ( )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 35121 ];

	UTextureMovie_execStop_Parms Stop_Parms;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Pause
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 35120 ];

	UTextureMovie_execPause_Parms Pause_Parms;

	pFnPause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );

	pFnPause->FunctionFlags |= 0x400;
};

// Function Engine.TextureMovie.Play
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UTextureMovie::Play ( )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 35119 ];

	UTextureMovie_execPlay_Parms Play_Parms;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.TextureRenderTarget2D.Create
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UTextureRenderTarget2D*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            InSizeX                        ( CPF_Parm )
// int                            InSizeY                        ( CPF_Parm )
// unsigned char                  InFormat                       ( CPF_OptionalParm | CPF_Parm )
// struct FLinearColor            InClearColor                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOnlyRenderOnce                ( CPF_OptionalParm | CPF_Parm )

class UTextureRenderTarget2D* UTextureRenderTarget2D::Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 32357 ];

	UTextureRenderTarget2D_execCreate_Parms Create_Parms;
	Create_Parms.InSizeX = InSizeX;
	Create_Parms.InSizeY = InSizeY;
	Create_Parms.InFormat = InFormat;
	memcpy ( &Create_Parms.InClearColor, &InClearColor, 0x10 );
	Create_Parms.bOnlyRenderOnce = bOnlyRenderOnce;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;

	return Create_Parms.ReturnValue;
};

// Function Engine.TextureRenderTarget2D.EventResourceUpdated
// [0x00120000] 
// Parameters infos:
// class UTextureRenderTarget2D*  RenderTarget                   ( CPF_Parm )

void UTextureRenderTarget2D::EventResourceUpdated ( class UTextureRenderTarget2D* RenderTarget )
{
	static UFunction* pFnEventResourceUpdated = NULL;

	if ( ! pFnEventResourceUpdated )
		pFnEventResourceUpdated = (UFunction*) UObject::GObjObjects()->Data[ 32364 ];

	UTextureRenderTarget2D_execEventResourceUpdated_Parms EventResourceUpdated_Parms;
	EventResourceUpdated_Parms.RenderTarget = RenderTarget;

	this->ProcessEvent ( pFnEventResourceUpdated, &EventResourceUpdated_Parms, NULL );
};

// Function Engine.ScriptedTexture.Render
// [0x00120000] 
// Parameters infos:
// class UCanvas*                 C                              ( CPF_Parm )

void UScriptedTexture::Render ( class UCanvas* C )
{
	static UFunction* pFnRender = NULL;

	if ( ! pFnRender )
		pFnRender = (UFunction*) UObject::GObjObjects()->Data[ 32367 ];

	UScriptedTexture_execRender_Parms Render_Parms;
	Render_Parms.C = C;

	this->ProcessEvent ( pFnRender, &Render_Parms, NULL );
};

// Function Engine.AudioDevice.FindSoundClass
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USoundClass*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SoundClassName                 ( CPF_Parm )

class USoundClass* UAudioDevice::FindSoundClass ( struct FName SoundClassName )
{
	static UFunction* pFnFindSoundClass = NULL;

	if ( ! pFnFindSoundClass )
		pFnFindSoundClass = (UFunction*) UObject::GObjObjects()->Data[ 13775 ];

	UAudioDevice_execFindSoundClass_Parms FindSoundClass_Parms;
	memcpy ( &FindSoundClass_Parms.SoundClassName, &SoundClassName, 0x8 );

	pFnFindSoundClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSoundClass, &FindSoundClass_Parms, NULL );

	pFnFindSoundClass->FunctionFlags |= 0x400;

	return FindSoundClass_Parms.ReturnValue;
};

// Function Engine.AudioDevice.SetSoundMode
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewModeGroup                   ( CPF_Parm )
// struct FName                   NewModeValue                   ( CPF_OptionalParm | CPF_Parm )

bool UAudioDevice::SetSoundMode ( struct FName NewModeGroup, struct FName NewModeValue )
{
	static UFunction* pFnSetSoundMode = NULL;

	if ( ! pFnSetSoundMode )
		pFnSetSoundMode = (UFunction*) UObject::GObjObjects()->Data[ 12950 ];

	UAudioDevice_execSetSoundMode_Parms SetSoundMode_Parms;
	memcpy ( &SetSoundMode_Parms.NewModeGroup, &NewModeGroup, 0x8 );
	memcpy ( &SetSoundMode_Parms.NewModeValue, &NewModeValue, 0x8 );

	pFnSetSoundMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoundMode, &SetSoundMode_Parms, NULL );

	pFnSetSoundMode->FunctionFlags |= 0x400;

	return SetSoundMode_Parms.ReturnValue;
};

// Function Engine.Scout.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AScout::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 32343 ];

	AScout_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function Engine.Light.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ALight::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 18458 ];

	ALight_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.Light.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ALight::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 18455 ];

	ALight_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PointLightToggleable.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APointLightToggleable_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void APointLightToggleable::ApplyCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 31486 ];

	APointLightToggleable_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PointLightToggleable.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct APointLightToggleable_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void APointLightToggleable::CreateCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 31484 ];

	APointLightToggleable_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.PointLightToggleable.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APointLightToggleable::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 31482 ];

	APointLightToggleable_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.SpotLightToggleable.ApplyCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASpotLightToggleable_FCheckpointRecord Record                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ASpotLightToggleable::ApplyCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnApplyCheckpointRecord = NULL;

	if ( ! pFnApplyCheckpointRecord )
		pFnApplyCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 34267 ];

	ASpotLightToggleable_execApplyCheckpointRecord_Parms ApplyCheckpointRecord_Parms;

	this->ProcessEvent ( pFnApplyCheckpointRecord, &ApplyCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &ApplyCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.SpotLightToggleable.CreateCheckpointRecord
// [0x00420002] 
// Parameters infos:
// struct ASpotLightToggleable_FCheckpointRecord Record                         ( CPF_Parm | CPF_OutParm )

void ASpotLightToggleable::CreateCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record )
{
	static UFunction* pFnCreateCheckpointRecord = NULL;

	if ( ! pFnCreateCheckpointRecord )
		pFnCreateCheckpointRecord = (UFunction*) UObject::GObjObjects()->Data[ 34265 ];

	ASpotLightToggleable_execCreateCheckpointRecord_Parms CreateCheckpointRecord_Parms;

	this->ProcessEvent ( pFnCreateCheckpointRecord, &CreateCheckpointRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &CreateCheckpointRecord_Parms.Record, 0x4 );
};

// Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASpotLightToggleable::ShouldSaveForCheckpoint ( )
{
	static UFunction* pFnShouldSaveForCheckpoint = NULL;

	if ( ! pFnShouldSaveForCheckpoint )
		pFnShouldSaveForCheckpoint = (UFunction*) UObject::GObjObjects()->Data[ 34263 ];

	ASpotLightToggleable_execShouldSaveForCheckpoint_Parms ShouldSaveForCheckpoint_Parms;

	this->ProcessEvent ( pFnShouldSaveForCheckpoint, &ShouldSaveForCheckpoint_Parms, NULL );

	return ShouldSaveForCheckpoint_Parms.ReturnValue;
};

// Function Engine.LightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 18526 ];

	ULightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 18525 ];

	ULightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyOcclusionMaskDarkness ( )
{
	static UFunction* pFnOnUpdatePropertyOcclusionMaskDarkness = NULL;

	if ( ! pFnOnUpdatePropertyOcclusionMaskDarkness )
		pFnOnUpdatePropertyOcclusionMaskDarkness = (UFunction*) UObject::GObjObjects()->Data[ 18524 ];

	ULightComponent_execOnUpdatePropertyOcclusionMaskDarkness_Parms OnUpdatePropertyOcclusionMaskDarkness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyOcclusionMaskDarkness, &OnUpdatePropertyOcclusionMaskDarkness_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyBloomTint
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyBloomTint ( )
{
	static UFunction* pFnOnUpdatePropertyBloomTint = NULL;

	if ( ! pFnOnUpdatePropertyBloomTint )
		pFnOnUpdatePropertyBloomTint = (UFunction*) UObject::GObjObjects()->Data[ 18523 ];

	ULightComponent_execOnUpdatePropertyBloomTint_Parms OnUpdatePropertyBloomTint_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBloomTint, &OnUpdatePropertyBloomTint_Parms, NULL );
};

// Function Engine.LightComponent.OnUpdatePropertyBloomScale
// [0x00020002] 
// Parameters infos:

void ULightComponent::OnUpdatePropertyBloomScale ( )
{
	static UFunction* pFnOnUpdatePropertyBloomScale = NULL;

	if ( ! pFnOnUpdatePropertyBloomScale )
		pFnOnUpdatePropertyBloomScale = (UFunction*) UObject::GObjObjects()->Data[ 18522 ];

	ULightComponent_execOnUpdatePropertyBloomScale_Parms OnUpdatePropertyBloomScale_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBloomScale, &OnUpdatePropertyBloomScale_Parms, NULL );
};

// Function Engine.LightComponent.UpdateLightShaftParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULightComponent::UpdateLightShaftParameters ( )
{
	static UFunction* pFnUpdateLightShaftParameters = NULL;

	if ( ! pFnUpdateLightShaftParameters )
		pFnUpdateLightShaftParameters = (UFunction*) UObject::GObjObjects()->Data[ 18521 ];

	ULightComponent_execUpdateLightShaftParameters_Parms UpdateLightShaftParameters_Parms;

	pFnUpdateLightShaftParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLightShaftParameters, &UpdateLightShaftParameters_Parms, NULL );

	pFnUpdateLightShaftParameters->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.UpdateColorAndBrightness
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ULightComponent::UpdateColorAndBrightness ( )
{
	static UFunction* pFnUpdateColorAndBrightness = NULL;

	if ( ! pFnUpdateColorAndBrightness )
		pFnUpdateColorAndBrightness = (UFunction*) UObject::GObjObjects()->Data[ 18520 ];

	ULightComponent_execUpdateColorAndBrightness_Parms UpdateColorAndBrightness_Parms;

	pFnUpdateColorAndBrightness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateColorAndBrightness, &UpdateColorAndBrightness_Parms, NULL );

	pFnUpdateColorAndBrightness->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.GetDirection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetDirection ( )
{
	static UFunction* pFnGetDirection = NULL;

	if ( ! pFnGetDirection )
		pFnGetDirection = (UFunction*) UObject::GObjObjects()->Data[ 18518 ];

	ULightComponent_execGetDirection_Parms GetDirection_Parms;

	pFnGetDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDirection, &GetDirection_Parms, NULL );

	pFnGetDirection->FunctionFlags |= 0x400;

	return GetDirection_Parms.ReturnValue;
};

// Function Engine.LightComponent.GetOrigin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ULightComponent::GetOrigin ( )
{
	static UFunction* pFnGetOrigin = NULL;

	if ( ! pFnGetOrigin )
		pFnGetOrigin = (UFunction*) UObject::GObjObjects()->Data[ 18516 ];

	ULightComponent_execGetOrigin_Parms GetOrigin_Parms;

	pFnGetOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOrigin, &GetOrigin_Parms, NULL );

	pFnGetOrigin->FunctionFlags |= 0x400;

	return GetOrigin_Parms.ReturnValue;
};

// Function Engine.LightComponent.SetLightProperties
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewBrightness                  ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  NewLightColor                  ( CPF_OptionalParm | CPF_Parm )
// class ULightFunction*          NewLightFunction               ( CPF_OptionalParm | CPF_Parm )

void ULightComponent::SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction )
{
	static UFunction* pFnSetLightProperties = NULL;

	if ( ! pFnSetLightProperties )
		pFnSetLightProperties = (UFunction*) UObject::GObjObjects()->Data[ 18512 ];

	ULightComponent_execSetLightProperties_Parms SetLightProperties_Parms;
	SetLightProperties_Parms.NewBrightness = NewBrightness;
	memcpy ( &SetLightProperties_Parms.NewLightColor, &NewLightColor, 0x4 );
	SetLightProperties_Parms.NewLightFunction = NewLightFunction;

	pFnSetLightProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLightProperties, &SetLightProperties_Parms, NULL );

	pFnSetLightProperties->FunctionFlags |= 0x400;
};

// Function Engine.LightComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bSetEnabled                    ( CPF_Parm )

void ULightComponent::SetEnabled ( unsigned long bSetEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 18457 ];

	ULightComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bSetEnabled = bSetEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void UDirectionalLightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 18533 ];

	UDirectionalLightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void UDirectionalLightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 18532 ];

	UDirectionalLightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.PointLightComponent.OnUpdatePropertyBrightness
// [0x00020002] 
// Parameters infos:

void UPointLightComponent::OnUpdatePropertyBrightness ( )
{
	static UFunction* pFnOnUpdatePropertyBrightness = NULL;

	if ( ! pFnOnUpdatePropertyBrightness )
		pFnOnUpdatePropertyBrightness = (UFunction*) UObject::GObjObjects()->Data[ 18622 ];

	UPointLightComponent_execOnUpdatePropertyBrightness_Parms OnUpdatePropertyBrightness_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyBrightness, &OnUpdatePropertyBrightness_Parms, NULL );
};

// Function Engine.PointLightComponent.OnUpdatePropertyLightColor
// [0x00020002] 
// Parameters infos:

void UPointLightComponent::OnUpdatePropertyLightColor ( )
{
	static UFunction* pFnOnUpdatePropertyLightColor = NULL;

	if ( ! pFnOnUpdatePropertyLightColor )
		pFnOnUpdatePropertyLightColor = (UFunction*) UObject::GObjObjects()->Data[ 18621 ];

	UPointLightComponent_execOnUpdatePropertyLightColor_Parms OnUpdatePropertyLightColor_Parms;

	this->ProcessEvent ( pFnOnUpdatePropertyLightColor, &OnUpdatePropertyLightColor_Parms, NULL );
};

// Function Engine.PointLightComponent.SetTranslation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewTranslation                 ( CPF_Parm )

void UPointLightComponent::SetTranslation ( struct FVector NewTranslation )
{
	static UFunction* pFnSetTranslation = NULL;

	if ( ! pFnSetTranslation )
		pFnSetTranslation = (UFunction*) UObject::GObjObjects()->Data[ 18619 ];

	UPointLightComponent_execSetTranslation_Parms SetTranslation_Parms;
	memcpy ( &SetTranslation_Parms.NewTranslation, &NewTranslation, 0xC );

	pFnSetTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTranslation, &SetTranslation_Parms, NULL );

	pFnSetTranslation->FunctionFlags |= 0x400;
};

// Function Engine.SpotLightComponent.SetRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void USpotLightComponent::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 18631 ];

	USpotLightComponent_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;
};

// Function Engine.LightEnvironmentComponent.IsEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ULightEnvironmentComponent::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15267 ];

	ULightEnvironmentComponent_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function Engine.LightEnvironmentComponent.SetEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewEnabled                    ( CPF_Parm )

void ULightEnvironmentComponent::SetEnabled ( unsigned long bNewEnabled )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = (UFunction*) UObject::GObjObjects()->Data[ 15265 ];

	ULightEnvironmentComponent_execSetEnabled_Parms SetEnabled_Parms;
	SetEnabled_Parms.bNewEnabled = bNewEnabled;

	pFnSetEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );

	pFnSetEnabled->FunctionFlags |= 0x400;
};

// Function Engine.DynamicLightEnvironmentComponent.GetLightIntensity
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FLinearColor UDynamicLightEnvironmentComponent::GetLightIntensity ( )
{
	static UFunction* pFnGetLightIntensity = NULL;

	if ( ! pFnGetLightIntensity )
		pFnGetLightIntensity = (UFunction*) UObject::GObjObjects()->Data[ 15308 ];

	UDynamicLightEnvironmentComponent_execGetLightIntensity_Parms GetLightIntensity_Parms;

	pFnGetLightIntensity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLightIntensity, &GetLightIntensity_Parms, NULL );

	pFnGetLightIntensity->FunctionFlags |= 0x400;

	return GetLightIntensity_Parms.ReturnValue;
};

// Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UDynamicLightEnvironmentComponent::ResetEnvironment ( )
{
	static UFunction* pFnResetEnvironment = NULL;

	if ( ! pFnResetEnvironment )
		pFnResetEnvironment = (UFunction*) UObject::GObjObjects()->Data[ 15307 ];

	UDynamicLightEnvironmentComponent_execResetEnvironment_Parms ResetEnvironment_Parms;

	pFnResetEnvironment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetEnvironment, &ResetEnvironment_Parms, NULL );

	pFnResetEnvironment->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetSocketOrBoneWorldLocationAndRotation
// [0x00424003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SocketOrBoneName               ( CPF_Parm )
// struct FVector                 OutLoc                         ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// struct FRotator                OutRot                         ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetSocketOrBoneWorldLocationAndRotation ( struct FName SocketOrBoneName, struct FVector* OutLoc, struct FRotator* OutRot )
{
	static UFunction* pFnGetSocketOrBoneWorldLocationAndRotation = NULL;

	if ( ! pFnGetSocketOrBoneWorldLocationAndRotation )
		pFnGetSocketOrBoneWorldLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 10782 ];

	USkeletalMeshComponent_execGetSocketOrBoneWorldLocationAndRotation_Parms GetSocketOrBoneWorldLocationAndRotation_Parms;
	memcpy ( &GetSocketOrBoneWorldLocationAndRotation_Parms.SocketOrBoneName, &SocketOrBoneName, 0x8 );

	this->ProcessEvent ( pFnGetSocketOrBoneWorldLocationAndRotation, &GetSocketOrBoneWorldLocationAndRotation_Parms, NULL );

	if ( OutLoc )
		memcpy ( OutLoc, &GetSocketOrBoneWorldLocationAndRotation_Parms.OutLoc, 0xC );

	if ( OutRot )
		memcpy ( OutRot, &GetSocketOrBoneWorldLocationAndRotation_Parms.OutRot, 0xC );

	return GetSocketOrBoneWorldLocationAndRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.SetMaterial
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ElementIndex                   ( CPF_Parm )
// class UMaterialInterface*      Material                       ( CPF_Parm )

void USkeletalMeshComponent::SetMaterial ( int ElementIndex, class UMaterialInterface* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 10779 ];

	USkeletalMeshComponent_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.ElementIndex = ElementIndex;
	SetMaterial_Parms.Material = Material;

	pFnSetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );

	pFnSetMaterial->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator USkeletalMeshComponent::GetRotation ( )
{
	static UFunction* pFnGetRotation = NULL;

	if ( ! pFnGetRotation )
		pFnGetRotation = (UFunction*) UObject::GObjObjects()->Data[ 10777 ];

	USkeletalMeshComponent_execGetRotation_Parms GetRotation_Parms;

	pFnGetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotation, &GetRotation_Parms, NULL );

	pFnGetRotation->FunctionFlags |= 0x400;

	return GetRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USkeletalMeshComponent::GetPosition ( )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 10775 ];

	USkeletalMeshComponent_execGetPosition_Parms GetPosition_Parms;

	pFnGetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	pFnGetPosition->FunctionFlags |= 0x400;

	return GetPosition_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.BreakConstraint
// [0x00024103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 Impulse                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FName                   InBoneName                     ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::BreakConstraint ( struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName, unsigned long bVelChange )
{
	static UFunction* pFnBreakConstraint = NULL;

	if ( ! pFnBreakConstraint )
		pFnBreakConstraint = (UFunction*) UObject::GObjObjects()->Data[ 10751 ];

	USkeletalMeshComponent_execBreakConstraint_Parms BreakConstraint_Parms;
	memcpy ( &BreakConstraint_Parms.Impulse, &Impulse, 0xC );
	memcpy ( &BreakConstraint_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &BreakConstraint_Parms.InBoneName, &InBoneName, 0x8 );
	BreakConstraint_Parms.bVelChange = bVelChange;

	this->ProcessEvent ( pFnBreakConstraint, &BreakConstraint_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished
// [0x00020102] 
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::SkelMeshCompOnParticleSystemFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnSkelMeshCompOnParticleSystemFinished = NULL;

	if ( ! pFnSkelMeshCompOnParticleSystemFinished )
		pFnSkelMeshCompOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 10749 ];

	USkeletalMeshComponent_execSkelMeshCompOnParticleSystemFinished_Parms SkelMeshCompOnParticleSystemFinished_Parms;
	SkelMeshCompOnParticleSystemFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnSkelMeshCompOnParticleSystemFinished, &SkelMeshCompOnParticleSystemFinished_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.PlayParticleEffect
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 ( CPF_Const | CPF_Parm )

bool USkeletalMeshComponent::eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = (UFunction*) UObject::GObjObjects()->Data[ 10721 ];

	USkeletalMeshComponent_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;
	PlayParticleEffect_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );

	return PlayParticleEffect_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.CreateForceField
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNotify_ForceField*  AnimNotifyData                 ( CPF_Const | CPF_Parm )

bool USkeletalMeshComponent::eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData )
{
	static UFunction* pFnCreateForceField = NULL;

	if ( ! pFnCreateForceField )
		pFnCreateForceField = (UFunction*) UObject::GObjObjects()->Data[ 10714 ];

	USkeletalMeshComponent_eventCreateForceField_Parms CreateForceField_Parms;
	CreateForceField_Parms.AnimNotifyData = AnimNotifyData;

	this->ProcessEvent ( pFnCreateForceField, &CreateForceField_Parms, NULL );

	return CreateForceField_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.StopAnim
// [0x00020002] 
// Parameters infos:

void USkeletalMeshComponent::StopAnim ( )
{
	static UFunction* pFnStopAnim = NULL;

	if ( ! pFnStopAnim )
		pFnStopAnim = (UFunction*) UObject::GObjObjects()->Data[ 10712 ];

	USkeletalMeshComponent_execStopAnim_Parms StopAnim_Parms;

	this->ProcessEvent ( pFnStopAnim, &StopAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.PlayAnim
// [0x00024002] 
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRestartIfAlreadyPlaying       ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPlayBackwards                 ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying, float StartTime, unsigned long bPlayBackwards )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 10694 ];

	USkeletalMeshComponent_execPlayAnim_Parms PlayAnim_Parms;
	memcpy ( &PlayAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayAnim_Parms.Duration = Duration;
	PlayAnim_Parms.bLoop = bLoop;
	PlayAnim_Parms.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;
	PlayAnim_Parms.StartTime = StartTime;
	PlayAnim_Parms.bPlayBackwards = bPlayBackwards;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );
};

// Function Engine.SkeletalMeshComponent.CreateAnimTree
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::CreateAnimTree ( )
{
	static UFunction* pFnCreateAnimTree = NULL;

	if ( ! pFnCreateAnimTree )
		pFnCreateAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 10693 ];

	USkeletalMeshComponent_execCreateAnimTree_Parms CreateAnimTree_Parms;

	pFnCreateAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateAnimTree, &CreateAnimTree_Parms, NULL );

	pFnCreateAnimTree->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ShowMaterialSection
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            MaterialID                     ( CPF_Parm )
// unsigned long                  bShow                          ( CPF_Parm )
// int                            LODIndex                       ( CPF_Parm )

void USkeletalMeshComponent::ShowMaterialSection ( int MaterialID, unsigned long bShow, int LODIndex )
{
	static UFunction* pFnShowMaterialSection = NULL;

	if ( ! pFnShowMaterialSection )
		pFnShowMaterialSection = (UFunction*) UObject::GObjObjects()->Data[ 10689 ];

	USkeletalMeshComponent_execShowMaterialSection_Parms ShowMaterialSection_Parms;
	ShowMaterialSection_Parms.MaterialID = MaterialID;
	ShowMaterialSection_Parms.bShow = bShow;
	ShowMaterialSection_Parms.LODIndex = LODIndex;

	pFnShowMaterialSection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMaterialSection, &ShowMaterialSection_Parms, NULL );

	pFnShowMaterialSection->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateMeshForBrokenConstraints ( )
{
	static UFunction* pFnUpdateMeshForBrokenConstraints = NULL;

	if ( ! pFnUpdateMeshForBrokenConstraints )
		pFnUpdateMeshForBrokenConstraints = (UFunction*) UObject::GObjObjects()->Data[ 10688 ];

	USkeletalMeshComponent_execUpdateMeshForBrokenConstraints_Parms UpdateMeshForBrokenConstraints_Parms;

	pFnUpdateMeshForBrokenConstraints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMeshForBrokenConstraints, &UpdateMeshForBrokenConstraints_Parms, NULL );

	pFnUpdateMeshForBrokenConstraints->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UnHideBoneByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::UnHideBoneByName ( struct FName BoneName )
{
	static UFunction* pFnUnHideBoneByName = NULL;

	if ( ! pFnUnHideBoneByName )
		pFnUnHideBoneByName = (UFunction*) UObject::GObjObjects()->Data[ 10686 ];

	USkeletalMeshComponent_execUnHideBoneByName_Parms UnHideBoneByName_Parms;
	memcpy ( &UnHideBoneByName_Parms.BoneName, &BoneName, 0x8 );

	pFnUnHideBoneByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnHideBoneByName, &UnHideBoneByName_Parms, NULL );

	pFnUnHideBoneByName->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.HideBoneByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned char                  PhysBodyOption                 ( CPF_Parm )

void USkeletalMeshComponent::HideBoneByName ( struct FName BoneName, unsigned char PhysBodyOption )
{
	static UFunction* pFnHideBoneByName = NULL;

	if ( ! pFnHideBoneByName )
		pFnHideBoneByName = (UFunction*) UObject::GObjObjects()->Data[ 10683 ];

	USkeletalMeshComponent_execHideBoneByName_Parms HideBoneByName_Parms;
	memcpy ( &HideBoneByName_Parms.BoneName, &BoneName, 0x8 );
	HideBoneByName_Parms.PhysBodyOption = PhysBodyOption;

	pFnHideBoneByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBoneByName, &HideBoneByName_Parms, NULL );

	pFnHideBoneByName->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsBoneHidden
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

bool USkeletalMeshComponent::IsBoneHidden ( int BoneIndex )
{
	static UFunction* pFnIsBoneHidden = NULL;

	if ( ! pFnIsBoneHidden )
		pFnIsBoneHidden = (UFunction*) UObject::GObjObjects()->Data[ 10680 ];

	USkeletalMeshComponent_execIsBoneHidden_Parms IsBoneHidden_Parms;
	IsBoneHidden_Parms.BoneIndex = BoneIndex;

	pFnIsBoneHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsBoneHidden, &IsBoneHidden_Parms, NULL );

	pFnIsBoneHidden->FunctionFlags |= 0x400;

	return IsBoneHidden_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UnHideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )

void USkeletalMeshComponent::UnHideBone ( int BoneIndex )
{
	static UFunction* pFnUnHideBone = NULL;

	if ( ! pFnUnHideBone )
		pFnUnHideBone = (UFunction*) UObject::GObjObjects()->Data[ 10678 ];

	USkeletalMeshComponent_execUnHideBone_Parms UnHideBone_Parms;
	UnHideBone_Parms.BoneIndex = BoneIndex;

	pFnUnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnHideBone, &UnHideBone_Parms, NULL );

	pFnUnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.HideBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            BoneIndex                      ( CPF_Parm )
// unsigned char                  PhysBodyOption                 ( CPF_Parm )

void USkeletalMeshComponent::HideBone ( int BoneIndex, unsigned char PhysBodyOption )
{
	static UFunction* pFnHideBone = NULL;

	if ( ! pFnHideBone )
		pFnHideBone = (UFunction*) UObject::GObjObjects()->Data[ 10675 ];

	USkeletalMeshComponent_execHideBone_Parms HideBone_Parms;
	HideBone_Parms.BoneIndex = BoneIndex;
	HideBone_Parms.PhysBodyOption = PhysBodyOption;

	pFnHideBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBone, &HideBone_Parms, NULL );

	pFnHideBone->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          FirstValue                     ( CPF_Parm )
// float                          FirstInterpDuration            ( CPF_Parm )
// float                          NextValue                      ( CPF_Parm )
// float                          NextInterpDuration             ( CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration )
{
	static UFunction* pFnSetFaceFXRegisterEx = NULL;

	if ( ! pFnSetFaceFXRegisterEx )
		pFnSetFaceFXRegisterEx = (UFunction*) UObject::GObjObjects()->Data[ 10668 ];

	USkeletalMeshComponent_execSetFaceFXRegisterEx_Parms SetFaceFXRegisterEx_Parms;
	memcpy ( &SetFaceFXRegisterEx_Parms.RegName, &RegName, 0xC );
	SetFaceFXRegisterEx_Parms.RegOp = RegOp;
	SetFaceFXRegisterEx_Parms.FirstValue = FirstValue;
	SetFaceFXRegisterEx_Parms.FirstInterpDuration = FirstInterpDuration;
	SetFaceFXRegisterEx_Parms.NextValue = NextValue;
	SetFaceFXRegisterEx_Parms.NextInterpDuration = NextInterpDuration;

	pFnSetFaceFXRegisterEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegisterEx, &SetFaceFXRegisterEx_Parms, NULL );

	pFnSetFaceFXRegisterEx->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )
// float                          RegVal                         ( CPF_Parm )
// unsigned char                  RegOp                          ( CPF_Parm )
// float                          InterpDuration                 ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration )
{
	static UFunction* pFnSetFaceFXRegister = NULL;

	if ( ! pFnSetFaceFXRegister )
		pFnSetFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 10663 ];

	USkeletalMeshComponent_execSetFaceFXRegister_Parms SetFaceFXRegister_Parms;
	memcpy ( &SetFaceFXRegister_Parms.RegName, &RegName, 0xC );
	SetFaceFXRegister_Parms.RegVal = RegVal;
	SetFaceFXRegister_Parms.RegOp = RegOp;
	SetFaceFXRegister_Parms.InterpDuration = InterpDuration;

	pFnSetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFaceFXRegister, &SetFaceFXRegister_Parms, NULL );

	pFnSetFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )

float USkeletalMeshComponent::GetFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnGetFaceFXRegister = NULL;

	if ( ! pFnGetFaceFXRegister )
		pFnGetFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 10660 ];

	USkeletalMeshComponent_execGetFaceFXRegister_Parms GetFaceFXRegister_Parms;
	memcpy ( &GetFaceFXRegister_Parms.RegName, &RegName, 0xC );

	pFnGetFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaceFXRegister, &GetFaceFXRegister_Parms, NULL );

	pFnGetFaceFXRegister->FunctionFlags |= 0x400;

	return GetFaceFXRegister_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 RegName                        ( CPF_Parm | CPF_NeedCtorLink )

void USkeletalMeshComponent::DeclareFaceFXRegister ( struct FString RegName )
{
	static UFunction* pFnDeclareFaceFXRegister = NULL;

	if ( ! pFnDeclareFaceFXRegister )
		pFnDeclareFaceFXRegister = (UFunction*) UObject::GObjObjects()->Data[ 10658 ];

	USkeletalMeshComponent_execDeclareFaceFXRegister_Parms DeclareFaceFXRegister_Parms;
	memcpy ( &DeclareFaceFXRegister_Parms.RegName, &RegName, 0xC );

	pFnDeclareFaceFXRegister->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeclareFaceFXRegister, &DeclareFaceFXRegister_Parms, NULL );

	pFnDeclareFaceFXRegister->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USkeletalMeshComponent::IsPlayingFaceFXAnim ( )
{
	static UFunction* pFnIsPlayingFaceFXAnim = NULL;

	if ( ! pFnIsPlayingFaceFXAnim )
		pFnIsPlayingFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 10656 ];

	USkeletalMeshComponent_execIsPlayingFaceFXAnim_Parms IsPlayingFaceFXAnim_Parms;

	pFnIsPlayingFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlayingFaceFXAnim, &IsPlayingFaceFXAnim_Parms, NULL );

	pFnIsPlayingFaceFXAnim->FunctionFlags |= 0x400;

	return IsPlayingFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::StopFaceFXAnim ( )
{
	static UFunction* pFnStopFaceFXAnim = NULL;

	if ( ! pFnStopFaceFXAnim )
		pFnStopFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 10655 ];

	USkeletalMeshComponent_execStopFaceFXAnim_Parms StopFaceFXAnim_Parms;

	pFnStopFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopFaceFXAnim, &StopFaceFXAnim_Parms, NULL );

	pFnStopFaceFXAnim->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UFaceFXAnimSet*          FaceFXAnimSetRef               ( CPF_Parm )
// struct FString                 AnimName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 GroupName                      ( CPF_Parm | CPF_NeedCtorLink )
// class USoundCue*               SoundCueToPlay                 ( CPF_Parm )
// class UAkEvent*                AkEventToPlay                  ( CPF_Parm )

bool USkeletalMeshComponent::PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay )
{
	static UFunction* pFnPlayFaceFXAnim = NULL;

	if ( ! pFnPlayFaceFXAnim )
		pFnPlayFaceFXAnim = (UFunction*) UObject::GObjObjects()->Data[ 10648 ];

	USkeletalMeshComponent_execPlayFaceFXAnim_Parms PlayFaceFXAnim_Parms;
	PlayFaceFXAnim_Parms.FaceFXAnimSetRef = FaceFXAnimSetRef;
	memcpy ( &PlayFaceFXAnim_Parms.AnimName, &AnimName, 0xC );
	memcpy ( &PlayFaceFXAnim_Parms.GroupName, &GroupName, 0xC );
	PlayFaceFXAnim_Parms.SoundCueToPlay = SoundCueToPlay;
	PlayFaceFXAnim_Parms.AkEventToPlay = AkEventToPlay;

	pFnPlayFaceFXAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFaceFXAnim, &PlayFaceFXAnim_Parms, NULL );

	pFnPlayFaceFXAnim->FunctionFlags |= 0x400;

	return PlayFaceFXAnim_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )
// int                            LODIdx                         ( CPF_Parm )

void USkeletalMeshComponent::ToggleInstanceVertexWeights ( unsigned long bEnable, int LODIdx )
{
	static UFunction* pFnToggleInstanceVertexWeights = NULL;

	if ( ! pFnToggleInstanceVertexWeights )
		pFnToggleInstanceVertexWeights = (UFunction*) UObject::GObjObjects()->Data[ 10645 ];

	USkeletalMeshComponent_execToggleInstanceVertexWeights_Parms ToggleInstanceVertexWeights_Parms;
	ToggleInstanceVertexWeights_Parms.bEnable = bEnable;
	ToggleInstanceVertexWeights_Parms.LODIdx = LODIdx;

	pFnToggleInstanceVertexWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnToggleInstanceVertexWeights, &ToggleInstanceVertexWeights_Parms, NULL );

	pFnToggleInstanceVertexWeights->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FBonePair >     BonePairs                      ( CPF_Parm | CPF_NeedCtorLink )

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs )
{
	static UFunction* pFnUpdateInstanceVertexWeightBones = NULL;

	if ( ! pFnUpdateInstanceVertexWeightBones )
		pFnUpdateInstanceVertexWeightBones = (UFunction*) UObject::GObjObjects()->Data[ 10642 ];

	USkeletalMeshComponent_execUpdateInstanceVertexWeightBones_Parms UpdateInstanceVertexWeightBones_Parms;
	memcpy ( &UpdateInstanceVertexWeightBones_Parms.BonePairs, &BonePairs, 0xC );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateInstanceVertexWeightBones, &UpdateInstanceVertexWeightBones_Parms, NULL );

	pFnUpdateInstanceVertexWeightBones->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBonePair               Bones                          ( CPF_Parm )

int USkeletalMeshComponent::FindInstanceVertexweightBonePair ( struct FBonePair Bones )
{
	static UFunction* pFnFindInstanceVertexweightBonePair = NULL;

	if ( ! pFnFindInstanceVertexweightBonePair )
		pFnFindInstanceVertexweightBonePair = (UFunction*) UObject::GObjObjects()->Data[ 10636 ];

	USkeletalMeshComponent_execFindInstanceVertexweightBonePair_Parms FindInstanceVertexweightBonePair_Parms;
	memcpy ( &FindInstanceVertexweightBonePair_Parms.Bones, &Bones, 0x10 );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindInstanceVertexweightBonePair, &FindInstanceVertexweightBonePair_Parms, NULL );

	pFnFindInstanceVertexweightBonePair->FunctionFlags |= 0x400;

	return FindInstanceVertexweightBonePair_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented ( struct FName BoneName )
{
	static UFunction* pFnRemoveInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnRemoveInstanceVertexWeightBoneParented )
		pFnRemoveInstanceVertexWeightBoneParented = (UFunction*) UObject::GObjObjects()->Data[ 10634 ];

	USkeletalMeshComponent_execRemoveInstanceVertexWeightBoneParented_Parms RemoveInstanceVertexWeightBoneParented_Parms;
	memcpy ( &RemoveInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveInstanceVertexWeightBoneParented, &RemoveInstanceVertexWeightBoneParented_Parms, NULL );

	pFnRemoveInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned long                  bPairWithParent                ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented ( struct FName BoneName, unsigned long bPairWithParent )
{
	static UFunction* pFnAddInstanceVertexWeightBoneParented = NULL;

	if ( ! pFnAddInstanceVertexWeightBoneParented )
		pFnAddInstanceVertexWeightBoneParented = (UFunction*) UObject::GObjObjects()->Data[ 10631 ];

	USkeletalMeshComponent_execAddInstanceVertexWeightBoneParented_Parms AddInstanceVertexWeightBoneParented_Parms;
	memcpy ( &AddInstanceVertexWeightBoneParented_Parms.BoneName, &BoneName, 0x8 );
	AddInstanceVertexWeightBoneParented_Parms.bPairWithParent = bPairWithParent;

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddInstanceVertexWeightBoneParented, &AddInstanceVertexWeightBoneParented_Parms, NULL );

	pFnAddInstanceVertexWeightBoneParented->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Origin                         ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )
// int                            TraceFlags                     ( CPF_Parm )
// TArray< struct FName >         out_Bones                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USkeletalMeshComponent::GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones )
{
	static UFunction* pFnGetBonesWithinRadius = NULL;

	if ( ! pFnGetBonesWithinRadius )
		pFnGetBonesWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 10624 ];

	USkeletalMeshComponent_execGetBonesWithinRadius_Parms GetBonesWithinRadius_Parms;
	memcpy ( &GetBonesWithinRadius_Parms.Origin, &Origin, 0xC );
	GetBonesWithinRadius_Parms.Radius = Radius;
	GetBonesWithinRadius_Parms.TraceFlags = TraceFlags;

	pFnGetBonesWithinRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBonesWithinRadius, &GetBonesWithinRadius_Parms, NULL );

	pFnGetBonesWithinRadius->FunctionFlags |= 0x400;

	if ( out_Bones )
		memcpy ( out_Bones, &GetBonesWithinRadius_Parms.out_Bones, 0xC );

	return GetBonesWithinRadius_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.UpdateAnimations
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateAnimations ( )
{
	static UFunction* pFnUpdateAnimations = NULL;

	if ( ! pFnUpdateAnimations )
		pFnUpdateAnimations = (UFunction*) UObject::GObjObjects()->Data[ 10623 ];

	USkeletalMeshComponent_execUpdateAnimations_Parms UpdateAnimations_Parms;

	pFnUpdateAnimations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAnimations, &UpdateAnimations_Parms, NULL );

	pFnUpdateAnimations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ForceSkelUpdate ( )
{
	static UFunction* pFnForceSkelUpdate = NULL;

	if ( ! pFnForceSkelUpdate )
		pFnForceSkelUpdate = (UFunction*) UObject::GObjObjects()->Data[ 10622 ];

	USkeletalMeshComponent_execForceSkelUpdate_Parms ForceSkelUpdate_Parms;

	pFnForceSkelUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSkelUpdate, &ForceSkelUpdate_Parms, NULL );

	pFnForceSkelUpdate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bMoveUnfixedBodies             ( CPF_Parm )
// unsigned long                  bTeleport                      ( CPF_Parm )

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport )
{
	static UFunction* pFnUpdateRBBonesFromSpaceBases = NULL;

	if ( ! pFnUpdateRBBonesFromSpaceBases )
		pFnUpdateRBBonesFromSpaceBases = (UFunction*) UObject::GObjObjects()->Data[ 10619 ];

	USkeletalMeshComponent_execUpdateRBBonesFromSpaceBases_Parms UpdateRBBonesFromSpaceBases_Parms;
	UpdateRBBonesFromSpaceBases_Parms.bMoveUnfixedBodies = bMoveUnfixedBodies;
	UpdateRBBonesFromSpaceBases_Parms.bTeleport = bTeleport;

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRBBonesFromSpaceBases, &UpdateRBBonesFromSpaceBases_Parms, NULL );

	pFnUpdateRBBonesFromSpaceBases->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bHasInstance                   ( CPF_Parm )
// unsigned long                  bUseCurrentPosition            ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetHasPhysicsAssetInstance ( unsigned long bHasInstance, unsigned long bUseCurrentPosition )
{
	static UFunction* pFnSetHasPhysicsAssetInstance = NULL;

	if ( ! pFnSetHasPhysicsAssetInstance )
		pFnSetHasPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 10616 ];

	USkeletalMeshComponent_execSetHasPhysicsAssetInstance_Parms SetHasPhysicsAssetInstance_Parms;
	SetHasPhysicsAssetInstance_Parms.bHasInstance = bHasInstance;
	SetHasPhysicsAssetInstance_Parms.bUseCurrentPosition = bUseCurrentPosition;

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHasPhysicsAssetInstance, &SetHasPhysicsAssetInstance_Parms, NULL );

	pFnSetHasPhysicsAssetInstance->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class URB_BodyInstance*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed ( struct FName BoneName )
{
	static UFunction* pFnFindBodyInstanceNamed = NULL;

	if ( ! pFnFindBodyInstanceNamed )
		pFnFindBodyInstanceNamed = (UFunction*) UObject::GObjObjects()->Data[ 10613 ];

	USkeletalMeshComponent_execFindBodyInstanceNamed_Parms FindBodyInstanceNamed_Parms;
	memcpy ( &FindBodyInstanceNamed_Parms.BoneName, &BoneName, 0x8 );

	pFnFindBodyInstanceNamed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBodyInstanceNamed, &FindBodyInstanceNamed_Parms, NULL );

	pFnFindBodyInstanceNamed->FunctionFlags |= 0x400;

	return FindBodyInstanceNamed_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ConstraintIndex                ( CPF_Parm )

struct FName USkeletalMeshComponent::FindConstraintBoneName ( int ConstraintIndex )
{
	static UFunction* pFnFindConstraintBoneName = NULL;

	if ( ! pFnFindConstraintBoneName )
		pFnFindConstraintBoneName = (UFunction*) UObject::GObjObjects()->Data[ 10610 ];

	USkeletalMeshComponent_execFindConstraintBoneName_Parms FindConstraintBoneName_Parms;
	FindConstraintBoneName_Parms.ConstraintIndex = ConstraintIndex;

	pFnFindConstraintBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintBoneName, &FindConstraintBoneName_Parms, NULL );

	pFnFindConstraintBoneName->FunctionFlags |= 0x400;

	return FindConstraintBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ConstraintName                 ( CPF_Parm )

int USkeletalMeshComponent::FindConstraintIndex ( struct FName ConstraintName )
{
	static UFunction* pFnFindConstraintIndex = NULL;

	if ( ! pFnFindConstraintIndex )
		pFnFindConstraintIndex = (UFunction*) UObject::GObjObjects()->Data[ 10607 ];

	USkeletalMeshComponent_execFindConstraintIndex_Parms FindConstraintIndex_Parms;
	memcpy ( &FindConstraintIndex_Parms.ConstraintName, &ConstraintName, 0x8 );

	pFnFindConstraintIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindConstraintIndex, &FindConstraintIndex_Parms, NULL );

	pFnFindConstraintIndex->FunctionFlags |= 0x400;

	return FindConstraintIndex_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.InitMorphTargets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitMorphTargets ( )
{
	static UFunction* pFnInitMorphTargets = NULL;

	if ( ! pFnInitMorphTargets )
		pFnInitMorphTargets = (UFunction*) UObject::GObjObjects()->Data[ 10606 ];

	USkeletalMeshComponent_execInitMorphTargets_Parms InitMorphTargets_Parms;

	pFnInitMorphTargets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitMorphTargets, &InitMorphTargets_Parms, NULL );

	pFnInitMorphTargets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.InitSkelControls
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::InitSkelControls ( )
{
	static UFunction* pFnInitSkelControls = NULL;

	if ( ! pFnInitSkelControls )
		pFnInitSkelControls = (UFunction*) UObject::GObjObjects()->Data[ 10605 ];

	USkeletalMeshComponent_execInitSkelControls_Parms InitSkelControls_Parms;

	pFnInitSkelControls->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSkelControls, &InitSkelControls_Parms, NULL );

	pFnInitSkelControls->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateParentBoneMap ( )
{
	static UFunction* pFnUpdateParentBoneMap = NULL;

	if ( ! pFnUpdateParentBoneMap )
		pFnUpdateParentBoneMap = (UFunction*) UObject::GObjObjects()->Data[ 10604 ];

	USkeletalMeshComponent_execUpdateParentBoneMap_Parms UpdateParentBoneMap_Parms;

	pFnUpdateParentBoneMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateParentBoneMap, &UpdateParentBoneMap_Parms, NULL );

	pFnUpdateParentBoneMap->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  NewParentAnimComp              ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp )
{
	static UFunction* pFnSetParentAnimComponent = NULL;

	if ( ! pFnSetParentAnimComponent )
		pFnSetParentAnimComponent = (UFunction*) UObject::GObjObjects()->Data[ 10602 ];

	USkeletalMeshComponent_execSetParentAnimComponent_Parms SetParentAnimComponent_Parms;
	SetParentAnimComponent_Parms.NewParentAnimComp = NewParentAnimComp;

	pFnSetParentAnimComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetParentAnimComponent, &SetParentAnimComponent_Parms, NULL );

	pFnSetParentAnimComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimTree*               NewTemplate                    ( CPF_Parm )

void USkeletalMeshComponent::SetAnimTreeTemplate ( class UAnimTree* NewTemplate )
{
	static UFunction* pFnSetAnimTreeTemplate = NULL;

	if ( ! pFnSetAnimTreeTemplate )
		pFnSetAnimTreeTemplate = (UFunction*) UObject::GObjObjects()->Data[ 10600 ];

	USkeletalMeshComponent_execSetAnimTreeTemplate_Parms SetAnimTreeTemplate_Parms;
	SetAnimTreeTemplate_Parms.NewTemplate = NewTemplate;

	pFnSetAnimTreeTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimTreeTemplate, &SetAnimTreeTemplate_Parms, NULL );

	pFnSetAnimTreeTemplate->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// unsigned long                  bCheckZeroExtent               ( CPF_Parm )
// unsigned long                  bCheckNonZeroExtent            ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent )
{
	static UFunction* pFnGetClosestCollidingBoneLocation = NULL;

	if ( ! pFnGetClosestCollidingBoneLocation )
		pFnGetClosestCollidingBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 10595 ];

	USkeletalMeshComponent_execGetClosestCollidingBoneLocation_Parms GetClosestCollidingBoneLocation_Parms;
	memcpy ( &GetClosestCollidingBoneLocation_Parms.TestLocation, &TestLocation, 0xC );
	GetClosestCollidingBoneLocation_Parms.bCheckZeroExtent = bCheckZeroExtent;
	GetClosestCollidingBoneLocation_Parms.bCheckNonZeroExtent = bCheckNonZeroExtent;

	pFnGetClosestCollidingBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestCollidingBoneLocation, &GetClosestCollidingBoneLocation_Parms, NULL );

	pFnGetClosestCollidingBoneLocation->FunctionFlags |= 0x400;

	return GetClosestCollidingBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindClosestBone
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          IgnoreScale                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 BoneLocation                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

struct FName USkeletalMeshComponent::FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation )
{
	static UFunction* pFnFindClosestBone = NULL;

	if ( ! pFnFindClosestBone )
		pFnFindClosestBone = (UFunction*) UObject::GObjObjects()->Data[ 10590 ];

	USkeletalMeshComponent_execFindClosestBone_Parms FindClosestBone_Parms;
	memcpy ( &FindClosestBone_Parms.TestLocation, &TestLocation, 0xC );
	FindClosestBone_Parms.IgnoreScale = IgnoreScale;

	pFnFindClosestBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClosestBone, &FindClosestBone_Parms, NULL );

	pFnFindClosestBone->FunctionFlags |= 0x400;

	if ( BoneLocation )
		memcpy ( BoneLocation, &FindClosestBone_Parms.BoneLocation, 0xC );

	return FindClosestBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformFromBoneSpace = NULL;

	if ( ! pFnTransformFromBoneSpace )
		pFnTransformFromBoneSpace = (UFunction*) UObject::GObjObjects()->Data[ 10584 ];

	USkeletalMeshComponent_execTransformFromBoneSpace_Parms TransformFromBoneSpace_Parms;
	memcpy ( &TransformFromBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformFromBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformFromBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformFromBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformFromBoneSpace, &TransformFromBoneSpace_Parms, NULL );

	pFnTransformFromBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformFromBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformFromBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 InPosition                     ( CPF_Parm )
// struct FRotator                InRotation                     ( CPF_Parm )
// struct FVector                 OutPosition                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation )
{
	static UFunction* pFnTransformToBoneSpace = NULL;

	if ( ! pFnTransformToBoneSpace )
		pFnTransformToBoneSpace = (UFunction*) UObject::GObjObjects()->Data[ 10578 ];

	USkeletalMeshComponent_execTransformToBoneSpace_Parms TransformToBoneSpace_Parms;
	memcpy ( &TransformToBoneSpace_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &TransformToBoneSpace_Parms.InPosition, &InPosition, 0xC );
	memcpy ( &TransformToBoneSpace_Parms.InRotation, &InRotation, 0xC );

	pFnTransformToBoneSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransformToBoneSpace, &TransformToBoneSpace_Parms, NULL );

	pFnTransformToBoneSpace->FunctionFlags |= 0x400;

	if ( OutPosition )
		memcpy ( OutPosition, &TransformToBoneSpace_Parms.OutPosition, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &TransformToBoneSpace_Parms.OutRotation, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetBoneAxis
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// unsigned char                  Axis                           ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneAxis ( struct FName BoneName, unsigned char Axis )
{
	static UFunction* pFnGetBoneAxis = NULL;

	if ( ! pFnGetBoneAxis )
		pFnGetBoneAxis = (UFunction*) UObject::GObjObjects()->Data[ 10573 ];

	USkeletalMeshComponent_execGetBoneAxis_Parms GetBoneAxis_Parms;
	memcpy ( &GetBoneAxis_Parms.BoneName, &BoneName, 0x8 );
	GetBoneAxis_Parms.Axis = Axis;

	pFnGetBoneAxis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneAxis, &GetBoneAxis_Parms, NULL );

	pFnGetBoneAxis->FunctionFlags |= 0x400;

	return GetBoneAxis_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetComposedRefPosePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetComposedRefPosePosition ( struct FName BoneName )
{
	static UFunction* pFnGetComposedRefPosePosition = NULL;

	if ( ! pFnGetComposedRefPosePosition )
		pFnGetComposedRefPosePosition = (UFunction*) UObject::GObjObjects()->Data[ 10577 ];

	USkeletalMeshComponent_execGetComposedRefPosePosition_Parms GetComposedRefPosePosition_Parms;
	memcpy ( &GetComposedRefPosePosition_Parms.BoneName, &BoneName, 0x8 );

	pFnGetComposedRefPosePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetComposedRefPosePosition, &GetComposedRefPosePosition_Parms, NULL );

	pFnGetComposedRefPosePosition->FunctionFlags |= 0x400;

	return GetComposedRefPosePosition_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetRefPosePosition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FVector USkeletalMeshComponent::GetRefPosePosition ( int BoneIndex )
{
	static UFunction* pFnGetRefPosePosition = NULL;

	if ( ! pFnGetRefPosePosition )
		pFnGetRefPosePosition = (UFunction*) UObject::GObjObjects()->Data[ 10570 ];

	USkeletalMeshComponent_execGetRefPosePosition_Parms GetRefPosePosition_Parms;
	GetRefPosePosition_Parms.BoneIndex = BoneIndex;

	pFnGetRefPosePosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRefPosePosition, &GetRefPosePosition_Parms, NULL );

	pFnGetRefPosePosition->FunctionFlags |= 0x400;

	return GetRefPosePosition_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.BoneIsChildOf
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FName                   ParentBoneName                 ( CPF_Parm )

bool USkeletalMeshComponent::BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName )
{
	static UFunction* pFnBoneIsChildOf = NULL;

	if ( ! pFnBoneIsChildOf )
		pFnBoneIsChildOf = (UFunction*) UObject::GObjObjects()->Data[ 10566 ];

	USkeletalMeshComponent_execBoneIsChildOf_Parms BoneIsChildOf_Parms;
	memcpy ( &BoneIsChildOf_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &BoneIsChildOf_Parms.ParentBoneName, &ParentBoneName, 0x8 );

	pFnBoneIsChildOf->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBoneIsChildOf, &BoneIsChildOf_Parms, NULL );

	pFnBoneIsChildOf->FunctionFlags |= 0x400;

	return BoneIsChildOf_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneNames
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FName >         BoneNames                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USkeletalMeshComponent::GetBoneNames ( TArray< struct FName >* BoneNames )
{
	static UFunction* pFnGetBoneNames = NULL;

	if ( ! pFnGetBoneNames )
		pFnGetBoneNames = (UFunction*) UObject::GObjObjects()->Data[ 10563 ];

	USkeletalMeshComponent_execGetBoneNames_Parms GetBoneNames_Parms;

	pFnGetBoneNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneNames, &GetBoneNames_Parms, NULL );

	pFnGetBoneNames->FunctionFlags |= 0x400;

	if ( BoneNames )
		memcpy ( BoneNames, &GetBoneNames_Parms.BoneNames, 0xC );
};

// Function Engine.SkeletalMeshComponent.GetParentBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

struct FName USkeletalMeshComponent::GetParentBone ( struct FName BoneName )
{
	static UFunction* pFnGetParentBone = NULL;

	if ( ! pFnGetParentBone )
		pFnGetParentBone = (UFunction*) UObject::GObjObjects()->Data[ 10560 ];

	USkeletalMeshComponent_execGetParentBone_Parms GetParentBone_Parms;
	memcpy ( &GetParentBone_Parms.BoneName, &BoneName, 0x8 );

	pFnGetParentBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParentBone, &GetParentBone_Parms, NULL );

	pFnGetParentBone->FunctionFlags |= 0x400;

	return GetParentBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FMatrix USkeletalMeshComponent::GetBoneMatrix ( int BoneIndex )
{
	static UFunction* pFnGetBoneMatrix = NULL;

	if ( ! pFnGetBoneMatrix )
		pFnGetBoneMatrix = (UFunction*) UObject::GObjObjects()->Data[ 10557 ];

	USkeletalMeshComponent_execGetBoneMatrix_Parms GetBoneMatrix_Parms;
	GetBoneMatrix_Parms.BoneIndex = BoneIndex;

	pFnGetBoneMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneMatrix, &GetBoneMatrix_Parms, NULL );

	pFnGetBoneMatrix->FunctionFlags |= 0x400;

	return GetBoneMatrix_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            BoneIndex                      ( CPF_Parm )

struct FName USkeletalMeshComponent::GetBoneName ( int BoneIndex )
{
	static UFunction* pFnGetBoneName = NULL;

	if ( ! pFnGetBoneName )
		pFnGetBoneName = (UFunction*) UObject::GObjObjects()->Data[ 10554 ];

	USkeletalMeshComponent_execGetBoneName_Parms GetBoneName_Parms;
	GetBoneName_Parms.BoneIndex = BoneIndex;

	pFnGetBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneName, &GetBoneName_Parms, NULL );

	pFnGetBoneName->FunctionFlags |= 0x400;

	return GetBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.MatchRefBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )

int USkeletalMeshComponent::MatchRefBone ( struct FName BoneName )
{
	static UFunction* pFnMatchRefBone = NULL;

	if ( ! pFnMatchRefBone )
		pFnMatchRefBone = (UFunction*) UObject::GObjObjects()->Data[ 10551 ];

	USkeletalMeshComponent_execMatchRefBone_Parms MatchRefBone_Parms;
	memcpy ( &MatchRefBone_Parms.BoneName, &BoneName, 0x8 );

	pFnMatchRefBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchRefBone, &MatchRefBone_Parms, NULL );

	pFnMatchRefBone->FunctionFlags |= 0x400;

	return MatchRefBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FVector USkeletalMeshComponent::GetBoneLocation ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneLocation = NULL;

	if ( ! pFnGetBoneLocation )
		pFnGetBoneLocation = (UFunction*) UObject::GObjObjects()->Data[ 10547 ];

	USkeletalMeshComponent_execGetBoneLocation_Parms GetBoneLocation_Parms;
	memcpy ( &GetBoneLocation_Parms.BoneName, &BoneName, 0x8 );
	GetBoneLocation_Parms.Space = Space;

	pFnGetBoneLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneLocation, &GetBoneLocation_Parms, NULL );

	pFnGetBoneLocation->FunctionFlags |= 0x400;

	return GetBoneLocation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FQuat                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   BoneName                       ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )

struct FQuat USkeletalMeshComponent::GetBoneQuaternion ( struct FName BoneName, int Space )
{
	static UFunction* pFnGetBoneQuaternion = NULL;

	if ( ! pFnGetBoneQuaternion )
		pFnGetBoneQuaternion = (UFunction*) UObject::GObjObjects()->Data[ 10543 ];

	USkeletalMeshComponent_execGetBoneQuaternion_Parms GetBoneQuaternion_Parms;
	memcpy ( &GetBoneQuaternion_Parms.BoneName, &BoneName, 0x8 );
	GetBoneQuaternion_Parms.Space = Space;

	pFnGetBoneQuaternion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoneQuaternion, &GetBoneQuaternion_Parms, NULL );

	pFnGetBoneQuaternion->FunctionFlags |= 0x400;

	return GetBoneQuaternion_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphNodeBase*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode ( struct FName InNodeName )
{
	static UFunction* pFnFindMorphNode = NULL;

	if ( ! pFnFindMorphNode )
		pFnFindMorphNode = (UFunction*) UObject::GObjObjects()->Data[ 10540 ];

	USkeletalMeshComponent_execFindMorphNode_Parms FindMorphNode_Parms;
	memcpy ( &FindMorphNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindMorphNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphNode, &FindMorphNode_Parms, NULL );

	pFnFindMorphNode->FunctionFlags |= 0x400;

	return FindMorphNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindSkelControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkelControlBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InControlName                  ( CPF_Parm )

class USkelControlBase* USkeletalMeshComponent::FindSkelControl ( struct FName InControlName )
{
	static UFunction* pFnFindSkelControl = NULL;

	if ( ! pFnFindSkelControl )
		pFnFindSkelControl = (UFunction*) UObject::GObjObjects()->Data[ 10537 ];

	USkeletalMeshComponent_execFindSkelControl_Parms FindSkelControl_Parms;
	memcpy ( &FindSkelControl_Parms.InControlName, &InControlName, 0x8 );

	pFnFindSkelControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSkelControl, &FindSkelControl_Parms, NULL );

	pFnFindSkelControl->FunctionFlags |= 0x400;

	return FindSkelControl_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AllAnimNodes
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UAnimNode*               Node                           ( CPF_Parm | CPF_OutParm )

void USkeletalMeshComponent::AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node )
{
	static UFunction* pFnAllAnimNodes = NULL;

	if ( ! pFnAllAnimNodes )
		pFnAllAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 10534 ];

	USkeletalMeshComponent_execAllAnimNodes_Parms AllAnimNodes_Parms;
	AllAnimNodes_Parms.BaseClass = BaseClass;

	pFnAllAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllAnimNodes, &AllAnimNodes_Parms, NULL );

	pFnAllAnimNodes->FunctionFlags |= 0x400;

	if ( Node )
		*Node = AllAnimNodes_Parms.Node;
};

// Function Engine.SkeletalMeshComponent.FindAnimNode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InNodeName                     ( CPF_Parm )

class UAnimNode* USkeletalMeshComponent::FindAnimNode ( struct FName InNodeName )
{
	static UFunction* pFnFindAnimNode = NULL;

	if ( ! pFnFindAnimNode )
		pFnFindAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 10531 ];

	USkeletalMeshComponent_execFindAnimNode_Parms FindAnimNode_Parms;
	memcpy ( &FindAnimNode_Parms.InNodeName, &InNodeName, 0x8 );

	pFnFindAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimNode, &FindAnimNode_Parms, NULL );

	pFnFindAnimNode->FunctionFlags |= 0x400;

	return FindAnimNode_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindMorphTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UMorphTarget*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   MorphTargetName                ( CPF_Parm )

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget ( struct FName MorphTargetName )
{
	static UFunction* pFnFindMorphTarget = NULL;

	if ( ! pFnFindMorphTarget )
		pFnFindMorphTarget = (UFunction*) UObject::GObjObjects()->Data[ 10528 ];

	USkeletalMeshComponent_execFindMorphTarget_Parms FindMorphTarget_Parms;
	memcpy ( &FindMorphTarget_Parms.MorphTargetName, &MorphTargetName, 0x8 );

	pFnFindMorphTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindMorphTarget, &FindMorphTarget_Parms, NULL );

	pFnFindMorphTarget->FunctionFlags |= 0x400;

	return FindMorphTarget_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimLength
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

float USkeletalMeshComponent::GetAnimLength ( struct FName AnimSeqName )
{
	static UFunction* pFnGetAnimLength = NULL;

	if ( ! pFnGetAnimLength )
		pFnGetAnimLength = (UFunction*) UObject::GObjObjects()->Data[ 10524 ];

	USkeletalMeshComponent_execGetAnimLength_Parms GetAnimLength_Parms;
	memcpy ( &GetAnimLength_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	this->ProcessEvent ( pFnGetAnimLength, &GetAnimLength_Parms, NULL );

	return GetAnimLength_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )

float USkeletalMeshComponent::GetAnimRateByDuration ( struct FName AnimSeqName, float Duration )
{
	static UFunction* pFnGetAnimRateByDuration = NULL;

	if ( ! pFnGetAnimRateByDuration )
		pFnGetAnimRateByDuration = (UFunction*) UObject::GObjObjects()->Data[ 10517 ];

	USkeletalMeshComponent_execGetAnimRateByDuration_Parms GetAnimRateByDuration_Parms;
	memcpy ( &GetAnimRateByDuration_Parms.AnimSeqName, &AnimSeqName, 0x8 );
	GetAnimRateByDuration_Parms.Duration = Duration;

	this->ProcessEvent ( pFnGetAnimRateByDuration, &GetAnimRateByDuration_Parms, NULL );

	return GetAnimRateByDuration_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::RestoreSavedAnimSets ( )
{
	static UFunction* pFnRestoreSavedAnimSets = NULL;

	if ( ! pFnRestoreSavedAnimSets )
		pFnRestoreSavedAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 10516 ];

	USkeletalMeshComponent_execRestoreSavedAnimSets_Parms RestoreSavedAnimSets_Parms;

	pFnRestoreSavedAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreSavedAnimSets, &RestoreSavedAnimSets_Parms, NULL );

	pFnRestoreSavedAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SaveAnimSets
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::SaveAnimSets ( )
{
	static UFunction* pFnSaveAnimSets = NULL;

	if ( ! pFnSaveAnimSets )
		pFnSaveAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 10515 ];

	USkeletalMeshComponent_execSaveAnimSets_Parms SaveAnimSets_Parms;

	pFnSaveAnimSets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveAnimSets, &SaveAnimSets_Parms, NULL );

	pFnSaveAnimSets->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.FindAnimSequence
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimSequence*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimSeqName                    ( CPF_Parm )

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence ( struct FName AnimSeqName )
{
	static UFunction* pFnFindAnimSequence = NULL;

	if ( ! pFnFindAnimSequence )
		pFnFindAnimSequence = (UFunction*) UObject::GObjObjects()->Data[ 10512 ];

	USkeletalMeshComponent_execFindAnimSequence_Parms FindAnimSequence_Parms;
	memcpy ( &FindAnimSequence_Parms.AnimSeqName, &AnimSeqName, 0x8 );

	pFnFindAnimSequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindAnimSequence, &FindAnimSequence_Parms, NULL );

	pFnFindAnimSequence->FunctionFlags |= 0x400;

	return FindAnimSequence_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.WakeSoftBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::WakeSoftBody ( )
{
	static UFunction* pFnWakeSoftBody = NULL;

	if ( ! pFnWakeSoftBody )
		pFnWakeSoftBody = (UFunction*) UObject::GObjObjects()->Data[ 10511 ];

	USkeletalMeshComponent_execWakeSoftBody_Parms WakeSoftBody_Parms;

	pFnWakeSoftBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWakeSoftBody, &WakeSoftBody_Parms, NULL );

	pFnWakeSoftBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetSoftBodyFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetSoftBodyFrozen = NULL;

	if ( ! pFnSetSoftBodyFrozen )
		pFnSetSoftBodyFrozen = (UFunction*) UObject::GObjObjects()->Data[ 10509 ];

	USkeletalMeshComponent_execSetSoftBodyFrozen_Parms SetSoftBodyFrozen_Parms;
	SetSoftBodyFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetSoftBodyFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSoftBodyFrozen, &SetSoftBodyFrozen_Parms, NULL );

	pFnSetSoftBodyFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateSoftBodyParams ( )
{
	static UFunction* pFnUpdateSoftBodyParams = NULL;

	if ( ! pFnUpdateSoftBodyParams )
		pFnUpdateSoftBodyParams = (UFunction*) UObject::GObjObjects()->Data[ 10508 ];

	USkeletalMeshComponent_execUpdateSoftBodyParams_Parms UpdateSoftBodyParams_Parms;

	pFnUpdateSoftBodyParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSoftBodyParams, &UpdateSoftBodyParams_Parms, NULL );

	pFnUpdateSoftBodyParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothValidBoundsMin            ( CPF_Parm )
// struct FVector                 ClothValidBoundsMax            ( CPF_Parm )

void USkeletalMeshComponent::SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax )
{
	static UFunction* pFnSetClothValidBounds = NULL;

	if ( ! pFnSetClothValidBounds )
		pFnSetClothValidBounds = (UFunction*) UObject::GObjObjects()->Data[ 10505 ];

	USkeletalMeshComponent_execSetClothValidBounds_Parms SetClothValidBounds_Parms;
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMin, &ClothValidBoundsMin, 0xC );
	memcpy ( &SetClothValidBounds_Parms.ClothValidBoundsMax, &ClothValidBoundsMax, 0xC );

	pFnSetClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothValidBounds, &SetClothValidBounds_Parms, NULL );

	pFnSetClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfEnableClothValidBounds       ( CPF_Parm )

void USkeletalMeshComponent::EnableClothValidBounds ( unsigned long IfEnableClothValidBounds )
{
	static UFunction* pFnEnableClothValidBounds = NULL;

	if ( ! pFnEnableClothValidBounds )
		pFnEnableClothValidBounds = (UFunction*) UObject::GObjObjects()->Data[ 10503 ];

	USkeletalMeshComponent_execEnableClothValidBounds_Parms EnableClothValidBounds_Parms;
	EnableClothValidBounds_Parms.IfEnableClothValidBounds = IfEnableClothValidBounds;

	pFnEnableClothValidBounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableClothValidBounds, &EnableClothValidBounds_Parms, NULL );

	pFnEnableClothValidBounds->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  AttatchTwoWay                  ( CPF_Parm )
// unsigned long                  AttachTearable                 ( CPF_Parm )

void USkeletalMeshComponent::AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable )
{
	static UFunction* pFnAttachClothToCollidingShapes = NULL;

	if ( ! pFnAttachClothToCollidingShapes )
		pFnAttachClothToCollidingShapes = (UFunction*) UObject::GObjObjects()->Data[ 10500 ];

	USkeletalMeshComponent_execAttachClothToCollidingShapes_Parms AttachClothToCollidingShapes_Parms;
	AttachClothToCollidingShapes_Parms.AttatchTwoWay = AttatchTwoWay;
	AttachClothToCollidingShapes_Parms.AttachTearable = AttachTearable;

	pFnAttachClothToCollidingShapes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachClothToCollidingShapes, &AttachClothToCollidingShapes_Parms, NULL );

	pFnAttachClothToCollidingShapes->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 VelocityOffSet                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothVelocity ( struct FVector VelocityOffSet )
{
	static UFunction* pFnSetClothVelocity = NULL;

	if ( ! pFnSetClothVelocity )
		pFnSetClothVelocity = (UFunction*) UObject::GObjObjects()->Data[ 10498 ];

	USkeletalMeshComponent_execSetClothVelocity_Parms SetClothVelocity_Parms;
	memcpy ( &SetClothVelocity_Parms.VelocityOffSet, &VelocityOffSet, 0xC );

	pFnSetClothVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothVelocity, &SetClothVelocity_Parms, NULL );

	pFnSetClothVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPosition
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ClothOffSet                    ( CPF_Parm )

void USkeletalMeshComponent::SetClothPosition ( struct FVector ClothOffSet )
{
	static UFunction* pFnSetClothPosition = NULL;

	if ( ! pFnSetClothPosition )
		pFnSetClothPosition = (UFunction*) UObject::GObjObjects()->Data[ 10496 ];

	USkeletalMeshComponent_execSetClothPosition_Parms SetClothPosition_Parms;
	memcpy ( &SetClothPosition_Parms.ClothOffSet, &ClothOffSet, 0xC );

	pFnSetClothPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPosition, &SetClothPosition_Parms, NULL );

	pFnSetClothPosition->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleep
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  IfClothSleep                   ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleep ( unsigned long IfClothSleep )
{
	static UFunction* pFnSetClothSleep = NULL;

	if ( ! pFnSetClothSleep )
		pFnSetClothSleep = (UFunction*) UObject::GObjObjects()->Data[ 10494 ];

	USkeletalMeshComponent_execSetClothSleep_Parms SetClothSleep_Parms;
	SetClothSleep_Parms.IfClothSleep = IfClothSleep;

	pFnSetClothSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleep, &SetClothSleep_Parms, NULL );

	pFnSetClothSleep->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothThickness                 ( CPF_Parm )

void USkeletalMeshComponent::SetClothThickness ( float ClothThickness )
{
	static UFunction* pFnSetClothThickness = NULL;

	if ( ! pFnSetClothThickness )
		pFnSetClothThickness = (UFunction*) UObject::GObjObjects()->Data[ 10492 ];

	USkeletalMeshComponent_execSetClothThickness_Parms SetClothThickness_Parms;
	SetClothThickness_Parms.ClothThickness = ClothThickness;

	pFnSetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothThickness, &SetClothThickness_Parms, NULL );

	pFnSetClothThickness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothTearFactor                ( CPF_Parm )

void USkeletalMeshComponent::SetClothTearFactor ( float ClothTearFactor )
{
	static UFunction* pFnSetClothTearFactor = NULL;

	if ( ! pFnSetClothTearFactor )
		pFnSetClothTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 10490 ];

	USkeletalMeshComponent_execSetClothTearFactor_Parms SetClothTearFactor_Parms;
	SetClothTearFactor_Parms.ClothTearFactor = ClothTearFactor;

	pFnSetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothTearFactor, &SetClothTearFactor_Parms, NULL );

	pFnSetClothTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothStretchingStiffness       ( CPF_Parm )

void USkeletalMeshComponent::SetClothStretchingStiffness ( float ClothStretchingStiffness )
{
	static UFunction* pFnSetClothStretchingStiffness = NULL;

	if ( ! pFnSetClothStretchingStiffness )
		pFnSetClothStretchingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 10488 ];

	USkeletalMeshComponent_execSetClothStretchingStiffness_Parms SetClothStretchingStiffness_Parms;
	SetClothStretchingStiffness_Parms.ClothStretchingStiffness = ClothStretchingStiffness;

	pFnSetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothStretchingStiffness, &SetClothStretchingStiffness_Parms, NULL );

	pFnSetClothStretchingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothSolverIterations          ( CPF_Parm )

void USkeletalMeshComponent::SetClothSolverIterations ( int ClothSolverIterations )
{
	static UFunction* pFnSetClothSolverIterations = NULL;

	if ( ! pFnSetClothSolverIterations )
		pFnSetClothSolverIterations = (UFunction*) UObject::GObjObjects()->Data[ 10486 ];

	USkeletalMeshComponent_execSetClothSolverIterations_Parms SetClothSolverIterations_Parms;
	SetClothSolverIterations_Parms.ClothSolverIterations = ClothSolverIterations;

	pFnSetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSolverIterations, &SetClothSolverIterations_Parms, NULL );

	pFnSetClothSolverIterations->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothSleepLinearVelocity       ( CPF_Parm )

void USkeletalMeshComponent::SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity )
{
	static UFunction* pFnSetClothSleepLinearVelocity = NULL;

	if ( ! pFnSetClothSleepLinearVelocity )
		pFnSetClothSleepLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 10484 ];

	USkeletalMeshComponent_execSetClothSleepLinearVelocity_Parms SetClothSleepLinearVelocity_Parms;
	SetClothSleepLinearVelocity_Parms.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	pFnSetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothSleepLinearVelocity, &SetClothSleepLinearVelocity_Parms, NULL );

	pFnSetClothSleepLinearVelocity->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothPressure                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothPressure ( float ClothPressure )
{
	static UFunction* pFnSetClothPressure = NULL;

	if ( ! pFnSetClothPressure )
		pFnSetClothPressure = (UFunction*) UObject::GObjObjects()->Data[ 10482 ];

	USkeletalMeshComponent_execSetClothPressure_Parms SetClothPressure_Parms;
	SetClothPressure_Parms.ClothPressure = ClothPressure;

	pFnSetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothPressure, &SetClothPressure_Parms, NULL );

	pFnSetClothPressure->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothFriction                  ( CPF_Parm )

void USkeletalMeshComponent::SetClothFriction ( float ClothFriction )
{
	static UFunction* pFnSetClothFriction = NULL;

	if ( ! pFnSetClothFriction )
		pFnSetClothFriction = (UFunction*) UObject::GObjObjects()->Data[ 10480 ];

	USkeletalMeshComponent_execSetClothFriction_Parms SetClothFriction_Parms;
	SetClothFriction_Parms.ClothFriction = ClothFriction;

	pFnSetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFriction, &SetClothFriction_Parms, NULL );

	pFnSetClothFriction->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ClothFlags                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFlags ( int ClothFlags )
{
	static UFunction* pFnSetClothFlags = NULL;

	if ( ! pFnSetClothFlags )
		pFnSetClothFlags = (UFunction*) UObject::GObjObjects()->Data[ 10478 ];

	USkeletalMeshComponent_execSetClothFlags_Parms SetClothFlags_Parms;
	SetClothFlags_Parms.ClothFlags = ClothFlags;

	pFnSetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFlags, &SetClothFlags_Parms, NULL );

	pFnSetClothFlags->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothDampingCoefficient        ( CPF_Parm )

void USkeletalMeshComponent::SetClothDampingCoefficient ( float ClothDampingCoefficient )
{
	static UFunction* pFnSetClothDampingCoefficient = NULL;

	if ( ! pFnSetClothDampingCoefficient )
		pFnSetClothDampingCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 10476 ];

	USkeletalMeshComponent_execSetClothDampingCoefficient_Parms SetClothDampingCoefficient_Parms;
	SetClothDampingCoefficient_Parms.ClothDampingCoefficient = ClothDampingCoefficient;

	pFnSetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothDampingCoefficient, &SetClothDampingCoefficient_Parms, NULL );

	pFnSetClothDampingCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothCollisionResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient )
{
	static UFunction* pFnSetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnSetClothCollisionResponseCoefficient )
		pFnSetClothCollisionResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 10474 ];

	USkeletalMeshComponent_execSetClothCollisionResponseCoefficient_Parms SetClothCollisionResponseCoefficient_Parms;
	SetClothCollisionResponseCoefficient_Parms.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothCollisionResponseCoefficient, &SetClothCollisionResponseCoefficient_Parms, NULL );

	pFnSetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothBendingStiffness          ( CPF_Parm )

void USkeletalMeshComponent::SetClothBendingStiffness ( float ClothBendingStiffness )
{
	static UFunction* pFnSetClothBendingStiffness = NULL;

	if ( ! pFnSetClothBendingStiffness )
		pFnSetClothBendingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 10472 ];

	USkeletalMeshComponent_execSetClothBendingStiffness_Parms SetClothBendingStiffness_Parms;
	SetClothBendingStiffness_Parms.ClothBendingStiffness = ClothBendingStiffness;

	pFnSetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothBendingStiffness, &SetClothBendingStiffness_Parms, NULL );

	pFnSetClothBendingStiffness->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachTearFactor          ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentTearFactor ( float ClothAttachTearFactor )
{
	static UFunction* pFnSetClothAttachmentTearFactor = NULL;

	if ( ! pFnSetClothAttachmentTearFactor )
		pFnSetClothAttachmentTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 10470 ];

	USkeletalMeshComponent_execSetClothAttachmentTearFactor_Parms SetClothAttachmentTearFactor_Parms;
	SetClothAttachmentTearFactor_Parms.ClothAttachTearFactor = ClothAttachTearFactor;

	pFnSetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentTearFactor, &SetClothAttachmentTearFactor_Parms, NULL );

	pFnSetClothAttachmentTearFactor->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ClothAttachmentResponseCoefficient ( CPF_Parm )

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient )
{
	static UFunction* pFnSetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnSetClothAttachmentResponseCoefficient )
		pFnSetClothAttachmentResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 10468 ];

	USkeletalMeshComponent_execSetClothAttachmentResponseCoefficient_Parms SetClothAttachmentResponseCoefficient_Parms;
	SetClothAttachmentResponseCoefficient_Parms.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothAttachmentResponseCoefficient, &SetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnSetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetClothThickness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothThickness ( )
{
	static UFunction* pFnGetClothThickness = NULL;

	if ( ! pFnGetClothThickness )
		pFnGetClothThickness = (UFunction*) UObject::GObjObjects()->Data[ 10466 ];

	USkeletalMeshComponent_execGetClothThickness_Parms GetClothThickness_Parms;

	pFnGetClothThickness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothThickness, &GetClothThickness_Parms, NULL );

	pFnGetClothThickness->FunctionFlags |= 0x400;

	return GetClothThickness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothTearFactor ( )
{
	static UFunction* pFnGetClothTearFactor = NULL;

	if ( ! pFnGetClothTearFactor )
		pFnGetClothTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 10464 ];

	USkeletalMeshComponent_execGetClothTearFactor_Parms GetClothTearFactor_Parms;

	pFnGetClothTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothTearFactor, &GetClothTearFactor_Parms, NULL );

	pFnGetClothTearFactor->FunctionFlags |= 0x400;

	return GetClothTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothStretchingStiffness ( )
{
	static UFunction* pFnGetClothStretchingStiffness = NULL;

	if ( ! pFnGetClothStretchingStiffness )
		pFnGetClothStretchingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 10462 ];

	USkeletalMeshComponent_execGetClothStretchingStiffness_Parms GetClothStretchingStiffness_Parms;

	pFnGetClothStretchingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothStretchingStiffness, &GetClothStretchingStiffness_Parms, NULL );

	pFnGetClothStretchingStiffness->FunctionFlags |= 0x400;

	return GetClothStretchingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothSolverIterations ( )
{
	static UFunction* pFnGetClothSolverIterations = NULL;

	if ( ! pFnGetClothSolverIterations )
		pFnGetClothSolverIterations = (UFunction*) UObject::GObjObjects()->Data[ 10460 ];

	USkeletalMeshComponent_execGetClothSolverIterations_Parms GetClothSolverIterations_Parms;

	pFnGetClothSolverIterations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSolverIterations, &GetClothSolverIterations_Parms, NULL );

	pFnGetClothSolverIterations->FunctionFlags |= 0x400;

	return GetClothSolverIterations_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothSleepLinearVelocity ( )
{
	static UFunction* pFnGetClothSleepLinearVelocity = NULL;

	if ( ! pFnGetClothSleepLinearVelocity )
		pFnGetClothSleepLinearVelocity = (UFunction*) UObject::GObjObjects()->Data[ 10458 ];

	USkeletalMeshComponent_execGetClothSleepLinearVelocity_Parms GetClothSleepLinearVelocity_Parms;

	pFnGetClothSleepLinearVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothSleepLinearVelocity, &GetClothSleepLinearVelocity_Parms, NULL );

	pFnGetClothSleepLinearVelocity->FunctionFlags |= 0x400;

	return GetClothSleepLinearVelocity_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothPressure
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothPressure ( )
{
	static UFunction* pFnGetClothPressure = NULL;

	if ( ! pFnGetClothPressure )
		pFnGetClothPressure = (UFunction*) UObject::GObjObjects()->Data[ 10456 ];

	USkeletalMeshComponent_execGetClothPressure_Parms GetClothPressure_Parms;

	pFnGetClothPressure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothPressure, &GetClothPressure_Parms, NULL );

	pFnGetClothPressure->FunctionFlags |= 0x400;

	return GetClothPressure_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFriction
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothFriction ( )
{
	static UFunction* pFnGetClothFriction = NULL;

	if ( ! pFnGetClothFriction )
		pFnGetClothFriction = (UFunction*) UObject::GObjObjects()->Data[ 10454 ];

	USkeletalMeshComponent_execGetClothFriction_Parms GetClothFriction_Parms;

	pFnGetClothFriction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFriction, &GetClothFriction_Parms, NULL );

	pFnGetClothFriction->FunctionFlags |= 0x400;

	return GetClothFriction_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothFlags
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USkeletalMeshComponent::GetClothFlags ( )
{
	static UFunction* pFnGetClothFlags = NULL;

	if ( ! pFnGetClothFlags )
		pFnGetClothFlags = (UFunction*) UObject::GObjObjects()->Data[ 10452 ];

	USkeletalMeshComponent_execGetClothFlags_Parms GetClothFlags_Parms;

	pFnGetClothFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothFlags, &GetClothFlags_Parms, NULL );

	pFnGetClothFlags->FunctionFlags |= 0x400;

	return GetClothFlags_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothDampingCoefficient ( )
{
	static UFunction* pFnGetClothDampingCoefficient = NULL;

	if ( ! pFnGetClothDampingCoefficient )
		pFnGetClothDampingCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 10450 ];

	USkeletalMeshComponent_execGetClothDampingCoefficient_Parms GetClothDampingCoefficient_Parms;

	pFnGetClothDampingCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothDampingCoefficient, &GetClothDampingCoefficient_Parms, NULL );

	pFnGetClothDampingCoefficient->FunctionFlags |= 0x400;

	return GetClothDampingCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient ( )
{
	static UFunction* pFnGetClothCollisionResponseCoefficient = NULL;

	if ( ! pFnGetClothCollisionResponseCoefficient )
		pFnGetClothCollisionResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 10448 ];

	USkeletalMeshComponent_execGetClothCollisionResponseCoefficient_Parms GetClothCollisionResponseCoefficient_Parms;

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothCollisionResponseCoefficient, &GetClothCollisionResponseCoefficient_Parms, NULL );

	pFnGetClothCollisionResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothCollisionResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothBendingStiffness ( )
{
	static UFunction* pFnGetClothBendingStiffness = NULL;

	if ( ! pFnGetClothBendingStiffness )
		pFnGetClothBendingStiffness = (UFunction*) UObject::GObjObjects()->Data[ 10446 ];

	USkeletalMeshComponent_execGetClothBendingStiffness_Parms GetClothBendingStiffness_Parms;

	pFnGetClothBendingStiffness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothBendingStiffness, &GetClothBendingStiffness_Parms, NULL );

	pFnGetClothBendingStiffness->FunctionFlags |= 0x400;

	return GetClothBendingStiffness_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentTearFactor ( )
{
	static UFunction* pFnGetClothAttachmentTearFactor = NULL;

	if ( ! pFnGetClothAttachmentTearFactor )
		pFnGetClothAttachmentTearFactor = (UFunction*) UObject::GObjObjects()->Data[ 10444 ];

	USkeletalMeshComponent_execGetClothAttachmentTearFactor_Parms GetClothAttachmentTearFactor_Parms;

	pFnGetClothAttachmentTearFactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentTearFactor, &GetClothAttachmentTearFactor_Parms, NULL );

	pFnGetClothAttachmentTearFactor->FunctionFlags |= 0x400;

	return GetClothAttachmentTearFactor_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient ( )
{
	static UFunction* pFnGetClothAttachmentResponseCoefficient = NULL;

	if ( ! pFnGetClothAttachmentResponseCoefficient )
		pFnGetClothAttachmentResponseCoefficient = (UFunction*) UObject::GObjObjects()->Data[ 10442 ];

	USkeletalMeshComponent_execGetClothAttachmentResponseCoefficient_Parms GetClothAttachmentResponseCoefficient_Parms;

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClothAttachmentResponseCoefficient, &GetClothAttachmentResponseCoefficient_Parms, NULL );

	pFnGetClothAttachmentResponseCoefficient->FunctionFlags |= 0x400;

	return GetClothAttachmentResponseCoefficient_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ForceApexClothingTeleport ( )
{
	static UFunction* pFnForceApexClothingTeleport = NULL;

	if ( ! pFnForceApexClothingTeleport )
		pFnForceApexClothingTeleport = (UFunction*) UObject::GObjObjects()->Data[ 10441 ];

	USkeletalMeshComponent_execForceApexClothingTeleport_Parms ForceApexClothingTeleport_Parms;

	pFnForceApexClothingTeleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceApexClothingTeleport, &ForceApexClothingTeleport_Parms, NULL );

	pFnForceApexClothingTeleport->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ForceApexClothingTeleportAndReset ( )
{
	static UFunction* pFnForceApexClothingTeleportAndReset = NULL;

	if ( ! pFnForceApexClothingTeleportAndReset )
		pFnForceApexClothingTeleportAndReset = (UFunction*) UObject::GObjObjects()->Data[ 10440 ];

	USkeletalMeshComponent_execForceApexClothingTeleportAndReset_Parms ForceApexClothingTeleportAndReset_Parms;

	pFnForceApexClothingTeleportAndReset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceApexClothingTeleportAndReset, &ForceApexClothingTeleportAndReset_Parms, NULL );

	pFnForceApexClothingTeleportAndReset->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::ResetClothVertsToRefPose ( )
{
	static UFunction* pFnResetClothVertsToRefPose = NULL;

	if ( ! pFnResetClothVertsToRefPose )
		pFnResetClothVertsToRefPose = (UFunction*) UObject::GObjObjects()->Data[ 10439 ];

	USkeletalMeshComponent_execResetClothVertsToRefPose_Parms ResetClothVertsToRefPose_Parms;

	pFnResetClothVertsToRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetClothVertsToRefPose, &ResetClothVertsToRefPose_Parms, NULL );

	pFnResetClothVertsToRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAttachVerts                   ( CPF_Parm )

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts )
{
	static UFunction* pFnSetAttachClothVertsToBaseBody = NULL;

	if ( ! pFnSetAttachClothVertsToBaseBody )
		pFnSetAttachClothVertsToBaseBody = (UFunction*) UObject::GObjObjects()->Data[ 10437 ];

	USkeletalMeshComponent_execSetAttachClothVertsToBaseBody_Parms SetAttachClothVertsToBaseBody_Parms;
	SetAttachClothVertsToBaseBody_Parms.bAttachVerts = bAttachVerts;

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAttachClothVertsToBaseBody, &SetAttachClothVertsToBaseBody_Parms, NULL );

	pFnSetAttachClothVertsToBaseBody->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 InForce                        ( CPF_Parm )

void USkeletalMeshComponent::SetClothExternalForce ( struct FVector InForce )
{
	static UFunction* pFnSetClothExternalForce = NULL;

	if ( ! pFnSetClothExternalForce )
		pFnSetClothExternalForce = (UFunction*) UObject::GObjObjects()->Data[ 10435 ];

	USkeletalMeshComponent_execSetClothExternalForce_Parms SetClothExternalForce_Parms;
	memcpy ( &SetClothExternalForce_Parms.InForce, &InForce, 0xC );

	pFnSetClothExternalForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothExternalForce, &SetClothExternalForce_Parms, NULL );

	pFnSetClothExternalForce->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.UpdateClothParams
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USkeletalMeshComponent::UpdateClothParams ( )
{
	static UFunction* pFnUpdateClothParams = NULL;

	if ( ! pFnUpdateClothParams )
		pFnUpdateClothParams = (UFunction*) UObject::GObjObjects()->Data[ 10434 ];

	USkeletalMeshComponent_execUpdateClothParams_Parms UpdateClothParams_Parms;

	pFnUpdateClothParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateClothParams, &UpdateClothParams_Parms, NULL );

	pFnUpdateClothParams->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnable                      ( CPF_Parm )

void USkeletalMeshComponent::SetEnableClothingSimulation ( unsigned long bInEnable )
{
	static UFunction* pFnSetEnableClothingSimulation = NULL;

	if ( ! pFnSetEnableClothingSimulation )
		pFnSetEnableClothingSimulation = (UFunction*) UObject::GObjObjects()->Data[ 10432 ];

	USkeletalMeshComponent_execSetEnableClothingSimulation_Parms SetEnableClothingSimulation_Parms;
	SetEnableClothingSimulation_Parms.bInEnable = bInEnable;

	pFnSetEnableClothingSimulation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnableClothingSimulation, &SetEnableClothingSimulation_Parms, NULL );

	pFnSetEnableClothingSimulation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetClothFrozen
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewFrozen                     ( CPF_Parm )

void USkeletalMeshComponent::SetClothFrozen ( unsigned long bNewFrozen )
{
	static UFunction* pFnSetClothFrozen = NULL;

	if ( ! pFnSetClothFrozen )
		pFnSetClothFrozen = (UFunction*) UObject::GObjObjects()->Data[ 10430 ];

	USkeletalMeshComponent_execSetClothFrozen_Parms SetClothFrozen_Parms;
	SetClothFrozen_Parms.bNewFrozen = bNewFrozen;

	pFnSetClothFrozen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClothFrozen, &SetClothFrozen_Parms, NULL );

	pFnSetClothFrozen->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bInEnable                      ( CPF_Parm )

void USkeletalMeshComponent::SetEnableClothSimulation ( unsigned long bInEnable )
{
	static UFunction* pFnSetEnableClothSimulation = NULL;

	if ( ! pFnSetEnableClothSimulation )
		pFnSetEnableClothSimulation = (UFunction*) UObject::GObjObjects()->Data[ 10428 ];

	USkeletalMeshComponent_execSetEnableClothSimulation_Parms SetEnableClothSimulation_Parms;
	SetEnableClothSimulation_Parms.bInEnable = bInEnable;

	pFnSetEnableClothSimulation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnableClothSimulation, &SetEnableClothSimulation_Parms, NULL );

	pFnSetEnableClothSimulation->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetForceRefPose
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bNewForceRefPose               ( CPF_Parm )

void USkeletalMeshComponent::SetForceRefPose ( unsigned long bNewForceRefPose )
{
	static UFunction* pFnSetForceRefPose = NULL;

	if ( ! pFnSetForceRefPose )
		pFnSetForceRefPose = (UFunction*) UObject::GObjObjects()->Data[ 10426 ];

	USkeletalMeshComponent_execSetForceRefPose_Parms SetForceRefPose_Parms;
	SetForceRefPose_Parms.bNewForceRefPose = bNewForceRefPose;

	pFnSetForceRefPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetForceRefPose, &SetForceRefPose_Parms, NULL );

	pFnSetForceRefPose->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           NewPhysicsAsset                ( CPF_Parm )
// unsigned long                  bForceReInit                   ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit )
{
	static UFunction* pFnSetPhysicsAsset = NULL;

	if ( ! pFnSetPhysicsAsset )
		pFnSetPhysicsAsset = (UFunction*) UObject::GObjObjects()->Data[ 10423 ];

	USkeletalMeshComponent_execSetPhysicsAsset_Parms SetPhysicsAsset_Parms;
	SetPhysicsAsset_Parms.NewPhysicsAsset = NewPhysicsAsset;
	SetPhysicsAsset_Parms.bForceReInit = bForceReInit;

	pFnSetPhysicsAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPhysicsAsset, &SetPhysicsAsset_Parms, NULL );

	pFnSetPhysicsAsset->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           NewMesh                        ( CPF_Parm )
// unsigned long                  bKeepSpaceBases                ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases )
{
	static UFunction* pFnSetSkeletalMesh = NULL;

	if ( ! pFnSetSkeletalMesh )
		pFnSetSkeletalMesh = (UFunction*) UObject::GObjObjects()->Data[ 10420 ];

	USkeletalMeshComponent_execSetSkeletalMesh_Parms SetSkeletalMesh_Parms;
	SetSkeletalMesh_Parms.NewMesh = NewMesh;
	SetSkeletalMesh_Parms.bKeepSpaceBases = bKeepSpaceBases;

	pFnSetSkeletalMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSkeletalMesh, &SetSkeletalMesh_Parms, NULL );

	pFnSetSkeletalMesh->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.GetTransformMatrix
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FMatrix                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FMatrix USkeletalMeshComponent::GetTransformMatrix ( )
{
	static UFunction* pFnGetTransformMatrix = NULL;

	if ( ! pFnGetTransformMatrix )
		pFnGetTransformMatrix = (UFunction*) UObject::GObjObjects()->Data[ 10418 ];

	USkeletalMeshComponent_execGetTransformMatrix_Parms GetTransformMatrix_Parms;

	pFnGetTransformMatrix->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTransformMatrix, &GetTransformMatrix_Parms, NULL );

	pFnGetTransformMatrix->FunctionFlags |= 0x400;

	return GetTransformMatrix_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachedComponents
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UClass*                  BaseClass                      ( CPF_Parm )
// class UActorComponent*         OutComponent                   ( CPF_Parm | CPF_OutParm | CPF_EditInline )

void USkeletalMeshComponent::AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent )
{
	static UFunction* pFnAttachedComponents = NULL;

	if ( ! pFnAttachedComponents )
		pFnAttachedComponents = (UFunction*) UObject::GObjObjects()->Data[ 10415 ];

	USkeletalMeshComponent_execAttachedComponents_Parms AttachedComponents_Parms;
	AttachedComponents_Parms.BaseClass = BaseClass;

	pFnAttachedComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachedComponents, &AttachedComponents_Parms, NULL );

	pFnAttachedComponents->FunctionFlags |= 0x400;

	if ( OutComponent )
		*OutComponent = AttachedComponents_Parms.OutComponent;
};

// Function Engine.SkeletalMeshComponent.IsComponentAttached
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

bool USkeletalMeshComponent::IsComponentAttached ( class UActorComponent* Component, struct FName BoneName )
{
	static UFunction* pFnIsComponentAttached = NULL;

	if ( ! pFnIsComponentAttached )
		pFnIsComponentAttached = (UFunction*) UObject::GObjObjects()->Data[ 10411 ];

	USkeletalMeshComponent_execIsComponentAttached_Parms IsComponentAttached_Parms;
	IsComponentAttached_Parms.Component = Component;
	memcpy ( &IsComponentAttached_Parms.BoneName, &BoneName, 0x8 );

	pFnIsComponentAttached->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsComponentAttached, &IsComponentAttached_Parms, NULL );

	pFnIsComponentAttached->FunctionFlags |= 0x400;

	return IsComponentAttached_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// struct FName                   InBoneName                     ( CPF_Parm )

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone ( struct FName InBoneName )
{
	static UFunction* pFnFindComponentAttachedToBone = NULL;

	if ( ! pFnFindComponentAttachedToBone )
		pFnFindComponentAttachedToBone = (UFunction*) UObject::GObjObjects()->Data[ 10408 ];

	USkeletalMeshComponent_execFindComponentAttachedToBone_Parms FindComponentAttachedToBone_Parms;
	memcpy ( &FindComponentAttachedToBone_Parms.InBoneName, &InBoneName, 0x8 );

	pFnFindComponentAttachedToBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindComponentAttachedToBone, &FindComponentAttachedToBone_Parms, NULL );

	pFnFindComponentAttachedToBone->FunctionFlags |= 0x400;

	return FindComponentAttachedToBone_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

struct FName USkeletalMeshComponent::GetSocketBoneName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketBoneName = NULL;

	if ( ! pFnGetSocketBoneName )
		pFnGetSocketBoneName = (UFunction*) UObject::GObjObjects()->Data[ 10405 ];

	USkeletalMeshComponent_execGetSocketBoneName_Parms GetSocketBoneName_Parms;
	memcpy ( &GetSocketBoneName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketBoneName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketBoneName, &GetSocketBoneName_Parms, NULL );

	pFnGetSocketBoneName->FunctionFlags |= 0x400;

	return GetSocketBoneName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketByName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USkeletalMeshSocket*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName ( struct FName InSocketName )
{
	static UFunction* pFnGetSocketByName = NULL;

	if ( ! pFnGetSocketByName )
		pFnGetSocketByName = (UFunction*) UObject::GObjObjects()->Data[ 10402 ];

	USkeletalMeshComponent_execGetSocketByName_Parms GetSocketByName_Parms;
	memcpy ( &GetSocketByName_Parms.InSocketName, &InSocketName, 0x8 );

	pFnGetSocketByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketByName, &GetSocketByName_Parms, NULL );

	pFnGetSocketByName->FunctionFlags |= 0x400;

	return GetSocketByName_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )
// int                            Space                          ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutRotation                    ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation ( struct FName InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation )
{
	static UFunction* pFnGetSocketWorldLocationAndRotation = NULL;

	if ( ! pFnGetSocketWorldLocationAndRotation )
		pFnGetSocketWorldLocationAndRotation = (UFunction*) UObject::GObjObjects()->Data[ 10396 ];

	USkeletalMeshComponent_execGetSocketWorldLocationAndRotation_Parms GetSocketWorldLocationAndRotation_Parms;
	memcpy ( &GetSocketWorldLocationAndRotation_Parms.InSocketName, &InSocketName, 0x8 );
	GetSocketWorldLocationAndRotation_Parms.Space = Space;

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSocketWorldLocationAndRotation, &GetSocketWorldLocationAndRotation_Parms, NULL );

	pFnGetSocketWorldLocationAndRotation->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &GetSocketWorldLocationAndRotation_Parms.OutLocation, 0xC );

	if ( OutRotation )
		memcpy ( OutRotation, &GetSocketWorldLocationAndRotation_Parms.OutRotation, 0xC );

	return GetSocketWorldLocationAndRotation_Parms.ReturnValue;
};

// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_Parm )

void USkeletalMeshComponent::AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName )
{
	static UFunction* pFnAttachComponentToSocket = NULL;

	if ( ! pFnAttachComponentToSocket )
		pFnAttachComponentToSocket = (UFunction*) UObject::GObjObjects()->Data[ 10393 ];

	USkeletalMeshComponent_execAttachComponentToSocket_Parms AttachComponentToSocket_Parms;
	AttachComponentToSocket_Parms.Component = Component;
	memcpy ( &AttachComponentToSocket_Parms.SocketName, &SocketName, 0x8 );

	pFnAttachComponentToSocket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponentToSocket, &AttachComponentToSocket_Parms, NULL );

	pFnAttachComponentToSocket->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.DetachComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )

void USkeletalMeshComponent::DetachComponent ( class UActorComponent* Component )
{
	static UFunction* pFnDetachComponent = NULL;

	if ( ! pFnDetachComponent )
		pFnDetachComponent = (UFunction*) UObject::GObjObjects()->Data[ 10391 ];

	USkeletalMeshComponent_execDetachComponent_Parms DetachComponent_Parms;
	DetachComponent_Parms.Component = Component;

	pFnDetachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetachComponent, &DetachComponent_Parms, NULL );

	pFnDetachComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMeshComponent.AttachComponent
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UActorComponent*         Component                      ( CPF_Parm | CPF_EditInline )
// struct FName                   BoneName                       ( CPF_Parm )
// struct FVector                 RelativeLocation               ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                RelativeRotation               ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 RelativeScale                  ( CPF_OptionalParm | CPF_Parm )

void USkeletalMeshComponent::AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale )
{
	static UFunction* pFnAttachComponent = NULL;

	if ( ! pFnAttachComponent )
		pFnAttachComponent = (UFunction*) UObject::GObjObjects()->Data[ 10385 ];

	USkeletalMeshComponent_execAttachComponent_Parms AttachComponent_Parms;
	AttachComponent_Parms.Component = Component;
	memcpy ( &AttachComponent_Parms.BoneName, &BoneName, 0x8 );
	memcpy ( &AttachComponent_Parms.RelativeLocation, &RelativeLocation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeRotation, &RelativeRotation, 0xC );
	memcpy ( &AttachComponent_Parms.RelativeScale, &RelativeScale, 0xC );

	pFnAttachComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachComponent, &AttachComponent_Parms, NULL );

	pFnAttachComponent->FunctionFlags |= 0x400;
};

// Function Engine.SkeletalMesh.HasSocket
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   InSocketName                   ( CPF_Parm )

bool USkeletalMesh::HasSocket ( struct FName InSocketName )
{
	static UFunction* pFnHasSocket = NULL;

	if ( ! pFnHasSocket )
		pFnHasSocket = (UFunction*) UObject::GObjObjects()->Data[ 33438 ];

	USkeletalMesh_execHasSocket_Parms HasSocket_Parms;
	memcpy ( &HasSocket_Parms.InSocketName, &InSocketName, 0x8 );

	this->ProcessEvent ( pFnHasSocket, &HasSocket_Parms, NULL );

	return HasSocket_Parms.ReturnValue;
};

// Function Engine.SplineActor.OnToggleHidden
// [0x00020102] 
// Parameters infos:
// class USeqAct_ToggleHidden*    Action                         ( CPF_Parm )

void ASplineActor::OnToggleHidden ( class USeqAct_ToggleHidden* Action )
{
	static UFunction* pFnOnToggleHidden = NULL;

	if ( ! pFnOnToggleHidden )
		pFnOnToggleHidden = (UFunction*) UObject::GObjObjects()->Data[ 34227 ];

	ASplineActor_execOnToggleHidden_Parms OnToggleHidden_Parms;
	OnToggleHidden_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggleHidden, &OnToggleHidden_Parms, NULL );
};

// Function Engine.SplineActor.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ASplineActor::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 34225 ];

	ASplineActor_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SplineActor.GetAllConnectedSplineActors
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class ASplineActor* >  OutSet                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASplineActor::GetAllConnectedSplineActors ( TArray< class ASplineActor* >* OutSet )
{
	static UFunction* pFnGetAllConnectedSplineActors = NULL;

	if ( ! pFnGetAllConnectedSplineActors )
		pFnGetAllConnectedSplineActors = (UFunction*) UObject::GObjObjects()->Data[ 34222 ];

	ASplineActor_execGetAllConnectedSplineActors_Parms GetAllConnectedSplineActors_Parms;

	pFnGetAllConnectedSplineActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllConnectedSplineActors, &GetAllConnectedSplineActors_Parms, NULL );

	pFnGetAllConnectedSplineActors->FunctionFlags |= 0x400;

	if ( OutSet )
		memcpy ( OutSet, &GetAllConnectedSplineActors_Parms.OutSet, 0xC );
};

// Function Engine.SplineActor.FindSplinePathTo
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASplineActor*            Goal                           ( CPF_Parm )
// TArray< class ASplineActor* >  OutRoute                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASplineActor::FindSplinePathTo ( class ASplineActor* Goal, TArray< class ASplineActor* >* OutRoute )
{
	static UFunction* pFnFindSplinePathTo = NULL;

	if ( ! pFnFindSplinePathTo )
		pFnFindSplinePathTo = (UFunction*) UObject::GObjObjects()->Data[ 34217 ];

	ASplineActor_execFindSplinePathTo_Parms FindSplinePathTo_Parms;
	FindSplinePathTo_Parms.Goal = Goal;

	pFnFindSplinePathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSplinePathTo, &FindSplinePathTo_Parms, NULL );

	pFnFindSplinePathTo->FunctionFlags |= 0x400;

	if ( OutRoute )
		memcpy ( OutRoute, &FindSplinePathTo_Parms.OutRoute, 0xC );

	return FindSplinePathTo_Parms.ReturnValue;
};

// Function Engine.SplineActor.GetBestConnectionInDirection
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 DesiredDir                     ( CPF_Parm )
// unsigned long                  bUseLinksFrom                  ( CPF_OptionalParm | CPF_Parm )

class ASplineActor* ASplineActor::GetBestConnectionInDirection ( struct FVector DesiredDir, unsigned long bUseLinksFrom )
{
	static UFunction* pFnGetBestConnectionInDirection = NULL;

	if ( ! pFnGetBestConnectionInDirection )
		pFnGetBestConnectionInDirection = (UFunction*) UObject::GObjObjects()->Data[ 34213 ];

	ASplineActor_execGetBestConnectionInDirection_Parms GetBestConnectionInDirection_Parms;
	memcpy ( &GetBestConnectionInDirection_Parms.DesiredDir, &DesiredDir, 0xC );
	GetBestConnectionInDirection_Parms.bUseLinksFrom = bUseLinksFrom;

	pFnGetBestConnectionInDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestConnectionInDirection, &GetBestConnectionInDirection_Parms, NULL );

	pFnGetBestConnectionInDirection->FunctionFlags |= 0x400;

	return GetBestConnectionInDirection_Parms.ReturnValue;
};

// Function Engine.SplineActor.GetRandomConnection
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUseLinksFrom                  ( CPF_OptionalParm | CPF_Parm )

class ASplineActor* ASplineActor::GetRandomConnection ( unsigned long bUseLinksFrom )
{
	static UFunction* pFnGetRandomConnection = NULL;

	if ( ! pFnGetRandomConnection )
		pFnGetRandomConnection = (UFunction*) UObject::GObjObjects()->Data[ 34210 ];

	ASplineActor_execGetRandomConnection_Parms GetRandomConnection_Parms;
	GetRandomConnection_Parms.bUseLinksFrom = bUseLinksFrom;

	pFnGetRandomConnection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRandomConnection, &GetRandomConnection_Parms, NULL );

	pFnGetRandomConnection->FunctionFlags |= 0x400;

	return GetRandomConnection_Parms.ReturnValue;
};

// Function Engine.SplineActor.BreakAllConnectionsFrom
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineActor::BreakAllConnectionsFrom ( )
{
	static UFunction* pFnBreakAllConnectionsFrom = NULL;

	if ( ! pFnBreakAllConnectionsFrom )
		pFnBreakAllConnectionsFrom = (UFunction*) UObject::GObjObjects()->Data[ 34209 ];

	ASplineActor_execBreakAllConnectionsFrom_Parms BreakAllConnectionsFrom_Parms;

	pFnBreakAllConnectionsFrom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakAllConnectionsFrom, &BreakAllConnectionsFrom_Parms, NULL );

	pFnBreakAllConnectionsFrom->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.BreakAllConnections
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineActor::BreakAllConnections ( )
{
	static UFunction* pFnBreakAllConnections = NULL;

	if ( ! pFnBreakAllConnections )
		pFnBreakAllConnections = (UFunction*) UObject::GObjObjects()->Data[ 34208 ];

	ASplineActor_execBreakAllConnections_Parms BreakAllConnections_Parms;

	pFnBreakAllConnections->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakAllConnections, &BreakAllConnections_Parms, NULL );

	pFnBreakAllConnections->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.BreakConnectionTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            NextActor                      ( CPF_Parm )

void ASplineActor::BreakConnectionTo ( class ASplineActor* NextActor )
{
	static UFunction* pFnBreakConnectionTo = NULL;

	if ( ! pFnBreakConnectionTo )
		pFnBreakConnectionTo = (UFunction*) UObject::GObjObjects()->Data[ 34206 ];

	ASplineActor_execBreakConnectionTo_Parms BreakConnectionTo_Parms;
	BreakConnectionTo_Parms.NextActor = NextActor;

	pFnBreakConnectionTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakConnectionTo, &BreakConnectionTo_Parms, NULL );

	pFnBreakConnectionTo->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.FindTargetForComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USplineComponent*        SplineComp                     ( CPF_Parm | CPF_EditInline )

class ASplineActor* ASplineActor::FindTargetForComponent ( class USplineComponent* SplineComp )
{
	static UFunction* pFnFindTargetForComponent = NULL;

	if ( ! pFnFindTargetForComponent )
		pFnFindTargetForComponent = (UFunction*) UObject::GObjObjects()->Data[ 34203 ];

	ASplineActor_execFindTargetForComponent_Parms FindTargetForComponent_Parms;
	FindTargetForComponent_Parms.SplineComp = SplineComp;

	pFnFindTargetForComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTargetForComponent, &FindTargetForComponent_Parms, NULL );

	pFnFindTargetForComponent->FunctionFlags |= 0x400;

	return FindTargetForComponent_Parms.ReturnValue;
};

// Function Engine.SplineActor.FindSplineComponentTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USplineComponent*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class ASplineActor*            NextActor                      ( CPF_Parm )

class USplineComponent* ASplineActor::FindSplineComponentTo ( class ASplineActor* NextActor )
{
	static UFunction* pFnFindSplineComponentTo = NULL;

	if ( ! pFnFindSplineComponentTo )
		pFnFindSplineComponentTo = (UFunction*) UObject::GObjObjects()->Data[ 34200 ];

	ASplineActor_execFindSplineComponentTo_Parms FindSplineComponentTo_Parms;
	FindSplineComponentTo_Parms.NextActor = NextActor;

	pFnFindSplineComponentTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSplineComponentTo, &FindSplineComponentTo_Parms, NULL );

	pFnFindSplineComponentTo->FunctionFlags |= 0x400;

	return FindSplineComponentTo_Parms.ReturnValue;
};

// Function Engine.SplineActor.IsConnectedTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASplineActor*            NextActor                      ( CPF_Parm )
// unsigned long                  bCheckForDisableDestination    ( CPF_Parm )

bool ASplineActor::IsConnectedTo ( class ASplineActor* NextActor, unsigned long bCheckForDisableDestination )
{
	static UFunction* pFnIsConnectedTo = NULL;

	if ( ! pFnIsConnectedTo )
		pFnIsConnectedTo = (UFunction*) UObject::GObjObjects()->Data[ 34196 ];

	ASplineActor_execIsConnectedTo_Parms IsConnectedTo_Parms;
	IsConnectedTo_Parms.NextActor = NextActor;
	IsConnectedTo_Parms.bCheckForDisableDestination = bCheckForDisableDestination;

	pFnIsConnectedTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsConnectedTo, &IsConnectedTo_Parms, NULL );

	pFnIsConnectedTo->FunctionFlags |= 0x400;

	return IsConnectedTo_Parms.ReturnValue;
};

// Function Engine.SplineActor.AddConnectionTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ASplineActor*            NextActor                      ( CPF_Parm )

void ASplineActor::AddConnectionTo ( class ASplineActor* NextActor )
{
	static UFunction* pFnAddConnectionTo = NULL;

	if ( ! pFnAddConnectionTo )
		pFnAddConnectionTo = (UFunction*) UObject::GObjObjects()->Data[ 34194 ];

	ASplineActor_execAddConnectionTo_Parms AddConnectionTo_Parms;
	AddConnectionTo_Parms.NextActor = NextActor;

	pFnAddConnectionTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddConnectionTo, &AddConnectionTo_Parms, NULL );

	pFnAddConnectionTo->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.UpdateConnectedSplineComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFinish                        ( CPF_Parm )

void ASplineActor::UpdateConnectedSplineComponents ( unsigned long bFinish )
{
	static UFunction* pFnUpdateConnectedSplineComponents = NULL;

	if ( ! pFnUpdateConnectedSplineComponents )
		pFnUpdateConnectedSplineComponents = (UFunction*) UObject::GObjObjects()->Data[ 34192 ];

	ASplineActor_execUpdateConnectedSplineComponents_Parms UpdateConnectedSplineComponents_Parms;
	UpdateConnectedSplineComponents_Parms.bFinish = bFinish;

	pFnUpdateConnectedSplineComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateConnectedSplineComponents, &UpdateConnectedSplineComponents_Parms, NULL );

	pFnUpdateConnectedSplineComponents->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.UpdateSplineComponents
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineActor::UpdateSplineComponents ( )
{
	static UFunction* pFnUpdateSplineComponents = NULL;

	if ( ! pFnUpdateSplineComponents )
		pFnUpdateSplineComponents = (UFunction*) UObject::GObjObjects()->Data[ 34191 ];

	ASplineActor_execUpdateSplineComponents_Parms UpdateSplineComponents_Parms;

	pFnUpdateSplineComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineComponents, &UpdateSplineComponents_Parms, NULL );

	pFnUpdateSplineComponents->FunctionFlags |= 0x400;
};

// Function Engine.SplineActor.GetWorldSpaceTangent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASplineActor::GetWorldSpaceTangent ( )
{
	static UFunction* pFnGetWorldSpaceTangent = NULL;

	if ( ! pFnGetWorldSpaceTangent )
		pFnGetWorldSpaceTangent = (UFunction*) UObject::GObjObjects()->Data[ 34189 ];

	ASplineActor_execGetWorldSpaceTangent_Parms GetWorldSpaceTangent_Parms;

	pFnGetWorldSpaceTangent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWorldSpaceTangent, &GetWorldSpaceTangent_Parms, NULL );

	pFnGetWorldSpaceTangent->FunctionFlags |= 0x400;

	return GetWorldSpaceTangent_Parms.ReturnValue;
};

// Function Engine.SplineLoftActor.UpdateSplineParams
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineLoftActor::UpdateSplineParams ( )
{
	static UFunction* pFnUpdateSplineParams = NULL;

	if ( ! pFnUpdateSplineParams )
		pFnUpdateSplineParams = (UFunction*) UObject::GObjObjects()->Data[ 34244 ];

	ASplineLoftActor_execUpdateSplineParams_Parms UpdateSplineParams_Parms;

	pFnUpdateSplineParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineParams, &UpdateSplineParams_Parms, NULL );

	pFnUpdateSplineParams->FunctionFlags |= 0x400;
};

// Function Engine.SplineLoftActor.ClearLoftMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ASplineLoftActor::ClearLoftMesh ( )
{
	static UFunction* pFnClearLoftMesh = NULL;

	if ( ! pFnClearLoftMesh )
		pFnClearLoftMesh = (UFunction*) UObject::GObjObjects()->Data[ 34243 ];

	ASplineLoftActor_execClearLoftMesh_Parms ClearLoftMesh_Parms;

	pFnClearLoftMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearLoftMesh, &ClearLoftMesh_Parms, NULL );

	pFnClearLoftMesh->FunctionFlags |= 0x400;
};

// Function Engine.SplineComponent.GetDistanceAlongSpline
// [0x00824003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Location                       ( CPF_Parm )
// unsigned long                  bClamp                         ( CPF_OptionalParm | CPF_Parm )

float USplineComponent::GetDistanceAlongSpline ( struct FVector Location, unsigned long bClamp )
{
	static UFunction* pFnGetDistanceAlongSpline = NULL;

	if ( ! pFnGetDistanceAlongSpline )
		pFnGetDistanceAlongSpline = (UFunction*) UObject::GObjObjects()->Data[ 13890 ];

	USplineComponent_execGetDistanceAlongSpline_Parms GetDistanceAlongSpline_Parms;
	memcpy ( &GetDistanceAlongSpline_Parms.Location, &Location, 0xC );
	GetDistanceAlongSpline_Parms.bClamp = bClamp;

	this->ProcessEvent ( pFnGetDistanceAlongSpline, &GetDistanceAlongSpline_Parms, NULL );

	return GetDistanceAlongSpline_Parms.ReturnValue;
};

// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Distance                       ( CPF_Parm )

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline ( float Distance )
{
	static UFunction* pFnGetTangentAtDistanceAlongSpline = NULL;

	if ( ! pFnGetTangentAtDistanceAlongSpline )
		pFnGetTangentAtDistanceAlongSpline = (UFunction*) UObject::GObjObjects()->Data[ 13887 ];

	USplineComponent_execGetTangentAtDistanceAlongSpline_Parms GetTangentAtDistanceAlongSpline_Parms;
	GetTangentAtDistanceAlongSpline_Parms.Distance = Distance;

	pFnGetTangentAtDistanceAlongSpline->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTangentAtDistanceAlongSpline, &GetTangentAtDistanceAlongSpline_Parms, NULL );

	pFnGetTangentAtDistanceAlongSpline->FunctionFlags |= 0x400;

	return GetTangentAtDistanceAlongSpline_Parms.ReturnValue;
};

// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Distance                       ( CPF_Parm )

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline ( float Distance )
{
	static UFunction* pFnGetLocationAtDistanceAlongSpline = NULL;

	if ( ! pFnGetLocationAtDistanceAlongSpline )
		pFnGetLocationAtDistanceAlongSpline = (UFunction*) UObject::GObjObjects()->Data[ 13884 ];

	USplineComponent_execGetLocationAtDistanceAlongSpline_Parms GetLocationAtDistanceAlongSpline_Parms;
	GetLocationAtDistanceAlongSpline_Parms.Distance = Distance;

	pFnGetLocationAtDistanceAlongSpline->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocationAtDistanceAlongSpline, &GetLocationAtDistanceAlongSpline_Parms, NULL );

	pFnGetLocationAtDistanceAlongSpline->FunctionFlags |= 0x400;

	return GetLocationAtDistanceAlongSpline_Parms.ReturnValue;
};

// Function Engine.SplineComponent.GetSplineLength
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USplineComponent::GetSplineLength ( )
{
	static UFunction* pFnGetSplineLength = NULL;

	if ( ! pFnGetSplineLength )
		pFnGetSplineLength = (UFunction*) UObject::GObjObjects()->Data[ 13882 ];

	USplineComponent_execGetSplineLength_Parms GetSplineLength_Parms;

	pFnGetSplineLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSplineLength, &GetSplineLength_Parms, NULL );

	pFnGetSplineLength->FunctionFlags |= 0x400;

	return GetSplineLength_Parms.ReturnValue;
};

// Function Engine.SplineComponent.UpdateSplineReparamTable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USplineComponent::UpdateSplineReparamTable ( )
{
	static UFunction* pFnUpdateSplineReparamTable = NULL;

	if ( ! pFnUpdateSplineReparamTable )
		pFnUpdateSplineReparamTable = (UFunction*) UObject::GObjObjects()->Data[ 13881 ];

	USplineComponent_execUpdateSplineReparamTable_Parms UpdateSplineReparamTable_Parms;

	pFnUpdateSplineReparamTable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineReparamTable, &UpdateSplineReparamTable_Parms, NULL );

	pFnUpdateSplineReparamTable->FunctionFlags |= 0x400;
};

// Function Engine.SplineComponent.UpdateSplineCurviness
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USplineComponent::UpdateSplineCurviness ( )
{
	static UFunction* pFnUpdateSplineCurviness = NULL;

	if ( ! pFnUpdateSplineCurviness )
		pFnUpdateSplineCurviness = (UFunction*) UObject::GObjObjects()->Data[ 13880 ];

	USplineComponent_execUpdateSplineCurviness_Parms UpdateSplineCurviness_Parms;

	pFnUpdateSplineCurviness->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplineCurviness, &UpdateSplineCurviness_Parms, NULL );

	pFnUpdateSplineCurviness->FunctionFlags |= 0x400;
};

// Function Engine.ProcBuilding.FindEdgeForTopLevelScope
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TopLevelScopeIndex             ( CPF_Parm )
// unsigned char                  Edge                           ( CPF_Parm )

int AProcBuilding::FindEdgeForTopLevelScope ( int TopLevelScopeIndex, unsigned char Edge )
{
	static UFunction* pFnFindEdgeForTopLevelScope = NULL;

	if ( ! pFnFindEdgeForTopLevelScope )
		pFnFindEdgeForTopLevelScope = (UFunction*) UObject::GObjObjects()->Data[ 30758 ];

	AProcBuilding_execFindEdgeForTopLevelScope_Parms FindEdgeForTopLevelScope_Parms;
	FindEdgeForTopLevelScope_Parms.TopLevelScopeIndex = TopLevelScopeIndex;
	FindEdgeForTopLevelScope_Parms.Edge = Edge;

	pFnFindEdgeForTopLevelScope->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindEdgeForTopLevelScope, &FindEdgeForTopLevelScope_Parms, NULL );

	pFnFindEdgeForTopLevelScope->FunctionFlags |= 0x400;

	return FindEdgeForTopLevelScope_Parms.ReturnValue;
};

// Function Engine.ProcBuilding.BreakFractureComponent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UFracturedStaticMeshComponent* Comp                           ( CPF_Parm | CPF_EditInline )
// struct FVector                 BoxMin                         ( CPF_Parm )
// struct FVector                 BoxMax                         ( CPF_Parm )

void AProcBuilding::BreakFractureComponent ( class UFracturedStaticMeshComponent* Comp, struct FVector BoxMin, struct FVector BoxMax )
{
	static UFunction* pFnBreakFractureComponent = NULL;

	if ( ! pFnBreakFractureComponent )
		pFnBreakFractureComponent = (UFunction*) UObject::GObjObjects()->Data[ 30759 ];

	AProcBuilding_execBreakFractureComponent_Parms BreakFractureComponent_Parms;
	BreakFractureComponent_Parms.Comp = Comp;
	memcpy ( &BreakFractureComponent_Parms.BoxMin, &BoxMin, 0xC );
	memcpy ( &BreakFractureComponent_Parms.BoxMax, &BoxMax, 0xC );

	pFnBreakFractureComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBreakFractureComponent, &BreakFractureComponent_Parms, NULL );

	pFnBreakFractureComponent->FunctionFlags |= 0x400;
};

// Function Engine.ProcBuilding.GetAllGroupedProcBuildings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< class AProcBuilding* > OutSet                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AProcBuilding::GetAllGroupedProcBuildings ( TArray< class AProcBuilding* >* OutSet )
{
	static UFunction* pFnGetAllGroupedProcBuildings = NULL;

	if ( ! pFnGetAllGroupedProcBuildings )
		pFnGetAllGroupedProcBuildings = (UFunction*) UObject::GObjObjects()->Data[ 30765 ];

	AProcBuilding_execGetAllGroupedProcBuildings_Parms GetAllGroupedProcBuildings_Parms;

	pFnGetAllGroupedProcBuildings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAllGroupedProcBuildings, &GetAllGroupedProcBuildings_Parms, NULL );

	pFnGetAllGroupedProcBuildings->FunctionFlags |= 0x400;

	if ( OutSet )
		memcpy ( OutSet, &GetAllGroupedProcBuildings_Parms.OutSet, 0xC );
};

// Function Engine.ProcBuilding.GetBaseMostBuilding
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AProcBuilding*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProcBuilding* AProcBuilding::GetBaseMostBuilding ( )
{
	static UFunction* pFnGetBaseMostBuilding = NULL;

	if ( ! pFnGetBaseMostBuilding )
		pFnGetBaseMostBuilding = (UFunction*) UObject::GObjObjects()->Data[ 30769 ];

	AProcBuilding_execGetBaseMostBuilding_Parms GetBaseMostBuilding_Parms;

	pFnGetBaseMostBuilding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseMostBuilding, &GetBaseMostBuilding_Parms, NULL );

	pFnGetBaseMostBuilding->FunctionFlags |= 0x400;

	return GetBaseMostBuilding_Parms.ReturnValue;
};

// Function Engine.ProcBuilding.FindComponentsForTopLevelScope
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class UStaticMeshComponent* > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink | CPF_EditInline )
// int                            TopLevelScopeIndex             ( CPF_Parm )

TArray< class UStaticMeshComponent* > AProcBuilding::FindComponentsForTopLevelScope ( int TopLevelScopeIndex )
{
	static UFunction* pFnFindComponentsForTopLevelScope = NULL;

	if ( ! pFnFindComponentsForTopLevelScope )
		pFnFindComponentsForTopLevelScope = (UFunction*) UObject::GObjObjects()->Data[ 30772 ];

	AProcBuilding_execFindComponentsForTopLevelScope_Parms FindComponentsForTopLevelScope_Parms;
	FindComponentsForTopLevelScope_Parms.TopLevelScopeIndex = TopLevelScopeIndex;

	pFnFindComponentsForTopLevelScope->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindComponentsForTopLevelScope, &FindComponentsForTopLevelScope_Parms, NULL );

	pFnFindComponentsForTopLevelScope->FunctionFlags |= 0x400;

	return FindComponentsForTopLevelScope_Parms.ReturnValue;
};

// Function Engine.ProcBuilding.ClearBuildingMeshes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AProcBuilding::ClearBuildingMeshes ( )
{
	static UFunction* pFnClearBuildingMeshes = NULL;

	if ( ! pFnClearBuildingMeshes )
		pFnClearBuildingMeshes = (UFunction*) UObject::GObjObjects()->Data[ 30774 ];

	AProcBuilding_execClearBuildingMeshes_Parms ClearBuildingMeshes_Parms;

	pFnClearBuildingMeshes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBuildingMeshes, &ClearBuildingMeshes_Parms, NULL );

	pFnClearBuildingMeshes->FunctionFlags |= 0x400;
};

// Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UPBRuleNodeMesh::PickRandomBuildingMesh ( )
{
	static UFunction* pFnPickRandomBuildingMesh = NULL;

	if ( ! pFnPickRandomBuildingMesh )
		pFnPickRandomBuildingMesh = (UFunction*) UObject::GObjObjects()->Data[ 30930 ];

	UPBRuleNodeMesh_execPickRandomBuildingMesh_Parms PickRandomBuildingMesh_Parms;

	pFnPickRandomBuildingMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickRandomBuildingMesh, &PickRandomBuildingMesh_Parms, NULL );

	pFnPickRandomBuildingMesh->FunctionFlags |= 0x400;

	return PickRandomBuildingMesh_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.ShouldShowGore
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::eventShouldShowGore ( )
{
	static UFunction* pFnShouldShowGore = NULL;

	if ( ! pFnShouldShowGore )
		pFnShouldShowGore = (UFunction*) UObject::GObjObjects()->Data[ 10733 ];

	AGameReplicationInfo_eventShouldShowGore_Parms ShouldShowGore_Parms;

	this->ProcessEvent ( pFnShouldShowGore, &ShouldShowGore_Parms, NULL );

	return ShouldShowGore_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsCoopMultiplayerGame ( )
{
	static UFunction* pFnIsCoopMultiplayerGame = NULL;

	if ( ! pFnIsCoopMultiplayerGame )
		pFnIsCoopMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 22431 ];

	AGameReplicationInfo_execIsCoopMultiplayerGame_Parms IsCoopMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsCoopMultiplayerGame, &IsCoopMultiplayerGame_Parms, NULL );

	return IsCoopMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.IsMultiplayerGame
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AGameReplicationInfo::IsMultiplayerGame ( )
{
	static UFunction* pFnIsMultiplayerGame = NULL;

	if ( ! pFnIsMultiplayerGame )
		pFnIsMultiplayerGame = (UFunction*) UObject::GObjObjects()->Data[ 22429 ];

	AGameReplicationInfo_execIsMultiplayerGame_Parms IsMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsMultiplayerGame, &IsMultiplayerGame_Parms, NULL );

	return IsMultiplayerGame_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.EndGame
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::EndGame ( )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = (UFunction*) UObject::GObjObjects()->Data[ 22428 ];

	AGameReplicationInfo_execEndGame_Parms EndGame_Parms;

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function Engine.GameReplicationInfo.StartMatch
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 22427 ];

	AGameReplicationInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function Engine.GameReplicationInfo.SetTeam
// [0x00020102] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ATeamInfo*               TI                             ( CPF_Parm )

void AGameReplicationInfo::SetTeam ( int Index, class ATeamInfo* TI )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = (UFunction*) UObject::GObjObjects()->Data[ 22424 ];

	AGameReplicationInfo_execSetTeam_Parms SetTeam_Parms;
	SetTeam_Parms.Index = Index;
	SetTeam_Parms.TI = TI;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function Engine.GameReplicationInfo.RemovePRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::RemovePRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnRemovePRI = NULL;

	if ( ! pFnRemovePRI )
		pFnRemovePRI = (UFunction*) UObject::GObjObjects()->Data[ 22421 ];

	AGameReplicationInfo_execRemovePRI_Parms RemovePRI_Parms;
	RemovePRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnRemovePRI, &RemovePRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.AddPRI
// [0x00020102] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void AGameReplicationInfo::AddPRI ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnAddPRI = NULL;

	if ( ! pFnAddPRI )
		pFnAddPRI = (UFunction*) UObject::GObjObjects()->Data[ 22418 ];

	AGameReplicationInfo_execAddPRI_Parms AddPRI_Parms;
	AddPRI_Parms.PRI = PRI;

	this->ProcessEvent ( pFnAddPRI, &AddPRI_Parms, NULL );
};

// Function Engine.GameReplicationInfo.OnSameTeam
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )
// class AActor*                  B                              ( CPF_Parm )

bool AGameReplicationInfo::OnSameTeam ( class AActor* A, class AActor* B )
{
	static UFunction* pFnOnSameTeam = NULL;

	if ( ! pFnOnSameTeam )
		pFnOnSameTeam = (UFunction*) UObject::GObjObjects()->Data[ 22414 ];

	AGameReplicationInfo_execOnSameTeam_Parms OnSameTeam_Parms;
	OnSameTeam_Parms.A = A;
	OnSameTeam_Parms.B = B;

	pFnOnSameTeam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSameTeam, &OnSameTeam_Parms, NULL );

	pFnOnSameTeam->FunctionFlags |= 0x400;

	return OnSameTeam_Parms.ReturnValue;
};

// Function Engine.GameReplicationInfo.Timer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 22413 ];

	AGameReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.GameReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void AGameReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 22412 ];

	AGameReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReceivedGameClass
// [0x00020102] 
// Parameters infos:

void AGameReplicationInfo::ReceivedGameClass ( )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = (UFunction*) UObject::GObjObjects()->Data[ 22410 ];

	AGameReplicationInfo_execReceivedGameClass_Parms ReceivedGameClass_Parms;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function Engine.GameReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AGameReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 22408 ];

	AGameReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.GameReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AGameReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22405 ];

	AGameReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsPrimaryPlayer
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsPrimaryPlayer ( )
{
	static UFunction* pFnIsPrimaryPlayer = NULL;

	if ( ! pFnIsPrimaryPlayer )
		pFnIsPrimaryPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11181 ];

	APlayerReplicationInfo_execIsPrimaryPlayer_Parms IsPrimaryPlayer_Parms;

	this->ProcessEvent ( pFnIsPrimaryPlayer, &IsPrimaryPlayer_Parms, NULL );

	return IsPrimaryPlayer_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession
// [0x00820102] 
// Parameters infos:

void APlayerReplicationInfo::UnregisterPlayerFromSession ( )
{
	static UFunction* pFnUnregisterPlayerFromSession = NULL;

	if ( ! pFnUnregisterPlayerFromSession )
		pFnUnregisterPlayerFromSession = (UFunction*) UObject::GObjObjects()->Data[ 31437 ];

	APlayerReplicationInfo_execUnregisterPlayerFromSession_Parms UnregisterPlayerFromSession_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerFromSession, &UnregisterPlayerFromSession_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession
// [0x00820102] 
// Parameters infos:

void APlayerReplicationInfo::RegisterPlayerWithSession ( )
{
	static UFunction* pFnRegisterPlayerWithSession = NULL;

	if ( ! pFnRegisterPlayerWithSession )
		pFnRegisterPlayerWithSession = (UFunction*) UObject::GObjObjects()->Data[ 31433 ];

	APlayerReplicationInfo_execRegisterPlayerWithSession_Parms RegisterPlayerWithSession_Parms;

	this->ProcessEvent ( pFnRegisterPlayerWithSession, &RegisterPlayerWithSession_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IsInvalidName
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool APlayerReplicationInfo::IsInvalidName ( )
{
	static UFunction* pFnIsInvalidName = NULL;

	if ( ! pFnIsInvalidName )
		pFnIsInvalidName = (UFunction*) UObject::GObjObjects()->Data[ 31427 ];

	APlayerReplicationInfo_execIsInvalidName_Parms IsInvalidName_Parms;

	this->ProcessEvent ( pFnIsInvalidName, &IsInvalidName_Parms, NULL );

	return IsInvalidName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char APlayerReplicationInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 31425 ];

	APlayerReplicationInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SetUniqueId
// [0x00020102] 
// Parameters infos:
// struct FUniqueNetId            PlayerUniqueId                 ( CPF_Parm )

void APlayerReplicationInfo::SetUniqueId ( struct FUniqueNetId PlayerUniqueId )
{
	static UFunction* pFnSetUniqueId = NULL;

	if ( ! pFnSetUniqueId )
		pFnSetUniqueId = (UFunction*) UObject::GObjObjects()->Data[ 31423 ];

	APlayerReplicationInfo_execSetUniqueId_Parms SetUniqueId_Parms;
	memcpy ( &SetUniqueId_Parms.PlayerUniqueId, &PlayerUniqueId, 0x48 );

	this->ProcessEvent ( pFnSetUniqueId, &SetUniqueId_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  NewPRI                         ( CPF_Parm )

void APlayerReplicationInfo::SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI )
{
	static UFunction* pFnSeamlessTravelTo = NULL;

	if ( ! pFnSeamlessTravelTo )
		pFnSeamlessTravelTo = (UFunction*) UObject::GObjObjects()->Data[ 31421 ];

	APlayerReplicationInfo_execSeamlessTravelTo_Parms SeamlessTravelTo_Parms;
	SeamlessTravelTo_Parms.NewPRI = NewPRI;

	this->ProcessEvent ( pFnSeamlessTravelTo, &SeamlessTravelTo_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.IncrementDeaths
// [0x00024002] 
// Parameters infos:
// int                            Amt                            ( CPF_OptionalParm | CPF_Parm )

void APlayerReplicationInfo::IncrementDeaths ( int Amt )
{
	static UFunction* pFnIncrementDeaths = NULL;

	if ( ! pFnIncrementDeaths )
		pFnIncrementDeaths = (UFunction*) UObject::GObjObjects()->Data[ 31419 ];

	APlayerReplicationInfo_execIncrementDeaths_Parms IncrementDeaths_Parms;
	IncrementDeaths_Parms.Amt = Amt;

	this->ProcessEvent ( pFnIncrementDeaths, &IncrementDeaths_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.CopyProperties
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::CopyProperties ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnCopyProperties = NULL;

	if ( ! pFnCopyProperties )
		pFnCopyProperties = (UFunction*) UObject::GObjObjects()->Data[ 31417 ];

	APlayerReplicationInfo_execCopyProperties_Parms CopyProperties_Parms;
	CopyProperties_Parms.PRI = PRI;

	this->ProcessEvent ( pFnCopyProperties, &CopyProperties_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.OverrideWith
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  PRI                            ( CPF_Parm )

void APlayerReplicationInfo::OverrideWith ( class APlayerReplicationInfo* PRI )
{
	static UFunction* pFnOverrideWith = NULL;

	if ( ! pFnOverrideWith )
		pFnOverrideWith = (UFunction*) UObject::GObjObjects()->Data[ 31415 ];

	APlayerReplicationInfo_execOverrideWith_Parms OverrideWith_Parms;
	OverrideWith_Parms.PRI = PRI;

	this->ProcessEvent ( pFnOverrideWith, &OverrideWith_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Duplicate
// [0x00020002] 
// Parameters infos:
// class APlayerReplicationInfo*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate ( )
{
	static UFunction* pFnDuplicate = NULL;

	if ( ! pFnDuplicate )
		pFnDuplicate = (UFunction*) UObject::GObjObjects()->Data[ 21681 ];

	APlayerReplicationInfo_execDuplicate_Parms Duplicate_Parms;

	this->ProcessEvent ( pFnDuplicate, &Duplicate_Parms, NULL );

	return Duplicate_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// [0x00020002] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void APlayerReplicationInfo::SetWaitingPlayer ( unsigned long B )
{
	static UFunction* pFnSetWaitingPlayer = NULL;

	if ( ! pFnSetWaitingPlayer )
		pFnSetWaitingPlayer = (UFunction*) UObject::GObjObjects()->Data[ 31412 ];

	APlayerReplicationInfo_execSetWaitingPlayer_Parms SetWaitingPlayer_Parms;
	SetWaitingPlayer_Parms.B = B;

	this->ProcessEvent ( pFnSetWaitingPlayer, &SetWaitingPlayer_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.SetPlayerName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void APlayerReplicationInfo::eventSetPlayerName ( struct FString S )
{
	static UFunction* pFnSetPlayerName = NULL;

	if ( ! pFnSetPlayerName )
		pFnSetPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 31410 ];

	APlayerReplicationInfo_eventSetPlayerName_Parms SetPlayerName_Parms;
	memcpy ( &SetPlayerName_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetPlayerName, &SetPlayerName_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          YL                             ( CPF_Parm | CPF_OutParm )
// float                          YPos                           ( CPF_Parm | CPF_OutParm )

void APlayerReplicationInfo::DisplayDebug ( class AHUD* HUD, float* YL, float* YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 31404 ];

	APlayerReplicationInfo_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( YL )
		*YL = DisplayDebug_Parms.YL;

	if ( YPos )
		*YPos = DisplayDebug_Parms.YPos;
};

// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APlayerReplicationInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 31402 ];

	APlayerReplicationInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.Reset
// [0x00020002] 
// Parameters infos:

void APlayerReplicationInfo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 31401 ];

	APlayerReplicationInfo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 31400 ];

	APlayerReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.Unregister
// [0x00820102] 
// Parameters infos:

void APlayerReplicationInfo::Unregister ( )
{
	static UFunction* pFnUnregister = NULL;

	if ( ! pFnUnregister )
		pFnUnregister = (UFunction*) UObject::GObjObjects()->Data[ 31397 ];

	APlayerReplicationInfo_execUnregister_Parms Unregister_Parms;

	this->ProcessEvent ( pFnUnregister, &Unregister_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// [0x00024102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bExiting                       ( CPF_OptionalParm | CPF_Parm )

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage ( unsigned long bExiting )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 31394 ];

	APlayerReplicationInfo_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;
	ShouldBroadCastWelcomeMessage_Parms.bExiting = bExiting;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );

	return ShouldBroadCastWelcomeMessage_Parms.ReturnValue;
};

// Function Engine.PlayerReplicationInfo.UpdatePing
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          TimeStamp                      ( CPF_Parm )

void APlayerReplicationInfo::UpdatePing ( float TimeStamp )
{
	static UFunction* pFnUpdatePing = NULL;

	if ( ! pFnUpdatePing )
		pFnUpdatePing = (UFunction*) UObject::GObjObjects()->Data[ 11646 ];

	APlayerReplicationInfo_execUpdatePing_Parms UpdatePing_Parms;
	UpdatePing_Parms.TimeStamp = TimeStamp;

	pFnUpdatePing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePing, &UpdatePing_Parms, NULL );

	pFnUpdatePing->FunctionFlags |= 0x400;
};

// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void APlayerReplicationInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 31388 ];

	APlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.RemoteUserDataReplicated
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void APlayerReplicationInfo::RemoteUserDataReplicated ( )
{
	static UFunction* pFnRemoteUserDataReplicated = NULL;

	if ( ! pFnRemoteUserDataReplicated )
		pFnRemoteUserDataReplicated = (UFunction*) UObject::GObjObjects()->Data[ 31387 ];

	APlayerReplicationInfo_execRemoteUserDataReplicated_Parms RemoteUserDataReplicated_Parms;

	pFnRemoteUserDataReplicated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoteUserDataReplicated, &RemoteUserDataReplicated_Parms, NULL );

	pFnRemoteUserDataReplicated->FunctionFlags |= 0x400;
};

// Function Engine.PlayerReplicationInfo.SetPlayerTeam
// [0x00020002] 
// Parameters infos:
// class ATeamInfo*               NewTeam                        ( CPF_Parm )

void APlayerReplicationInfo::SetPlayerTeam ( class ATeamInfo* NewTeam )
{
	static UFunction* pFnSetPlayerTeam = NULL;

	if ( ! pFnSetPlayerTeam )
		pFnSetPlayerTeam = (UFunction*) UObject::GObjObjects()->Data[ 31385 ];

	APlayerReplicationInfo_execSetPlayerTeam_Parms SetPlayerTeam_Parms;
	SetPlayerTeam_Parms.NewTeam = NewTeam;

	this->ProcessEvent ( pFnSetPlayerTeam, &SetPlayerTeam_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ClientInitialize
// [0x00020102] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )

void APlayerReplicationInfo::ClientInitialize ( class AController* C )
{
	static UFunction* pFnClientInitialize = NULL;

	if ( ! pFnClientInitialize )
		pFnClientInitialize = (UFunction*) UObject::GObjObjects()->Data[ 31383 ];

	APlayerReplicationInfo_execClientInitialize_Parms ClientInitialize_Parms;
	ClientInitialize_Parms.C = C;

	this->ProcessEvent ( pFnClientInitialize, &ClientInitialize_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.UpdateRemoteUserData
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FPRIRemoteUserData      Data                           ( CPF_Parm | CPF_NeedCtorLink )

void APlayerReplicationInfo::eventUpdateRemoteUserData ( struct FPRIRemoteUserData Data )
{
	static UFunction* pFnUpdateRemoteUserData = NULL;

	if ( ! pFnUpdateRemoteUserData )
		pFnUpdateRemoteUserData = (UFunction*) UObject::GObjObjects()->Data[ 31381 ];

	APlayerReplicationInfo_eventUpdateRemoteUserData_Parms UpdateRemoteUserData_Parms;
	memcpy ( &UpdateRemoteUserData_Parms.Data, &Data, 0xC );

	this->ProcessEvent ( pFnUpdateRemoteUserData, &UpdateRemoteUserData_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ServerUpdateRemoteUserData
// [0x002200C2] 
// Parameters infos:
// struct FPRIRemoteUserData      Data                           ( CPF_Parm | CPF_NeedCtorLink )

void APlayerReplicationInfo::ServerUpdateRemoteUserData ( struct FPRIRemoteUserData Data )
{
	static UFunction* pFnServerUpdateRemoteUserData = NULL;

	if ( ! pFnServerUpdateRemoteUserData )
		pFnServerUpdateRemoteUserData = (UFunction*) UObject::GObjObjects()->Data[ 31379 ];

	APlayerReplicationInfo_execServerUpdateRemoteUserData_Parms ServerUpdateRemoteUserData_Parms;
	memcpy ( &ServerUpdateRemoteUserData_Parms.Data, &Data, 0xC );

	this->ProcessEvent ( pFnServerUpdateRemoteUserData, &ServerUpdateRemoteUserData_Parms, NULL );
};

// Function Engine.PlayerReplicationInfo.ClientFillRemoteUserData
// [0x01020DC0] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void APlayerReplicationInfo::eventClientFillRemoteUserData ( )
{
	static UFunction* pFnClientFillRemoteUserData = NULL;

	if ( ! pFnClientFillRemoteUserData )
		pFnClientFillRemoteUserData = (UFunction*) UObject::GObjObjects()->Data[ 31378 ];

	APlayerReplicationInfo_eventClientFillRemoteUserData_Parms ClientFillRemoteUserData_Parms;

	pFnClientFillRemoteUserData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientFillRemoteUserData, &ClientFillRemoteUserData_Parms, NULL );

	pFnClientFillRemoteUserData->FunctionFlags |= 0x400;
};

// Function Engine.PlayerReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void APlayerReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31377 ];

	APlayerReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.TeamInfo.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ATeamInfo::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = (UFunction*) UObject::GObjObjects()->Data[ 34821 ];

	ATeamInfo_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;

	return GetTeamNum_Parms.ReturnValue;
};

// Function Engine.TeamInfo.GetHumanReadableName
// [0x00020102] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ATeamInfo::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = (UFunction*) UObject::GObjObjects()->Data[ 21921 ];

	ATeamInfo_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );

	return GetHumanReadableName_Parms.ReturnValue;
};

// Function Engine.TeamInfo.RemoveFromTeam
// [0x00020002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ATeamInfo::RemoveFromTeam ( class AController* Other )
{
	static UFunction* pFnRemoveFromTeam = NULL;

	if ( ! pFnRemoveFromTeam )
		pFnRemoveFromTeam = (UFunction*) UObject::GObjObjects()->Data[ 34819 ];

	ATeamInfo_execRemoveFromTeam_Parms RemoveFromTeam_Parms;
	RemoveFromTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnRemoveFromTeam, &RemoveFromTeam_Parms, NULL );
};

// Function Engine.TeamInfo.AddToTeam
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool ATeamInfo::AddToTeam ( class AController* Other )
{
	static UFunction* pFnAddToTeam = NULL;

	if ( ! pFnAddToTeam )
		pFnAddToTeam = (UFunction*) UObject::GObjObjects()->Data[ 34816 ];

	ATeamInfo_execAddToTeam_Parms AddToTeam_Parms;
	AddToTeam_Parms.Other = Other;

	this->ProcessEvent ( pFnAddToTeam, &AddToTeam_Parms, NULL );

	return AddToTeam_Parms.ReturnValue;
};

// Function Engine.TeamInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ATeamInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 34814 ];

	ATeamInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.TeamInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void ATeamInfo::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 34812 ];

	ATeamInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.Camera.SetCameraFade
// [0x00024002] 
// Parameters infos:
// unsigned long                  bNewEnableFading               ( CPF_Parm )
// struct FColor                  NewFadeColor                   ( CPF_OptionalParm | CPF_Parm )
// struct FVector2D               NewFadeAlpha                   ( CPF_OptionalParm | CPF_Parm )
// float                          NewFadeTime                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bNewFadeAudio                  ( CPF_OptionalParm | CPF_Parm )

void ACamera::SetCameraFade ( unsigned long bNewEnableFading, struct FColor NewFadeColor, struct FVector2D NewFadeAlpha, float NewFadeTime, unsigned long bNewFadeAudio )
{
	static UFunction* pFnSetCameraFade = NULL;

	if ( ! pFnSetCameraFade )
		pFnSetCameraFade = (UFunction*) UObject::GObjObjects()->Data[ 10082 ];

	ACamera_execSetCameraFade_Parms SetCameraFade_Parms;
	SetCameraFade_Parms.bNewEnableFading = bNewEnableFading;
	memcpy ( &SetCameraFade_Parms.NewFadeColor, &NewFadeColor, 0x4 );
	memcpy ( &SetCameraFade_Parms.NewFadeAlpha, &NewFadeAlpha, 0x8 );
	SetCameraFade_Parms.NewFadeTime = NewFadeTime;
	SetCameraFade_Parms.bNewFadeAudio = bNewFadeAudio;

	this->ProcessEvent ( pFnSetCameraFade, &SetCameraFade_Parms, NULL );
};

// Function Engine.Camera.StopCameraAnim
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         AnimInst                       ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate )
{
	static UFunction* pFnStopCameraAnim = NULL;

	if ( ! pFnStopCameraAnim )
		pFnStopCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 10079 ];

	ACamera_execStopCameraAnim_Parms StopCameraAnim_Parms;
	StopCameraAnim_Parms.AnimInst = AnimInst;
	StopCameraAnim_Parms.bImmediate = bImmediate;

	pFnStopCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopCameraAnim, &StopCameraAnim_Parms, NULL );

	pFnStopCameraAnim->FunctionFlags |= 0x400;
};

// Function Engine.Camera.StopAllCameraAnimsByType
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate )
{
	static UFunction* pFnStopAllCameraAnimsByType = NULL;

	if ( ! pFnStopAllCameraAnimsByType )
		pFnStopAllCameraAnimsByType = (UFunction*) UObject::GObjObjects()->Data[ 10076 ];

	ACamera_execStopAllCameraAnimsByType_Parms StopAllCameraAnimsByType_Parms;
	StopAllCameraAnimsByType_Parms.Anim = Anim;
	StopAllCameraAnimsByType_Parms.bImmediate = bImmediate;

	pFnStopAllCameraAnimsByType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllCameraAnimsByType, &StopAllCameraAnimsByType_Parms, NULL );

	pFnStopAllCameraAnimsByType->FunctionFlags |= 0x400;
};

// Function Engine.Camera.StopAllCameraAnims
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void ACamera::StopAllCameraAnims ( unsigned long bImmediate )
{
	static UFunction* pFnStopAllCameraAnims = NULL;

	if ( ! pFnStopAllCameraAnims )
		pFnStopAllCameraAnims = (UFunction*) UObject::GObjObjects()->Data[ 10074 ];

	ACamera_execStopAllCameraAnims_Parms StopAllCameraAnims_Parms;
	StopAllCameraAnims_Parms.bImmediate = bImmediate;

	pFnStopAllCameraAnims->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllCameraAnims, &StopAllCameraAnims_Parms, NULL );

	pFnStopAllCameraAnims->FunctionFlags |= 0x400;
};

// Function Engine.Camera.PlayCameraAnim
// [0x00024500] ( FUNC_Native )
// Parameters infos:
// class UCameraAnimInst*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCameraAnim*             Anim                           ( CPF_Parm )
// float                          Rate                           ( CPF_OptionalParm | CPF_Parm )
// float                          Scale                          ( CPF_OptionalParm | CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLoop                          ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_OptionalParm | CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSingleInstance                ( CPF_OptionalParm | CPF_Parm )

class UCameraAnimInst* ACamera::PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = (UFunction*) UObject::GObjObjects()->Data[ 10063 ];

	ACamera_execPlayCameraAnim_Parms PlayCameraAnim_Parms;
	PlayCameraAnim_Parms.Anim = Anim;
	PlayCameraAnim_Parms.Rate = Rate;
	PlayCameraAnim_Parms.Scale = Scale;
	PlayCameraAnim_Parms.BlendInTime = BlendInTime;
	PlayCameraAnim_Parms.BlendOutTime = BlendOutTime;
	PlayCameraAnim_Parms.bLoop = bLoop;
	PlayCameraAnim_Parms.bRandomStartTime = bRandomStartTime;
	PlayCameraAnim_Parms.Duration = Duration;
	PlayCameraAnim_Parms.bSingleInstance = bSingleInstance;

	pFnPlayCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );

	pFnPlayCameraAnim->FunctionFlags |= 0x400;

	return PlayCameraAnim_Parms.ReturnValue;
};

// Function Engine.Camera.ClearAllCameraShakes
// [0x00020002] 
// Parameters infos:

void ACamera::ClearAllCameraShakes ( )
{
	static UFunction* pFnClearAllCameraShakes = NULL;

	if ( ! pFnClearAllCameraShakes )
		pFnClearAllCameraShakes = (UFunction*) UObject::GObjObjects()->Data[ 10062 ];

	ACamera_execClearAllCameraShakes_Parms ClearAllCameraShakes_Parms;

	this->ProcessEvent ( pFnClearAllCameraShakes, &ClearAllCameraShakes_Parms, NULL );
};

// Function Engine.Camera.PlayWorldCameraShake
// [0x00826002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )
// class AActor*                  ShakeInstigator                ( CPF_Parm )
// struct FVector                 Epicenter                      ( CPF_Parm )
// float                          InnerRadius                    ( CPF_Parm )
// float                          OuterRadius                    ( CPF_Parm )
// float                          Falloff                        ( CPF_Parm )
// unsigned long                  bTryForceFeedback              ( CPF_Parm )
// unsigned long                  bOrientShakeTowardsEpicenter   ( CPF_OptionalParm | CPF_Parm )

void ACamera::PlayWorldCameraShake ( class UCameraShake* Shake, class AActor* ShakeInstigator, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, unsigned long bTryForceFeedback, unsigned long bOrientShakeTowardsEpicenter )
{
	static UFunction* pFnPlayWorldCameraShake = NULL;

	if ( ! pFnPlayWorldCameraShake )
		pFnPlayWorldCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 10048 ];

	ACamera_execPlayWorldCameraShake_Parms PlayWorldCameraShake_Parms;
	PlayWorldCameraShake_Parms.Shake = Shake;
	PlayWorldCameraShake_Parms.ShakeInstigator = ShakeInstigator;
	memcpy ( &PlayWorldCameraShake_Parms.Epicenter, &Epicenter, 0xC );
	PlayWorldCameraShake_Parms.InnerRadius = InnerRadius;
	PlayWorldCameraShake_Parms.OuterRadius = OuterRadius;
	PlayWorldCameraShake_Parms.Falloff = Falloff;
	PlayWorldCameraShake_Parms.bTryForceFeedback = bTryForceFeedback;
	PlayWorldCameraShake_Parms.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	this->ProcessEvent ( pFnPlayWorldCameraShake, &PlayWorldCameraShake_Parms, NULL );
};

// Function Engine.Camera.CalcRadialShakeScale
// [0x00822002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Cam                            ( CPF_Parm )
// struct FVector                 Epicenter                      ( CPF_Parm )
// float                          InnerRadius                    ( CPF_Parm )
// float                          OuterRadius                    ( CPF_Parm )
// float                          Falloff                        ( CPF_Parm )

float ACamera::CalcRadialShakeScale ( class ACamera* Cam, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff )
{
	static UFunction* pFnCalcRadialShakeScale = NULL;

	if ( ! pFnCalcRadialShakeScale )
		pFnCalcRadialShakeScale = (UFunction*) UObject::GObjObjects()->Data[ 10039 ];

	ACamera_execCalcRadialShakeScale_Parms CalcRadialShakeScale_Parms;
	CalcRadialShakeScale_Parms.Cam = Cam;
	memcpy ( &CalcRadialShakeScale_Parms.Epicenter, &Epicenter, 0xC );
	CalcRadialShakeScale_Parms.InnerRadius = InnerRadius;
	CalcRadialShakeScale_Parms.OuterRadius = OuterRadius;
	CalcRadialShakeScale_Parms.Falloff = Falloff;

	this->ProcessEvent ( pFnCalcRadialShakeScale, &CalcRadialShakeScale_Parms, NULL );

	return CalcRadialShakeScale_Parms.ReturnValue;
};

// Function Engine.Camera.StopCameraShake
// [0x00020002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )

void ACamera::StopCameraShake ( class UCameraShake* Shake )
{
	static UFunction* pFnStopCameraShake = NULL;

	if ( ! pFnStopCameraShake )
		pFnStopCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 10037 ];

	ACamera_execStopCameraShake_Parms StopCameraShake_Parms;
	StopCameraShake_Parms.Shake = Shake;

	this->ProcessEvent ( pFnStopCameraShake, &StopCameraShake_Parms, NULL );
};

// Function Engine.Camera.PlayCameraShake
// [0x00024002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

void ACamera::PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnPlayCameraShake = NULL;

	if ( ! pFnPlayCameraShake )
		pFnPlayCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 10032 ];

	ACamera_execPlayCameraShake_Parms PlayCameraShake_Parms;
	PlayCameraShake_Parms.Shake = Shake;
	PlayCameraShake_Parms.Scale = Scale;
	PlayCameraShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &PlayCameraShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnPlayCameraShake, &PlayCameraShake_Parms, NULL );
};

// Function Engine.Camera.ClearCameraLensEffects
// [0x00020002] 
// Parameters infos:

void ACamera::ClearCameraLensEffects ( )
{
	static UFunction* pFnClearCameraLensEffects = NULL;

	if ( ! pFnClearCameraLensEffects )
		pFnClearCameraLensEffects = (UFunction*) UObject::GObjObjects()->Data[ 10030 ];

	ACamera_execClearCameraLensEffects_Parms ClearCameraLensEffects_Parms;

	this->ProcessEvent ( pFnClearCameraLensEffects, &ClearCameraLensEffects_Parms, NULL );
};

// Function Engine.Camera.RemoveCameraLensEffect
// [0x00020002] 
// Parameters infos:
// class AEmitterCameraLensEffectBase* Emitter                        ( CPF_Parm )

void ACamera::RemoveCameraLensEffect ( class AEmitterCameraLensEffectBase* Emitter )
{
	static UFunction* pFnRemoveCameraLensEffect = NULL;

	if ( ! pFnRemoveCameraLensEffect )
		pFnRemoveCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 10028 ];

	ACamera_execRemoveCameraLensEffect_Parms RemoveCameraLensEffect_Parms;
	RemoveCameraLensEffect_Parms.Emitter = Emitter;

	this->ProcessEvent ( pFnRemoveCameraLensEffect, &RemoveCameraLensEffect_Parms, NULL );
};

// Function Engine.Camera.AddCameraLensEffect
// [0x00820002] 
// Parameters infos:
// class UClass*                  LensEffectEmitterClass         ( CPF_Parm )

void ACamera::AddCameraLensEffect ( class UClass* LensEffectEmitterClass )
{
	static UFunction* pFnAddCameraLensEffect = NULL;

	if ( ! pFnAddCameraLensEffect )
		pFnAddCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 10022 ];

	ACamera_execAddCameraLensEffect_Parms AddCameraLensEffect_Parms;
	AddCameraLensEffect_Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent ( pFnAddCameraLensEffect, &AddCameraLensEffect_Parms, NULL );
};

// Function Engine.Camera.FindCameraLensEffect
// [0x00020002] 
// Parameters infos:
// class AEmitterCameraLensEffectBase* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  LensEffectEmitterClass         ( CPF_Parm )

class AEmitterCameraLensEffectBase* ACamera::FindCameraLensEffect ( class UClass* LensEffectEmitterClass )
{
	static UFunction* pFnFindCameraLensEffect = NULL;

	if ( ! pFnFindCameraLensEffect )
		pFnFindCameraLensEffect = (UFunction*) UObject::GObjObjects()->Data[ 10017 ];

	ACamera_execFindCameraLensEffect_Parms FindCameraLensEffect_Parms;
	FindCameraLensEffect_Parms.LensEffectEmitterClass = LensEffectEmitterClass;

	this->ProcessEvent ( pFnFindCameraLensEffect, &FindCameraLensEffect_Parms, NULL );

	return FindCameraLensEffect_Parms.ReturnValue;
};

// Function Engine.Camera.DisplayDebug
// [0x00C20102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACamera::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 10010 ];

	ACamera_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.Camera.ProcessViewRotation
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                OutViewRotation                ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutDeltaRot                    ( CPF_Parm | CPF_OutParm )

void ACamera::ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 10003 ];

	ACamera_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( OutViewRotation )
		memcpy ( OutViewRotation, &ProcessViewRotation_Parms.OutViewRotation, 0xC );

	if ( OutDeltaRot )
		memcpy ( OutDeltaRot, &ProcessViewRotation_Parms.OutDeltaRot, 0xC );
};

// Function Engine.Camera.SetViewTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  NewViewTarget                  ( CPF_Parm )
// struct FViewTargetTransitionParams TransitionParams               ( CPF_OptionalParm | CPF_Parm )

void ACamera::SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 10000 ];

	ACamera_execSetViewTarget_Parms SetViewTarget_Parms;
	SetViewTarget_Parms.NewViewTarget = NewViewTarget;
	memcpy ( &SetViewTarget_Parms.TransitionParams, &TransitionParams, 0x10 );

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function Engine.Camera.UpdateViewTarget
// [0x00C20002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTViewTarget            OutVT                          ( CPF_Parm | CPF_OutParm )

void ACamera::UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT )
{
	static UFunction* pFnUpdateViewTarget = NULL;

	if ( ! pFnUpdateViewTarget )
		pFnUpdateViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 9982 ];

	ACamera_execUpdateViewTarget_Parms UpdateViewTarget_Parms;
	UpdateViewTarget_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateViewTarget, &UpdateViewTarget_Parms, NULL );

	if ( OutVT )
		memcpy ( OutVT, &UpdateViewTarget_Parms.OutVT, 0x2C );
};

// Function Engine.Camera.CheckViewTarget
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FTViewTarget            VT                             ( CPF_Parm | CPF_OutParm )

void ACamera::CheckViewTarget ( struct FTViewTarget* VT )
{
	static UFunction* pFnCheckViewTarget = NULL;

	if ( ! pFnCheckViewTarget )
		pFnCheckViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 9839 ];

	ACamera_execCheckViewTarget_Parms CheckViewTarget_Parms;

	pFnCheckViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckViewTarget, &CheckViewTarget_Parms, NULL );

	pFnCheckViewTarget->FunctionFlags |= 0x400;

	if ( VT )
		memcpy ( VT, &CheckViewTarget_Parms.VT, 0x2C );
};

// Function Engine.Camera.FillCameraCache
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FTPOV                   NewPOV                         ( CPF_Const | CPF_Parm | CPF_OutParm )

void ACamera::FillCameraCache ( struct FTPOV* NewPOV )
{
	static UFunction* pFnFillCameraCache = NULL;

	if ( ! pFnFillCameraCache )
		pFnFillCameraCache = (UFunction*) UObject::GObjObjects()->Data[ 9820 ];

	ACamera_execFillCameraCache_Parms FillCameraCache_Parms;

	this->ProcessEvent ( pFnFillCameraCache, &FillCameraCache_Parms, NULL );

	if ( NewPOV )
		memcpy ( NewPOV, &FillCameraCache_Parms.NewPOV, 0x1C );
};

// Function Engine.Camera.BlendViewTargets
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// struct FTPOV                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Alpha                          ( CPF_Parm )
// struct FTViewTarget            A                              ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FTViewTarget            B                              ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FTPOV ACamera::BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B )
{
	static UFunction* pFnBlendViewTargets = NULL;

	if ( ! pFnBlendViewTargets )
		pFnBlendViewTargets = (UFunction*) UObject::GObjObjects()->Data[ 9818 ];

	ACamera_execBlendViewTargets_Parms BlendViewTargets_Parms;
	BlendViewTargets_Parms.Alpha = Alpha;

	this->ProcessEvent ( pFnBlendViewTargets, &BlendViewTargets_Parms, NULL );

	if ( A )
		memcpy ( A, &BlendViewTargets_Parms.A, 0x2C );

	if ( B )
		memcpy ( B, &BlendViewTargets_Parms.B, 0x2C );

	return BlendViewTargets_Parms.ReturnValue;
};

// Function Engine.Camera.ApplyAudioFade
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ACamera::ApplyAudioFade ( )
{
	static UFunction* pFnApplyAudioFade = NULL;

	if ( ! pFnApplyAudioFade )
		pFnApplyAudioFade = (UFunction*) UObject::GObjObjects()->Data[ 9829 ];

	ACamera_execApplyAudioFade_Parms ApplyAudioFade_Parms;

	pFnApplyAudioFade->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyAudioFade, &ApplyAudioFade_Parms, NULL );

	pFnApplyAudioFade->FunctionFlags |= 0x400;
};

// Function Engine.Camera.UpdateFade
// [0x00080102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACamera::UpdateFade ( float DeltaTime )
{
	static UFunction* pFnUpdateFade = NULL;

	if ( ! pFnUpdateFade )
		pFnUpdateFade = (UFunction*) UObject::GObjObjects()->Data[ 9821 ];

	ACamera_execUpdateFade_Parms UpdateFade_Parms;
	UpdateFade_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateFade, &UpdateFade_Parms, NULL );
};

// Function Engine.Camera.DoUpdateCamera
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACamera::DoUpdateCamera ( float DeltaTime )
{
	static UFunction* pFnDoUpdateCamera = NULL;

	if ( ! pFnDoUpdateCamera )
		pFnDoUpdateCamera = (UFunction*) UObject::GObjObjects()->Data[ 9798 ];

	ACamera_execDoUpdateCamera_Parms DoUpdateCamera_Parms;
	DoUpdateCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnDoUpdateCamera, &DoUpdateCamera_Parms, NULL );
};

// Function Engine.Camera.UpdateCamera
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ACamera::eventUpdateCamera ( float DeltaTime )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = (UFunction*) UObject::GObjObjects()->Data[ 9792 ];

	ACamera_eventUpdateCamera_Parms UpdateCamera_Parms;
	UpdateCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function Engine.Camera.SetDesiredColorScale
// [0x00020102] 
// Parameters infos:
// struct FVector                 NewColorScale                  ( CPF_Parm )
// float                          InterpTime                     ( CPF_Parm )

void ACamera::SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime )
{
	static UFunction* pFnSetDesiredColorScale = NULL;

	if ( ! pFnSetDesiredColorScale )
		pFnSetDesiredColorScale = (UFunction*) UObject::GObjObjects()->Data[ 9782 ];

	ACamera_execSetDesiredColorScale_Parms SetDesiredColorScale_Parms;
	memcpy ( &SetDesiredColorScale_Parms.NewColorScale, &NewColorScale, 0xC );
	SetDesiredColorScale_Parms.InterpTime = InterpTime;

	this->ProcessEvent ( pFnSetDesiredColorScale, &SetDesiredColorScale_Parms, NULL );
};

// Function Engine.Camera.GetCameraRotation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ACamera::GetCameraRotation ( )
{
	static UFunction* pFnGetCameraRotation = NULL;

	if ( ! pFnGetCameraRotation )
		pFnGetCameraRotation = (UFunction*) UObject::GObjObjects()->Data[ 9780 ];

	ACamera_execGetCameraRotation_Parms GetCameraRotation_Parms;

	this->ProcessEvent ( pFnGetCameraRotation, &GetCameraRotation_Parms, NULL );

	return GetCameraRotation_Parms.ReturnValue;
};

// Function Engine.Camera.GetCameraViewPoint
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 OutCamLoc                      ( CPF_Parm | CPF_OutParm )
// struct FRotator                OutCamRot                      ( CPF_Parm | CPF_OutParm )

void ACamera::GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot )
{
	static UFunction* pFnGetCameraViewPoint = NULL;

	if ( ! pFnGetCameraViewPoint )
		pFnGetCameraViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 9777 ];

	ACamera_execGetCameraViewPoint_Parms GetCameraViewPoint_Parms;

	this->ProcessEvent ( pFnGetCameraViewPoint, &GetCameraViewPoint_Parms, NULL );

	if ( OutCamLoc )
		memcpy ( OutCamLoc, &GetCameraViewPoint_Parms.OutCamLoc, 0xC );

	if ( OutCamRot )
		memcpy ( OutCamRot, &GetCameraViewPoint_Parms.OutCamRot, 0xC );
};

// Function Engine.Camera.SetFOV
// [0x00020002] 
// Parameters infos:
// float                          NewFOV                         ( CPF_Parm )

void ACamera::SetFOV ( float NewFOV )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = (UFunction*) UObject::GObjObjects()->Data[ 9775 ];

	ACamera_execSetFOV_Parms SetFOV_Parms;
	SetFOV_Parms.NewFOV = NewFOV;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function Engine.Camera.GetFOVAngle
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ACamera::GetFOVAngle ( )
{
	static UFunction* pFnGetFOVAngle = NULL;

	if ( ! pFnGetFOVAngle )
		pFnGetFOVAngle = (UFunction*) UObject::GObjObjects()->Data[ 9771 ];

	ACamera_execGetFOVAngle_Parms GetFOVAngle_Parms;

	this->ProcessEvent ( pFnGetFOVAngle, &GetFOVAngle_Parms, NULL );

	return GetFOVAngle_Parms.ReturnValue;
};

// Function Engine.Camera.InitializeFor
// [0x00020002] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ACamera::InitializeFor ( class APlayerController* PC )
{
	static UFunction* pFnInitializeFor = NULL;

	if ( ! pFnInitializeFor )
		pFnInitializeFor = (UFunction*) UObject::GObjObjects()->Data[ 9762 ];

	ACamera_execInitializeFor_Parms InitializeFor_Parms;
	InitializeFor_Parms.PC = PC;

	this->ProcessEvent ( pFnInitializeFor, &InitializeFor_Parms, NULL );
};

// Function Engine.Camera.ApplyCameraModifiers
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACamera::ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnApplyCameraModifiers = NULL;

	if ( ! pFnApplyCameraModifiers )
		pFnApplyCameraModifiers = (UFunction*) UObject::GObjObjects()->Data[ 9759 ];

	ACamera_execApplyCameraModifiers_Parms ApplyCameraModifiers_Parms;
	ApplyCameraModifiers_Parms.DeltaTime = DeltaTime;

	pFnApplyCameraModifiers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyCameraModifiers, &ApplyCameraModifiers_Parms, NULL );

	pFnApplyCameraModifiers->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ApplyCameraModifiers_Parms.OutPOV, 0x1C );
};

// Function Engine.Camera.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ACamera::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 9757 ];

	ACamera_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.Camera.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ACamera::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 9751 ];

	ACamera_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Camera.CreateCameraModifier
// [0x00080002] 
// Parameters infos:
// class UCameraModifier*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ModifierClass                  ( CPF_Parm )

class UCameraModifier* ACamera::CreateCameraModifier ( class UClass* ModifierClass )
{
	static UFunction* pFnCreateCameraModifier = NULL;

	if ( ! pFnCreateCameraModifier )
		pFnCreateCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 9745 ];

	ACamera_execCreateCameraModifier_Parms CreateCameraModifier_Parms;
	CreateCameraModifier_Parms.ModifierClass = ModifierClass;

	this->ProcessEvent ( pFnCreateCameraModifier, &CreateCameraModifier_Parms, NULL );

	return CreateCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraActor.DisplayDebug
// [0x00420102] 
// Parameters infos:
// class AHUD*                    HUD                            ( CPF_Parm )
// float                          out_YL                         ( CPF_Parm | CPF_OutParm )
// float                          out_YPos                       ( CPF_Parm | CPF_OutParm )

void ACameraActor::DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = (UFunction*) UObject::GObjObjects()->Data[ 15705 ];

	ACameraActor_execDisplayDebug_Parms DisplayDebug_Parms;
	DisplayDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );

	if ( out_YL )
		*out_YL = DisplayDebug_Parms.out_YL;

	if ( out_YPos )
		*out_YPos = DisplayDebug_Parms.out_YPos;
};

// Function Engine.CameraActor.GetCameraView
// [0x00420102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void ACameraActor::GetCameraView ( float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnGetCameraView = NULL;

	if ( ! pFnGetCameraView )
		pFnGetCameraView = (UFunction*) UObject::GObjObjects()->Data[ 15702 ];

	ACameraActor_execGetCameraView_Parms GetCameraView_Parms;
	GetCameraView_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnGetCameraView, &GetCameraView_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &GetCameraView_Parms.OutPOV, 0x1C );
};

// Function Engine.CameraAnimInst.SetPlaySpace
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  NewSpace                       ( CPF_Parm )
// struct FRotator                UserPlaySpace                  ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::SetPlaySpace ( unsigned char NewSpace, struct FRotator UserPlaySpace )
{
	static UFunction* pFnSetPlaySpace = NULL;

	if ( ! pFnSetPlaySpace )
		pFnSetPlaySpace = (UFunction*) UObject::GObjObjects()->Data[ 12935 ];

	UCameraAnimInst_execSetPlaySpace_Parms SetPlaySpace_Parms;
	SetPlaySpace_Parms.NewSpace = NewSpace;
	memcpy ( &SetPlaySpace_Parms.UserPlaySpace, &UserPlaySpace, 0xC );

	pFnSetPlaySpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPlaySpace, &SetPlaySpace_Parms, NULL );

	pFnSetPlaySpace->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.ApplyTransientScaling
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          Scalar                         ( CPF_Parm )

void UCameraAnimInst::ApplyTransientScaling ( float Scalar )
{
	static UFunction* pFnApplyTransientScaling = NULL;

	if ( ! pFnApplyTransientScaling )
		pFnApplyTransientScaling = (UFunction*) UObject::GObjObjects()->Data[ 15770 ];

	UCameraAnimInst_execApplyTransientScaling_Parms ApplyTransientScaling_Parms;
	ApplyTransientScaling_Parms.Scalar = Scalar;

	pFnApplyTransientScaling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyTransientScaling, &ApplyTransientScaling_Parms, NULL );

	pFnApplyTransientScaling->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Stop
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Stop ( unsigned long bImmediate )
{
	static UFunction* pFnStop = NULL;

	if ( ! pFnStop )
		pFnStop = (UFunction*) UObject::GObjObjects()->Data[ 15768 ];

	UCameraAnimInst_execStop_Parms Stop_Parms;
	Stop_Parms.bImmediate = bImmediate;

	pFnStop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStop, &Stop_Parms, NULL );

	pFnStop->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.AdvanceAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  bJump                          ( CPF_Parm )

void UCameraAnimInst::AdvanceAnim ( float DeltaTime, unsigned long bJump )
{
	static UFunction* pFnAdvanceAnim = NULL;

	if ( ! pFnAdvanceAnim )
		pFnAdvanceAnim = (UFunction*) UObject::GObjObjects()->Data[ 15765 ];

	UCameraAnimInst_execAdvanceAnim_Parms AdvanceAnim_Parms;
	AdvanceAnim_Parms.DeltaTime = DeltaTime;
	AdvanceAnim_Parms.bJump = bJump;

	pFnAdvanceAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdvanceAnim, &AdvanceAnim_Parms, NULL );

	pFnAdvanceAnim->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Update
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          NewRate                        ( CPF_Parm )
// float                          NewScale                       ( CPF_Parm )
// float                          NewBlendInTime                 ( CPF_Parm )
// float                          NewBlendOutTime                ( CPF_Parm )
// float                          NewDuration                    ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 15759 ];

	UCameraAnimInst_execUpdate_Parms Update_Parms;
	Update_Parms.NewRate = NewRate;
	Update_Parms.NewScale = NewScale;
	Update_Parms.NewBlendInTime = NewBlendInTime;
	Update_Parms.NewBlendOutTime = NewBlendOutTime;
	Update_Parms.NewDuration = NewDuration;

	pFnUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	pFnUpdate->FunctionFlags |= 0x400;
};

// Function Engine.CameraAnimInst.Play
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UCameraAnim*             Anim                           ( CPF_Parm )
// class AActor*                  CamActor                       ( CPF_Parm )
// float                          InRate                         ( CPF_Parm )
// float                          InScale                        ( CPF_Parm )
// float                          InBlendInTime                  ( CPF_Parm )
// float                          InBlendOutTime                 ( CPF_Parm )
// unsigned long                  bInLoop                        ( CPF_Parm )
// unsigned long                  bRandomStartTime               ( CPF_Parm )
// float                          Duration                       ( CPF_OptionalParm | CPF_Parm )

void UCameraAnimInst::Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration )
{
	static UFunction* pFnPlay = NULL;

	if ( ! pFnPlay )
		pFnPlay = (UFunction*) UObject::GObjObjects()->Data[ 15749 ];

	UCameraAnimInst_execPlay_Parms Play_Parms;
	Play_Parms.Anim = Anim;
	Play_Parms.CamActor = CamActor;
	Play_Parms.InRate = InRate;
	Play_Parms.InScale = InScale;
	Play_Parms.InBlendInTime = InBlendInTime;
	Play_Parms.InBlendOutTime = InBlendOutTime;
	Play_Parms.bInLoop = bInLoop;
	Play_Parms.bRandomStartTime = bRandomStartTime;
	Play_Parms.Duration = Duration;

	pFnPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlay, &Play_Parms, NULL );

	pFnPlay->FunctionFlags |= 0x400;
};

// Function Engine.CameraModifier.UpdateAlpha
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

void UCameraModifier::UpdateAlpha ( class ACamera* Camera, float DeltaTime )
{
	static UFunction* pFnUpdateAlpha = NULL;

	if ( ! pFnUpdateAlpha )
		pFnUpdateAlpha = (UFunction*) UObject::GObjObjects()->Data[ 15809 ];

	UCameraModifier_execUpdateAlpha_Parms UpdateAlpha_Parms;
	UpdateAlpha_Parms.Camera = Camera;
	UpdateAlpha_Parms.DeltaTime = DeltaTime;

	pFnUpdateAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAlpha, &UpdateAlpha_Parms, NULL );

	pFnUpdateAlpha->FunctionFlags |= 0x400;
};

// Function Engine.CameraModifier.ProcessViewRotation
// [0x00420100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ViewTarget                     ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

bool UCameraModifier::ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 10008 ];

	UCameraModifier_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.ViewTarget = ViewTarget;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );

	return ProcessViewRotation_Parms.ReturnValue;
};

// Function Engine.CameraModifier.ToggleModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::ToggleModifier ( )
{
	static UFunction* pFnToggleModifier = NULL;

	if ( ! pFnToggleModifier )
		pFnToggleModifier = (UFunction*) UObject::GObjObjects()->Data[ 15804 ];

	UCameraModifier_execToggleModifier_Parms ToggleModifier_Parms;

	this->ProcessEvent ( pFnToggleModifier, &ToggleModifier_Parms, NULL );
};

// Function Engine.CameraModifier.EnableModifier
// [0x00020002] 
// Parameters infos:

void UCameraModifier::EnableModifier ( )
{
	static UFunction* pFnEnableModifier = NULL;

	if ( ! pFnEnableModifier )
		pFnEnableModifier = (UFunction*) UObject::GObjObjects()->Data[ 15803 ];

	UCameraModifier_execEnableModifier_Parms EnableModifier_Parms;

	this->ProcessEvent ( pFnEnableModifier, &EnableModifier_Parms, NULL );
};

// Function Engine.CameraModifier.DisableModifier
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bImmediate                     ( CPF_OptionalParm | CPF_Parm )

void UCameraModifier::eventDisableModifier ( unsigned long bImmediate )
{
	static UFunction* pFnDisableModifier = NULL;

	if ( ! pFnDisableModifier )
		pFnDisableModifier = (UFunction*) UObject::GObjObjects()->Data[ 15801 ];

	UCameraModifier_eventDisableModifier_Parms DisableModifier_Parms;
	DisableModifier_Parms.bImmediate = bImmediate;

	this->ProcessEvent ( pFnDisableModifier, &DisableModifier_Parms, NULL );
};

// Function Engine.CameraModifier.RemoveCameraModifier
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )

bool UCameraModifier::RemoveCameraModifier ( class ACamera* Camera )
{
	static UFunction* pFnRemoveCameraModifier = NULL;

	if ( ! pFnRemoveCameraModifier )
		pFnRemoveCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 15797 ];

	UCameraModifier_execRemoveCameraModifier_Parms RemoveCameraModifier_Parms;
	RemoveCameraModifier_Parms.Camera = Camera;

	this->ProcessEvent ( pFnRemoveCameraModifier, &RemoveCameraModifier_Parms, NULL );

	return RemoveCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraModifier.AddCameraModifier
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )

bool UCameraModifier::AddCameraModifier ( class ACamera* Camera )
{
	static UFunction* pFnAddCameraModifier = NULL;

	if ( ! pFnAddCameraModifier )
		pFnAddCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 9749 ];

	UCameraModifier_execAddCameraModifier_Parms AddCameraModifier_Parms;
	AddCameraModifier_Parms.Camera = Camera;

	this->ProcessEvent ( pFnAddCameraModifier, &AddCameraModifier_Parms, NULL );

	return AddCameraModifier_Parms.ReturnValue;
};

// Function Engine.CameraModifier.IsDisabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCameraModifier::IsDisabled ( )
{
	static UFunction* pFnIsDisabled = NULL;

	if ( ! pFnIsDisabled )
		pFnIsDisabled = (UFunction*) UObject::GObjObjects()->Data[ 15791 ];

	UCameraModifier_execIsDisabled_Parms IsDisabled_Parms;

	pFnIsDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDisabled, &IsDisabled_Parms, NULL );

	pFnIsDisabled->FunctionFlags |= 0x400;

	return IsDisabled_Parms.ReturnValue;
};

// Function Engine.CameraModifier.ModifyCamera
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

bool UCameraModifier::ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnModifyCamera = NULL;

	if ( ! pFnModifyCamera )
		pFnModifyCamera = (UFunction*) UObject::GObjObjects()->Data[ 15786 ];

	UCameraModifier_execModifyCamera_Parms ModifyCamera_Parms;
	ModifyCamera_Parms.Camera = Camera;
	ModifyCamera_Parms.DeltaTime = DeltaTime;

	pFnModifyCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyCamera, &ModifyCamera_Parms, NULL );

	pFnModifyCamera->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ModifyCamera_Parms.OutPOV, 0x1C );

	return ModifyCamera_Parms.ReturnValue;
};

// Function Engine.CameraModifier.Init
// [0x00020000] 
// Parameters infos:

void UCameraModifier::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 15785 ];

	UCameraModifier_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.ModifyCamera
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

bool UCameraModifier_CameraShake::ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnModifyCamera = NULL;

	if ( ! pFnModifyCamera )
		pFnModifyCamera = (UFunction*) UObject::GObjObjects()->Data[ 15938 ];

	UCameraModifier_CameraShake_execModifyCamera_Parms ModifyCamera_Parms;
	ModifyCamera_Parms.Camera = Camera;
	ModifyCamera_Parms.DeltaTime = DeltaTime;

	pFnModifyCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyCamera, &ModifyCamera_Parms, NULL );

	pFnModifyCamera->FunctionFlags |= 0x400;

	if ( OutPOV )
		memcpy ( OutPOV, &ModifyCamera_Parms.OutPOV, 0x1C );

	return ModifyCamera_Parms.ReturnValue;
};

// Function Engine.CameraModifier_CameraShake.UpdateCameraShake
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FCameraShakeInstance    Shake                          ( CPF_Parm | CPF_OutParm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void UCameraModifier_CameraShake::UpdateCameraShake ( float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV )
{
	static UFunction* pFnUpdateCameraShake = NULL;

	if ( ! pFnUpdateCameraShake )
		pFnUpdateCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 15934 ];

	UCameraModifier_CameraShake_execUpdateCameraShake_Parms UpdateCameraShake_Parms;
	UpdateCameraShake_Parms.DeltaTime = DeltaTime;

	pFnUpdateCameraShake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCameraShake, &UpdateCameraShake_Parms, NULL );

	pFnUpdateCameraShake->FunctionFlags |= 0x400;

	if ( Shake )
		memcpy ( Shake, &UpdateCameraShake_Parms.Shake, 0x90 );

	if ( OutPOV )
		memcpy ( OutPOV, &UpdateCameraShake_Parms.OutPOV, 0x1C );
};

// Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes
// [0x00020002] 
// Parameters infos:

void UCameraModifier_CameraShake::RemoveAllCameraShakes ( )
{
	static UFunction* pFnRemoveAllCameraShakes = NULL;

	if ( ! pFnRemoveAllCameraShakes )
		pFnRemoveAllCameraShakes = (UFunction*) UObject::GObjObjects()->Data[ 15931 ];

	UCameraModifier_CameraShake_execRemoveAllCameraShakes_Parms RemoveAllCameraShakes_Parms;

	this->ProcessEvent ( pFnRemoveAllCameraShakes, &RemoveAllCameraShakes_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.RemoveCameraShake
// [0x00020002] 
// Parameters infos:
// class UCameraShake*            Shake                          ( CPF_Parm )

void UCameraModifier_CameraShake::RemoveCameraShake ( class UCameraShake* Shake )
{
	static UFunction* pFnRemoveCameraShake = NULL;

	if ( ! pFnRemoveCameraShake )
		pFnRemoveCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 15927 ];

	UCameraModifier_CameraShake_execRemoveCameraShake_Parms RemoveCameraShake_Parms;
	RemoveCameraShake_Parms.Shake = Shake;

	this->ProcessEvent ( pFnRemoveCameraShake, &RemoveCameraShake_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.AddCameraShake
// [0x00024002] 
// Parameters infos:
// class UCameraShake*            NewShake                       ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

void UCameraModifier_CameraShake::AddCameraShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnAddCameraShake = NULL;

	if ( ! pFnAddCameraShake )
		pFnAddCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 15920 ];

	UCameraModifier_CameraShake_execAddCameraShake_Parms AddCameraShake_Parms;
	AddCameraShake_Parms.NewShake = NewShake;
	AddCameraShake_Parms.Scale = Scale;
	AddCameraShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &AddCameraShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnAddCameraShake, &AddCameraShake_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.InitializeShake
// [0x00884002] 
// Parameters infos:
// struct FCameraShakeInstance    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCameraShake*            NewShake                       ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )
// unsigned char                  PlaySpace                      ( CPF_Parm )
// struct FRotator                UserPlaySpaceRot               ( CPF_OptionalParm | CPF_Parm )

struct FCameraShakeInstance UCameraModifier_CameraShake::InitializeShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot )
{
	static UFunction* pFnInitializeShake = NULL;

	if ( ! pFnInitializeShake )
		pFnInitializeShake = (UFunction*) UObject::GObjObjects()->Data[ 15910 ];

	UCameraModifier_CameraShake_execInitializeShake_Parms InitializeShake_Parms;
	InitializeShake_Parms.NewShake = NewShake;
	InitializeShake_Parms.Scale = Scale;
	InitializeShake_Parms.PlaySpace = PlaySpace;
	memcpy ( &InitializeShake_Parms.UserPlaySpaceRot, &UserPlaySpaceRot, 0xC );

	this->ProcessEvent ( pFnInitializeShake, &InitializeShake_Parms, NULL );

	return InitializeShake_Parms.ReturnValue;
};

// Function Engine.CameraModifier_CameraShake.ReinitShake
// [0x00080002] 
// Parameters infos:
// int                            ActiveShakeIdx                 ( CPF_Parm )
// float                          Scale                          ( CPF_Parm )

void UCameraModifier_CameraShake::ReinitShake ( int ActiveShakeIdx, float Scale )
{
	static UFunction* pFnReinitShake = NULL;

	if ( ! pFnReinitShake )
		pFnReinitShake = (UFunction*) UObject::GObjObjects()->Data[ 15901 ];

	UCameraModifier_CameraShake_execReinitShake_Parms ReinitShake_Parms;
	ReinitShake_Parms.ActiveShakeIdx = ActiveShakeIdx;
	ReinitShake_Parms.Scale = Scale;

	this->ProcessEvent ( pFnReinitShake, &ReinitShake_Parms, NULL );
};

// Function Engine.CameraModifier_CameraShake.InitializeOffset
// [0x00482002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FFOscillator            Param                          ( CPF_Const | CPF_Parm | CPF_OutParm )

float UCameraModifier_CameraShake::InitializeOffset ( struct FFOscillator* Param )
{
	static UFunction* pFnInitializeOffset = NULL;

	if ( ! pFnInitializeOffset )
		pFnInitializeOffset = (UFunction*) UObject::GObjObjects()->Data[ 15898 ];

	UCameraModifier_CameraShake_execInitializeOffset_Parms InitializeOffset_Parms;

	this->ProcessEvent ( pFnInitializeOffset, &InitializeOffset_Parms, NULL );

	if ( Param )
		memcpy ( Param, &InitializeOffset_Parms.Param, 0xC );

	return InitializeOffset_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetAPC
// [0x00080003] ( FUNC_Final )
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* UCameraShake::GetAPC ( )
{
	static UFunction* pFnGetAPC = NULL;

	if ( ! pFnGetAPC )
		pFnGetAPC = (UFunction*) UObject::GObjObjects()->Data[ 15812 ];

	UCameraShake_execGetAPC_Parms GetAPC_Parms;

	this->ProcessEvent ( pFnGetAPC, &GetAPC_Parms, NULL );

	return GetAPC_Parms.ReturnValue;
};

// Function Engine.CameraShake.ToggleShake
// [0x00080002] 
// Parameters infos:
// unsigned long                  bShake                         ( CPF_Parm )

void UCameraShake::ToggleShake ( unsigned long bShake )
{
	static UFunction* pFnToggleShake = NULL;

	if ( ! pFnToggleShake )
		pFnToggleShake = (UFunction*) UObject::GObjObjects()->Data[ 15813 ];

	UCameraShake_execToggleShake_Parms ToggleShake_Parms;
	ToggleShake_Parms.bShake = bShake;

	this->ProcessEvent ( pFnToggleShake, &ToggleShake_Parms, NULL );
};

// Function Engine.CameraShake.OnPropertyChanged
// [0x00080802] ( FUNC_Event )
// Parameters infos:

void UCameraShake::eventOnPropertyChanged ( )
{
	static UFunction* pFnOnPropertyChanged = NULL;

	if ( ! pFnOnPropertyChanged )
		pFnOnPropertyChanged = (UFunction*) UObject::GObjObjects()->Data[ 15818 ];

	UCameraShake_eventOnPropertyChanged_Parms OnPropertyChanged_Parms;

	this->ProcessEvent ( pFnOnPropertyChanged, &OnPropertyChanged_Parms, NULL );
};

// Function Engine.CameraShake.GetRandomFOscillator
// [0x00820002] 
// Parameters infos:
// struct FFOscillator            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AmplitudeScale                 ( CPF_Parm )
// float                          FrequencyScale                 ( CPF_Parm )

struct FFOscillator UCameraShake::GetRandomFOscillator ( float AmplitudeScale, float FrequencyScale )
{
	static UFunction* pFnGetRandomFOscillator = NULL;

	if ( ! pFnGetRandomFOscillator )
		pFnGetRandomFOscillator = (UFunction*) UObject::GObjObjects()->Data[ 15820 ];

	UCameraShake_execGetRandomFOscillator_Parms GetRandomFOscillator_Parms;
	GetRandomFOscillator_Parms.AmplitudeScale = AmplitudeScale;
	GetRandomFOscillator_Parms.FrequencyScale = FrequencyScale;

	this->ProcessEvent ( pFnGetRandomFOscillator, &GetRandomFOscillator_Parms, NULL );

	return GetRandomFOscillator_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetRandomLocOscillation
// [0x00820002] 
// Parameters infos:
// struct FVOscillator            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AmplitudeScale                 ( CPF_Parm )
// float                          FrequencyScale                 ( CPF_Parm )

struct FVOscillator UCameraShake::GetRandomLocOscillation ( float AmplitudeScale, float FrequencyScale )
{
	static UFunction* pFnGetRandomLocOscillation = NULL;

	if ( ! pFnGetRandomLocOscillation )
		pFnGetRandomLocOscillation = (UFunction*) UObject::GObjObjects()->Data[ 15821 ];

	UCameraShake_execGetRandomLocOscillation_Parms GetRandomLocOscillation_Parms;
	GetRandomLocOscillation_Parms.AmplitudeScale = AmplitudeScale;
	GetRandomLocOscillation_Parms.FrequencyScale = FrequencyScale;

	this->ProcessEvent ( pFnGetRandomLocOscillation, &GetRandomLocOscillation_Parms, NULL );

	return GetRandomLocOscillation_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetRandomROscillator
// [0x00820002] 
// Parameters infos:
// struct FROscillator            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AmplitudeScale                 ( CPF_Parm )
// float                          FrequencyScale                 ( CPF_Parm )

struct FROscillator UCameraShake::GetRandomROscillator ( float AmplitudeScale, float FrequencyScale )
{
	static UFunction* pFnGetRandomROscillator = NULL;

	if ( ! pFnGetRandomROscillator )
		pFnGetRandomROscillator = (UFunction*) UObject::GObjObjects()->Data[ 15832 ];

	UCameraShake_execGetRandomROscillator_Parms GetRandomROscillator_Parms;
	GetRandomROscillator_Parms.AmplitudeScale = AmplitudeScale;
	GetRandomROscillator_Parms.FrequencyScale = FrequencyScale;

	this->ProcessEvent ( pFnGetRandomROscillator, &GetRandomROscillator_Parms, NULL );

	return GetRandomROscillator_Parms.ReturnValue;
};

// Function Engine.CameraShake.SetRandomLocShake
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          AmplitudeScale                 ( CPF_Parm )
// float                          FrequencyScale                 ( CPF_Parm )

void UCameraShake::SetRandomLocShake ( float AmplitudeScale, float FrequencyScale )
{
	static UFunction* pFnSetRandomLocShake = NULL;

	if ( ! pFnSetRandomLocShake )
		pFnSetRandomLocShake = (UFunction*) UObject::GObjObjects()->Data[ 15842 ];

	UCameraShake_execSetRandomLocShake_Parms SetRandomLocShake_Parms;
	SetRandomLocShake_Parms.AmplitudeScale = AmplitudeScale;
	SetRandomLocShake_Parms.FrequencyScale = FrequencyScale;

	this->ProcessEvent ( pFnSetRandomLocShake, &SetRandomLocShake_Parms, NULL );
};

// Function Engine.CameraShake.SetRandomRotShake
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          AmplitudeScale                 ( CPF_Parm )
// float                          FrequencyScale                 ( CPF_Parm )

void UCameraShake::SetRandomRotShake ( float AmplitudeScale, float FrequencyScale )
{
	static UFunction* pFnSetRandomRotShake = NULL;

	if ( ! pFnSetRandomRotShake )
		pFnSetRandomRotShake = (UFunction*) UObject::GObjObjects()->Data[ 15850 ];

	UCameraShake_execSetRandomRotShake_Parms SetRandomRotShake_Parms;
	SetRandomRotShake_Parms.AmplitudeScale = AmplitudeScale;
	SetRandomRotShake_Parms.FrequencyScale = FrequencyScale;

	this->ProcessEvent ( pFnSetRandomRotShake, &SetRandomRotShake_Parms, NULL );
};

// Function Engine.CameraShake.CreateScaled
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UCameraShake*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          AmplitudeScale                 ( CPF_Parm )
// float                          FrequencyScale                 ( CPF_Parm )
// float                          DurationScale                  ( CPF_Parm )

class UCameraShake* UCameraShake::CreateScaled ( float AmplitudeScale, float FrequencyScale, float DurationScale )
{
	static UFunction* pFnCreateScaled = NULL;

	if ( ! pFnCreateScaled )
		pFnCreateScaled = (UFunction*) UObject::GObjObjects()->Data[ 15854 ];

	UCameraShake_execCreateScaled_Parms CreateScaled_Parms;
	CreateScaled_Parms.AmplitudeScale = AmplitudeScale;
	CreateScaled_Parms.FrequencyScale = FrequencyScale;
	CreateScaled_Parms.DurationScale = DurationScale;

	this->ProcessEvent ( pFnCreateScaled, &CreateScaled_Parms, NULL );

	return CreateScaled_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetLocOscillationMagnitude
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UCameraShake::GetLocOscillationMagnitude ( )
{
	static UFunction* pFnGetLocOscillationMagnitude = NULL;

	if ( ! pFnGetLocOscillationMagnitude )
		pFnGetLocOscillationMagnitude = (UFunction*) UObject::GObjObjects()->Data[ 15858 ];

	UCameraShake_execGetLocOscillationMagnitude_Parms GetLocOscillationMagnitude_Parms;

	this->ProcessEvent ( pFnGetLocOscillationMagnitude, &GetLocOscillationMagnitude_Parms, NULL );

	return GetLocOscillationMagnitude_Parms.ReturnValue;
};

// Function Engine.CameraShake.GetRotOscillationMagnitude
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UCameraShake::GetRotOscillationMagnitude ( )
{
	static UFunction* pFnGetRotOscillationMagnitude = NULL;

	if ( ! pFnGetRotOscillationMagnitude )
		pFnGetRotOscillationMagnitude = (UFunction*) UObject::GObjObjects()->Data[ 15868 ];

	UCameraShake_execGetRotOscillationMagnitude_Parms GetRotOscillationMagnitude_Parms;

	this->ProcessEvent ( pFnGetRotOscillationMagnitude, &GetRotOscillationMagnitude_Parms, NULL );

	return GetRotOscillationMagnitude_Parms.ReturnValue;
};

// Function Engine.CloudStorageUpgradeHelper.GetCloudUpgradeKeys
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FString >       CloudKeys                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudStorageUpgradeHelper::eventGetCloudUpgradeKeys ( TArray< struct FString >* CloudKeys )
{
	static UFunction* pFnGetCloudUpgradeKeys = NULL;

	if ( ! pFnGetCloudUpgradeKeys )
		pFnGetCloudUpgradeKeys = (UFunction*) UObject::GObjObjects()->Data[ 17044 ];

	UCloudStorageUpgradeHelper_eventGetCloudUpgradeKeys_Parms GetCloudUpgradeKeys_Parms;

	this->ProcessEvent ( pFnGetCloudUpgradeKeys, &GetCloudUpgradeKeys_Parms, NULL );

	if ( CloudKeys )
		memcpy ( CloudKeys, &GetCloudUpgradeKeys_Parms.CloudKeys, 0xC );
};

// Function Engine.CloudStorageUpgradeHelper.HandleLocalKeyValue
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// struct FString                 CloudKeyName                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FPlatformInterfaceData  CloudValue                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            bShouldMoveToCloud             ( CPF_Parm | CPF_OutParm )
// int                            bShouldDeleteLocalKey          ( CPF_Parm | CPF_OutParm )

void UCloudStorageUpgradeHelper::eventHandleLocalKeyValue ( struct FString* CloudKeyName, struct FPlatformInterfaceData* CloudValue, int* bShouldMoveToCloud, int* bShouldDeleteLocalKey )
{
	static UFunction* pFnHandleLocalKeyValue = NULL;

	if ( ! pFnHandleLocalKeyValue )
		pFnHandleLocalKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 17039 ];

	UCloudStorageUpgradeHelper_eventHandleLocalKeyValue_Parms HandleLocalKeyValue_Parms;

	this->ProcessEvent ( pFnHandleLocalKeyValue, &HandleLocalKeyValue_Parms, NULL );

	if ( CloudKeyName )
		memcpy ( CloudKeyName, &HandleLocalKeyValue_Parms.CloudKeyName, 0xC );

	if ( CloudValue )
		memcpy ( CloudValue, &HandleLocalKeyValue_Parms.CloudValue, 0x30 );

	if ( bShouldMoveToCloud )
		*bShouldMoveToCloud = HandleLocalKeyValue_Parms.bShouldMoveToCloud;

	if ( bShouldDeleteLocalKey )
		*bShouldDeleteLocalKey = HandleLocalKeyValue_Parms.bShouldDeleteLocalKey;
};

// Function Engine.CloudStorageUpgradeHelper.HandleLocalDocument
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// struct FString                 DocName                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            bShouldMoveToCloud             ( CPF_Parm | CPF_OutParm )
// int                            bShouldDeleteLocalFile         ( CPF_Parm | CPF_OutParm )

void UCloudStorageUpgradeHelper::eventHandleLocalDocument ( struct FString* DocName, int* bShouldMoveToCloud, int* bShouldDeleteLocalFile )
{
	static UFunction* pFnHandleLocalDocument = NULL;

	if ( ! pFnHandleLocalDocument )
		pFnHandleLocalDocument = (UFunction*) UObject::GObjObjects()->Data[ 17035 ];

	UCloudStorageUpgradeHelper_eventHandleLocalDocument_Parms HandleLocalDocument_Parms;

	this->ProcessEvent ( pFnHandleLocalDocument, &HandleLocalDocument_Parms, NULL );

	if ( DocName )
		memcpy ( DocName, &HandleLocalDocument_Parms.DocName, 0xC );

	if ( bShouldMoveToCloud )
		*bShouldMoveToCloud = HandleLocalDocument_Parms.bShouldMoveToCloud;

	if ( bShouldDeleteLocalFile )
		*bShouldDeleteLocalFile = HandleLocalDocument_Parms.bShouldDeleteLocalFile;
};

// Function Engine.AnalyticEventsBase.SendCachedEvents
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UAnalyticEventsBase::eventSendCachedEvents ( )
{
	static UFunction* pFnSendCachedEvents = NULL;

	if ( ! pFnSendCachedEvents )
		pFnSendCachedEvents = (UFunction*) UObject::GObjObjects()->Data[ 14084 ];

	UAnalyticEventsBase_eventSendCachedEvents_Parms SendCachedEvents_Parms;

	pFnSendCachedEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCachedEvents, &SendCachedEvents_Parms, NULL );

	pFnSendCachedEvents->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogCurrencyGivenEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 GameCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// int                            GameCurrencyAmount             ( CPF_Parm )

void UAnalyticEventsBase::eventLogCurrencyGivenEvent ( struct FString GameCurrencyType, int GameCurrencyAmount )
{
	static UFunction* pFnLogCurrencyGivenEvent = NULL;

	if ( ! pFnLogCurrencyGivenEvent )
		pFnLogCurrencyGivenEvent = (UFunction*) UObject::GObjObjects()->Data[ 14081 ];

	UAnalyticEventsBase_eventLogCurrencyGivenEvent_Parms LogCurrencyGivenEvent_Parms;
	memcpy ( &LogCurrencyGivenEvent_Parms.GameCurrencyType, &GameCurrencyType, 0xC );
	LogCurrencyGivenEvent_Parms.GameCurrencyAmount = GameCurrencyAmount;

	pFnLogCurrencyGivenEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogCurrencyGivenEvent, &LogCurrencyGivenEvent_Parms, NULL );

	pFnLogCurrencyGivenEvent->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogCurrencyPurchaseEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 GameCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// int                            GameCurrencyAmount             ( CPF_Parm )
// struct FString                 RealCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// float                          RealMoneyCost                  ( CPF_Parm )
// struct FString                 PaymentProvider                ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventLogCurrencyPurchaseEvent ( struct FString GameCurrencyType, int GameCurrencyAmount, struct FString RealCurrencyType, float RealMoneyCost, struct FString PaymentProvider )
{
	static UFunction* pFnLogCurrencyPurchaseEvent = NULL;

	if ( ! pFnLogCurrencyPurchaseEvent )
		pFnLogCurrencyPurchaseEvent = (UFunction*) UObject::GObjObjects()->Data[ 14075 ];

	UAnalyticEventsBase_eventLogCurrencyPurchaseEvent_Parms LogCurrencyPurchaseEvent_Parms;
	memcpy ( &LogCurrencyPurchaseEvent_Parms.GameCurrencyType, &GameCurrencyType, 0xC );
	LogCurrencyPurchaseEvent_Parms.GameCurrencyAmount = GameCurrencyAmount;
	memcpy ( &LogCurrencyPurchaseEvent_Parms.RealCurrencyType, &RealCurrencyType, 0xC );
	LogCurrencyPurchaseEvent_Parms.RealMoneyCost = RealMoneyCost;
	memcpy ( &LogCurrencyPurchaseEvent_Parms.PaymentProvider, &PaymentProvider, 0xC );

	pFnLogCurrencyPurchaseEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogCurrencyPurchaseEvent, &LogCurrencyPurchaseEvent_Parms, NULL );

	pFnLogCurrencyPurchaseEvent->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogItemPurchaseEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ItemID                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Currency                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            PerItemCost                    ( CPF_Parm )
// int                            ItemQuantity                   ( CPF_Parm )

void UAnalyticEventsBase::eventLogItemPurchaseEvent ( struct FString ItemID, struct FString Currency, int PerItemCost, int ItemQuantity )
{
	static UFunction* pFnLogItemPurchaseEvent = NULL;

	if ( ! pFnLogItemPurchaseEvent )
		pFnLogItemPurchaseEvent = (UFunction*) UObject::GObjObjects()->Data[ 14070 ];

	UAnalyticEventsBase_eventLogItemPurchaseEvent_Parms LogItemPurchaseEvent_Parms;
	memcpy ( &LogItemPurchaseEvent_Parms.ItemID, &ItemID, 0xC );
	memcpy ( &LogItemPurchaseEvent_Parms.Currency, &Currency, 0xC );
	LogItemPurchaseEvent_Parms.PerItemCost = PerItemCost;
	LogItemPurchaseEvent_Parms.ItemQuantity = ItemQuantity;

	pFnLogItemPurchaseEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogItemPurchaseEvent, &LogItemPurchaseEvent_Parms, NULL );

	pFnLogItemPurchaseEvent->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogUserAttributeUpdateArray
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// TArray< struct FEventStringParam > AttributeArray                 ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventLogUserAttributeUpdateArray ( TArray< struct FEventStringParam > AttributeArray )
{
	static UFunction* pFnLogUserAttributeUpdateArray = NULL;

	if ( ! pFnLogUserAttributeUpdateArray )
		pFnLogUserAttributeUpdateArray = (UFunction*) UObject::GObjObjects()->Data[ 14067 ];

	UAnalyticEventsBase_eventLogUserAttributeUpdateArray_Parms LogUserAttributeUpdateArray_Parms;
	memcpy ( &LogUserAttributeUpdateArray_Parms.AttributeArray, &AttributeArray, 0xC );

	pFnLogUserAttributeUpdateArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogUserAttributeUpdateArray, &LogUserAttributeUpdateArray_Parms, NULL );

	pFnLogUserAttributeUpdateArray->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogUserAttributeUpdate
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 AttributeName                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AttributeValue                 ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventLogUserAttributeUpdate ( struct FString AttributeName, struct FString AttributeValue )
{
	static UFunction* pFnLogUserAttributeUpdate = NULL;

	if ( ! pFnLogUserAttributeUpdate )
		pFnLogUserAttributeUpdate = (UFunction*) UObject::GObjObjects()->Data[ 14064 ];

	UAnalyticEventsBase_eventLogUserAttributeUpdate_Parms LogUserAttributeUpdate_Parms;
	memcpy ( &LogUserAttributeUpdate_Parms.AttributeName, &AttributeName, 0xC );
	memcpy ( &LogUserAttributeUpdate_Parms.AttributeValue, &AttributeValue, 0xC );

	pFnLogUserAttributeUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogUserAttributeUpdate, &LogUserAttributeUpdate_Parms, NULL );

	pFnLogUserAttributeUpdate->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogErrorMessage
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ErrorName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventLogErrorMessage ( struct FString ErrorName, struct FString ErrorMessage )
{
	static UFunction* pFnLogErrorMessage = NULL;

	if ( ! pFnLogErrorMessage )
		pFnLogErrorMessage = (UFunction*) UObject::GObjObjects()->Data[ 14061 ];

	UAnalyticEventsBase_eventLogErrorMessage_Parms LogErrorMessage_Parms;
	memcpy ( &LogErrorMessage_Parms.ErrorName, &ErrorName, 0xC );
	memcpy ( &LogErrorMessage_Parms.ErrorMessage, &ErrorMessage, 0xC );

	pFnLogErrorMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogErrorMessage, &LogErrorMessage_Parms, NULL );

	pFnLogErrorMessage->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.EndStringEventParamArray
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FEventStringParam > ParamArray                     ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventEndStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray )
{
	static UFunction* pFnEndStringEventParamArray = NULL;

	if ( ! pFnEndStringEventParamArray )
		pFnEndStringEventParamArray = (UFunction*) UObject::GObjObjects()->Data[ 14057 ];

	UAnalyticEventsBase_eventEndStringEventParamArray_Parms EndStringEventParamArray_Parms;
	memcpy ( &EndStringEventParamArray_Parms.EventName, &EventName, 0xC );
	memcpy ( &EndStringEventParamArray_Parms.ParamArray, &ParamArray, 0xC );

	pFnEndStringEventParamArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStringEventParamArray, &EndStringEventParamArray_Parms, NULL );

	pFnEndStringEventParamArray->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogStringEventParamArray
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FEventStringParam > ParamArray                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTimed                         ( CPF_Parm )

void UAnalyticEventsBase::eventLogStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray, unsigned long bTimed )
{
	static UFunction* pFnLogStringEventParamArray = NULL;

	if ( ! pFnLogStringEventParamArray )
		pFnLogStringEventParamArray = (UFunction*) UObject::GObjObjects()->Data[ 14052 ];

	UAnalyticEventsBase_eventLogStringEventParamArray_Parms LogStringEventParamArray_Parms;
	memcpy ( &LogStringEventParamArray_Parms.EventName, &EventName, 0xC );
	memcpy ( &LogStringEventParamArray_Parms.ParamArray, &ParamArray, 0xC );
	LogStringEventParamArray_Parms.bTimed = bTimed;

	pFnLogStringEventParamArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogStringEventParamArray, &LogStringEventParamArray_Parms, NULL );

	pFnLogStringEventParamArray->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.EndStringEventParam
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamValue                     ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventEndStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue )
{
	static UFunction* pFnEndStringEventParam = NULL;

	if ( ! pFnEndStringEventParam )
		pFnEndStringEventParam = (UFunction*) UObject::GObjObjects()->Data[ 14048 ];

	UAnalyticEventsBase_eventEndStringEventParam_Parms EndStringEventParam_Parms;
	memcpy ( &EndStringEventParam_Parms.EventName, &EventName, 0xC );
	memcpy ( &EndStringEventParam_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &EndStringEventParam_Parms.ParamValue, &ParamValue, 0xC );

	pFnEndStringEventParam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStringEventParam, &EndStringEventParam_Parms, NULL );

	pFnEndStringEventParam->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogStringEventParam
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamValue                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTimed                         ( CPF_Parm )

void UAnalyticEventsBase::eventLogStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue, unsigned long bTimed )
{
	static UFunction* pFnLogStringEventParam = NULL;

	if ( ! pFnLogStringEventParam )
		pFnLogStringEventParam = (UFunction*) UObject::GObjObjects()->Data[ 14043 ];

	UAnalyticEventsBase_eventLogStringEventParam_Parms LogStringEventParam_Parms;
	memcpy ( &LogStringEventParam_Parms.EventName, &EventName, 0xC );
	memcpy ( &LogStringEventParam_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &LogStringEventParam_Parms.ParamValue, &ParamValue, 0xC );
	LogStringEventParam_Parms.bTimed = bTimed;

	pFnLogStringEventParam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogStringEventParam, &LogStringEventParam_Parms, NULL );

	pFnLogStringEventParam->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.EndStringEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventEndStringEvent ( struct FString EventName )
{
	static UFunction* pFnEndStringEvent = NULL;

	if ( ! pFnEndStringEvent )
		pFnEndStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 14041 ];

	UAnalyticEventsBase_eventEndStringEvent_Parms EndStringEvent_Parms;
	memcpy ( &EndStringEvent_Parms.EventName, &EventName, 0xC );

	pFnEndStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStringEvent, &EndStringEvent_Parms, NULL );

	pFnEndStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.LogStringEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTimed                         ( CPF_Parm )

void UAnalyticEventsBase::eventLogStringEvent ( struct FString EventName, unsigned long bTimed )
{
	static UFunction* pFnLogStringEvent = NULL;

	if ( ! pFnLogStringEvent )
		pFnLogStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 14038 ];

	UAnalyticEventsBase_eventLogStringEvent_Parms LogStringEvent_Parms;
	memcpy ( &LogStringEvent_Parms.EventName, &EventName, 0xC );
	LogStringEvent_Parms.bTimed = bTimed;

	pFnLogStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogStringEvent, &LogStringEvent_Parms, NULL );

	pFnLogStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.EndSession
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UAnalyticEventsBase::eventEndSession ( )
{
	static UFunction* pFnEndSession = NULL;

	if ( ! pFnEndSession )
		pFnEndSession = (UFunction*) UObject::GObjObjects()->Data[ 14037 ];

	UAnalyticEventsBase_eventEndSession_Parms EndSession_Parms;

	pFnEndSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndSession, &EndSession_Parms, NULL );

	pFnEndSession->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.StartSession
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UAnalyticEventsBase::eventStartSession ( )
{
	static UFunction* pFnStartSession = NULL;

	if ( ! pFnStartSession )
		pFnStartSession = (UFunction*) UObject::GObjObjects()->Data[ 14036 ];

	UAnalyticEventsBase_eventStartSession_Parms StartSession_Parms;

	pFnStartSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartSession, &StartSession_Parms, NULL );

	pFnStartSession->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.SetUserId
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 NewUserId                      ( CPF_Parm | CPF_NeedCtorLink )

void UAnalyticEventsBase::eventSetUserId ( struct FString NewUserId )
{
	static UFunction* pFnSetUserId = NULL;

	if ( ! pFnSetUserId )
		pFnSetUserId = (UFunction*) UObject::GObjObjects()->Data[ 14034 ];

	UAnalyticEventsBase_eventSetUserId_Parms SetUserId_Parms;
	memcpy ( &SetUserId_Parms.NewUserId, &NewUserId, 0xC );

	pFnSetUserId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUserId, &SetUserId_Parms, NULL );

	pFnSetUserId->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UAnalyticEventsBase::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 14033 ];

	UAnalyticEventsBase_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.AnalyticEventsBase.IsSessionInProgress
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAnalyticEventsBase::IsSessionInProgress ( )
{
	static UFunction* pFnIsSessionInProgress = NULL;

	if ( ! pFnIsSessionInProgress )
		pFnIsSessionInProgress = (UFunction*) UObject::GObjObjects()->Data[ 14031 ];

	UAnalyticEventsBase_execIsSessionInProgress_Parms IsSessionInProgress_Parms;

	this->ProcessEvent ( pFnIsSessionInProgress, &IsSessionInProgress_Parms, NULL );

	return IsSessionInProgress_Parms.ReturnValue;
};

// Function Engine.MultiProviderAnalytics.SendCachedEvents
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UMultiProviderAnalytics::eventSendCachedEvents ( )
{
	static UFunction* pFnSendCachedEvents = NULL;

	if ( ! pFnSendCachedEvents )
		pFnSendCachedEvents = (UFunction*) UObject::GObjObjects()->Data[ 26212 ];

	UMultiProviderAnalytics_eventSendCachedEvents_Parms SendCachedEvents_Parms;

	pFnSendCachedEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendCachedEvents, &SendCachedEvents_Parms, NULL );

	pFnSendCachedEvents->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogCurrencyGivenEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 GameCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// int                            GameCurrencyAmount             ( CPF_Parm )

void UMultiProviderAnalytics::eventLogCurrencyGivenEvent ( struct FString GameCurrencyType, int GameCurrencyAmount )
{
	static UFunction* pFnLogCurrencyGivenEvent = NULL;

	if ( ! pFnLogCurrencyGivenEvent )
		pFnLogCurrencyGivenEvent = (UFunction*) UObject::GObjObjects()->Data[ 26209 ];

	UMultiProviderAnalytics_eventLogCurrencyGivenEvent_Parms LogCurrencyGivenEvent_Parms;
	memcpy ( &LogCurrencyGivenEvent_Parms.GameCurrencyType, &GameCurrencyType, 0xC );
	LogCurrencyGivenEvent_Parms.GameCurrencyAmount = GameCurrencyAmount;

	pFnLogCurrencyGivenEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogCurrencyGivenEvent, &LogCurrencyGivenEvent_Parms, NULL );

	pFnLogCurrencyGivenEvent->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogCurrencyPurchaseEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 GameCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// int                            GameCurrencyAmount             ( CPF_Parm )
// struct FString                 RealCurrencyType               ( CPF_Parm | CPF_NeedCtorLink )
// float                          RealMoneyCost                  ( CPF_Parm )
// struct FString                 PaymentProvider                ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventLogCurrencyPurchaseEvent ( struct FString GameCurrencyType, int GameCurrencyAmount, struct FString RealCurrencyType, float RealMoneyCost, struct FString PaymentProvider )
{
	static UFunction* pFnLogCurrencyPurchaseEvent = NULL;

	if ( ! pFnLogCurrencyPurchaseEvent )
		pFnLogCurrencyPurchaseEvent = (UFunction*) UObject::GObjObjects()->Data[ 26203 ];

	UMultiProviderAnalytics_eventLogCurrencyPurchaseEvent_Parms LogCurrencyPurchaseEvent_Parms;
	memcpy ( &LogCurrencyPurchaseEvent_Parms.GameCurrencyType, &GameCurrencyType, 0xC );
	LogCurrencyPurchaseEvent_Parms.GameCurrencyAmount = GameCurrencyAmount;
	memcpy ( &LogCurrencyPurchaseEvent_Parms.RealCurrencyType, &RealCurrencyType, 0xC );
	LogCurrencyPurchaseEvent_Parms.RealMoneyCost = RealMoneyCost;
	memcpy ( &LogCurrencyPurchaseEvent_Parms.PaymentProvider, &PaymentProvider, 0xC );

	pFnLogCurrencyPurchaseEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogCurrencyPurchaseEvent, &LogCurrencyPurchaseEvent_Parms, NULL );

	pFnLogCurrencyPurchaseEvent->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogItemPurchaseEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ItemID                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Currency                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            PerItemCost                    ( CPF_Parm )
// int                            ItemQuantity                   ( CPF_Parm )

void UMultiProviderAnalytics::eventLogItemPurchaseEvent ( struct FString ItemID, struct FString Currency, int PerItemCost, int ItemQuantity )
{
	static UFunction* pFnLogItemPurchaseEvent = NULL;

	if ( ! pFnLogItemPurchaseEvent )
		pFnLogItemPurchaseEvent = (UFunction*) UObject::GObjObjects()->Data[ 26198 ];

	UMultiProviderAnalytics_eventLogItemPurchaseEvent_Parms LogItemPurchaseEvent_Parms;
	memcpy ( &LogItemPurchaseEvent_Parms.ItemID, &ItemID, 0xC );
	memcpy ( &LogItemPurchaseEvent_Parms.Currency, &Currency, 0xC );
	LogItemPurchaseEvent_Parms.PerItemCost = PerItemCost;
	LogItemPurchaseEvent_Parms.ItemQuantity = ItemQuantity;

	pFnLogItemPurchaseEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogItemPurchaseEvent, &LogItemPurchaseEvent_Parms, NULL );

	pFnLogItemPurchaseEvent->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogUserAttributeUpdateArray
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// TArray< struct FEventStringParam > AttributeArray                 ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventLogUserAttributeUpdateArray ( TArray< struct FEventStringParam > AttributeArray )
{
	static UFunction* pFnLogUserAttributeUpdateArray = NULL;

	if ( ! pFnLogUserAttributeUpdateArray )
		pFnLogUserAttributeUpdateArray = (UFunction*) UObject::GObjObjects()->Data[ 26195 ];

	UMultiProviderAnalytics_eventLogUserAttributeUpdateArray_Parms LogUserAttributeUpdateArray_Parms;
	memcpy ( &LogUserAttributeUpdateArray_Parms.AttributeArray, &AttributeArray, 0xC );

	pFnLogUserAttributeUpdateArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogUserAttributeUpdateArray, &LogUserAttributeUpdateArray_Parms, NULL );

	pFnLogUserAttributeUpdateArray->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogUserAttributeUpdate
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 AttributeName                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AttributeValue                 ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventLogUserAttributeUpdate ( struct FString AttributeName, struct FString AttributeValue )
{
	static UFunction* pFnLogUserAttributeUpdate = NULL;

	if ( ! pFnLogUserAttributeUpdate )
		pFnLogUserAttributeUpdate = (UFunction*) UObject::GObjObjects()->Data[ 26192 ];

	UMultiProviderAnalytics_eventLogUserAttributeUpdate_Parms LogUserAttributeUpdate_Parms;
	memcpy ( &LogUserAttributeUpdate_Parms.AttributeName, &AttributeName, 0xC );
	memcpy ( &LogUserAttributeUpdate_Parms.AttributeValue, &AttributeValue, 0xC );

	pFnLogUserAttributeUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogUserAttributeUpdate, &LogUserAttributeUpdate_Parms, NULL );

	pFnLogUserAttributeUpdate->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogErrorMessage
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ErrorName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventLogErrorMessage ( struct FString ErrorName, struct FString ErrorMessage )
{
	static UFunction* pFnLogErrorMessage = NULL;

	if ( ! pFnLogErrorMessage )
		pFnLogErrorMessage = (UFunction*) UObject::GObjObjects()->Data[ 26189 ];

	UMultiProviderAnalytics_eventLogErrorMessage_Parms LogErrorMessage_Parms;
	memcpy ( &LogErrorMessage_Parms.ErrorName, &ErrorName, 0xC );
	memcpy ( &LogErrorMessage_Parms.ErrorMessage, &ErrorMessage, 0xC );

	pFnLogErrorMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogErrorMessage, &LogErrorMessage_Parms, NULL );

	pFnLogErrorMessage->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.EndStringEventParamArray
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FEventStringParam > ParamArray                     ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventEndStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray )
{
	static UFunction* pFnEndStringEventParamArray = NULL;

	if ( ! pFnEndStringEventParamArray )
		pFnEndStringEventParamArray = (UFunction*) UObject::GObjObjects()->Data[ 26185 ];

	UMultiProviderAnalytics_eventEndStringEventParamArray_Parms EndStringEventParamArray_Parms;
	memcpy ( &EndStringEventParamArray_Parms.EventName, &EventName, 0xC );
	memcpy ( &EndStringEventParamArray_Parms.ParamArray, &ParamArray, 0xC );

	pFnEndStringEventParamArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStringEventParamArray, &EndStringEventParamArray_Parms, NULL );

	pFnEndStringEventParamArray->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogStringEventParamArray
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FEventStringParam > ParamArray                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTimed                         ( CPF_Parm )

void UMultiProviderAnalytics::eventLogStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray, unsigned long bTimed )
{
	static UFunction* pFnLogStringEventParamArray = NULL;

	if ( ! pFnLogStringEventParamArray )
		pFnLogStringEventParamArray = (UFunction*) UObject::GObjObjects()->Data[ 26180 ];

	UMultiProviderAnalytics_eventLogStringEventParamArray_Parms LogStringEventParamArray_Parms;
	memcpy ( &LogStringEventParamArray_Parms.EventName, &EventName, 0xC );
	memcpy ( &LogStringEventParamArray_Parms.ParamArray, &ParamArray, 0xC );
	LogStringEventParamArray_Parms.bTimed = bTimed;

	pFnLogStringEventParamArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogStringEventParamArray, &LogStringEventParamArray_Parms, NULL );

	pFnLogStringEventParamArray->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.EndStringEventParam
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamValue                     ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventEndStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue )
{
	static UFunction* pFnEndStringEventParam = NULL;

	if ( ! pFnEndStringEventParam )
		pFnEndStringEventParam = (UFunction*) UObject::GObjObjects()->Data[ 26176 ];

	UMultiProviderAnalytics_eventEndStringEventParam_Parms EndStringEventParam_Parms;
	memcpy ( &EndStringEventParam_Parms.EventName, &EventName, 0xC );
	memcpy ( &EndStringEventParam_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &EndStringEventParam_Parms.ParamValue, &ParamValue, 0xC );

	pFnEndStringEventParam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStringEventParam, &EndStringEventParam_Parms, NULL );

	pFnEndStringEventParam->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogStringEventParam
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ParamValue                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTimed                         ( CPF_Parm )

void UMultiProviderAnalytics::eventLogStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue, unsigned long bTimed )
{
	static UFunction* pFnLogStringEventParam = NULL;

	if ( ! pFnLogStringEventParam )
		pFnLogStringEventParam = (UFunction*) UObject::GObjObjects()->Data[ 26171 ];

	UMultiProviderAnalytics_eventLogStringEventParam_Parms LogStringEventParam_Parms;
	memcpy ( &LogStringEventParam_Parms.EventName, &EventName, 0xC );
	memcpy ( &LogStringEventParam_Parms.ParamName, &ParamName, 0xC );
	memcpy ( &LogStringEventParam_Parms.ParamValue, &ParamValue, 0xC );
	LogStringEventParam_Parms.bTimed = bTimed;

	pFnLogStringEventParam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogStringEventParam, &LogStringEventParam_Parms, NULL );

	pFnLogStringEventParam->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.EndStringEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventEndStringEvent ( struct FString EventName )
{
	static UFunction* pFnEndStringEvent = NULL;

	if ( ! pFnEndStringEvent )
		pFnEndStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 26169 ];

	UMultiProviderAnalytics_eventEndStringEvent_Parms EndStringEvent_Parms;
	memcpy ( &EndStringEvent_Parms.EventName, &EventName, 0xC );

	pFnEndStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndStringEvent, &EndStringEvent_Parms, NULL );

	pFnEndStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.LogStringEvent
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTimed                         ( CPF_Parm )

void UMultiProviderAnalytics::eventLogStringEvent ( struct FString EventName, unsigned long bTimed )
{
	static UFunction* pFnLogStringEvent = NULL;

	if ( ! pFnLogStringEvent )
		pFnLogStringEvent = (UFunction*) UObject::GObjObjects()->Data[ 26166 ];

	UMultiProviderAnalytics_eventLogStringEvent_Parms LogStringEvent_Parms;
	memcpy ( &LogStringEvent_Parms.EventName, &EventName, 0xC );
	LogStringEvent_Parms.bTimed = bTimed;

	pFnLogStringEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogStringEvent, &LogStringEvent_Parms, NULL );

	pFnLogStringEvent->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.EndSession
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UMultiProviderAnalytics::eventEndSession ( )
{
	static UFunction* pFnEndSession = NULL;

	if ( ! pFnEndSession )
		pFnEndSession = (UFunction*) UObject::GObjObjects()->Data[ 26165 ];

	UMultiProviderAnalytics_eventEndSession_Parms EndSession_Parms;

	pFnEndSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndSession, &EndSession_Parms, NULL );

	pFnEndSession->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.StartSession
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UMultiProviderAnalytics::eventStartSession ( )
{
	static UFunction* pFnStartSession = NULL;

	if ( ! pFnStartSession )
		pFnStartSession = (UFunction*) UObject::GObjObjects()->Data[ 26164 ];

	UMultiProviderAnalytics_eventStartSession_Parms StartSession_Parms;

	pFnStartSession->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartSession, &StartSession_Parms, NULL );

	pFnStartSession->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.SetUserId
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 NewUserId                      ( CPF_Parm | CPF_NeedCtorLink )

void UMultiProviderAnalytics::eventSetUserId ( struct FString NewUserId )
{
	static UFunction* pFnSetUserId = NULL;

	if ( ! pFnSetUserId )
		pFnSetUserId = (UFunction*) UObject::GObjObjects()->Data[ 26162 ];

	UMultiProviderAnalytics_eventSetUserId_Parms SetUserId_Parms;
	memcpy ( &SetUserId_Parms.NewUserId, &NewUserId, 0xC );

	pFnSetUserId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUserId, &SetUserId_Parms, NULL );

	pFnSetUserId->FunctionFlags |= 0x400;
};

// Function Engine.MultiProviderAnalytics.Init
// [0x00020002] 
// Parameters infos:

void UMultiProviderAnalytics::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 26158 ];

	UMultiProviderAnalytics_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.AppNotificationsBase.DebugLogNotification
// [0x00420002] 
// Parameters infos:
// struct FNotificationInfo       Notification                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UAppNotificationsBase::DebugLogNotification ( struct FNotificationInfo* Notification )
{
	static UFunction* pFnDebugLogNotification = NULL;

	if ( ! pFnDebugLogNotification )
		pFnDebugLogNotification = (UFunction*) UObject::GObjObjects()->Data[ 15493 ];

	UAppNotificationsBase_execDebugLogNotification_Parms DebugLogNotification_Parms;

	this->ProcessEvent ( pFnDebugLogNotification, &DebugLogNotification_Parms, NULL );

	if ( Notification )
		memcpy ( Notification, &DebugLogNotification_Parms.Notification, 0x20 );
};

// Function Engine.AppNotificationsBase.OnReceivedRemoteNotification
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasAppActive                  ( CPF_Parm )
// struct FNotificationInfo       Notification                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UAppNotificationsBase::OnReceivedRemoteNotification ( unsigned long bWasAppActive, struct FNotificationInfo* Notification )
{
	static UFunction* pFnOnReceivedRemoteNotification = NULL;

	if ( ! pFnOnReceivedRemoteNotification )
		pFnOnReceivedRemoteNotification = (UFunction*) UObject::GObjObjects()->Data[ 15478 ];

	UAppNotificationsBase_execOnReceivedRemoteNotification_Parms OnReceivedRemoteNotification_Parms;
	OnReceivedRemoteNotification_Parms.bWasAppActive = bWasAppActive;

	this->ProcessEvent ( pFnOnReceivedRemoteNotification, &OnReceivedRemoteNotification_Parms, NULL );

	if ( Notification )
		memcpy ( Notification, &OnReceivedRemoteNotification_Parms.Notification, 0x20 );
};

// Function Engine.AppNotificationsBase.OnReceivedLocalNotification
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasAppActive                  ( CPF_Parm )
// struct FNotificationInfo       Notification                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UAppNotificationsBase::OnReceivedLocalNotification ( unsigned long bWasAppActive, struct FNotificationInfo* Notification )
{
	static UFunction* pFnOnReceivedLocalNotification = NULL;

	if ( ! pFnOnReceivedLocalNotification )
		pFnOnReceivedLocalNotification = (UFunction*) UObject::GObjObjects()->Data[ 15480 ];

	UAppNotificationsBase_execOnReceivedLocalNotification_Parms OnReceivedLocalNotification_Parms;
	OnReceivedLocalNotification_Parms.bWasAppActive = bWasAppActive;

	this->ProcessEvent ( pFnOnReceivedLocalNotification, &OnReceivedLocalNotification_Parms, NULL );

	if ( Notification )
		memcpy ( Notification, &OnReceivedLocalNotification_Parms.Notification, 0x20 );
};

// Function Engine.AppNotificationsBase.CancelAllScheduledLocalNotifications
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAppNotificationsBase::CancelAllScheduledLocalNotifications ( )
{
	static UFunction* pFnCancelAllScheduledLocalNotifications = NULL;

	if ( ! pFnCancelAllScheduledLocalNotifications )
		pFnCancelAllScheduledLocalNotifications = (UFunction*) UObject::GObjObjects()->Data[ 15488 ];

	UAppNotificationsBase_execCancelAllScheduledLocalNotifications_Parms CancelAllScheduledLocalNotifications_Parms;

	pFnCancelAllScheduledLocalNotifications->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelAllScheduledLocalNotifications, &CancelAllScheduledLocalNotifications_Parms, NULL );

	pFnCancelAllScheduledLocalNotifications->FunctionFlags |= 0x400;
};

// Function Engine.AppNotificationsBase.ScheduleLocalNotification
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            StartOffsetSeconds             ( CPF_Parm )
// struct FNotificationInfo       Notification                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UAppNotificationsBase::ScheduleLocalNotification ( int StartOffsetSeconds, struct FNotificationInfo* Notification )
{
	static UFunction* pFnScheduleLocalNotification = NULL;

	if ( ! pFnScheduleLocalNotification )
		pFnScheduleLocalNotification = (UFunction*) UObject::GObjObjects()->Data[ 15485 ];

	UAppNotificationsBase_execScheduleLocalNotification_Parms ScheduleLocalNotification_Parms;
	ScheduleLocalNotification_Parms.StartOffsetSeconds = StartOffsetSeconds;

	pFnScheduleLocalNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScheduleLocalNotification, &ScheduleLocalNotification_Parms, NULL );

	pFnScheduleLocalNotification->FunctionFlags |= 0x400;

	if ( Notification )
		memcpy ( Notification, &ScheduleLocalNotification_Parms.Notification, 0x20 );
};

// Function Engine.AppNotificationsBase.WasLaunchedViaNotification
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UAppNotificationsBase::WasLaunchedViaNotification ( )
{
	static UFunction* pFnWasLaunchedViaNotification = NULL;

	if ( ! pFnWasLaunchedViaNotification )
		pFnWasLaunchedViaNotification = (UFunction*) UObject::GObjObjects()->Data[ 15483 ];

	UAppNotificationsBase_execWasLaunchedViaNotification_Parms WasLaunchedViaNotification_Parms;

	this->ProcessEvent ( pFnWasLaunchedViaNotification, &WasLaunchedViaNotification_Parms, NULL );

	return WasLaunchedViaNotification_Parms.ReturnValue;
};

// Function Engine.AppNotificationsBase.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UAppNotificationsBase::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 15482 ];

	UAppNotificationsBase_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.CloudStorageBase.UpgradeLocalStorageToCloud
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UCloudStorageUpgradeHelper* UpgradeHelper                  ( CPF_Parm )
// unsigned long                  bForceSearchAgain              ( CPF_OptionalParm | CPF_Parm )

bool UCloudStorageBase::eventUpgradeLocalStorageToCloud ( class UCloudStorageUpgradeHelper* UpgradeHelper, unsigned long bForceSearchAgain )
{
	static UFunction* pFnUpgradeLocalStorageToCloud = NULL;

	if ( ! pFnUpgradeLocalStorageToCloud )
		pFnUpgradeLocalStorageToCloud = (UFunction*) UObject::GObjObjects()->Data[ 17009 ];

	UCloudStorageBase_eventUpgradeLocalStorageToCloud_Parms UpgradeLocalStorageToCloud_Parms;
	UpgradeLocalStorageToCloud_Parms.UpgradeHelper = UpgradeHelper;
	UpgradeLocalStorageToCloud_Parms.bForceSearchAgain = bForceSearchAgain;

	pFnUpgradeLocalStorageToCloud->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpgradeLocalStorageToCloud, &UpgradeLocalStorageToCloud_Parms, NULL );

	pFnUpgradeLocalStorageToCloud->FunctionFlags |= 0x400;

	return UpgradeLocalStorageToCloud_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ResolveConflictWithVersionIndex
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

bool UCloudStorageBase::eventResolveConflictWithVersionIndex ( int Index )
{
	static UFunction* pFnResolveConflictWithVersionIndex = NULL;

	if ( ! pFnResolveConflictWithVersionIndex )
		pFnResolveConflictWithVersionIndex = (UFunction*) UObject::GObjObjects()->Data[ 17006 ];

	UCloudStorageBase_eventResolveConflictWithVersionIndex_Parms ResolveConflictWithVersionIndex_Parms;
	ResolveConflictWithVersionIndex_Parms.Index = Index;

	pFnResolveConflictWithVersionIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveConflictWithVersionIndex, &ResolveConflictWithVersionIndex_Parms, NULL );

	pFnResolveConflictWithVersionIndex->FunctionFlags |= 0x400;

	return ResolveConflictWithVersionIndex_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ResolveConflictWithNewestDocument
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCloudStorageBase::eventResolveConflictWithNewestDocument ( )
{
	static UFunction* pFnResolveConflictWithNewestDocument = NULL;

	if ( ! pFnResolveConflictWithNewestDocument )
		pFnResolveConflictWithNewestDocument = (UFunction*) UObject::GObjObjects()->Data[ 17004 ];

	UCloudStorageBase_eventResolveConflictWithNewestDocument_Parms ResolveConflictWithNewestDocument_Parms;

	pFnResolveConflictWithNewestDocument->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveConflictWithNewestDocument, &ResolveConflictWithNewestDocument_Parms, NULL );

	pFnResolveConflictWithNewestDocument->FunctionFlags |= 0x400;

	return ResolveConflictWithNewestDocument_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.WaitForWritesToFinish
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxTimeSeconds                 ( CPF_OptionalParm | CPF_Parm )

bool UCloudStorageBase::eventWaitForWritesToFinish ( float MaxTimeSeconds )
{
	static UFunction* pFnWaitForWritesToFinish = NULL;

	if ( ! pFnWaitForWritesToFinish )
		pFnWaitForWritesToFinish = (UFunction*) UObject::GObjObjects()->Data[ 17001 ];

	UCloudStorageBase_eventWaitForWritesToFinish_Parms WaitForWritesToFinish_Parms;
	WaitForWritesToFinish_Parms.MaxTimeSeconds = MaxTimeSeconds;

	pFnWaitForWritesToFinish->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitForWritesToFinish, &WaitForWritesToFinish_Parms, NULL );

	pFnWaitForWritesToFinish->FunctionFlags |= 0x400;

	return WaitForWritesToFinish_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.IsStillWritingFiles
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCloudStorageBase::eventIsStillWritingFiles ( )
{
	static UFunction* pFnIsStillWritingFiles = NULL;

	if ( ! pFnIsStillWritingFiles )
		pFnIsStillWritingFiles = (UFunction*) UObject::GObjObjects()->Data[ 16999 ];

	UCloudStorageBase_eventIsStillWritingFiles_Parms IsStillWritingFiles_Parms;

	pFnIsStillWritingFiles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsStillWritingFiles, &IsStillWritingFiles_Parms, NULL );

	pFnIsStillWritingFiles->FunctionFlags |= 0x400;

	return IsStillWritingFiles_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.SaveDocumentWithObject
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// class UObject*                 ObjectData                     ( CPF_Parm )
// int                            SaveVersion                    ( CPF_Parm )

bool UCloudStorageBase::eventSaveDocumentWithObject ( int Index, class UObject* ObjectData, int SaveVersion )
{
	static UFunction* pFnSaveDocumentWithObject = NULL;

	if ( ! pFnSaveDocumentWithObject )
		pFnSaveDocumentWithObject = (UFunction*) UObject::GObjObjects()->Data[ 16994 ];

	UCloudStorageBase_eventSaveDocumentWithObject_Parms SaveDocumentWithObject_Parms;
	SaveDocumentWithObject_Parms.Index = Index;
	SaveDocumentWithObject_Parms.ObjectData = ObjectData;
	SaveDocumentWithObject_Parms.SaveVersion = SaveVersion;

	pFnSaveDocumentWithObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveDocumentWithObject, &SaveDocumentWithObject_Parms, NULL );

	pFnSaveDocumentWithObject->FunctionFlags |= 0x400;

	return SaveDocumentWithObject_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.SaveDocumentWithBytes
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// TArray< unsigned char >        ByteData                       ( CPF_Parm | CPF_NeedCtorLink )

bool UCloudStorageBase::eventSaveDocumentWithBytes ( int Index, TArray< unsigned char > ByteData )
{
	static UFunction* pFnSaveDocumentWithBytes = NULL;

	if ( ! pFnSaveDocumentWithBytes )
		pFnSaveDocumentWithBytes = (UFunction*) UObject::GObjObjects()->Data[ 16989 ];

	UCloudStorageBase_eventSaveDocumentWithBytes_Parms SaveDocumentWithBytes_Parms;
	SaveDocumentWithBytes_Parms.Index = Index;
	memcpy ( &SaveDocumentWithBytes_Parms.ByteData, &ByteData, 0xC );

	pFnSaveDocumentWithBytes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveDocumentWithBytes, &SaveDocumentWithBytes_Parms, NULL );

	pFnSaveDocumentWithBytes->FunctionFlags |= 0x400;

	return SaveDocumentWithBytes_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.SaveDocumentWithString
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// struct FString                 StringData                     ( CPF_Parm | CPF_NeedCtorLink )

bool UCloudStorageBase::eventSaveDocumentWithString ( int Index, struct FString StringData )
{
	static UFunction* pFnSaveDocumentWithString = NULL;

	if ( ! pFnSaveDocumentWithString )
		pFnSaveDocumentWithString = (UFunction*) UObject::GObjObjects()->Data[ 16985 ];

	UCloudStorageBase_eventSaveDocumentWithString_Parms SaveDocumentWithString_Parms;
	SaveDocumentWithString_Parms.Index = Index;
	memcpy ( &SaveDocumentWithString_Parms.StringData, &StringData, 0xC );

	pFnSaveDocumentWithString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveDocumentWithString, &SaveDocumentWithString_Parms, NULL );

	pFnSaveDocumentWithString->FunctionFlags |= 0x400;

	return SaveDocumentWithString_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.WriteCloudDocument
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

bool UCloudStorageBase::eventWriteCloudDocument ( int Index )
{
	static UFunction* pFnWriteCloudDocument = NULL;

	if ( ! pFnWriteCloudDocument )
		pFnWriteCloudDocument = (UFunction*) UObject::GObjObjects()->Data[ 16982 ];

	UCloudStorageBase_eventWriteCloudDocument_Parms WriteCloudDocument_Parms;
	WriteCloudDocument_Parms.Index = Index;

	pFnWriteCloudDocument->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWriteCloudDocument, &WriteCloudDocument_Parms, NULL );

	pFnWriteCloudDocument->FunctionFlags |= 0x400;

	return WriteCloudDocument_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ParseDocumentAsObject
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// class UClass*                  ObjectClass                    ( CPF_Parm )
// int                            ExpectedVersion                ( CPF_Parm )
// unsigned long                  bIsForConflict                 ( CPF_OptionalParm | CPF_Parm )

class UObject* UCloudStorageBase::eventParseDocumentAsObject ( int Index, class UClass* ObjectClass, int ExpectedVersion, unsigned long bIsForConflict )
{
	static UFunction* pFnParseDocumentAsObject = NULL;

	if ( ! pFnParseDocumentAsObject )
		pFnParseDocumentAsObject = (UFunction*) UObject::GObjObjects()->Data[ 16976 ];

	UCloudStorageBase_eventParseDocumentAsObject_Parms ParseDocumentAsObject_Parms;
	ParseDocumentAsObject_Parms.Index = Index;
	ParseDocumentAsObject_Parms.ObjectClass = ObjectClass;
	ParseDocumentAsObject_Parms.ExpectedVersion = ExpectedVersion;
	ParseDocumentAsObject_Parms.bIsForConflict = bIsForConflict;

	pFnParseDocumentAsObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseDocumentAsObject, &ParseDocumentAsObject_Parms, NULL );

	pFnParseDocumentAsObject->FunctionFlags |= 0x400;

	return ParseDocumentAsObject_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ParseDocumentAsBytes
// [0x00424C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// unsigned long                  bIsForConflict                 ( CPF_OptionalParm | CPF_Parm )
// TArray< unsigned char >        ByteData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudStorageBase::eventParseDocumentAsBytes ( int Index, unsigned long bIsForConflict, TArray< unsigned char >* ByteData )
{
	static UFunction* pFnParseDocumentAsBytes = NULL;

	if ( ! pFnParseDocumentAsBytes )
		pFnParseDocumentAsBytes = (UFunction*) UObject::GObjObjects()->Data[ 16971 ];

	UCloudStorageBase_eventParseDocumentAsBytes_Parms ParseDocumentAsBytes_Parms;
	ParseDocumentAsBytes_Parms.Index = Index;
	ParseDocumentAsBytes_Parms.bIsForConflict = bIsForConflict;

	pFnParseDocumentAsBytes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseDocumentAsBytes, &ParseDocumentAsBytes_Parms, NULL );

	pFnParseDocumentAsBytes->FunctionFlags |= 0x400;

	if ( ByteData )
		memcpy ( ByteData, &ParseDocumentAsBytes_Parms.ByteData, 0xC );
};

// Function Engine.CloudStorageBase.ParseDocumentAsString
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )
// unsigned long                  bIsForConflict                 ( CPF_OptionalParm | CPF_Parm )

struct FString UCloudStorageBase::eventParseDocumentAsString ( int Index, unsigned long bIsForConflict )
{
	static UFunction* pFnParseDocumentAsString = NULL;

	if ( ! pFnParseDocumentAsString )
		pFnParseDocumentAsString = (UFunction*) UObject::GObjObjects()->Data[ 16967 ];

	UCloudStorageBase_eventParseDocumentAsString_Parms ParseDocumentAsString_Parms;
	ParseDocumentAsString_Parms.Index = Index;
	ParseDocumentAsString_Parms.bIsForConflict = bIsForConflict;

	pFnParseDocumentAsString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseDocumentAsString, &ParseDocumentAsString_Parms, NULL );

	pFnParseDocumentAsString->FunctionFlags |= 0x400;

	return ParseDocumentAsString_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ReadCloudDocument
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// unsigned long                  bIsForConflict                 ( CPF_OptionalParm | CPF_Parm )

bool UCloudStorageBase::eventReadCloudDocument ( int Index, unsigned long bIsForConflict )
{
	static UFunction* pFnReadCloudDocument = NULL;

	if ( ! pFnReadCloudDocument )
		pFnReadCloudDocument = (UFunction*) UObject::GObjObjects()->Data[ 16963 ];

	UCloudStorageBase_eventReadCloudDocument_Parms ReadCloudDocument_Parms;
	ReadCloudDocument_Parms.Index = Index;
	ReadCloudDocument_Parms.bIsForConflict = bIsForConflict;

	pFnReadCloudDocument->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadCloudDocument, &ReadCloudDocument_Parms, NULL );

	pFnReadCloudDocument->FunctionFlags |= 0x400;

	return ReadCloudDocument_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.DeleteAllCloudDocuments
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UCloudStorageBase::eventDeleteAllCloudDocuments ( )
{
	static UFunction* pFnDeleteAllCloudDocuments = NULL;

	if ( ! pFnDeleteAllCloudDocuments )
		pFnDeleteAllCloudDocuments = (UFunction*) UObject::GObjObjects()->Data[ 16962 ];

	UCloudStorageBase_eventDeleteAllCloudDocuments_Parms DeleteAllCloudDocuments_Parms;

	pFnDeleteAllCloudDocuments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeleteAllCloudDocuments, &DeleteAllCloudDocuments_Parms, NULL );

	pFnDeleteAllCloudDocuments->FunctionFlags |= 0x400;
};

// Function Engine.CloudStorageBase.CreateCloudDocument
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

int UCloudStorageBase::eventCreateCloudDocument ( struct FString Filename )
{
	static UFunction* pFnCreateCloudDocument = NULL;

	if ( ! pFnCreateCloudDocument )
		pFnCreateCloudDocument = (UFunction*) UObject::GObjObjects()->Data[ 16959 ];

	UCloudStorageBase_eventCreateCloudDocument_Parms CreateCloudDocument_Parms;
	memcpy ( &CreateCloudDocument_Parms.Filename, &Filename, 0xC );

	pFnCreateCloudDocument->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCloudDocument, &CreateCloudDocument_Parms, NULL );

	pFnCreateCloudDocument->FunctionFlags |= 0x400;

	return CreateCloudDocument_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.GetCloudDocumentName
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_Parm )

struct FString UCloudStorageBase::eventGetCloudDocumentName ( int Index )
{
	static UFunction* pFnGetCloudDocumentName = NULL;

	if ( ! pFnGetCloudDocumentName )
		pFnGetCloudDocumentName = (UFunction*) UObject::GObjObjects()->Data[ 16956 ];

	UCloudStorageBase_eventGetCloudDocumentName_Parms GetCloudDocumentName_Parms;
	GetCloudDocumentName_Parms.Index = Index;

	pFnGetCloudDocumentName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCloudDocumentName, &GetCloudDocumentName_Parms, NULL );

	pFnGetCloudDocumentName->FunctionFlags |= 0x400;

	return GetCloudDocumentName_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.GetNumCloudDocuments
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsForConflict                 ( CPF_OptionalParm | CPF_Parm )

int UCloudStorageBase::eventGetNumCloudDocuments ( unsigned long bIsForConflict )
{
	static UFunction* pFnGetNumCloudDocuments = NULL;

	if ( ! pFnGetNumCloudDocuments )
		pFnGetNumCloudDocuments = (UFunction*) UObject::GObjObjects()->Data[ 16953 ];

	UCloudStorageBase_eventGetNumCloudDocuments_Parms GetNumCloudDocuments_Parms;
	GetNumCloudDocuments_Parms.bIsForConflict = bIsForConflict;

	pFnGetNumCloudDocuments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumCloudDocuments, &GetNumCloudDocuments_Parms, NULL );

	pFnGetNumCloudDocuments->FunctionFlags |= 0x400;

	return GetNumCloudDocuments_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.QueryForCloudDocuments
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCloudStorageBase::eventQueryForCloudDocuments ( )
{
	static UFunction* pFnQueryForCloudDocuments = NULL;

	if ( ! pFnQueryForCloudDocuments )
		pFnQueryForCloudDocuments = (UFunction*) UObject::GObjObjects()->Data[ 16951 ];

	UCloudStorageBase_eventQueryForCloudDocuments_Parms QueryForCloudDocuments_Parms;

	pFnQueryForCloudDocuments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueryForCloudDocuments, &QueryForCloudDocuments_Parms, NULL );

	pFnQueryForCloudDocuments->FunctionFlags |= 0x400;

	return QueryForCloudDocuments_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.WriteKeyValue
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FPlatformInterfaceData  Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudStorageBase::eventWriteKeyValue ( struct FString KeyName, struct FPlatformInterfaceData* Value )
{
	static UFunction* pFnWriteKeyValue = NULL;

	if ( ! pFnWriteKeyValue )
		pFnWriteKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 16947 ];

	UCloudStorageBase_eventWriteKeyValue_Parms WriteKeyValue_Parms;
	memcpy ( &WriteKeyValue_Parms.KeyName, &KeyName, 0xC );

	pFnWriteKeyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWriteKeyValue, &WriteKeyValue_Parms, NULL );

	pFnWriteKeyValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &WriteKeyValue_Parms.Value, 0x30 );

	return WriteKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ReadKeyValueFromLocalStore
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )
// struct FPlatformInterfaceDelegateResult Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudStorageBase::eventReadKeyValueFromLocalStore ( struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value )
{
	static UFunction* pFnReadKeyValueFromLocalStore = NULL;

	if ( ! pFnReadKeyValueFromLocalStore )
		pFnReadKeyValueFromLocalStore = (UFunction*) UObject::GObjObjects()->Data[ 16942 ];

	UCloudStorageBase_eventReadKeyValueFromLocalStore_Parms ReadKeyValueFromLocalStore_Parms;
	memcpy ( &ReadKeyValueFromLocalStore_Parms.KeyName, &KeyName, 0xC );
	ReadKeyValueFromLocalStore_Parms.Type = Type;

	pFnReadKeyValueFromLocalStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadKeyValueFromLocalStore, &ReadKeyValueFromLocalStore_Parms, NULL );

	pFnReadKeyValueFromLocalStore->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &ReadKeyValueFromLocalStore_Parms.Value, 0x34 );

	return ReadKeyValueFromLocalStore_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.ReadKeyValue
// [0x00420C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )
// struct FPlatformInterfaceDelegateResult Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudStorageBase::eventReadKeyValue ( struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value )
{
	static UFunction* pFnReadKeyValue = NULL;

	if ( ! pFnReadKeyValue )
		pFnReadKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 16937 ];

	UCloudStorageBase_eventReadKeyValue_Parms ReadKeyValue_Parms;
	memcpy ( &ReadKeyValue_Parms.KeyName, &KeyName, 0xC );
	ReadKeyValue_Parms.Type = Type;

	pFnReadKeyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadKeyValue, &ReadKeyValue_Parms, NULL );

	pFnReadKeyValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &ReadKeyValue_Parms.Value, 0x34 );

	return ReadKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.IsUsingLocalStorage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UCloudStorageBase::IsUsingLocalStorage ( )
{
	static UFunction* pFnIsUsingLocalStorage = NULL;

	if ( ! pFnIsUsingLocalStorage )
		pFnIsUsingLocalStorage = (UFunction*) UObject::GObjObjects()->Data[ 16935 ];

	UCloudStorageBase_execIsUsingLocalStorage_Parms IsUsingLocalStorage_Parms;

	pFnIsUsingLocalStorage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsingLocalStorage, &IsUsingLocalStorage_Parms, NULL );

	pFnIsUsingLocalStorage->FunctionFlags |= 0x400;

	return IsUsingLocalStorage_Parms.ReturnValue;
};

// Function Engine.CloudStorageBase.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UCloudStorageBase::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 16934 ];

	UCloudStorageBase_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.FacebookIntegration.Disconnect
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UFacebookIntegration::eventDisconnect ( )
{
	static UFunction* pFnDisconnect = NULL;

	if ( ! pFnDisconnect )
		pFnDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 19803 ];

	UFacebookIntegration_eventDisconnect_Parms Disconnect_Parms;

	pFnDisconnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisconnect, &Disconnect_Parms, NULL );

	pFnDisconnect->FunctionFlags |= 0x400;
};

// Function Engine.FacebookIntegration.FacebookDialog
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 Action                         ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       ParamKeysAndValues             ( CPF_Parm | CPF_NeedCtorLink )

void UFacebookIntegration::eventFacebookDialog ( struct FString Action, TArray< struct FString > ParamKeysAndValues )
{
	static UFunction* pFnFacebookDialog = NULL;

	if ( ! pFnFacebookDialog )
		pFnFacebookDialog = (UFunction*) UObject::GObjObjects()->Data[ 19799 ];

	UFacebookIntegration_eventFacebookDialog_Parms FacebookDialog_Parms;
	memcpy ( &FacebookDialog_Parms.Action, &Action, 0xC );
	memcpy ( &FacebookDialog_Parms.ParamKeysAndValues, &ParamKeysAndValues, 0xC );

	pFnFacebookDialog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFacebookDialog, &FacebookDialog_Parms, NULL );

	pFnFacebookDialog->FunctionFlags |= 0x400;
};

// Function Engine.FacebookIntegration.FacebookRequest
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 GraphRequest                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 HTTPMethod                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       ParamKeysAndValues             ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UFacebookIntegration::eventFacebookRequest ( struct FString GraphRequest, struct FString HTTPMethod, TArray< struct FString > ParamKeysAndValues )
{
	static UFunction* pFnFacebookRequest = NULL;

	if ( ! pFnFacebookRequest )
		pFnFacebookRequest = (UFunction*) UObject::GObjObjects()->Data[ 19794 ];

	UFacebookIntegration_eventFacebookRequest_Parms FacebookRequest_Parms;
	memcpy ( &FacebookRequest_Parms.GraphRequest, &GraphRequest, 0xC );
	memcpy ( &FacebookRequest_Parms.HTTPMethod, &HTTPMethod, 0xC );
	memcpy ( &FacebookRequest_Parms.ParamKeysAndValues, &ParamKeysAndValues, 0xC );

	pFnFacebookRequest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFacebookRequest, &FacebookRequest_Parms, NULL );

	pFnFacebookRequest->FunctionFlags |= 0x400;
};

// Function Engine.FacebookIntegration.IsAuthorized
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UFacebookIntegration::eventIsAuthorized ( )
{
	static UFunction* pFnIsAuthorized = NULL;

	if ( ! pFnIsAuthorized )
		pFnIsAuthorized = (UFunction*) UObject::GObjObjects()->Data[ 19792 ];

	UFacebookIntegration_eventIsAuthorized_Parms IsAuthorized_Parms;

	pFnIsAuthorized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAuthorized, &IsAuthorized_Parms, NULL );

	pFnIsAuthorized->FunctionFlags |= 0x400;

	return IsAuthorized_Parms.ReturnValue;
};

// Function Engine.FacebookIntegration.Authorize
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UFacebookIntegration::eventAuthorize ( )
{
	static UFunction* pFnAuthorize = NULL;

	if ( ! pFnAuthorize )
		pFnAuthorize = (UFunction*) UObject::GObjObjects()->Data[ 19790 ];

	UFacebookIntegration_eventAuthorize_Parms Authorize_Parms;

	pFnAuthorize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAuthorize, &Authorize_Parms, NULL );

	pFnAuthorize->FunctionFlags |= 0x400;

	return Authorize_Parms.ReturnValue;
};

// Function Engine.FacebookIntegration.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UFacebookIntegration::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 19788 ];

	UFacebookIntegration_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;

	return Init_Parms.ReturnValue;
};

// Function Engine.InAppMessageBase.ShowInAppEmailUI
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InitialSubject                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 InitialMessage                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UInAppMessageBase::eventShowInAppEmailUI ( struct FString InitialSubject, struct FString InitialMessage )
{
	static UFunction* pFnShowInAppEmailUI = NULL;

	if ( ! pFnShowInAppEmailUI )
		pFnShowInAppEmailUI = (UFunction*) UObject::GObjObjects()->Data[ 23124 ];

	UInAppMessageBase_eventShowInAppEmailUI_Parms ShowInAppEmailUI_Parms;
	memcpy ( &ShowInAppEmailUI_Parms.InitialSubject, &InitialSubject, 0xC );
	memcpy ( &ShowInAppEmailUI_Parms.InitialMessage, &InitialMessage, 0xC );

	pFnShowInAppEmailUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowInAppEmailUI, &ShowInAppEmailUI_Parms, NULL );

	pFnShowInAppEmailUI->FunctionFlags |= 0x400;

	return ShowInAppEmailUI_Parms.ReturnValue;
};

// Function Engine.InAppMessageBase.ShowInAppSMSUI
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InitialMessage                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UInAppMessageBase::eventShowInAppSMSUI ( struct FString InitialMessage )
{
	static UFunction* pFnShowInAppSMSUI = NULL;

	if ( ! pFnShowInAppSMSUI )
		pFnShowInAppSMSUI = (UFunction*) UObject::GObjObjects()->Data[ 23121 ];

	UInAppMessageBase_eventShowInAppSMSUI_Parms ShowInAppSMSUI_Parms;
	memcpy ( &ShowInAppSMSUI_Parms.InitialMessage, &InitialMessage, 0xC );

	pFnShowInAppSMSUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowInAppSMSUI, &ShowInAppSMSUI_Parms, NULL );

	pFnShowInAppSMSUI->FunctionFlags |= 0x400;

	return ShowInAppSMSUI_Parms.ReturnValue;
};

// Function Engine.InAppMessageBase.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UInAppMessageBase::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 23120 ];

	UInAppMessageBase_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.InGameAdManager.SetPauseWhileAdOpen
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShouldPause                   ( CPF_Parm )

void UInGameAdManager::SetPauseWhileAdOpen ( unsigned long bShouldPause )
{
	static UFunction* pFnSetPauseWhileAdOpen = NULL;

	if ( ! pFnSetPauseWhileAdOpen )
		pFnSetPauseWhileAdOpen = (UFunction*) UObject::GObjObjects()->Data[ 23135 ];

	UInGameAdManager_execSetPauseWhileAdOpen_Parms SetPauseWhileAdOpen_Parms;
	SetPauseWhileAdOpen_Parms.bShouldPause = bShouldPause;

	this->ProcessEvent ( pFnSetPauseWhileAdOpen, &SetPauseWhileAdOpen_Parms, NULL );
};

// Function Engine.InGameAdManager.ForceCloseAd
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UInGameAdManager::ForceCloseAd ( )
{
	static UFunction* pFnForceCloseAd = NULL;

	if ( ! pFnForceCloseAd )
		pFnForceCloseAd = (UFunction*) UObject::GObjObjects()->Data[ 23134 ];

	UInGameAdManager_execForceCloseAd_Parms ForceCloseAd_Parms;

	pFnForceCloseAd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceCloseAd, &ForceCloseAd_Parms, NULL );

	pFnForceCloseAd->FunctionFlags |= 0x400;
};

// Function Engine.InGameAdManager.HideBanner
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UInGameAdManager::HideBanner ( )
{
	static UFunction* pFnHideBanner = NULL;

	if ( ! pFnHideBanner )
		pFnHideBanner = (UFunction*) UObject::GObjObjects()->Data[ 23133 ];

	UInGameAdManager_execHideBanner_Parms HideBanner_Parms;

	pFnHideBanner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideBanner, &HideBanner_Parms, NULL );

	pFnHideBanner->FunctionFlags |= 0x400;
};

// Function Engine.InGameAdManager.ShowBanner
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShowBottomOfScreen            ( CPF_Parm )

void UInGameAdManager::ShowBanner ( unsigned long bShowBottomOfScreen )
{
	static UFunction* pFnShowBanner = NULL;

	if ( ! pFnShowBanner )
		pFnShowBanner = (UFunction*) UObject::GObjObjects()->Data[ 23131 ];

	UInGameAdManager_execShowBanner_Parms ShowBanner_Parms;
	ShowBanner_Parms.bShowBottomOfScreen = bShowBottomOfScreen;

	pFnShowBanner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowBanner, &ShowBanner_Parms, NULL );

	pFnShowBanner->FunctionFlags |= 0x400;
};

// Function Engine.InGameAdManager.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UInGameAdManager::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 23130 ];

	UInGameAdManager_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.TwitterIntegrationBase.TwitterRequest
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       ParamKeysAndValues             ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  RequestMethod                  ( CPF_Parm )
// int                            AccountIndex                   ( CPF_Parm )

bool UTwitterIntegrationBase::eventTwitterRequest ( struct FString URL, TArray< struct FString > ParamKeysAndValues, unsigned char RequestMethod, int AccountIndex )
{
	static UFunction* pFnTwitterRequest = NULL;

	if ( ! pFnTwitterRequest )
		pFnTwitterRequest = (UFunction*) UObject::GObjObjects()->Data[ 35229 ];

	UTwitterIntegrationBase_eventTwitterRequest_Parms TwitterRequest_Parms;
	memcpy ( &TwitterRequest_Parms.URL, &URL, 0xC );
	memcpy ( &TwitterRequest_Parms.ParamKeysAndValues, &ParamKeysAndValues, 0xC );
	TwitterRequest_Parms.RequestMethod = RequestMethod;
	TwitterRequest_Parms.AccountIndex = AccountIndex;

	pFnTwitterRequest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTwitterRequest, &TwitterRequest_Parms, NULL );

	pFnTwitterRequest->FunctionFlags |= 0x400;

	return TwitterRequest_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.GetAccountId
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AccountIndex                   ( CPF_Parm )

struct FString UTwitterIntegrationBase::eventGetAccountId ( int AccountIndex )
{
	static UFunction* pFnGetAccountId = NULL;

	if ( ! pFnGetAccountId )
		pFnGetAccountId = (UFunction*) UObject::GObjObjects()->Data[ 35226 ];

	UTwitterIntegrationBase_eventGetAccountId_Parms GetAccountId_Parms;
	GetAccountId_Parms.AccountIndex = AccountIndex;

	pFnGetAccountId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAccountId, &GetAccountId_Parms, NULL );

	pFnGetAccountId->FunctionFlags |= 0x400;

	return GetAccountId_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.GetAccountName
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            AccountIndex                   ( CPF_Parm )

struct FString UTwitterIntegrationBase::eventGetAccountName ( int AccountIndex )
{
	static UFunction* pFnGetAccountName = NULL;

	if ( ! pFnGetAccountName )
		pFnGetAccountName = (UFunction*) UObject::GObjObjects()->Data[ 35223 ];

	UTwitterIntegrationBase_eventGetAccountName_Parms GetAccountName_Parms;
	GetAccountName_Parms.AccountIndex = AccountIndex;

	pFnGetAccountName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAccountName, &GetAccountName_Parms, NULL );

	pFnGetAccountName->FunctionFlags |= 0x400;

	return GetAccountName_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.GetNumAccounts
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UTwitterIntegrationBase::eventGetNumAccounts ( )
{
	static UFunction* pFnGetNumAccounts = NULL;

	if ( ! pFnGetNumAccounts )
		pFnGetNumAccounts = (UFunction*) UObject::GObjObjects()->Data[ 35221 ];

	UTwitterIntegrationBase_eventGetNumAccounts_Parms GetNumAccounts_Parms;

	pFnGetNumAccounts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumAccounts, &GetNumAccounts_Parms, NULL );

	pFnGetNumAccounts->FunctionFlags |= 0x400;

	return GetNumAccounts_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.AuthorizeAccounts
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTwitterIntegrationBase::eventAuthorizeAccounts ( )
{
	static UFunction* pFnAuthorizeAccounts = NULL;

	if ( ! pFnAuthorizeAccounts )
		pFnAuthorizeAccounts = (UFunction*) UObject::GObjObjects()->Data[ 35219 ];

	UTwitterIntegrationBase_eventAuthorizeAccounts_Parms AuthorizeAccounts_Parms;

	pFnAuthorizeAccounts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAuthorizeAccounts, &AuthorizeAccounts_Parms, NULL );

	pFnAuthorizeAccounts->FunctionFlags |= 0x400;

	return AuthorizeAccounts_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.ShowTweetUI
// [0x00024C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InitialMessage                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 URL                            ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Picture                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UTwitterIntegrationBase::eventShowTweetUI ( struct FString InitialMessage, struct FString URL, struct FString Picture )
{
	static UFunction* pFnShowTweetUI = NULL;

	if ( ! pFnShowTweetUI )
		pFnShowTweetUI = (UFunction*) UObject::GObjObjects()->Data[ 35214 ];

	UTwitterIntegrationBase_eventShowTweetUI_Parms ShowTweetUI_Parms;
	memcpy ( &ShowTweetUI_Parms.InitialMessage, &InitialMessage, 0xC );
	memcpy ( &ShowTweetUI_Parms.URL, &URL, 0xC );
	memcpy ( &ShowTweetUI_Parms.Picture, &Picture, 0xC );

	pFnShowTweetUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowTweetUI, &ShowTweetUI_Parms, NULL );

	pFnShowTweetUI->FunctionFlags |= 0x400;

	return ShowTweetUI_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.CanShowTweetUI
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UTwitterIntegrationBase::eventCanShowTweetUI ( )
{
	static UFunction* pFnCanShowTweetUI = NULL;

	if ( ! pFnCanShowTweetUI )
		pFnCanShowTweetUI = (UFunction*) UObject::GObjObjects()->Data[ 35212 ];

	UTwitterIntegrationBase_eventCanShowTweetUI_Parms CanShowTweetUI_Parms;

	pFnCanShowTweetUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanShowTweetUI, &CanShowTweetUI_Parms, NULL );

	pFnCanShowTweetUI->FunctionFlags |= 0x400;

	return CanShowTweetUI_Parms.ReturnValue;
};

// Function Engine.TwitterIntegrationBase.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UTwitterIntegrationBase::eventInit ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 35211 ];

	UTwitterIntegrationBase_eventInit_Parms Init_Parms;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 HeaderName                     ( CPF_Parm | CPF_NeedCtorLink )

struct FString UPlatformInterfaceWebResponse::GetHeaderValue ( struct FString HeaderName )
{
	static UFunction* pFnGetHeaderValue = NULL;

	if ( ! pFnGetHeaderValue )
		pFnGetHeaderValue = (UFunction*) UObject::GObjObjects()->Data[ 31262 ];

	UPlatformInterfaceWebResponse_execGetHeaderValue_Parms GetHeaderValue_Parms;
	memcpy ( &GetHeaderValue_Parms.HeaderName, &HeaderName, 0xC );

	pFnGetHeaderValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeaderValue, &GetHeaderValue_Parms, NULL );

	pFnGetHeaderValue->FunctionFlags |= 0x400;

	return GetHeaderValue_Parms.ReturnValue;
};

// Function Engine.PlatformInterfaceWebResponse.GetHeader
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            HeaderIndex                    ( CPF_Parm )
// struct FString                 Header                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UPlatformInterfaceWebResponse::GetHeader ( int HeaderIndex, struct FString* Header, struct FString* Value )
{
	static UFunction* pFnGetHeader = NULL;

	if ( ! pFnGetHeader )
		pFnGetHeader = (UFunction*) UObject::GObjObjects()->Data[ 31258 ];

	UPlatformInterfaceWebResponse_execGetHeader_Parms GetHeader_Parms;
	GetHeader_Parms.HeaderIndex = HeaderIndex;

	pFnGetHeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeader, &GetHeader_Parms, NULL );

	pFnGetHeader->FunctionFlags |= 0x400;

	if ( Header )
		memcpy ( Header, &GetHeader_Parms.Header, 0xC );

	if ( Value )
		memcpy ( Value, &GetHeader_Parms.Value, 0xC );
};

// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UPlatformInterfaceWebResponse::GetNumHeaders ( )
{
	static UFunction* pFnGetNumHeaders = NULL;

	if ( ! pFnGetNumHeaders )
		pFnGetNumHeaders = (UFunction*) UObject::GObjObjects()->Data[ 31256 ];

	UPlatformInterfaceWebResponse_execGetNumHeaders_Parms GetNumHeaders_Parms;

	pFnGetNumHeaders->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumHeaders, &GetNumHeaders_Parms, NULL );

	pFnGetNumHeaders->FunctionFlags |= 0x400;

	return GetNumHeaders_Parms.ReturnValue;
};

// Function Engine.LocalMessage.PartiallyDuplicates
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch1                        ( CPF_Parm )
// int                            Switch2                        ( CPF_Parm )
// class UObject*                 OptionalObject1                ( CPF_Parm )
// class UObject*                 OptionalObject2                ( CPF_Parm )

bool ULocalMessage::PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 )
{
	static UFunction* pFnPartiallyDuplicates = NULL;

	if ( ! pFnPartiallyDuplicates )
		pFnPartiallyDuplicates = (UFunction*) UObject::GObjObjects()->Data[ 19883 ];

	ULocalMessage_execPartiallyDuplicates_Parms PartiallyDuplicates_Parms;
	PartiallyDuplicates_Parms.Switch1 = Switch1;
	PartiallyDuplicates_Parms.Switch2 = Switch2;
	PartiallyDuplicates_Parms.OptionalObject1 = OptionalObject1;
	PartiallyDuplicates_Parms.OptionalObject2 = OptionalObject2;

	this->ProcessEvent ( pFnPartiallyDuplicates, &PartiallyDuplicates_Parms, NULL );

	return PartiallyDuplicates_Parms.ReturnValue;
};

// Function Engine.LocalMessage.IsConsoleMessage
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

bool ULocalMessage::IsConsoleMessage ( int Switch )
{
	static UFunction* pFnIsConsoleMessage = NULL;

	if ( ! pFnIsConsoleMessage )
		pFnIsConsoleMessage = (UFunction*) UObject::GObjObjects()->Data[ 19880 ];

	ULocalMessage_execIsConsoleMessage_Parms IsConsoleMessage_Parms;
	IsConsoleMessage_Parms.Switch = Switch;

	this->ProcessEvent ( pFnIsConsoleMessage, &IsConsoleMessage_Parms, NULL );

	return IsConsoleMessage_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetLifeTime
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )

float ULocalMessage::GetLifeTime ( int Switch )
{
	static UFunction* pFnGetLifeTime = NULL;

	if ( ! pFnGetLifeTime )
		pFnGetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 19877 ];

	ULocalMessage_execGetLifeTime_Parms GetLifeTime_Parms;
	GetLifeTime_Parms.Switch = Switch;

	this->ProcessEvent ( pFnGetLifeTime, &GetLifeTime_Parms, NULL );

	return GetLifeTime_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetFontSize
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI1                    ( CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI2                    ( CPF_Parm )
// class APlayerReplicationInfo*  LocalPlayer                    ( CPF_Parm )

int ULocalMessage::GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer )
{
	static UFunction* pFnGetFontSize = NULL;

	if ( ! pFnGetFontSize )
		pFnGetFontSize = (UFunction*) UObject::GObjObjects()->Data[ 19871 ];

	ULocalMessage_execGetFontSize_Parms GetFontSize_Parms;
	GetFontSize_Parms.Switch = Switch;
	GetFontSize_Parms.RelatedPRI1 = RelatedPRI1;
	GetFontSize_Parms.RelatedPRI2 = RelatedPRI2;
	GetFontSize_Parms.LocalPlayer = LocalPlayer;

	this->ProcessEvent ( pFnGetFontSize, &GetFontSize_Parms, NULL );

	return GetFontSize_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetPos
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_Parm )
// class AHUD*                    myHUD                          ( CPF_Parm )

float ULocalMessage::GetPos ( int Switch, class AHUD* myHUD )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = (UFunction*) UObject::GObjObjects()->Data[ 19867 ];

	ULocalMessage_execGetPos_Parms GetPos_Parms;
	GetPos_Parms.Switch = Switch;
	GetPos_Parms.myHUD = myHUD;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );

	return GetPos_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetColor
// [0x00026002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FColor ULocalMessage::GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetColor = NULL;

	if ( ! pFnGetColor )
		pFnGetColor = (UFunction*) UObject::GObjObjects()->Data[ 19861 ];

	ULocalMessage_execGetColor_Parms GetColor_Parms;
	GetColor_Parms.Switch = Switch;
	GetColor_Parms.RelatedPRI = RelatedPRI;
	GetColor_Parms.RelatedPRI01 = RelatedPRI01;
	GetColor_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetColor, &GetColor_Parms, NULL );

	return GetColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetConsoleColor
// [0x00022002] 
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_Parm )

struct FColor ULocalMessage::GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI )
{
	static UFunction* pFnGetConsoleColor = NULL;

	if ( ! pFnGetConsoleColor )
		pFnGetConsoleColor = (UFunction*) UObject::GObjObjects()->Data[ 19858 ];

	ULocalMessage_execGetConsoleColor_Parms GetConsoleColor_Parms;
	GetConsoleColor_Parms.RelatedPRI = RelatedPRI;

	this->ProcessEvent ( pFnGetConsoleColor, &GetConsoleColor_Parms, NULL );

	return GetConsoleColor_Parms.ReturnValue;
};

// Function Engine.LocalMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString ULocalMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 19851 ];

	ULocalMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.LocalMessage.ClientReceive
// [0x00026002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ULocalMessage::ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = (UFunction*) UObject::GObjObjects()->Data[ 19844 ];

	ULocalMessage_execClientReceive_Parms ClientReceive_Parms;
	ClientReceive_Parms.P = P;
	ClientReceive_Parms.Switch = Switch;
	ClientReceive_Parms.RelatedPRI = RelatedPRI;
	ClientReceive_Parms.RelatedPRI01 = RelatedPRI01;
	ClientReceive_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function Engine.SeqAct_Teleport.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_Teleport::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32900 ];

	USeqAct_Teleport_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_Teleport.ShouldTeleport
// [0x00026003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestActor                      ( CPF_Parm )
// struct FVector                 TeleportLocation               ( CPF_Parm )
// float                          TeleportDist                   ( CPF_OptionalParm | CPF_Parm )
// TArray< class AVolume* >       Volumes                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool USeqAct_Teleport::ShouldTeleport ( class AActor* TestActor, struct FVector TeleportLocation, float TeleportDist, TArray< class AVolume* > Volumes )
{
	static UFunction* pFnShouldTeleport = NULL;

	if ( ! pFnShouldTeleport )
		pFnShouldTeleport = (UFunction*) UObject::GObjObjects()->Data[ 7189 ];

	USeqAct_Teleport_execShouldTeleport_Parms ShouldTeleport_Parms;
	ShouldTeleport_Parms.TestActor = TestActor;
	memcpy ( &ShouldTeleport_Parms.TeleportLocation, &TeleportLocation, 0xC );
	ShouldTeleport_Parms.TeleportDist = TeleportDist;
	memcpy ( &ShouldTeleport_Parms.Volumes, &Volumes, 0xC );

	this->ProcessEvent ( pFnShouldTeleport, &ShouldTeleport_Parms, NULL );

	return ShouldTeleport_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetVelocity.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetVelocity::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32827 ];

	USeqAct_SetVelocity_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_AttachToActor::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32442 ];

	USeqAct_AttachToActor_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CheckParentalControlInfo
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bShowUi                        ( CPF_Parm )

bool UOnlinePlayerInterface::CheckParentalControlInfo ( unsigned long bShowUi )
{
	static UFunction* pFnCheckParentalControlInfo = NULL;

	if ( ! pFnCheckParentalControlInfo )
		pFnCheckParentalControlInfo = (UFunction*) UObject::GObjObjects()->Data[ 28572 ];

	UOnlinePlayerInterface_execCheckParentalControlInfo_Parms CheckParentalControlInfo_Parms;
	CheckParentalControlInfo_Parms.bShowUi = bShowUi;

	this->ProcessEvent ( pFnCheckParentalControlInfo, &CheckParentalControlInfo_Parms, NULL );

	return CheckParentalControlInfo_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayHistoryRegistrationKey
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< unsigned char >        Key                            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::GetPlayHistoryRegistrationKey ( TArray< unsigned char >* Key )
{
	static UFunction* pFnGetPlayHistoryRegistrationKey = NULL;

	if ( ! pFnGetPlayHistoryRegistrationKey )
		pFnGetPlayHistoryRegistrationKey = (UFunction*) UObject::GObjObjects()->Data[ 28573 ];

	UOnlinePlayerInterface_execGetPlayHistoryRegistrationKey_Parms GetPlayHistoryRegistrationKey_Parms;

	this->ProcessEvent ( pFnGetPlayHistoryRegistrationKey, &GetPlayHistoryRegistrationKey_Parms, NULL );

	if ( Key )
		memcpy ( Key, &GetPlayHistoryRegistrationKey_Parms.Key, 0xC );

	return GetPlayHistoryRegistrationKey_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.RemoveCanPlayOnlineChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::RemoveCanPlayOnlineChangedDelegate ( struct FScriptDelegate Callback )
{
	static UFunction* pFnRemoveCanPlayOnlineChangedDelegate = NULL;

	if ( ! pFnRemoveCanPlayOnlineChangedDelegate )
		pFnRemoveCanPlayOnlineChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28570 ];

	UOnlinePlayerInterface_execRemoveCanPlayOnlineChangedDelegate_Parms RemoveCanPlayOnlineChangedDelegate_Parms;
	memcpy ( &RemoveCanPlayOnlineChangedDelegate_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnRemoveCanPlayOnlineChangedDelegate, &RemoveCanPlayOnlineChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddCanPlayOnlineChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddCanPlayOnlineChangedDelegate ( struct FScriptDelegate Callback )
{
	static UFunction* pFnAddCanPlayOnlineChangedDelegate = NULL;

	if ( ! pFnAddCanPlayOnlineChangedDelegate )
		pFnAddCanPlayOnlineChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28567 ];

	UOnlinePlayerInterface_execAddCanPlayOnlineChangedDelegate_Parms AddCanPlayOnlineChangedDelegate_Parms;
	memcpy ( &AddCanPlayOnlineChangedDelegate_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnAddCanPlayOnlineChangedDelegate, &AddCanPlayOnlineChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetPlayerLanguage
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlinePlayerInterface::GetPlayerLanguage ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerLanguage = NULL;

	if ( ! pFnGetPlayerLanguage )
		pFnGetPlayerLanguage = (UFunction*) UObject::GObjObjects()->Data[ 28569 ];

	UOnlinePlayerInterface_execGetPlayerLanguage_Parms GetPlayerLanguage_Parms;
	GetPlayerLanguage_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerLanguage, &GetPlayerLanguage_Parms, NULL );

	return GetPlayerLanguage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerCountry
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::GetPlayerCountry ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerCountry = NULL;

	if ( ! pFnGetPlayerCountry )
		pFnGetPlayerCountry = (UFunction*) UObject::GObjObjects()->Data[ 28565 ];

	UOnlinePlayerInterface_execGetPlayerCountry_Parms GetPlayerCountry_Parms;
	GetPlayerCountry_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerCountry, &GetPlayerCountry_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerCountryDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerCountryDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadPlayerCountryDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerCountryDelegate )
{
	static UFunction* pFnClearReadPlayerCountryDelegate = NULL;

	if ( ! pFnClearReadPlayerCountryDelegate )
		pFnClearReadPlayerCountryDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28562 ];

	UOnlinePlayerInterface_execClearReadPlayerCountryDelegate_Parms ClearReadPlayerCountryDelegate_Parms;
	ClearReadPlayerCountryDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadPlayerCountryDelegate_Parms.ReadPlayerCountryDelegate, &ReadPlayerCountryDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadPlayerCountryDelegate, &ClearReadPlayerCountryDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerCountryDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerCountryDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadPlayerCountryDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerCountryDelegate )
{
	static UFunction* pFnAddReadPlayerCountryDelegate = NULL;

	if ( ! pFnAddReadPlayerCountryDelegate )
		pFnAddReadPlayerCountryDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28559 ];

	UOnlinePlayerInterface_execAddReadPlayerCountryDelegate_Parms AddReadPlayerCountryDelegate_Parms;
	AddReadPlayerCountryDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadPlayerCountryDelegate_Parms.ReadPlayerCountryDelegate, &ReadPlayerCountryDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadPlayerCountryDelegate, &AddReadPlayerCountryDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetAchievements
// [0x00424000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FAchievementDetails > Achievements                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlinePlayerInterface::GetAchievements ( unsigned char LocalUserNum, int TitleId, TArray< struct FAchievementDetails >* Achievements )
{
	static UFunction* pFnGetAchievements = NULL;

	if ( ! pFnGetAchievements )
		pFnGetAchievements = (UFunction*) UObject::GObjObjects()->Data[ 28553 ];

	UOnlinePlayerInterface_execGetAchievements_Parms GetAchievements_Parms;
	GetAchievements_Parms.LocalUserNum = LocalUserNum;
	GetAchievements_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnGetAchievements, &GetAchievements_Parms, NULL );

	if ( Achievements )
		memcpy ( Achievements, &GetAchievements_Parms.Achievements, 0xC );

	return GetAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAchievementsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate )
{
	static UFunction* pFnClearReadAchievementsCompleteDelegate = NULL;

	if ( ! pFnClearReadAchievementsCompleteDelegate )
		pFnClearReadAchievementsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28550 ];

	UOnlinePlayerInterface_execClearReadAchievementsCompleteDelegate_Parms ClearReadAchievementsCompleteDelegate_Parms;
	ClearReadAchievementsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadAchievementsCompleteDelegate_Parms.ReadAchievementsCompleteDelegate, &ReadAchievementsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadAchievementsCompleteDelegate, &ClearReadAchievementsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAchievementsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate )
{
	static UFunction* pFnAddReadAchievementsCompleteDelegate = NULL;

	if ( ! pFnAddReadAchievementsCompleteDelegate )
		pFnAddReadAchievementsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28547 ];

	UOnlinePlayerInterface_execAddReadAchievementsCompleteDelegate_Parms AddReadAchievementsCompleteDelegate_Parms;
	AddReadAchievementsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadAchievementsCompleteDelegate_Parms.ReadAchievementsCompleteDelegate, &ReadAchievementsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadAchievementsCompleteDelegate, &AddReadAchievementsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete
// [0x00120000] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void UOnlinePlayerInterface::OnReadAchievementsComplete ( int TitleId )
{
	static UFunction* pFnOnReadAchievementsComplete = NULL;

	if ( ! pFnOnReadAchievementsComplete )
		pFnOnReadAchievementsComplete = (UFunction*) UObject::GObjObjects()->Data[ 28545 ];

	UOnlinePlayerInterface_execOnReadAchievementsComplete_Parms OnReadAchievementsComplete_Parms;
	OnReadAchievementsComplete_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnOnReadAchievementsComplete, &OnReadAchievementsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadAchievements
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldReadText                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldReadImages              ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages )
{
	static UFunction* pFnReadAchievements = NULL;

	if ( ! pFnReadAchievements )
		pFnReadAchievements = (UFunction*) UObject::GObjObjects()->Data[ 28539 ];

	UOnlinePlayerInterface_execReadAchievements_Parms ReadAchievements_Parms;
	ReadAchievements_Parms.LocalUserNum = LocalUserNum;
	ReadAchievements_Parms.TitleId = TitleId;
	ReadAchievements_Parms.bShouldReadText = bShouldReadText;
	ReadAchievements_Parms.bShouldReadImages = bShouldReadImages;

	this->ProcessEvent ( pFnReadAchievements, &ReadAchievements_Parms, NULL );

	return ReadAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnClearUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnClearUnlockAchievementCompleteDelegate )
		pFnClearUnlockAchievementCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28536 ];

	UOnlinePlayerInterface_execClearUnlockAchievementCompleteDelegate_Parms ClearUnlockAchievementCompleteDelegate_Parms;
	ClearUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUnlockAchievementCompleteDelegate, &ClearUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         UnlockAchievementCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate )
{
	static UFunction* pFnAddUnlockAchievementCompleteDelegate = NULL;

	if ( ! pFnAddUnlockAchievementCompleteDelegate )
		pFnAddUnlockAchievementCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28533 ];

	UOnlinePlayerInterface_execAddUnlockAchievementCompleteDelegate_Parms AddUnlockAchievementCompleteDelegate_Parms;
	AddUnlockAchievementCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddUnlockAchievementCompleteDelegate_Parms.UnlockAchievementCompleteDelegate, &UnlockAchievementCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUnlockAchievementCompleteDelegate, &AddUnlockAchievementCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnUnlockAchievementComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnlockAchievementComplete = NULL;

	if ( ! pFnOnUnlockAchievementComplete )
		pFnOnUnlockAchievementComplete = (UFunction*) UObject::GObjObjects()->Data[ 28531 ];

	UOnlinePlayerInterface_execOnUnlockAchievementComplete_Parms OnUnlockAchievementComplete_Parms;
	OnUnlockAchievementComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnlockAchievementComplete, &OnUnlockAchievementComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.UnlockAchievement
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AchievementId                  ( CPF_Parm )
// float                          PercentComplete                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::UnlockAchievement ( unsigned char LocalUserNum, int AchievementId, float PercentComplete )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 28526 ];

	UOnlinePlayerInterface_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.LocalUserNum = LocalUserNum;
	UnlockAchievement_Parms.AchievementId = AchievementId;
	UnlockAchievement_Parms.PercentComplete = PercentComplete;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );

	return UnlockAchievement_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DeleteMessage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            MessageIndex                   ( CPF_Parm )

bool UOnlinePlayerInterface::DeleteMessage ( unsigned char LocalUserNum, int MessageIndex )
{
	static UFunction* pFnDeleteMessage = NULL;

	if ( ! pFnDeleteMessage )
		pFnDeleteMessage = (UFunction*) UObject::GObjObjects()->Data[ 28522 ];

	UOnlinePlayerInterface_execDeleteMessage_Parms DeleteMessage_Parms;
	DeleteMessage_Parms.LocalUserNum = LocalUserNum;
	DeleteMessage_Parms.MessageIndex = MessageIndex;

	this->ProcessEvent ( pFnDeleteMessage, &DeleteMessage_Parms, NULL );

	return DeleteMessage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnClearFriendMessageReceivedDelegate = NULL;

	if ( ! pFnClearFriendMessageReceivedDelegate )
		pFnClearFriendMessageReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28519 ];

	UOnlinePlayerInterface_execClearFriendMessageReceivedDelegate_Parms ClearFriendMessageReceivedDelegate_Parms;
	ClearFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendMessageReceivedDelegate, &ClearFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         MessageDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate )
{
	static UFunction* pFnAddFriendMessageReceivedDelegate = NULL;

	if ( ! pFnAddFriendMessageReceivedDelegate )
		pFnAddFriendMessageReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28516 ];

	UOnlinePlayerInterface_execAddFriendMessageReceivedDelegate_Parms AddFriendMessageReceivedDelegate_Parms;
	AddFriendMessageReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendMessageReceivedDelegate_Parms.MessageDelegate, &MessageDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendMessageReceivedDelegate, &AddFriendMessageReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            SendingPlayer                  ( CPF_Parm )
// struct FString                 SendingNick                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message )
{
	static UFunction* pFnOnFriendMessageReceived = NULL;

	if ( ! pFnOnFriendMessageReceived )
		pFnOnFriendMessageReceived = (UFunction*) UObject::GObjObjects()->Data[ 28511 ];

	UOnlinePlayerInterface_execOnFriendMessageReceived_Parms OnFriendMessageReceived_Parms;
	OnFriendMessageReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendMessageReceived_Parms.SendingPlayer, &SendingPlayer, 0x48 );
	memcpy ( &OnFriendMessageReceived_Parms.SendingNick, &SendingNick, 0xC );
	memcpy ( &OnFriendMessageReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendMessageReceived, &OnFriendMessageReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.GetFriendMessages
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FOnlineFriendMessage > FriendMessages                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages )
{
	static UFunction* pFnGetFriendMessages = NULL;

	if ( ! pFnGetFriendMessages )
		pFnGetFriendMessages = (UFunction*) UObject::GObjObjects()->Data[ 28507 ];

	UOnlinePlayerInterface_execGetFriendMessages_Parms GetFriendMessages_Parms;
	GetFriendMessages_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetFriendMessages, &GetFriendMessages_Parms, NULL );

	if ( FriendMessages )
		memcpy ( FriendMessages, &GetFriendMessages_Parms.FriendMessages, 0xC );
};

// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnClearJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinFriendGameCompleteDelegate )
		pFnClearJoinFriendGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28505 ];

	UOnlinePlayerInterface_execClearJoinFriendGameCompleteDelegate_Parms ClearJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearJoinFriendGameCompleteDelegate, &ClearJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate )
{
	static UFunction* pFnAddJoinFriendGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinFriendGameCompleteDelegate )
		pFnAddJoinFriendGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28503 ];

	UOnlinePlayerInterface_execAddJoinFriendGameCompleteDelegate_Parms AddJoinFriendGameCompleteDelegate_Parms;
	memcpy ( &AddJoinFriendGameCompleteDelegate_Parms.JoinFriendGameCompleteDelegate, &JoinFriendGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddJoinFriendGameCompleteDelegate, &AddJoinFriendGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnJoinFriendGameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinFriendGameComplete = NULL;

	if ( ! pFnOnJoinFriendGameComplete )
		pFnOnJoinFriendGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 28501 ];

	UOnlinePlayerInterface_execOnJoinFriendGameComplete_Parms OnJoinFriendGameComplete_Parms;
	OnJoinFriendGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinFriendGameComplete, &OnJoinFriendGameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.JoinFriendGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )

bool UOnlinePlayerInterface::JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend )
{
	static UFunction* pFnJoinFriendGame = NULL;

	if ( ! pFnJoinFriendGame )
		pFnJoinFriendGame = (UFunction*) UObject::GObjObjects()->Data[ 28497 ];

	UOnlinePlayerInterface_execJoinFriendGame_Parms JoinFriendGame_Parms;
	JoinFriendGame_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &JoinFriendGame_Parms.Friend, &Friend, 0x48 );

	this->ProcessEvent ( pFnJoinFriendGame, &JoinFriendGame_Parms, NULL );

	return JoinFriendGame_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnClearReceivedGameInviteDelegate = NULL;

	if ( ! pFnClearReceivedGameInviteDelegate )
		pFnClearReceivedGameInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28494 ];

	UOnlinePlayerInterface_execClearReceivedGameInviteDelegate_Parms ClearReceivedGameInviteDelegate_Parms;
	ClearReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReceivedGameInviteDelegate, &ClearReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReceivedGameInviteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate )
{
	static UFunction* pFnAddReceivedGameInviteDelegate = NULL;

	if ( ! pFnAddReceivedGameInviteDelegate )
		pFnAddReceivedGameInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28491 ];

	UOnlinePlayerInterface_execAddReceivedGameInviteDelegate_Parms AddReceivedGameInviteDelegate_Parms;
	AddReceivedGameInviteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReceivedGameInviteDelegate_Parms.ReceivedGameInviteDelegate, &ReceivedGameInviteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReceivedGameInviteDelegate, &AddReceivedGameInviteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviterName                    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName )
{
	static UFunction* pFnOnReceivedGameInvite = NULL;

	if ( ! pFnOnReceivedGameInvite )
		pFnOnReceivedGameInvite = (UFunction*) UObject::GObjObjects()->Data[ 28488 ];

	UOnlinePlayerInterface_execOnReceivedGameInvite_Parms OnReceivedGameInvite_Parms;
	OnReceivedGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnReceivedGameInvite_Parms.InviterName, &InviterName, 0xC );

	this->ProcessEvent ( pFnOnReceivedGameInvite, &OnReceivedGameInvite_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FUniqueNetId >  Friends                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriends = NULL;

	if ( ! pFnSendGameInviteToFriends )
		pFnSendGameInviteToFriends = (UFunction*) UObject::GObjObjects()->Data[ 28482 ];

	UOnlinePlayerInterface_execSendGameInviteToFriends_Parms SendGameInviteToFriends_Parms;
	SendGameInviteToFriends_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriends_Parms.Friends, &Friends, 0xC );
	memcpy ( &SendGameInviteToFriends_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSendGameInviteToFriends, &SendGameInviteToFriends_Parms, NULL );

	return SendGameInviteToFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Text                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text )
{
	static UFunction* pFnSendGameInviteToFriend = NULL;

	if ( ! pFnSendGameInviteToFriend )
		pFnSendGameInviteToFriend = (UFunction*) UObject::GObjObjects()->Data[ 28477 ];

	UOnlinePlayerInterface_execSendGameInviteToFriend_Parms SendGameInviteToFriend_Parms;
	SendGameInviteToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendGameInviteToFriend_Parms.Friend, &Friend, 0x48 );
	memcpy ( &SendGameInviteToFriend_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnSendGameInviteToFriend, &SendGameInviteToFriend_Parms, NULL );

	return SendGameInviteToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            Friend                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message )
{
	static UFunction* pFnSendMessageToFriend = NULL;

	if ( ! pFnSendMessageToFriend )
		pFnSendMessageToFriend = (UFunction*) UObject::GObjObjects()->Data[ 28472 ];

	UOnlinePlayerInterface_execSendMessageToFriend_Parms SendMessageToFriend_Parms;
	SendMessageToFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SendMessageToFriend_Parms.Friend, &Friend, 0x48 );
	memcpy ( &SendMessageToFriend_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnSendMessageToFriend, &SendMessageToFriend_Parms, NULL );

	return SendMessageToFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnClearFriendInviteReceivedDelegate = NULL;

	if ( ! pFnClearFriendInviteReceivedDelegate )
		pFnClearFriendInviteReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28469 ];

	UOnlinePlayerInterface_execClearFriendInviteReceivedDelegate_Parms ClearFriendInviteReceivedDelegate_Parms;
	ClearFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendInviteReceivedDelegate, &ClearFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         InviteDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate )
{
	static UFunction* pFnAddFriendInviteReceivedDelegate = NULL;

	if ( ! pFnAddFriendInviteReceivedDelegate )
		pFnAddFriendInviteReceivedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28466 ];

	UOnlinePlayerInterface_execAddFriendInviteReceivedDelegate_Parms AddFriendInviteReceivedDelegate_Parms;
	AddFriendInviteReceivedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendInviteReceivedDelegate_Parms.InviteDelegate, &InviteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendInviteReceivedDelegate, &AddFriendInviteReceivedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )
// struct FString                 RequestingNick                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message )
{
	static UFunction* pFnOnFriendInviteReceived = NULL;

	if ( ! pFnOnFriendInviteReceived )
		pFnOnFriendInviteReceived = (UFunction*) UObject::GObjObjects()->Data[ 28461 ];

	UOnlinePlayerInterface_execOnFriendInviteReceived_Parms OnFriendInviteReceived_Parms;
	OnFriendInviteReceived_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnFriendInviteReceived_Parms.RequestingPlayer, &RequestingPlayer, 0x48 );
	memcpy ( &OnFriendInviteReceived_Parms.RequestingNick, &RequestingNick, 0xC );
	memcpy ( &OnFriendInviteReceived_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnFriendInviteReceived, &OnFriendInviteReceived_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.RemoveFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            FormerFriend                   ( CPF_Parm )

bool UOnlinePlayerInterface::RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend )
{
	static UFunction* pFnRemoveFriend = NULL;

	if ( ! pFnRemoveFriend )
		pFnRemoveFriend = (UFunction*) UObject::GObjObjects()->Data[ 28457 ];

	UOnlinePlayerInterface_execRemoveFriend_Parms RemoveFriend_Parms;
	RemoveFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RemoveFriend_Parms.FormerFriend, &FormerFriend, 0x48 );

	this->ProcessEvent ( pFnRemoveFriend, &RemoveFriend_Parms, NULL );

	return RemoveFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnDenyFriendInvite = NULL;

	if ( ! pFnDenyFriendInvite )
		pFnDenyFriendInvite = (UFunction*) UObject::GObjObjects()->Data[ 28453 ];

	UOnlinePlayerInterface_execDenyFriendInvite_Parms DenyFriendInvite_Parms;
	DenyFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &DenyFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x48 );

	this->ProcessEvent ( pFnDenyFriendInvite, &DenyFriendInvite_Parms, NULL );

	return DenyFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            RequestingPlayer               ( CPF_Parm )

bool UOnlinePlayerInterface::AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer )
{
	static UFunction* pFnAcceptFriendInvite = NULL;

	if ( ! pFnAcceptFriendInvite )
		pFnAcceptFriendInvite = (UFunction*) UObject::GObjObjects()->Data[ 28449 ];

	UOnlinePlayerInterface_execAcceptFriendInvite_Parms AcceptFriendInvite_Parms;
	AcceptFriendInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptFriendInvite_Parms.RequestingPlayer, &RequestingPlayer, 0x48 );

	this->ProcessEvent ( pFnAcceptFriendInvite, &AcceptFriendInvite_Parms, NULL );

	return AcceptFriendInvite_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnClearAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnClearAddFriendByNameCompleteDelegate )
		pFnClearAddFriendByNameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28446 ];

	UOnlinePlayerInterface_execClearAddFriendByNameCompleteDelegate_Parms ClearAddFriendByNameCompleteDelegate_Parms;
	ClearAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0x10 );

	this->ProcessEvent ( pFnClearAddFriendByNameCompleteDelegate, &ClearAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate )
{
	static UFunction* pFnAddAddFriendByNameCompleteDelegate = NULL;

	if ( ! pFnAddAddFriendByNameCompleteDelegate )
		pFnAddAddFriendByNameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28443 ];

	UOnlinePlayerInterface_execAddAddFriendByNameCompleteDelegate_Parms AddAddFriendByNameCompleteDelegate_Parms;
	AddAddFriendByNameCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddAddFriendByNameCompleteDelegate_Parms.FriendDelegate, &FriendDelegate, 0x10 );

	this->ProcessEvent ( pFnAddAddFriendByNameCompleteDelegate, &AddAddFriendByNameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnAddFriendByNameComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnAddFriendByNameComplete = NULL;

	if ( ! pFnOnAddFriendByNameComplete )
		pFnOnAddFriendByNameComplete = (UFunction*) UObject::GObjObjects()->Data[ 28441 ];

	UOnlinePlayerInterface_execOnAddFriendByNameComplete_Parms OnAddFriendByNameComplete_Parms;
	OnAddFriendByNameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnAddFriendByNameComplete, &OnAddFriendByNameComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendByName
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 FriendName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message )
{
	static UFunction* pFnAddFriendByName = NULL;

	if ( ! pFnAddFriendByName )
		pFnAddFriendByName = (UFunction*) UObject::GObjObjects()->Data[ 28436 ];

	UOnlinePlayerInterface_execAddFriendByName_Parms AddFriendByName_Parms;
	AddFriendByName_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendByName_Parms.FriendName, &FriendName, 0xC );
	memcpy ( &AddFriendByName_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnAddFriendByName, &AddFriendByName_Parms, NULL );

	return AddFriendByName_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AddFriend
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            NewFriend                      ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = (UFunction*) UObject::GObjObjects()->Data[ 28431 ];

	UOnlinePlayerInterface_execAddFriend_Parms AddFriend_Parms;
	AddFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriend_Parms.NewFriend, &NewFriend, 0x48 );
	memcpy ( &AddFriend_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );

	return AddFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// [0x00420000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  bWasCanceled                   ( CPF_Parm | CPF_OutParm )

struct FString UOnlinePlayerInterface::GetKeyboardInputResults ( unsigned char* bWasCanceled )
{
	static UFunction* pFnGetKeyboardInputResults = NULL;

	if ( ! pFnGetKeyboardInputResults )
		pFnGetKeyboardInputResults = (UFunction*) UObject::GObjObjects()->Data[ 28428 ];

	UOnlinePlayerInterface_execGetKeyboardInputResults_Parms GetKeyboardInputResults_Parms;

	this->ProcessEvent ( pFnGetKeyboardInputResults, &GetKeyboardInputResults_Parms, NULL );

	if ( bWasCanceled )
		*bWasCanceled = GetKeyboardInputResults_Parms.bWasCanceled;

	return GetKeyboardInputResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnClearKeyboardInputDoneDelegate = NULL;

	if ( ! pFnClearKeyboardInputDoneDelegate )
		pFnClearKeyboardInputDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28426 ];

	UOnlinePlayerInterface_execClearKeyboardInputDoneDelegate_Parms ClearKeyboardInputDoneDelegate_Parms;
	memcpy ( &ClearKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0x10 );

	this->ProcessEvent ( pFnClearKeyboardInputDoneDelegate, &ClearKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InputDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate )
{
	static UFunction* pFnAddKeyboardInputDoneDelegate = NULL;

	if ( ! pFnAddKeyboardInputDoneDelegate )
		pFnAddKeyboardInputDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28424 ];

	UOnlinePlayerInterface_execAddKeyboardInputDoneDelegate_Parms AddKeyboardInputDoneDelegate_Parms;
	memcpy ( &AddKeyboardInputDoneDelegate_Parms.InputDelegate, &InputDelegate, 0x10 );

	this->ProcessEvent ( pFnAddKeyboardInputDoneDelegate, &AddKeyboardInputDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnKeyboardInputComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnKeyboardInputComplete = NULL;

	if ( ! pFnOnKeyboardInputComplete )
		pFnOnKeyboardInputComplete = (UFunction*) UObject::GObjObjects()->Data[ 28422 ];

	UOnlinePlayerInterface_execOnKeyboardInputComplete_Parms OnKeyboardInputComplete_Parms;
	OnKeyboardInputComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnKeyboardInputComplete, &OnKeyboardInputComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.HideKeyboardUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::HideKeyboardUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnHideKeyboardUI = NULL;

	if ( ! pFnHideKeyboardUI )
		pFnHideKeyboardUI = (UFunction*) UObject::GObjObjects()->Data[ 28419 ];

	UOnlinePlayerInterface_execHideKeyboardUI_Parms HideKeyboardUI_Parms;
	HideKeyboardUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnHideKeyboardUI, &HideKeyboardUI_Parms, NULL );

	return HideKeyboardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 TitleText                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DescriptionText                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIsPassword                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShouldValidate                ( CPF_OptionalParm | CPF_Parm )
// struct FString                 DefaultText                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MaxResultLength                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength )
{
	static UFunction* pFnShowKeyboardUI = NULL;

	if ( ! pFnShowKeyboardUI )
		pFnShowKeyboardUI = (UFunction*) UObject::GObjObjects()->Data[ 28410 ];

	UOnlinePlayerInterface_execShowKeyboardUI_Parms ShowKeyboardUI_Parms;
	ShowKeyboardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowKeyboardUI_Parms.TitleText, &TitleText, 0xC );
	memcpy ( &ShowKeyboardUI_Parms.DescriptionText, &DescriptionText, 0xC );
	ShowKeyboardUI_Parms.bIsPassword = bIsPassword;
	ShowKeyboardUI_Parms.bShouldValidate = bShouldValidate;
	memcpy ( &ShowKeyboardUI_Parms.DefaultText, &DefaultText, 0xC );
	ShowKeyboardUI_Parms.MaxResultLength = MaxResultLength;

	this->ProcessEvent ( pFnShowKeyboardUI, &ShowKeyboardUI_Parms, NULL );

	return ShowKeyboardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            StatusId                       ( CPF_Parm )
// TArray< struct FLocalizedStringSetting > LocalizedStringSettings        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FSettingsProperty > Properties                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties )
{
	static UFunction* pFnSetOnlineStatus = NULL;

	if ( ! pFnSetOnlineStatus )
		pFnSetOnlineStatus = (UFunction*) UObject::GObjObjects()->Data[ 28403 ];

	UOnlinePlayerInterface_execSetOnlineStatus_Parms SetOnlineStatus_Parms;
	SetOnlineStatus_Parms.LocalUserNum = LocalUserNum;
	SetOnlineStatus_Parms.StatusId = StatusId;

	this->ProcessEvent ( pFnSetOnlineStatus, &SetOnlineStatus_Parms, NULL );

	if ( LocalizedStringSettings )
		memcpy ( LocalizedStringSettings, &SetOnlineStatus_Parms.LocalizedStringSettings, 0xC );

	if ( Properties )
		memcpy ( Properties, &SetOnlineStatus_Parms.Properties, 0xC );
};

// Function Engine.OnlinePlayerInterface.GetFriendsList
// [0x00424000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FOnlineFriend > Friends                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlinePlayerInterface::GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends )
{
	static UFunction* pFnGetFriendsList = NULL;

	if ( ! pFnGetFriendsList )
		pFnGetFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 28396 ];

	UOnlinePlayerInterface_execGetFriendsList_Parms GetFriendsList_Parms;
	GetFriendsList_Parms.LocalUserNum = LocalUserNum;
	GetFriendsList_Parms.Count = Count;
	GetFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnGetFriendsList, &GetFriendsList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &GetFriendsList_Parms.Friends, 0xC );

	return GetFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsCompleteDelegate )
		pFnClearReadFriendsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28393 ];

	UOnlinePlayerInterface_execClearReadFriendsCompleteDelegate_Parms ClearReadFriendsCompleteDelegate_Parms;
	ClearReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadFriendsCompleteDelegate, &ClearReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadFriendsCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsCompleteDelegate )
		pFnAddReadFriendsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28390 ];

	UOnlinePlayerInterface_execAddReadFriendsCompleteDelegate_Parms AddReadFriendsCompleteDelegate_Parms;
	AddReadFriendsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadFriendsCompleteDelegate_Parms.ReadFriendsCompleteDelegate, &ReadFriendsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadFriendsCompleteDelegate, &AddReadFriendsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadFriendsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsComplete = NULL;

	if ( ! pFnOnReadFriendsComplete )
		pFnOnReadFriendsComplete = (UFunction*) UObject::GObjObjects()->Data[ 28388 ];

	UOnlinePlayerInterface_execOnReadFriendsComplete_Parms OnReadFriendsComplete_Parms;
	OnReadFriendsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsComplete, &OnReadFriendsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadFriendsList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Count                          ( CPF_OptionalParm | CPF_Parm )
// int                            StartingAt                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt )
{
	static UFunction* pFnReadFriendsList = NULL;

	if ( ! pFnReadFriendsList )
		pFnReadFriendsList = (UFunction*) UObject::GObjObjects()->Data[ 28383 ];

	UOnlinePlayerInterface_execReadFriendsList_Parms ReadFriendsList_Parms;
	ReadFriendsList_Parms.LocalUserNum = LocalUserNum;
	ReadFriendsList_Parms.Count = Count;
	ReadFriendsList_Parms.StartingAt = StartingAt;

	this->ProcessEvent ( pFnReadFriendsList, &ReadFriendsList_Parms, NULL );

	return ReadFriendsList_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate )
{
	static UFunction* pFnClearWritePlayerStorageCompleteDelegate = NULL;

	if ( ! pFnClearWritePlayerStorageCompleteDelegate )
		pFnClearWritePlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28380 ];

	UOnlinePlayerInterface_execClearWritePlayerStorageCompleteDelegate_Parms ClearWritePlayerStorageCompleteDelegate_Parms;
	ClearWritePlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWritePlayerStorageCompleteDelegate_Parms.WritePlayerStorageCompleteDelegate, &WritePlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWritePlayerStorageCompleteDelegate, &ClearWritePlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate )
{
	static UFunction* pFnAddWritePlayerStorageCompleteDelegate = NULL;

	if ( ! pFnAddWritePlayerStorageCompleteDelegate )
		pFnAddWritePlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28377 ];

	UOnlinePlayerInterface_execAddWritePlayerStorageCompleteDelegate_Parms AddWritePlayerStorageCompleteDelegate_Parms;
	AddWritePlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWritePlayerStorageCompleteDelegate_Parms.WritePlayerStorageCompleteDelegate, &WritePlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWritePlayerStorageCompleteDelegate, &AddWritePlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnWritePlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnWritePlayerStorageComplete = NULL;

	if ( ! pFnOnWritePlayerStorageComplete )
		pFnOnWritePlayerStorageComplete = (UFunction*) UObject::GObjObjects()->Data[ 28374 ];

	UOnlinePlayerInterface_execOnWritePlayerStorageComplete_Parms OnWritePlayerStorageComplete_Parms;
	OnWritePlayerStorageComplete_Parms.LocalUserNum = LocalUserNum;
	OnWritePlayerStorageComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnWritePlayerStorageComplete, &OnWritePlayerStorageComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.WritePlayerStorage
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )
// int                            DeviceID                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::WritePlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID )
{
	static UFunction* pFnWritePlayerStorage = NULL;

	if ( ! pFnWritePlayerStorage )
		pFnWritePlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 28369 ];

	UOnlinePlayerInterface_execWritePlayerStorage_Parms WritePlayerStorage_Parms;
	WritePlayerStorage_Parms.LocalUserNum = LocalUserNum;
	WritePlayerStorage_Parms.PlayerStorage = PlayerStorage;
	WritePlayerStorage_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnWritePlayerStorage, &WritePlayerStorage_Parms, NULL );

	return WritePlayerStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerStorage
// [0x00020000] 
// Parameters infos:
// class UOnlinePlayerStorage*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

class UOnlinePlayerStorage* UOnlinePlayerInterface::GetPlayerStorage ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerStorage = NULL;

	if ( ! pFnGetPlayerStorage )
		pFnGetPlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 28366 ];

	UOnlinePlayerInterface_execGetPlayerStorage_Parms GetPlayerStorage_Parms;
	GetPlayerStorage_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerStorage, &GetPlayerStorage_Parms, NULL );

	return GetPlayerStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate )
{
	static UFunction* pFnClearReadPlayerStorageForNetIdCompleteDelegate = NULL;

	if ( ! pFnClearReadPlayerStorageForNetIdCompleteDelegate )
		pFnClearReadPlayerStorageForNetIdCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28363 ];

	UOnlinePlayerInterface_execClearReadPlayerStorageForNetIdCompleteDelegate_Parms ClearReadPlayerStorageForNetIdCompleteDelegate_Parms;
	memcpy ( &ClearReadPlayerStorageForNetIdCompleteDelegate_Parms.NetId, &NetId, 0x48 );
	memcpy ( &ClearReadPlayerStorageForNetIdCompleteDelegate_Parms.ReadPlayerStorageForNetIdCompleteDelegate, &ReadPlayerStorageForNetIdCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadPlayerStorageForNetIdCompleteDelegate, &ClearReadPlayerStorageForNetIdCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate )
{
	static UFunction* pFnAddReadPlayerStorageForNetIdCompleteDelegate = NULL;

	if ( ! pFnAddReadPlayerStorageForNetIdCompleteDelegate )
		pFnAddReadPlayerStorageForNetIdCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28360 ];

	UOnlinePlayerInterface_execAddReadPlayerStorageForNetIdCompleteDelegate_Parms AddReadPlayerStorageForNetIdCompleteDelegate_Parms;
	memcpy ( &AddReadPlayerStorageForNetIdCompleteDelegate_Parms.NetId, &NetId, 0x48 );
	memcpy ( &AddReadPlayerStorageForNetIdCompleteDelegate_Parms.ReadPlayerStorageForNetIdCompleteDelegate, &ReadPlayerStorageForNetIdCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadPlayerStorageForNetIdCompleteDelegate, &AddReadPlayerStorageForNetIdCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadPlayerStorageForNetIdComplete ( struct FUniqueNetId NetId, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadPlayerStorageForNetIdComplete = NULL;

	if ( ! pFnOnReadPlayerStorageForNetIdComplete )
		pFnOnReadPlayerStorageForNetIdComplete = (UFunction*) UObject::GObjObjects()->Data[ 28357 ];

	UOnlinePlayerInterface_execOnReadPlayerStorageForNetIdComplete_Parms OnReadPlayerStorageForNetIdComplete_Parms;
	memcpy ( &OnReadPlayerStorageForNetIdComplete_Parms.NetId, &NetId, 0x48 );
	OnReadPlayerStorageForNetIdComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadPlayerStorageForNetIdComplete, &OnReadPlayerStorageForNetIdComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UOnlinePlayerInterface::ReadPlayerStorageForNetId ( unsigned char LocalUserNum, struct FUniqueNetId NetId, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnReadPlayerStorageForNetId = NULL;

	if ( ! pFnReadPlayerStorageForNetId )
		pFnReadPlayerStorageForNetId = (UFunction*) UObject::GObjObjects()->Data[ 28352 ];

	UOnlinePlayerInterface_execReadPlayerStorageForNetId_Parms ReadPlayerStorageForNetId_Parms;
	ReadPlayerStorageForNetId_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ReadPlayerStorageForNetId_Parms.NetId, &NetId, 0x48 );
	ReadPlayerStorageForNetId_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnReadPlayerStorageForNetId, &ReadPlayerStorageForNetId_Parms, NULL );

	return ReadPlayerStorageForNetId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate )
{
	static UFunction* pFnClearReadPlayerStorageCompleteDelegate = NULL;

	if ( ! pFnClearReadPlayerStorageCompleteDelegate )
		pFnClearReadPlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28349 ];

	UOnlinePlayerInterface_execClearReadPlayerStorageCompleteDelegate_Parms ClearReadPlayerStorageCompleteDelegate_Parms;
	ClearReadPlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadPlayerStorageCompleteDelegate_Parms.ReadPlayerStorageCompleteDelegate, &ReadPlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadPlayerStorageCompleteDelegate, &ClearReadPlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate )
{
	static UFunction* pFnAddReadPlayerStorageCompleteDelegate = NULL;

	if ( ! pFnAddReadPlayerStorageCompleteDelegate )
		pFnAddReadPlayerStorageCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28346 ];

	UOnlinePlayerInterface_execAddReadPlayerStorageCompleteDelegate_Parms AddReadPlayerStorageCompleteDelegate_Parms;
	AddReadPlayerStorageCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadPlayerStorageCompleteDelegate_Parms.ReadPlayerStorageCompleteDelegate, &ReadPlayerStorageCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadPlayerStorageCompleteDelegate, &AddReadPlayerStorageCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadPlayerStorageComplete = NULL;

	if ( ! pFnOnReadPlayerStorageComplete )
		pFnOnReadPlayerStorageComplete = (UFunction*) UObject::GObjObjects()->Data[ 28343 ];

	UOnlinePlayerInterface_execOnReadPlayerStorageComplete_Parms OnReadPlayerStorageComplete_Parms;
	OnReadPlayerStorageComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadPlayerStorageComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadPlayerStorageComplete, &OnReadPlayerStorageComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadPlayerStorage
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )
// int                            DeviceID                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ReadPlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID )
{
	static UFunction* pFnReadPlayerStorage = NULL;

	if ( ! pFnReadPlayerStorage )
		pFnReadPlayerStorage = (UFunction*) UObject::GObjObjects()->Data[ 28338 ];

	UOnlinePlayerInterface_execReadPlayerStorage_Parms ReadPlayerStorage_Parms;
	ReadPlayerStorage_Parms.LocalUserNum = LocalUserNum;
	ReadPlayerStorage_Parms.PlayerStorage = PlayerStorage;
	ReadPlayerStorage_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnReadPlayerStorage, &ReadPlayerStorage_Parms, NULL );

	return ReadPlayerStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearWriteProfileSettingsCompleteDelegate )
		pFnClearWriteProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28335 ];

	UOnlinePlayerInterface_execClearWriteProfileSettingsCompleteDelegate_Parms ClearWriteProfileSettingsCompleteDelegate_Parms;
	ClearWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWriteProfileSettingsCompleteDelegate, &ClearWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddWriteProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddWriteProfileSettingsCompleteDelegate )
		pFnAddWriteProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28332 ];

	UOnlinePlayerInterface_execAddWriteProfileSettingsCompleteDelegate_Parms AddWriteProfileSettingsCompleteDelegate_Parms;
	AddWriteProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWriteProfileSettingsCompleteDelegate_Parms.WriteProfileSettingsCompleteDelegate, &WriteProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWriteProfileSettingsCompleteDelegate, &AddWriteProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnWriteProfileSettingsComplete = NULL;

	if ( ! pFnOnWriteProfileSettingsComplete )
		pFnOnWriteProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 28329 ];

	UOnlinePlayerInterface_execOnWriteProfileSettingsComplete_Parms OnWriteProfileSettingsComplete_Parms;
	OnWriteProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnWriteProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnWriteProfileSettingsComplete, &OnWriteProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterface::WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnWriteProfileSettings = NULL;

	if ( ! pFnWriteProfileSettings )
		pFnWriteProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28325 ];

	UOnlinePlayerInterface_execWriteProfileSettings_Parms WriteProfileSettings_Parms;
	WriteProfileSettings_Parms.LocalUserNum = LocalUserNum;
	WriteProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnWriteProfileSettings, &WriteProfileSettings_Parms, NULL );

	return WriteProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetProfileSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetProfileSettings = NULL;

	if ( ! pFnGetProfileSettings )
		pFnGetProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28322 ];

	UOnlinePlayerInterface_execGetProfileSettings_Parms GetProfileSettings_Parms;
	GetProfileSettings_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetProfileSettings, &GetProfileSettings_Parms, NULL );

	return GetProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearReadProfileSettingsCompleteDelegate )
		pFnClearReadProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28319 ];

	UOnlinePlayerInterface_execClearReadProfileSettingsCompleteDelegate_Parms ClearReadProfileSettingsCompleteDelegate_Parms;
	ClearReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadProfileSettingsCompleteDelegate, &ClearReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddReadProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddReadProfileSettingsCompleteDelegate )
		pFnAddReadProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28316 ];

	UOnlinePlayerInterface_execAddReadProfileSettingsCompleteDelegate_Parms AddReadProfileSettingsCompleteDelegate_Parms;
	AddReadProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadProfileSettingsCompleteDelegate, &AddReadProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 28313 ];

	UOnlinePlayerInterface_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;
	OnReadProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterface::ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnReadProfileSettings = NULL;

	if ( ! pFnReadProfileSettings )
		pFnReadProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28308 ];

	UOnlinePlayerInterface_execReadProfileSettings_Parms ReadProfileSettings_Parms;
	ReadProfileSettings_Parms.LocalUserNum = LocalUserNum;
	ReadProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnReadProfileSettings, &ReadProfileSettings_Parms, NULL );

	return ReadProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetFriendPresence
// [0x00420000] 
// Parameters infos:
// struct FOnlineFriend           FriendData                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::GetFriendPresence ( struct FOnlineFriend* FriendData )
{
	static UFunction* pFnGetFriendPresence = NULL;

	if ( ! pFnGetFriendPresence )
		pFnGetFriendPresence = (UFunction*) UObject::GObjObjects()->Data[ 28312 ];

	UOnlinePlayerInterface_execGetFriendPresence_Parms GetFriendPresence_Parms;

	this->ProcessEvent ( pFnGetFriendPresence, &GetFriendPresence_Parms, NULL );

	if ( FriendData )
		memcpy ( FriendData, &GetFriendPresence_Parms.FriendData, 0x78 );
};

// Function Engine.OnlinePlayerInterface.ClearFriendPresenceChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PresenceDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendPresenceChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PresenceDelegate )
{
	static UFunction* pFnClearFriendPresenceChangeDelegate = NULL;

	if ( ! pFnClearFriendPresenceChangeDelegate )
		pFnClearFriendPresenceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28581 ];

	UOnlinePlayerInterface_execClearFriendPresenceChangeDelegate_Parms ClearFriendPresenceChangeDelegate_Parms;
	ClearFriendPresenceChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendPresenceChangeDelegate_Parms.PresenceDelegate, &PresenceDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendPresenceChangeDelegate, &ClearFriendPresenceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendPresenceChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PresenceDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendPresenceChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PresenceDelegate )
{
	static UFunction* pFnAddFriendPresenceChangeDelegate = NULL;

	if ( ! pFnAddFriendPresenceChangeDelegate )
		pFnAddFriendPresenceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28583 ];

	UOnlinePlayerInterface_execAddFriendPresenceChangeDelegate_Parms AddFriendPresenceChangeDelegate_Parms;
	AddFriendPresenceChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendPresenceChangeDelegate_Parms.PresenceDelegate, &PresenceDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendPresenceChangeDelegate, &AddFriendPresenceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnClearFriendsChangeDelegate = NULL;

	if ( ! pFnClearFriendsChangeDelegate )
		pFnClearFriendsChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28305 ];

	UOnlinePlayerInterface_execClearFriendsChangeDelegate_Parms ClearFriendsChangeDelegate_Parms;
	ClearFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFriendsChangeDelegate, &ClearFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         FriendsDelegate                ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate )
{
	static UFunction* pFnAddFriendsChangeDelegate = NULL;

	if ( ! pFnAddFriendsChangeDelegate )
		pFnAddFriendsChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28302 ];

	UOnlinePlayerInterface_execAddFriendsChangeDelegate_Parms AddFriendsChangeDelegate_Parms;
	AddFriendsChangeDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddFriendsChangeDelegate_Parms.FriendsDelegate, &FriendsDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFriendsChangeDelegate, &AddFriendsChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnClearMutingChangeDelegate = NULL;

	if ( ! pFnClearMutingChangeDelegate )
		pFnClearMutingChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28300 ];

	UOnlinePlayerInterface_execClearMutingChangeDelegate_Parms ClearMutingChangeDelegate_Parms;
	memcpy ( &ClearMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0x10 );

	this->ProcessEvent ( pFnClearMutingChangeDelegate, &ClearMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MutingDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate )
{
	static UFunction* pFnAddMutingChangeDelegate = NULL;

	if ( ! pFnAddMutingChangeDelegate )
		pFnAddMutingChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28298 ];

	UOnlinePlayerInterface_execAddMutingChangeDelegate_Parms AddMutingChangeDelegate_Parms;
	memcpy ( &AddMutingChangeDelegate_Parms.MutingDelegate, &MutingDelegate, 0x10 );

	this->ProcessEvent ( pFnAddMutingChangeDelegate, &AddMutingChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnClearLoginCancelledDelegate = NULL;

	if ( ! pFnClearLoginCancelledDelegate )
		pFnClearLoginCancelledDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28296 ];

	UOnlinePlayerInterface_execClearLoginCancelledDelegate_Parms ClearLoginCancelledDelegate_Parms;
	memcpy ( &ClearLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoginCancelledDelegate, &ClearLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelledDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate )
{
	static UFunction* pFnAddLoginCancelledDelegate = NULL;

	if ( ! pFnAddLoginCancelledDelegate )
		pFnAddLoginCancelledDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28294 ];

	UOnlinePlayerInterface_execAddLoginCancelledDelegate_Parms AddLoginCancelledDelegate_Parms;
	memcpy ( &AddLoginCancelledDelegate_Parms.CancelledDelegate, &CancelledDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoginCancelledDelegate, &AddLoginCancelledDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginStatusDelegate            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::ClearLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearLoginStatusChangeDelegate = NULL;

	if ( ! pFnClearLoginStatusChangeDelegate )
		pFnClearLoginStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28291 ];

	UOnlinePlayerInterface_execClearLoginStatusChangeDelegate_Parms ClearLoginStatusChangeDelegate_Parms;
	memcpy ( &ClearLoginStatusChangeDelegate_Parms.LoginStatusDelegate, &LoginStatusDelegate, 0x10 );
	ClearLoginStatusChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearLoginStatusChangeDelegate, &ClearLoginStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginStatusDelegate            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::AddLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddLoginStatusChangeDelegate = NULL;

	if ( ! pFnAddLoginStatusChangeDelegate )
		pFnAddLoginStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28288 ];

	UOnlinePlayerInterface_execAddLoginStatusChangeDelegate_Parms AddLoginStatusChangeDelegate_Parms;
	memcpy ( &AddLoginStatusChangeDelegate_Parms.LoginStatusDelegate, &LoginStatusDelegate, 0x10 );
	AddLoginStatusChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddLoginStatusChangeDelegate, &AddLoginStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  NewStatus                      ( CPF_Parm )
// struct FUniqueNetId            NewId                          ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId )
{
	static UFunction* pFnOnLoginStatusChange = NULL;

	if ( ! pFnOnLoginStatusChange )
		pFnOnLoginStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 28285 ];

	UOnlinePlayerInterface_execOnLoginStatusChange_Parms OnLoginStatusChange_Parms;
	OnLoginStatusChange_Parms.NewStatus = NewStatus;
	memcpy ( &OnLoginStatusChange_Parms.NewId, &NewId, 0x48 );

	this->ProcessEvent ( pFnOnLoginStatusChange, &OnLoginStatusChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnClearLoginChangeDelegate = NULL;

	if ( ! pFnClearLoginChangeDelegate )
		pFnClearLoginChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28283 ];

	UOnlinePlayerInterface_execClearLoginChangeDelegate_Parms ClearLoginChangeDelegate_Parms;
	memcpy ( &ClearLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoginChangeDelegate, &ClearLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnAddLoginChangeDelegate = NULL;

	if ( ! pFnAddLoginChangeDelegate )
		pFnAddLoginChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28281 ];

	UOnlinePlayerInterface_execAddLoginChangeDelegate_Parms AddLoginChangeDelegate_Parms;
	memcpy ( &AddLoginChangeDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoginChangeDelegate, &AddLoginChangeDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearUserSignInCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserSignInCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearUserSignInCompleteDelegate ( struct FScriptDelegate UserSignInCompleteDelegate )
{
	static UFunction* pFnClearUserSignInCompleteDelegate = NULL;

	if ( ! pFnClearUserSignInCompleteDelegate )
		pFnClearUserSignInCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28279 ];

	UOnlinePlayerInterface_execClearUserSignInCompleteDelegate_Parms ClearUserSignInCompleteDelegate_Parms;
	memcpy ( &ClearUserSignInCompleteDelegate_Parms.UserSignInCompleteDelegate, &UserSignInCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUserSignInCompleteDelegate, &ClearUserSignInCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddUserSignInCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserSignInCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddUserSignInCompleteDelegate ( struct FScriptDelegate UserSignInCompleteDelegate )
{
	static UFunction* pFnAddUserSignInCompleteDelegate = NULL;

	if ( ! pFnAddUserSignInCompleteDelegate )
		pFnAddUserSignInCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28276 ];

	UOnlinePlayerInterface_execAddUserSignInCompleteDelegate_Parms AddUserSignInCompleteDelegate_Parms;
	memcpy ( &AddUserSignInCompleteDelegate_Parms.UserSignInCompleteDelegate, &UserSignInCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUserSignInCompleteDelegate, &AddUserSignInCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ClearUserSwitchCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserSwitchCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearUserSwitchCompleteDelegate ( struct FScriptDelegate UserSwitchCompleteDelegate )
{
	static UFunction* pFnClearUserSwitchCompleteDelegate = NULL;

	if ( ! pFnClearUserSwitchCompleteDelegate )
		pFnClearUserSwitchCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28278 ];

	UOnlinePlayerInterface_execClearUserSwitchCompleteDelegate_Parms ClearUserSwitchCompleteDelegate_Parms;
	memcpy ( &ClearUserSwitchCompleteDelegate_Parms.UserSwitchCompleteDelegate, &UserSwitchCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUserSwitchCompleteDelegate, &ClearUserSwitchCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddUserSwitchCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserSwitchCompleteDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddUserSwitchCompleteDelegate ( struct FScriptDelegate UserSwitchCompleteDelegate )
{
	static UFunction* pFnAddUserSwitchCompleteDelegate = NULL;

	if ( ! pFnAddUserSwitchCompleteDelegate )
		pFnAddUserSwitchCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28588 ];

	UOnlinePlayerInterface_execAddUserSwitchCompleteDelegate_Parms AddUserSwitchCompleteDelegate_Parms;
	memcpy ( &AddUserSwitchCompleteDelegate_Parms.UserSwitchCompleteDelegate, &UserSwitchCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUserSwitchCompleteDelegate, &AddUserSwitchCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.SetPrimaryPlayerGamepadToLastInput
// [0x00020000] 
// Parameters infos:

void UOnlinePlayerInterface::SetPrimaryPlayerGamepadToLastInput ( )
{
	static UFunction* pFnSetPrimaryPlayerGamepadToLastInput = NULL;

	if ( ! pFnSetPrimaryPlayerGamepadToLastInput )
		pFnSetPrimaryPlayerGamepadToLastInput = (UFunction*) UObject::GObjObjects()->Data[ 28275 ];

	UOnlinePlayerInterface_execSetPrimaryPlayerGamepadToLastInput_Parms SetPrimaryPlayerGamepadToLastInput_Parms;

	this->ProcessEvent ( pFnSetPrimaryPlayerGamepadToLastInput, &SetPrimaryPlayerGamepadToLastInput_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::ShowFriendsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowFriendsUI = NULL;

	if ( ! pFnShowFriendsUI )
		pFnShowFriendsUI = (UFunction*) UObject::GObjObjects()->Data[ 28272 ];

	UOnlinePlayerInterface_execShowFriendsUI_Parms ShowFriendsUI_Parms;
	ShowFriendsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowFriendsUI, &ShowFriendsUI_Parms, NULL );

	return ShowFriendsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsMuted
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsMuted = NULL;

	if ( ! pFnIsMuted )
		pFnIsMuted = (UFunction*) UObject::GObjObjects()->Data[ 28268 ];

	UOnlinePlayerInterface_execIsMuted_Parms IsMuted_Parms;
	IsMuted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsMuted_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnIsMuted, &IsMuted_Parms, NULL );

	return IsMuted_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.AreAnyFriends
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FFriendsQuery > Query                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterface::AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query )
{
	static UFunction* pFnAreAnyFriends = NULL;

	if ( ! pFnAreAnyFriends )
		pFnAreAnyFriends = (UFunction*) UObject::GObjObjects()->Data[ 28263 ];

	UOnlinePlayerInterface_execAreAnyFriends_Parms AreAnyFriends_Parms;
	AreAnyFriends_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAreAnyFriends, &AreAnyFriends_Parms, NULL );

	if ( Query )
		memcpy ( Query, &AreAnyFriends_Parms.Query, 0xC );

	return AreAnyFriends_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsFriend
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterface::IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsFriend = NULL;

	if ( ! pFnIsFriend )
		pFnIsFriend = (UFunction*) UObject::GObjObjects()->Data[ 28259 ];

	UOnlinePlayerInterface_execIsFriend_Parms IsFriend_Parms;
	IsFriend_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &IsFriend_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnIsFriend, &IsFriend_Parms, NULL );

	return IsFriend_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicate
// [0x00024000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  CommMethod                     ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )

unsigned char UOnlinePlayerInterface::CanCommunicate ( unsigned char LocalUserNum, unsigned char CommMethod, unsigned long bAttemptToResolve )
{
	static UFunction* pFnCanCommunicate = NULL;

	if ( ! pFnCanCommunicate )
		pFnCanCommunicate = (UFunction*) UObject::GObjObjects()->Data[ 28254 ];

	UOnlinePlayerInterface_execCanCommunicate_Parms CanCommunicate_Parms;
	CanCommunicate_Parms.LocalUserNum = LocalUserNum;
	CanCommunicate_Parms.CommMethod = CommMethod;
	CanCommunicate_Parms.bAttemptToResolve = bAttemptToResolve;

	this->ProcessEvent ( pFnCanCommunicate, &CanCommunicate_Parms, NULL );

	return CanCommunicate_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanDownloadUserContent ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanDownloadUserContent = NULL;

	if ( ! pFnCanDownloadUserContent )
		pFnCanDownloadUserContent = (UFunction*) UObject::GObjObjects()->Data[ 12804 ];

	UOnlinePlayerInterface_execCanDownloadUserContent_Parms CanDownloadUserContent_Parms;
	CanDownloadUserContent_Parms.LocalUserNum = LocalUserNum;
	CanDownloadUserContent_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanDownloadUserContent_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanDownloadUserContent, &CanDownloadUserContent_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanDownloadUserContent_Parms.PrivilegeLevelHint;

	return CanDownloadUserContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanUploadFitnessData
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanUploadFitnessData ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanUploadFitnessData = NULL;

	if ( ! pFnCanUploadFitnessData )
		pFnCanUploadFitnessData = (UFunction*) UObject::GObjObjects()->Data[ 28244 ];

	UOnlinePlayerInterface_execCanUploadFitnessData_Parms CanUploadFitnessData_Parms;
	CanUploadFitnessData_Parms.LocalUserNum = LocalUserNum;
	CanUploadFitnessData_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanUploadFitnessData_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanUploadFitnessData, &CanUploadFitnessData_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanUploadFitnessData_Parms.PrivilegeLevelHint;

	return CanUploadFitnessData_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShareKinectContent
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanShareKinectContent ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanShareKinectContent = NULL;

	if ( ! pFnCanShareKinectContent )
		pFnCanShareKinectContent = (UFunction*) UObject::GObjObjects()->Data[ 28238 ];

	UOnlinePlayerInterface_execCanShareKinectContent_Parms CanShareKinectContent_Parms;
	CanShareKinectContent_Parms.LocalUserNum = LocalUserNum;
	CanShareKinectContent_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanShareKinectContent_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanShareKinectContent, &CanShareKinectContent_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanShareKinectContent_Parms.PrivilegeLevelHint;

	return CanShareKinectContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShareWithSocialNetwork
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanShareWithSocialNetwork ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanShareWithSocialNetwork = NULL;

	if ( ! pFnCanShareWithSocialNetwork )
		pFnCanShareWithSocialNetwork = (UFunction*) UObject::GObjObjects()->Data[ 28232 ];

	UOnlinePlayerInterface_execCanShareWithSocialNetwork_Parms CanShareWithSocialNetwork_Parms;
	CanShareWithSocialNetwork_Parms.LocalUserNum = LocalUserNum;
	CanShareWithSocialNetwork_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanShareWithSocialNetwork_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanShareWithSocialNetwork, &CanShareWithSocialNetwork_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanShareWithSocialNetwork_Parms.PrivilegeLevelHint;

	return CanShareWithSocialNetwork_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanBrowseInternet
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanBrowseInternet ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanBrowseInternet = NULL;

	if ( ! pFnCanBrowseInternet )
		pFnCanBrowseInternet = (UFunction*) UObject::GObjObjects()->Data[ 28226 ];

	UOnlinePlayerInterface_execCanBrowseInternet_Parms CanBrowseInternet_Parms;
	CanBrowseInternet_Parms.LocalUserNum = LocalUserNum;
	CanBrowseInternet_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanBrowseInternet_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanBrowseInternet, &CanBrowseInternet_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanBrowseInternet_Parms.PrivilegeLevelHint;

	return CanBrowseInternet_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanAccessPremiumVideoContent
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanAccessPremiumVideoContent ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanAccessPremiumVideoContent = NULL;

	if ( ! pFnCanAccessPremiumVideoContent )
		pFnCanAccessPremiumVideoContent = (UFunction*) UObject::GObjObjects()->Data[ 28220 ];

	UOnlinePlayerInterface_execCanAccessPremiumVideoContent_Parms CanAccessPremiumVideoContent_Parms;
	CanAccessPremiumVideoContent_Parms.LocalUserNum = LocalUserNum;
	CanAccessPremiumVideoContent_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanAccessPremiumVideoContent_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanAccessPremiumVideoContent, &CanAccessPremiumVideoContent_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanAccessPremiumVideoContent_Parms.PrivilegeLevelHint;

	return CanAccessPremiumVideoContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanAccessPremiumContent
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanAccessPremiumContent ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanAccessPremiumContent = NULL;

	if ( ! pFnCanAccessPremiumContent )
		pFnCanAccessPremiumContent = (UFunction*) UObject::GObjObjects()->Data[ 28214 ];

	UOnlinePlayerInterface_execCanAccessPremiumContent_Parms CanAccessPremiumContent_Parms;
	CanAccessPremiumContent_Parms.LocalUserNum = LocalUserNum;
	CanAccessPremiumContent_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanAccessPremiumContent_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanAccessPremiumContent, &CanAccessPremiumContent_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanAccessPremiumContent_Parms.PrivilegeLevelHint;

	return CanAccessPremiumContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanUseCloudStorage
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanUseCloudStorage ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanUseCloudStorage = NULL;

	if ( ! pFnCanUseCloudStorage )
		pFnCanUseCloudStorage = (UFunction*) UObject::GObjObjects()->Data[ 28208 ];

	UOnlinePlayerInterface_execCanUseCloudStorage_Parms CanUseCloudStorage_Parms;
	CanUseCloudStorage_Parms.LocalUserNum = LocalUserNum;
	CanUseCloudStorage_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanUseCloudStorage_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanUseCloudStorage, &CanUseCloudStorage_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanUseCloudStorage_Parms.PrivilegeLevelHint;

	return CanUseCloudStorage_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanRecordDVRClips
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanRecordDVRClips ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanRecordDVRClips = NULL;

	if ( ! pFnCanRecordDVRClips )
		pFnCanRecordDVRClips = (UFunction*) UObject::GObjObjects()->Data[ 28202 ];

	UOnlinePlayerInterface_execCanRecordDVRClips_Parms CanRecordDVRClips_Parms;
	CanRecordDVRClips_Parms.LocalUserNum = LocalUserNum;
	CanRecordDVRClips_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanRecordDVRClips_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanRecordDVRClips, &CanRecordDVRClips_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanRecordDVRClips_Parms.PrivilegeLevelHint;

	return CanRecordDVRClips_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanShowPresenceInformation ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanShowPresenceInformation = NULL;

	if ( ! pFnCanShowPresenceInformation )
		pFnCanShowPresenceInformation = (UFunction*) UObject::GObjObjects()->Data[ 28196 ];

	UOnlinePlayerInterface_execCanShowPresenceInformation_Parms CanShowPresenceInformation_Parms;
	CanShowPresenceInformation_Parms.LocalUserNum = LocalUserNum;
	CanShowPresenceInformation_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanShowPresenceInformation_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanShowPresenceInformation, &CanShowPresenceInformation_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanShowPresenceInformation_Parms.PrivilegeLevelHint;

	return CanShowPresenceInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanViewPlayerProfiles ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanViewPlayerProfiles = NULL;

	if ( ! pFnCanViewPlayerProfiles )
		pFnCanViewPlayerProfiles = (UFunction*) UObject::GObjObjects()->Data[ 28190 ];

	UOnlinePlayerInterface_execCanViewPlayerProfiles_Parms CanViewPlayerProfiles_Parms;
	CanViewPlayerProfiles_Parms.LocalUserNum = LocalUserNum;
	CanViewPlayerProfiles_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanViewPlayerProfiles_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanViewPlayerProfiles, &CanViewPlayerProfiles_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanViewPlayerProfiles_Parms.PrivilegeLevelHint;

	return CanViewPlayerProfiles_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanPurchaseContent ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanPurchaseContent = NULL;

	if ( ! pFnCanPurchaseContent )
		pFnCanPurchaseContent = (UFunction*) UObject::GObjObjects()->Data[ 28184 ];

	UOnlinePlayerInterface_execCanPurchaseContent_Parms CanPurchaseContent_Parms;
	CanPurchaseContent_Parms.LocalUserNum = LocalUserNum;
	CanPurchaseContent_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanPurchaseContent_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanPurchaseContent, &CanPurchaseContent_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanPurchaseContent_Parms.PrivilegeLevelHint;

	return CanPurchaseContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanShareUserCreatedContent
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanShareUserCreatedContent ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanShareUserCreatedContent = NULL;

	if ( ! pFnCanShareUserCreatedContent )
		pFnCanShareUserCreatedContent = (UFunction*) UObject::GObjObjects()->Data[ 28178 ];

	UOnlinePlayerInterface_execCanShareUserCreatedContent_Parms CanShareUserCreatedContent_Parms;
	CanShareUserCreatedContent_Parms.LocalUserNum = LocalUserNum;
	CanShareUserCreatedContent_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanShareUserCreatedContent_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanShareUserCreatedContent, &CanShareUserCreatedContent_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanShareUserCreatedContent_Parms.PrivilegeLevelHint;

	return CanShareUserCreatedContent_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicateVoice
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanCommunicateVoice ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanCommunicateVoice = NULL;

	if ( ! pFnCanCommunicateVoice )
		pFnCanCommunicateVoice = (UFunction*) UObject::GObjObjects()->Data[ 28172 ];

	UOnlinePlayerInterface_execCanCommunicateVoice_Parms CanCommunicateVoice_Parms;
	CanCommunicateVoice_Parms.LocalUserNum = LocalUserNum;
	CanCommunicateVoice_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanCommunicateVoice_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanCommunicateVoice, &CanCommunicateVoice_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanCommunicateVoice_Parms.PrivilegeLevelHint;

	return CanCommunicateVoice_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicateVideo
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanCommunicateVideo ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanCommunicateVideo = NULL;

	if ( ! pFnCanCommunicateVideo )
		pFnCanCommunicateVideo = (UFunction*) UObject::GObjObjects()->Data[ 28166 ];

	UOnlinePlayerInterface_execCanCommunicateVideo_Parms CanCommunicateVideo_Parms;
	CanCommunicateVideo_Parms.LocalUserNum = LocalUserNum;
	CanCommunicateVideo_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanCommunicateVideo_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanCommunicateVideo, &CanCommunicateVideo_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanCommunicateVideo_Parms.PrivilegeLevelHint;

	return CanCommunicateVideo_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanCommunicateText
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanCommunicateText ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanCommunicateText = NULL;

	if ( ! pFnCanCommunicateText )
		pFnCanCommunicateText = (UFunction*) UObject::GObjObjects()->Data[ 28160 ];

	UOnlinePlayerInterface_execCanCommunicateText_Parms CanCommunicateText_Parms;
	CanCommunicateText_Parms.LocalUserNum = LocalUserNum;
	CanCommunicateText_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanCommunicateText_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanCommunicateText, &CanCommunicateText_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanCommunicateText_Parms.PrivilegeLevelHint;

	return CanCommunicateText_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPlayOnline
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAttemptToResolve              ( CPF_OptionalParm | CPF_Parm )
// struct FString                 Reason                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  PrivilegeLevelHint             ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::CanPlayOnline ( unsigned char LocalUserNum, unsigned long bAttemptToResolve, struct FString Reason, unsigned char* PrivilegeLevelHint )
{
	static UFunction* pFnCanPlayOnline = NULL;

	if ( ! pFnCanPlayOnline )
		pFnCanPlayOnline = (UFunction*) UObject::GObjObjects()->Data[ 12696 ];

	UOnlinePlayerInterface_execCanPlayOnline_Parms CanPlayOnline_Parms;
	CanPlayOnline_Parms.LocalUserNum = LocalUserNum;
	CanPlayOnline_Parms.bAttemptToResolve = bAttemptToResolve;
	memcpy ( &CanPlayOnline_Parms.Reason, &Reason, 0xC );

	this->ProcessEvent ( pFnCanPlayOnline, &CanPlayOnline_Parms, NULL );

	if ( PrivilegeLevelHint )
		*PrivilegeLevelHint = CanPlayOnline_Parms.PrivilegeLevelHint;

	return CanPlayOnline_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsLocalLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::IsLocalLogin ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsLocalLogin = NULL;

	if ( ! pFnIsLocalLogin )
		pFnIsLocalLogin = (UFunction*) UObject::GObjObjects()->Data[ 28153 ];

	UOnlinePlayerInterface_execIsLocalLogin_Parms IsLocalLogin_Parms;
	IsLocalLogin_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsLocalLogin, &IsLocalLogin_Parms, NULL );

	return IsLocalLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.IsGuestLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::IsGuestLogin ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsGuestLogin = NULL;

	if ( ! pFnIsGuestLogin )
		pFnIsGuestLogin = (UFunction*) UObject::GObjObjects()->Data[ 28150 ];

	UOnlinePlayerInterface_execIsGuestLogin_Parms IsGuestLogin_Parms;
	IsGuestLogin_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsGuestLogin, &IsGuestLogin_Parms, NULL );

	return IsGuestLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

struct FString UOnlinePlayerInterface::GetPlayerNickname ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetPlayerNickname = NULL;

	if ( ! pFnGetPlayerNickname )
		pFnGetPlayerNickname = (UFunction*) UObject::GObjObjects()->Data[ 11817 ];

	UOnlinePlayerInterface_execGetPlayerNickname_Parms GetPlayerNickname_Parms;
	GetPlayerNickname_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetPlayerNickname, &GetPlayerNickname_Parms, NULL );

	return GetPlayerNickname_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm | CPF_OutParm )

bool UOnlinePlayerInterface::GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID )
{
	static UFunction* pFnGetUniquePlayerId = NULL;

	if ( ! pFnGetUniquePlayerId )
		pFnGetUniquePlayerId = (UFunction*) UObject::GObjObjects()->Data[ 7786 ];

	UOnlinePlayerInterface_execGetUniquePlayerId_Parms GetUniquePlayerId_Parms;
	GetUniquePlayerId_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetUniquePlayerId, &GetUniquePlayerId_Parms, NULL );

	if ( PlayerID )
		memcpy ( PlayerID, &GetUniquePlayerId_Parms.PlayerID, 0x48 );

	return GetUniquePlayerId_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.GetLoginStatus
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

unsigned char UOnlinePlayerInterface::GetLoginStatus ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 11815 ];

	UOnlinePlayerInterface_execGetLoginStatus_Parms GetLoginStatus_Parms;
	GetLoginStatus_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnClearLogoutCompletedDelegate = NULL;

	if ( ! pFnClearLogoutCompletedDelegate )
		pFnClearLogoutCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28143 ];

	UOnlinePlayerInterface_execClearLogoutCompletedDelegate_Parms ClearLogoutCompletedDelegate_Parms;
	ClearLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLogoutCompletedDelegate, &ClearLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LogoutDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate )
{
	static UFunction* pFnAddLogoutCompletedDelegate = NULL;

	if ( ! pFnAddLogoutCompletedDelegate )
		pFnAddLogoutCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28140 ];

	UOnlinePlayerInterface_execAddLogoutCompletedDelegate_Parms AddLogoutCompletedDelegate_Parms;
	AddLogoutCompletedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLogoutCompletedDelegate_Parms.LogoutDelegate, &LogoutDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLogoutCompletedDelegate, &AddLogoutCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterface::OnLogoutCompleted ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnLogoutCompleted = NULL;

	if ( ! pFnOnLogoutCompleted )
		pFnOnLogoutCompleted = (UFunction*) UObject::GObjObjects()->Data[ 28138 ];

	UOnlinePlayerInterface_execOnLogoutCompleted_Parms OnLogoutCompleted_Parms;
	OnLogoutCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnLogoutCompleted, &OnLogoutCompleted_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.Logout
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::Logout ( unsigned char LocalUserNum )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = (UFunction*) UObject::GObjObjects()->Data[ 28135 ];

	UOnlinePlayerInterface_execLogout_Parms Logout_Parms;
	Logout_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );

	return Logout_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnClearLoginFailedDelegate = NULL;

	if ( ! pFnClearLoginFailedDelegate )
		pFnClearLoginFailedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28132 ];

	UOnlinePlayerInterface_execClearLoginFailedDelegate_Parms ClearLoginFailedDelegate_Parms;
	ClearLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoginFailedDelegate, &ClearLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         LoginDelegate                  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate )
{
	static UFunction* pFnAddLoginFailedDelegate = NULL;

	if ( ! pFnAddLoginFailedDelegate )
		pFnAddLoginFailedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28129 ];

	UOnlinePlayerInterface_execAddLoginFailedDelegate_Parms AddLoginFailedDelegate_Parms;
	AddLoginFailedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddLoginFailedDelegate_Parms.LoginDelegate, &LoginDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoginFailedDelegate, &AddLoginFailedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginFailed
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOnLoginFailed = NULL;

	if ( ! pFnOnLoginFailed )
		pFnOnLoginFailed = (UFunction*) UObject::GObjObjects()->Data[ 28126 ];

	UOnlinePlayerInterface_execOnLoginFailed_Parms OnLoginFailed_Parms;
	OnLoginFailed_Parms.LocalUserNum = LocalUserNum;
	OnLoginFailed_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOnLoginFailed, &OnLoginFailed_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.AutoLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::AutoLogin ( )
{
	static UFunction* pFnAutoLogin = NULL;

	if ( ! pFnAutoLogin )
		pFnAutoLogin = (UFunction*) UObject::GObjObjects()->Data[ 21772 ];

	UOnlinePlayerInterface_execAutoLogin_Parms AutoLogin_Parms;

	this->ProcessEvent ( pFnAutoLogin, &AutoLogin_Parms, NULL );

	return AutoLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.Login
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 LoginName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bWantsLocalOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = (UFunction*) UObject::GObjObjects()->Data[ 28119 ];

	UOnlinePlayerInterface_execLogin_Parms Login_Parms;
	Login_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &Login_Parms.LoginName, &LoginName, 0xC );
	memcpy ( &Login_Parms.Password, &Password, 0xC );
	Login_Parms.bWantsLocalOnly = bWantsLocalOnly;

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );

	return Login_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetKickPlayerDialogActive
// [0x00020000] 
// Parameters infos:
// unsigned long                  Active                         ( CPF_Parm )

void UOnlinePlayerInterface::SetKickPlayerDialogActive ( unsigned long Active )
{
	static UFunction* pFnSetKickPlayerDialogActive = NULL;

	if ( ! pFnSetKickPlayerDialogActive )
		pFnSetKickPlayerDialogActive = (UFunction*) UObject::GObjObjects()->Data[ 28125 ];

	UOnlinePlayerInterface_execSetKickPlayerDialogActive_Parms SetKickPlayerDialogActive_Parms;
	SetKickPlayerDialogActive_Parms.Active = Active;

	this->ProcessEvent ( pFnSetKickPlayerDialogActive, &SetKickPlayerDialogActive_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.IsUserSwitchActive
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::IsUserSwitchActive ( )
{
	static UFunction* pFnIsUserSwitchActive = NULL;

	if ( ! pFnIsUserSwitchActive )
		pFnIsUserSwitchActive = (UFunction*) UObject::GObjObjects()->Data[ 28591 ];

	UOnlinePlayerInterface_execIsUserSwitchActive_Parms IsUserSwitchActive_Parms;

	this->ProcessEvent ( pFnIsUserSwitchActive, &IsUserSwitchActive_Parms, NULL );

	return IsUserSwitchActive_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.SetKickPreviousUser
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::SetKickPreviousUser ( unsigned char LocalUserNum )
{
	static UFunction* pFnSetKickPreviousUser = NULL;

	if ( ! pFnSetKickPreviousUser )
		pFnSetKickPreviousUser = (UFunction*) UObject::GObjObjects()->Data[ 28593 ];

	UOnlinePlayerInterface_execSetKickPreviousUser_Parms SetKickPreviousUser_Parms;
	SetKickPreviousUser_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnSetKickPreviousUser, &SetKickPreviousUser_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.SupportInGameLogin
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::SupportInGameLogin ( )
{
	static UFunction* pFnSupportInGameLogin = NULL;

	if ( ! pFnSupportInGameLogin )
		pFnSupportInGameLogin = (UFunction*) UObject::GObjObjects()->Data[ 28595 ];

	UOnlinePlayerInterface_execSupportInGameLogin_Parms SupportInGameLogin_Parms;

	this->ProcessEvent ( pFnSupportInGameLogin, &SupportInGameLogin_Parms, NULL );

	return SupportInGameLogin_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowControllerUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlinePlayerInterface::ShowControllerUI ( )
{
	static UFunction* pFnShowControllerUI = NULL;

	if ( ! pFnShowControllerUI )
		pFnShowControllerUI = (UFunction*) UObject::GObjObjects()->Data[ 28597 ];

	UOnlinePlayerInterface_execShowControllerUI_Parms ShowControllerUI_Parms;

	this->ProcessEvent ( pFnShowControllerUI, &ShowControllerUI_Parms, NULL );

	return ShowControllerUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowLoginUIForOrphanedUser
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterface::ShowLoginUIForOrphanedUser ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowLoginUIForOrphanedUser = NULL;

	if ( ! pFnShowLoginUIForOrphanedUser )
		pFnShowLoginUIForOrphanedUser = (UFunction*) UObject::GObjObjects()->Data[ 28599 ];

	UOnlinePlayerInterface_execShowLoginUIForOrphanedUser_Parms ShowLoginUIForOrphanedUser_Parms;
	ShowLoginUIForOrphanedUser_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowLoginUIForOrphanedUser, &ShowLoginUIForOrphanedUser_Parms, NULL );

	return ShowLoginUIForOrphanedUser_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.ShowLoginUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bShowOnlineOnly                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterface::ShowLoginUI ( unsigned char LocalUserNum, unsigned long bShowOnlineOnly )
{
	static UFunction* pFnShowLoginUI = NULL;

	if ( ! pFnShowLoginUI )
		pFnShowLoginUI = (UFunction*) UObject::GObjObjects()->Data[ 28115 ];

	UOnlinePlayerInterface_execShowLoginUI_Parms ShowLoginUI_Parms;
	ShowLoginUI_Parms.LocalUserNum = LocalUserNum;
	ShowLoginUI_Parms.bShowOnlineOnly = bShowOnlineOnly;

	this->ProcessEvent ( pFnShowLoginUI, &ShowLoginUI_Parms, NULL );

	return ShowLoginUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterface.CanPlayOnlineChanged
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::CanPlayOnlineChanged ( unsigned char LocalUserNum )
{
	static UFunction* pFnCanPlayOnlineChanged = NULL;

	if ( ! pFnCanPlayOnlineChanged )
		pFnCanPlayOnlineChanged = (UFunction*) UObject::GObjObjects()->Data[ 28113 ];

	UOnlinePlayerInterface_execCanPlayOnlineChanged_Parms CanPlayOnlineChanged_Parms;
	CanPlayOnlineChanged_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnCanPlayOnlineChanged, &CanPlayOnlineChanged_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnPlayerCountryRetrieved
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FString                 Country                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterface::OnPlayerCountryRetrieved ( struct FUniqueNetId PlayerID, struct FString Country )
{
	static UFunction* pFnOnPlayerCountryRetrieved = NULL;

	if ( ! pFnOnPlayerCountryRetrieved )
		pFnOnPlayerCountryRetrieved = (UFunction*) UObject::GObjObjects()->Data[ 28109 ];

	UOnlinePlayerInterface_execOnPlayerCountryRetrieved_Parms OnPlayerCountryRetrieved_Parms;
	memcpy ( &OnPlayerCountryRetrieved_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &OnPlayerCountryRetrieved_Parms.Country, &Country, 0xC );

	this->ProcessEvent ( pFnOnPlayerCountryRetrieved, &OnPlayerCountryRetrieved_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.FriendPresenceChange
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

void UOnlinePlayerInterface::FriendPresenceChange ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnFriendPresenceChange = NULL;

	if ( ! pFnFriendPresenceChange )
		pFnFriendPresenceChange = (UFunction*) UObject::GObjObjects()->Data[ 28112 ];

	UOnlinePlayerInterface_execFriendPresenceChange_Parms FriendPresenceChange_Parms;
	memcpy ( &FriendPresenceChange_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnFriendPresenceChange, &FriendPresenceChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnFriendsChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnFriendsChange ( )
{
	static UFunction* pFnOnFriendsChange = NULL;

	if ( ! pFnOnFriendsChange )
		pFnOnFriendsChange = (UFunction*) UObject::GObjObjects()->Data[ 28108 ];

	UOnlinePlayerInterface_execOnFriendsChange_Parms OnFriendsChange_Parms;

	this->ProcessEvent ( pFnOnFriendsChange, &OnFriendsChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnMutingChange
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnMutingChange ( )
{
	static UFunction* pFnOnMutingChange = NULL;

	if ( ! pFnOnMutingChange )
		pFnOnMutingChange = (UFunction*) UObject::GObjObjects()->Data[ 28107 ];

	UOnlinePlayerInterface_execOnMutingChange_Parms OnMutingChange_Parms;

	this->ProcessEvent ( pFnOnMutingChange, &OnMutingChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterface::OnLoginCancelled ( )
{
	static UFunction* pFnOnLoginCancelled = NULL;

	if ( ! pFnOnLoginCancelled )
		pFnOnLoginCancelled = (UFunction*) UObject::GObjObjects()->Data[ 28106 ];

	UOnlinePlayerInterface_execOnLoginCancelled_Parms OnLoginCancelled_Parms;

	this->ProcessEvent ( pFnOnLoginCancelled, &OnLoginCancelled_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnLoginChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::OnLoginChange ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 28104 ];

	UOnlinePlayerInterface_execOnLoginChange_Parms OnLoginChange_Parms;
	OnLoginChange_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnUserSignInComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::OnUserSignInComplete ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnUserSignInComplete = NULL;

	if ( ! pFnOnUserSignInComplete )
		pFnOnUserSignInComplete = (UFunction*) UObject::GObjObjects()->Data[ 28101 ];

	UOnlinePlayerInterface_execOnUserSignInComplete_Parms OnUserSignInComplete_Parms;
	OnUserSignInComplete_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnUserSignInComplete, &OnUserSignInComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterface.OnUserSwitchComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlinePlayerInterface::OnUserSwitchComplete ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnUserSwitchComplete = NULL;

	if ( ! pFnOnUserSwitchComplete )
		pFnOnUserSwitchComplete = (UFunction*) UObject::GObjObjects()->Data[ 28103 ];

	UOnlinePlayerInterface_execOnUserSwitchComplete_Parms OnUserSwitchComplete_Parms;
	OnUserSwitchComplete_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnUserSwitchComplete, &OnUserSwitchComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.DownloadAllWorkshopData
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::DownloadAllWorkshopData ( struct FScriptDelegate Callback )
{
	static UFunction* pFnDownloadAllWorkshopData = NULL;

	if ( ! pFnDownloadAllWorkshopData )
		pFnDownloadAllWorkshopData = (UFunction*) UObject::GObjObjects()->Data[ 27260 ];

	UOnlineCommunityContentInterface_execDownloadAllWorkshopData_Parms DownloadAllWorkshopData_Parms;
	memcpy ( &DownloadAllWorkshopData_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnDownloadAllWorkshopData, &DownloadAllWorkshopData_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnDownloadedWorkshopData
// [0x00520000] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// TArray< struct FDownloadedWorkshopData > Items                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnDownloadedWorkshopData ( unsigned long bSuccess, TArray< struct FDownloadedWorkshopData >* Items )
{
	static UFunction* pFnOnDownloadedWorkshopData = NULL;

	if ( ! pFnOnDownloadedWorkshopData )
		pFnOnDownloadedWorkshopData = (UFunction*) UObject::GObjObjects()->Data[ 27261 ];

	UOnlineCommunityContentInterface_execOnDownloadedWorkshopData_Parms OnDownloadedWorkshopData_Parms;
	OnDownloadedWorkshopData_Parms.bSuccess = bSuccess;

	this->ProcessEvent ( pFnOnDownloadedWorkshopData, &OnDownloadedWorkshopData_Parms, NULL );

	if ( Items )
		memcpy ( Items, &OnDownloadedWorkshopData_Parms.Items, 0xC );
};

// Function Engine.OnlineCommunityContentInterface.RateContent
// [0x00420000] 
// Parameters infos:
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            NewRating                      ( CPF_Parm )
// struct FCommunityContentFile   FileToRate                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate )
{
	static UFunction* pFnRateContent = NULL;

	if ( ! pFnRateContent )
		pFnRateContent = (UFunction*) UObject::GObjObjects()->Data[ 27256 ];

	UOnlineCommunityContentInterface_execRateContent_Parms RateContent_Parms;
	RateContent_Parms.PlayerNum = PlayerNum;
	RateContent_Parms.NewRating = NewRating;

	this->ProcessEvent ( pFnRateContent, &RateContent_Parms, NULL );

	if ( FileToRate )
		memcpy ( FileToRate, &RateContent_Parms.FileToRate, 0x80 );
};

// Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate )
{
	static UFunction* pFnClearGetContentPayloadCompleteDelegate = NULL;

	if ( ! pFnClearGetContentPayloadCompleteDelegate )
		pFnClearGetContentPayloadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27254 ];

	UOnlineCommunityContentInterface_execClearGetContentPayloadCompleteDelegate_Parms ClearGetContentPayloadCompleteDelegate_Parms;
	memcpy ( &ClearGetContentPayloadCompleteDelegate_Parms.GetContentPayloadCompleteDelegate, &GetContentPayloadCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearGetContentPayloadCompleteDelegate, &ClearGetContentPayloadCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate )
{
	static UFunction* pFnAddGetContentPayloadCompleteDelegate = NULL;

	if ( ! pFnAddGetContentPayloadCompleteDelegate )
		pFnAddGetContentPayloadCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27252 ];

	UOnlineCommunityContentInterface_execAddGetContentPayloadCompleteDelegate_Parms AddGetContentPayloadCompleteDelegate_Parms;
	memcpy ( &AddGetContentPayloadCompleteDelegate_Parms.GetContentPayloadCompleteDelegate, &GetContentPayloadCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddGetContentPayloadCompleteDelegate, &AddGetContentPayloadCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, TArray< unsigned char >* Payload )
{
	static UFunction* pFnOnGetContentPayloadComplete = NULL;

	if ( ! pFnOnGetContentPayloadComplete )
		pFnOnGetContentPayloadComplete = (UFunction*) UObject::GObjObjects()->Data[ 27247 ];

	UOnlineCommunityContentInterface_execOnGetContentPayloadComplete_Parms OnGetContentPayloadComplete_Parms;
	OnGetContentPayloadComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnGetContentPayloadComplete_Parms.FileDownloaded, &FileDownloaded, 0x80 );

	this->ProcessEvent ( pFnOnGetContentPayloadComplete, &OnGetContentPayloadComplete_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &OnGetContentPayloadComplete_Parms.Payload, 0xC );
};

// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded )
{
	static UFunction* pFnGetContentPayload = NULL;

	if ( ! pFnGetContentPayload )
		pFnGetContentPayload = (UFunction*) UObject::GObjObjects()->Data[ 27243 ];

	UOnlineCommunityContentInterface_execGetContentPayload_Parms GetContentPayload_Parms;
	GetContentPayload_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentPayload, &GetContentPayload_Parms, NULL );

	if ( FileDownloaded )
		memcpy ( FileDownloaded, &GetContentPayload_Parms.FileDownloaded, 0x80 );

	return GetContentPayload_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnClearDownloadContentCompleteDelegate = NULL;

	if ( ! pFnClearDownloadContentCompleteDelegate )
		pFnClearDownloadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27241 ];

	UOnlineCommunityContentInterface_execClearDownloadContentCompleteDelegate_Parms ClearDownloadContentCompleteDelegate_Parms;
	memcpy ( &ClearDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDownloadContentCompleteDelegate, &ClearDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DownloadContentCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate )
{
	static UFunction* pFnAddDownloadContentCompleteDelegate = NULL;

	if ( ! pFnAddDownloadContentCompleteDelegate )
		pFnAddDownloadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27239 ];

	UOnlineCommunityContentInterface_execAddDownloadContentCompleteDelegate_Parms AddDownloadContentCompleteDelegate_Parms;
	memcpy ( &AddDownloadContentCompleteDelegate_Parms.DownloadContentCompleteDelegate, &DownloadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDownloadContentCompleteDelegate, &AddDownloadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   FileDownloaded                 ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        Payload                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, TArray< unsigned char > Payload )
{
	static UFunction* pFnOnDownloadContentComplete = NULL;

	if ( ! pFnOnDownloadContentComplete )
		pFnOnDownloadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 27234 ];

	UOnlineCommunityContentInterface_execOnDownloadContentComplete_Parms OnDownloadContentComplete_Parms;
	OnDownloadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDownloadContentComplete_Parms.FileDownloaded, &FileDownloaded, 0x80 );
	memcpy ( &OnDownloadContentComplete_Parms.Payload, &Payload, 0xC );

	this->ProcessEvent ( pFnOnDownloadContentComplete, &OnDownloadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.DownloadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FCommunityContentFile   FileToDownload                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload )
{
	static UFunction* pFnDownloadContent = NULL;

	if ( ! pFnDownloadContent )
		pFnDownloadContent = (UFunction*) UObject::GObjObjects()->Data[ 27230 ];

	UOnlineCommunityContentInterface_execDownloadContent_Parms DownloadContent_Parms;
	DownloadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnDownloadContent, &DownloadContent_Parms, NULL );

	if ( FileToDownload )
		memcpy ( FileToDownload, &DownloadContent_Parms.FileToDownload, 0x80 );

	return DownloadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnClearUploadContentCompleteDelegate = NULL;

	if ( ! pFnClearUploadContentCompleteDelegate )
		pFnClearUploadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27228 ];

	UOnlineCommunityContentInterface_execClearUploadContentCompleteDelegate_Parms ClearUploadContentCompleteDelegate_Parms;
	memcpy ( &ClearUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUploadContentCompleteDelegate, &ClearUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UploadContentCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate )
{
	static UFunction* pFnAddUploadContentCompleteDelegate = NULL;

	if ( ! pFnAddUploadContentCompleteDelegate )
		pFnAddUploadContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27226 ];

	UOnlineCommunityContentInterface_execAddUploadContentCompleteDelegate_Parms AddUploadContentCompleteDelegate_Parms;
	memcpy ( &AddUploadContentCompleteDelegate_Parms.UploadContentCompleteDelegate, &UploadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUploadContentCompleteDelegate, &AddUploadContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FCommunityContentFile   UploadedFile                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile )
{
	static UFunction* pFnOnUploadContentComplete = NULL;

	if ( ! pFnOnUploadContentComplete )
		pFnOnUploadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 27223 ];

	UOnlineCommunityContentInterface_execOnUploadContentComplete_Parms OnUploadContentComplete_Parms;
	OnUploadContentComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnUploadContentComplete_Parms.UploadedFile, &UploadedFile, 0x80 );

	this->ProcessEvent ( pFnOnUploadContentComplete, &OnUploadContentComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.UploadContent
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// TArray< unsigned char >        Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FCommunityContentMetadata MetaData                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::UploadContent ( unsigned char PlayerNum, TArray< unsigned char >* Payload, struct FCommunityContentMetadata* MetaData )
{
	static UFunction* pFnUploadContent = NULL;

	if ( ! pFnUploadContent )
		pFnUploadContent = (UFunction*) UObject::GObjObjects()->Data[ 27217 ];

	UOnlineCommunityContentInterface_execUploadContent_Parms UploadContent_Parms;
	UploadContent_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnUploadContent, &UploadContent_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &UploadContent_Parms.Payload, 0xC );

	if ( MetaData )
		memcpy ( MetaData, &UploadContent_Parms.MetaData, 0x28 );

	return UploadContent_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FOnlineFriend           Friend                         ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles )
{
	static UFunction* pFnGetFriendsContentList = NULL;

	if ( ! pFnGetFriendsContentList )
		pFnGetFriendsContentList = (UFunction*) UObject::GObjObjects()->Data[ 27211 ];

	UOnlineCommunityContentInterface_execGetFriendsContentList_Parms GetFriendsContentList_Parms;
	GetFriendsContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetFriendsContentList, &GetFriendsContentList_Parms, NULL );

	if ( Friend )
		memcpy ( Friend, &GetFriendsContentList_Parms.Friend, 0x78 );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetFriendsContentList_Parms.ContentFiles, 0xC );

	return GetFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnClearReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadFriendsContentListCompleteDelegate )
		pFnClearReadFriendsContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27209 ];

	UOnlineCommunityContentInterface_execClearReadFriendsContentListCompleteDelegate_Parms ClearReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadFriendsContentListCompleteDelegate, &ClearReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate )
{
	static UFunction* pFnAddReadFriendsContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadFriendsContentListCompleteDelegate )
		pFnAddReadFriendsContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27207 ];

	UOnlineCommunityContentInterface_execAddReadFriendsContentListCompleteDelegate_Parms AddReadFriendsContentListCompleteDelegate_Parms;
	memcpy ( &AddReadFriendsContentListCompleteDelegate_Parms.ReadFriendsContentListCompleteDelegate, &ReadFriendsContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadFriendsContentListCompleteDelegate, &AddReadFriendsContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadFriendsContentListComplete = NULL;

	if ( ! pFnOnReadFriendsContentListComplete )
		pFnOnReadFriendsContentListComplete = (UFunction*) UObject::GObjObjects()->Data[ 27205 ];

	UOnlineCommunityContentInterface_execOnReadFriendsContentListComplete_Parms OnReadFriendsContentListComplete_Parms;
	OnReadFriendsContentListComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadFriendsContentListComplete, &OnReadFriendsContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FOnlineFriend > Friends                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends )
{
	static UFunction* pFnReadFriendsContentList = NULL;

	if ( ! pFnReadFriendsContentList )
		pFnReadFriendsContentList = (UFunction*) UObject::GObjObjects()->Data[ 27198 ];

	UOnlineCommunityContentInterface_execReadFriendsContentList_Parms ReadFriendsContentList_Parms;
	ReadFriendsContentList_Parms.PlayerNum = PlayerNum;
	ReadFriendsContentList_Parms.StartAt = StartAt;
	ReadFriendsContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadFriendsContentList, &ReadFriendsContentList_Parms, NULL );

	if ( Friends )
		memcpy ( Friends, &ReadFriendsContentList_Parms.Friends, 0xC );

	return ReadFriendsContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineCommunityContentInterface::GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = (UFunction*) UObject::GObjObjects()->Data[ 27193 ];

	UOnlineCommunityContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.PlayerNum = PlayerNum;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentFiles )
		memcpy ( ContentFiles, &GetContentList_Parms.ContentFiles, 0xC );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnClearReadContentListCompleteDelegate = NULL;

	if ( ! pFnClearReadContentListCompleteDelegate )
		pFnClearReadContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27191 ];

	UOnlineCommunityContentInterface_execClearReadContentListCompleteDelegate_Parms ClearReadContentListCompleteDelegate_Parms;
	memcpy ( &ClearReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadContentListCompleteDelegate, &ClearReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadContentListCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate )
{
	static UFunction* pFnAddReadContentListCompleteDelegate = NULL;

	if ( ! pFnAddReadContentListCompleteDelegate )
		pFnAddReadContentListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27189 ];

	UOnlineCommunityContentInterface_execAddReadContentListCompleteDelegate_Parms AddReadContentListCompleteDelegate_Parms;
	memcpy ( &AddReadContentListCompleteDelegate_Parms.ReadContentListCompleteDelegate, &ReadContentListCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadContentListCompleteDelegate, &AddReadContentListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// TArray< struct FCommunityContentFile > ContentFiles                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineCommunityContentInterface::OnReadContentListComplete ( unsigned long bWasSuccessful, TArray< struct FCommunityContentFile > ContentFiles )
{
	static UFunction* pFnOnReadContentListComplete = NULL;

	if ( ! pFnOnReadContentListComplete )
		pFnOnReadContentListComplete = (UFunction*) UObject::GObjObjects()->Data[ 27185 ];

	UOnlineCommunityContentInterface_execOnReadContentListComplete_Parms OnReadContentListComplete_Parms;
	OnReadContentListComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadContentListComplete_Parms.ContentFiles, &ContentFiles, 0xC );

	this->ProcessEvent ( pFnOnReadContentListComplete, &OnReadContentListComplete_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.ReadContentList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FUniqueNetId            NetId                          ( CPF_Parm )
// struct FString                 Path                           ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            StartAt                        ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineCommunityContentInterface::ReadContentList ( unsigned char PlayerNum, struct FUniqueNetId NetId, struct FString Path, int StartAt, int NumToRead )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = (UFunction*) UObject::GObjObjects()->Data[ 27178 ];

	UOnlineCommunityContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.PlayerNum = PlayerNum;
	memcpy ( &ReadContentList_Parms.NetId, &NetId, 0x48 );
	memcpy ( &ReadContentList_Parms.Path, &Path, 0xC );
	ReadContentList_Parms.StartAt = StartAt;
	ReadContentList_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineCommunityContentInterface.Exit
// [0x00020000] 
// Parameters infos:

void UOnlineCommunityContentInterface::Exit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = (UFunction*) UObject::GObjObjects()->Data[ 27177 ];

	UOnlineCommunityContentInterface_execExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function Engine.OnlineCommunityContentInterface.Init
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineCommunityContentInterface::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 27175 ];

	UOnlineCommunityContentInterface_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	return Init_Parms.ReturnValue;
};

// Function Engine.OnlineGameDVRInterface.CancelRecordingEvent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineGameDVRInterface::CancelRecordingEvent ( unsigned char LocalUserNum, struct FString EventName )
{
	static UFunction* pFnCancelRecordingEvent = NULL;

	if ( ! pFnCancelRecordingEvent )
		pFnCancelRecordingEvent = (UFunction*) UObject::GObjObjects()->Data[ 27500 ];

	UOnlineGameDVRInterface_execCancelRecordingEvent_Parms CancelRecordingEvent_Parms;
	CancelRecordingEvent_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &CancelRecordingEvent_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnCancelRecordingEvent, &CancelRecordingEvent_Parms, NULL );

	return CancelRecordingEvent_Parms.ReturnValue;
};

// Function Engine.OnlineGameDVRInterface.RecordPreviousTimespan
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          Duration                       ( CPF_Parm )

bool UOnlineGameDVRInterface::RecordPreviousTimespan ( unsigned char LocalUserNum, struct FString EventName, float Duration )
{
	static UFunction* pFnRecordPreviousTimespan = NULL;

	if ( ! pFnRecordPreviousTimespan )
		pFnRecordPreviousTimespan = (UFunction*) UObject::GObjObjects()->Data[ 27495 ];

	UOnlineGameDVRInterface_execRecordPreviousTimespan_Parms RecordPreviousTimespan_Parms;
	RecordPreviousTimespan_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RecordPreviousTimespan_Parms.EventName, &EventName, 0xC );
	RecordPreviousTimespan_Parms.Duration = Duration;

	this->ProcessEvent ( pFnRecordPreviousTimespan, &RecordPreviousTimespan_Parms, NULL );

	return RecordPreviousTimespan_Parms.ReturnValue;
};

// Function Engine.OnlineGameDVRInterface.EndRecordingEvent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineGameDVRInterface::EndRecordingEvent ( unsigned char LocalUserNum, struct FString EventName )
{
	static UFunction* pFnEndRecordingEvent = NULL;

	if ( ! pFnEndRecordingEvent )
		pFnEndRecordingEvent = (UFunction*) UObject::GObjObjects()->Data[ 27491 ];

	UOnlineGameDVRInterface_execEndRecordingEvent_Parms EndRecordingEvent_Parms;
	EndRecordingEvent_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &EndRecordingEvent_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnEndRecordingEvent, &EndRecordingEvent_Parms, NULL );

	return EndRecordingEvent_Parms.ReturnValue;
};

// Function Engine.OnlineGameDVRInterface.ClearRecordEventCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecordEventCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameDVRInterface::ClearRecordEventCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecordEventCompleteDelegate )
{
	static UFunction* pFnClearRecordEventCompleteDelegate = NULL;

	if ( ! pFnClearRecordEventCompleteDelegate )
		pFnClearRecordEventCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27488 ];

	UOnlineGameDVRInterface_execClearRecordEventCompleteDelegate_Parms ClearRecordEventCompleteDelegate_Parms;
	ClearRecordEventCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearRecordEventCompleteDelegate_Parms.RecordEventCompleteDelegate, &RecordEventCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRecordEventCompleteDelegate, &ClearRecordEventCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.AddRecordEventCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecordEventCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameDVRInterface::AddRecordEventCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecordEventCompleteDelegate )
{
	static UFunction* pFnAddRecordEventCompleteDelegate = NULL;

	if ( ! pFnAddRecordEventCompleteDelegate )
		pFnAddRecordEventCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27485 ];

	UOnlineGameDVRInterface_execAddRecordEventCompleteDelegate_Parms AddRecordEventCompleteDelegate_Parms;
	AddRecordEventCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddRecordEventCompleteDelegate_Parms.RecordEventCompleteDelegate, &RecordEventCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRecordEventCompleteDelegate, &AddRecordEventCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.OnRecordEventComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameDVRInterface::OnRecordEventComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, struct FString EventName )
{
	static UFunction* pFnOnRecordEventComplete = NULL;

	if ( ! pFnOnRecordEventComplete )
		pFnOnRecordEventComplete = (UFunction*) UObject::GObjObjects()->Data[ 27481 ];

	UOnlineGameDVRInterface_execOnRecordEventComplete_Parms OnRecordEventComplete_Parms;
	OnRecordEventComplete_Parms.bWasSuccessful = bWasSuccessful;
	OnRecordEventComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OnRecordEventComplete_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnOnRecordEventComplete, &OnRecordEventComplete_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.BeginRecordingEvent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 EventName                      ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineGameDVRInterface::BeginRecordingEvent ( unsigned char LocalUserNum, struct FString EventName )
{
	static UFunction* pFnBeginRecordingEvent = NULL;

	if ( ! pFnBeginRecordingEvent )
		pFnBeginRecordingEvent = (UFunction*) UObject::GObjObjects()->Data[ 27477 ];

	UOnlineGameDVRInterface_execBeginRecordingEvent_Parms BeginRecordingEvent_Parms;
	BeginRecordingEvent_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &BeginRecordingEvent_Parms.EventName, &EventName, 0xC );

	this->ProcessEvent ( pFnBeginRecordingEvent, &BeginRecordingEvent_Parms, NULL );

	return BeginRecordingEvent_Parms.ReturnValue;
};

// Function Engine.OnlineGameDVRInterface.ClearReadRecordedClipsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadRecordedClipsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameDVRInterface::ClearReadRecordedClipsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadRecordedClipsCompleteDelegate )
{
	static UFunction* pFnClearReadRecordedClipsCompleteDelegate = NULL;

	if ( ! pFnClearReadRecordedClipsCompleteDelegate )
		pFnClearReadRecordedClipsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27474 ];

	UOnlineGameDVRInterface_execClearReadRecordedClipsCompleteDelegate_Parms ClearReadRecordedClipsCompleteDelegate_Parms;
	ClearReadRecordedClipsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadRecordedClipsCompleteDelegate_Parms.ReadRecordedClipsCompleteDelegate, &ReadRecordedClipsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadRecordedClipsCompleteDelegate, &ClearReadRecordedClipsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.AddReadRecordedClipsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadRecordedClipsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameDVRInterface::AddReadRecordedClipsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadRecordedClipsCompleteDelegate )
{
	static UFunction* pFnAddReadRecordedClipsCompleteDelegate = NULL;

	if ( ! pFnAddReadRecordedClipsCompleteDelegate )
		pFnAddReadRecordedClipsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27471 ];

	UOnlineGameDVRInterface_execAddReadRecordedClipsCompleteDelegate_Parms AddReadRecordedClipsCompleteDelegate_Parms;
	AddReadRecordedClipsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadRecordedClipsCompleteDelegate_Parms.ReadRecordedClipsCompleteDelegate, &ReadRecordedClipsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadRecordedClipsCompleteDelegate, &AddReadRecordedClipsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.ClearCachedRecordedClips
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineGameDVRInterface::ClearCachedRecordedClips ( unsigned char LocalUserNum )
{
	static UFunction* pFnClearCachedRecordedClips = NULL;

	if ( ! pFnClearCachedRecordedClips )
		pFnClearCachedRecordedClips = (UFunction*) UObject::GObjObjects()->Data[ 27469 ];

	UOnlineGameDVRInterface_execClearCachedRecordedClips_Parms ClearCachedRecordedClips_Parms;
	ClearCachedRecordedClips_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearCachedRecordedClips, &ClearCachedRecordedClips_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.OnReadRecordedClipsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineGameDVRInterface::OnReadRecordedClipsComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum )
{
	static UFunction* pFnOnReadRecordedClipsComplete = NULL;

	if ( ! pFnOnReadRecordedClipsComplete )
		pFnOnReadRecordedClipsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27466 ];

	UOnlineGameDVRInterface_execOnReadRecordedClipsComplete_Parms OnReadRecordedClipsComplete_Parms;
	OnReadRecordedClipsComplete_Parms.bWasSuccessful = bWasSuccessful;
	OnReadRecordedClipsComplete_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnReadRecordedClipsComplete, &OnReadRecordedClipsComplete_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.ReadRecordedClips
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineGameDVRInterface::ReadRecordedClips ( unsigned char LocalUserNum )
{
	static UFunction* pFnReadRecordedClips = NULL;

	if ( ! pFnReadRecordedClips )
		pFnReadRecordedClips = (UFunction*) UObject::GObjObjects()->Data[ 27463 ];

	UOnlineGameDVRInterface_execReadRecordedClips_Parms ReadRecordedClips_Parms;
	ReadRecordedClips_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnReadRecordedClips, &ReadRecordedClips_Parms, NULL );

	return ReadRecordedClips_Parms.ReturnValue;
};

// Function Engine.OnlineGameDVRInterface.DisableRecording
// [0x00020000] 
// Parameters infos:

void UOnlineGameDVRInterface::DisableRecording ( )
{
	static UFunction* pFnDisableRecording = NULL;

	if ( ! pFnDisableRecording )
		pFnDisableRecording = (UFunction*) UObject::GObjObjects()->Data[ 27462 ];

	UOnlineGameDVRInterface_execDisableRecording_Parms DisableRecording_Parms;

	this->ProcessEvent ( pFnDisableRecording, &DisableRecording_Parms, NULL );
};

// Function Engine.OnlineGameDVRInterface.EnableRecording
// [0x00020000] 
// Parameters infos:

void UOnlineGameDVRInterface::EnableRecording ( )
{
	static UFunction* pFnEnableRecording = NULL;

	if ( ! pFnEnableRecording )
		pFnEnableRecording = (UFunction*) UObject::GObjObjects()->Data[ 27461 ];

	UOnlineGameDVRInterface_execEnableRecording_Parms EnableRecording_Parms;

	this->ProcessEvent ( pFnEnableRecording, &EnableRecording_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.ClearWriteSharedFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         WriteSharedFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void USharedCloudFileInterface::ClearWriteSharedFileCompleteDelegate ( struct FScriptDelegate WriteSharedFileCompleteDelegate )
{
	static UFunction* pFnClearWriteSharedFileCompleteDelegate = NULL;

	if ( ! pFnClearWriteSharedFileCompleteDelegate )
		pFnClearWriteSharedFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 33240 ];

	USharedCloudFileInterface_execClearWriteSharedFileCompleteDelegate_Parms ClearWriteSharedFileCompleteDelegate_Parms;
	memcpy ( &ClearWriteSharedFileCompleteDelegate_Parms.WriteSharedFileCompleteDelegate, &WriteSharedFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWriteSharedFileCompleteDelegate, &ClearWriteSharedFileCompleteDelegate_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.AddWriteSharedFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         WriteSharedFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void USharedCloudFileInterface::AddWriteSharedFileCompleteDelegate ( struct FScriptDelegate WriteSharedFileCompleteDelegate )
{
	static UFunction* pFnAddWriteSharedFileCompleteDelegate = NULL;

	if ( ! pFnAddWriteSharedFileCompleteDelegate )
		pFnAddWriteSharedFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 33238 ];

	USharedCloudFileInterface_execAddWriteSharedFileCompleteDelegate_Parms AddWriteSharedFileCompleteDelegate_Parms;
	memcpy ( &AddWriteSharedFileCompleteDelegate_Parms.WriteSharedFileCompleteDelegate, &WriteSharedFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWriteSharedFileCompleteDelegate, &AddWriteSharedFileCompleteDelegate_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.WriteSharedFile
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        Contents                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USharedCloudFileInterface::WriteSharedFile ( struct FString UserId, struct FString Filename, TArray< unsigned char >* Contents )
{
	static UFunction* pFnWriteSharedFile = NULL;

	if ( ! pFnWriteSharedFile )
		pFnWriteSharedFile = (UFunction*) UObject::GObjObjects()->Data[ 33232 ];

	USharedCloudFileInterface_execWriteSharedFile_Parms WriteSharedFile_Parms;
	memcpy ( &WriteSharedFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &WriteSharedFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnWriteSharedFile, &WriteSharedFile_Parms, NULL );

	if ( Contents )
		memcpy ( Contents, &WriteSharedFile_Parms.Contents, 0xC );

	return WriteSharedFile_Parms.ReturnValue;
};

// Function Engine.SharedCloudFileInterface.OnWriteSharedFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SharedHandle                   ( CPF_Parm | CPF_NeedCtorLink )

void USharedCloudFileInterface::OnWriteSharedFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename, struct FString SharedHandle )
{
	static UFunction* pFnOnWriteSharedFileComplete = NULL;

	if ( ! pFnOnWriteSharedFileComplete )
		pFnOnWriteSharedFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 33227 ];

	USharedCloudFileInterface_execOnWriteSharedFileComplete_Parms OnWriteSharedFileComplete_Parms;
	OnWriteSharedFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnWriteSharedFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnWriteSharedFileComplete_Parms.Filename, &Filename, 0xC );
	memcpy ( &OnWriteSharedFileComplete_Parms.SharedHandle, &SharedHandle, 0xC );

	this->ProcessEvent ( pFnOnWriteSharedFileComplete, &OnWriteSharedFileComplete_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.ClearReadSharedFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadSharedFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void USharedCloudFileInterface::ClearReadSharedFileCompleteDelegate ( struct FScriptDelegate ReadSharedFileCompleteDelegate )
{
	static UFunction* pFnClearReadSharedFileCompleteDelegate = NULL;

	if ( ! pFnClearReadSharedFileCompleteDelegate )
		pFnClearReadSharedFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 33225 ];

	USharedCloudFileInterface_execClearReadSharedFileCompleteDelegate_Parms ClearReadSharedFileCompleteDelegate_Parms;
	memcpy ( &ClearReadSharedFileCompleteDelegate_Parms.ReadSharedFileCompleteDelegate, &ReadSharedFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadSharedFileCompleteDelegate, &ClearReadSharedFileCompleteDelegate_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.AddReadSharedFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadSharedFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void USharedCloudFileInterface::AddReadSharedFileCompleteDelegate ( struct FScriptDelegate ReadSharedFileCompleteDelegate )
{
	static UFunction* pFnAddReadSharedFileCompleteDelegate = NULL;

	if ( ! pFnAddReadSharedFileCompleteDelegate )
		pFnAddReadSharedFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 33223 ];

	USharedCloudFileInterface_execAddReadSharedFileCompleteDelegate_Parms AddReadSharedFileCompleteDelegate_Parms;
	memcpy ( &AddReadSharedFileCompleteDelegate_Parms.ReadSharedFileCompleteDelegate, &ReadSharedFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadSharedFileCompleteDelegate, &AddReadSharedFileCompleteDelegate_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.ReadSharedFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 SharedHandle                   ( CPF_Parm | CPF_NeedCtorLink )

bool USharedCloudFileInterface::ReadSharedFile ( struct FString SharedHandle )
{
	static UFunction* pFnReadSharedFile = NULL;

	if ( ! pFnReadSharedFile )
		pFnReadSharedFile = (UFunction*) UObject::GObjObjects()->Data[ 33220 ];

	USharedCloudFileInterface_execReadSharedFile_Parms ReadSharedFile_Parms;
	memcpy ( &ReadSharedFile_Parms.SharedHandle, &SharedHandle, 0xC );

	this->ProcessEvent ( pFnReadSharedFile, &ReadSharedFile_Parms, NULL );

	return ReadSharedFile_Parms.ReturnValue;
};

// Function Engine.SharedCloudFileInterface.OnReadSharedFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 SharedHandle                   ( CPF_Parm | CPF_NeedCtorLink )

void USharedCloudFileInterface::OnReadSharedFileComplete ( unsigned long bWasSuccessful, struct FString SharedHandle )
{
	static UFunction* pFnOnReadSharedFileComplete = NULL;

	if ( ! pFnOnReadSharedFileComplete )
		pFnOnReadSharedFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 33217 ];

	USharedCloudFileInterface_execOnReadSharedFileComplete_Parms OnReadSharedFileComplete_Parms;
	OnReadSharedFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadSharedFileComplete_Parms.SharedHandle, &SharedHandle, 0xC );

	this->ProcessEvent ( pFnOnReadSharedFileComplete, &OnReadSharedFileComplete_Parms, NULL );
};

// Function Engine.SharedCloudFileInterface.ClearSharedFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 SharedHandle                   ( CPF_Parm | CPF_NeedCtorLink )

bool USharedCloudFileInterface::ClearSharedFile ( struct FString SharedHandle )
{
	static UFunction* pFnClearSharedFile = NULL;

	if ( ! pFnClearSharedFile )
		pFnClearSharedFile = (UFunction*) UObject::GObjObjects()->Data[ 33214 ];

	USharedCloudFileInterface_execClearSharedFile_Parms ClearSharedFile_Parms;
	memcpy ( &ClearSharedFile_Parms.SharedHandle, &SharedHandle, 0xC );

	this->ProcessEvent ( pFnClearSharedFile, &ClearSharedFile_Parms, NULL );

	return ClearSharedFile_Parms.ReturnValue;
};

// Function Engine.SharedCloudFileInterface.ClearSharedFiles
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USharedCloudFileInterface::ClearSharedFiles ( )
{
	static UFunction* pFnClearSharedFiles = NULL;

	if ( ! pFnClearSharedFiles )
		pFnClearSharedFiles = (UFunction*) UObject::GObjObjects()->Data[ 33212 ];

	USharedCloudFileInterface_execClearSharedFiles_Parms ClearSharedFiles_Parms;

	this->ProcessEvent ( pFnClearSharedFiles, &ClearSharedFiles_Parms, NULL );

	return ClearSharedFiles_Parms.ReturnValue;
};

// Function Engine.SharedCloudFileInterface.GetSharedFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 SharedHandle                   ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USharedCloudFileInterface::GetSharedFileContents ( struct FString SharedHandle, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnGetSharedFileContents = NULL;

	if ( ! pFnGetSharedFileContents )
		pFnGetSharedFileContents = (UFunction*) UObject::GObjObjects()->Data[ 33207 ];

	USharedCloudFileInterface_execGetSharedFileContents_Parms GetSharedFileContents_Parms;
	memcpy ( &GetSharedFileContents_Parms.SharedHandle, &SharedHandle, 0xC );

	this->ProcessEvent ( pFnGetSharedFileContents, &GetSharedFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetSharedFileContents_Parms.FileContents, 0xC );

	return GetSharedFileContents_Parms.ReturnValue;
};

// Function Engine.UserCloudFileInterface.ClearAllDelegates
// [0x00020000] 
// Parameters infos:

void UUserCloudFileInterface::ClearAllDelegates ( )
{
	static UFunction* pFnClearAllDelegates = NULL;

	if ( ! pFnClearAllDelegates )
		pFnClearAllDelegates = (UFunction*) UObject::GObjObjects()->Data[ 36173 ];

	UUserCloudFileInterface_execClearAllDelegates_Parms ClearAllDelegates_Parms;

	this->ProcessEvent ( pFnClearAllDelegates, &ClearAllDelegates_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.ClearDeleteUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DeleteUserFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::ClearDeleteUserFileCompleteDelegate ( struct FScriptDelegate DeleteUserFileCompleteDelegate )
{
	static UFunction* pFnClearDeleteUserFileCompleteDelegate = NULL;

	if ( ! pFnClearDeleteUserFileCompleteDelegate )
		pFnClearDeleteUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36171 ];

	UUserCloudFileInterface_execClearDeleteUserFileCompleteDelegate_Parms ClearDeleteUserFileCompleteDelegate_Parms;
	memcpy ( &ClearDeleteUserFileCompleteDelegate_Parms.DeleteUserFileCompleteDelegate, &DeleteUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDeleteUserFileCompleteDelegate, &ClearDeleteUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.AddDeleteUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DeleteUserFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::AddDeleteUserFileCompleteDelegate ( struct FScriptDelegate DeleteUserFileCompleteDelegate )
{
	static UFunction* pFnAddDeleteUserFileCompleteDelegate = NULL;

	if ( ! pFnAddDeleteUserFileCompleteDelegate )
		pFnAddDeleteUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36169 ];

	UUserCloudFileInterface_execAddDeleteUserFileCompleteDelegate_Parms AddDeleteUserFileCompleteDelegate_Parms;
	memcpy ( &AddDeleteUserFileCompleteDelegate_Parms.DeleteUserFileCompleteDelegate, &DeleteUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDeleteUserFileCompleteDelegate, &AddDeleteUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.DeleteUserFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bShouldCloudDelete             ( CPF_Parm )
// unsigned long                  bShouldLocallyDelete           ( CPF_Parm )

bool UUserCloudFileInterface::DeleteUserFile ( struct FString UserId, struct FString Filename, unsigned long bShouldCloudDelete, unsigned long bShouldLocallyDelete )
{
	static UFunction* pFnDeleteUserFile = NULL;

	if ( ! pFnDeleteUserFile )
		pFnDeleteUserFile = (UFunction*) UObject::GObjObjects()->Data[ 16621 ];

	UUserCloudFileInterface_execDeleteUserFile_Parms DeleteUserFile_Parms;
	memcpy ( &DeleteUserFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &DeleteUserFile_Parms.Filename, &Filename, 0xC );
	DeleteUserFile_Parms.bShouldCloudDelete = bShouldCloudDelete;
	DeleteUserFile_Parms.bShouldLocallyDelete = bShouldLocallyDelete;

	this->ProcessEvent ( pFnDeleteUserFile, &DeleteUserFile_Parms, NULL );

	return DeleteUserFile_Parms.ReturnValue;
};

// Function Engine.UserCloudFileInterface.OnDeleteUserFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::OnDeleteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnDeleteUserFileComplete = NULL;

	if ( ! pFnOnDeleteUserFileComplete )
		pFnOnDeleteUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 36161 ];

	UUserCloudFileInterface_execOnDeleteUserFileComplete_Parms OnDeleteUserFileComplete_Parms;
	OnDeleteUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDeleteUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnDeleteUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnDeleteUserFileComplete, &OnDeleteUserFileComplete_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.ClearWriteUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         WriteUserFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::ClearWriteUserFileCompleteDelegate ( struct FScriptDelegate WriteUserFileCompleteDelegate )
{
	static UFunction* pFnClearWriteUserFileCompleteDelegate = NULL;

	if ( ! pFnClearWriteUserFileCompleteDelegate )
		pFnClearWriteUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36159 ];

	UUserCloudFileInterface_execClearWriteUserFileCompleteDelegate_Parms ClearWriteUserFileCompleteDelegate_Parms;
	memcpy ( &ClearWriteUserFileCompleteDelegate_Parms.WriteUserFileCompleteDelegate, &WriteUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWriteUserFileCompleteDelegate, &ClearWriteUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.AddWriteUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         WriteUserFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::AddWriteUserFileCompleteDelegate ( struct FScriptDelegate WriteUserFileCompleteDelegate )
{
	static UFunction* pFnAddWriteUserFileCompleteDelegate = NULL;

	if ( ! pFnAddWriteUserFileCompleteDelegate )
		pFnAddWriteUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36157 ];

	UUserCloudFileInterface_execAddWriteUserFileCompleteDelegate_Parms AddWriteUserFileCompleteDelegate_Parms;
	memcpy ( &AddWriteUserFileCompleteDelegate_Parms.WriteUserFileCompleteDelegate, &WriteUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWriteUserFileCompleteDelegate, &AddWriteUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.WriteUserFile
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUserCloudFileInterface::WriteUserFile ( struct FString UserId, struct FString Filename, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnWriteUserFile = NULL;

	if ( ! pFnWriteUserFile )
		pFnWriteUserFile = (UFunction*) UObject::GObjObjects()->Data[ 16599 ];

	UUserCloudFileInterface_execWriteUserFile_Parms WriteUserFile_Parms;
	memcpy ( &WriteUserFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &WriteUserFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnWriteUserFile, &WriteUserFile_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &WriteUserFile_Parms.FileContents, 0xC );

	return WriteUserFile_Parms.ReturnValue;
};

// Function Engine.UserCloudFileInterface.OnWriteUserFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::OnWriteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnWriteUserFileComplete = NULL;

	if ( ! pFnOnWriteUserFileComplete )
		pFnOnWriteUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 36149 ];

	UUserCloudFileInterface_execOnWriteUserFileComplete_Parms OnWriteUserFileComplete_Parms;
	OnWriteUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnWriteUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnWriteUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnWriteUserFileComplete, &OnWriteUserFileComplete_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.ClearReadUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadUserFileCompleteDelegate   ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::ClearReadUserFileCompleteDelegate ( struct FScriptDelegate ReadUserFileCompleteDelegate )
{
	static UFunction* pFnClearReadUserFileCompleteDelegate = NULL;

	if ( ! pFnClearReadUserFileCompleteDelegate )
		pFnClearReadUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36147 ];

	UUserCloudFileInterface_execClearReadUserFileCompleteDelegate_Parms ClearReadUserFileCompleteDelegate_Parms;
	memcpy ( &ClearReadUserFileCompleteDelegate_Parms.ReadUserFileCompleteDelegate, &ReadUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadUserFileCompleteDelegate, &ClearReadUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.AddReadUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadUserFileCompleteDelegate   ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::AddReadUserFileCompleteDelegate ( struct FScriptDelegate ReadUserFileCompleteDelegate )
{
	static UFunction* pFnAddReadUserFileCompleteDelegate = NULL;

	if ( ! pFnAddReadUserFileCompleteDelegate )
		pFnAddReadUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36145 ];

	UUserCloudFileInterface_execAddReadUserFileCompleteDelegate_Parms AddReadUserFileCompleteDelegate_Parms;
	memcpy ( &AddReadUserFileCompleteDelegate_Parms.ReadUserFileCompleteDelegate, &ReadUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadUserFileCompleteDelegate, &AddReadUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.ReadUserFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UUserCloudFileInterface::ReadUserFile ( struct FString UserId, struct FString Filename )
{
	static UFunction* pFnReadUserFile = NULL;

	if ( ! pFnReadUserFile )
		pFnReadUserFile = (UFunction*) UObject::GObjObjects()->Data[ 16608 ];

	UUserCloudFileInterface_execReadUserFile_Parms ReadUserFile_Parms;
	memcpy ( &ReadUserFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &ReadUserFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnReadUserFile, &ReadUserFile_Parms, NULL );

	return ReadUserFile_Parms.ReturnValue;
};

// Function Engine.UserCloudFileInterface.OnReadUserFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::OnReadUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnReadUserFileComplete = NULL;

	if ( ! pFnOnReadUserFileComplete )
		pFnOnReadUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 36139 ];

	UUserCloudFileInterface_execOnReadUserFileComplete_Parms OnReadUserFileComplete_Parms;
	OnReadUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnReadUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadUserFileComplete, &OnReadUserFileComplete_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.GetUserFileList
// [0x00420000] 
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FEmsFile >      UserFiles                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUserCloudFileInterface::GetUserFileList ( struct FString UserId, TArray< struct FEmsFile >* UserFiles )
{
	static UFunction* pFnGetUserFileList = NULL;

	if ( ! pFnGetUserFileList )
		pFnGetUserFileList = (UFunction*) UObject::GObjObjects()->Data[ 36135 ];

	UUserCloudFileInterface_execGetUserFileList_Parms GetUserFileList_Parms;
	memcpy ( &GetUserFileList_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnGetUserFileList, &GetUserFileList_Parms, NULL );

	if ( UserFiles )
		memcpy ( UserFiles, &GetUserFileList_Parms.UserFiles, 0xC );
};

// Function Engine.UserCloudFileInterface.ClearEnumerateUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EnumerateUserFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::ClearEnumerateUserFileCompleteDelegate ( struct FScriptDelegate EnumerateUserFileCompleteDelegate )
{
	static UFunction* pFnClearEnumerateUserFileCompleteDelegate = NULL;

	if ( ! pFnClearEnumerateUserFileCompleteDelegate )
		pFnClearEnumerateUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36133 ];

	UUserCloudFileInterface_execClearEnumerateUserFileCompleteDelegate_Parms ClearEnumerateUserFileCompleteDelegate_Parms;
	memcpy ( &ClearEnumerateUserFileCompleteDelegate_Parms.EnumerateUserFileCompleteDelegate, &EnumerateUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearEnumerateUserFileCompleteDelegate, &ClearEnumerateUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.AddEnumerateUserFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EnumerateUserFileCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::AddEnumerateUserFileCompleteDelegate ( struct FScriptDelegate EnumerateUserFileCompleteDelegate )
{
	static UFunction* pFnAddEnumerateUserFileCompleteDelegate = NULL;

	if ( ! pFnAddEnumerateUserFileCompleteDelegate )
		pFnAddEnumerateUserFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36131 ];

	UUserCloudFileInterface_execAddEnumerateUserFileCompleteDelegate_Parms AddEnumerateUserFileCompleteDelegate_Parms;
	memcpy ( &AddEnumerateUserFileCompleteDelegate_Parms.EnumerateUserFileCompleteDelegate, &EnumerateUserFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddEnumerateUserFileCompleteDelegate, &AddEnumerateUserFileCompleteDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.EnumerateUserFiles
// [0x00020000] 
// Parameters infos:
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::EnumerateUserFiles ( struct FString UserId )
{
	static UFunction* pFnEnumerateUserFiles = NULL;

	if ( ! pFnEnumerateUserFiles )
		pFnEnumerateUserFiles = (UFunction*) UObject::GObjObjects()->Data[ 36129 ];

	UUserCloudFileInterface_execEnumerateUserFiles_Parms EnumerateUserFiles_Parms;
	memcpy ( &EnumerateUserFiles_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnEnumerateUserFiles, &EnumerateUserFiles_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.OnEnumerateUserFilesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileInterface::OnEnumerateUserFilesComplete ( unsigned long bWasSuccessful, struct FString UserId )
{
	static UFunction* pFnOnEnumerateUserFilesComplete = NULL;

	if ( ! pFnOnEnumerateUserFilesComplete )
		pFnOnEnumerateUserFilesComplete = (UFunction*) UObject::GObjObjects()->Data[ 36126 ];

	UUserCloudFileInterface_execOnEnumerateUserFilesComplete_Parms OnEnumerateUserFilesComplete_Parms;
	OnEnumerateUserFilesComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnEnumerateUserFilesComplete_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnOnEnumerateUserFilesComplete, &OnEnumerateUserFilesComplete_Parms, NULL );
};

// Function Engine.UserCloudFileInterface.ClearFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UUserCloudFileInterface::ClearFile ( struct FString UserId, struct FString Filename )
{
	static UFunction* pFnClearFile = NULL;

	if ( ! pFnClearFile )
		pFnClearFile = (UFunction*) UObject::GObjObjects()->Data[ 36122 ];

	UUserCloudFileInterface_execClearFile_Parms ClearFile_Parms;
	memcpy ( &ClearFile_Parms.UserId, &UserId, 0xC );
	memcpy ( &ClearFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnClearFile, &ClearFile_Parms, NULL );

	return ClearFile_Parms.ReturnValue;
};

// Function Engine.UserCloudFileInterface.ClearFiles
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )

bool UUserCloudFileInterface::ClearFiles ( struct FString UserId )
{
	static UFunction* pFnClearFiles = NULL;

	if ( ! pFnClearFiles )
		pFnClearFiles = (UFunction*) UObject::GObjObjects()->Data[ 36119 ];

	UUserCloudFileInterface_execClearFiles_Parms ClearFiles_Parms;
	memcpy ( &ClearFiles_Parms.UserId, &UserId, 0xC );

	this->ProcessEvent ( pFnClearFiles, &ClearFiles_Parms, NULL );

	return ClearFiles_Parms.ReturnValue;
};

// Function Engine.UserCloudFileInterface.GetFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UUserCloudFileInterface::GetFileContents ( struct FString UserId, struct FString Filename, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnGetFileContents = NULL;

	if ( ! pFnGetFileContents )
		pFnGetFileContents = (UFunction*) UObject::GObjObjects()->Data[ 16616 ];

	UUserCloudFileInterface_execGetFileContents_Parms GetFileContents_Parms;
	memcpy ( &GetFileContents_Parms.UserId, &UserId, 0xC );
	memcpy ( &GetFileContents_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetFileContents, &GetFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetFileContents_Parms.FileContents, 0xC );

	return GetFileContents_Parms.ReturnValue;
};

// Function Engine.OnlineSocialInterface.ClearPostLinkCompleted
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PostLinkDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSocialInterface::ClearPostLinkCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostLinkDelegate )
{
	static UFunction* pFnClearPostLinkCompleted = NULL;

	if ( ! pFnClearPostLinkCompleted )
		pFnClearPostLinkCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29103 ];

	UOnlineSocialInterface_execClearPostLinkCompleted_Parms ClearPostLinkCompleted_Parms;
	ClearPostLinkCompleted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearPostLinkCompleted_Parms.PostLinkDelegate, &PostLinkDelegate, 0x10 );

	this->ProcessEvent ( pFnClearPostLinkCompleted, &ClearPostLinkCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.AddPostLinkCompleted
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PostLinkDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSocialInterface::AddPostLinkCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostLinkDelegate )
{
	static UFunction* pFnAddPostLinkCompleted = NULL;

	if ( ! pFnAddPostLinkCompleted )
		pFnAddPostLinkCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29100 ];

	UOnlineSocialInterface_execAddPostLinkCompleted_Parms AddPostLinkCompleted_Parms;
	AddPostLinkCompleted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddPostLinkCompleted_Parms.PostLinkDelegate, &PostLinkDelegate, 0x10 );

	this->ProcessEvent ( pFnAddPostLinkCompleted, &AddPostLinkCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.OnPostLinkCompleted
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineSocialInterface::OnPostLinkCompleted ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnPostLinkCompleted = NULL;

	if ( ! pFnOnPostLinkCompleted )
		pFnOnPostLinkCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29097 ];

	UOnlineSocialInterface_execOnPostLinkCompleted_Parms OnPostLinkCompleted_Parms;
	OnPostLinkCompleted_Parms.LocalUserNum = LocalUserNum;
	OnPostLinkCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnPostLinkCompleted, &OnPostLinkCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.PostLink
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FSocialPostLinkInfo     PostLinkInfo                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineSocialInterface::PostLink ( unsigned char LocalUserNum, struct FSocialPostLinkInfo* PostLinkInfo )
{
	static UFunction* pFnPostLink = NULL;

	if ( ! pFnPostLink )
		pFnPostLink = (UFunction*) UObject::GObjObjects()->Data[ 29093 ];

	UOnlineSocialInterface_execPostLink_Parms PostLink_Parms;
	PostLink_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnPostLink, &PostLink_Parms, NULL );

	if ( PostLinkInfo )
		memcpy ( PostLinkInfo, &PostLink_Parms.PostLinkInfo, 0x4C );

	return PostLink_Parms.ReturnValue;
};

// Function Engine.OnlineSocialInterface.ClearPostImageCompleted
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PostImageDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSocialInterface::ClearPostImageCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostImageDelegate )
{
	static UFunction* pFnClearPostImageCompleted = NULL;

	if ( ! pFnClearPostImageCompleted )
		pFnClearPostImageCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29090 ];

	UOnlineSocialInterface_execClearPostImageCompleted_Parms ClearPostImageCompleted_Parms;
	ClearPostImageCompleted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearPostImageCompleted_Parms.PostImageDelegate, &PostImageDelegate, 0x10 );

	this->ProcessEvent ( pFnClearPostImageCompleted, &ClearPostImageCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.AddPostImageCompleted
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PostImageDelegate              ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSocialInterface::AddPostImageCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostImageDelegate )
{
	static UFunction* pFnAddPostImageCompleted = NULL;

	if ( ! pFnAddPostImageCompleted )
		pFnAddPostImageCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29087 ];

	UOnlineSocialInterface_execAddPostImageCompleted_Parms AddPostImageCompleted_Parms;
	AddPostImageCompleted_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddPostImageCompleted_Parms.PostImageDelegate, &PostImageDelegate, 0x10 );

	this->ProcessEvent ( pFnAddPostImageCompleted, &AddPostImageCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.OnPostImageCompleted
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineSocialInterface::OnPostImageCompleted ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnPostImageCompleted = NULL;

	if ( ! pFnOnPostImageCompleted )
		pFnOnPostImageCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29084 ];

	UOnlineSocialInterface_execOnPostImageCompleted_Parms OnPostImageCompleted_Parms;
	OnPostImageCompleted_Parms.LocalUserNum = LocalUserNum;
	OnPostImageCompleted_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnPostImageCompleted, &OnPostImageCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.PostImage
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< unsigned char >        FullImage                      ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FSocialPostImageInfo    PostImageInfo                  ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineSocialInterface::PostImage ( unsigned char LocalUserNum, TArray< unsigned char > FullImage, struct FSocialPostImageInfo* PostImageInfo )
{
	static UFunction* pFnPostImage = NULL;

	if ( ! pFnPostImage )
		pFnPostImage = (UFunction*) UObject::GObjObjects()->Data[ 29078 ];

	UOnlineSocialInterface_execPostImage_Parms PostImage_Parms;
	PostImage_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &PostImage_Parms.FullImage, &FullImage, 0xC );

	this->ProcessEvent ( pFnPostImage, &PostImage_Parms, NULL );

	if ( PostImageInfo )
		memcpy ( PostImageInfo, &PostImage_Parms.PostImageInfo, 0x34 );

	return PostImage_Parms.ReturnValue;
};

// Function Engine.OnlineSocialInterface.ClearQuerySocialPostPrivilegesCompleted
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         PostPrivilegesDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSocialInterface::ClearQuerySocialPostPrivilegesCompleted ( struct FScriptDelegate PostPrivilegesDelegate )
{
	static UFunction* pFnClearQuerySocialPostPrivilegesCompleted = NULL;

	if ( ! pFnClearQuerySocialPostPrivilegesCompleted )
		pFnClearQuerySocialPostPrivilegesCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29076 ];

	UOnlineSocialInterface_execClearQuerySocialPostPrivilegesCompleted_Parms ClearQuerySocialPostPrivilegesCompleted_Parms;
	memcpy ( &ClearQuerySocialPostPrivilegesCompleted_Parms.PostPrivilegesDelegate, &PostPrivilegesDelegate, 0x10 );

	this->ProcessEvent ( pFnClearQuerySocialPostPrivilegesCompleted, &ClearQuerySocialPostPrivilegesCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.AddQuerySocialPostPrivilegesCompleted
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         PostPrivilegesDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSocialInterface::AddQuerySocialPostPrivilegesCompleted ( struct FScriptDelegate PostPrivilegesDelegate )
{
	static UFunction* pFnAddQuerySocialPostPrivilegesCompleted = NULL;

	if ( ! pFnAddQuerySocialPostPrivilegesCompleted )
		pFnAddQuerySocialPostPrivilegesCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29074 ];

	UOnlineSocialInterface_execAddQuerySocialPostPrivilegesCompleted_Parms AddQuerySocialPostPrivilegesCompleted_Parms;
	memcpy ( &AddQuerySocialPostPrivilegesCompleted_Parms.PostPrivilegesDelegate, &PostPrivilegesDelegate, 0x10 );

	this->ProcessEvent ( pFnAddQuerySocialPostPrivilegesCompleted, &AddQuerySocialPostPrivilegesCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.OnQuerySocialPostPrivilegesCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FSocialPostPrivileges   PostPrivileges                 ( CPF_Parm )

void UOnlineSocialInterface::OnQuerySocialPostPrivilegesCompleted ( unsigned long bWasSuccessful, struct FSocialPostPrivileges PostPrivileges )
{
	static UFunction* pFnOnQuerySocialPostPrivilegesCompleted = NULL;

	if ( ! pFnOnQuerySocialPostPrivilegesCompleted )
		pFnOnQuerySocialPostPrivilegesCompleted = (UFunction*) UObject::GObjObjects()->Data[ 29071 ];

	UOnlineSocialInterface_execOnQuerySocialPostPrivilegesCompleted_Parms OnQuerySocialPostPrivilegesCompleted_Parms;
	OnQuerySocialPostPrivilegesCompleted_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnQuerySocialPostPrivilegesCompleted_Parms.PostPrivileges, &PostPrivileges, 0x4 );

	this->ProcessEvent ( pFnOnQuerySocialPostPrivilegesCompleted, &OnQuerySocialPostPrivilegesCompleted_Parms, NULL );
};

// Function Engine.OnlineSocialInterface.QuerySocialPostPrivileges
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSocialInterface::QuerySocialPostPrivileges ( )
{
	static UFunction* pFnQuerySocialPostPrivileges = NULL;

	if ( ! pFnQuerySocialPostPrivileges )
		pFnQuerySocialPostPrivileges = (UFunction*) UObject::GObjObjects()->Data[ 29069 ];

	UOnlineSocialInterface_execQuerySocialPostPrivileges_Parms QuerySocialPostPrivileges_Parms;

	this->ProcessEvent ( pFnQuerySocialPostPrivileges, &QuerySocialPostPrivileges_Parms, NULL );

	return QuerySocialPostPrivileges_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineTitleFileCacheInterface::DeleteTitleFile ( struct FString Filename )
{
	static UFunction* pFnDeleteTitleFile = NULL;

	if ( ! pFnDeleteTitleFile )
		pFnDeleteTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 23192 ];

	UOnlineTitleFileCacheInterface_execDeleteTitleFile_Parms DeleteTitleFile_Parms;
	memcpy ( &DeleteTitleFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnDeleteTitleFile, &DeleteTitleFile_Parms, NULL );

	return DeleteTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFiles
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxAgeSeconds                  ( CPF_Parm )

bool UOnlineTitleFileCacheInterface::DeleteTitleFiles ( float MaxAgeSeconds )
{
	static UFunction* pFnDeleteTitleFiles = NULL;

	if ( ! pFnDeleteTitleFiles )
		pFnDeleteTitleFiles = (UFunction*) UObject::GObjObjects()->Data[ 16568 ];

	UOnlineTitleFileCacheInterface_execDeleteTitleFiles_Parms DeleteTitleFiles_Parms;
	DeleteTitleFiles_Parms.MaxAgeSeconds = MaxAgeSeconds;

	this->ProcessEvent ( pFnDeleteTitleFiles, &DeleteTitleFiles_Parms, NULL );

	return DeleteTitleFiles_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.ClearCachedFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineTitleFileCacheInterface::ClearCachedFile ( struct FString Filename )
{
	static UFunction* pFnClearCachedFile = NULL;

	if ( ! pFnClearCachedFile )
		pFnClearCachedFile = (UFunction*) UObject::GObjObjects()->Data[ 23190 ];

	UOnlineTitleFileCacheInterface_execClearCachedFile_Parms ClearCachedFile_Parms;
	memcpy ( &ClearCachedFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnClearCachedFile, &ClearCachedFile_Parms, NULL );

	return ClearCachedFile_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.ClearCachedFiles
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineTitleFileCacheInterface::ClearCachedFiles ( )
{
	static UFunction* pFnClearCachedFiles = NULL;

	if ( ! pFnClearCachedFiles )
		pFnClearCachedFiles = (UFunction*) UObject::GObjObjects()->Data[ 23225 ];

	UOnlineTitleFileCacheInterface_execClearCachedFiles_Parms ClearCachedFiles_Parms;

	this->ProcessEvent ( pFnClearCachedFiles, &ClearCachedFiles_Parms, NULL );

	return ClearCachedFiles_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileLogicalName
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString UOnlineTitleFileCacheInterface::GetTitleFileLogicalName ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileLogicalName = NULL;

	if ( ! pFnGetTitleFileLogicalName )
		pFnGetTitleFileLogicalName = (UFunction*) UObject::GObjObjects()->Data[ 23198 ];

	UOnlineTitleFileCacheInterface_execGetTitleFileLogicalName_Parms GetTitleFileLogicalName_Parms;
	memcpy ( &GetTitleFileLogicalName_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileLogicalName, &GetTitleFileLogicalName_Parms, NULL );

	return GetTitleFileLogicalName_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileHash
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString UOnlineTitleFileCacheInterface::GetTitleFileHash ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileHash = NULL;

	if ( ! pFnGetTitleFileHash )
		pFnGetTitleFileHash = (UFunction*) UObject::GObjObjects()->Data[ 23186 ];

	UOnlineTitleFileCacheInterface_execGetTitleFileHash_Parms GetTitleFileHash_Parms;
	memcpy ( &GetTitleFileHash_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileHash, &GetTitleFileHash_Parms, NULL );

	return GetTitleFileHash_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileState
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

unsigned char UOnlineTitleFileCacheInterface::GetTitleFileState ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileState = NULL;

	if ( ! pFnGetTitleFileState )
		pFnGetTitleFileState = (UFunction*) UObject::GObjObjects()->Data[ 29458 ];

	UOnlineTitleFileCacheInterface_execGetTitleFileState_Parms GetTitleFileState_Parms;
	memcpy ( &GetTitleFileState_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileState, &GetTitleFileState_Parms, NULL );

	return GetTitleFileState_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineTitleFileCacheInterface::GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnGetTitleFileContents = NULL;

	if ( ! pFnGetTitleFileContents )
		pFnGetTitleFileContents = (UFunction*) UObject::GObjObjects()->Data[ 23188 ];

	UOnlineTitleFileCacheInterface_execGetTitleFileContents_Parms GetTitleFileContents_Parms;
	memcpy ( &GetTitleFileContents_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileContents, &GetTitleFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetTitleFileContents_Parms.FileContents, 0xC );

	return GetTitleFileContents_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.ClearSaveTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         SaveCompleteDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileCacheInterface::ClearSaveTitleFileCompleteDelegate ( struct FScriptDelegate SaveCompleteDelegate )
{
	static UFunction* pFnClearSaveTitleFileCompleteDelegate = NULL;

	if ( ! pFnClearSaveTitleFileCompleteDelegate )
		pFnClearSaveTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29453 ];

	UOnlineTitleFileCacheInterface_execClearSaveTitleFileCompleteDelegate_Parms ClearSaveTitleFileCompleteDelegate_Parms;
	memcpy ( &ClearSaveTitleFileCompleteDelegate_Parms.SaveCompleteDelegate, &SaveCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearSaveTitleFileCompleteDelegate, &ClearSaveTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileCacheInterface.AddSaveTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         SaveCompleteDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileCacheInterface::AddSaveTitleFileCompleteDelegate ( struct FScriptDelegate SaveCompleteDelegate )
{
	static UFunction* pFnAddSaveTitleFileCompleteDelegate = NULL;

	if ( ! pFnAddSaveTitleFileCompleteDelegate )
		pFnAddSaveTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29451 ];

	UOnlineTitleFileCacheInterface_execAddSaveTitleFileCompleteDelegate_Parms AddSaveTitleFileCompleteDelegate_Parms;
	memcpy ( &AddSaveTitleFileCompleteDelegate_Parms.SaveCompleteDelegate, &SaveCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddSaveTitleFileCompleteDelegate, &AddSaveTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileCacheInterface.OnSaveTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileCacheInterface::OnSaveTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnSaveTitleFileComplete = NULL;

	if ( ! pFnOnSaveTitleFileComplete )
		pFnOnSaveTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 29448 ];

	UOnlineTitleFileCacheInterface_execOnSaveTitleFileComplete_Parms OnSaveTitleFileComplete_Parms;
	OnSaveTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnSaveTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnSaveTitleFileComplete, &OnSaveTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlineTitleFileCacheInterface.SaveTitleFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 LogicalName                    ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineTitleFileCacheInterface::SaveTitleFile ( struct FString Filename, struct FString LogicalName, TArray< unsigned char > FileContents )
{
	static UFunction* pFnSaveTitleFile = NULL;

	if ( ! pFnSaveTitleFile )
		pFnSaveTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 16562 ];

	UOnlineTitleFileCacheInterface_execSaveTitleFile_Parms SaveTitleFile_Parms;
	memcpy ( &SaveTitleFile_Parms.Filename, &Filename, 0xC );
	memcpy ( &SaveTitleFile_Parms.LogicalName, &LogicalName, 0xC );
	memcpy ( &SaveTitleFile_Parms.FileContents, &FileContents, 0xC );

	this->ProcessEvent ( pFnSaveTitleFile, &SaveTitleFile_Parms, NULL );

	return SaveTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileCacheInterface.ClearLoadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoadCompleteDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileCacheInterface::ClearLoadTitleFileCompleteDelegate ( struct FScriptDelegate LoadCompleteDelegate )
{
	static UFunction* pFnClearLoadTitleFileCompleteDelegate = NULL;

	if ( ! pFnClearLoadTitleFileCompleteDelegate )
		pFnClearLoadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29442 ];

	UOnlineTitleFileCacheInterface_execClearLoadTitleFileCompleteDelegate_Parms ClearLoadTitleFileCompleteDelegate_Parms;
	memcpy ( &ClearLoadTitleFileCompleteDelegate_Parms.LoadCompleteDelegate, &LoadCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLoadTitleFileCompleteDelegate, &ClearLoadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileCacheInterface.AddLoadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LoadCompleteDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileCacheInterface::AddLoadTitleFileCompleteDelegate ( struct FScriptDelegate LoadCompleteDelegate )
{
	static UFunction* pFnAddLoadTitleFileCompleteDelegate = NULL;

	if ( ! pFnAddLoadTitleFileCompleteDelegate )
		pFnAddLoadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29440 ];

	UOnlineTitleFileCacheInterface_execAddLoadTitleFileCompleteDelegate_Parms AddLoadTitleFileCompleteDelegate_Parms;
	memcpy ( &AddLoadTitleFileCompleteDelegate_Parms.LoadCompleteDelegate, &LoadCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLoadTitleFileCompleteDelegate, &AddLoadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileCacheInterface.OnLoadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileCacheInterface::OnLoadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnLoadTitleFileComplete = NULL;

	if ( ! pFnOnLoadTitleFileComplete )
		pFnOnLoadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 29437 ];

	UOnlineTitleFileCacheInterface_execOnLoadTitleFileComplete_Parms OnLoadTitleFileComplete_Parms;
	OnLoadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnLoadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnLoadTitleFileComplete, &OnLoadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlineTitleFileCacheInterface.LoadTitleFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineTitleFileCacheInterface::LoadTitleFile ( struct FString Filename )
{
	static UFunction* pFnLoadTitleFile = NULL;

	if ( ! pFnLoadTitleFile )
		pFnLoadTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 16546 ];

	UOnlineTitleFileCacheInterface_execLoadTitleFile_Parms LoadTitleFile_Parms;
	memcpy ( &LoadTitleFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnLoadTitleFile, &LoadTitleFile_Parms, NULL );

	return LoadTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.ClearRequestTitleFileListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RequestTitleFileListDelegate   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileInterface::ClearRequestTitleFileListCompleteDelegate ( struct FScriptDelegate RequestTitleFileListDelegate )
{
	static UFunction* pFnClearRequestTitleFileListCompleteDelegate = NULL;

	if ( ! pFnClearRequestTitleFileListCompleteDelegate )
		pFnClearRequestTitleFileListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29489 ];

	UOnlineTitleFileInterface_execClearRequestTitleFileListCompleteDelegate_Parms ClearRequestTitleFileListCompleteDelegate_Parms;
	memcpy ( &ClearRequestTitleFileListCompleteDelegate_Parms.RequestTitleFileListDelegate, &RequestTitleFileListDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRequestTitleFileListCompleteDelegate, &ClearRequestTitleFileListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileInterface.AddRequestTitleFileListCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RequestTitleFileListDelegate   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileInterface::AddRequestTitleFileListCompleteDelegate ( struct FScriptDelegate RequestTitleFileListDelegate )
{
	static UFunction* pFnAddRequestTitleFileListCompleteDelegate = NULL;

	if ( ! pFnAddRequestTitleFileListCompleteDelegate )
		pFnAddRequestTitleFileListCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29487 ];

	UOnlineTitleFileInterface_execAddRequestTitleFileListCompleteDelegate_Parms AddRequestTitleFileListCompleteDelegate_Parms;
	memcpy ( &AddRequestTitleFileListCompleteDelegate_Parms.RequestTitleFileListDelegate, &RequestTitleFileListDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRequestTitleFileListCompleteDelegate, &AddRequestTitleFileListCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileInterface.OnRequestTitleFileListComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// TArray< struct FString >       ResultStr                      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileInterface::OnRequestTitleFileListComplete ( unsigned long bWasSuccessful, TArray< struct FString > ResultStr )
{
	static UFunction* pFnOnRequestTitleFileListComplete = NULL;

	if ( ! pFnOnRequestTitleFileListComplete )
		pFnOnRequestTitleFileListComplete = (UFunction*) UObject::GObjObjects()->Data[ 29483 ];

	UOnlineTitleFileInterface_execOnRequestTitleFileListComplete_Parms OnRequestTitleFileListComplete_Parms;
	OnRequestTitleFileListComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnRequestTitleFileListComplete_Parms.ResultStr, &ResultStr, 0xC );

	this->ProcessEvent ( pFnOnRequestTitleFileListComplete, &OnRequestTitleFileListComplete_Parms, NULL );
};

// Function Engine.OnlineTitleFileInterface.RequestTitleFileList
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineTitleFileInterface::RequestTitleFileList ( )
{
	static UFunction* pFnRequestTitleFileList = NULL;

	if ( ! pFnRequestTitleFileList )
		pFnRequestTitleFileList = (UFunction*) UObject::GObjObjects()->Data[ 23162 ];

	UOnlineTitleFileInterface_execRequestTitleFileList_Parms RequestTitleFileList_Parms;

	this->ProcessEvent ( pFnRequestTitleFileList, &RequestTitleFileList_Parms, NULL );

	return RequestTitleFileList_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.ClearDownloadedFile
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineTitleFileInterface::ClearDownloadedFile ( struct FString Filename )
{
	static UFunction* pFnClearDownloadedFile = NULL;

	if ( ! pFnClearDownloadedFile )
		pFnClearDownloadedFile = (UFunction*) UObject::GObjObjects()->Data[ 23177 ];

	UOnlineTitleFileInterface_execClearDownloadedFile_Parms ClearDownloadedFile_Parms;
	memcpy ( &ClearDownloadedFile_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnClearDownloadedFile, &ClearDownloadedFile_Parms, NULL );

	return ClearDownloadedFile_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineTitleFileInterface::ClearDownloadedFiles ( )
{
	static UFunction* pFnClearDownloadedFiles = NULL;

	if ( ! pFnClearDownloadedFiles )
		pFnClearDownloadedFiles = (UFunction*) UObject::GObjObjects()->Data[ 23223 ];

	UOnlineTitleFileInterface_execClearDownloadedFiles_Parms ClearDownloadedFiles_Parms;

	this->ProcessEvent ( pFnClearDownloadedFiles, &ClearDownloadedFiles_Parms, NULL );

	return ClearDownloadedFiles_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.GetTitleFileState
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

unsigned char UOnlineTitleFileInterface::GetTitleFileState ( struct FString Filename )
{
	static UFunction* pFnGetTitleFileState = NULL;

	if ( ! pFnGetTitleFileState )
		pFnGetTitleFileState = (UFunction*) UObject::GObjObjects()->Data[ 29479 ];

	UOnlineTitleFileInterface_execGetTitleFileState_Parms GetTitleFileState_Parms;
	memcpy ( &GetTitleFileState_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileState, &GetTitleFileState_Parms, NULL );

	return GetTitleFileState_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.GetTitleFileContents
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        FileContents                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineTitleFileInterface::GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents )
{
	static UFunction* pFnGetTitleFileContents = NULL;

	if ( ! pFnGetTitleFileContents )
		pFnGetTitleFileContents = (UFunction*) UObject::GObjObjects()->Data[ 16560 ];

	UOnlineTitleFileInterface_execGetTitleFileContents_Parms GetTitleFileContents_Parms;
	memcpy ( &GetTitleFileContents_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnGetTitleFileContents, &GetTitleFileContents_Parms, NULL );

	if ( FileContents )
		memcpy ( FileContents, &GetTitleFileContents_Parms.FileContents, 0xC );

	return GetTitleFileContents_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileInterface::ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnClearReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnClearReadTitleFileCompleteDelegate )
		pFnClearReadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29474 ];

	UOnlineTitleFileInterface_execClearReadTitleFileCompleteDelegate_Parms ClearReadTitleFileCompleteDelegate_Parms;
	memcpy ( &ClearReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadTitleFileCompleteDelegate, &ClearReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileInterface::AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate )
{
	static UFunction* pFnAddReadTitleFileCompleteDelegate = NULL;

	if ( ! pFnAddReadTitleFileCompleteDelegate )
		pFnAddReadTitleFileCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29472 ];

	UOnlineTitleFileInterface_execAddReadTitleFileCompleteDelegate_Parms AddReadTitleFileCompleteDelegate_Parms;
	memcpy ( &AddReadTitleFileCompleteDelegate_Parms.ReadTitleFileCompleteDelegate, &ReadTitleFileCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadTitleFileCompleteDelegate, &AddReadTitleFileCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineTitleFileInterface.ReadTitleFile
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FileToRead                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  FileType                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineTitleFileInterface::ReadTitleFile ( struct FString FileToRead, unsigned char FileType )
{
	static UFunction* pFnReadTitleFile = NULL;

	if ( ! pFnReadTitleFile )
		pFnReadTitleFile = (UFunction*) UObject::GObjObjects()->Data[ 16548 ];

	UOnlineTitleFileInterface_execReadTitleFile_Parms ReadTitleFile_Parms;
	memcpy ( &ReadTitleFile_Parms.FileToRead, &FileToRead, 0xC );
	ReadTitleFile_Parms.FileType = FileType;

	this->ProcessEvent ( pFnReadTitleFile, &ReadTitleFile_Parms, NULL );

	return ReadTitleFile_Parms.ReturnValue;
};

// Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineTitleFileInterface::OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename )
{
	static UFunction* pFnOnReadTitleFileComplete = NULL;

	if ( ! pFnOnReadTitleFileComplete )
		pFnOnReadTitleFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 29467 ];

	UOnlineTitleFileInterface_execOnReadTitleFileComplete_Parms OnReadTitleFileComplete_Parms;
	OnReadTitleFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadTitleFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadTitleFileComplete, &OnReadTitleFileComplete_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.IsInPartyChat
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::IsInPartyChat ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsInPartyChat = NULL;

	if ( ! pFnIsInPartyChat )
		pFnIsInPartyChat = (UFunction*) UObject::GObjObjects()->Data[ 28097 ];

	UOnlinePartyChatInterface_execIsInPartyChat_Parms IsInPartyChat_Parms;
	IsInPartyChat_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsInPartyChat, &IsInPartyChat_Parms, NULL );

	return IsInPartyChat_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::ShowCommunitySessionsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowCommunitySessionsUI = NULL;

	if ( ! pFnShowCommunitySessionsUI )
		pFnShowCommunitySessionsUI = (UFunction*) UObject::GObjObjects()->Data[ 28094 ];

	UOnlinePartyChatInterface_execShowCommunitySessionsUI_Parms ShowCommunitySessionsUI_Parms;
	ShowCommunitySessionsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowCommunitySessionsUI, &ShowCommunitySessionsUI_Parms, NULL );

	return ShowCommunitySessionsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::ShowVoiceChannelUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowVoiceChannelUI = NULL;

	if ( ! pFnShowVoiceChannelUI )
		pFnShowVoiceChannelUI = (UFunction*) UObject::GObjObjects()->Data[ 28091 ];

	UOnlinePartyChatInterface_execShowVoiceChannelUI_Parms ShowVoiceChannelUI_Parms;
	ShowVoiceChannelUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowVoiceChannelUI, &ShowVoiceChannelUI_Parms, NULL );

	return ShowVoiceChannelUI_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ShowPartyUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::ShowPartyUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowPartyUI = NULL;

	if ( ! pFnShowPartyUI )
		pFnShowPartyUI = (UFunction*) UObject::GObjObjects()->Data[ 28088 ];

	UOnlinePartyChatInterface_execShowPartyUI_Parms ShowPartyUI_Parms;
	ShowPartyUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowPartyUI, &ShowPartyUI_Parms, NULL );

	return ShowPartyUI_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.GetPartyBandwidth
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlinePartyChatInterface::GetPartyBandwidth ( )
{
	static UFunction* pFnGetPartyBandwidth = NULL;

	if ( ! pFnGetPartyBandwidth )
		pFnGetPartyBandwidth = (UFunction*) UObject::GObjObjects()->Data[ 28086 ];

	UOnlinePartyChatInterface_execGetPartyBandwidth_Parms GetPartyBandwidth_Parms;

	this->ProcessEvent ( pFnGetPartyBandwidth, &GetPartyBandwidth_Parms, NULL );

	return GetPartyBandwidth_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            Data1                          ( CPF_Parm )
// int                            Data2                          ( CPF_Parm )
// int                            Data3                          ( CPF_Parm )
// int                            Data4                          ( CPF_Parm )

bool UOnlinePartyChatInterface::SetPartyMemberCustomData ( unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4 )
{
	static UFunction* pFnSetPartyMemberCustomData = NULL;

	if ( ! pFnSetPartyMemberCustomData )
		pFnSetPartyMemberCustomData = (UFunction*) UObject::GObjObjects()->Data[ 28079 ];

	UOnlinePartyChatInterface_execSetPartyMemberCustomData_Parms SetPartyMemberCustomData_Parms;
	SetPartyMemberCustomData_Parms.LocalUserNum = LocalUserNum;
	SetPartyMemberCustomData_Parms.Data1 = Data1;
	SetPartyMemberCustomData_Parms.Data2 = Data2;
	SetPartyMemberCustomData_Parms.Data3 = Data3;
	SetPartyMemberCustomData_Parms.Data4 = Data4;

	this->ProcessEvent ( pFnSetPartyMemberCustomData, &SetPartyMemberCustomData_Parms, NULL );

	return SetPartyMemberCustomData_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PartyMembersInfoChangedDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::ClearPartyMembersInfoChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMembersInfoChangedDelegate )
{
	static UFunction* pFnClearPartyMembersInfoChangedDelegate = NULL;

	if ( ! pFnClearPartyMembersInfoChangedDelegate )
		pFnClearPartyMembersInfoChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28076 ];

	UOnlinePartyChatInterface_execClearPartyMembersInfoChangedDelegate_Parms ClearPartyMembersInfoChangedDelegate_Parms;
	ClearPartyMembersInfoChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearPartyMembersInfoChangedDelegate_Parms.PartyMembersInfoChangedDelegate, &PartyMembersInfoChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearPartyMembersInfoChangedDelegate, &ClearPartyMembersInfoChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PartyMembersInfoChangedDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::AddPartyMembersInfoChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMembersInfoChangedDelegate )
{
	static UFunction* pFnAddPartyMembersInfoChangedDelegate = NULL;

	if ( ! pFnAddPartyMembersInfoChangedDelegate )
		pFnAddPartyMembersInfoChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28073 ];

	UOnlinePartyChatInterface_execAddPartyMembersInfoChangedDelegate_Parms AddPartyMembersInfoChangedDelegate_Parms;
	AddPartyMembersInfoChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddPartyMembersInfoChangedDelegate_Parms.PartyMembersInfoChangedDelegate, &PartyMembersInfoChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddPartyMembersInfoChangedDelegate, &AddPartyMembersInfoChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged
// [0x00120000] 
// Parameters infos:
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            CustomData1                    ( CPF_Parm )
// int                            CustomData2                    ( CPF_Parm )
// int                            CustomData3                    ( CPF_Parm )
// int                            CustomData4                    ( CPF_Parm )

void UOnlinePartyChatInterface::OnPartyMembersInfoChanged ( struct FString PlayerName, struct FUniqueNetId PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4 )
{
	static UFunction* pFnOnPartyMembersInfoChanged = NULL;

	if ( ! pFnOnPartyMembersInfoChanged )
		pFnOnPartyMembersInfoChanged = (UFunction*) UObject::GObjObjects()->Data[ 28066 ];

	UOnlinePartyChatInterface_execOnPartyMembersInfoChanged_Parms OnPartyMembersInfoChanged_Parms;
	memcpy ( &OnPartyMembersInfoChanged_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &OnPartyMembersInfoChanged_Parms.PlayerID, &PlayerID, 0x48 );
	OnPartyMembersInfoChanged_Parms.CustomData1 = CustomData1;
	OnPartyMembersInfoChanged_Parms.CustomData2 = CustomData2;
	OnPartyMembersInfoChanged_Parms.CustomData3 = CustomData3;
	OnPartyMembersInfoChanged_Parms.CustomData4 = CustomData4;

	this->ProcessEvent ( pFnOnPartyMembersInfoChanged, &OnPartyMembersInfoChanged_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PartyMemberListChangedDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::ClearPartyMemberListChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMemberListChangedDelegate )
{
	static UFunction* pFnClearPartyMemberListChangedDelegate = NULL;

	if ( ! pFnClearPartyMemberListChangedDelegate )
		pFnClearPartyMemberListChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28063 ];

	UOnlinePartyChatInterface_execClearPartyMemberListChangedDelegate_Parms ClearPartyMemberListChangedDelegate_Parms;
	ClearPartyMemberListChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearPartyMemberListChangedDelegate_Parms.PartyMemberListChangedDelegate, &PartyMemberListChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearPartyMemberListChangedDelegate, &ClearPartyMemberListChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         PartyMemberListChangedDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::AddPartyMemberListChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMemberListChangedDelegate )
{
	static UFunction* pFnAddPartyMemberListChangedDelegate = NULL;

	if ( ! pFnAddPartyMemberListChangedDelegate )
		pFnAddPartyMemberListChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28060 ];

	UOnlinePartyChatInterface_execAddPartyMemberListChangedDelegate_Parms AddPartyMemberListChangedDelegate_Parms;
	AddPartyMemberListChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddPartyMemberListChangedDelegate_Parms.PartyMemberListChangedDelegate, &PartyMemberListChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddPartyMemberListChangedDelegate, &AddPartyMemberListChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged
// [0x00120000] 
// Parameters infos:
// unsigned long                  bJoinedOrLeft                  ( CPF_Parm )
// struct FString                 PlayerName                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

void UOnlinePartyChatInterface::OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnOnPartyMemberListChanged = NULL;

	if ( ! pFnOnPartyMemberListChanged )
		pFnOnPartyMemberListChanged = (UFunction*) UObject::GObjObjects()->Data[ 28056 ];

	UOnlinePartyChatInterface_execOnPartyMemberListChanged_Parms OnPartyMemberListChanged_Parms;
	OnPartyMemberListChanged_Parms.bJoinedOrLeft = bJoinedOrLeft;
	memcpy ( &OnPartyMemberListChanged_Parms.PlayerName, &PlayerName, 0xC );
	memcpy ( &OnPartyMemberListChanged_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnOnPartyMemberListChanged, &OnPartyMemberListChanged_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            MemberId                       ( CPF_Parm )
// struct FOnlinePartyMember      PartyMember                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePartyChatInterface::GetPartyMemberInformation ( struct FUniqueNetId MemberId, struct FOnlinePartyMember* PartyMember )
{
	static UFunction* pFnGetPartyMemberInformation = NULL;

	if ( ! pFnGetPartyMemberInformation )
		pFnGetPartyMemberInformation = (UFunction*) UObject::GObjObjects()->Data[ 28052 ];

	UOnlinePartyChatInterface_execGetPartyMemberInformation_Parms GetPartyMemberInformation_Parms;
	memcpy ( &GetPartyMemberInformation_Parms.MemberId, &MemberId, 0x48 );

	this->ProcessEvent ( pFnGetPartyMemberInformation, &GetPartyMemberInformation_Parms, NULL );

	if ( PartyMember )
		memcpy ( PartyMember, &GetPartyMemberInformation_Parms.PartyMember, 0x78 );

	return GetPartyMemberInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FOnlinePartyMember > PartyMembers                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePartyChatInterface::GetPartyMembersInformation ( TArray< struct FOnlinePartyMember >* PartyMembers )
{
	static UFunction* pFnGetPartyMembersInformation = NULL;

	if ( ! pFnGetPartyMembersInformation )
		pFnGetPartyMembersInformation = (UFunction*) UObject::GObjObjects()->Data[ 28048 ];

	UOnlinePartyChatInterface_execGetPartyMembersInformation_Parms GetPartyMembersInformation_Parms;

	this->ProcessEvent ( pFnGetPartyMembersInformation, &GetPartyMembersInformation_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &GetPartyMembersInformation_Parms.PartyMembers, 0xC );

	return GetPartyMembersInformation_Parms.ReturnValue;
};

// Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::ClearSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate )
{
	static UFunction* pFnClearSendPartyGameInvitesCompleteDelegate = NULL;

	if ( ! pFnClearSendPartyGameInvitesCompleteDelegate )
		pFnClearSendPartyGameInvitesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28045 ];

	UOnlinePartyChatInterface_execClearSendPartyGameInvitesCompleteDelegate_Parms ClearSendPartyGameInvitesCompleteDelegate_Parms;
	ClearSendPartyGameInvitesCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearSendPartyGameInvitesCompleteDelegate_Parms.SendPartyGameInvitesCompleteDelegate, &SendPartyGameInvitesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearSendPartyGameInvitesCompleteDelegate, &ClearSendPartyGameInvitesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePartyChatInterface::AddSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate )
{
	static UFunction* pFnAddSendPartyGameInvitesCompleteDelegate = NULL;

	if ( ! pFnAddSendPartyGameInvitesCompleteDelegate )
		pFnAddSendPartyGameInvitesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28042 ];

	UOnlinePartyChatInterface_execAddSendPartyGameInvitesCompleteDelegate_Parms AddSendPartyGameInvitesCompleteDelegate_Parms;
	AddSendPartyGameInvitesCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddSendPartyGameInvitesCompleteDelegate_Parms.SendPartyGameInvitesCompleteDelegate, &SendPartyGameInvitesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddSendPartyGameInvitesCompleteDelegate, &AddSendPartyGameInvitesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePartyChatInterface::OnSendPartyGameInvitesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnSendPartyGameInvitesComplete = NULL;

	if ( ! pFnOnSendPartyGameInvitesComplete )
		pFnOnSendPartyGameInvitesComplete = (UFunction*) UObject::GObjObjects()->Data[ 28040 ];

	UOnlinePartyChatInterface_execOnSendPartyGameInvitesComplete_Parms OnSendPartyGameInvitesComplete_Parms;
	OnSendPartyGameInvitesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnSendPartyGameInvitesComplete, &OnSendPartyGameInvitesComplete_Parms, NULL );
};

// Function Engine.OnlinePartyChatInterface.SendPartyGameInvites
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePartyChatInterface::SendPartyGameInvites ( unsigned char LocalUserNum )
{
	static UFunction* pFnSendPartyGameInvites = NULL;

	if ( ! pFnSendPartyGameInvites )
		pFnSendPartyGameInvites = (UFunction*) UObject::GObjObjects()->Data[ 28037 ];

	UOnlinePartyChatInterface_execSendPartyGameInvites_Parms SendPartyGameInvites_Parms;
	SendPartyGameInvites_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnSendPartyGameInvites, &SendPartyGameInvites_Parms, NULL );

	return SendPartyGameInvites_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.GetNews
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

struct FString UOnlineNewsInterface::GetNews ( unsigned char LocalUserNum, unsigned char NewsType )
{
	static UFunction* pFnGetNews = NULL;

	if ( ! pFnGetNews )
		pFnGetNews = (UFunction*) UObject::GObjObjects()->Data[ 28032 ];

	UOnlineNewsInterface_execGetNews_Parms GetNews_Parms;
	GetNews_Parms.LocalUserNum = LocalUserNum;
	GetNews_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnGetNews, &GetNews_Parms, NULL );

	return GetNews_Parms.ReturnValue;
};

// Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadNewsDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate )
{
	static UFunction* pFnClearReadNewsCompletedDelegate = NULL;

	if ( ! pFnClearReadNewsCompletedDelegate )
		pFnClearReadNewsCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28030 ];

	UOnlineNewsInterface_execClearReadNewsCompletedDelegate_Parms ClearReadNewsCompletedDelegate_Parms;
	memcpy ( &ClearReadNewsCompletedDelegate_Parms.ReadNewsDelegate, &ReadNewsDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadNewsCompletedDelegate, &ClearReadNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadNewsDelegate               ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineNewsInterface::AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate )
{
	static UFunction* pFnAddReadNewsCompletedDelegate = NULL;

	if ( ! pFnAddReadNewsCompletedDelegate )
		pFnAddReadNewsCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28028 ];

	UOnlineNewsInterface_execAddReadNewsCompletedDelegate_Parms AddReadNewsCompletedDelegate_Parms;
	memcpy ( &AddReadNewsCompletedDelegate_Parms.ReadNewsDelegate, &ReadNewsDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadNewsCompletedDelegate, &AddReadNewsCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.OnReadNewsCompleted
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

void UOnlineNewsInterface::OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType )
{
	static UFunction* pFnOnReadNewsCompleted = NULL;

	if ( ! pFnOnReadNewsCompleted )
		pFnOnReadNewsCompleted = (UFunction*) UObject::GObjObjects()->Data[ 28025 ];

	UOnlineNewsInterface_execOnReadNewsCompleted_Parms OnReadNewsCompleted_Parms;
	OnReadNewsCompleted_Parms.bWasSuccessful = bWasSuccessful;
	OnReadNewsCompleted_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnOnReadNewsCompleted, &OnReadNewsCompleted_Parms, NULL );
};

// Function Engine.OnlineNewsInterface.ReadNews
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  NewsType                       ( CPF_Parm )

bool UOnlineNewsInterface::ReadNews ( unsigned char LocalUserNum, unsigned char NewsType )
{
	static UFunction* pFnReadNews = NULL;

	if ( ! pFnReadNews )
		pFnReadNews = (UFunction*) UObject::GObjObjects()->Data[ 28021 ];

	UOnlineNewsInterface_execReadNews_Parms ReadNews_Parms;
	ReadNews_Parms.LocalUserNum = LocalUserNum;
	ReadNews_Parms.NewsType = NewsType;

	this->ProcessEvent ( pFnReadNews, &ReadNews_Parms, NULL );

	return ReadNews_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.CalcAggregateSkill
// [0x00420000] 
// Parameters infos:
// TArray< struct FDouble >       Mus                            ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FDouble >       Sigmas                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FDouble                 OutAggregateMu                 ( CPF_Parm | CPF_OutParm )
// struct FDouble                 OutAggregateSigma              ( CPF_Parm | CPF_OutParm )

void UOnlineStatsInterface::CalcAggregateSkill ( TArray< struct FDouble > Mus, TArray< struct FDouble > Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma )
{
	static UFunction* pFnCalcAggregateSkill = NULL;

	if ( ! pFnCalcAggregateSkill )
		pFnCalcAggregateSkill = (UFunction*) UObject::GObjObjects()->Data[ 29177 ];

	UOnlineStatsInterface_execCalcAggregateSkill_Parms CalcAggregateSkill_Parms;
	memcpy ( &CalcAggregateSkill_Parms.Mus, &Mus, 0xC );
	memcpy ( &CalcAggregateSkill_Parms.Sigmas, &Sigmas, 0xC );

	this->ProcessEvent ( pFnCalcAggregateSkill, &CalcAggregateSkill_Parms, NULL );

	if ( OutAggregateMu )
		memcpy ( OutAggregateMu, &CalcAggregateSkill_Parms.OutAggregateMu, 0x8 );

	if ( OutAggregateSigma )
		memcpy ( OutAggregateSigma, &CalcAggregateSkill_Parms.OutAggregateSigma, 0x8 );
};

// Function Engine.OnlineStatsInterface.RegisterStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// struct FString                 ClientStatGuid                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid )
{
	static UFunction* pFnRegisterStatGuid = NULL;

	if ( ! pFnRegisterStatGuid )
		pFnRegisterStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 29173 ];

	UOnlineStatsInterface_execRegisterStatGuid_Parms RegisterStatGuid_Parms;
	memcpy ( &RegisterStatGuid_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnRegisterStatGuid, &RegisterStatGuid_Parms, NULL );

	if ( ClientStatGuid )
		memcpy ( ClientStatGuid, &RegisterStatGuid_Parms.ClientStatGuid, 0xC );

	return RegisterStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetClientStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineStatsInterface::GetClientStatGuid ( )
{
	static UFunction* pFnGetClientStatGuid = NULL;

	if ( ! pFnGetClientStatGuid )
		pFnGetClientStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 29171 ];

	UOnlineStatsInterface_execGetClientStatGuid_Parms GetClientStatGuid_Parms;

	this->ProcessEvent ( pFnGetClientStatGuid, &GetClientStatGuid_Parms, NULL );

	return GetClientStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnClearRegisterHostStatGuidCompleteDelegateDelegate = NULL;

	if ( ! pFnClearRegisterHostStatGuidCompleteDelegateDelegate )
		pFnClearRegisterHostStatGuidCompleteDelegateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29169 ];

	UOnlineStatsInterface_execClearRegisterHostStatGuidCompleteDelegateDelegate_Parms ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms;
	memcpy ( &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRegisterHostStatGuidCompleteDelegateDelegate, &ClearRegisterHostStatGuidCompleteDelegateDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate )
{
	static UFunction* pFnAddRegisterHostStatGuidCompleteDelegate = NULL;

	if ( ! pFnAddRegisterHostStatGuidCompleteDelegate )
		pFnAddRegisterHostStatGuidCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29167 ];

	UOnlineStatsInterface_execAddRegisterHostStatGuidCompleteDelegate_Parms AddRegisterHostStatGuidCompleteDelegate_Parms;
	memcpy ( &AddRegisterHostStatGuidCompleteDelegate_Parms.RegisterHostStatGuidCompleteDelegate, &RegisterHostStatGuidCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRegisterHostStatGuidCompleteDelegate, &AddRegisterHostStatGuidCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterHostStatGuidComplete = NULL;

	if ( ! pFnOnRegisterHostStatGuidComplete )
		pFnOnRegisterHostStatGuidComplete = (UFunction*) UObject::GObjObjects()->Data[ 29165 ];

	UOnlineStatsInterface_execOnRegisterHostStatGuidComplete_Parms OnRegisterHostStatGuidComplete_Parms;
	OnRegisterHostStatGuidComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterHostStatGuidComplete, &OnRegisterHostStatGuidComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 HostStatGuid                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::RegisterHostStatGuid ( struct FString* HostStatGuid )
{
	static UFunction* pFnRegisterHostStatGuid = NULL;

	if ( ! pFnRegisterHostStatGuid )
		pFnRegisterHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 12790 ];

	UOnlineStatsInterface_execRegisterHostStatGuid_Parms RegisterHostStatGuid_Parms;

	this->ProcessEvent ( pFnRegisterHostStatGuid, &RegisterHostStatGuid_Parms, NULL );

	if ( HostStatGuid )
		memcpy ( HostStatGuid, &RegisterHostStatGuid_Parms.HostStatGuid, 0xC );

	return RegisterHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.GetHostStatGuid
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UOnlineStatsInterface::GetHostStatGuid ( )
{
	static UFunction* pFnGetHostStatGuid = NULL;

	if ( ! pFnGetHostStatGuid )
		pFnGetHostStatGuid = (UFunction*) UObject::GObjObjects()->Data[ 21361 ];

	UOnlineStatsInterface_execGetHostStatGuid_Parms GetHostStatGuid_Parms;

	this->ProcessEvent ( pFnGetHostStatGuid, &GetHostStatGuid_Parms, NULL );

	return GetHostStatGuid_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// int                            LeaderboardId                  ( CPF_Parm )
// TArray< struct FOnlinePlayerScore > PlayerScores                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, TArray< struct FOnlinePlayerScore >* PlayerScores )
{
	static UFunction* pFnWriteOnlinePlayerScores = NULL;

	if ( ! pFnWriteOnlinePlayerScores )
		pFnWriteOnlinePlayerScores = (UFunction*) UObject::GObjObjects()->Data[ 12731 ];

	UOnlineStatsInterface_execWriteOnlinePlayerScores_Parms WriteOnlinePlayerScores_Parms;
	memcpy ( &WriteOnlinePlayerScores_Parms.SessionName, &SessionName, 0x8 );
	WriteOnlinePlayerScores_Parms.LeaderboardId = LeaderboardId;

	this->ProcessEvent ( pFnWriteOnlinePlayerScores, &WriteOnlinePlayerScores_Parms, NULL );

	if ( PlayerScores )
		memcpy ( PlayerScores, &WriteOnlinePlayerScores_Parms.PlayerScores, 0xC );

	return WriteOnlinePlayerScores_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearFlushOnlineStatsCompleteDelegate )
		pFnClearFlushOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29158 ];

	UOnlineStatsInterface_execClearFlushOnlineStatsCompleteDelegate_Parms ClearFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFlushOnlineStatsCompleteDelegate, &ClearFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddFlushOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddFlushOnlineStatsCompleteDelegate )
		pFnAddFlushOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29156 ];

	UOnlineStatsInterface_execAddFlushOnlineStatsCompleteDelegate_Parms AddFlushOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddFlushOnlineStatsCompleteDelegate_Parms.FlushOnlineStatsCompleteDelegate, &FlushOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFlushOnlineStatsCompleteDelegate, &AddFlushOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFlushOnlineStatsComplete = NULL;

	if ( ! pFnOnFlushOnlineStatsComplete )
		pFnOnFlushOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 29153 ];

	UOnlineStatsInterface_execOnFlushOnlineStatsComplete_Parms OnFlushOnlineStatsComplete_Parms;
	memcpy ( &OnFlushOnlineStatsComplete_Parms.SessionName, &SessionName, 0x8 );
	OnFlushOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFlushOnlineStatsComplete, &OnFlushOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.FlushOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineStatsInterface::FlushOnlineStats ( struct FName SessionName )
{
	static UFunction* pFnFlushOnlineStats = NULL;

	if ( ! pFnFlushOnlineStats )
		pFnFlushOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 29150 ];

	UOnlineStatsInterface_execFlushOnlineStats_Parms FlushOnlineStats_Parms;
	memcpy ( &FlushOnlineStats_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnFlushOnlineStats, &FlushOnlineStats_Parms, NULL );

	return FlushOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.WriteOnlineStats
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            Player                         ( CPF_Parm )
// class UOnlineStatsWrite*       StatsWrite                     ( CPF_Parm )

bool UOnlineStatsInterface::WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite )
{
	static UFunction* pFnWriteOnlineStats = NULL;

	if ( ! pFnWriteOnlineStats )
		pFnWriteOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 29145 ];

	UOnlineStatsInterface_execWriteOnlineStats_Parms WriteOnlineStats_Parms;
	memcpy ( &WriteOnlineStats_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &WriteOnlineStats_Parms.Player, &Player, 0x48 );
	WriteOnlineStats_Parms.StatsWrite = StatsWrite;

	this->ProcessEvent ( pFnWriteOnlineStats, &WriteOnlineStats_Parms, NULL );

	return WriteOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.FreeStats
// [0x00020000] 
// Parameters infos:
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

void UOnlineStatsInterface::FreeStats ( class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnFreeStats = NULL;

	if ( ! pFnFreeStats )
		pFnFreeStats = (UFunction*) UObject::GObjObjects()->Data[ 29143 ];

	UOnlineStatsInterface_execFreeStats_Parms FreeStats_Parms;
	FreeStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnFreeStats, &FreeStats_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnClearReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnClearReadOnlineStatsCompleteDelegate )
		pFnClearReadOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29141 ];

	UOnlineStatsInterface_execClearReadOnlineStatsCompleteDelegate_Parms ClearReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &ClearReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadOnlineStatsCompleteDelegate, &ClearReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate )
{
	static UFunction* pFnAddReadOnlineStatsCompleteDelegate = NULL;

	if ( ! pFnAddReadOnlineStatsCompleteDelegate )
		pFnAddReadOnlineStatsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29139 ];

	UOnlineStatsInterface_execAddReadOnlineStatsCompleteDelegate_Parms AddReadOnlineStatsCompleteDelegate_Parms;
	memcpy ( &AddReadOnlineStatsCompleteDelegate_Parms.ReadOnlineStatsCompleteDelegate, &ReadOnlineStatsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadOnlineStatsCompleteDelegate, &AddReadOnlineStatsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineStatsInterface::OnReadOnlineStatsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadOnlineStatsComplete = NULL;

	if ( ! pFnOnReadOnlineStatsComplete )
		pFnOnReadOnlineStatsComplete = (UFunction*) UObject::GObjObjects()->Data[ 29137 ];

	UOnlineStatsInterface_execOnReadOnlineStatsComplete_Parms OnReadOnlineStatsComplete_Parms;
	OnReadOnlineStatsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadOnlineStatsComplete, &OnReadOnlineStatsComplete_Parms, NULL );
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            NumRows                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows )
{
	static UFunction* pFnReadOnlineStatsByRankAroundPlayer = NULL;

	if ( ! pFnReadOnlineStatsByRankAroundPlayer )
		pFnReadOnlineStatsByRankAroundPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29132 ];

	UOnlineStatsInterface_execReadOnlineStatsByRankAroundPlayer_Parms ReadOnlineStatsByRankAroundPlayer_Parms;
	ReadOnlineStatsByRankAroundPlayer_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsByRankAroundPlayer_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRankAroundPlayer_Parms.NumRows = NumRows;

	this->ProcessEvent ( pFnReadOnlineStatsByRankAroundPlayer, &ReadOnlineStatsByRankAroundPlayer_Parms, NULL );

	return ReadOnlineStatsByRankAroundPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// int                            StartIndex                     ( CPF_OptionalParm | CPF_Parm )
// int                            NumToRead                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsByRank ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead )
{
	static UFunction* pFnReadOnlineStatsByRank = NULL;

	if ( ! pFnReadOnlineStatsByRank )
		pFnReadOnlineStatsByRank = (UFunction*) UObject::GObjObjects()->Data[ 29126 ];

	UOnlineStatsInterface_execReadOnlineStatsByRank_Parms ReadOnlineStatsByRank_Parms;
	ReadOnlineStatsByRank_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsByRank_Parms.StatsRead = StatsRead;
	ReadOnlineStatsByRank_Parms.StartIndex = StartIndex;
	ReadOnlineStatsByRank_Parms.NumToRead = NumToRead;

	this->ProcessEvent ( pFnReadOnlineStatsByRank, &ReadOnlineStatsByRank_Parms, NULL );

	return ReadOnlineStatsByRank_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )

bool UOnlineStatsInterface::ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead )
{
	static UFunction* pFnReadOnlineStatsForFriends = NULL;

	if ( ! pFnReadOnlineStatsForFriends )
		pFnReadOnlineStatsForFriends = (UFunction*) UObject::GObjObjects()->Data[ 29122 ];

	UOnlineStatsInterface_execReadOnlineStatsForFriends_Parms ReadOnlineStatsForFriends_Parms;
	ReadOnlineStatsForFriends_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStatsForFriends_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStatsForFriends, &ReadOnlineStatsForFriends_Parms, NULL );

	return ReadOnlineStatsForFriends_Parms.ReturnValue;
};

// Function Engine.OnlineStatsInterface.ReadOnlineStats
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineStatsInterface::ReadOnlineStats ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnReadOnlineStats = NULL;

	if ( ! pFnReadOnlineStats )
		pFnReadOnlineStats = (UFunction*) UObject::GObjObjects()->Data[ 29116 ];

	UOnlineStatsInterface_execReadOnlineStats_Parms ReadOnlineStats_Parms;
	ReadOnlineStats_Parms.LocalUserNum = LocalUserNum;
	ReadOnlineStats_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnReadOnlineStats, &ReadOnlineStats_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ReadOnlineStats_Parms.Players, 0xC );

	return ReadOnlineStats_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetVoiceReceiveVolume
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          VoiceVolume                    ( CPF_Parm )

bool UOnlineVoiceInterface::SetVoiceReceiveVolume ( float VoiceVolume )
{
	static UFunction* pFnSetVoiceReceiveVolume = NULL;

	if ( ! pFnSetVoiceReceiveVolume )
		pFnSetVoiceReceiveVolume = (UFunction*) UObject::GObjObjects()->Data[ 29568 ];

	UOnlineVoiceInterface_execSetVoiceReceiveVolume_Parms SetVoiceReceiveVolume_Parms;
	SetVoiceReceiveVolume_Parms.VoiceVolume = VoiceVolume;

	this->ProcessEvent ( pFnSetVoiceReceiveVolume, &SetVoiceReceiveVolume_Parms, NULL );

	return SetVoiceReceiveVolume_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnmuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnmuteAll ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnmuteAll = NULL;

	if ( ! pFnUnmuteAll )
		pFnUnmuteAll = (UFunction*) UObject::GObjObjects()->Data[ 29565 ];

	UOnlineVoiceInterface_execUnmuteAll_Parms UnmuteAll_Parms;
	UnmuteAll_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnmuteAll, &UnmuteAll_Parms, NULL );

	return UnmuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteAll
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bAllowFriends                  ( CPF_Parm )

bool UOnlineVoiceInterface::MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends )
{
	static UFunction* pFnMuteAll = NULL;

	if ( ! pFnMuteAll )
		pFnMuteAll = (UFunction*) UObject::GObjObjects()->Data[ 29561 ];

	UOnlineVoiceInterface_execMuteAll_Parms MuteAll_Parms;
	MuteAll_Parms.LocalUserNum = LocalUserNum;
	MuteAll_Parms.bAllowFriends = bAllowFriends;

	this->ProcessEvent ( pFnMuteAll, &MuteAll_Parms, NULL );

	return MuteAll_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// class USpeechRecognition*      SpeechRecogObj                 ( CPF_Parm )

bool UOnlineVoiceInterface::SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj )
{
	static UFunction* pFnSetSpeechRecognitionObject = NULL;

	if ( ! pFnSetSpeechRecognitionObject )
		pFnSetSpeechRecognitionObject = (UFunction*) UObject::GObjObjects()->Data[ 29557 ];

	UOnlineVoiceInterface_execSetSpeechRecognitionObject_Parms SetSpeechRecognitionObject_Parms;
	SetSpeechRecognitionObject_Parms.LocalUserNum = LocalUserNum;
	SetSpeechRecognitionObject_Parms.SpeechRecogObj = SpeechRecogObj;

	this->ProcessEvent ( pFnSetSpeechRecognitionObject, &SetSpeechRecognitionObject_Parms, NULL );

	return SetSpeechRecognitionObject_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SelectVocabulary
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            VocabularyId                   ( CPF_Parm )

bool UOnlineVoiceInterface::SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId )
{
	static UFunction* pFnSelectVocabulary = NULL;

	if ( ! pFnSelectVocabulary )
		pFnSelectVocabulary = (UFunction*) UObject::GObjObjects()->Data[ 29553 ];

	UOnlineVoiceInterface_execSelectVocabulary_Parms SelectVocabulary_Parms;
	SelectVocabulary_Parms.LocalUserNum = LocalUserNum;
	SelectVocabulary_Parms.VocabularyId = VocabularyId;

	this->ProcessEvent ( pFnSelectVocabulary, &SelectVocabulary_Parms, NULL );

	return SelectVocabulary_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnClearRecognitionCompleteDelegate = NULL;

	if ( ! pFnClearRecognitionCompleteDelegate )
		pFnClearRecognitionCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29550 ];

	UOnlineVoiceInterface_execClearRecognitionCompleteDelegate_Parms ClearRecognitionCompleteDelegate_Parms;
	ClearRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRecognitionCompleteDelegate, &ClearRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         RecognitionDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate )
{
	static UFunction* pFnAddRecognitionCompleteDelegate = NULL;

	if ( ! pFnAddRecognitionCompleteDelegate )
		pFnAddRecognitionCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29547 ];

	UOnlineVoiceInterface_execAddRecognitionCompleteDelegate_Parms AddRecognitionCompleteDelegate_Parms;
	AddRecognitionCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddRecognitionCompleteDelegate_Parms.RecognitionDelegate, &RecognitionDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRecognitionCompleteDelegate, &AddRecognitionCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// [0x00120000] 
// Parameters infos:

void UOnlineVoiceInterface::OnRecognitionComplete ( )
{
	static UFunction* pFnOnRecognitionComplete = NULL;

	if ( ! pFnOnRecognitionComplete )
		pFnOnRecognitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 29546 ];

	UOnlineVoiceInterface_execOnRecognitionComplete_Parms OnRecognitionComplete_Parms;

	this->ProcessEvent ( pFnOnRecognitionComplete, &OnRecognitionComplete_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FSpeechRecognizedWord > Words                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineVoiceInterface::GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words )
{
	static UFunction* pFnGetRecognitionResults = NULL;

	if ( ! pFnGetRecognitionResults )
		pFnGetRecognitionResults = (UFunction*) UObject::GObjObjects()->Data[ 29541 ];

	UOnlineVoiceInterface_execGetRecognitionResults_Parms GetRecognitionResults_Parms;
	GetRecognitionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetRecognitionResults, &GetRecognitionResults_Parms, NULL );

	if ( Words )
		memcpy ( Words, &GetRecognitionResults_Parms.Words, 0xC );

	return GetRecognitionResults_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StopSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopSpeechRecognition = NULL;

	if ( ! pFnStopSpeechRecognition )
		pFnStopSpeechRecognition = (UFunction*) UObject::GObjObjects()->Data[ 29538 ];

	UOnlineVoiceInterface_execStopSpeechRecognition_Parms StopSpeechRecognition_Parms;
	StopSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopSpeechRecognition, &StopSpeechRecognition_Parms, NULL );

	return StopSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::StartSpeechRecognition ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartSpeechRecognition = NULL;

	if ( ! pFnStartSpeechRecognition )
		pFnStartSpeechRecognition = (UFunction*) UObject::GObjObjects()->Data[ 29535 ];

	UOnlineVoiceInterface_execStartSpeechRecognition_Parms StartSpeechRecognition_Parms;
	StartSpeechRecognition_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartSpeechRecognition, &StartSpeechRecognition_Parms, NULL );

	return StartSpeechRecognition_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StopNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStopNetworkedVoice = NULL;

	if ( ! pFnStopNetworkedVoice )
		pFnStopNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 29533 ];

	UOnlineVoiceInterface_execStopNetworkedVoice_Parms StopNetworkedVoice_Parms;
	StopNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStopNetworkedVoice, &StopNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineVoiceInterface::StartNetworkedVoice ( unsigned char LocalUserNum )
{
	static UFunction* pFnStartNetworkedVoice = NULL;

	if ( ! pFnStartNetworkedVoice )
		pFnStartNetworkedVoice = (UFunction*) UObject::GObjObjects()->Data[ 29531 ];

	UOnlineVoiceInterface_execStartNetworkedVoice_Parms StartNetworkedVoice_Parms;
	StartNetworkedVoice_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnStartNetworkedVoice, &StartNetworkedVoice_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnClearPlayerTalkingDelegate = NULL;

	if ( ! pFnClearPlayerTalkingDelegate )
		pFnClearPlayerTalkingDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29529 ];

	UOnlineVoiceInterface_execClearPlayerTalkingDelegate_Parms ClearPlayerTalkingDelegate_Parms;
	memcpy ( &ClearPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0x10 );

	this->ProcessEvent ( pFnClearPlayerTalkingDelegate, &ClearPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         TalkerDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineVoiceInterface::AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate )
{
	static UFunction* pFnAddPlayerTalkingDelegate = NULL;

	if ( ! pFnAddPlayerTalkingDelegate )
		pFnAddPlayerTalkingDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29527 ];

	UOnlineVoiceInterface_execAddPlayerTalkingDelegate_Parms AddPlayerTalkingDelegate_Parms;
	memcpy ( &AddPlayerTalkingDelegate_Parms.TalkerDelegate, &TalkerDelegate, 0x10 );

	this->ProcessEvent ( pFnAddPlayerTalkingDelegate, &AddPlayerTalkingDelegate_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange
// [0x00120000] 
// Parameters infos:
// struct FUniqueNetId            Player                         ( CPF_Parm )
// unsigned long                  bIsTalking                     ( CPF_Parm )

void UOnlineVoiceInterface::OnPlayerTalkingStateChange ( struct FUniqueNetId Player, unsigned long bIsTalking )
{
	static UFunction* pFnOnPlayerTalkingStateChange = NULL;

	if ( ! pFnOnPlayerTalkingStateChange )
		pFnOnPlayerTalkingStateChange = (UFunction*) UObject::GObjObjects()->Data[ 29524 ];

	UOnlineVoiceInterface_execOnPlayerTalkingStateChange_Parms OnPlayerTalkingStateChange_Parms;
	memcpy ( &OnPlayerTalkingStateChange_Parms.Player, &Player, 0x48 );
	OnPlayerTalkingStateChange_Parms.bIsTalking = bIsTalking;

	this->ProcessEvent ( pFnOnPlayerTalkingStateChange, &OnPlayerTalkingStateChange_Parms, NULL );
};

// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bIsSystemWide                  ( CPF_OptionalParm | CPF_Parm )

bool UOnlineVoiceInterface::UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide )
{
	static UFunction* pFnUnmuteRemoteTalker = NULL;

	if ( ! pFnUnmuteRemoteTalker )
		pFnUnmuteRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 12647 ];

	UOnlineVoiceInterface_execUnmuteRemoteTalker_Parms UnmuteRemoteTalker_Parms;
	UnmuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &UnmuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x48 );
	UnmuteRemoteTalker_Parms.bIsSystemWide = bIsSystemWide;

	this->ProcessEvent ( pFnUnmuteRemoteTalker, &UnmuteRemoteTalker_Parms, NULL );

	return UnmuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bIsSystemWide                  ( CPF_OptionalParm | CPF_Parm )

bool UOnlineVoiceInterface::MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide )
{
	static UFunction* pFnMuteRemoteTalker = NULL;

	if ( ! pFnMuteRemoteTalker )
		pFnMuteRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 12641 ];

	UOnlineVoiceInterface_execMuteRemoteTalker_Parms MuteRemoteTalker_Parms;
	MuteRemoteTalker_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &MuteRemoteTalker_Parms.PlayerID, &PlayerID, 0x48 );
	MuteRemoteTalker_Parms.bIsSystemWide = bIsSystemWide;

	this->ProcessEvent ( pFnMuteRemoteTalker, &MuteRemoteTalker_Parms, NULL );

	return MuteRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// int                            Priority                       ( CPF_Parm )

bool UOnlineVoiceInterface::SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority )
{
	static UFunction* pFnSetRemoteTalkerPriority = NULL;

	if ( ! pFnSetRemoteTalkerPriority )
		pFnSetRemoteTalkerPriority = (UFunction*) UObject::GObjObjects()->Data[ 29513 ];

	UOnlineVoiceInterface_execSetRemoteTalkerPriority_Parms SetRemoteTalkerPriority_Parms;
	SetRemoteTalkerPriority_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SetRemoteTalkerPriority_Parms.PlayerID, &PlayerID, 0x48 );
	SetRemoteTalkerPriority_Parms.Priority = Priority;

	this->ProcessEvent ( pFnSetRemoteTalkerPriority, &SetRemoteTalkerPriority_Parms, NULL );

	return SetRemoteTalkerPriority_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsHeadsetPresent ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsHeadsetPresent = NULL;

	if ( ! pFnIsHeadsetPresent )
		pFnIsHeadsetPresent = (UFunction*) UObject::GObjObjects()->Data[ 29510 ];

	UOnlineVoiceInterface_execIsHeadsetPresent_Parms IsHeadsetPresent_Parms;
	IsHeadsetPresent_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsHeadsetPresent, &IsHeadsetPresent_Parms, NULL );

	return IsHeadsetPresent_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::IsRemotePlayerTalking ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnIsRemotePlayerTalking = NULL;

	if ( ! pFnIsRemotePlayerTalking )
		pFnIsRemotePlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 29507 ];

	UOnlineVoiceInterface_execIsRemotePlayerTalking_Parms IsRemotePlayerTalking_Parms;
	memcpy ( &IsRemotePlayerTalking_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnIsRemotePlayerTalking, &IsRemotePlayerTalking_Parms, NULL );

	return IsRemotePlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::IsLocalPlayerTalking ( unsigned char LocalUserNum )
{
	static UFunction* pFnIsLocalPlayerTalking = NULL;

	if ( ! pFnIsLocalPlayerTalking )
		pFnIsLocalPlayerTalking = (UFunction*) UObject::GObjObjects()->Data[ 29504 ];

	UOnlineVoiceInterface_execIsLocalPlayerTalking_Parms IsLocalPlayerTalking_Parms;
	IsLocalPlayerTalking_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnIsLocalPlayerTalking, &IsLocalPlayerTalking_Parms, NULL );

	return IsLocalPlayerTalking_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterRemoteTalker = NULL;

	if ( ! pFnUnregisterRemoteTalker )
		pFnUnregisterRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 29501 ];

	UOnlineVoiceInterface_execUnregisterRemoteTalker_Parms UnregisterRemoteTalker_Parms;
	memcpy ( &UnregisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnUnregisterRemoteTalker, &UnregisterRemoteTalker_Parms, NULL );

	return UnregisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterRemoteTalker ( struct FUniqueNetId PlayerID )
{
	static UFunction* pFnRegisterRemoteTalker = NULL;

	if ( ! pFnRegisterRemoteTalker )
		pFnRegisterRemoteTalker = (UFunction*) UObject::GObjObjects()->Data[ 29498 ];

	UOnlineVoiceInterface_execRegisterRemoteTalker_Parms RegisterRemoteTalker_Parms;
	memcpy ( &RegisterRemoteTalker_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnRegisterRemoteTalker, &RegisterRemoteTalker_Parms, NULL );

	return RegisterRemoteTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::UnregisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnUnregisterLocalTalker = NULL;

	if ( ! pFnUnregisterLocalTalker )
		pFnUnregisterLocalTalker = (UFunction*) UObject::GObjObjects()->Data[ 29495 ];

	UOnlineVoiceInterface_execUnregisterLocalTalker_Parms UnregisterLocalTalker_Parms;
	UnregisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnUnregisterLocalTalker, &UnregisterLocalTalker_Parms, NULL );

	return UnregisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineVoiceInterface::RegisterLocalTalker ( unsigned char LocalUserNum )
{
	static UFunction* pFnRegisterLocalTalker = NULL;

	if ( ! pFnRegisterLocalTalker )
		pFnRegisterLocalTalker = (UFunction*) UObject::GObjObjects()->Data[ 29492 ];

	UOnlineVoiceInterface_execRegisterLocalTalker_Parms RegisterLocalTalker_Parms;
	RegisterLocalTalker_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnRegisterLocalTalker, &RegisterLocalTalker_Parms, NULL );

	return RegisterLocalTalker_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearSaveGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::ClearSaveGames ( unsigned char LocalUserNum )
{
	static UFunction* pFnClearSaveGames = NULL;

	if ( ! pFnClearSaveGames )
		pFnClearSaveGames = (UFunction*) UObject::GObjObjects()->Data[ 27433 ];

	UOnlineContentInterface_execClearSaveGames_Parms ClearSaveGames_Parms;
	ClearSaveGames_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearSaveGames, &ClearSaveGames_Parms, NULL );

	return ClearSaveGames_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.DeleteSaveGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineContentInterface::DeleteSaveGame ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename )
{
	static UFunction* pFnDeleteSaveGame = NULL;

	if ( ! pFnDeleteSaveGame )
		pFnDeleteSaveGame = (UFunction*) UObject::GObjObjects()->Data[ 27427 ];

	UOnlineContentInterface_execDeleteSaveGame_Parms DeleteSaveGame_Parms;
	DeleteSaveGame_Parms.LocalUserNum = LocalUserNum;
	DeleteSaveGame_Parms.DeviceID = DeviceID;
	memcpy ( &DeleteSaveGame_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &DeleteSaveGame_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnDeleteSaveGame, &DeleteSaveGame_Parms, NULL );

	return DeleteSaveGame_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearWriteSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate WriteSaveGameDataCompleteDelegate )
{
	static UFunction* pFnClearWriteSaveGameDataComplete = NULL;

	if ( ! pFnClearWriteSaveGameDataComplete )
		pFnClearWriteSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27424 ];

	UOnlineContentInterface_execClearWriteSaveGameDataComplete_Parms ClearWriteSaveGameDataComplete_Parms;
	ClearWriteSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearWriteSaveGameDataComplete_Parms.WriteSaveGameDataCompleteDelegate, &WriteSaveGameDataCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearWriteSaveGameDataComplete, &ClearWriteSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddWriteSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate WriteSaveGameDataCompleteDelegate )
{
	static UFunction* pFnAddWriteSaveGameDataComplete = NULL;

	if ( ! pFnAddWriteSaveGameDataComplete )
		pFnAddWriteSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27421 ];

	UOnlineContentInterface_execAddWriteSaveGameDataComplete_Parms AddWriteSaveGameDataComplete_Parms;
	AddWriteSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddWriteSaveGameDataComplete_Parms.WriteSaveGameDataCompleteDelegate, &WriteSaveGameDataCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddWriteSaveGameDataComplete, &AddWriteSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::OnWriteSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName )
{
	static UFunction* pFnOnWriteSaveGameDataComplete = NULL;

	if ( ! pFnOnWriteSaveGameDataComplete )
		pFnOnWriteSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27414 ];

	UOnlineContentInterface_execOnWriteSaveGameDataComplete_Parms OnWriteSaveGameDataComplete_Parms;
	OnWriteSaveGameDataComplete_Parms.bWasSuccessful = bWasSuccessful;
	OnWriteSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	OnWriteSaveGameDataComplete_Parms.DeviceID = DeviceID;
	memcpy ( &OnWriteSaveGameDataComplete_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &OnWriteSaveGameDataComplete_Parms.Filename, &Filename, 0xC );
	memcpy ( &OnWriteSaveGameDataComplete_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnOnWriteSaveGameDataComplete, &OnWriteSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.WriteSaveGameData
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        SaveGameData                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineContentInterface::WriteSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, TArray< unsigned char >* SaveGameData )
{
	static UFunction* pFnWriteSaveGameData = NULL;

	if ( ! pFnWriteSaveGameData )
		pFnWriteSaveGameData = (UFunction*) UObject::GObjObjects()->Data[ 27405 ];

	UOnlineContentInterface_execWriteSaveGameData_Parms WriteSaveGameData_Parms;
	WriteSaveGameData_Parms.LocalUserNum = LocalUserNum;
	WriteSaveGameData_Parms.DeviceID = DeviceID;
	memcpy ( &WriteSaveGameData_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &WriteSaveGameData_Parms.Filename, &Filename, 0xC );
	memcpy ( &WriteSaveGameData_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnWriteSaveGameData, &WriteSaveGameData_Parms, NULL );

	if ( SaveGameData )
		memcpy ( SaveGameData, &WriteSaveGameData_Parms.SaveGameData, 0xC );

	return WriteSaveGameData_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearReadSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate )
{
	static UFunction* pFnClearReadSaveGameDataComplete = NULL;

	if ( ! pFnClearReadSaveGameDataComplete )
		pFnClearReadSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27402 ];

	UOnlineContentInterface_execClearReadSaveGameDataComplete_Parms ClearReadSaveGameDataComplete_Parms;
	ClearReadSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadSaveGameDataComplete_Parms.ReadSaveGameDataCompleteDelegate, &ReadSaveGameDataCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadSaveGameDataComplete, &ClearReadSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddReadSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate )
{
	static UFunction* pFnAddReadSaveGameDataComplete = NULL;

	if ( ! pFnAddReadSaveGameDataComplete )
		pFnAddReadSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27399 ];

	UOnlineContentInterface_execAddReadSaveGameDataComplete_Parms AddReadSaveGameDataComplete_Parms;
	AddReadSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadSaveGameDataComplete_Parms.ReadSaveGameDataCompleteDelegate, &ReadSaveGameDataCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadSaveGameDataComplete, &AddReadSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::OnReadSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName )
{
	static UFunction* pFnOnReadSaveGameDataComplete = NULL;

	if ( ! pFnOnReadSaveGameDataComplete )
		pFnOnReadSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27392 ];

	UOnlineContentInterface_execOnReadSaveGameDataComplete_Parms OnReadSaveGameDataComplete_Parms;
	OnReadSaveGameDataComplete_Parms.bWasSuccessful = bWasSuccessful;
	OnReadSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadSaveGameDataComplete_Parms.DeviceID = DeviceID;
	memcpy ( &OnReadSaveGameDataComplete_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &OnReadSaveGameDataComplete_Parms.Filename, &Filename, 0xC );
	memcpy ( &OnReadSaveGameDataComplete_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnOnReadSaveGameDataComplete, &OnReadSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.GetSaveGameData
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  bIsValid                       ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        SaveGameData                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineContentInterface::GetSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, unsigned char* bIsValid, TArray< unsigned char >* SaveGameData )
{
	static UFunction* pFnGetSaveGameData = NULL;

	if ( ! pFnGetSaveGameData )
		pFnGetSaveGameData = (UFunction*) UObject::GObjObjects()->Data[ 27382 ];

	UOnlineContentInterface_execGetSaveGameData_Parms GetSaveGameData_Parms;
	GetSaveGameData_Parms.LocalUserNum = LocalUserNum;
	GetSaveGameData_Parms.DeviceID = DeviceID;
	memcpy ( &GetSaveGameData_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &GetSaveGameData_Parms.Filename, &Filename, 0xC );
	memcpy ( &GetSaveGameData_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnGetSaveGameData, &GetSaveGameData_Parms, NULL );

	if ( bIsValid )
		*bIsValid = GetSaveGameData_Parms.bIsValid;

	if ( SaveGameData )
		memcpy ( SaveGameData, &GetSaveGameData_Parms.SaveGameData, 0xC );

	return GetSaveGameData_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadSaveGameData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineContentInterface::ReadSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName )
{
	static UFunction* pFnReadSaveGameData = NULL;

	if ( ! pFnReadSaveGameData )
		pFnReadSaveGameData = (UFunction*) UObject::GObjObjects()->Data[ 27375 ];

	UOnlineContentInterface_execReadSaveGameData_Parms ReadSaveGameData_Parms;
	ReadSaveGameData_Parms.LocalUserNum = LocalUserNum;
	ReadSaveGameData_Parms.DeviceID = DeviceID;
	memcpy ( &ReadSaveGameData_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &ReadSaveGameData_Parms.Filename, &Filename, 0xC );
	memcpy ( &ReadSaveGameData_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnReadSaveGameData, &ReadSaveGameData_Parms, NULL );

	return ReadSaveGameData_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// [0x00420000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            NewDownloads                   ( CPF_Parm | CPF_OutParm )
// int                            TotalDownloads                 ( CPF_Parm | CPF_OutParm )

void UOnlineContentInterface::GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads )
{
	static UFunction* pFnGetAvailableDownloadCounts = NULL;

	if ( ! pFnGetAvailableDownloadCounts )
		pFnGetAvailableDownloadCounts = (UFunction*) UObject::GObjObjects()->Data[ 27371 ];

	UOnlineContentInterface_execGetAvailableDownloadCounts_Parms GetAvailableDownloadCounts_Parms;
	GetAvailableDownloadCounts_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetAvailableDownloadCounts, &GetAvailableDownloadCounts_Parms, NULL );

	if ( NewDownloads )
		*NewDownloads = GetAvailableDownloadCounts_Parms.NewDownloads;

	if ( TotalDownloads )
		*TotalDownloads = GetAvailableDownloadCounts_Parms.TotalDownloads;
};

// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnClearQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnClearQueryAvailableDownloadsComplete )
		pFnClearQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27368 ];

	UOnlineContentInterface_execClearQueryAvailableDownloadsComplete_Parms ClearQueryAvailableDownloadsComplete_Parms;
	ClearQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0x10 );

	this->ProcessEvent ( pFnClearQueryAvailableDownloadsComplete, &ClearQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         QueryDownloadsDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate )
{
	static UFunction* pFnAddQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnAddQueryAvailableDownloadsComplete )
		pFnAddQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27365 ];

	UOnlineContentInterface_execAddQueryAvailableDownloadsComplete_Parms AddQueryAvailableDownloadsComplete_Parms;
	AddQueryAvailableDownloadsComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddQueryAvailableDownloadsComplete_Parms.QueryDownloadsDelegate, &QueryDownloadsDelegate, 0x10 );

	this->ProcessEvent ( pFnAddQueryAvailableDownloadsComplete, &AddQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnQueryAvailableDownloadsComplete = NULL;

	if ( ! pFnOnQueryAvailableDownloadsComplete )
		pFnOnQueryAvailableDownloadsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27363 ];

	UOnlineContentInterface_execOnQueryAvailableDownloadsComplete_Parms OnQueryAvailableDownloadsComplete_Parms;
	OnQueryAvailableDownloadsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnQueryAvailableDownloadsComplete, &OnQueryAvailableDownloadsComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            CategoryMask                   ( CPF_OptionalParm | CPF_Parm )

bool UOnlineContentInterface::QueryAvailableDownloads ( unsigned char LocalUserNum, int CategoryMask )
{
	static UFunction* pFnQueryAvailableDownloads = NULL;

	if ( ! pFnQueryAvailableDownloads )
		pFnQueryAvailableDownloads = (UFunction*) UObject::GObjObjects()->Data[ 27359 ];

	UOnlineContentInterface_execQueryAvailableDownloads_Parms QueryAvailableDownloads_Parms;
	QueryAvailableDownloads_Parms.LocalUserNum = LocalUserNum;
	QueryAvailableDownloads_Parms.CategoryMask = CategoryMask;

	this->ProcessEvent ( pFnQueryAvailableDownloads, &QueryAvailableDownloads_Parms, NULL );

	return QueryAvailableDownloads_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlineContentInterface::ClearCrossTitleSaveGames ( unsigned char LocalUserNum )
{
	static UFunction* pFnClearCrossTitleSaveGames = NULL;

	if ( ! pFnClearCrossTitleSaveGames )
		pFnClearCrossTitleSaveGames = (UFunction*) UObject::GObjObjects()->Data[ 27356 ];

	UOnlineContentInterface_execClearCrossTitleSaveGames_Parms ClearCrossTitleSaveGames_Parms;
	ClearCrossTitleSaveGames_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearCrossTitleSaveGames, &ClearCrossTitleSaveGames_Parms, NULL );

	return ClearCrossTitleSaveGames_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearReadCrossTitleSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate )
{
	static UFunction* pFnClearReadCrossTitleSaveGameDataComplete = NULL;

	if ( ! pFnClearReadCrossTitleSaveGameDataComplete )
		pFnClearReadCrossTitleSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27353 ];

	UOnlineContentInterface_execClearReadCrossTitleSaveGameDataComplete_Parms ClearReadCrossTitleSaveGameDataComplete_Parms;
	ClearReadCrossTitleSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadCrossTitleSaveGameDataComplete_Parms.ReadSaveGameDataCompleteDelegate, &ReadSaveGameDataCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadCrossTitleSaveGameDataComplete, &ClearReadCrossTitleSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddReadCrossTitleSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate )
{
	static UFunction* pFnAddReadCrossTitleSaveGameDataComplete = NULL;

	if ( ! pFnAddReadCrossTitleSaveGameDataComplete )
		pFnAddReadCrossTitleSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27350 ];

	UOnlineContentInterface_execAddReadCrossTitleSaveGameDataComplete_Parms AddReadCrossTitleSaveGameDataComplete_Parms;
	AddReadCrossTitleSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadCrossTitleSaveGameDataComplete_Parms.ReadSaveGameDataCompleteDelegate, &ReadSaveGameDataCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadCrossTitleSaveGameDataComplete, &AddReadCrossTitleSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::OnReadCrossTitleSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName )
{
	static UFunction* pFnOnReadCrossTitleSaveGameDataComplete = NULL;

	if ( ! pFnOnReadCrossTitleSaveGameDataComplete )
		pFnOnReadCrossTitleSaveGameDataComplete = (UFunction*) UObject::GObjObjects()->Data[ 27342 ];

	UOnlineContentInterface_execOnReadCrossTitleSaveGameDataComplete_Parms OnReadCrossTitleSaveGameDataComplete_Parms;
	OnReadCrossTitleSaveGameDataComplete_Parms.bWasSuccessful = bWasSuccessful;
	OnReadCrossTitleSaveGameDataComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadCrossTitleSaveGameDataComplete_Parms.DeviceID = DeviceID;
	OnReadCrossTitleSaveGameDataComplete_Parms.TitleId = TitleId;
	memcpy ( &OnReadCrossTitleSaveGameDataComplete_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &OnReadCrossTitleSaveGameDataComplete_Parms.Filename, &Filename, 0xC );
	memcpy ( &OnReadCrossTitleSaveGameDataComplete_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnOnReadCrossTitleSaveGameDataComplete, &OnReadCrossTitleSaveGameDataComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  bIsValid                       ( CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        SaveGameData                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineContentInterface::GetCrossTitleSaveGameData ( unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, unsigned char* bIsValid, TArray< unsigned char >* SaveGameData )
{
	static UFunction* pFnGetCrossTitleSaveGameData = NULL;

	if ( ! pFnGetCrossTitleSaveGameData )
		pFnGetCrossTitleSaveGameData = (UFunction*) UObject::GObjObjects()->Data[ 27331 ];

	UOnlineContentInterface_execGetCrossTitleSaveGameData_Parms GetCrossTitleSaveGameData_Parms;
	GetCrossTitleSaveGameData_Parms.LocalUserNum = LocalUserNum;
	GetCrossTitleSaveGameData_Parms.DeviceID = DeviceID;
	GetCrossTitleSaveGameData_Parms.TitleId = TitleId;
	memcpy ( &GetCrossTitleSaveGameData_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &GetCrossTitleSaveGameData_Parms.Filename, &Filename, 0xC );
	memcpy ( &GetCrossTitleSaveGameData_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnGetCrossTitleSaveGameData, &GetCrossTitleSaveGameData_Parms, NULL );

	if ( bIsValid )
		*bIsValid = GetCrossTitleSaveGameData_Parms.bIsValid;

	if ( SaveGameData )
		memcpy ( SaveGameData, &GetCrossTitleSaveGameData_Parms.SaveGameData, 0xC );

	return GetCrossTitleSaveGameData_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            DeviceID                       ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )
// struct FString                 FriendlyName                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 SaveFileName                   ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineContentInterface::ReadCrossTitleSaveGameData ( unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName )
{
	static UFunction* pFnReadCrossTitleSaveGameData = NULL;

	if ( ! pFnReadCrossTitleSaveGameData )
		pFnReadCrossTitleSaveGameData = (UFunction*) UObject::GObjObjects()->Data[ 27323 ];

	UOnlineContentInterface_execReadCrossTitleSaveGameData_Parms ReadCrossTitleSaveGameData_Parms;
	ReadCrossTitleSaveGameData_Parms.LocalUserNum = LocalUserNum;
	ReadCrossTitleSaveGameData_Parms.DeviceID = DeviceID;
	ReadCrossTitleSaveGameData_Parms.TitleId = TitleId;
	memcpy ( &ReadCrossTitleSaveGameData_Parms.FriendlyName, &FriendlyName, 0xC );
	memcpy ( &ReadCrossTitleSaveGameData_Parms.Filename, &Filename, 0xC );
	memcpy ( &ReadCrossTitleSaveGameData_Parms.SaveFileName, &SaveFileName, 0xC );

	this->ProcessEvent ( pFnReadCrossTitleSaveGameData, &ReadCrossTitleSaveGameData_Parms, NULL );

	return ReadCrossTitleSaveGameData_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearReadCrossTitleContentCompleteDelegate ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnClearReadCrossTitleContentCompleteDelegate = NULL;

	if ( ! pFnClearReadCrossTitleContentCompleteDelegate )
		pFnClearReadCrossTitleContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27319 ];

	UOnlineContentInterface_execClearReadCrossTitleContentCompleteDelegate_Parms ClearReadCrossTitleContentCompleteDelegate_Parms;
	ClearReadCrossTitleContentCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	ClearReadCrossTitleContentCompleteDelegate_Parms.ContentType = ContentType;
	memcpy ( &ClearReadCrossTitleContentCompleteDelegate_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadCrossTitleContentCompleteDelegate, &ClearReadCrossTitleContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddReadCrossTitleContentCompleteDelegate ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnAddReadCrossTitleContentCompleteDelegate = NULL;

	if ( ! pFnAddReadCrossTitleContentCompleteDelegate )
		pFnAddReadCrossTitleContentCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27315 ];

	UOnlineContentInterface_execAddReadCrossTitleContentCompleteDelegate_Parms AddReadCrossTitleContentCompleteDelegate_Parms;
	AddReadCrossTitleContentCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	AddReadCrossTitleContentCompleteDelegate_Parms.ContentType = ContentType;
	memcpy ( &AddReadCrossTitleContentCompleteDelegate_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadCrossTitleContentCompleteDelegate, &AddReadCrossTitleContentCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnReadCrossTitleContentComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadCrossTitleContentComplete = NULL;

	if ( ! pFnOnReadCrossTitleContentComplete )
		pFnOnReadCrossTitleContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 27313 ];

	UOnlineContentInterface_execOnReadCrossTitleContentComplete_Parms OnReadCrossTitleContentComplete_Parms;
	OnReadCrossTitleContentComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadCrossTitleContentComplete, &OnReadCrossTitleContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.GetCrossTitleContentList
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// TArray< struct FOnlineCrossTitleContent > ContentList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlineContentInterface::GetCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType, TArray< struct FOnlineCrossTitleContent >* ContentList )
{
	static UFunction* pFnGetCrossTitleContentList = NULL;

	if ( ! pFnGetCrossTitleContentList )
		pFnGetCrossTitleContentList = (UFunction*) UObject::GObjObjects()->Data[ 27307 ];

	UOnlineContentInterface_execGetCrossTitleContentList_Parms GetCrossTitleContentList_Parms;
	GetCrossTitleContentList_Parms.LocalUserNum = LocalUserNum;
	GetCrossTitleContentList_Parms.ContentType = ContentType;

	this->ProcessEvent ( pFnGetCrossTitleContentList, &GetCrossTitleContentList_Parms, NULL );

	if ( ContentList )
		memcpy ( ContentList, &GetCrossTitleContentList_Parms.ContentList, 0xC );

	return GetCrossTitleContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearCrossTitleContentList
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )

void UOnlineContentInterface::ClearCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType )
{
	static UFunction* pFnClearCrossTitleContentList = NULL;

	if ( ! pFnClearCrossTitleContentList )
		pFnClearCrossTitleContentList = (UFunction*) UObject::GObjObjects()->Data[ 27304 ];

	UOnlineContentInterface_execClearCrossTitleContentList_Parms ClearCrossTitleContentList_Parms;
	ClearCrossTitleContentList_Parms.LocalUserNum = LocalUserNum;
	ClearCrossTitleContentList_Parms.ContentType = ContentType;

	this->ProcessEvent ( pFnClearCrossTitleContentList, &ClearCrossTitleContentList_Parms, NULL );
};

// Function Engine.OnlineContentInterface.ReadCrossTitleContentList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )
// int                            DeviceID                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineContentInterface::ReadCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType, int TitleId, int DeviceID )
{
	static UFunction* pFnReadCrossTitleContentList = NULL;

	if ( ! pFnReadCrossTitleContentList )
		pFnReadCrossTitleContentList = (UFunction*) UObject::GObjObjects()->Data[ 27298 ];

	UOnlineContentInterface_execReadCrossTitleContentList_Parms ReadCrossTitleContentList_Parms;
	ReadCrossTitleContentList_Parms.LocalUserNum = LocalUserNum;
	ReadCrossTitleContentList_Parms.ContentType = ContentType;
	ReadCrossTitleContentList_Parms.TitleId = TitleId;
	ReadCrossTitleContentList_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnReadCrossTitleContentList, &ReadCrossTitleContentList_Parms, NULL );

	return ReadCrossTitleContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.GetContentList
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// TArray< struct FOnlineContent > ContentList                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlineContentInterface::GetContentList ( unsigned char LocalUserNum, unsigned char ContentType, TArray< struct FOnlineContent >* ContentList )
{
	static UFunction* pFnGetContentList = NULL;

	if ( ! pFnGetContentList )
		pFnGetContentList = (UFunction*) UObject::GObjObjects()->Data[ 27292 ];

	UOnlineContentInterface_execGetContentList_Parms GetContentList_Parms;
	GetContentList_Parms.LocalUserNum = LocalUserNum;
	GetContentList_Parms.ContentType = ContentType;

	this->ProcessEvent ( pFnGetContentList, &GetContentList_Parms, NULL );

	if ( ContentList )
		memcpy ( ContentList, &GetContentList_Parms.ContentList, 0xC );

	return GetContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearContentList
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )

void UOnlineContentInterface::ClearContentList ( unsigned char LocalUserNum, unsigned char ContentType )
{
	static UFunction* pFnClearContentList = NULL;

	if ( ! pFnClearContentList )
		pFnClearContentList = (UFunction*) UObject::GObjObjects()->Data[ 27289 ];

	UOnlineContentInterface_execClearContentList_Parms ClearContentList_Parms;
	ClearContentList_Parms.LocalUserNum = LocalUserNum;
	ClearContentList_Parms.ContentType = ContentType;

	this->ProcessEvent ( pFnClearContentList, &ClearContentList_Parms, NULL );
};

// Function Engine.OnlineContentInterface.ReadContentList
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// int                            DeviceID                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineContentInterface::ReadContentList ( unsigned char LocalUserNum, unsigned char ContentType, int DeviceID )
{
	static UFunction* pFnReadContentList = NULL;

	if ( ! pFnReadContentList )
		pFnReadContentList = (UFunction*) UObject::GObjObjects()->Data[ 27284 ];

	UOnlineContentInterface_execReadContentList_Parms ReadContentList_Parms;
	ReadContentList_Parms.LocalUserNum = LocalUserNum;
	ReadContentList_Parms.ContentType = ContentType;
	ReadContentList_Parms.DeviceID = DeviceID;

	this->ProcessEvent ( pFnReadContentList, &ReadContentList_Parms, NULL );

	return ReadContentList_Parms.ReturnValue;
};

// Function Engine.OnlineContentInterface.ClearReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::ClearReadContentComplete ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnClearReadContentComplete = NULL;

	if ( ! pFnClearReadContentComplete )
		pFnClearReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 27280 ];

	UOnlineContentInterface_execClearReadContentComplete_Parms ClearReadContentComplete_Parms;
	ClearReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	ClearReadContentComplete_Parms.ContentType = ContentType;
	memcpy ( &ClearReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadContentComplete, &ClearReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddReadContentComplete
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ContentType                    ( CPF_Parm )
// struct FScriptDelegate         ReadContentCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineContentInterface::AddReadContentComplete ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate )
{
	static UFunction* pFnAddReadContentComplete = NULL;

	if ( ! pFnAddReadContentComplete )
		pFnAddReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 27276 ];

	UOnlineContentInterface_execAddReadContentComplete_Parms AddReadContentComplete_Parms;
	AddReadContentComplete_Parms.LocalUserNum = LocalUserNum;
	AddReadContentComplete_Parms.ContentType = ContentType;
	memcpy ( &AddReadContentComplete_Parms.ReadContentCompleteDelegate, &ReadContentCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadContentComplete, &AddReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnReadContentComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineContentInterface::OnReadContentComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadContentComplete = NULL;

	if ( ! pFnOnReadContentComplete )
		pFnOnReadContentComplete = (UFunction*) UObject::GObjObjects()->Data[ 27274 ];

	UOnlineContentInterface_execOnReadContentComplete_Parms OnReadContentComplete_Parms;
	OnReadContentComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadContentComplete, &OnReadContentComplete_Parms, NULL );
};

// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnClearContentChangeDelegate = NULL;

	if ( ! pFnClearContentChangeDelegate )
		pFnClearContentChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27271 ];

	UOnlineContentInterface_execClearContentChangeDelegate_Parms ClearContentChangeDelegate_Parms;
	memcpy ( &ClearContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0x10 );
	ClearContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnClearContentChangeDelegate, &ClearContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// [0x00024000] 
// Parameters infos:
// struct FScriptDelegate         ContentDelegate                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineContentInterface::AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum )
{
	static UFunction* pFnAddContentChangeDelegate = NULL;

	if ( ! pFnAddContentChangeDelegate )
		pFnAddContentChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27268 ];

	UOnlineContentInterface_execAddContentChangeDelegate_Parms AddContentChangeDelegate_Parms;
	memcpy ( &AddContentChangeDelegate_Parms.ContentDelegate, &ContentDelegate, 0x10 );
	AddContentChangeDelegate_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnAddContentChangeDelegate, &AddContentChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineContentInterface.OnContentChange
// [0x00120000] 
// Parameters infos:

void UOnlineContentInterface::OnContentChange ( )
{
	static UFunction* pFnOnContentChange = NULL;

	if ( ! pFnOnContentChange )
		pFnOnContentChange = (UFunction*) UObject::GObjObjects()->Data[ 27267 ];

	UOnlineContentInterface_execOnContentChange_Parms OnContentChange_Parms;

	this->ProcessEvent ( pFnOnContentChange, &OnContentChange_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.ClearHostStartPlayTogetherDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearHostStartPlayTogetherDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearHostStartPlayTogetherDelegate = NULL;

	if ( ! pFnClearHostStartPlayTogetherDelegate )
		pFnClearHostStartPlayTogetherDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27927 ];

	UOnlineLobbyInterface_execClearHostStartPlayTogetherDelegate_Parms ClearHostStartPlayTogetherDelegate_Parms;
	memcpy ( &ClearHostStartPlayTogetherDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearHostStartPlayTogetherDelegate, &ClearHostStartPlayTogetherDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddHostStartPlayTogetherDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddHostStartPlayTogetherDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddHostStartPlayTogetherDelegate = NULL;

	if ( ! pFnAddHostStartPlayTogetherDelegate )
		pFnAddHostStartPlayTogetherDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27928 ];

	UOnlineLobbyInterface_execAddHostStartPlayTogetherDelegate_Parms AddHostStartPlayTogetherDelegate_Parms;
	memcpy ( &AddHostStartPlayTogetherDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddHostStartPlayTogetherDelegate, &AddHostStartPlayTogetherDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnHostStartPlayTogether
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )

void UOnlineLobbyInterface::OnHostStartPlayTogether ( unsigned char LocalUserNum )
{
	static UFunction* pFnOnHostStartPlayTogether = NULL;

	if ( ! pFnOnHostStartPlayTogether )
		pFnOnHostStartPlayTogether = (UFunction*) UObject::GObjObjects()->Data[ 27930 ];

	UOnlineLobbyInterface_execOnHostStartPlayTogether_Parms OnHostStartPlayTogether_Parms;
	OnHostStartPlayTogether_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnHostStartPlayTogether, &OnHostStartPlayTogether_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.ClearLobbyErrorDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyErrorDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyErrorDelegate ( struct FScriptDelegate LobbyErrorDelegate )
{
	static UFunction* pFnClearLobbyErrorDelegate = NULL;

	if ( ! pFnClearLobbyErrorDelegate )
		pFnClearLobbyErrorDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27925 ];

	UOnlineLobbyInterface_execClearLobbyErrorDelegate_Parms ClearLobbyErrorDelegate_Parms;
	memcpy ( &ClearLobbyErrorDelegate_Parms.LobbyErrorDelegate, &LobbyErrorDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyErrorDelegate, &ClearLobbyErrorDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyErrorDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyErrorDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyErrorDelegate ( struct FScriptDelegate LobbyErrorDelegate )
{
	static UFunction* pFnAddLobbyErrorDelegate = NULL;

	if ( ! pFnAddLobbyErrorDelegate )
		pFnAddLobbyErrorDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27923 ];

	UOnlineLobbyInterface_execAddLobbyErrorDelegate_Parms AddLobbyErrorDelegate_Parms;
	memcpy ( &AddLobbyErrorDelegate_Parms.LobbyErrorDelegate, &LobbyErrorDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyErrorDelegate, &AddLobbyErrorDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyError
// [0x00120000] 
// Parameters infos:
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnLobbyError ( struct FString Error )
{
	static UFunction* pFnOnLobbyError = NULL;

	if ( ! pFnOnLobbyError )
		pFnOnLobbyError = (UFunction*) UObject::GObjObjects()->Data[ 27920 ];

	UOnlineLobbyInterface_execOnLobbyError_Parms OnLobbyError_Parms;
	memcpy ( &OnLobbyError_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnLobbyError, &OnLobbyError_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.ClearLobbySessionCreatedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbySessionCreatedDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbySessionCreatedDelegate ( struct FScriptDelegate LobbySessionCreatedDelegate )
{
	static UFunction* pFnClearLobbySessionCreatedDelegate = NULL;

	if ( ! pFnClearLobbySessionCreatedDelegate )
		pFnClearLobbySessionCreatedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27922 ];

	UOnlineLobbyInterface_execClearLobbySessionCreatedDelegate_Parms ClearLobbySessionCreatedDelegate_Parms;
	memcpy ( &ClearLobbySessionCreatedDelegate_Parms.LobbySessionCreatedDelegate, &LobbySessionCreatedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbySessionCreatedDelegate, &ClearLobbySessionCreatedDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbySessionCreatedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbySessionCreatedDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbySessionCreatedDelegate ( struct FScriptDelegate LobbySessionCreatedDelegate )
{
	static UFunction* pFnAddLobbySessionCreatedDelegate = NULL;

	if ( ! pFnAddLobbySessionCreatedDelegate )
		pFnAddLobbySessionCreatedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27933 ];

	UOnlineLobbyInterface_execAddLobbySessionCreatedDelegate_Parms AddLobbySessionCreatedDelegate_Parms;
	memcpy ( &AddLobbySessionCreatedDelegate_Parms.LobbySessionCreatedDelegate, &LobbySessionCreatedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbySessionCreatedDelegate, &AddLobbySessionCreatedDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbySessionCreated
// [0x00120000] 
// Parameters infos:

void UOnlineLobbyInterface::OnLobbySessionCreated ( )
{
	static UFunction* pFnOnLobbySessionCreated = NULL;

	if ( ! pFnOnLobbySessionCreated )
		pFnOnLobbySessionCreated = (UFunction*) UObject::GObjObjects()->Data[ 27935 ];

	UOnlineLobbyInterface_execOnLobbySessionCreated_Parms OnLobbySessionCreated_Parms;

	this->ProcessEvent ( pFnOnLobbySessionCreated, &OnLobbySessionCreated_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.RemoveLocalPlayerFromSession
// [0x00420000] 
// Parameters infos:
// struct FUniqueNetId            PartyMember                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::RemoveLocalPlayerFromSession ( struct FUniqueNetId* PartyMember )
{
	static UFunction* pFnRemoveLocalPlayerFromSession = NULL;

	if ( ! pFnRemoveLocalPlayerFromSession )
		pFnRemoveLocalPlayerFromSession = (UFunction*) UObject::GObjObjects()->Data[ 27918 ];

	UOnlineLobbyInterface_execRemoveLocalPlayerFromSession_Parms RemoveLocalPlayerFromSession_Parms;

	this->ProcessEvent ( pFnRemoveLocalPlayerFromSession, &RemoveLocalPlayerFromSession_Parms, NULL );

	if ( PartyMember )
		memcpy ( PartyMember, &RemoveLocalPlayerFromSession_Parms.PartyMember, 0x48 );
};

// Function Engine.OnlineLobbyInterface.AddLocalPartyMemberToSession
// [0x00420000] 
// Parameters infos:
// struct FUniqueNetId            NewPartyMember                 ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::AddLocalPartyMemberToSession ( struct FUniqueNetId* NewPartyMember )
{
	static UFunction* pFnAddLocalPartyMemberToSession = NULL;

	if ( ! pFnAddLocalPartyMemberToSession )
		pFnAddLocalPartyMemberToSession = (UFunction*) UObject::GObjObjects()->Data[ 27916 ];

	UOnlineLobbyInterface_execAddLocalPartyMemberToSession_Parms AddLocalPartyMemberToSession_Parms;

	this->ProcessEvent ( pFnAddLocalPartyMemberToSession, &AddLocalPartyMemberToSession_Parms, NULL );

	if ( NewPartyMember )
		memcpy ( NewPartyMember, &AddLocalPartyMemberToSession_Parms.NewPartyMember, 0x48 );
};

// Function Engine.OnlineLobbyInterface.KickPlayer
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Reason                         ( CPF_Parm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::KickPlayer ( unsigned char Reason, struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* PlayerID )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 27911 ];

	UOnlineLobbyInterface_execKickPlayer_Parms KickPlayer_Parms;
	KickPlayer_Parms.Reason = Reason;

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &KickPlayer_Parms.LobbyId, 0xC );

	if ( PlayerID )
		memcpy ( PlayerID, &KickPlayer_Parms.PlayerID, 0x48 );

	return KickPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearLobbyDestroyedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyDestroyedDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyDestroyedDelegate ( struct FScriptDelegate LobbyDestroyedDelegate )
{
	static UFunction* pFnClearLobbyDestroyedDelegate = NULL;

	if ( ! pFnClearLobbyDestroyedDelegate )
		pFnClearLobbyDestroyedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27909 ];

	UOnlineLobbyInterface_execClearLobbyDestroyedDelegate_Parms ClearLobbyDestroyedDelegate_Parms;
	memcpy ( &ClearLobbyDestroyedDelegate_Parms.LobbyDestroyedDelegate, &LobbyDestroyedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyDestroyedDelegate, &ClearLobbyDestroyedDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyDestroyedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyDestroyedDelegate         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyDestroyedDelegate ( struct FScriptDelegate LobbyDestroyedDelegate )
{
	static UFunction* pFnAddLobbyDestroyedDelegate = NULL;

	if ( ! pFnAddLobbyDestroyedDelegate )
		pFnAddLobbyDestroyedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27907 ];

	UOnlineLobbyInterface_execAddLobbyDestroyedDelegate_Parms AddLobbyDestroyedDelegate_Parms;
	memcpy ( &AddLobbyDestroyedDelegate_Parms.LobbyDestroyedDelegate, &LobbyDestroyedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyDestroyedDelegate, &AddLobbyDestroyedDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyDestroyed
// [0x00520000] 
// Parameters infos:
// unsigned char                  Reason                         ( CPF_Parm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::OnLobbyDestroyed ( unsigned char Reason, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnOnLobbyDestroyed = NULL;

	if ( ! pFnOnLobbyDestroyed )
		pFnOnLobbyDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 27904 ];

	UOnlineLobbyInterface_execOnLobbyDestroyed_Parms OnLobbyDestroyed_Parms;
	OnLobbyDestroyed_Parms.Reason = Reason;

	this->ProcessEvent ( pFnOnLobbyDestroyed, &OnLobbyDestroyed_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &OnLobbyDestroyed_Parms.LobbyId, 0xC );
};

// Function Engine.OnlineLobbyInterface.GetLobbyMembers
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< struct FLobbyMember >  Members                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineLobbyInterface::GetLobbyMembers ( struct FUniqueLobbyId* LobbyId, TArray< struct FLobbyMember >* Members )
{
	static UFunction* pFnGetLobbyMembers = NULL;

	if ( ! pFnGetLobbyMembers )
		pFnGetLobbyMembers = (UFunction*) UObject::GObjObjects()->Data[ 27898 ];

	UOnlineLobbyInterface_execGetLobbyMembers_Parms GetLobbyMembers_Parms;

	this->ProcessEvent ( pFnGetLobbyMembers, &GetLobbyMembers_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &GetLobbyMembers_Parms.LobbyId, 0xC );

	if ( Members )
		memcpy ( Members, &GetLobbyMembers_Parms.Members, 0xC );

	return GetLobbyMembers_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.PlayTogether_Invite
// [0x00420000] 
// Parameters infos:
// struct FString                 InviteMessage                  ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::PlayTogether_Invite ( struct FString InviteMessage, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnPlayTogether_Invite = NULL;

	if ( ! pFnPlayTogether_Invite )
		pFnPlayTogether_Invite = (UFunction*) UObject::GObjObjects()->Data[ 27903 ];

	UOnlineLobbyInterface_execPlayTogether_Invite_Parms PlayTogether_Invite_Parms;
	memcpy ( &PlayTogether_Invite_Parms.InviteMessage, &InviteMessage, 0xC );

	this->ProcessEvent ( pFnPlayTogether_Invite, &PlayTogether_Invite_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &PlayTogether_Invite_Parms.LobbyId, 0xC );
};

// Function Engine.OnlineLobbyInterface.ShowInviteUI
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Const | CPF_Parm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::ShowInviteUI ( unsigned char LocalUserNum, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnShowInviteUI = NULL;

	if ( ! pFnShowInviteUI )
		pFnShowInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 27894 ];

	UOnlineLobbyInterface_execShowInviteUI_Parms ShowInviteUI_Parms;
	ShowInviteUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowInviteUI, &ShowInviteUI_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &ShowInviteUI_Parms.LobbyId, 0xC );

	return ShowInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearLobbyInviteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyInviteDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyInviteDelegate ( struct FScriptDelegate LobbyInviteDelegate )
{
	static UFunction* pFnClearLobbyInviteDelegate = NULL;

	if ( ! pFnClearLobbyInviteDelegate )
		pFnClearLobbyInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27892 ];

	UOnlineLobbyInterface_execClearLobbyInviteDelegate_Parms ClearLobbyInviteDelegate_Parms;
	memcpy ( &ClearLobbyInviteDelegate_Parms.LobbyInviteDelegate, &LobbyInviteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyInviteDelegate, &ClearLobbyInviteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyInviteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyInviteDelegate            ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyInviteDelegate ( struct FScriptDelegate LobbyInviteDelegate )
{
	static UFunction* pFnAddLobbyInviteDelegate = NULL;

	if ( ! pFnAddLobbyInviteDelegate )
		pFnAddLobbyInviteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27890 ];

	UOnlineLobbyInterface_execAddLobbyInviteDelegate_Parms AddLobbyInviteDelegate_Parms;
	memcpy ( &AddLobbyInviteDelegate_Parms.LobbyInviteDelegate, &LobbyInviteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyInviteDelegate, &AddLobbyInviteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyInvite
// [0x00520000] 
// Parameters infos:
// unsigned long                  bAccepted                      ( CPF_Parm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            FriendId                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::OnLobbyInvite ( unsigned long bAccepted, struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* FriendId )
{
	static UFunction* pFnOnLobbyInvite = NULL;

	if ( ! pFnOnLobbyInvite )
		pFnOnLobbyInvite = (UFunction*) UObject::GObjObjects()->Data[ 27886 ];

	UOnlineLobbyInterface_execOnLobbyInvite_Parms OnLobbyInvite_Parms;
	OnLobbyInvite_Parms.bAccepted = bAccepted;

	this->ProcessEvent ( pFnOnLobbyInvite, &OnLobbyInvite_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &OnLobbyInvite_Parms.LobbyId, 0xC );

	if ( FriendId )
		memcpy ( FriendId, &OnLobbyInvite_Parms.FriendId, 0x48 );
};

// Function Engine.OnlineLobbyInterface.InviteToLobby
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            PlayerID                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::InviteToLobby ( struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* PlayerID )
{
	static UFunction* pFnInviteToLobby = NULL;

	if ( ! pFnInviteToLobby )
		pFnInviteToLobby = (UFunction*) UObject::GObjObjects()->Data[ 27882 ];

	UOnlineLobbyInterface_execInviteToLobby_Parms InviteToLobby_Parms;

	this->ProcessEvent ( pFnInviteToLobby, &InviteToLobby_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &InviteToLobby_Parms.LobbyId, 0xC );

	if ( PlayerID )
		memcpy ( PlayerID, &InviteToLobby_Parms.PlayerID, 0x48 );

	return InviteToLobby_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.SetLobbyOwner
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            NewOwner                       ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::SetLobbyOwner ( struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* NewOwner )
{
	static UFunction* pFnSetLobbyOwner = NULL;

	if ( ! pFnSetLobbyOwner )
		pFnSetLobbyOwner = (UFunction*) UObject::GObjObjects()->Data[ 27878 ];

	UOnlineLobbyInterface_execSetLobbyOwner_Parms SetLobbyOwner_Parms;

	this->ProcessEvent ( pFnSetLobbyOwner, &SetLobbyOwner_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SetLobbyOwner_Parms.LobbyId, 0xC );

	if ( NewOwner )
		memcpy ( NewOwner, &SetLobbyOwner_Parms.NewOwner, 0x48 );

	return SetLobbyOwner_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.SetLobbyLock
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bLocked                        ( CPF_Parm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::SetLobbyLock ( unsigned long bLocked, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnSetLobbyLock = NULL;

	if ( ! pFnSetLobbyLock )
		pFnSetLobbyLock = (UFunction*) UObject::GObjObjects()->Data[ 27874 ];

	UOnlineLobbyInterface_execSetLobbyLock_Parms SetLobbyLock_Parms;
	SetLobbyLock_Parms.bLocked = bLocked;

	this->ProcessEvent ( pFnSetLobbyLock, &SetLobbyLock_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SetLobbyLock_Parms.LobbyId, 0xC );

	return SetLobbyLock_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.SetLobbyServer
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ServerIP                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            ServerUID                      ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::SetLobbyServer ( struct FString ServerIP, struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* ServerUID )
{
	static UFunction* pFnSetLobbyServer = NULL;

	if ( ! pFnSetLobbyServer )
		pFnSetLobbyServer = (UFunction*) UObject::GObjObjects()->Data[ 27869 ];

	UOnlineLobbyInterface_execSetLobbyServer_Parms SetLobbyServer_Parms;
	memcpy ( &SetLobbyServer_Parms.ServerIP, &ServerIP, 0xC );

	this->ProcessEvent ( pFnSetLobbyServer, &SetLobbyServer_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SetLobbyServer_Parms.LobbyId, 0xC );

	if ( ServerUID )
		memcpy ( ServerUID, &SetLobbyServer_Parms.ServerUID, 0x48 );

	return SetLobbyServer_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.RemoveLobbySetting
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::RemoveLobbySetting ( struct FString Key, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnRemoveLobbySetting = NULL;

	if ( ! pFnRemoveLobbySetting )
		pFnRemoveLobbySetting = (UFunction*) UObject::GObjObjects()->Data[ 27865 ];

	UOnlineLobbyInterface_execRemoveLobbySetting_Parms RemoveLobbySetting_Parms;
	memcpy ( &RemoveLobbySetting_Parms.Key, &Key, 0xC );

	this->ProcessEvent ( pFnRemoveLobbySetting, &RemoveLobbySetting_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &RemoveLobbySetting_Parms.LobbyId, 0xC );

	return RemoveLobbySetting_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.SetLobbySetting
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::SetLobbySetting ( struct FString Key, struct FString Value, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnSetLobbySetting = NULL;

	if ( ! pFnSetLobbySetting )
		pFnSetLobbySetting = (UFunction*) UObject::GObjObjects()->Data[ 27860 ];

	UOnlineLobbyInterface_execSetLobbySetting_Parms SetLobbySetting_Parms;
	memcpy ( &SetLobbySetting_Parms.Key, &Key, 0xC );
	memcpy ( &SetLobbySetting_Parms.Value, &Value, 0xC );

	this->ProcessEvent ( pFnSetLobbySetting, &SetLobbySetting_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SetLobbySetting_Parms.LobbyId, 0xC );

	return SetLobbySetting_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.GetLobbyAdmin
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FUniqueNetId            AdminId                        ( CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::GetLobbyAdmin ( struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* AdminId )
{
	static UFunction* pFnGetLobbyAdmin = NULL;

	if ( ! pFnGetLobbyAdmin )
		pFnGetLobbyAdmin = (UFunction*) UObject::GObjObjects()->Data[ 27856 ];

	UOnlineLobbyInterface_execGetLobbyAdmin_Parms GetLobbyAdmin_Parms;

	this->ProcessEvent ( pFnGetLobbyAdmin, &GetLobbyAdmin_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &GetLobbyAdmin_Parms.LobbyId, 0xC );

	if ( AdminId )
		memcpy ( AdminId, &GetLobbyAdmin_Parms.AdminId, 0x48 );

	return GetLobbyAdmin_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearLobbyJoinGameDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyJoinGameDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyJoinGameDelegate ( struct FScriptDelegate LobbyJoinGameDelegate )
{
	static UFunction* pFnClearLobbyJoinGameDelegate = NULL;

	if ( ! pFnClearLobbyJoinGameDelegate )
		pFnClearLobbyJoinGameDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27854 ];

	UOnlineLobbyInterface_execClearLobbyJoinGameDelegate_Parms ClearLobbyJoinGameDelegate_Parms;
	memcpy ( &ClearLobbyJoinGameDelegate_Parms.LobbyJoinGameDelegate, &LobbyJoinGameDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyJoinGameDelegate, &ClearLobbyJoinGameDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyJoinGameDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyJoinGameDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyJoinGameDelegate ( struct FScriptDelegate LobbyJoinGameDelegate )
{
	static UFunction* pFnAddLobbyJoinGameDelegate = NULL;

	if ( ! pFnAddLobbyJoinGameDelegate )
		pFnAddLobbyJoinGameDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27852 ];

	UOnlineLobbyInterface_execAddLobbyJoinGameDelegate_Parms AddLobbyJoinGameDelegate_Parms;
	memcpy ( &AddLobbyJoinGameDelegate_Parms.LobbyJoinGameDelegate, &LobbyJoinGameDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyJoinGameDelegate, &AddLobbyJoinGameDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyJoinGame
// [0x00520000] 
// Parameters infos:
// struct FString                 ServerIP                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FUniqueNetId            ServerID                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::OnLobbyJoinGame ( struct FString ServerIP, struct FActiveLobbyInfo* LobbyInfo, struct FUniqueNetId* ServerID )
{
	static UFunction* pFnOnLobbyJoinGame = NULL;

	if ( ! pFnOnLobbyJoinGame )
		pFnOnLobbyJoinGame = (UFunction*) UObject::GObjObjects()->Data[ 27848 ];

	UOnlineLobbyInterface_execOnLobbyJoinGame_Parms OnLobbyJoinGame_Parms;
	memcpy ( &OnLobbyJoinGame_Parms.ServerIP, &ServerIP, 0xC );

	this->ProcessEvent ( pFnOnLobbyJoinGame, &OnLobbyJoinGame_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnLobbyJoinGame_Parms.LobbyInfo, 0x24 );

	if ( ServerID )
		memcpy ( ServerID, &OnLobbyJoinGame_Parms.ServerID, 0x48 );
};

// Function Engine.OnlineLobbyInterface.ClearLobbyReceiveBinaryDataDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyReceiveBinaryDataDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyReceiveBinaryDataDelegate ( struct FScriptDelegate LobbyReceiveBinaryDataDelegate )
{
	static UFunction* pFnClearLobbyReceiveBinaryDataDelegate = NULL;

	if ( ! pFnClearLobbyReceiveBinaryDataDelegate )
		pFnClearLobbyReceiveBinaryDataDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27846 ];

	UOnlineLobbyInterface_execClearLobbyReceiveBinaryDataDelegate_Parms ClearLobbyReceiveBinaryDataDelegate_Parms;
	memcpy ( &ClearLobbyReceiveBinaryDataDelegate_Parms.LobbyReceiveBinaryDataDelegate, &LobbyReceiveBinaryDataDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyReceiveBinaryDataDelegate, &ClearLobbyReceiveBinaryDataDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyReceiveBinaryDataDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyReceiveBinaryDataDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyReceiveBinaryDataDelegate ( struct FScriptDelegate LobbyReceiveBinaryDataDelegate )
{
	static UFunction* pFnAddLobbyReceiveBinaryDataDelegate = NULL;

	if ( ! pFnAddLobbyReceiveBinaryDataDelegate )
		pFnAddLobbyReceiveBinaryDataDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27844 ];

	UOnlineLobbyInterface_execAddLobbyReceiveBinaryDataDelegate_Parms AddLobbyReceiveBinaryDataDelegate_Parms;
	memcpy ( &AddLobbyReceiveBinaryDataDelegate_Parms.LobbyReceiveBinaryDataDelegate, &LobbyReceiveBinaryDataDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyReceiveBinaryDataDelegate, &AddLobbyReceiveBinaryDataDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyReceiveBinaryData
// [0x00520000] 
// Parameters infos:
// int                            MemberIndex                    ( CPF_Parm )
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< unsigned char >        Data                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnLobbyReceiveBinaryData ( int MemberIndex, struct FActiveLobbyInfo* LobbyInfo, TArray< unsigned char >* Data )
{
	static UFunction* pFnOnLobbyReceiveBinaryData = NULL;

	if ( ! pFnOnLobbyReceiveBinaryData )
		pFnOnLobbyReceiveBinaryData = (UFunction*) UObject::GObjObjects()->Data[ 27839 ];

	UOnlineLobbyInterface_execOnLobbyReceiveBinaryData_Parms OnLobbyReceiveBinaryData_Parms;
	OnLobbyReceiveBinaryData_Parms.MemberIndex = MemberIndex;

	this->ProcessEvent ( pFnOnLobbyReceiveBinaryData, &OnLobbyReceiveBinaryData_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnLobbyReceiveBinaryData_Parms.LobbyInfo, 0x24 );

	if ( Data )
		memcpy ( Data, &OnLobbyReceiveBinaryData_Parms.Data, 0xC );
};

// Function Engine.OnlineLobbyInterface.SendLobbyBinaryData
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< unsigned char >        Data                           ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineLobbyInterface::SendLobbyBinaryData ( struct FUniqueLobbyId* LobbyId, TArray< unsigned char >* Data )
{
	static UFunction* pFnSendLobbyBinaryData = NULL;

	if ( ! pFnSendLobbyBinaryData )
		pFnSendLobbyBinaryData = (UFunction*) UObject::GObjObjects()->Data[ 27834 ];

	UOnlineLobbyInterface_execSendLobbyBinaryData_Parms SendLobbyBinaryData_Parms;

	this->ProcessEvent ( pFnSendLobbyBinaryData, &SendLobbyBinaryData_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SendLobbyBinaryData_Parms.LobbyId, 0xC );

	if ( Data )
		memcpy ( Data, &SendLobbyBinaryData_Parms.Data, 0xC );

	return SendLobbyBinaryData_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearLobbyReceiveMessageDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyReceiveMessageDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyReceiveMessageDelegate ( struct FScriptDelegate LobbyReceiveMessageDelegate )
{
	static UFunction* pFnClearLobbyReceiveMessageDelegate = NULL;

	if ( ! pFnClearLobbyReceiveMessageDelegate )
		pFnClearLobbyReceiveMessageDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27832 ];

	UOnlineLobbyInterface_execClearLobbyReceiveMessageDelegate_Parms ClearLobbyReceiveMessageDelegate_Parms;
	memcpy ( &ClearLobbyReceiveMessageDelegate_Parms.LobbyReceiveMessageDelegate, &LobbyReceiveMessageDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyReceiveMessageDelegate, &ClearLobbyReceiveMessageDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyReceiveMessageDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyReceiveMessageDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyReceiveMessageDelegate ( struct FScriptDelegate LobbyReceiveMessageDelegate )
{
	static UFunction* pFnAddLobbyReceiveMessageDelegate = NULL;

	if ( ! pFnAddLobbyReceiveMessageDelegate )
		pFnAddLobbyReceiveMessageDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27830 ];

	UOnlineLobbyInterface_execAddLobbyReceiveMessageDelegate_Parms AddLobbyReceiveMessageDelegate_Parms;
	memcpy ( &AddLobbyReceiveMessageDelegate_Parms.LobbyReceiveMessageDelegate, &LobbyReceiveMessageDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyReceiveMessageDelegate, &AddLobbyReceiveMessageDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyReceiveMessage
// [0x00520000] 
// Parameters infos:
// int                            MemberIndex                    ( CPF_Parm )
// struct FString                 Type                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnLobbyReceiveMessage ( int MemberIndex, struct FString Type, struct FString Message, struct FActiveLobbyInfo* LobbyInfo )
{
	static UFunction* pFnOnLobbyReceiveMessage = NULL;

	if ( ! pFnOnLobbyReceiveMessage )
		pFnOnLobbyReceiveMessage = (UFunction*) UObject::GObjObjects()->Data[ 27825 ];

	UOnlineLobbyInterface_execOnLobbyReceiveMessage_Parms OnLobbyReceiveMessage_Parms;
	OnLobbyReceiveMessage_Parms.MemberIndex = MemberIndex;
	memcpy ( &OnLobbyReceiveMessage_Parms.Type, &Type, 0xC );
	memcpy ( &OnLobbyReceiveMessage_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnOnLobbyReceiveMessage, &OnLobbyReceiveMessage_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnLobbyReceiveMessage_Parms.LobbyInfo, 0x24 );
};

// Function Engine.OnlineLobbyInterface.SendLobbyMessage
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Message                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::SendLobbyMessage ( struct FString Message, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnSendLobbyMessage = NULL;

	if ( ! pFnSendLobbyMessage )
		pFnSendLobbyMessage = (UFunction*) UObject::GObjObjects()->Data[ 27821 ];

	UOnlineLobbyInterface_execSendLobbyMessage_Parms SendLobbyMessage_Parms;
	memcpy ( &SendLobbyMessage_Parms.Message, &Message, 0xC );

	this->ProcessEvent ( pFnSendLobbyMessage, &SendLobbyMessage_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SendLobbyMessage_Parms.LobbyId, 0xC );

	return SendLobbyMessage_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearLobbyMemberStatusUpdateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyMemberStatusUpdateDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyMemberStatusUpdateDelegate ( struct FScriptDelegate LobbyMemberStatusUpdateDelegate )
{
	static UFunction* pFnClearLobbyMemberStatusUpdateDelegate = NULL;

	if ( ! pFnClearLobbyMemberStatusUpdateDelegate )
		pFnClearLobbyMemberStatusUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27819 ];

	UOnlineLobbyInterface_execClearLobbyMemberStatusUpdateDelegate_Parms ClearLobbyMemberStatusUpdateDelegate_Parms;
	memcpy ( &ClearLobbyMemberStatusUpdateDelegate_Parms.LobbyMemberStatusUpdateDelegate, &LobbyMemberStatusUpdateDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyMemberStatusUpdateDelegate, &ClearLobbyMemberStatusUpdateDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyMemberStatusUpdateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyMemberStatusUpdateDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyMemberStatusUpdateDelegate ( struct FScriptDelegate LobbyMemberStatusUpdateDelegate )
{
	static UFunction* pFnAddLobbyMemberStatusUpdateDelegate = NULL;

	if ( ! pFnAddLobbyMemberStatusUpdateDelegate )
		pFnAddLobbyMemberStatusUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27817 ];

	UOnlineLobbyInterface_execAddLobbyMemberStatusUpdateDelegate_Parms AddLobbyMemberStatusUpdateDelegate_Parms;
	memcpy ( &AddLobbyMemberStatusUpdateDelegate_Parms.LobbyMemberStatusUpdateDelegate, &LobbyMemberStatusUpdateDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyMemberStatusUpdateDelegate, &AddLobbyMemberStatusUpdateDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyMemberStatusUpdate
// [0x00520000] 
// Parameters infos:
// int                            MemberIndex                    ( CPF_Parm )
// int                            InstigatorIndex                ( CPF_Parm )
// struct FString                 Status                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnLobbyMemberStatusUpdate ( int MemberIndex, int InstigatorIndex, struct FString Status, struct FActiveLobbyInfo* LobbyInfo )
{
	static UFunction* pFnOnLobbyMemberStatusUpdate = NULL;

	if ( ! pFnOnLobbyMemberStatusUpdate )
		pFnOnLobbyMemberStatusUpdate = (UFunction*) UObject::GObjObjects()->Data[ 27812 ];

	UOnlineLobbyInterface_execOnLobbyMemberStatusUpdate_Parms OnLobbyMemberStatusUpdate_Parms;
	OnLobbyMemberStatusUpdate_Parms.MemberIndex = MemberIndex;
	OnLobbyMemberStatusUpdate_Parms.InstigatorIndex = InstigatorIndex;
	memcpy ( &OnLobbyMemberStatusUpdate_Parms.Status, &Status, 0xC );

	this->ProcessEvent ( pFnOnLobbyMemberStatusUpdate, &OnLobbyMemberStatusUpdate_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnLobbyMemberStatusUpdate_Parms.LobbyInfo, 0x24 );
};

// Function Engine.OnlineLobbyInterface.ClearLobbyMemberSettingsUpdateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyMemberSettingsUpdateDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbyMemberSettingsUpdateDelegate ( struct FScriptDelegate LobbyMemberSettingsUpdateDelegate )
{
	static UFunction* pFnClearLobbyMemberSettingsUpdateDelegate = NULL;

	if ( ! pFnClearLobbyMemberSettingsUpdateDelegate )
		pFnClearLobbyMemberSettingsUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27810 ];

	UOnlineLobbyInterface_execClearLobbyMemberSettingsUpdateDelegate_Parms ClearLobbyMemberSettingsUpdateDelegate_Parms;
	memcpy ( &ClearLobbyMemberSettingsUpdateDelegate_Parms.LobbyMemberSettingsUpdateDelegate, &LobbyMemberSettingsUpdateDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbyMemberSettingsUpdateDelegate, &ClearLobbyMemberSettingsUpdateDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbyMemberSettingsUpdateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbyMemberSettingsUpdateDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbyMemberSettingsUpdateDelegate ( struct FScriptDelegate LobbyMemberSettingsUpdateDelegate )
{
	static UFunction* pFnAddLobbyMemberSettingsUpdateDelegate = NULL;

	if ( ! pFnAddLobbyMemberSettingsUpdateDelegate )
		pFnAddLobbyMemberSettingsUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27808 ];

	UOnlineLobbyInterface_execAddLobbyMemberSettingsUpdateDelegate_Parms AddLobbyMemberSettingsUpdateDelegate_Parms;
	memcpy ( &AddLobbyMemberSettingsUpdateDelegate_Parms.LobbyMemberSettingsUpdateDelegate, &LobbyMemberSettingsUpdateDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbyMemberSettingsUpdateDelegate, &AddLobbyMemberSettingsUpdateDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbyMemberSettingsUpdate
// [0x00520000] 
// Parameters infos:
// int                            MemberIndex                    ( CPF_Parm )
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnLobbyMemberSettingsUpdate ( int MemberIndex, struct FActiveLobbyInfo* LobbyInfo )
{
	static UFunction* pFnOnLobbyMemberSettingsUpdate = NULL;

	if ( ! pFnOnLobbyMemberSettingsUpdate )
		pFnOnLobbyMemberSettingsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 27805 ];

	UOnlineLobbyInterface_execOnLobbyMemberSettingsUpdate_Parms OnLobbyMemberSettingsUpdate_Parms;
	OnLobbyMemberSettingsUpdate_Parms.MemberIndex = MemberIndex;

	this->ProcessEvent ( pFnOnLobbyMemberSettingsUpdate, &OnLobbyMemberSettingsUpdate_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnLobbyMemberSettingsUpdate_Parms.LobbyInfo, 0x24 );
};

// Function Engine.OnlineLobbyInterface.ClearLobbySettingsUpdateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbySettingsUpdateDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearLobbySettingsUpdateDelegate ( struct FScriptDelegate LobbySettingsUpdateDelegate )
{
	static UFunction* pFnClearLobbySettingsUpdateDelegate = NULL;

	if ( ! pFnClearLobbySettingsUpdateDelegate )
		pFnClearLobbySettingsUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27803 ];

	UOnlineLobbyInterface_execClearLobbySettingsUpdateDelegate_Parms ClearLobbySettingsUpdateDelegate_Parms;
	memcpy ( &ClearLobbySettingsUpdateDelegate_Parms.LobbySettingsUpdateDelegate, &LobbySettingsUpdateDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLobbySettingsUpdateDelegate, &ClearLobbySettingsUpdateDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddLobbySettingsUpdateDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LobbySettingsUpdateDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddLobbySettingsUpdateDelegate ( struct FScriptDelegate LobbySettingsUpdateDelegate )
{
	static UFunction* pFnAddLobbySettingsUpdateDelegate = NULL;

	if ( ! pFnAddLobbySettingsUpdateDelegate )
		pFnAddLobbySettingsUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27801 ];

	UOnlineLobbyInterface_execAddLobbySettingsUpdateDelegate_Parms AddLobbySettingsUpdateDelegate_Parms;
	memcpy ( &AddLobbySettingsUpdateDelegate_Parms.LobbySettingsUpdateDelegate, &LobbySettingsUpdateDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLobbySettingsUpdateDelegate, &AddLobbySettingsUpdateDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnLobbySettingsUpdate
// [0x00520000] 
// Parameters infos:
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnLobbySettingsUpdate ( struct FActiveLobbyInfo* LobbyInfo )
{
	static UFunction* pFnOnLobbySettingsUpdate = NULL;

	if ( ! pFnOnLobbySettingsUpdate )
		pFnOnLobbySettingsUpdate = (UFunction*) UObject::GObjObjects()->Data[ 27799 ];

	UOnlineLobbyInterface_execOnLobbySettingsUpdate_Parms OnLobbySettingsUpdate_Parms;

	this->ProcessEvent ( pFnOnLobbySettingsUpdate, &OnLobbySettingsUpdate_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnLobbySettingsUpdate_Parms.LobbyInfo, 0x24 );
};

// Function Engine.OnlineLobbyInterface.SetLobbyUserSetting
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Key                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::SetLobbyUserSetting ( struct FString Key, struct FString Value, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnSetLobbyUserSetting = NULL;

	if ( ! pFnSetLobbyUserSetting )
		pFnSetLobbyUserSetting = (UFunction*) UObject::GObjObjects()->Data[ 27794 ];

	UOnlineLobbyInterface_execSetLobbyUserSetting_Parms SetLobbyUserSetting_Parms;
	memcpy ( &SetLobbyUserSetting_Parms.Key, &Key, 0xC );
	memcpy ( &SetLobbyUserSetting_Parms.Value, &Value, 0xC );

	this->ProcessEvent ( pFnSetLobbyUserSetting, &SetLobbyUserSetting_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &SetLobbyUserSetting_Parms.LobbyId, 0xC );

	return SetLobbyUserSetting_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.LeaveLobby
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::LeaveLobby ( struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnLeaveLobby = NULL;

	if ( ! pFnLeaveLobby )
		pFnLeaveLobby = (UFunction*) UObject::GObjObjects()->Data[ 27791 ];

	UOnlineLobbyInterface_execLeaveLobby_Parms LeaveLobby_Parms;

	this->ProcessEvent ( pFnLeaveLobby, &LeaveLobby_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &LeaveLobby_Parms.LobbyId, 0xC );

	return LeaveLobby_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearJoinLobbyCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinLobbyCompleteDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearJoinLobbyCompleteDelegate ( struct FScriptDelegate JoinLobbyCompleteDelegate )
{
	static UFunction* pFnClearJoinLobbyCompleteDelegate = NULL;

	if ( ! pFnClearJoinLobbyCompleteDelegate )
		pFnClearJoinLobbyCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27789 ];

	UOnlineLobbyInterface_execClearJoinLobbyCompleteDelegate_Parms ClearJoinLobbyCompleteDelegate_Parms;
	memcpy ( &ClearJoinLobbyCompleteDelegate_Parms.JoinLobbyCompleteDelegate, &JoinLobbyCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearJoinLobbyCompleteDelegate, &ClearJoinLobbyCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddJoinLobbyCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinLobbyCompleteDelegate      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddJoinLobbyCompleteDelegate ( struct FScriptDelegate JoinLobbyCompleteDelegate )
{
	static UFunction* pFnAddJoinLobbyCompleteDelegate = NULL;

	if ( ! pFnAddJoinLobbyCompleteDelegate )
		pFnAddJoinLobbyCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27787 ];

	UOnlineLobbyInterface_execAddJoinLobbyCompleteDelegate_Parms AddJoinLobbyCompleteDelegate_Parms;
	memcpy ( &AddJoinLobbyCompleteDelegate_Parms.JoinLobbyCompleteDelegate, &JoinLobbyCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddJoinLobbyCompleteDelegate, &AddJoinLobbyCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnJoinLobbyComplete
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FActiveLobbyInfo        LobbyInfo                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::OnJoinLobbyComplete ( unsigned long bWasSuccessful, struct FString Error, struct FActiveLobbyInfo* LobbyInfo, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnOnJoinLobbyComplete = NULL;

	if ( ! pFnOnJoinLobbyComplete )
		pFnOnJoinLobbyComplete = (UFunction*) UObject::GObjObjects()->Data[ 27782 ];

	UOnlineLobbyInterface_execOnJoinLobbyComplete_Parms OnJoinLobbyComplete_Parms;
	OnJoinLobbyComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnJoinLobbyComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnJoinLobbyComplete, &OnJoinLobbyComplete_Parms, NULL );

	if ( LobbyInfo )
		memcpy ( LobbyInfo, &OnJoinLobbyComplete_Parms.LobbyInfo, 0x24 );

	if ( LobbyId )
		memcpy ( LobbyId, &OnJoinLobbyComplete_Parms.LobbyId, 0xC );
};

// Function Engine.OnlineLobbyInterface.JoinLobby
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerNum                 ( CPF_Parm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineLobbyInterface::JoinLobby ( int LocalPlayerNum, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnJoinLobby = NULL;

	if ( ! pFnJoinLobby )
		pFnJoinLobby = (UFunction*) UObject::GObjObjects()->Data[ 27778 ];

	UOnlineLobbyInterface_execJoinLobby_Parms JoinLobby_Parms;
	JoinLobby_Parms.LocalPlayerNum = LocalPlayerNum;

	this->ProcessEvent ( pFnJoinLobby, &JoinLobby_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &JoinLobby_Parms.LobbyId, 0xC );

	return JoinLobby_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearFindLobbiesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindLobbiesCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearFindLobbiesCompleteDelegate ( struct FScriptDelegate FindLobbiesCompleteDelegate )
{
	static UFunction* pFnClearFindLobbiesCompleteDelegate = NULL;

	if ( ! pFnClearFindLobbiesCompleteDelegate )
		pFnClearFindLobbiesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27776 ];

	UOnlineLobbyInterface_execClearFindLobbiesCompleteDelegate_Parms ClearFindLobbiesCompleteDelegate_Parms;
	memcpy ( &ClearFindLobbiesCompleteDelegate_Parms.FindLobbiesCompleteDelegate, &FindLobbiesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFindLobbiesCompleteDelegate, &ClearFindLobbiesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddFindLobbiesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindLobbiesCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddFindLobbiesCompleteDelegate ( struct FScriptDelegate FindLobbiesCompleteDelegate )
{
	static UFunction* pFnAddFindLobbiesCompleteDelegate = NULL;

	if ( ! pFnAddFindLobbiesCompleteDelegate )
		pFnAddFindLobbiesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27774 ];

	UOnlineLobbyInterface_execAddFindLobbiesCompleteDelegate_Parms AddFindLobbiesCompleteDelegate_Parms;
	memcpy ( &AddFindLobbiesCompleteDelegate_Parms.FindLobbiesCompleteDelegate, &FindLobbiesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFindLobbiesCompleteDelegate, &AddFindLobbiesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnFindLobbiesComplete
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// TArray< struct FBasicLobbyInfo > LobbyList                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::OnFindLobbiesComplete ( unsigned long bWasSuccessful, TArray< struct FBasicLobbyInfo >* LobbyList )
{
	static UFunction* pFnOnFindLobbiesComplete = NULL;

	if ( ! pFnOnFindLobbiesComplete )
		pFnOnFindLobbiesComplete = (UFunction*) UObject::GObjObjects()->Data[ 27770 ];

	UOnlineLobbyInterface_execOnFindLobbiesComplete_Parms OnFindLobbiesComplete_Parms;
	OnFindLobbiesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindLobbiesComplete, &OnFindLobbiesComplete_Parms, NULL );

	if ( LobbyList )
		memcpy ( LobbyList, &OnFindLobbiesComplete_Parms.LobbyList, 0xC );
};

// Function Engine.OnlineLobbyInterface.UpdateFoundLobbies
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueLobbyId          LobbyId                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlineLobbyInterface::UpdateFoundLobbies ( struct FUniqueLobbyId LobbyId )
{
	static UFunction* pFnUpdateFoundLobbies = NULL;

	if ( ! pFnUpdateFoundLobbies )
		pFnUpdateFoundLobbies = (UFunction*) UObject::GObjObjects()->Data[ 27767 ];

	UOnlineLobbyInterface_execUpdateFoundLobbies_Parms UpdateFoundLobbies_Parms;
	memcpy ( &UpdateFoundLobbies_Parms.LobbyId, &LobbyId, 0xC );

	this->ProcessEvent ( pFnUpdateFoundLobbies, &UpdateFoundLobbies_Parms, NULL );

	return UpdateFoundLobbies_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.FindLobbies
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            MaxResults                     ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FLobbyFilter >  Filters                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FLobbySortFilter > SortFilters                    ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            MinSlots                       ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  Distance                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineLobbyInterface::FindLobbies ( int MaxResults, TArray< struct FLobbyFilter > Filters, TArray< struct FLobbySortFilter > SortFilters, int MinSlots, unsigned char Distance )
{
	static UFunction* pFnFindLobbies = NULL;

	if ( ! pFnFindLobbies )
		pFnFindLobbies = (UFunction*) UObject::GObjObjects()->Data[ 27758 ];

	UOnlineLobbyInterface_execFindLobbies_Parms FindLobbies_Parms;
	FindLobbies_Parms.MaxResults = MaxResults;
	memcpy ( &FindLobbies_Parms.Filters, &Filters, 0xC );
	memcpy ( &FindLobbies_Parms.SortFilters, &SortFilters, 0xC );
	FindLobbies_Parms.MinSlots = MinSlots;
	FindLobbies_Parms.Distance = Distance;

	this->ProcessEvent ( pFnFindLobbies, &FindLobbies_Parms, NULL );

	return FindLobbies_Parms.ReturnValue;
};

// Function Engine.OnlineLobbyInterface.ClearCreateLobbyCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateLobbyCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::ClearCreateLobbyCompleteDelegate ( struct FScriptDelegate CreateLobbyCompleteDelegate )
{
	static UFunction* pFnClearCreateLobbyCompleteDelegate = NULL;

	if ( ! pFnClearCreateLobbyCompleteDelegate )
		pFnClearCreateLobbyCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27756 ];

	UOnlineLobbyInterface_execClearCreateLobbyCompleteDelegate_Parms ClearCreateLobbyCompleteDelegate_Parms;
	memcpy ( &ClearCreateLobbyCompleteDelegate_Parms.CreateLobbyCompleteDelegate, &CreateLobbyCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCreateLobbyCompleteDelegate, &ClearCreateLobbyCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.AddCreateLobbyCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateLobbyCompleteDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineLobbyInterface::AddCreateLobbyCompleteDelegate ( struct FScriptDelegate CreateLobbyCompleteDelegate )
{
	static UFunction* pFnAddCreateLobbyCompleteDelegate = NULL;

	if ( ! pFnAddCreateLobbyCompleteDelegate )
		pFnAddCreateLobbyCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27754 ];

	UOnlineLobbyInterface_execAddCreateLobbyCompleteDelegate_Parms AddCreateLobbyCompleteDelegate_Parms;
	memcpy ( &AddCreateLobbyCompleteDelegate_Parms.CreateLobbyCompleteDelegate, &CreateLobbyCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCreateLobbyCompleteDelegate, &AddCreateLobbyCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineLobbyInterface.OnCreateLobbyComplete
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueLobbyId          LobbyId                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineLobbyInterface::OnCreateLobbyComplete ( unsigned long bWasSuccessful, struct FString Error, struct FUniqueLobbyId* LobbyId )
{
	static UFunction* pFnOnCreateLobbyComplete = NULL;

	if ( ! pFnOnCreateLobbyComplete )
		pFnOnCreateLobbyComplete = (UFunction*) UObject::GObjObjects()->Data[ 27750 ];

	UOnlineLobbyInterface_execOnCreateLobbyComplete_Parms OnCreateLobbyComplete_Parms;
	OnCreateLobbyComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnCreateLobbyComplete_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnOnCreateLobbyComplete, &OnCreateLobbyComplete_Parms, NULL );

	if ( LobbyId )
		memcpy ( LobbyId, &OnCreateLobbyComplete_Parms.LobbyId, 0xC );
};

// Function Engine.OnlineLobbyInterface.CreateLobby
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            LocalPlayerNum                 ( CPF_Parm )
// int                            MaxPlayers                     ( CPF_Parm )
// unsigned char                  Type                           ( CPF_OptionalParm | CPF_Parm )
// TArray< struct FLobbyMetaData > InitialSettings                ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineLobbyInterface::CreateLobby ( int LocalPlayerNum, int MaxPlayers, unsigned char Type, TArray< struct FLobbyMetaData > InitialSettings )
{
	static UFunction* pFnCreateLobby = NULL;

	if ( ! pFnCreateLobby )
		pFnCreateLobby = (UFunction*) UObject::GObjObjects()->Data[ 27743 ];

	UOnlineLobbyInterface_execCreateLobby_Parms CreateLobby_Parms;
	CreateLobby_Parms.LocalPlayerNum = LocalPlayerNum;
	CreateLobby_Parms.MaxPlayers = MaxPlayers;
	CreateLobby_Parms.Type = Type;
	memcpy ( &CreateLobby_Parms.InitialSettings, &InitialSettings, 0xC );

	this->ProcessEvent ( pFnCreateLobby, &CreateLobby_Parms, NULL );

	return CreateLobby_Parms.ReturnValue;
};

// Function Engine.OnlinePurchaseInterface.ClearMicroTxnResponseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ResponseMicroTxnDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePurchaseInterface::ClearMicroTxnResponseDelegate ( struct FScriptDelegate ResponseMicroTxnDelegate )
{
	static UFunction* pFnClearMicroTxnResponseDelegate = NULL;

	if ( ! pFnClearMicroTxnResponseDelegate )
		pFnClearMicroTxnResponseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28945 ];

	UOnlinePurchaseInterface_execClearMicroTxnResponseDelegate_Parms ClearMicroTxnResponseDelegate_Parms;
	memcpy ( &ClearMicroTxnResponseDelegate_Parms.ResponseMicroTxnDelegate, &ResponseMicroTxnDelegate, 0x10 );

	this->ProcessEvent ( pFnClearMicroTxnResponseDelegate, &ClearMicroTxnResponseDelegate_Parms, NULL );
};

// Function Engine.OnlinePurchaseInterface.AddMicroTxnResponseDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ResponseMicroTxnDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePurchaseInterface::AddMicroTxnResponseDelegate ( struct FScriptDelegate ResponseMicroTxnDelegate )
{
	static UFunction* pFnAddMicroTxnResponseDelegate = NULL;

	if ( ! pFnAddMicroTxnResponseDelegate )
		pFnAddMicroTxnResponseDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28946 ];

	UOnlinePurchaseInterface_execAddMicroTxnResponseDelegate_Parms AddMicroTxnResponseDelegate_Parms;
	memcpy ( &AddMicroTxnResponseDelegate_Parms.ResponseMicroTxnDelegate, &ResponseMicroTxnDelegate, 0x10 );

	this->ProcessEvent ( pFnAddMicroTxnResponseDelegate, &AddMicroTxnResponseDelegate_Parms, NULL );
};

// Function Engine.OnlinePurchaseInterface.OnMicroTxnResponse
// [0x00120000] 
// Parameters infos:
// unsigned long                  bAuthorized                    ( CPF_Parm )

void UOnlinePurchaseInterface::OnMicroTxnResponse ( unsigned long bAuthorized )
{
	static UFunction* pFnOnMicroTxnResponse = NULL;

	if ( ! pFnOnMicroTxnResponse )
		pFnOnMicroTxnResponse = (UFunction*) UObject::GObjObjects()->Data[ 28948 ];

	UOnlinePurchaseInterface_execOnMicroTxnResponse_Parms OnMicroTxnResponse_Parms;
	OnMicroTxnResponse_Parms.bAuthorized = bAuthorized;

	this->ProcessEvent ( pFnOnMicroTxnResponse, &OnMicroTxnResponse_Parms, NULL );
};

// Function Engine.OnlinePurchaseInterface.FormatCurrency
// [0x00020000] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Currency                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            Price                          ( CPF_Parm )

struct FString UOnlinePurchaseInterface::FormatCurrency ( struct FString Currency, int Price )
{
	static UFunction* pFnFormatCurrency = NULL;

	if ( ! pFnFormatCurrency )
		pFnFormatCurrency = (UFunction*) UObject::GObjObjects()->Data[ 28950 ];

	UOnlinePurchaseInterface_execFormatCurrency_Parms FormatCurrency_Parms;
	memcpy ( &FormatCurrency_Parms.Currency, &Currency, 0xC );
	FormatCurrency_Parms.Price = Price;

	this->ProcessEvent ( pFnFormatCurrency, &FormatCurrency_Parms, NULL );

	return FormatCurrency_Parms.ReturnValue;
};

// Function Engine.OnlinePurchaseInterface.GetAppPriceInfo
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_Const | CPF_Parm | CPF_OutParm )
// TArray< struct FName >         AppNames                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePurchaseInterface::GetAppPriceInfo ( struct FScriptDelegate Callback, struct FUniqueNetId* PlayerID, TArray< struct FName >* AppNames )
{
	static UFunction* pFnGetAppPriceInfo = NULL;

	if ( ! pFnGetAppPriceInfo )
		pFnGetAppPriceInfo = (UFunction*) UObject::GObjObjects()->Data[ 28953 ];

	UOnlinePurchaseInterface_execGetAppPriceInfo_Parms GetAppPriceInfo_Parms;
	memcpy ( &GetAppPriceInfo_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnGetAppPriceInfo, &GetAppPriceInfo_Parms, NULL );

	if ( PlayerID )
		memcpy ( PlayerID, &GetAppPriceInfo_Parms.PlayerID, 0x48 );

	if ( AppNames )
		memcpy ( AppNames, &GetAppPriceInfo_Parms.AppNames, 0xC );

	return GetAppPriceInfo_Parms.ReturnValue;
};

// Function Engine.OnlinePurchaseInterface.EventGetAppPriceInfoComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   AppName                        ( CPF_Parm )
// struct FString                 Price                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 DiscountPrice                  ( CPF_Parm | CPF_NeedCtorLink )
// int                            DiscountPercentage             ( CPF_Parm )

void UOnlinePurchaseInterface::EventGetAppPriceInfoComplete ( struct FName AppName, struct FString Price, struct FString DiscountPrice, int DiscountPercentage )
{
	static UFunction* pFnEventGetAppPriceInfoComplete = NULL;

	if ( ! pFnEventGetAppPriceInfoComplete )
		pFnEventGetAppPriceInfoComplete = (UFunction*) UObject::GObjObjects()->Data[ 28957 ];

	UOnlinePurchaseInterface_execEventGetAppPriceInfoComplete_Parms EventGetAppPriceInfoComplete_Parms;
	memcpy ( &EventGetAppPriceInfoComplete_Parms.AppName, &AppName, 0x8 );
	memcpy ( &EventGetAppPriceInfoComplete_Parms.Price, &Price, 0xC );
	memcpy ( &EventGetAppPriceInfoComplete_Parms.DiscountPrice, &DiscountPrice, 0xC );
	EventGetAppPriceInfoComplete_Parms.DiscountPercentage = DiscountPercentage;

	this->ProcessEvent ( pFnEventGetAppPriceInfoComplete, &EventGetAppPriceInfoComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.ClearGamePlayersChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GamePlayersChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearGamePlayersChangedDelegate ( struct FScriptDelegate GamePlayersChangedDelegate )
{
	static UFunction* pFnClearGamePlayersChangedDelegate = NULL;

	if ( ! pFnClearGamePlayersChangedDelegate )
		pFnClearGamePlayersChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27732 ];

	UOnlineGameInterface_execClearGamePlayersChangedDelegate_Parms ClearGamePlayersChangedDelegate_Parms;
	memcpy ( &ClearGamePlayersChangedDelegate_Parms.GamePlayersChangedDelegate, &GamePlayersChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearGamePlayersChangedDelegate, &ClearGamePlayersChangedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddGamePlayersChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         GamePlayersChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddGamePlayersChangedDelegate ( struct FScriptDelegate GamePlayersChangedDelegate )
{
	static UFunction* pFnAddGamePlayersChangedDelegate = NULL;

	if ( ! pFnAddGamePlayersChangedDelegate )
		pFnAddGamePlayersChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27730 ];

	UOnlineGameInterface_execAddGamePlayersChangedDelegate_Parms AddGamePlayersChangedDelegate_Parms;
	memcpy ( &AddGamePlayersChangedDelegate_Parms.GamePlayersChangedDelegate, &GamePlayersChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddGamePlayersChangedDelegate, &AddGamePlayersChangedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnGamePlayersChanged
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::OnGamePlayersChanged ( struct FName SessionName, TArray< struct FUniqueNetId > Players )
{
	static UFunction* pFnOnGamePlayersChanged = NULL;

	if ( ! pFnOnGamePlayersChanged )
		pFnOnGamePlayersChanged = (UFunction*) UObject::GObjObjects()->Data[ 27726 ];

	UOnlineGameInterface_execOnGamePlayersChanged_Parms OnGamePlayersChanged_Parms;
	memcpy ( &OnGamePlayersChanged_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnGamePlayersChanged_Parms.Players, &Players, 0xC );

	this->ProcessEvent ( pFnOnGamePlayersChanged, &OnGamePlayersChanged_Parms, NULL );
};

// Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearJoinMigratedOnlineGameCompleteDelegate ( struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearJoinMigratedOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinMigratedOnlineGameCompleteDelegate )
		pFnClearJoinMigratedOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27724 ];

	UOnlineGameInterface_execClearJoinMigratedOnlineGameCompleteDelegate_Parms ClearJoinMigratedOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinMigratedOnlineGameCompleteDelegate_Parms.JoinMigratedOnlineGameCompleteDelegate, &JoinMigratedOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearJoinMigratedOnlineGameCompleteDelegate, &ClearJoinMigratedOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddJoinMigratedOnlineGameCompleteDelegate ( struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddJoinMigratedOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinMigratedOnlineGameCompleteDelegate )
		pFnAddJoinMigratedOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27722 ];

	UOnlineGameInterface_execAddJoinMigratedOnlineGameCompleteDelegate_Parms AddJoinMigratedOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddJoinMigratedOnlineGameCompleteDelegate_Parms.JoinMigratedOnlineGameCompleteDelegate, &JoinMigratedOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddJoinMigratedOnlineGameCompleteDelegate, &AddJoinMigratedOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnJoinMigratedOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinMigratedOnlineGameComplete = NULL;

	if ( ! pFnOnJoinMigratedOnlineGameComplete )
		pFnOnJoinMigratedOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27719 ];

	UOnlineGameInterface_execOnJoinMigratedOnlineGameComplete_Parms OnJoinMigratedOnlineGameComplete_Parms;
	memcpy ( &OnJoinMigratedOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinMigratedOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinMigratedOnlineGameComplete, &OnJoinMigratedOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.JoinMigratedOnlineGame
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::JoinMigratedOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame )
{
	static UFunction* pFnJoinMigratedOnlineGame = NULL;

	if ( ! pFnJoinMigratedOnlineGame )
		pFnJoinMigratedOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11227 ];

	UOnlineGameInterface_execJoinMigratedOnlineGame_Parms JoinMigratedOnlineGame_Parms;
	JoinMigratedOnlineGame_Parms.PlayerNum = PlayerNum;
	memcpy ( &JoinMigratedOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnJoinMigratedOnlineGame, &JoinMigratedOnlineGame_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &JoinMigratedOnlineGame_Parms.DesiredGame, 0x8 );

	return JoinMigratedOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MigrateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearMigrateOnlineGameCompleteDelegate ( struct FScriptDelegate MigrateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearMigrateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearMigrateOnlineGameCompleteDelegate )
		pFnClearMigrateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27714 ];

	UOnlineGameInterface_execClearMigrateOnlineGameCompleteDelegate_Parms ClearMigrateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearMigrateOnlineGameCompleteDelegate_Parms.MigrateOnlineGameCompleteDelegate, &MigrateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearMigrateOnlineGameCompleteDelegate, &ClearMigrateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         MigrateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddMigrateOnlineGameCompleteDelegate ( struct FScriptDelegate MigrateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddMigrateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddMigrateOnlineGameCompleteDelegate )
		pFnAddMigrateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27712 ];

	UOnlineGameInterface_execAddMigrateOnlineGameCompleteDelegate_Parms AddMigrateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddMigrateOnlineGameCompleteDelegate_Parms.MigrateOnlineGameCompleteDelegate, &MigrateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddMigrateOnlineGameCompleteDelegate, &AddMigrateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnMigrateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnMigrateOnlineGameComplete = NULL;

	if ( ! pFnOnMigrateOnlineGameComplete )
		pFnOnMigrateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27709 ];

	UOnlineGameInterface_execOnMigrateOnlineGameComplete_Parms OnMigrateOnlineGameComplete_Parms;
	memcpy ( &OnMigrateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnMigrateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnMigrateOnlineGameComplete, &OnMigrateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.MigrateOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  HostingPlayerNum               ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::MigrateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName )
{
	static UFunction* pFnMigrateOnlineGame = NULL;

	if ( ! pFnMigrateOnlineGame )
		pFnMigrateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 11157 ];

	UOnlineGameInterface_execMigrateOnlineGame_Parms MigrateOnlineGame_Parms;
	MigrateOnlineGame_Parms.HostingPlayerNum = HostingPlayerNum;
	memcpy ( &MigrateOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnMigrateOnlineGame, &MigrateOnlineGame_Parms, NULL );

	return MigrateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RecalculateSkillRatingGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearRecalculateSkillRatingCompleteDelegate ( struct FScriptDelegate RecalculateSkillRatingGameCompleteDelegate )
{
	static UFunction* pFnClearRecalculateSkillRatingCompleteDelegate = NULL;

	if ( ! pFnClearRecalculateSkillRatingCompleteDelegate )
		pFnClearRecalculateSkillRatingCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27705 ];

	UOnlineGameInterface_execClearRecalculateSkillRatingCompleteDelegate_Parms ClearRecalculateSkillRatingCompleteDelegate_Parms;
	memcpy ( &ClearRecalculateSkillRatingCompleteDelegate_Parms.RecalculateSkillRatingGameCompleteDelegate, &RecalculateSkillRatingGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRecalculateSkillRatingCompleteDelegate, &ClearRecalculateSkillRatingCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RecalculateSkillRatingCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddRecalculateSkillRatingCompleteDelegate ( struct FScriptDelegate RecalculateSkillRatingCompleteDelegate )
{
	static UFunction* pFnAddRecalculateSkillRatingCompleteDelegate = NULL;

	if ( ! pFnAddRecalculateSkillRatingCompleteDelegate )
		pFnAddRecalculateSkillRatingCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27703 ];

	UOnlineGameInterface_execAddRecalculateSkillRatingCompleteDelegate_Parms AddRecalculateSkillRatingCompleteDelegate_Parms;
	memcpy ( &AddRecalculateSkillRatingCompleteDelegate_Parms.RecalculateSkillRatingCompleteDelegate, &RecalculateSkillRatingCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRecalculateSkillRatingCompleteDelegate, &AddRecalculateSkillRatingCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnRecalculateSkillRatingComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRecalculateSkillRatingComplete = NULL;

	if ( ! pFnOnRecalculateSkillRatingComplete )
		pFnOnRecalculateSkillRatingComplete = (UFunction*) UObject::GObjObjects()->Data[ 27700 ];

	UOnlineGameInterface_execOnRecalculateSkillRatingComplete_Parms OnRecalculateSkillRatingComplete_Parms;
	memcpy ( &OnRecalculateSkillRatingComplete_Parms.SessionName, &SessionName, 0x8 );
	OnRecalculateSkillRatingComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRecalculateSkillRatingComplete, &OnRecalculateSkillRatingComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RecalculateSkillRating
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnRecalculateSkillRating = NULL;

	if ( ! pFnRecalculateSkillRating )
		pFnRecalculateSkillRating = (UFunction*) UObject::GObjObjects()->Data[ 21767 ];

	UOnlineGameInterface_execRecalculateSkillRating_Parms RecalculateSkillRating_Parms;
	memcpy ( &RecalculateSkillRating_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRecalculateSkillRating, &RecalculateSkillRating_Parms, NULL );

	if ( Players )
		memcpy ( Players, &RecalculateSkillRating_Parms.Players, 0xC );

	return RecalculateSkillRating_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.AcceptGameInvite
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName )
{
	static UFunction* pFnAcceptGameInvite = NULL;

	if ( ! pFnAcceptGameInvite )
		pFnAcceptGameInvite = (UFunction*) UObject::GObjObjects()->Data[ 12684 ];

	UOnlineGameInterface_execAcceptGameInvite_Parms AcceptGameInvite_Parms;
	AcceptGameInvite_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AcceptGameInvite_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnAcceptGameInvite, &AcceptGameInvite_Parms, NULL );

	return AcceptGameInvite_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnClearGameInviteAcceptedDelegate = NULL;

	if ( ! pFnClearGameInviteAcceptedDelegate )
		pFnClearGameInviteAcceptedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27692 ];

	UOnlineGameInterface_execClearGameInviteAcceptedDelegate_Parms ClearGameInviteAcceptedDelegate_Parms;
	ClearGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearGameInviteAcceptedDelegate, &ClearGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         GameInviteAcceptedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate )
{
	static UFunction* pFnAddGameInviteAcceptedDelegate = NULL;

	if ( ! pFnAddGameInviteAcceptedDelegate )
		pFnAddGameInviteAcceptedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27689 ];

	UOnlineGameInterface_execAddGameInviteAcceptedDelegate_Parms AddGameInviteAcceptedDelegate_Parms;
	AddGameInviteAcceptedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddGameInviteAcceptedDelegate_Parms.GameInviteAcceptedDelegate, &GameInviteAcceptedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddGameInviteAcceptedDelegate, &AddGameInviteAcceptedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// [0x00520000] 
// Parameters infos:
// struct FString                 ErrorString                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FOnlineGameSearchResult InviteResult                   ( CPF_Const | CPF_Parm | CPF_OutParm )

void UOnlineGameInterface::OnGameInviteAccepted ( struct FString ErrorString, struct FOnlineGameSearchResult* InviteResult )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = (UFunction*) UObject::GObjObjects()->Data[ 27686 ];

	UOnlineGameInterface_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;
	memcpy ( &OnGameInviteAccepted_Parms.ErrorString, &ErrorString, 0xC );

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );

	if ( InviteResult )
		memcpy ( InviteResult, &OnGameInviteAccepted_Parms.InviteResult, 0x8 );
};

// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// [0x00020000] 
// Parameters infos:
// TArray< struct FOnlineArbitrationRegistrant > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   SessionName                    ( CPF_Parm )

TArray< struct FOnlineArbitrationRegistrant > UOnlineGameInterface::GetArbitratedPlayers ( struct FName SessionName )
{
	static UFunction* pFnGetArbitratedPlayers = NULL;

	if ( ! pFnGetArbitratedPlayers )
		pFnGetArbitratedPlayers = (UFunction*) UObject::GObjObjects()->Data[ 27682 ];

	UOnlineGameInterface_execGetArbitratedPlayers_Parms GetArbitratedPlayers_Parms;
	memcpy ( &GetArbitratedPlayers_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetArbitratedPlayers, &GetArbitratedPlayers_Parms, NULL );

	return GetArbitratedPlayers_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnClearArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnClearArbitrationRegistrationCompleteDelegate )
		pFnClearArbitrationRegistrationCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27680 ];

	UOnlineGameInterface_execClearArbitrationRegistrationCompleteDelegate_Parms ClearArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &ClearArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearArbitrationRegistrationCompleteDelegate, &ClearArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate )
{
	static UFunction* pFnAddArbitrationRegistrationCompleteDelegate = NULL;

	if ( ! pFnAddArbitrationRegistrationCompleteDelegate )
		pFnAddArbitrationRegistrationCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27678 ];

	UOnlineGameInterface_execAddArbitrationRegistrationCompleteDelegate_Parms AddArbitrationRegistrationCompleteDelegate_Parms;
	memcpy ( &AddArbitrationRegistrationCompleteDelegate_Parms.ArbitrationRegistrationCompleteDelegate, &ArbitrationRegistrationCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddArbitrationRegistrationCompleteDelegate, &AddArbitrationRegistrationCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnArbitrationRegistrationComplete = NULL;

	if ( ! pFnOnArbitrationRegistrationComplete )
		pFnOnArbitrationRegistrationComplete = (UFunction*) UObject::GObjObjects()->Data[ 27675 ];

	UOnlineGameInterface_execOnArbitrationRegistrationComplete_Parms OnArbitrationRegistrationComplete_Parms;
	memcpy ( &OnArbitrationRegistrationComplete_Parms.SessionName, &SessionName, 0x8 );
	OnArbitrationRegistrationComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnArbitrationRegistrationComplete, &OnArbitrationRegistrationComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterForArbitration
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterForArbitration ( struct FName SessionName )
{
	static UFunction* pFnRegisterForArbitration = NULL;

	if ( ! pFnRegisterForArbitration )
		pFnRegisterForArbitration = (UFunction*) UObject::GObjObjects()->Data[ 21742 ];

	UOnlineGameInterface_execRegisterForArbitration_Parms RegisterForArbitration_Parms;
	memcpy ( &RegisterForArbitration_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRegisterForArbitration, &RegisterForArbitration_Parms, NULL );

	return RegisterForArbitration_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearEndOnlineGameCompleteDelegate )
		pFnClearEndOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27672 ];

	UOnlineGameInterface_execClearEndOnlineGameCompleteDelegate_Parms ClearEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearEndOnlineGameCompleteDelegate, &ClearEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddEndOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddEndOnlineGameCompleteDelegate )
		pFnAddEndOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27670 ];

	UOnlineGameInterface_execAddEndOnlineGameCompleteDelegate_Parms AddEndOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddEndOnlineGameCompleteDelegate_Parms.EndOnlineGameCompleteDelegate, &EndOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddEndOnlineGameCompleteDelegate, &AddEndOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnEndOnlineGameComplete = NULL;

	if ( ! pFnOnEndOnlineGameComplete )
		pFnOnEndOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27667 ];

	UOnlineGameInterface_execOnEndOnlineGameComplete_Parms OnEndOnlineGameComplete_Parms;
	memcpy ( &OnEndOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnEndOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnEndOnlineGameComplete, &OnEndOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.EndOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::EndOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnEndOnlineGame = NULL;

	if ( ! pFnEndOnlineGame )
		pFnEndOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 12682 ];

	UOnlineGameInterface_execEndOnlineGame_Parms EndOnlineGame_Parms;
	memcpy ( &EndOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnEndOnlineGame, &EndOnlineGame_Parms, NULL );

	return EndOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearStartOnlineGameCompleteDelegate )
		pFnClearStartOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27664 ];

	UOnlineGameInterface_execClearStartOnlineGameCompleteDelegate_Parms ClearStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearStartOnlineGameCompleteDelegate, &ClearStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddStartOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddStartOnlineGameCompleteDelegate )
		pFnAddStartOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27662 ];

	UOnlineGameInterface_execAddStartOnlineGameCompleteDelegate_Parms AddStartOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddStartOnlineGameCompleteDelegate_Parms.StartOnlineGameCompleteDelegate, &StartOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddStartOnlineGameCompleteDelegate, &AddStartOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnStartOnlineGameComplete = NULL;

	if ( ! pFnOnStartOnlineGameComplete )
		pFnOnStartOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27659 ];

	UOnlineGameInterface_execOnStartOnlineGameComplete_Parms OnStartOnlineGameComplete_Parms;
	memcpy ( &OnStartOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnStartOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnStartOnlineGameComplete, &OnStartOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.StartOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::StartOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 12796 ];

	UOnlineGameInterface_execStartOnlineGame_Parms StartOnlineGame_Parms;
	memcpy ( &StartOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );

	return StartOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearUnregisterPlayerCompleteDelegate )
		pFnClearUnregisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27656 ];

	UOnlineGameInterface_execClearUnregisterPlayerCompleteDelegate_Parms ClearUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUnregisterPlayerCompleteDelegate, &ClearUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddUnregisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddUnregisterPlayerCompleteDelegate )
		pFnAddUnregisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27654 ];

	UOnlineGameInterface_execAddUnregisterPlayerCompleteDelegate_Parms AddUnregisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddUnregisterPlayerCompleteDelegate_Parms.UnregisterPlayerCompleteDelegate, &UnregisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUnregisterPlayerCompleteDelegate, &AddUnregisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUnregisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUnregisterPlayerComplete = NULL;

	if ( ! pFnOnUnregisterPlayerComplete )
		pFnOnUnregisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 27650 ];

	UOnlineGameInterface_execOnUnregisterPlayerComplete_Parms OnUnregisterPlayerComplete_Parms;
	memcpy ( &OnUnregisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnUnregisterPlayerComplete_Parms.PlayerID, &PlayerID, 0x48 );
	OnUnregisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUnregisterPlayerComplete, &OnUnregisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UnregisterPlayers
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::UnregisterPlayers ( struct FName SessionName, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnUnregisterPlayers = NULL;

	if ( ! pFnUnregisterPlayers )
		pFnUnregisterPlayers = (UFunction*) UObject::GObjObjects()->Data[ 27645 ];

	UOnlineGameInterface_execUnregisterPlayers_Parms UnregisterPlayers_Parms;
	memcpy ( &UnregisterPlayers_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnUnregisterPlayers, &UnregisterPlayers_Parms, NULL );

	if ( Players )
		memcpy ( Players, &UnregisterPlayers_Parms.Players, 0xC );

	return UnregisterPlayers_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.UnregisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlineGameInterface::UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 11183 ];

	UOnlineGameInterface_execUnregisterPlayer_Parms UnregisterPlayer_Parms;
	memcpy ( &UnregisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &UnregisterPlayer_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );

	return UnregisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnClearRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnClearRegisterPlayerCompleteDelegate )
		pFnClearRegisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27641 ];

	UOnlineGameInterface_execClearRegisterPlayerCompleteDelegate_Parms ClearRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &ClearRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearRegisterPlayerCompleteDelegate, &ClearRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate )
{
	static UFunction* pFnAddRegisterPlayerCompleteDelegate = NULL;

	if ( ! pFnAddRegisterPlayerCompleteDelegate )
		pFnAddRegisterPlayerCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27639 ];

	UOnlineGameInterface_execAddRegisterPlayerCompleteDelegate_Parms AddRegisterPlayerCompleteDelegate_Parms;
	memcpy ( &AddRegisterPlayerCompleteDelegate_Parms.RegisterPlayerCompleteDelegate, &RegisterPlayerCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddRegisterPlayerCompleteDelegate, &AddRegisterPlayerCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnRegisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnRegisterPlayerComplete = NULL;

	if ( ! pFnOnRegisterPlayerComplete )
		pFnOnRegisterPlayerComplete = (UFunction*) UObject::GObjObjects()->Data[ 27635 ];

	UOnlineGameInterface_execOnRegisterPlayerComplete_Parms OnRegisterPlayerComplete_Parms;
	memcpy ( &OnRegisterPlayerComplete_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &OnRegisterPlayerComplete_Parms.PlayerID, &PlayerID, 0x48 );
	OnRegisterPlayerComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnRegisterPlayerComplete, &OnRegisterPlayerComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.RegisterPlayers
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::RegisterPlayers ( struct FName SessionName, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnRegisterPlayers = NULL;

	if ( ! pFnRegisterPlayers )
		pFnRegisterPlayers = (UFunction*) UObject::GObjObjects()->Data[ 27630 ];

	UOnlineGameInterface_execRegisterPlayers_Parms RegisterPlayers_Parms;
	memcpy ( &RegisterPlayers_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnRegisterPlayers, &RegisterPlayers_Parms, NULL );

	if ( Players )
		memcpy ( Players, &RegisterPlayers_Parms.Players, 0xC );

	return RegisterPlayers_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.RegisterPlayer
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )
// unsigned long                  bWasInvited                    ( CPF_Parm )

bool UOnlineGameInterface::RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited )
{
	static UFunction* pFnRegisterPlayer = NULL;

	if ( ! pFnRegisterPlayer )
		pFnRegisterPlayer = (UFunction*) UObject::GObjObjects()->Data[ 21348 ];

	UOnlineGameInterface_execRegisterPlayer_Parms RegisterPlayer_Parms;
	memcpy ( &RegisterPlayer_Parms.SessionName, &SessionName, 0x8 );
	memcpy ( &RegisterPlayer_Parms.PlayerID, &PlayerID, 0x48 );
	RegisterPlayer_Parms.bWasInvited = bWasInvited;

	this->ProcessEvent ( pFnRegisterPlayer, &RegisterPlayer_Parms, NULL );

	return RegisterPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetResolvedConnectString
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FString                 ConnectInfo                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineGameInterface::GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo )
{
	static UFunction* pFnGetResolvedConnectString = NULL;

	if ( ! pFnGetResolvedConnectString )
		pFnGetResolvedConnectString = (UFunction*) UObject::GObjObjects()->Data[ 11236 ];

	UOnlineGameInterface_execGetResolvedConnectString_Parms GetResolvedConnectString_Parms;
	memcpy ( &GetResolvedConnectString_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetResolvedConnectString, &GetResolvedConnectString_Parms, NULL );

	if ( ConnectInfo )
		memcpy ( ConnectInfo, &GetResolvedConnectString_Parms.ConnectInfo, 0xC );

	return GetResolvedConnectString_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearJoinOnlineGameCompleteDelegate )
		pFnClearJoinOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27623 ];

	UOnlineGameInterface_execClearJoinOnlineGameCompleteDelegate_Parms ClearJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearJoinOnlineGameCompleteDelegate, &ClearJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddJoinOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinOnlineGameCompleteDelegate )
		pFnAddJoinOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27621 ];

	UOnlineGameInterface_execAddJoinOnlineGameCompleteDelegate_Parms AddJoinOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddJoinOnlineGameCompleteDelegate_Parms.JoinOnlineGameCompleteDelegate, &JoinOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddJoinOnlineGameCompleteDelegate, &AddJoinOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnJoinOnlineGameComplete = NULL;

	if ( ! pFnOnJoinOnlineGameComplete )
		pFnOnJoinOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27618 ];

	UOnlineGameInterface_execOnJoinOnlineGameComplete_Parms OnJoinOnlineGameComplete_Parms;
	memcpy ( &OnJoinOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnJoinOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnJoinOnlineGameComplete, &OnJoinOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.JoinOnlineGame
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  PlayerNum                      ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame )
{
	static UFunction* pFnJoinOnlineGame = NULL;

	if ( ! pFnJoinOnlineGame )
		pFnJoinOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 12824 ];

	UOnlineGameInterface_execJoinOnlineGame_Parms JoinOnlineGame_Parms;
	JoinOnlineGame_Parms.PlayerNum = PlayerNum;
	memcpy ( &JoinOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnJoinOnlineGame, &JoinOnlineGame_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &JoinOnlineGame_Parms.DesiredGame, 0x8 );

	return JoinOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.QueryNonAdvertisedData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            StartAt                        ( CPF_Parm )
// int                            NumberToQuery                  ( CPF_Parm )

bool UOnlineGameInterface::QueryNonAdvertisedData ( int StartAt, int NumberToQuery )
{
	static UFunction* pFnQueryNonAdvertisedData = NULL;

	if ( ! pFnQueryNonAdvertisedData )
		pFnQueryNonAdvertisedData = (UFunction*) UObject::GObjObjects()->Data[ 27611 ];

	UOnlineGameInterface_execQueryNonAdvertisedData_Parms QueryNonAdvertisedData_Parms;
	QueryNonAdvertisedData_Parms.StartAt = StartAt;
	QueryNonAdvertisedData_Parms.NumberToQuery = NumberToQuery;

	this->ProcessEvent ( pFnQueryNonAdvertisedData, &QueryNonAdvertisedData_Parms, NULL );

	return QueryNonAdvertisedData_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.FreeSearchResults
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineGameSearch*       Search                         ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::FreeSearchResults ( class UOnlineGameSearch* Search )
{
	static UFunction* pFnFreeSearchResults = NULL;

	if ( ! pFnFreeSearchResults )
		pFnFreeSearchResults = (UFunction*) UObject::GObjObjects()->Data[ 27608 ];

	UOnlineGameInterface_execFreeSearchResults_Parms FreeSearchResults_Parms;
	FreeSearchResults_Parms.Search = Search;

	this->ProcessEvent ( pFnFreeSearchResults, &FreeSearchResults_Parms, NULL );

	return FreeSearchResults_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSearch
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSearch*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch ( )
{
	static UFunction* pFnGetGameSearch = NULL;

	if ( ! pFnGetGameSearch )
		pFnGetGameSearch = (UFunction*) UObject::GObjObjects()->Data[ 27606 ];

	UOnlineGameInterface_execGetGameSearch_Parms GetGameSearch_Parms;

	this->ProcessEvent ( pFnGetGameSearch, &GetGameSearch_Parms, NULL );

	return GetGameSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm )

bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnBindPlatformSpecificSessionToSearch = NULL;

	if ( ! pFnBindPlatformSpecificSessionToSearch )
		pFnBindPlatformSpecificSessionToSearch = (UFunction*) UObject::GObjObjects()->Data[ 11225 ];

	UOnlineGameInterface_execBindPlatformSpecificSessionToSearch_Parms BindPlatformSpecificSessionToSearch_Parms;
	BindPlatformSpecificSessionToSearch_Parms.SearchingPlayerNum = SearchingPlayerNum;
	BindPlatformSpecificSessionToSearch_Parms.SearchSettings = SearchSettings;
	memcpy ( &BindPlatformSpecificSessionToSearch_Parms.PlatformSpecificInfo, &PlatformSpecificInfo, 0x50 );

	this->ProcessEvent ( pFnBindPlatformSpecificSessionToSearch, &BindPlatformSpecificSessionToSearch_Parms, NULL );

	return BindPlatformSpecificSessionToSearch_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfoBySessionName = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfoBySessionName )
		pFnReadPlatformSpecificSessionInfoBySessionName = (UFunction*) UObject::GObjObjects()->Data[ 11198 ];

	UOnlineGameInterface_execReadPlatformSpecificSessionInfoBySessionName_Parms ReadPlatformSpecificSessionInfoBySessionName_Parms;
	memcpy ( &ReadPlatformSpecificSessionInfoBySessionName_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfoBySessionName, &ReadPlatformSpecificSessionInfoBySessionName_Parms, NULL );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfoBySessionName_Parms.PlatformSpecificInfo, 0x50 );

	return ReadPlatformSpecificSessionInfoBySessionName_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FOnlineGameSearchResult DesiredGame                    ( CPF_Const | CPF_Parm | CPF_OutParm )
// unsigned char                  PlatformSpecificInfo           ( CPF_Parm | CPF_OutParm )

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo )
{
	static UFunction* pFnReadPlatformSpecificSessionInfo = NULL;

	if ( ! pFnReadPlatformSpecificSessionInfo )
		pFnReadPlatformSpecificSessionInfo = (UFunction*) UObject::GObjObjects()->Data[ 27597 ];

	UOnlineGameInterface_execReadPlatformSpecificSessionInfo_Parms ReadPlatformSpecificSessionInfo_Parms;

	this->ProcessEvent ( pFnReadPlatformSpecificSessionInfo, &ReadPlatformSpecificSessionInfo_Parms, NULL );

	if ( DesiredGame )
		memcpy ( DesiredGame, &ReadPlatformSpecificSessionInfo_Parms.DesiredGame, 0x8 );

	if ( PlatformSpecificInfo )
		memcpy ( PlatformSpecificInfo, &ReadPlatformSpecificSessionInfo_Parms.PlatformSpecificInfo, 0x50 );

	return ReadPlatformSpecificSessionInfo_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         QosStatusChangedDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearQosStatusChangedDelegate ( struct FScriptDelegate QosStatusChangedDelegate )
{
	static UFunction* pFnClearQosStatusChangedDelegate = NULL;

	if ( ! pFnClearQosStatusChangedDelegate )
		pFnClearQosStatusChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27595 ];

	UOnlineGameInterface_execClearQosStatusChangedDelegate_Parms ClearQosStatusChangedDelegate_Parms;
	memcpy ( &ClearQosStatusChangedDelegate_Parms.QosStatusChangedDelegate, &QosStatusChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearQosStatusChangedDelegate, &ClearQosStatusChangedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         QosStatusChangedDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddQosStatusChangedDelegate ( struct FScriptDelegate QosStatusChangedDelegate )
{
	static UFunction* pFnAddQosStatusChangedDelegate = NULL;

	if ( ! pFnAddQosStatusChangedDelegate )
		pFnAddQosStatusChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27593 ];

	UOnlineGameInterface_execAddQosStatusChangedDelegate_Parms AddQosStatusChangedDelegate_Parms;
	memcpy ( &AddQosStatusChangedDelegate_Parms.QosStatusChangedDelegate, &QosStatusChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddQosStatusChangedDelegate, &AddQosStatusChangedDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnQosStatusChanged
// [0x00120000] 
// Parameters infos:
// int                            NumComplete                    ( CPF_Parm )
// int                            NumTotal                       ( CPF_Parm )

void UOnlineGameInterface::OnQosStatusChanged ( int NumComplete, int NumTotal )
{
	static UFunction* pFnOnQosStatusChanged = NULL;

	if ( ! pFnOnQosStatusChanged )
		pFnOnQosStatusChanged = (UFunction*) UObject::GObjObjects()->Data[ 27590 ];

	UOnlineGameInterface_execOnQosStatusChanged_Parms OnQosStatusChanged_Parms;
	OnQosStatusChanged_Parms.NumComplete = NumComplete;
	OnQosStatusChanged_Parms.NumTotal = NumTotal;

	this->ProcessEvent ( pFnOnQosStatusChanged, &OnQosStatusChanged_Parms, NULL );
};

// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearCancelFindOnlineGamesCompleteDelegate )
		pFnClearCancelFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27588 ];

	UOnlineGameInterface_execClearCancelFindOnlineGamesCompleteDelegate_Parms ClearCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCancelFindOnlineGamesCompleteDelegate, &ClearCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddCancelFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddCancelFindOnlineGamesCompleteDelegate )
		pFnAddCancelFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27586 ];

	UOnlineGameInterface_execAddCancelFindOnlineGamesCompleteDelegate_Parms AddCancelFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddCancelFindOnlineGamesCompleteDelegate_Parms.CancelFindOnlineGamesCompleteDelegate, &CancelFindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCancelFindOnlineGamesCompleteDelegate, &AddCancelFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCancelFindOnlineGamesComplete = NULL;

	if ( ! pFnOnCancelFindOnlineGamesComplete )
		pFnOnCancelFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 27584 ];

	UOnlineGameInterface_execOnCancelFindOnlineGamesComplete_Parms OnCancelFindOnlineGamesComplete_Parms;
	OnCancelFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCancelFindOnlineGamesComplete, &OnCancelFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineGameInterface::CancelFindOnlineGames ( )
{
	static UFunction* pFnCancelFindOnlineGames = NULL;

	if ( ! pFnCancelFindOnlineGames )
		pFnCancelFindOnlineGames = (UFunction*) UObject::GObjObjects()->Data[ 27582 ];

	UOnlineGameInterface_execCancelFindOnlineGames_Parms CancelFindOnlineGames_Parms;

	this->ProcessEvent ( pFnCancelFindOnlineGames, &CancelFindOnlineGames_Parms, NULL );

	return CancelFindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnClearFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnClearFindOnlineGamesCompleteDelegate )
		pFnClearFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27580 ];

	UOnlineGameInterface_execClearFindOnlineGamesCompleteDelegate_Parms ClearFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &ClearFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearFindOnlineGamesCompleteDelegate, &ClearFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate )
{
	static UFunction* pFnAddFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnAddFindOnlineGamesCompleteDelegate )
		pFnAddFindOnlineGamesCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27578 ];

	UOnlineGameInterface_execAddFindOnlineGamesCompleteDelegate_Parms AddFindOnlineGamesCompleteDelegate_Parms;
	memcpy ( &AddFindOnlineGamesCompleteDelegate_Parms.FindOnlineGamesCompleteDelegate, &FindOnlineGamesCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddFindOnlineGamesCompleteDelegate, &AddFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnFindOnlineGamesComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = (UFunction*) UObject::GObjObjects()->Data[ 27576 ];

	UOnlineGameInterface_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;
	OnFindOnlineGamesComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.FindOnlineGames
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )

bool UOnlineGameInterface::FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings )
{
	static UFunction* pFnFindOnlineGames = NULL;

	if ( ! pFnFindOnlineGames )
		pFnFindOnlineGames = (UFunction*) UObject::GObjObjects()->Data[ 27572 ];

	UOnlineGameInterface_execFindOnlineGames_Parms FindOnlineGames_Parms;
	FindOnlineGames_Parms.SearchingPlayerNum = SearchingPlayerNum;
	FindOnlineGames_Parms.SearchSettings = SearchSettings;

	this->ProcessEvent ( pFnFindOnlineGames, &FindOnlineGames_Parms, NULL );

	return FindOnlineGames_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearDestroyOnlineGameCompleteDelegate )
		pFnClearDestroyOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27570 ];

	UOnlineGameInterface_execClearDestroyOnlineGameCompleteDelegate_Parms ClearDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDestroyOnlineGameCompleteDelegate, &ClearDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddDestroyOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddDestroyOnlineGameCompleteDelegate )
		pFnAddDestroyOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27568 ];

	UOnlineGameInterface_execAddDestroyOnlineGameCompleteDelegate_Parms AddDestroyOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddDestroyOnlineGameCompleteDelegate_Parms.DestroyOnlineGameCompleteDelegate, &DestroyOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDestroyOnlineGameCompleteDelegate, &AddDestroyOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27565 ];

	UOnlineGameInterface_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.DestroyOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

bool UOnlineGameInterface::DestroyOnlineGame ( struct FName SessionName )
{
	static UFunction* pFnDestroyOnlineGame = NULL;

	if ( ! pFnDestroyOnlineGame )
		pFnDestroyOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 12702 ];

	UOnlineGameInterface_execDestroyOnlineGame_Parms DestroyOnlineGame_Parms;
	memcpy ( &DestroyOnlineGame_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnDestroyOnlineGame, &DestroyOnlineGame_Parms, NULL );

	return DestroyOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.GetGameSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineGameSettings*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings ( struct FName SessionName )
{
	static UFunction* pFnGetGameSettings = NULL;

	if ( ! pFnGetGameSettings )
		pFnGetGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 8636 ];

	UOnlineGameInterface_execGetGameSettings_Parms GetGameSettings_Parms;
	memcpy ( &GetGameSettings_Parms.SessionName, &SessionName, 0x8 );

	this->ProcessEvent ( pFnGetGameSettings, &GetGameSettings_Parms, NULL );

	return GetGameSettings_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearUpdateOnlineGameCompleteDelegate )
		pFnClearUpdateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27561 ];

	UOnlineGameInterface_execClearUpdateOnlineGameCompleteDelegate_Parms ClearUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUpdateOnlineGameCompleteDelegate, &ClearUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddUpdateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddUpdateOnlineGameCompleteDelegate )
		pFnAddUpdateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27559 ];

	UOnlineGameInterface_execAddUpdateOnlineGameCompleteDelegate_Parms AddUpdateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddUpdateOnlineGameCompleteDelegate_Parms.UpdateOnlineGameCompleteDelegate, &UpdateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUpdateOnlineGameCompleteDelegate, &AddUpdateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnUpdateOnlineGameComplete = NULL;

	if ( ! pFnOnUpdateOnlineGameComplete )
		pFnOnUpdateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27556 ];

	UOnlineGameInterface_execOnUpdateOnlineGameComplete_Parms OnUpdateOnlineGameComplete_Parms;
	memcpy ( &OnUpdateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnUpdateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnUpdateOnlineGameComplete, &OnUpdateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.UpdateOnlineGame
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     UpdatedGameSettings            ( CPF_Parm )
// unsigned long                  bShouldRefreshOnlineData       ( CPF_OptionalParm | CPF_Parm )

bool UOnlineGameInterface::UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData )
{
	static UFunction* pFnUpdateOnlineGame = NULL;

	if ( ! pFnUpdateOnlineGame )
		pFnUpdateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 27551 ];

	UOnlineGameInterface_execUpdateOnlineGame_Parms UpdateOnlineGame_Parms;
	memcpy ( &UpdateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	UpdateOnlineGame_Parms.UpdatedGameSettings = UpdatedGameSettings;
	UpdateOnlineGame_Parms.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	this->ProcessEvent ( pFnUpdateOnlineGame, &UpdateOnlineGame_Parms, NULL );

	return UpdateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnClearCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnClearCreateOnlineGameCompleteDelegate )
		pFnClearCreateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27549 ];

	UOnlineGameInterface_execClearCreateOnlineGameCompleteDelegate_Parms ClearCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &ClearCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCreateOnlineGameCompleteDelegate, &ClearCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate )
{
	static UFunction* pFnAddCreateOnlineGameCompleteDelegate = NULL;

	if ( ! pFnAddCreateOnlineGameCompleteDelegate )
		pFnAddCreateOnlineGameCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27547 ];

	UOnlineGameInterface_execAddCreateOnlineGameCompleteDelegate_Parms AddCreateOnlineGameCompleteDelegate_Parms;
	memcpy ( &AddCreateOnlineGameCompleteDelegate_Parms.CreateOnlineGameCompleteDelegate, &CreateOnlineGameCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCreateOnlineGameCompleteDelegate, &AddCreateOnlineGameCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// [0x00120000] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlineGameInterface::OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnCreateOnlineGameComplete = NULL;

	if ( ! pFnOnCreateOnlineGameComplete )
		pFnOnCreateOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 27544 ];

	UOnlineGameInterface_execOnCreateOnlineGameComplete_Parms OnCreateOnlineGameComplete_Parms;
	memcpy ( &OnCreateOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnCreateOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnCreateOnlineGameComplete, &OnCreateOnlineGameComplete_Parms, NULL );
};

// Function Engine.OnlineGameInterface.CreateOnlineGame
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  HostingPlayerNum               ( CPF_Parm )
// struct FName                   SessionName                    ( CPF_Parm )
// class UOnlineGameSettings*     NewGameSettings                ( CPF_Parm )

bool UOnlineGameInterface::CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings )
{
	static UFunction* pFnCreateOnlineGame = NULL;

	if ( ! pFnCreateOnlineGame )
		pFnCreateOnlineGame = (UFunction*) UObject::GObjObjects()->Data[ 21783 ];

	UOnlineGameInterface_execCreateOnlineGame_Parms CreateOnlineGame_Parms;
	CreateOnlineGame_Parms.HostingPlayerNum = HostingPlayerNum;
	memcpy ( &CreateOnlineGame_Parms.SessionName, &SessionName, 0x8 );
	CreateOnlineGame_Parms.NewGameSettings = NewGameSettings;

	this->ProcessEvent ( pFnCreateOnlineGame, &CreateOnlineGame_Parms, NULL );

	return CreateOnlineGame_Parms.ReturnValue;
};

// Function Engine.OnlineGameInterface.SetFriendJoinLocation
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            JoinablePlayerID               ( CPF_Parm )
// struct FString                 ServerAddress                  ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Visibility                     ( CPF_Parm )

void UOnlineGameInterface::SetFriendJoinLocation ( struct FUniqueNetId JoinablePlayerID, struct FString ServerAddress, unsigned char Visibility )
{
	static UFunction* pFnSetFriendJoinLocation = NULL;

	if ( ! pFnSetFriendJoinLocation )
		pFnSetFriendJoinLocation = (UFunction*) UObject::GObjObjects()->Data[ 27537 ];

	UOnlineGameInterface_execSetFriendJoinLocation_Parms SetFriendJoinLocation_Parms;
	memcpy ( &SetFriendJoinLocation_Parms.JoinablePlayerID, &JoinablePlayerID, 0x48 );
	memcpy ( &SetFriendJoinLocation_Parms.ServerAddress, &ServerAddress, 0xC );
	SetFriendJoinLocation_Parms.Visibility = Visibility;

	this->ProcessEvent ( pFnSetFriendJoinLocation, &SetFriendJoinLocation_Parms, NULL );
};

// Function Engine.OnlineGameInterface.ClearReportMatchmakingInfoDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         OldDelegate                    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::ClearReportMatchmakingInfoDelegate ( struct FScriptDelegate OldDelegate )
{
	static UFunction* pFnClearReportMatchmakingInfoDelegate = NULL;

	if ( ! pFnClearReportMatchmakingInfoDelegate )
		pFnClearReportMatchmakingInfoDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27535 ];

	UOnlineGameInterface_execClearReportMatchmakingInfoDelegate_Parms ClearReportMatchmakingInfoDelegate_Parms;
	memcpy ( &ClearReportMatchmakingInfoDelegate_Parms.OldDelegate, &OldDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReportMatchmakingInfoDelegate, &ClearReportMatchmakingInfoDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.AddReportMatchmakingInfoDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         NewDelegate                    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::AddReportMatchmakingInfoDelegate ( struct FScriptDelegate NewDelegate )
{
	static UFunction* pFnAddReportMatchmakingInfoDelegate = NULL;

	if ( ! pFnAddReportMatchmakingInfoDelegate )
		pFnAddReportMatchmakingInfoDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27533 ];

	UOnlineGameInterface_execAddReportMatchmakingInfoDelegate_Parms AddReportMatchmakingInfoDelegate_Parms;
	memcpy ( &AddReportMatchmakingInfoDelegate_Parms.NewDelegate, &NewDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReportMatchmakingInfoDelegate, &AddReportMatchmakingInfoDelegate_Parms, NULL );
};

// Function Engine.OnlineGameInterface.EventReportMatchmakingInfo
// [0x00120000] 
// Parameters infos:
// struct FString                 NewInfo                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineGameInterface::EventReportMatchmakingInfo ( struct FString NewInfo )
{
	static UFunction* pFnEventReportMatchmakingInfo = NULL;

	if ( ! pFnEventReportMatchmakingInfo )
		pFnEventReportMatchmakingInfo = (UFunction*) UObject::GObjObjects()->Data[ 27531 ];

	UOnlineGameInterface_execEventReportMatchmakingInfo_Parms EventReportMatchmakingInfo_Parms;
	memcpy ( &EventReportMatchmakingInfo_Parms.NewInfo, &NewInfo, 0xC );

	this->ProcessEvent ( pFnEventReportMatchmakingInfo, &EventReportMatchmakingInfo_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.UpdateSessionStatusFromPlayers
// [0x00020000] 
// Parameters infos:
// int                            CurrentPlayerCount             ( CPF_Parm )
// int                            numBotPlayers                  ( CPF_Parm )

void UOnlineSystemInterface::UpdateSessionStatusFromPlayers ( int CurrentPlayerCount, int numBotPlayers )
{
	static UFunction* pFnUpdateSessionStatusFromPlayers = NULL;

	if ( ! pFnUpdateSessionStatusFromPlayers )
		pFnUpdateSessionStatusFromPlayers = (UFunction*) UObject::GObjObjects()->Data[ 29414 ];

	UOnlineSystemInterface_execUpdateSessionStatusFromPlayers_Parms UpdateSessionStatusFromPlayers_Parms;
	UpdateSessionStatusFromPlayers_Parms.CurrentPlayerCount = CurrentPlayerCount;
	UpdateSessionStatusFromPlayers_Parms.numBotPlayers = numBotPlayers;

	this->ProcessEvent ( pFnUpdateSessionStatusFromPlayers, &UpdateSessionStatusFromPlayers_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.HandleBootMessage
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::HandleBootMessage ( )
{
	static UFunction* pFnHandleBootMessage = NULL;

	if ( ! pFnHandleBootMessage )
		pFnHandleBootMessage = (UFunction*) UObject::GObjObjects()->Data[ 29412 ];

	UOnlineSystemInterface_execHandleBootMessage_Parms HandleBootMessage_Parms;

	this->ProcessEvent ( pFnHandleBootMessage, &HandleBootMessage_Parms, NULL );

	return HandleBootMessage_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearErrorDialogClosedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearErrorDialogClosedDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearErrorDialogClosedDelegate = NULL;

	if ( ! pFnClearErrorDialogClosedDelegate )
		pFnClearErrorDialogClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29410 ];

	UOnlineSystemInterface_execClearErrorDialogClosedDelegate_Parms ClearErrorDialogClosedDelegate_Parms;
	memcpy ( &ClearErrorDialogClosedDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearErrorDialogClosedDelegate, &ClearErrorDialogClosedDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddErrorDialogClosedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddErrorDialogClosedDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddErrorDialogClosedDelegate = NULL;

	if ( ! pFnAddErrorDialogClosedDelegate )
		pFnAddErrorDialogClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29408 ];

	UOnlineSystemInterface_execAddErrorDialogClosedDelegate_Parms AddErrorDialogClosedDelegate_Parms;
	memcpy ( &AddErrorDialogClosedDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddErrorDialogClosedDelegate, &AddErrorDialogClosedDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnErrorDialogClosed
// [0x00120000] 
// Parameters infos:
// int                            LocalUserNum                   ( CPF_Parm )

void UOnlineSystemInterface::OnErrorDialogClosed ( int LocalUserNum )
{
	static UFunction* pFnOnErrorDialogClosed = NULL;

	if ( ! pFnOnErrorDialogClosed )
		pFnOnErrorDialogClosed = (UFunction*) UObject::GObjObjects()->Data[ 29406 ];

	UOnlineSystemInterface_execOnErrorDialogClosed_Parms OnErrorDialogClosed_Parms;
	OnErrorDialogClosed_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnOnErrorDialogClosed, &OnErrorDialogClosed_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearCommerceDialogClosedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearCommerceDialogClosedDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearCommerceDialogClosedDelegate = NULL;

	if ( ! pFnClearCommerceDialogClosedDelegate )
		pFnClearCommerceDialogClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29404 ];

	UOnlineSystemInterface_execClearCommerceDialogClosedDelegate_Parms ClearCommerceDialogClosedDelegate_Parms;
	memcpy ( &ClearCommerceDialogClosedDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCommerceDialogClosedDelegate, &ClearCommerceDialogClosedDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddCommerceDialogClosedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddCommerceDialogClosedDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddCommerceDialogClosedDelegate = NULL;

	if ( ! pFnAddCommerceDialogClosedDelegate )
		pFnAddCommerceDialogClosedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29402 ];

	UOnlineSystemInterface_execAddCommerceDialogClosedDelegate_Parms AddCommerceDialogClosedDelegate_Parms;
	memcpy ( &AddCommerceDialogClosedDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCommerceDialogClosedDelegate, &AddCommerceDialogClosedDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnCommerceDialogClosed
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnCommerceDialogClosed ( )
{
	static UFunction* pFnOnCommerceDialogClosed = NULL;

	if ( ! pFnOnCommerceDialogClosed )
		pFnOnCommerceDialogClosed = (UFunction*) UObject::GObjObjects()->Data[ 29400 ];

	UOnlineSystemInterface_execOnCommerceDialogClosed_Parms OnCommerceDialogClosed_Parms;

	this->ProcessEvent ( pFnOnCommerceDialogClosed, &OnCommerceDialogClosed_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearCloseKickPlayerDialogDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearCloseKickPlayerDialogDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearCloseKickPlayerDialogDelegate = NULL;

	if ( ! pFnClearCloseKickPlayerDialogDelegate )
		pFnClearCloseKickPlayerDialogDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29401 ];

	UOnlineSystemInterface_execClearCloseKickPlayerDialogDelegate_Parms ClearCloseKickPlayerDialogDelegate_Parms;
	memcpy ( &ClearCloseKickPlayerDialogDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCloseKickPlayerDialogDelegate, &ClearCloseKickPlayerDialogDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddCloseKickPlayerDialogDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddCloseKickPlayerDialogDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddCloseKickPlayerDialogDelegate = NULL;

	if ( ! pFnAddCloseKickPlayerDialogDelegate )
		pFnAddCloseKickPlayerDialogDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29417 ];

	UOnlineSystemInterface_execAddCloseKickPlayerDialogDelegate_Parms AddCloseKickPlayerDialogDelegate_Parms;
	memcpy ( &AddCloseKickPlayerDialogDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCloseKickPlayerDialogDelegate, &AddCloseKickPlayerDialogDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnCloseKickPlayerDialog
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnCloseKickPlayerDialog ( )
{
	static UFunction* pFnOnCloseKickPlayerDialog = NULL;

	if ( ! pFnOnCloseKickPlayerDialog )
		pFnOnCloseKickPlayerDialog = (UFunction*) UObject::GObjObjects()->Data[ 29419 ];

	UOnlineSystemInterface_execOnCloseKickPlayerDialog_Parms OnCloseKickPlayerDialog_Parms;

	this->ProcessEvent ( pFnOnCloseKickPlayerDialog, &OnCloseKickPlayerDialog_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearTrialStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearTrialStatusChangeDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearTrialStatusChangeDelegate = NULL;

	if ( ! pFnClearTrialStatusChangeDelegate )
		pFnClearTrialStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29398 ];

	UOnlineSystemInterface_execClearTrialStatusChangeDelegate_Parms ClearTrialStatusChangeDelegate_Parms;
	memcpy ( &ClearTrialStatusChangeDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearTrialStatusChangeDelegate, &ClearTrialStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddTrialStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddTrialStatusChangeDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddTrialStatusChangeDelegate = NULL;

	if ( ! pFnAddTrialStatusChangeDelegate )
		pFnAddTrialStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29396 ];

	UOnlineSystemInterface_execAddTrialStatusChangeDelegate_Parms AddTrialStatusChangeDelegate_Parms;
	memcpy ( &AddTrialStatusChangeDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddTrialStatusChangeDelegate, &AddTrialStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.IsTrialVersion
// [0x00020100] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::IsTrialVersion ( )
{
	static UFunction* pFnIsTrialVersion = NULL;

	if ( ! pFnIsTrialVersion )
		pFnIsTrialVersion = (UFunction*) UObject::GObjObjects()->Data[ 29394 ];

	UOnlineSystemInterface_execIsTrialVersion_Parms IsTrialVersion_Parms;

	this->ProcessEvent ( pFnIsTrialVersion, &IsTrialVersion_Parms, NULL );

	return IsTrialVersion_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.OnTrialStatusChange
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnTrialStatusChange ( )
{
	static UFunction* pFnOnTrialStatusChange = NULL;

	if ( ! pFnOnTrialStatusChange )
		pFnOnTrialStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 29393 ];

	UOnlineSystemInterface_execOnTrialStatusChange_Parms OnTrialStatusChange_Parms;

	this->ProcessEvent ( pFnOnTrialStatusChange, &OnTrialStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearUnlockedDLCChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearUnlockedDLCChangeDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnClearUnlockedDLCChangeDelegate = NULL;

	if ( ! pFnClearUnlockedDLCChangeDelegate )
		pFnClearUnlockedDLCChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29391 ];

	UOnlineSystemInterface_execClearUnlockedDLCChangeDelegate_Parms ClearUnlockedDLCChangeDelegate_Parms;
	memcpy ( &ClearUnlockedDLCChangeDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUnlockedDLCChangeDelegate, &ClearUnlockedDLCChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddUnlockedDLCChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         InDelegate                     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddUnlockedDLCChangeDelegate ( struct FScriptDelegate InDelegate )
{
	static UFunction* pFnAddUnlockedDLCChangeDelegate = NULL;

	if ( ! pFnAddUnlockedDLCChangeDelegate )
		pFnAddUnlockedDLCChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29389 ];

	UOnlineSystemInterface_execAddUnlockedDLCChangeDelegate_Parms AddUnlockedDLCChangeDelegate_Parms;
	memcpy ( &AddUnlockedDLCChangeDelegate_Parms.InDelegate, &InDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUnlockedDLCChangeDelegate, &AddUnlockedDLCChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetUnlockedDLC
// [0x00020000] 
// Parameters infos:
// TArray< struct FName >         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< struct FName > UOnlineSystemInterface::GetUnlockedDLC ( )
{
	static UFunction* pFnGetUnlockedDLC = NULL;

	if ( ! pFnGetUnlockedDLC )
		pFnGetUnlockedDLC = (UFunction*) UObject::GObjObjects()->Data[ 29386 ];

	UOnlineSystemInterface_execGetUnlockedDLC_Parms GetUnlockedDLC_Parms;

	this->ProcessEvent ( pFnGetUnlockedDLC, &GetUnlockedDLC_Parms, NULL );

	return GetUnlockedDLC_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.OnUnlockedDLCChange
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnUnlockedDLCChange ( )
{
	static UFunction* pFnOnUnlockedDLCChange = NULL;

	if ( ! pFnOnUnlockedDLCChange )
		pFnOnUnlockedDLCChange = (UFunction*) UObject::GObjObjects()->Data[ 29384 ];

	UOnlineSystemInterface_execOnUnlockedDLCChange_Parms OnUnlockedDLCChange_Parms;

	this->ProcessEvent ( pFnOnUnlockedDLCChange, &OnUnlockedDLCChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetOverlayEnabled
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::GetOverlayEnabled ( )
{
	static UFunction* pFnGetOverlayEnabled = NULL;

	if ( ! pFnGetOverlayEnabled )
		pFnGetOverlayEnabled = (UFunction*) UObject::GObjObjects()->Data[ 29385 ];

	UOnlineSystemInterface_execGetOverlayEnabled_Parms GetOverlayEnabled_Parms;

	this->ProcessEvent ( pFnGetOverlayEnabled, &GetOverlayEnabled_Parms, NULL );

	return GetOverlayEnabled_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetDLCPurchaseTime
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AppName                        ( CPF_Parm )

int UOnlineSystemInterface::GetDLCPurchaseTime ( struct FName AppName )
{
	static UFunction* pFnGetDLCPurchaseTime = NULL;

	if ( ! pFnGetDLCPurchaseTime )
		pFnGetDLCPurchaseTime = (UFunction*) UObject::GObjObjects()->Data[ 29421 ];

	UOnlineSystemInterface_execGetDLCPurchaseTime_Parms GetDLCPurchaseTime_Parms;
	memcpy ( &GetDLCPurchaseTime_Parms.AppName, &AppName, 0x8 );

	this->ProcessEvent ( pFnGetDLCPurchaseTime, &GetDLCPurchaseTime_Parms, NULL );

	return GetDLCPurchaseTime_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.GetLocale
// [0x00020000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineSystemInterface::GetLocale ( )
{
	static UFunction* pFnGetLocale = NULL;

	if ( ! pFnGetLocale )
		pFnGetLocale = (UFunction*) UObject::GObjObjects()->Data[ 29382 ];

	UOnlineSystemInterface_execGetLocale_Parms GetLocale_Parms;

	this->ProcessEvent ( pFnGetLocale, &GetLocale_Parms, NULL );

	return GetLocale_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnClearStorageDeviceChangeDelegate = NULL;

	if ( ! pFnClearStorageDeviceChangeDelegate )
		pFnClearStorageDeviceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29380 ];

	UOnlineSystemInterface_execClearStorageDeviceChangeDelegate_Parms ClearStorageDeviceChangeDelegate_Parms;
	memcpy ( &ClearStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnClearStorageDeviceChangeDelegate, &ClearStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         StorageDeviceChangeDelegate    ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate )
{
	static UFunction* pFnAddStorageDeviceChangeDelegate = NULL;

	if ( ! pFnAddStorageDeviceChangeDelegate )
		pFnAddStorageDeviceChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29378 ];

	UOnlineSystemInterface_execAddStorageDeviceChangeDelegate_Parms AddStorageDeviceChangeDelegate_Parms;
	memcpy ( &AddStorageDeviceChangeDelegate_Parms.StorageDeviceChangeDelegate, &StorageDeviceChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnAddStorageDeviceChangeDelegate, &AddStorageDeviceChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnStorageDeviceChange ( )
{
	static UFunction* pFnOnStorageDeviceChange = NULL;

	if ( ! pFnOnStorageDeviceChange )
		pFnOnStorageDeviceChange = (UFunction*) UObject::GObjObjects()->Data[ 29377 ];

	UOnlineSystemInterface_execOnStorageDeviceChange_Parms OnStorageDeviceChange_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChange, &OnStorageDeviceChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNATType
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNATType ( )
{
	static UFunction* pFnGetNATType = NULL;

	if ( ! pFnGetNATType )
		pFnGetNATType = (UFunction*) UObject::GObjObjects()->Data[ 29375 ];

	UOnlineSystemInterface_execGetNATType_Parms GetNATType_Parms;

	this->ProcessEvent ( pFnGetNATType, &GetNATType_Parms, NULL );

	return GetNATType_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnClearConnectionStatusChangeDelegate = NULL;

	if ( ! pFnClearConnectionStatusChangeDelegate )
		pFnClearConnectionStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29373 ];

	UOnlineSystemInterface_execClearConnectionStatusChangeDelegate_Parms ClearConnectionStatusChangeDelegate_Parms;
	memcpy ( &ClearConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnClearConnectionStatusChangeDelegate, &ClearConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ConnectionStatusDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate )
{
	static UFunction* pFnAddConnectionStatusChangeDelegate = NULL;

	if ( ! pFnAddConnectionStatusChangeDelegate )
		pFnAddConnectionStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29371 ];

	UOnlineSystemInterface_execAddConnectionStatusChangeDelegate_Parms AddConnectionStatusChangeDelegate_Parms;
	memcpy ( &AddConnectionStatusChangeDelegate_Parms.ConnectionStatusDelegate, &ConnectionStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnAddConnectionStatusChangeDelegate, &AddConnectionStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned char                  ConnectionStatus               ( CPF_Parm )

void UOnlineSystemInterface::OnConnectionStatusChange ( unsigned char ConnectionStatus )
{
	static UFunction* pFnOnConnectionStatusChange = NULL;

	if ( ! pFnOnConnectionStatusChange )
		pFnOnConnectionStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 29368 ];

	UOnlineSystemInterface_execOnConnectionStatusChange_Parms OnConnectionStatusChange_Parms;
	OnConnectionStatusChange_Parms.ConnectionStatus = ConnectionStatus;

	this->ProcessEvent ( pFnOnConnectionStatusChange, &OnConnectionStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetCurrentConnectionStatus
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetCurrentConnectionStatus ( )
{
	static UFunction* pFnGetCurrentConnectionStatus = NULL;

	if ( ! pFnGetCurrentConnectionStatus )
		pFnGetCurrentConnectionStatus = (UFunction*) UObject::GObjObjects()->Data[ 29370 ];

	UOnlineSystemInterface_execGetCurrentConnectionStatus_Parms GetCurrentConnectionStatus_Parms;

	this->ProcessEvent ( pFnGetCurrentConnectionStatus, &GetCurrentConnectionStatus_Parms, NULL );

	return GetCurrentConnectionStatus_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.AnyPlayerChatRestricted
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::AnyPlayerChatRestricted ( )
{
	static UFunction* pFnAnyPlayerChatRestricted = NULL;

	if ( ! pFnAnyPlayerChatRestricted )
		pFnAnyPlayerChatRestricted = (UFunction*) UObject::GObjObjects()->Data[ 29366 ];

	UOnlineSystemInterface_execAnyPlayerChatRestricted_Parms AnyPlayerChatRestricted_Parms;

	this->ProcessEvent ( pFnAnyPlayerChatRestricted, &AnyPlayerChatRestricted_Parms, NULL );

	return AnyPlayerChatRestricted_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.InitializeTrophyAPI
// [0x00020000] 
// Parameters infos:

void UOnlineSystemInterface::InitializeTrophyAPI ( )
{
	static UFunction* pFnInitializeTrophyAPI = NULL;

	if ( ! pFnInitializeTrophyAPI )
		pFnInitializeTrophyAPI = (UFunction*) UObject::GObjObjects()->Data[ 29364 ];

	UOnlineSystemInterface_execInitializeTrophyAPI_Parms InitializeTrophyAPI_Parms;

	this->ProcessEvent ( pFnInitializeTrophyAPI, &InitializeTrophyAPI_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OpenStoreForItemsAsync
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FString >       Targets                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         Callback                       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::OpenStoreForItemsAsync ( unsigned char LocalUserNum, TArray< struct FString > Targets, struct FScriptDelegate Callback )
{
	static UFunction* pFnOpenStoreForItemsAsync = NULL;

	if ( ! pFnOpenStoreForItemsAsync )
		pFnOpenStoreForItemsAsync = (UFunction*) UObject::GObjObjects()->Data[ 29365 ];

	UOnlineSystemInterface_execOpenStoreForItemsAsync_Parms OpenStoreForItemsAsync_Parms;
	OpenStoreForItemsAsync_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OpenStoreForItemsAsync_Parms.Targets, &Targets, 0xC );
	memcpy ( &OpenStoreForItemsAsync_Parms.Callback, &Callback, 0x10 );

	this->ProcessEvent ( pFnOpenStoreForItemsAsync, &OpenStoreForItemsAsync_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnStorePurchaseCompleteDelegate
// [0x00120000] 
// Parameters infos:

void UOnlineSystemInterface::OnStorePurchaseCompleteDelegate ( )
{
	static UFunction* pFnOnStorePurchaseCompleteDelegate = NULL;

	if ( ! pFnOnStorePurchaseCompleteDelegate )
		pFnOnStorePurchaseCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29426 ];

	UOnlineSystemInterface_execOnStorePurchaseCompleteDelegate_Parms OnStorePurchaseCompleteDelegate_Parms;

	this->ProcessEvent ( pFnOnStorePurchaseCompleteDelegate, &OnStorePurchaseCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OpenStoreForItems
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FString >       Targets                        ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::OpenStoreForItems ( unsigned char LocalUserNum, TArray< struct FString > Targets )
{
	static UFunction* pFnOpenStoreForItems = NULL;

	if ( ! pFnOpenStoreForItems )
		pFnOpenStoreForItems = (UFunction*) UObject::GObjObjects()->Data[ 29431 ];

	UOnlineSystemInterface_execOpenStoreForItems_Parms OpenStoreForItems_Parms;
	OpenStoreForItems_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OpenStoreForItems_Parms.Targets, &Targets, 0xC );

	this->ProcessEvent ( pFnOpenStoreForItems, &OpenStoreForItems_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OpenStoreForDLC
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FName                   DLC                            ( CPF_Parm )

void UOnlineSystemInterface::OpenStoreForDLC ( unsigned char LocalUserNum, struct FName DLC )
{
	static UFunction* pFnOpenStoreForDLC = NULL;

	if ( ! pFnOpenStoreForDLC )
		pFnOpenStoreForDLC = (UFunction*) UObject::GObjObjects()->Data[ 29361 ];

	UOnlineSystemInterface_execOpenStoreForDLC_Parms OpenStoreForDLC_Parms;
	OpenStoreForDLC_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &OpenStoreForDLC_Parms.DLC, &DLC, 0x8 );

	this->ProcessEvent ( pFnOpenStoreForDLC, &OpenStoreForDLC_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OpenErrorDialog
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  ErrorCode                      ( CPF_Parm )

void UOnlineSystemInterface::OpenErrorDialog ( unsigned char LocalUserNum, unsigned char ErrorCode )
{
	static UFunction* pFnOpenErrorDialog = NULL;

	if ( ! pFnOpenErrorDialog )
		pFnOpenErrorDialog = (UFunction*) UObject::GObjObjects()->Data[ 29358 ];

	UOnlineSystemInterface_execOpenErrorDialog_Parms OpenErrorDialog_Parms;
	OpenErrorDialog_Parms.LocalUserNum = LocalUserNum;
	OpenErrorDialog_Parms.ErrorCode = ErrorCode;

	this->ProcessEvent ( pFnOpenErrorDialog, &OpenErrorDialog_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OpenPS4DisplayMode
// [0x00024000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  DisplayMode                    ( CPF_Parm )
// TArray< struct FString >       Targets                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            ServiceLabel                   ( CPF_OptionalParm | CPF_Parm )

void UOnlineSystemInterface::OpenPS4DisplayMode ( unsigned char LocalUserNum, unsigned char DisplayMode, TArray< struct FString > Targets, int ServiceLabel )
{
	static UFunction* pFnOpenPS4DisplayMode = NULL;

	if ( ! pFnOpenPS4DisplayMode )
		pFnOpenPS4DisplayMode = (UFunction*) UObject::GObjObjects()->Data[ 29352 ];

	UOnlineSystemInterface_execOpenPS4DisplayMode_Parms OpenPS4DisplayMode_Parms;
	OpenPS4DisplayMode_Parms.LocalUserNum = LocalUserNum;
	OpenPS4DisplayMode_Parms.DisplayMode = DisplayMode;
	memcpy ( &OpenPS4DisplayMode_Parms.Targets, &Targets, 0xC );
	OpenPS4DisplayMode_Parms.ServiceLabel = ServiceLabel;

	this->ProcessEvent ( pFnOpenPS4DisplayMode, &OpenPS4DisplayMode_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ResetControllerColor
// [0x00020000] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )

void UOnlineSystemInterface::ResetControllerColor ( int ControllerId )
{
	static UFunction* pFnResetControllerColor = NULL;

	if ( ! pFnResetControllerColor )
		pFnResetControllerColor = (UFunction*) UObject::GObjObjects()->Data[ 29350 ];

	UOnlineSystemInterface_execResetControllerColor_Parms ResetControllerColor_Parms;
	ResetControllerColor_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnResetControllerColor, &ResetControllerColor_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.SetControllerColor
// [0x00020000] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// struct FColor                  NewColor                       ( CPF_Parm )

void UOnlineSystemInterface::SetControllerColor ( int ControllerId, struct FColor NewColor )
{
	static UFunction* pFnSetControllerColor = NULL;

	if ( ! pFnSetControllerColor )
		pFnSetControllerColor = (UFunction*) UObject::GObjObjects()->Data[ 29347 ];

	UOnlineSystemInterface_execSetControllerColor_Parms SetControllerColor_Parms;
	SetControllerColor_Parms.ControllerId = ControllerId;
	memcpy ( &SetControllerColor_Parms.NewColor, &NewColor, 0x4 );

	this->ProcessEvent ( pFnSetControllerColor, &SetControllerColor_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.IsControllerConnected
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

bool UOnlineSystemInterface::IsControllerConnected ( int ControllerId )
{
	static UFunction* pFnIsControllerConnected = NULL;

	if ( ! pFnIsControllerConnected )
		pFnIsControllerConnected = (UFunction*) UObject::GObjObjects()->Data[ 29344 ];

	UOnlineSystemInterface_execIsControllerConnected_Parms IsControllerConnected_Parms;
	IsControllerConnected_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnIsControllerConnected, &IsControllerConnected_Parms, NULL );

	return IsControllerConnected_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearUserRestoredDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserRestoredDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearUserRestoredDelegate ( struct FScriptDelegate UserRestoredDelegate )
{
	static UFunction* pFnClearUserRestoredDelegate = NULL;

	if ( ! pFnClearUserRestoredDelegate )
		pFnClearUserRestoredDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29342 ];

	UOnlineSystemInterface_execClearUserRestoredDelegate_Parms ClearUserRestoredDelegate_Parms;
	memcpy ( &ClearUserRestoredDelegate_Parms.UserRestoredDelegate, &UserRestoredDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUserRestoredDelegate, &ClearUserRestoredDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddUserRestoredDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserRestoredDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddUserRestoredDelegate ( struct FScriptDelegate UserRestoredDelegate )
{
	static UFunction* pFnAddUserRestoredDelegate = NULL;

	if ( ! pFnAddUserRestoredDelegate )
		pFnAddUserRestoredDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29340 ];

	UOnlineSystemInterface_execAddUserRestoredDelegate_Parms AddUserRestoredDelegate_Parms;
	memcpy ( &AddUserRestoredDelegate_Parms.UserRestoredDelegate, &UserRestoredDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUserRestoredDelegate, &AddUserRestoredDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnUserRestored
// [0x00120000] 
// Parameters infos:
// unsigned char                  ControllerId                   ( CPF_Parm )

void UOnlineSystemInterface::OnUserRestored ( unsigned char ControllerId )
{
	static UFunction* pFnOnUserRestored = NULL;

	if ( ! pFnOnUserRestored )
		pFnOnUserRestored = (UFunction*) UObject::GObjObjects()->Data[ 29338 ];

	UOnlineSystemInterface_execOnUserRestored_Parms OnUserRestored_Parms;
	OnUserRestored_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnOnUserRestored, &OnUserRestored_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearUserOrphanedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserOrphanedDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearUserOrphanedDelegate ( struct FScriptDelegate UserOrphanedDelegate )
{
	static UFunction* pFnClearUserOrphanedDelegate = NULL;

	if ( ! pFnClearUserOrphanedDelegate )
		pFnClearUserOrphanedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29336 ];

	UOnlineSystemInterface_execClearUserOrphanedDelegate_Parms ClearUserOrphanedDelegate_Parms;
	memcpy ( &ClearUserOrphanedDelegate_Parms.UserOrphanedDelegate, &UserOrphanedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearUserOrphanedDelegate, &ClearUserOrphanedDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddUserOrphanedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         UserOrphanedDelegate           ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddUserOrphanedDelegate ( struct FScriptDelegate UserOrphanedDelegate )
{
	static UFunction* pFnAddUserOrphanedDelegate = NULL;

	if ( ! pFnAddUserOrphanedDelegate )
		pFnAddUserOrphanedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29334 ];

	UOnlineSystemInterface_execAddUserOrphanedDelegate_Parms AddUserOrphanedDelegate_Parms;
	memcpy ( &AddUserOrphanedDelegate_Parms.UserOrphanedDelegate, &UserOrphanedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddUserOrphanedDelegate, &AddUserOrphanedDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnUserOrphaned
// [0x00120000] 
// Parameters infos:
// unsigned char                  ControllerId                   ( CPF_Parm )

void UOnlineSystemInterface::OnUserOrphaned ( unsigned char ControllerId )
{
	static UFunction* pFnOnUserOrphaned = NULL;

	if ( ! pFnOnUserOrphaned )
		pFnOnUserOrphaned = (UFunction*) UObject::GObjObjects()->Data[ 29332 ];

	UOnlineSystemInterface_execOnUserOrphaned_Parms OnUserOrphaned_Parms;
	OnUserOrphaned_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnOnUserOrphaned, &OnUserOrphaned_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnClearControllerChangeDelegate = NULL;

	if ( ! pFnClearControllerChangeDelegate )
		pFnClearControllerChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29330 ];

	UOnlineSystemInterface_execClearControllerChangeDelegate_Parms ClearControllerChangeDelegate_Parms;
	memcpy ( &ClearControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnClearControllerChangeDelegate, &ClearControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ControllerChangeDelegate       ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate )
{
	static UFunction* pFnAddControllerChangeDelegate = NULL;

	if ( ! pFnAddControllerChangeDelegate )
		pFnAddControllerChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29328 ];

	UOnlineSystemInterface_execAddControllerChangeDelegate_Parms AddControllerChangeDelegate_Parms;
	memcpy ( &AddControllerChangeDelegate_Parms.ControllerChangeDelegate, &ControllerChangeDelegate, 0x10 );

	this->ProcessEvent ( pFnAddControllerChangeDelegate, &AddControllerChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnControllerChange
// [0x00120000] 
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnControllerChange ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnOnControllerChange = NULL;

	if ( ! pFnOnControllerChange )
		pFnOnControllerChange = (UFunction*) UObject::GObjObjects()->Data[ 29325 ];

	UOnlineSystemInterface_execOnControllerChange_Parms OnControllerChange_Parms;
	OnControllerChange_Parms.ControllerId = ControllerId;
	OnControllerChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnControllerChange, &OnControllerChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  NewPos                         ( CPF_Parm )

void UOnlineSystemInterface::SetNetworkNotificationPosition ( unsigned char NewPos )
{
	static UFunction* pFnSetNetworkNotificationPosition = NULL;

	if ( ! pFnSetNetworkNotificationPosition )
		pFnSetNetworkNotificationPosition = (UFunction*) UObject::GObjObjects()->Data[ 29323 ];

	UOnlineSystemInterface_execSetNetworkNotificationPosition_Parms SetNetworkNotificationPosition_Parms;
	SetNetworkNotificationPosition_Parms.NewPos = NewPos;

	this->ProcessEvent ( pFnSetNetworkNotificationPosition, &SetNetworkNotificationPosition_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// [0x00020000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UOnlineSystemInterface::GetNetworkNotificationPosition ( )
{
	static UFunction* pFnGetNetworkNotificationPosition = NULL;

	if ( ! pFnGetNetworkNotificationPosition )
		pFnGetNetworkNotificationPosition = (UFunction*) UObject::GObjObjects()->Data[ 29321 ];

	UOnlineSystemInterface_execGetNetworkNotificationPosition_Parms GetNetworkNotificationPosition_Parms;

	this->ProcessEvent ( pFnGetNetworkNotificationPosition, &GetNetworkNotificationPosition_Parms, NULL );

	return GetNetworkNotificationPosition_Parms.ReturnValue;
};

// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnClearExternalUIChangeDelegate = NULL;

	if ( ! pFnClearExternalUIChangeDelegate )
		pFnClearExternalUIChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29319 ];

	UOnlineSystemInterface_execClearExternalUIChangeDelegate_Parms ClearExternalUIChangeDelegate_Parms;
	memcpy ( &ClearExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0x10 );

	this->ProcessEvent ( pFnClearExternalUIChangeDelegate, &ClearExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ExternalUIDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate )
{
	static UFunction* pFnAddExternalUIChangeDelegate = NULL;

	if ( ! pFnAddExternalUIChangeDelegate )
		pFnAddExternalUIChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29317 ];

	UOnlineSystemInterface_execAddExternalUIChangeDelegate_Parms AddExternalUIChangeDelegate_Parms;
	memcpy ( &AddExternalUIChangeDelegate_Parms.ExternalUIDelegate, &ExternalUIDelegate, 0x10 );

	this->ProcessEvent ( pFnAddExternalUIChangeDelegate, &AddExternalUIChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnExternalUIChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void UOnlineSystemInterface::OnExternalUIChange ( unsigned long bIsOpening )
{
	static UFunction* pFnOnExternalUIChange = NULL;

	if ( ! pFnOnExternalUIChange )
		pFnOnExternalUIChange = (UFunction*) UObject::GObjObjects()->Data[ 29315 ];

	UOnlineSystemInterface_execOnExternalUIChange_Parms OnExternalUIChange_Parms;
	OnExternalUIChange_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnOnExternalUIChange, &OnExternalUIChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnClearLinkStatusChangeDelegate = NULL;

	if ( ! pFnClearLinkStatusChangeDelegate )
		pFnClearLinkStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29313 ];

	UOnlineSystemInterface_execClearLinkStatusChangeDelegate_Parms ClearLinkStatusChangeDelegate_Parms;
	memcpy ( &ClearLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnClearLinkStatusChangeDelegate, &ClearLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         LinkStatusDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSystemInterface::AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate )
{
	static UFunction* pFnAddLinkStatusChangeDelegate = NULL;

	if ( ! pFnAddLinkStatusChangeDelegate )
		pFnAddLinkStatusChangeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29311 ];

	UOnlineSystemInterface_execAddLinkStatusChangeDelegate_Parms AddLinkStatusChangeDelegate_Parms;
	memcpy ( &AddLinkStatusChangeDelegate_Parms.LinkStatusDelegate, &LinkStatusDelegate, 0x10 );

	this->ProcessEvent ( pFnAddLinkStatusChangeDelegate, &AddLinkStatusChangeDelegate_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// [0x00120000] 
// Parameters infos:
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UOnlineSystemInterface::OnLinkStatusChange ( unsigned long bIsConnected )
{
	static UFunction* pFnOnLinkStatusChange = NULL;

	if ( ! pFnOnLinkStatusChange )
		pFnOnLinkStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 29309 ];

	UOnlineSystemInterface_execOnLinkStatusChange_Parms OnLinkStatusChange_Parms;
	OnLinkStatusChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnOnLinkStatusChange, &OnLinkStatusChange_Parms, NULL );
};

// Function Engine.OnlineSystemInterface.HasLinkConnection
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UOnlineSystemInterface::HasLinkConnection ( )
{
	static UFunction* pFnHasLinkConnection = NULL;

	if ( ! pFnHasLinkConnection )
		pFnHasLinkConnection = (UFunction*) UObject::GObjObjects()->Data[ 29307 ];

	UOnlineSystemInterface_execHasLinkConnection_Parms HasLinkConnection_Parms;

	this->ProcessEvent ( pFnHasLinkConnection, &HasLinkConnection_Parms, NULL );

	return HasLinkConnection_Parms.ReturnValue;
};

// Function Engine.OnlineMarketplaceInterface.ClearConsumeInventoryItemCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ConsumeInventoryItemCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::ClearConsumeInventoryItemCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ConsumeInventoryItemCompleteDelegate )
{
	static UFunction* pFnClearConsumeInventoryItemCompleteDelegate = NULL;

	if ( ! pFnClearConsumeInventoryItemCompleteDelegate )
		pFnClearConsumeInventoryItemCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28010 ];

	UOnlineMarketplaceInterface_execClearConsumeInventoryItemCompleteDelegate_Parms ClearConsumeInventoryItemCompleteDelegate_Parms;
	ClearConsumeInventoryItemCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearConsumeInventoryItemCompleteDelegate_Parms.ConsumeInventoryItemCompleteDelegate, &ConsumeInventoryItemCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearConsumeInventoryItemCompleteDelegate, &ClearConsumeInventoryItemCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.AddConsumeInventoryItemCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ConsumeInventoryItemCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::AddConsumeInventoryItemCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ConsumeInventoryItemCompleteDelegate )
{
	static UFunction* pFnAddConsumeInventoryItemCompleteDelegate = NULL;

	if ( ! pFnAddConsumeInventoryItemCompleteDelegate )
		pFnAddConsumeInventoryItemCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28007 ];

	UOnlineMarketplaceInterface_execAddConsumeInventoryItemCompleteDelegate_Parms AddConsumeInventoryItemCompleteDelegate_Parms;
	AddConsumeInventoryItemCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddConsumeInventoryItemCompleteDelegate_Parms.ConsumeInventoryItemCompleteDelegate, &ConsumeInventoryItemCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddConsumeInventoryItemCompleteDelegate, &AddConsumeInventoryItemCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.OnConsumeInventoryItemComplete
// [0x00120000] 
// Parameters infos:
// struct FString                 ProductID                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bDidSucceed                    ( CPF_Parm )
// int                            NewQuantity                    ( CPF_Parm )

void UOnlineMarketplaceInterface::OnConsumeInventoryItemComplete ( struct FString ProductID, unsigned long bDidSucceed, int NewQuantity )
{
	static UFunction* pFnOnConsumeInventoryItemComplete = NULL;

	if ( ! pFnOnConsumeInventoryItemComplete )
		pFnOnConsumeInventoryItemComplete = (UFunction*) UObject::GObjObjects()->Data[ 28003 ];

	UOnlineMarketplaceInterface_execOnConsumeInventoryItemComplete_Parms OnConsumeInventoryItemComplete_Parms;
	memcpy ( &OnConsumeInventoryItemComplete_Parms.ProductID, &ProductID, 0xC );
	OnConsumeInventoryItemComplete_Parms.bDidSucceed = bDidSucceed;
	OnConsumeInventoryItemComplete_Parms.NewQuantity = NewQuantity;

	this->ProcessEvent ( pFnOnConsumeInventoryItemComplete, &OnConsumeInventoryItemComplete_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.ConsumeInventoryItem
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 ProductID                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            Quantity                       ( CPF_Parm )
// struct FString                 TransactionId                  ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineMarketplaceInterface::ConsumeInventoryItem ( unsigned char LocalUserNum, struct FString ProductID, int Quantity, struct FString TransactionId )
{
	static UFunction* pFnConsumeInventoryItem = NULL;

	if ( ! pFnConsumeInventoryItem )
		pFnConsumeInventoryItem = (UFunction*) UObject::GObjObjects()->Data[ 27997 ];

	UOnlineMarketplaceInterface_execConsumeInventoryItem_Parms ConsumeInventoryItem_Parms;
	ConsumeInventoryItem_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ConsumeInventoryItem_Parms.ProductID, &ProductID, 0xC );
	ConsumeInventoryItem_Parms.Quantity = Quantity;
	memcpy ( &ConsumeInventoryItem_Parms.TransactionId, &TransactionId, 0xC );

	this->ProcessEvent ( pFnConsumeInventoryItem, &ConsumeInventoryItem_Parms, NULL );

	return ConsumeInventoryItem_Parms.ReturnValue;
};

// Function Engine.OnlineMarketplaceInterface.ResetInventoryItems
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  MediaType                      ( CPF_Parm )

void UOnlineMarketplaceInterface::ResetInventoryItems ( unsigned char LocalUserNum, unsigned char MediaType )
{
	static UFunction* pFnResetInventoryItems = NULL;

	if ( ! pFnResetInventoryItems )
		pFnResetInventoryItems = (UFunction*) UObject::GObjObjects()->Data[ 27994 ];

	UOnlineMarketplaceInterface_execResetInventoryItems_Parms ResetInventoryItems_Parms;
	ResetInventoryItems_Parms.LocalUserNum = LocalUserNum;
	ResetInventoryItems_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnResetInventoryItems, &ResetInventoryItems_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.GetInventoryItems
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  MediaType                      ( CPF_Parm )
// TArray< struct FMarketplaceInventoryItem > InventoryItems                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlineMarketplaceInterface::GetInventoryItems ( unsigned char LocalUserNum, unsigned char MediaType, TArray< struct FMarketplaceInventoryItem >* InventoryItems )
{
	static UFunction* pFnGetInventoryItems = NULL;

	if ( ! pFnGetInventoryItems )
		pFnGetInventoryItems = (UFunction*) UObject::GObjObjects()->Data[ 27988 ];

	UOnlineMarketplaceInterface_execGetInventoryItems_Parms GetInventoryItems_Parms;
	GetInventoryItems_Parms.LocalUserNum = LocalUserNum;
	GetInventoryItems_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnGetInventoryItems, &GetInventoryItems_Parms, NULL );

	if ( InventoryItems )
		memcpy ( InventoryItems, &GetInventoryItems_Parms.InventoryItems, 0xC );

	return GetInventoryItems_Parms.ReturnValue;
};

// Function Engine.OnlineMarketplaceInterface.ClearReadInventoryItemsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadInventoryItemsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::ClearReadInventoryItemsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadInventoryItemsCompleteDelegate )
{
	static UFunction* pFnClearReadInventoryItemsCompleteDelegate = NULL;

	if ( ! pFnClearReadInventoryItemsCompleteDelegate )
		pFnClearReadInventoryItemsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27985 ];

	UOnlineMarketplaceInterface_execClearReadInventoryItemsCompleteDelegate_Parms ClearReadInventoryItemsCompleteDelegate_Parms;
	ClearReadInventoryItemsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadInventoryItemsCompleteDelegate_Parms.ReadInventoryItemsCompleteDelegate, &ReadInventoryItemsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadInventoryItemsCompleteDelegate, &ClearReadInventoryItemsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.AddReadInventoryItemsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadInventoryItemsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::AddReadInventoryItemsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadInventoryItemsCompleteDelegate )
{
	static UFunction* pFnAddReadInventoryItemsCompleteDelegate = NULL;

	if ( ! pFnAddReadInventoryItemsCompleteDelegate )
		pFnAddReadInventoryItemsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27982 ];

	UOnlineMarketplaceInterface_execAddReadInventoryItemsCompleteDelegate_Parms AddReadInventoryItemsCompleteDelegate_Parms;
	AddReadInventoryItemsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadInventoryItemsCompleteDelegate_Parms.ReadInventoryItemsCompleteDelegate, &ReadInventoryItemsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadInventoryItemsCompleteDelegate, &AddReadInventoryItemsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.OnReadInventoryItemsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  MediaType                      ( CPF_Parm )

void UOnlineMarketplaceInterface::OnReadInventoryItemsComplete ( unsigned char MediaType )
{
	static UFunction* pFnOnReadInventoryItemsComplete = NULL;

	if ( ! pFnOnReadInventoryItemsComplete )
		pFnOnReadInventoryItemsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27980 ];

	UOnlineMarketplaceInterface_execOnReadInventoryItemsComplete_Parms OnReadInventoryItemsComplete_Parms;
	OnReadInventoryItemsComplete_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnOnReadInventoryItemsComplete, &OnReadInventoryItemsComplete_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.ReadInventoryItems
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  MediaType                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineMarketplaceInterface::ReadInventoryItems ( unsigned char LocalUserNum, unsigned char MediaType )
{
	static UFunction* pFnReadInventoryItems = NULL;

	if ( ! pFnReadInventoryItems )
		pFnReadInventoryItems = (UFunction*) UObject::GObjObjects()->Data[ 27976 ];

	UOnlineMarketplaceInterface_execReadInventoryItems_Parms ReadInventoryItems_Parms;
	ReadInventoryItems_Parms.LocalUserNum = LocalUserNum;
	ReadInventoryItems_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnReadInventoryItems, &ReadInventoryItems_Parms, NULL );

	return ReadInventoryItems_Parms.ReturnValue;
};

// Function Engine.OnlineMarketplaceInterface.ClearReadAdditionalProductDetailsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAdditionalProductDetailsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::ClearReadAdditionalProductDetailsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAdditionalProductDetailsCompleteDelegate )
{
	static UFunction* pFnClearReadAdditionalProductDetailsCompleteDelegate = NULL;

	if ( ! pFnClearReadAdditionalProductDetailsCompleteDelegate )
		pFnClearReadAdditionalProductDetailsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27973 ];

	UOnlineMarketplaceInterface_execClearReadAdditionalProductDetailsCompleteDelegate_Parms ClearReadAdditionalProductDetailsCompleteDelegate_Parms;
	ClearReadAdditionalProductDetailsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadAdditionalProductDetailsCompleteDelegate_Parms.ReadAdditionalProductDetailsCompleteDelegate, &ReadAdditionalProductDetailsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadAdditionalProductDetailsCompleteDelegate, &ClearReadAdditionalProductDetailsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.AddReadAdditionalProductDetailsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAdditionalProductDetailsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::AddReadAdditionalProductDetailsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAdditionalProductDetailsCompleteDelegate )
{
	static UFunction* pFnAddReadAdditionalProductDetailsCompleteDelegate = NULL;

	if ( ! pFnAddReadAdditionalProductDetailsCompleteDelegate )
		pFnAddReadAdditionalProductDetailsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27970 ];

	UOnlineMarketplaceInterface_execAddReadAdditionalProductDetailsCompleteDelegate_Parms AddReadAdditionalProductDetailsCompleteDelegate_Parms;
	AddReadAdditionalProductDetailsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadAdditionalProductDetailsCompleteDelegate_Parms.ReadAdditionalProductDetailsCompleteDelegate, &ReadAdditionalProductDetailsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadAdditionalProductDetailsCompleteDelegate, &AddReadAdditionalProductDetailsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.OnReadAdditionalProductDetailsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  MediaType                      ( CPF_Parm )

void UOnlineMarketplaceInterface::OnReadAdditionalProductDetailsComplete ( unsigned char MediaType )
{
	static UFunction* pFnOnReadAdditionalProductDetailsComplete = NULL;

	if ( ! pFnOnReadAdditionalProductDetailsComplete )
		pFnOnReadAdditionalProductDetailsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27968 ];

	UOnlineMarketplaceInterface_execOnReadAdditionalProductDetailsComplete_Parms OnReadAdditionalProductDetailsComplete_Parms;
	OnReadAdditionalProductDetailsComplete_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnOnReadAdditionalProductDetailsComplete, &OnReadAdditionalProductDetailsComplete_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.ReadAdditionalDetailsForProducts
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  MediaType                      ( CPF_Parm )

bool UOnlineMarketplaceInterface::ReadAdditionalDetailsForProducts ( unsigned char LocalUserNum, unsigned char MediaType )
{
	static UFunction* pFnReadAdditionalDetailsForProducts = NULL;

	if ( ! pFnReadAdditionalDetailsForProducts )
		pFnReadAdditionalDetailsForProducts = (UFunction*) UObject::GObjObjects()->Data[ 27964 ];

	UOnlineMarketplaceInterface_execReadAdditionalDetailsForProducts_Parms ReadAdditionalDetailsForProducts_Parms;
	ReadAdditionalDetailsForProducts_Parms.LocalUserNum = LocalUserNum;
	ReadAdditionalDetailsForProducts_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnReadAdditionalDetailsForProducts, &ReadAdditionalDetailsForProducts_Parms, NULL );

	return ReadAdditionalDetailsForProducts_Parms.ReturnValue;
};

// Function Engine.OnlineMarketplaceInterface.ResetAvailableProducts
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  MediaType                      ( CPF_Parm )

void UOnlineMarketplaceInterface::ResetAvailableProducts ( unsigned char LocalUserNum, unsigned char MediaType )
{
	static UFunction* pFnResetAvailableProducts = NULL;

	if ( ! pFnResetAvailableProducts )
		pFnResetAvailableProducts = (UFunction*) UObject::GObjObjects()->Data[ 27961 ];

	UOnlineMarketplaceInterface_execResetAvailableProducts_Parms ResetAvailableProducts_Parms;
	ResetAvailableProducts_Parms.LocalUserNum = LocalUserNum;
	ResetAvailableProducts_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnResetAvailableProducts, &ResetAvailableProducts_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.GetAvailableProducts
// [0x00420000] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned char                  MediaType                      ( CPF_Parm )
// TArray< struct FMarketplaceProductDetails > AvailableProducts              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

unsigned char UOnlineMarketplaceInterface::GetAvailableProducts ( unsigned char LocalUserNum, unsigned char MediaType, TArray< struct FMarketplaceProductDetails >* AvailableProducts )
{
	static UFunction* pFnGetAvailableProducts = NULL;

	if ( ! pFnGetAvailableProducts )
		pFnGetAvailableProducts = (UFunction*) UObject::GObjObjects()->Data[ 27955 ];

	UOnlineMarketplaceInterface_execGetAvailableProducts_Parms GetAvailableProducts_Parms;
	GetAvailableProducts_Parms.LocalUserNum = LocalUserNum;
	GetAvailableProducts_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnGetAvailableProducts, &GetAvailableProducts_Parms, NULL );

	if ( AvailableProducts )
		memcpy ( AvailableProducts, &GetAvailableProducts_Parms.AvailableProducts, 0xC );

	return GetAvailableProducts_Parms.ReturnValue;
};

// Function Engine.OnlineMarketplaceInterface.ClearReadAvailableProductsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAvailableProductsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::ClearReadAvailableProductsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAvailableProductsCompleteDelegate )
{
	static UFunction* pFnClearReadAvailableProductsCompleteDelegate = NULL;

	if ( ! pFnClearReadAvailableProductsCompleteDelegate )
		pFnClearReadAvailableProductsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27952 ];

	UOnlineMarketplaceInterface_execClearReadAvailableProductsCompleteDelegate_Parms ClearReadAvailableProductsCompleteDelegate_Parms;
	ClearReadAvailableProductsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadAvailableProductsCompleteDelegate_Parms.ReadAvailableProductsCompleteDelegate, &ReadAvailableProductsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadAvailableProductsCompleteDelegate, &ClearReadAvailableProductsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.AddReadAvailableProductsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadAvailableProductsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineMarketplaceInterface::AddReadAvailableProductsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAvailableProductsCompleteDelegate )
{
	static UFunction* pFnAddReadAvailableProductsCompleteDelegate = NULL;

	if ( ! pFnAddReadAvailableProductsCompleteDelegate )
		pFnAddReadAvailableProductsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 27949 ];

	UOnlineMarketplaceInterface_execAddReadAvailableProductsCompleteDelegate_Parms AddReadAvailableProductsCompleteDelegate_Parms;
	AddReadAvailableProductsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadAvailableProductsCompleteDelegate_Parms.ReadAvailableProductsCompleteDelegate, &ReadAvailableProductsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadAvailableProductsCompleteDelegate, &AddReadAvailableProductsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.OnReadAvailableProductsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  MediaType                      ( CPF_Parm )

void UOnlineMarketplaceInterface::OnReadAvailableProductsComplete ( unsigned char MediaType )
{
	static UFunction* pFnOnReadAvailableProductsComplete = NULL;

	if ( ! pFnOnReadAvailableProductsComplete )
		pFnOnReadAvailableProductsComplete = (UFunction*) UObject::GObjObjects()->Data[ 27947 ];

	UOnlineMarketplaceInterface_execOnReadAvailableProductsComplete_Parms OnReadAvailableProductsComplete_Parms;
	OnReadAvailableProductsComplete_Parms.MediaType = MediaType;

	this->ProcessEvent ( pFnOnReadAvailableProductsComplete, &OnReadAvailableProductsComplete_Parms, NULL );
};

// Function Engine.OnlineMarketplaceInterface.ReadAvailableProducts
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 ParentId                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  ParentMediaType                ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ChildMediaType                 ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  SortOrder                      ( CPF_OptionalParm | CPF_Parm )

bool UOnlineMarketplaceInterface::ReadAvailableProducts ( unsigned char LocalUserNum, struct FString ParentId, unsigned char ParentMediaType, unsigned char ChildMediaType, unsigned char SortOrder )
{
	static UFunction* pFnReadAvailableProducts = NULL;

	if ( ! pFnReadAvailableProducts )
		pFnReadAvailableProducts = (UFunction*) UObject::GObjObjects()->Data[ 27940 ];

	UOnlineMarketplaceInterface_execReadAvailableProducts_Parms ReadAvailableProducts_Parms;
	ReadAvailableProducts_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ReadAvailableProducts_Parms.ParentId, &ParentId, 0xC );
	ReadAvailableProducts_Parms.ParentMediaType = ParentMediaType;
	ReadAvailableProducts_Parms.ChildMediaType = ChildMediaType;
	ReadAvailableProducts_Parms.SortOrder = SortOrder;

	this->ProcessEvent ( pFnReadAvailableProducts, &ReadAvailableProducts_Parms, NULL );

	return ReadAvailableProducts_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.GetPlayerAccountID
// [0x00020000] 
// Parameters infos:
// struct FUniqueNetId            NetId                          ( CPF_Const | CPF_Parm )

void UOnlinePlayerInterfaceEx::GetPlayerAccountID ( struct FUniqueNetId NetId )
{
	static UFunction* pFnGetPlayerAccountID = NULL;

	if ( ! pFnGetPlayerAccountID )
		pFnGetPlayerAccountID = (UFunction*) UObject::GObjObjects()->Data[ 28757 ];

	UOnlinePlayerInterfaceEx_execGetPlayerAccountID_Parms GetPlayerAccountID_Parms;
	memcpy ( &GetPlayerAccountID_Parms.NetId, &NetId, 0x48 );

	this->ProcessEvent ( pFnGetPlayerAccountID, &GetPlayerAccountID_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.WordFilterSanitizeString
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Comment                        ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         SanitizeDelegate               ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            PlayerID                       ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::WordFilterSanitizeString ( struct FString Comment, struct FScriptDelegate SanitizeDelegate, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnWordFilterSanitizeString = NULL;

	if ( ! pFnWordFilterSanitizeString )
		pFnWordFilterSanitizeString = (UFunction*) UObject::GObjObjects()->Data[ 28752 ];

	UOnlinePlayerInterfaceEx_execWordFilterSanitizeString_Parms WordFilterSanitizeString_Parms;
	memcpy ( &WordFilterSanitizeString_Parms.Comment, &Comment, 0xC );
	memcpy ( &WordFilterSanitizeString_Parms.SanitizeDelegate, &SanitizeDelegate, 0x10 );
	memcpy ( &WordFilterSanitizeString_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnWordFilterSanitizeString, &WordFilterSanitizeString_Parms, NULL );

	return WordFilterSanitizeString_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.OnSanitizeStringComplete
// [0x00120000] 
// Parameters infos:
// struct FWordFilterResult       Result                         ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::OnSanitizeStringComplete ( struct FWordFilterResult Result )
{
	static UFunction* pFnOnSanitizeStringComplete = NULL;

	if ( ! pFnOnSanitizeStringComplete )
		pFnOnSanitizeStringComplete = (UFunction*) UObject::GObjObjects()->Data[ 28749 ];

	UOnlinePlayerInterfaceEx_execOnSanitizeStringComplete_Parms OnSanitizeStringComplete_Parms;
	memcpy ( &OnSanitizeStringComplete_Parms.Result, &Result, 0x28 );

	this->ProcessEvent ( pFnOnSanitizeStringComplete, &OnSanitizeStringComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.RecordPlayersRecentlyMetKeys
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FFriendHistoryKey > PlayerKeys                     ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::RecordPlayersRecentlyMetKeys ( unsigned char LocalUserNum, TArray< struct FFriendHistoryKey > PlayerKeys )
{
	static UFunction* pFnRecordPlayersRecentlyMetKeys = NULL;

	if ( ! pFnRecordPlayersRecentlyMetKeys )
		pFnRecordPlayersRecentlyMetKeys = (UFunction*) UObject::GObjObjects()->Data[ 28750 ];

	UOnlinePlayerInterfaceEx_execRecordPlayersRecentlyMetKeys_Parms RecordPlayersRecentlyMetKeys_Parms;
	RecordPlayersRecentlyMetKeys_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RecordPlayersRecentlyMetKeys_Parms.PlayerKeys, &PlayerKeys, 0xC );

	this->ProcessEvent ( pFnRecordPlayersRecentlyMetKeys, &RecordPlayersRecentlyMetKeys_Parms, NULL );

	return RecordPlayersRecentlyMetKeys_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.RecordPlayersRecentlyMet
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 GameDescription                ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::RecordPlayersRecentlyMet ( unsigned char LocalUserNum, struct FString GameDescription, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnRecordPlayersRecentlyMet = NULL;

	if ( ! pFnRecordPlayersRecentlyMet )
		pFnRecordPlayersRecentlyMet = (UFunction*) UObject::GObjObjects()->Data[ 28743 ];

	UOnlinePlayerInterfaceEx_execRecordPlayersRecentlyMet_Parms RecordPlayersRecentlyMet_Parms;
	RecordPlayersRecentlyMet_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &RecordPlayersRecentlyMet_Parms.GameDescription, &GameDescription, 0xC );

	this->ProcessEvent ( pFnRecordPlayersRecentlyMet, &RecordPlayersRecentlyMet_Parms, NULL );

	if ( Players )
		memcpy ( Players, &RecordPlayersRecentlyMet_Parms.Players, 0xC );

	return RecordPlayersRecentlyMet_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearSaveDataNoSpaceDialogCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearSaveDataNoSpaceDialogCompleteDelegate ( struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnClearSaveDataNoSpaceDialogCompleteDelegate = NULL;

	if ( ! pFnClearSaveDataNoSpaceDialogCompleteDelegate )
		pFnClearSaveDataNoSpaceDialogCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28741 ];

	UOnlinePlayerInterfaceEx_execClearSaveDataNoSpaceDialogCompleteDelegate_Parms ClearSaveDataNoSpaceDialogCompleteDelegate_Parms;
	memcpy ( &ClearSaveDataNoSpaceDialogCompleteDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0x10 );

	this->ProcessEvent ( pFnClearSaveDataNoSpaceDialogCompleteDelegate, &ClearSaveDataNoSpaceDialogCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddSaveDataNoSpaceDialogCompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddSaveDataNoSpaceDialogCompleteDelegate ( struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnAddSaveDataNoSpaceDialogCompleteDelegate = NULL;

	if ( ! pFnAddSaveDataNoSpaceDialogCompleteDelegate )
		pFnAddSaveDataNoSpaceDialogCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28739 ];

	UOnlinePlayerInterfaceEx_execAddSaveDataNoSpaceDialogCompleteDelegate_Parms AddSaveDataNoSpaceDialogCompleteDelegate_Parms;
	memcpy ( &AddSaveDataNoSpaceDialogCompleteDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0x10 );

	this->ProcessEvent ( pFnAddSaveDataNoSpaceDialogCompleteDelegate, &AddSaveDataNoSpaceDialogCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnSaveDataNoSpaceDialogComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bContinueWithoutSave           ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnSaveDataNoSpaceDialogComplete ( unsigned long bContinueWithoutSave )
{
	static UFunction* pFnOnSaveDataNoSpaceDialogComplete = NULL;

	if ( ! pFnOnSaveDataNoSpaceDialogComplete )
		pFnOnSaveDataNoSpaceDialogComplete = (UFunction*) UObject::GObjObjects()->Data[ 28737 ];

	UOnlinePlayerInterfaceEx_execOnSaveDataNoSpaceDialogComplete_Parms OnSaveDataNoSpaceDialogComplete_Parms;
	OnSaveDataNoSpaceDialogComplete_Parms.bContinueWithoutSave = bContinueWithoutSave;

	this->ProcessEvent ( pFnOnSaveDataNoSpaceDialogComplete, &OnSaveDataNoSpaceDialogComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.GetSyncedAchievements
// [0x00020000] 
// Parameters infos:
// TArray< unsigned long >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

TArray< unsigned long > UOnlinePlayerInterfaceEx::GetSyncedAchievements ( unsigned char LocalUserNum )
{
	static UFunction* pFnGetSyncedAchievements = NULL;

	if ( ! pFnGetSyncedAchievements )
		pFnGetSyncedAchievements = (UFunction*) UObject::GObjObjects()->Data[ 28733 ];

	UOnlinePlayerInterfaceEx_execGetSyncedAchievements_Parms GetSyncedAchievements_Parms;
	GetSyncedAchievements_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetSyncedAchievements, &GetSyncedAchievements_Parms, NULL );

	return GetSyncedAchievements_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AchievementId                  ( CPF_Parm )
// float                          PercentComplete                ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockAchievement ( unsigned char LocalUserNum, int AchievementId, float PercentComplete )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 28728 ];

	UOnlinePlayerInterfaceEx_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.LocalUserNum = LocalUserNum;
	UnlockAchievement_Parms.AchievementId = AchievementId;
	UnlockAchievement_Parms.PercentComplete = PercentComplete;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );

	return UnlockAchievement_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.UpdateStat
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FName                   StatName                       ( CPF_Parm )
// int                            Points                         ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UpdateStat ( unsigned char LocalUserNum, struct FName StatName, int Points )
{
	static UFunction* pFnUpdateStat = NULL;

	if ( ! pFnUpdateStat )
		pFnUpdateStat = (UFunction*) UObject::GObjObjects()->Data[ 28723 ];

	UOnlinePlayerInterfaceEx_execUpdateStat_Parms UpdateStat_Parms;
	UpdateStat_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &UpdateStat_Parms.StatName, &StatName, 0x8 );
	UpdateStat_Parms.Points = Points;

	this->ProcessEvent ( pFnUpdateStat, &UpdateStat_Parms, NULL );

	return UpdateStat_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.AddInGamePost
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 InPostID                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// TArray< struct FString >       StringReplaceList              ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::AddInGamePost ( struct FString InPostID, unsigned char LocalUserNum, TArray< struct FString > StringReplaceList )
{
	static UFunction* pFnAddInGamePost = NULL;

	if ( ! pFnAddInGamePost )
		pFnAddInGamePost = (UFunction*) UObject::GObjObjects()->Data[ 28717 ];

	UOnlinePlayerInterfaceEx_execAddInGamePost_Parms AddInGamePost_Parms;
	memcpy ( &AddInGamePost_Parms.InPostID, &InPostID, 0xC );
	AddInGamePost_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddInGamePost_Parms.StringReplaceList, &StringReplaceList, 0xC );

	this->ProcessEvent ( pFnAddInGamePost, &AddInGamePost_Parms, NULL );

	return AddInGamePost_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.SetRichPresence
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 PresenceString                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 GameDataString                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::SetRichPresence ( unsigned char LocalUserNum, struct FString PresenceString, struct FString GameDataString )
{
	static UFunction* pFnSetRichPresence = NULL;

	if ( ! pFnSetRichPresence )
		pFnSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 28713 ];

	UOnlinePlayerInterfaceEx_execSetRichPresence_Parms SetRichPresence_Parms;
	SetRichPresence_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &SetRichPresence_Parms.PresenceString, &PresenceString, 0xC );
	memcpy ( &SetRichPresence_Parms.GameDataString, &GameDataString, 0xC );

	this->ProcessEvent ( pFnSetRichPresence, &SetRichPresence_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowCustomMessageUI
// [0x00424000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 MessageTitle                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 NonEditableMessage             ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EditableMessage                ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FUniqueNetId >  Recipients                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowCustomMessageUI ( unsigned char LocalUserNum, struct FString MessageTitle, struct FString NonEditableMessage, struct FString EditableMessage, TArray< struct FUniqueNetId >* Recipients )
{
	static UFunction* pFnShowCustomMessageUI = NULL;

	if ( ! pFnShowCustomMessageUI )
		pFnShowCustomMessageUI = (UFunction*) UObject::GObjObjects()->Data[ 28705 ];

	UOnlinePlayerInterfaceEx_execShowCustomMessageUI_Parms ShowCustomMessageUI_Parms;
	ShowCustomMessageUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowCustomMessageUI_Parms.MessageTitle, &MessageTitle, 0xC );
	memcpy ( &ShowCustomMessageUI_Parms.NonEditableMessage, &NonEditableMessage, 0xC );
	memcpy ( &ShowCustomMessageUI_Parms.EditableMessage, &EditableMessage, 0xC );

	this->ProcessEvent ( pFnShowCustomMessageUI, &ShowCustomMessageUI_Parms, NULL );

	if ( Recipients )
		memcpy ( Recipients, &ShowCustomMessageUI_Parms.Recipients, 0xC );

	return ShowCustomMessageUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearCrossTitleProfileSettings
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )

void UOnlinePlayerInterfaceEx::ClearCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId )
{
	static UFunction* pFnClearCrossTitleProfileSettings = NULL;

	if ( ! pFnClearCrossTitleProfileSettings )
		pFnClearCrossTitleProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28702 ];

	UOnlinePlayerInterfaceEx_execClearCrossTitleProfileSettings_Parms ClearCrossTitleProfileSettings_Parms;
	ClearCrossTitleProfileSettings_Parms.LocalUserNum = LocalUserNum;
	ClearCrossTitleProfileSettings_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnClearCrossTitleProfileSettings, &ClearCrossTitleProfileSettings_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.GetCrossTitleProfileSettings
// [0x00020000] 
// Parameters infos:
// class UOnlineProfileSettings*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )

class UOnlineProfileSettings* UOnlinePlayerInterfaceEx::GetCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId )
{
	static UFunction* pFnGetCrossTitleProfileSettings = NULL;

	if ( ! pFnGetCrossTitleProfileSettings )
		pFnGetCrossTitleProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28698 ];

	UOnlinePlayerInterfaceEx_execGetCrossTitleProfileSettings_Parms GetCrossTitleProfileSettings_Parms;
	GetCrossTitleProfileSettings_Parms.LocalUserNum = LocalUserNum;
	GetCrossTitleProfileSettings_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnGetCrossTitleProfileSettings, &GetCrossTitleProfileSettings_Parms, NULL );

	return GetCrossTitleProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearReadCrossTitleProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearReadCrossTitleProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnClearReadCrossTitleProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnClearReadCrossTitleProfileSettingsCompleteDelegate )
		pFnClearReadCrossTitleProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28695 ];

	UOnlinePlayerInterfaceEx_execClearReadCrossTitleProfileSettingsCompleteDelegate_Parms ClearReadCrossTitleProfileSettingsCompleteDelegate_Parms;
	ClearReadCrossTitleProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearReadCrossTitleProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearReadCrossTitleProfileSettingsCompleteDelegate, &ClearReadCrossTitleProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddReadCrossTitleProfileSettingsCompleteDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddReadCrossTitleProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate )
{
	static UFunction* pFnAddReadCrossTitleProfileSettingsCompleteDelegate = NULL;

	if ( ! pFnAddReadCrossTitleProfileSettingsCompleteDelegate )
		pFnAddReadCrossTitleProfileSettingsCompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28692 ];

	UOnlinePlayerInterfaceEx_execAddReadCrossTitleProfileSettingsCompleteDelegate_Parms AddReadCrossTitleProfileSettingsCompleteDelegate_Parms;
	AddReadCrossTitleProfileSettingsCompleteDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddReadCrossTitleProfileSettingsCompleteDelegate_Parms.ReadProfileSettingsCompleteDelegate, &ReadProfileSettingsCompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddReadCrossTitleProfileSettingsCompleteDelegate, &AddReadCrossTitleProfileSettingsCompleteDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnReadCrossTitleProfileSettingsComplete
// [0x00120000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnReadCrossTitleProfileSettingsComplete ( unsigned char LocalUserNum, int TitleId, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnReadCrossTitleProfileSettingsComplete = NULL;

	if ( ! pFnOnReadCrossTitleProfileSettingsComplete )
		pFnOnReadCrossTitleProfileSettingsComplete = (UFunction*) UObject::GObjObjects()->Data[ 28688 ];

	UOnlinePlayerInterfaceEx_execOnReadCrossTitleProfileSettingsComplete_Parms OnReadCrossTitleProfileSettingsComplete_Parms;
	OnReadCrossTitleProfileSettingsComplete_Parms.LocalUserNum = LocalUserNum;
	OnReadCrossTitleProfileSettingsComplete_Parms.TitleId = TitleId;
	OnReadCrossTitleProfileSettingsComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnReadCrossTitleProfileSettingsComplete, &OnReadCrossTitleProfileSettingsComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ReadCrossTitleProfileSettings
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            TitleId                        ( CPF_Parm )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ReadCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId, class UOnlineProfileSettings* ProfileSettings )
{
	static UFunction* pFnReadCrossTitleProfileSettings = NULL;

	if ( ! pFnReadCrossTitleProfileSettings )
		pFnReadCrossTitleProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 28683 ];

	UOnlinePlayerInterfaceEx_execReadCrossTitleProfileSettings_Parms ReadCrossTitleProfileSettings_Parms;
	ReadCrossTitleProfileSettings_Parms.LocalUserNum = LocalUserNum;
	ReadCrossTitleProfileSettings_Parms.TitleId = TitleId;
	ReadCrossTitleProfileSettings_Parms.ProfileSettings = ProfileSettings;

	this->ProcessEvent ( pFnReadCrossTitleProfileSettings, &ReadCrossTitleProfileSettings_Parms, NULL );

	return ReadCrossTitleProfileSettings_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            AvatarItemId                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockAvatarAward ( unsigned char LocalUserNum, int AvatarItemId )
{
	static UFunction* pFnUnlockAvatarAward = NULL;

	if ( ! pFnUnlockAvatarAward )
		pFnUnlockAvatarAward = (UFunction*) UObject::GObjObjects()->Data[ 28679 ];

	UOnlinePlayerInterfaceEx_execUnlockAvatarAward_Parms UnlockAvatarAward_Parms;
	UnlockAvatarAward_Parms.LocalUserNum = LocalUserNum;
	UnlockAvatarAward_Parms.AvatarItemId = AvatarItemId;

	this->ProcessEvent ( pFnUnlockAvatarAward, &UnlockAvatarAward_Parms, NULL );

	return UnlockAvatarAward_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnShowCustomPlayersUI = NULL;

	if ( ! pFnShowCustomPlayersUI )
		pFnShowCustomPlayersUI = (UFunction*) UObject::GObjObjects()->Data[ 28672 ];

	UOnlinePlayerInterfaceEx_execShowCustomPlayersUI_Parms ShowCustomPlayersUI_Parms;
	ShowCustomPlayersUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowCustomPlayersUI_Parms.Title, &Title, 0xC );
	memcpy ( &ShowCustomPlayersUI_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowCustomPlayersUI, &ShowCustomPlayersUI_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ShowCustomPlayersUI_Parms.Players, 0xC );

	return ShowCustomPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowPlayersUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowPlayersUI = NULL;

	if ( ! pFnShowPlayersUI )
		pFnShowPlayersUI = (UFunction*) UObject::GObjObjects()->Data[ 28669 ];

	UOnlinePlayerInterfaceEx_execShowPlayersUI_Parms ShowPlayersUI_Parms;
	ShowPlayersUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowPlayersUI, &ShowPlayersUI_Parms, NULL );

	return ShowPlayersUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFriendsInviteUI = NULL;

	if ( ! pFnShowFriendsInviteUI )
		pFnShowFriendsInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 28665 ];

	UOnlinePlayerInterfaceEx_execShowFriendsInviteUI_Parms ShowFriendsInviteUI_Parms;
	ShowFriendsInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFriendsInviteUI_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnShowFriendsInviteUI, &ShowFriendsInviteUI_Parms, NULL );

	return ShowFriendsInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnClearProfileDataChangedDelegate = NULL;

	if ( ! pFnClearProfileDataChangedDelegate )
		pFnClearProfileDataChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28662 ];

	UOnlinePlayerInterfaceEx_execClearProfileDataChangedDelegate_Parms ClearProfileDataChangedDelegate_Parms;
	ClearProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnClearProfileDataChangedDelegate, &ClearProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         ProfileDataChangedDelegate     ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate )
{
	static UFunction* pFnAddProfileDataChangedDelegate = NULL;

	if ( ! pFnAddProfileDataChangedDelegate )
		pFnAddProfileDataChangedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28659 ];

	UOnlinePlayerInterfaceEx_execAddProfileDataChangedDelegate_Parms AddProfileDataChangedDelegate_Parms;
	AddProfileDataChangedDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddProfileDataChangedDelegate_Parms.ProfileDataChangedDelegate, &ProfileDataChangedDelegate, 0x10 );

	this->ProcessEvent ( pFnAddProfileDataChangedDelegate, &AddProfileDataChangedDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// [0x00120000] 
// Parameters infos:

void UOnlinePlayerInterfaceEx::OnProfileDataChanged ( )
{
	static UFunction* pFnOnProfileDataChanged = NULL;

	if ( ! pFnOnProfileDataChanged )
		pFnOnProfileDataChanged = (UFunction*) UObject::GObjObjects()->Data[ 28658 ];

	UOnlinePlayerInterfaceEx_execOnProfileDataChanged_Parms OnProfileDataChanged_Parms;

	this->ProcessEvent ( pFnOnProfileDataChanged, &OnProfileDataChanged_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            PictureId                      ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId )
{
	static UFunction* pFnUnlockGamerPicture = NULL;

	if ( ! pFnUnlockGamerPicture )
		pFnUnlockGamerPicture = (UFunction*) UObject::GObjObjects()->Data[ 28654 ];

	UOnlinePlayerInterfaceEx_execUnlockGamerPicture_Parms UnlockGamerPicture_Parms;
	UnlockGamerPicture_Parms.LocalUserNum = LocalUserNum;
	UnlockGamerPicture_Parms.PictureId = PictureId;

	this->ProcessEvent ( pFnUnlockGamerPicture, &UnlockGamerPicture_Parms, NULL );

	return UnlockGamerPicture_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DeviceID                       ( CPF_Parm )
// int                            SizeNeeded                     ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::IsDeviceValid ( int DeviceID, int SizeNeeded )
{
	static UFunction* pFnIsDeviceValid = NULL;

	if ( ! pFnIsDeviceValid )
		pFnIsDeviceValid = (UFunction*) UObject::GObjObjects()->Data[ 28650 ];

	UOnlinePlayerInterfaceEx_execIsDeviceValid_Parms IsDeviceValid_Parms;
	IsDeviceValid_Parms.DeviceID = DeviceID;
	IsDeviceValid_Parms.SizeNeeded = SizeNeeded;

	this->ProcessEvent ( pFnIsDeviceValid, &IsDeviceValid_Parms, NULL );

	return IsDeviceValid_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// [0x00420000] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 DeviceName                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName )
{
	static UFunction* pFnGetDeviceSelectionResults = NULL;

	if ( ! pFnGetDeviceSelectionResults )
		pFnGetDeviceSelectionResults = (UFunction*) UObject::GObjObjects()->Data[ 28646 ];

	UOnlinePlayerInterfaceEx_execGetDeviceSelectionResults_Parms GetDeviceSelectionResults_Parms;
	GetDeviceSelectionResults_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnGetDeviceSelectionResults, &GetDeviceSelectionResults_Parms, NULL );

	if ( DeviceName )
		memcpy ( DeviceName, &GetDeviceSelectionResults_Parms.DeviceName, 0xC );

	return GetDeviceSelectionResults_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnClearDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnClearDeviceSelectionDoneDelegate )
		pFnClearDeviceSelectionDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28643 ];

	UOnlinePlayerInterfaceEx_execClearDeviceSelectionDoneDelegate_Parms ClearDeviceSelectionDoneDelegate_Parms;
	ClearDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ClearDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0x10 );

	this->ProcessEvent ( pFnClearDeviceSelectionDoneDelegate, &ClearDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// [0x00020000] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FScriptDelegate         DeviceDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate )
{
	static UFunction* pFnAddDeviceSelectionDoneDelegate = NULL;

	if ( ! pFnAddDeviceSelectionDoneDelegate )
		pFnAddDeviceSelectionDoneDelegate = (UFunction*) UObject::GObjObjects()->Data[ 28640 ];

	UOnlinePlayerInterfaceEx_execAddDeviceSelectionDoneDelegate_Parms AddDeviceSelectionDoneDelegate_Parms;
	AddDeviceSelectionDoneDelegate_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &AddDeviceSelectionDoneDelegate_Parms.DeviceDelegate, &DeviceDelegate, 0x10 );

	this->ProcessEvent ( pFnAddDeviceSelectionDoneDelegate, &AddDeviceSelectionDoneDelegate_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 28638 ];

	UOnlinePlayerInterfaceEx_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            SizeNeeded                     ( CPF_Parm )
// unsigned long                  bManageStorage                 ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bManageStorage )
{
	static UFunction* pFnShowDeviceSelectionUI = NULL;

	if ( ! pFnShowDeviceSelectionUI )
		pFnShowDeviceSelectionUI = (UFunction*) UObject::GObjObjects()->Data[ 28633 ];

	UOnlinePlayerInterfaceEx_execShowDeviceSelectionUI_Parms ShowDeviceSelectionUI_Parms;
	ShowDeviceSelectionUI_Parms.LocalUserNum = LocalUserNum;
	ShowDeviceSelectionUI_Parms.SizeNeeded = SizeNeeded;
	ShowDeviceSelectionUI_Parms.bManageStorage = bManageStorage;

	this->ProcessEvent ( pFnShowDeviceSelectionUI, &ShowDeviceSelectionUI_Parms, NULL );

	return ShowDeviceSelectionUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMembershipMarketplaceUI = NULL;

	if ( ! pFnShowMembershipMarketplaceUI )
		pFnShowMembershipMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 28630 ];

	UOnlinePlayerInterfaceEx_execShowMembershipMarketplaceUI_Parms ShowMembershipMarketplaceUI_Parms;
	ShowMembershipMarketplaceUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMembershipMarketplaceUI, &ShowMembershipMarketplaceUI_Parms, NULL );

	return ShowMembershipMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// int                            CategoryMask                   ( CPF_OptionalParm | CPF_Parm )
// int                            OfferId                        ( CPF_OptionalParm | CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI ( unsigned char LocalUserNum, int CategoryMask, int OfferId )
{
	static UFunction* pFnShowContentMarketplaceUI = NULL;

	if ( ! pFnShowContentMarketplaceUI )
		pFnShowContentMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 28625 ];

	UOnlinePlayerInterfaceEx_execShowContentMarketplaceUI_Parms ShowContentMarketplaceUI_Parms;
	ShowContentMarketplaceUI_Parms.LocalUserNum = LocalUserNum;
	ShowContentMarketplaceUI_Parms.CategoryMask = CategoryMask;
	ShowContentMarketplaceUI_Parms.OfferId = OfferId;

	this->ProcessEvent ( pFnShowContentMarketplaceUI, &ShowContentMarketplaceUI_Parms, NULL );

	return ShowContentMarketplaceUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 InviteText                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText )
{
	static UFunction* pFnShowInviteUI = NULL;

	if ( ! pFnShowInviteUI )
		pFnShowInviteUI = (UFunction*) UObject::GObjObjects()->Data[ 28621 ];

	UOnlinePlayerInterfaceEx_execShowInviteUI_Parms ShowInviteUI_Parms;
	ShowInviteUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowInviteUI_Parms.InviteText, &InviteText, 0xC );

	this->ProcessEvent ( pFnShowInviteUI, &ShowInviteUI_Parms, NULL );

	return ShowInviteUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowAchievementsUI = NULL;

	if ( ! pFnShowAchievementsUI )
		pFnShowAchievementsUI = (UFunction*) UObject::GObjObjects()->Data[ 28618 ];

	UOnlinePlayerInterfaceEx_execShowAchievementsUI_Parms ShowAchievementsUI_Parms;
	ShowAchievementsUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowAchievementsUI, &ShowAchievementsUI_Parms, NULL );

	return ShowAchievementsUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowMessagesUI ( unsigned char LocalUserNum )
{
	static UFunction* pFnShowMessagesUI = NULL;

	if ( ! pFnShowMessagesUI )
		pFnShowMessagesUI = (UFunction*) UObject::GObjObjects()->Data[ 28615 ];

	UOnlinePlayerInterfaceEx_execShowMessagesUI_Parms ShowMessagesUI_Parms;
	ShowMessagesUI_Parms.LocalUserNum = LocalUserNum;

	this->ProcessEvent ( pFnShowMessagesUI, &ShowMessagesUI_Parms, NULL );

	return ShowMessagesUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_OptionalParm | CPF_Parm )
// struct FString                 PlayerName                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, struct FString PlayerName )
{
	static UFunction* pFnShowGamerCardUI = NULL;

	if ( ! pFnShowGamerCardUI )
		pFnShowGamerCardUI = (UFunction*) UObject::GObjObjects()->Data[ 28610 ];

	UOnlinePlayerInterfaceEx_execShowGamerCardUI_Parms ShowGamerCardUI_Parms;
	ShowGamerCardUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowGamerCardUI_Parms.PlayerID, &PlayerID, 0x48 );
	memcpy ( &ShowGamerCardUI_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnShowGamerCardUI, &ShowGamerCardUI_Parms, NULL );

	return ShowGamerCardUI_Parms.ReturnValue;
};

// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FUniqueNetId            PlayerID                       ( CPF_Parm )

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID )
{
	static UFunction* pFnShowFeedbackUI = NULL;

	if ( ! pFnShowFeedbackUI )
		pFnShowFeedbackUI = (UFunction*) UObject::GObjObjects()->Data[ 28606 ];

	UOnlinePlayerInterfaceEx_execShowFeedbackUI_Parms ShowFeedbackUI_Parms;
	ShowFeedbackUI_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowFeedbackUI_Parms.PlayerID, &PlayerID, 0x48 );

	this->ProcessEvent ( pFnShowFeedbackUI, &ShowFeedbackUI_Parms, NULL );

	return ShowFeedbackUI_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FString >       Accounts                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::GetLocalAccountNames ( TArray< struct FString >* Accounts )
{
	static UFunction* pFnGetLocalAccountNames = NULL;

	if ( ! pFnGetLocalAccountNames )
		pFnGetLocalAccountNames = (UFunction*) UObject::GObjObjects()->Data[ 27007 ];

	UOnlineAccountInterface_execGetLocalAccountNames_Parms GetLocalAccountNames_Parms;

	this->ProcessEvent ( pFnGetLocalAccountNames, &GetLocalAccountNames_Parms, NULL );

	if ( Accounts )
		memcpy ( Accounts, &GetLocalAccountNames_Parms.Accounts, 0xC );

	return GetLocalAccountNames_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::DeleteLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnDeleteLocalAccount = NULL;

	if ( ! pFnDeleteLocalAccount )
		pFnDeleteLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 27003 ];

	UOnlineAccountInterface_execDeleteLocalAccount_Parms DeleteLocalAccount_Parms;
	memcpy ( &DeleteLocalAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &DeleteLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnDeleteLocalAccount, &DeleteLocalAccount_Parms, NULL );

	return DeleteLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.RenameLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 NewUserName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 OldUserName                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password )
{
	static UFunction* pFnRenameLocalAccount = NULL;

	if ( ! pFnRenameLocalAccount )
		pFnRenameLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 26998 ];

	UOnlineAccountInterface_execRenameLocalAccount_Parms RenameLocalAccount_Parms;
	memcpy ( &RenameLocalAccount_Parms.NewUserName, &NewUserName, 0xC );
	memcpy ( &RenameLocalAccount_Parms.OldUserName, &OldUserName, 0xC );
	memcpy ( &RenameLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnRenameLocalAccount, &RenameLocalAccount_Parms, NULL );

	return RenameLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.CreateLocalAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::CreateLocalAccount ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnCreateLocalAccount = NULL;

	if ( ! pFnCreateLocalAccount )
		pFnCreateLocalAccount = (UFunction*) UObject::GObjObjects()->Data[ 26994 ];

	UOnlineAccountInterface_execCreateLocalAccount_Parms CreateLocalAccount_Parms;
	memcpy ( &CreateLocalAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &CreateLocalAccount_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnCreateLocalAccount, &CreateLocalAccount_Parms, NULL );

	return CreateLocalAccount_Parms.ReturnValue;
};

// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnClearCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnClearCreateOnlineAccountCompletedDelegate )
		pFnClearCreateOnlineAccountCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26992 ];

	UOnlineAccountInterface_execClearCreateOnlineAccountCompletedDelegate_Parms ClearCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &ClearCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0x10 );

	this->ProcessEvent ( pFnClearCreateOnlineAccountCompletedDelegate, &ClearCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         AccountCreateDelegate          ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate )
{
	static UFunction* pFnAddCreateOnlineAccountCompletedDelegate = NULL;

	if ( ! pFnAddCreateOnlineAccountCompletedDelegate )
		pFnAddCreateOnlineAccountCompletedDelegate = (UFunction*) UObject::GObjObjects()->Data[ 26990 ];

	UOnlineAccountInterface_execAddCreateOnlineAccountCompletedDelegate_Parms AddCreateOnlineAccountCompletedDelegate_Parms;
	memcpy ( &AddCreateOnlineAccountCompletedDelegate_Parms.AccountCreateDelegate, &AccountCreateDelegate, 0x10 );

	this->ProcessEvent ( pFnAddCreateOnlineAccountCompletedDelegate, &AddCreateOnlineAccountCompletedDelegate_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// [0x00120000] 
// Parameters infos:
// unsigned char                  ErrorStatus                    ( CPF_Parm )

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus )
{
	static UFunction* pFnOnCreateOnlineAccountCompleted = NULL;

	if ( ! pFnOnCreateOnlineAccountCompleted )
		pFnOnCreateOnlineAccountCompleted = (UFunction*) UObject::GObjObjects()->Data[ 26988 ];

	UOnlineAccountInterface_execOnCreateOnlineAccountCompleted_Parms OnCreateOnlineAccountCompleted_Parms;
	OnCreateOnlineAccountCompleted_Parms.ErrorStatus = ErrorStatus;

	this->ProcessEvent ( pFnOnCreateOnlineAccountCompleted, &OnCreateOnlineAccountCompleted_Parms, NULL );
};

// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// [0x00024000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EmailAddress                   ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ProductKey                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

bool UOnlineAccountInterface::CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey )
{
	static UFunction* pFnCreateOnlineAccount = NULL;

	if ( ! pFnCreateOnlineAccount )
		pFnCreateOnlineAccount = (UFunction*) UObject::GObjObjects()->Data[ 26982 ];

	UOnlineAccountInterface_execCreateOnlineAccount_Parms CreateOnlineAccount_Parms;
	memcpy ( &CreateOnlineAccount_Parms.UserName, &UserName, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.Password, &Password, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.EmailAddress, &EmailAddress, 0xC );
	memcpy ( &CreateOnlineAccount_Parms.ProductKey, &ProductKey, 0xC );

	this->ProcessEvent ( pFnCreateOnlineAccount, &CreateOnlineAccount_Parms, NULL );

	return CreateOnlineAccount_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsPendingAuth
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            PlayerUID                      ( CPF_Parm )

bool AAccessControl::IsPendingAuth ( struct FUniqueNetId PlayerUID )
{
	static UFunction* pFnIsPendingAuth = NULL;

	if ( ! pFnIsPendingAuth )
		pFnIsPendingAuth = (UFunction*) UObject::GObjObjects()->Data[ 8807 ];

	AAccessControl_execIsPendingAuth_Parms IsPendingAuth_Parms;
	memcpy ( &IsPendingAuth_Parms.PlayerUID, &PlayerUID, 0x48 );

	this->ProcessEvent ( pFnIsPendingAuth, &IsPendingAuth_Parms, NULL );

	return IsPendingAuth_Parms.ReturnValue;
};

// Function Engine.AccessControl.Cleanup
// [0x00024002] 
// Parameters infos:
// unsigned long                  bExit                          ( CPF_OptionalParm | CPF_Parm )

void AAccessControl::Cleanup ( unsigned long bExit )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = (UFunction*) UObject::GObjObjects()->Data[ 8805 ];

	AAccessControl_execCleanup_Parms Cleanup_Parms;
	Cleanup_Parms.bExit = bExit;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function Engine.AccessControl.NotifyExit
// [0x00020002] 
// Parameters infos:

void AAccessControl::NotifyExit ( )
{
	static UFunction* pFnNotifyExit = NULL;

	if ( ! pFnNotifyExit )
		pFnNotifyExit = (UFunction*) UObject::GObjObjects()->Data[ 8804 ];

	AAccessControl_execNotifyExit_Parms NotifyExit_Parms;

	this->ProcessEvent ( pFnNotifyExit, &NotifyExit_Parms, NULL );
};

// Function Engine.AccessControl.NotifyGameEnding
// [0x00020002] 
// Parameters infos:

void AAccessControl::NotifyGameEnding ( )
{
	static UFunction* pFnNotifyGameEnding = NULL;

	if ( ! pFnNotifyGameEnding )
		pFnNotifyGameEnding = (UFunction*) UObject::GObjObjects()->Data[ 8798 ];

	AAccessControl_execNotifyGameEnding_Parms NotifyGameEnding_Parms;

	this->ProcessEvent ( pFnNotifyGameEnding, &NotifyGameEnding_Parms, NULL );
};

// Function Engine.AccessControl.NotifyServerTravel
// [0x00020002] 
// Parameters infos:
// unsigned long                  bSeamless                      ( CPF_Parm )

void AAccessControl::NotifyServerTravel ( unsigned long bSeamless )
{
	static UFunction* pFnNotifyServerTravel = NULL;

	if ( ! pFnNotifyServerTravel )
		pFnNotifyServerTravel = (UFunction*) UObject::GObjObjects()->Data[ 8796 ];

	AAccessControl_execNotifyServerTravel_Parms NotifyServerTravel_Parms;
	NotifyServerTravel_Parms.bSeamless = bSeamless;

	this->ProcessEvent ( pFnNotifyServerTravel, &NotifyServerTravel_Parms, NULL );
};

// Function Engine.AccessControl.OnDestroyOnlineGameComplete
// [0x00820002] 
// Parameters infos:
// struct FName                   SessionName                    ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void AAccessControl::OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDestroyOnlineGameComplete = NULL;

	if ( ! pFnOnDestroyOnlineGameComplete )
		pFnOnDestroyOnlineGameComplete = (UFunction*) UObject::GObjObjects()->Data[ 8788 ];

	AAccessControl_execOnDestroyOnlineGameComplete_Parms OnDestroyOnlineGameComplete_Parms;
	memcpy ( &OnDestroyOnlineGameComplete_Parms.SessionName, &SessionName, 0x8 );
	OnDestroyOnlineGameComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDestroyOnlineGameComplete, &OnDestroyOnlineGameComplete_Parms, NULL );
};

// Function Engine.AccessControl.StaticOnClientConnectionClose
// [0x00822003] ( FUNC_Final )
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )

void AAccessControl::StaticOnClientConnectionClose ( class UPlayer* ClientConnection )
{
	static UFunction* pFnStaticOnClientConnectionClose = NULL;

	if ( ! pFnStaticOnClientConnectionClose )
		pFnStaticOnClientConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 8775 ];

	AAccessControl_execStaticOnClientConnectionClose_Parms StaticOnClientConnectionClose_Parms;
	StaticOnClientConnectionClose_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnStaticOnClientConnectionClose, &StaticOnClientConnectionClose_Parms, NULL );
};

// Function Engine.AccessControl.OnClientConnectionClose
// [0x00020002] 
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )

void AAccessControl::OnClientConnectionClose ( class UPlayer* ClientConnection )
{
	static UFunction* pFnOnClientConnectionClose = NULL;

	if ( ! pFnOnClientConnectionClose )
		pFnOnClientConnectionClose = (UFunction*) UObject::GObjObjects()->Data[ 8772 ];

	AAccessControl_execOnClientConnectionClose_Parms OnClientConnectionClose_Parms;
	OnClientConnectionClose_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnOnClientConnectionClose, &OnClientConnectionClose_Parms, NULL );
};

// Function Engine.AccessControl.ListenHostAuthTimeout
// [0x00820002] 
// Parameters infos:

void AAccessControl::ListenHostAuthTimeout ( )
{
	static UFunction* pFnListenHostAuthTimeout = NULL;

	if ( ! pFnListenHostAuthTimeout )
		pFnListenHostAuthTimeout = (UFunction*) UObject::GObjObjects()->Data[ 8770 ];

	AAccessControl_execListenHostAuthTimeout_Parms ListenHostAuthTimeout_Parms;

	this->ProcessEvent ( pFnListenHostAuthTimeout, &ListenHostAuthTimeout_Parms, NULL );
};

// Function Engine.AccessControl.EndListenHostAuth
// [0x00820002] 
// Parameters infos:

void AAccessControl::EndListenHostAuth ( )
{
	static UFunction* pFnEndListenHostAuth = NULL;

	if ( ! pFnEndListenHostAuth )
		pFnEndListenHostAuth = (UFunction*) UObject::GObjObjects()->Data[ 8764 ];

	AAccessControl_execEndListenHostAuth_Parms EndListenHostAuth_Parms;

	this->ProcessEvent ( pFnEndListenHostAuth, &EndListenHostAuth_Parms, NULL );
};

// Function Engine.AccessControl.ContinueListenHostAuth
// [0x00820002] 
// Parameters infos:

void AAccessControl::ContinueListenHostAuth ( )
{
	static UFunction* pFnContinueListenHostAuth = NULL;

	if ( ! pFnContinueListenHostAuth )
		pFnContinueListenHostAuth = (UFunction*) UObject::GObjObjects()->Data[ 8759 ];

	AAccessControl_execContinueListenHostAuth_Parms ContinueListenHostAuth_Parms;

	this->ProcessEvent ( pFnContinueListenHostAuth, &ContinueListenHostAuth_Parms, NULL );
};

// Function Engine.AccessControl.BeginListenHostAuth
// [0x00824002] 
// Parameters infos:
// unsigned long                  bRetry                         ( CPF_OptionalParm | CPF_Parm )

void AAccessControl::BeginListenHostAuth ( unsigned long bRetry )
{
	static UFunction* pFnBeginListenHostAuth = NULL;

	if ( ! pFnBeginListenHostAuth )
		pFnBeginListenHostAuth = (UFunction*) UObject::GObjObjects()->Data[ 8741 ];

	AAccessControl_execBeginListenHostAuth_Parms BeginListenHostAuth_Parms;
	BeginListenHostAuth_Parms.bRetry = bRetry;

	this->ProcessEvent ( pFnBeginListenHostAuth, &BeginListenHostAuth_Parms, NULL );
};

// Function Engine.AccessControl.ProcessServerAuthRetryRequest
// [0x00820002] 
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )

void AAccessControl::ProcessServerAuthRetryRequest ( class UPlayer* ClientConnection )
{
	static UFunction* pFnProcessServerAuthRetryRequest = NULL;

	if ( ! pFnProcessServerAuthRetryRequest )
		pFnProcessServerAuthRetryRequest = (UFunction*) UObject::GObjObjects()->Data[ 8731 ];

	AAccessControl_execProcessServerAuthRetryRequest_Parms ProcessServerAuthRetryRequest_Parms;
	ProcessServerAuthRetryRequest_Parms.ClientConnection = ClientConnection;

	this->ProcessEvent ( pFnProcessServerAuthRetryRequest, &ProcessServerAuthRetryRequest_Parms, NULL );
};

// Function Engine.AccessControl.ProcessServerAuthRequest
// [0x00820002] 
// Parameters infos:
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )
// int                            ClientPort                     ( CPF_Parm )

void AAccessControl::ProcessServerAuthRequest ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, struct FIpAddr ClientIP, int ClientPort )
{
	static UFunction* pFnProcessServerAuthRequest = NULL;

	if ( ! pFnProcessServerAuthRequest )
		pFnProcessServerAuthRequest = (UFunction*) UObject::GObjObjects()->Data[ 8718 ];

	AAccessControl_execProcessServerAuthRequest_Parms ProcessServerAuthRequest_Parms;
	ProcessServerAuthRequest_Parms.ClientConnection = ClientConnection;
	memcpy ( &ProcessServerAuthRequest_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &ProcessServerAuthRequest_Parms.ClientIP, &ClientIP, 0x14 );
	ProcessServerAuthRequest_Parms.ClientPort = ClientPort;

	this->ProcessEvent ( pFnProcessServerAuthRequest, &ProcessServerAuthRequest_Parms, NULL );
};

// Function Engine.AccessControl.OnClientAuthComplete
// [0x00820002] 
// Parameters infos:
// unsigned long                  bSuccess                       ( CPF_Parm )
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// class UPlayer*                 ClientConnection               ( CPF_Parm )
// struct FString                 ExtraInfo                      ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::OnClientAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo )
{
	static UFunction* pFnOnClientAuthComplete = NULL;

	if ( ! pFnOnClientAuthComplete )
		pFnOnClientAuthComplete = (UFunction*) UObject::GObjObjects()->Data[ 8704 ];

	AAccessControl_execOnClientAuthComplete_Parms OnClientAuthComplete_Parms;
	OnClientAuthComplete_Parms.bSuccess = bSuccess;
	memcpy ( &OnClientAuthComplete_Parms.ClientUID, &ClientUID, 0x48 );
	OnClientAuthComplete_Parms.ClientConnection = ClientConnection;
	memcpy ( &OnClientAuthComplete_Parms.ExtraInfo, &ExtraInfo, 0xC );

	this->ProcessEvent ( pFnOnClientAuthComplete, &OnClientAuthComplete_Parms, NULL );
};

// Function Engine.AccessControl.ProcessClientAuthResponse
// [0x00020002] 
// Parameters infos:
// struct FUniqueNetId            ClientUID                      ( CPF_Parm )
// struct FIpAddr                 ClientIP                       ( CPF_Parm )
// int                            AuthTicketUID                  ( CPF_Parm )

void AAccessControl::ProcessClientAuthResponse ( struct FUniqueNetId ClientUID, struct FIpAddr ClientIP, int AuthTicketUID )
{
	static UFunction* pFnProcessClientAuthResponse = NULL;

	if ( ! pFnProcessClientAuthResponse )
		pFnProcessClientAuthResponse = (UFunction*) UObject::GObjObjects()->Data[ 8694 ];

	AAccessControl_execProcessClientAuthResponse_Parms ProcessClientAuthResponse_Parms;
	memcpy ( &ProcessClientAuthResponse_Parms.ClientUID, &ClientUID, 0x48 );
	memcpy ( &ProcessClientAuthResponse_Parms.ClientIP, &ClientIP, 0x14 );
	ProcessClientAuthResponse_Parms.AuthTicketUID = AuthTicketUID;

	this->ProcessEvent ( pFnProcessClientAuthResponse, &ProcessClientAuthResponse_Parms, NULL );
};

// Function Engine.AccessControl.OnAuthReady
// [0x00020002] 
// Parameters infos:

void AAccessControl::OnAuthReady ( )
{
	static UFunction* pFnOnAuthReady = NULL;

	if ( ! pFnOnAuthReady )
		pFnOnAuthReady = (UFunction*) UObject::GObjObjects()->Data[ 8691 ];

	AAccessControl_execOnAuthReady_Parms OnAuthReady_Parms;

	this->ProcessEvent ( pFnOnAuthReady, &OnAuthReady_Parms, NULL );
};

// Function Engine.AccessControl.PendingAuthTimer
// [0x00820002] 
// Parameters infos:

void AAccessControl::PendingAuthTimer ( )
{
	static UFunction* pFnPendingAuthTimer = NULL;

	if ( ! pFnPendingAuthTimer )
		pFnPendingAuthTimer = (UFunction*) UObject::GObjObjects()->Data[ 8682 ];

	AAccessControl_execPendingAuthTimer_Parms PendingAuthTimer_Parms;

	this->ProcessEvent ( pFnPendingAuthTimer, &PendingAuthTimer_Parms, NULL );
};

// Function Engine.AccessControl.PostLogin
// [0x00020002] 
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void AAccessControl::PostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 8680 ];

	AAccessControl_execPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function Engine.AccessControl.PreLogin
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FUniqueNetId            UniqueId                       ( CPF_Const | CPF_Parm )
// unsigned long                  bSupportsAuth                  ( CPF_Parm )
// unsigned long                  bSpectator                     ( CPF_Parm )
// struct FString                 OutError                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void AAccessControl::eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, unsigned long bSpectator, struct FString* OutError )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = (UFunction*) UObject::GObjObjects()->Data[ 8643 ];

	AAccessControl_eventPreLogin_Parms PreLogin_Parms;
	memcpy ( &PreLogin_Parms.Options, &Options, 0xC );
	memcpy ( &PreLogin_Parms.Address, &Address, 0xC );
	memcpy ( &PreLogin_Parms.UniqueId, &UniqueId, 0x48 );
	PreLogin_Parms.bSupportsAuth = bSupportsAuth;
	PreLogin_Parms.bSpectator = bSpectator;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );

	if ( OutError )
		memcpy ( OutError, &PreLogin_Parms.OutError, 0xC );
};

// Function Engine.AccessControl.ClearAuthDelegates
// [0x00020002] 
// Parameters infos:
// unsigned long                  bExiting                       ( CPF_Parm )

void AAccessControl::ClearAuthDelegates ( unsigned long bExiting )
{
	static UFunction* pFnClearAuthDelegates = NULL;

	if ( ! pFnClearAuthDelegates )
		pFnClearAuthDelegates = (UFunction*) UObject::GObjObjects()->Data[ 8641 ];

	AAccessControl_execClearAuthDelegates_Parms ClearAuthDelegates_Parms;
	ClearAuthDelegates_Parms.bExiting = bExiting;

	this->ProcessEvent ( pFnClearAuthDelegates, &ClearAuthDelegates_Parms, NULL );
};

// Function Engine.AccessControl.RegisterAuthDelegates
// [0x00020002] 
// Parameters infos:

void AAccessControl::RegisterAuthDelegates ( )
{
	static UFunction* pFnRegisterAuthDelegates = NULL;

	if ( ! pFnRegisterAuthDelegates )
		pFnRegisterAuthDelegates = (UFunction*) UObject::GObjObjects()->Data[ 8640 ];

	AAccessControl_execRegisterAuthDelegates_Parms RegisterAuthDelegates_Parms;

	this->ProcessEvent ( pFnRegisterAuthDelegates, &RegisterAuthDelegates_Parms, NULL );
};

// Function Engine.AccessControl.InitAuthHooks
// [0x00020002] 
// Parameters infos:

void AAccessControl::InitAuthHooks ( )
{
	static UFunction* pFnInitAuthHooks = NULL;

	if ( ! pFnInitAuthHooks )
		pFnInitAuthHooks = (UFunction*) UObject::GObjObjects()->Data[ 8633 ];

	AAccessControl_execInitAuthHooks_Parms InitAuthHooks_Parms;

	this->ProcessEvent ( pFnInitAuthHooks, &InitAuthHooks_Parms, NULL );
};

// Function Engine.AccessControl.IsIDBanned
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            NetId                          ( CPF_Const | CPF_Parm | CPF_OutParm )

bool AAccessControl::IsIDBanned ( struct FUniqueNetId* NetId )
{
	static UFunction* pFnIsIDBanned = NULL;

	if ( ! pFnIsIDBanned )
		pFnIsIDBanned = (UFunction*) UObject::GObjObjects()->Data[ 8629 ];

	AAccessControl_execIsIDBanned_Parms IsIDBanned_Parms;

	this->ProcessEvent ( pFnIsIDBanned, &IsIDBanned_Parms, NULL );

	if ( NetId )
		memcpy ( NetId, &IsIDBanned_Parms.NetId, 0x48 );

	return IsIDBanned_Parms.ReturnValue;
};

// Function Engine.AccessControl.CheckIPPolicy
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Address                        ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::CheckIPPolicy ( struct FString Address )
{
	static UFunction* pFnCheckIPPolicy = NULL;

	if ( ! pFnCheckIPPolicy )
		pFnCheckIPPolicy = (UFunction*) UObject::GObjObjects()->Data[ 8619 ];

	AAccessControl_execCheckIPPolicy_Parms CheckIPPolicy_Parms;
	memcpy ( &CheckIPPolicy_Parms.Address, &Address, 0xC );

	this->ProcessEvent ( pFnCheckIPPolicy, &CheckIPPolicy_Parms, NULL );

	return CheckIPPolicy_Parms.ReturnValue;
};

// Function Engine.AccessControl.ValidLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 UserName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ValidLogin ( struct FString UserName, struct FString Password )
{
	static UFunction* pFnValidLogin = NULL;

	if ( ! pFnValidLogin )
		pFnValidLogin = (UFunction*) UObject::GObjObjects()->Data[ 8615 ];

	AAccessControl_execValidLogin_Parms ValidLogin_Parms;
	memcpy ( &ValidLogin_Parms.UserName, &UserName, 0xC );
	memcpy ( &ValidLogin_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnValidLogin, &ValidLogin_Parms, NULL );

	return ValidLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.ParseAdminOptions
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ParseAdminOptions ( struct FString Options )
{
	static UFunction* pFnParseAdminOptions = NULL;

	if ( ! pFnParseAdminOptions )
		pFnParseAdminOptions = (UFunction*) UObject::GObjObjects()->Data[ 8608 ];

	AAccessControl_execParseAdminOptions_Parms ParseAdminOptions_Parms;
	memcpy ( &ParseAdminOptions_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnParseAdminOptions, &ParseAdminOptions_Parms, NULL );

	return ParseAdminOptions_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminExited
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminExited ( class APlayerController* P )
{
	static UFunction* pFnAdminExited = NULL;

	if ( ! pFnAdminExited )
		pFnAdminExited = (UFunction*) UObject::GObjObjects()->Data[ 8605 ];

	AAccessControl_execAdminExited_Parms AdminExited_Parms;
	AdminExited_Parms.P = P;

	this->ProcessEvent ( pFnAdminExited, &AdminExited_Parms, NULL );
};

// Function Engine.AccessControl.AdminEntered
// [0x00020002] 
// Parameters infos:
// class APlayerController*       P                              ( CPF_Parm )

void AAccessControl::AdminEntered ( class APlayerController* P )
{
	static UFunction* pFnAdminEntered = NULL;

	if ( ! pFnAdminEntered )
		pFnAdminEntered = (UFunction*) UObject::GObjObjects()->Data[ 8602 ];

	AAccessControl_execAdminEntered_Parms AdminEntered_Parms;
	AdminEntered_Parms.P = P;

	this->ProcessEvent ( pFnAdminEntered, &AdminEntered_Parms, NULL );
};

// Function Engine.AccessControl.AdminLogout
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::AdminLogout ( class APlayerController* P )
{
	static UFunction* pFnAdminLogout = NULL;

	if ( ! pFnAdminLogout )
		pFnAdminLogout = (UFunction*) UObject::GObjObjects()->Data[ 8598 ];

	AAccessControl_execAdminLogout_Parms AdminLogout_Parms;
	AdminLogout_Parms.P = P;

	this->ProcessEvent ( pFnAdminLogout, &AdminLogout_Parms, NULL );

	return AdminLogout_Parms.ReturnValue;
};

// Function Engine.AccessControl.AdminLogin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::AdminLogin ( class APlayerController* P, struct FString Password )
{
	static UFunction* pFnAdminLogin = NULL;

	if ( ! pFnAdminLogin )
		pFnAdminLogin = (UFunction*) UObject::GObjObjects()->Data[ 8594 ];

	AAccessControl_execAdminLogin_Parms AdminLogin_Parms;
	AdminLogin_Parms.P = P;
	memcpy ( &AdminLogin_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnAdminLogin, &AdminLogin_Parms, NULL );

	return AdminLogin_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       C                              ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::KickPlayer ( class APlayerController* C, struct FString KickReason )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 8590 ];

	AAccessControl_execKickPlayer_Parms KickPlayer_Parms;
	KickPlayer_Parms.C = C;
	memcpy ( &KickPlayer_Parms.KickReason, &KickReason, 0xC );

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );

	return KickPlayer_Parms.ReturnValue;
};

// Function Engine.AccessControl.ForceKickPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       C                              ( CPF_Parm )
// struct FString                 KickReason                     ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::ForceKickPlayer ( class APlayerController* C, struct FString KickReason )
{
	static UFunction* pFnForceKickPlayer = NULL;

	if ( ! pFnForceKickPlayer )
		pFnForceKickPlayer = (UFunction*) UObject::GObjObjects()->Data[ 8586 ];

	AAccessControl_execForceKickPlayer_Parms ForceKickPlayer_Parms;
	ForceKickPlayer_Parms.C = C;
	memcpy ( &ForceKickPlayer_Parms.KickReason, &KickReason, 0xC );

	this->ProcessEvent ( pFnForceKickPlayer, &ForceKickPlayer_Parms, NULL );

	return ForceKickPlayer_Parms.ReturnValue;
};

// Function Engine.AccessControl.KickBan
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::KickBan ( struct FString Target )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 8576 ];

	AAccessControl_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.AccessControl.Kick
// [0x00020002] 
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::Kick ( struct FString Target )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 8573 ];

	AAccessControl_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.AccessControl.GetControllerFromString
// [0x00020002] 
// Parameters infos:
// class AController*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

class AController* AAccessControl::GetControllerFromString ( struct FString Target )
{
	static UFunction* pFnGetControllerFromString = NULL;

	if ( ! pFnGetControllerFromString )
		pFnGetControllerFromString = (UFunction*) UObject::GObjObjects()->Data[ 8562 ];

	AAccessControl_execGetControllerFromString_Parms GetControllerFromString_Parms;
	memcpy ( &GetControllerFromString_Parms.Target, &Target, 0xC );

	this->ProcessEvent ( pFnGetControllerFromString, &GetControllerFromString_Parms, NULL );

	return GetControllerFromString_Parms.ReturnValue;
};

// Function Engine.AccessControl.RequiresPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool AAccessControl::RequiresPassword ( )
{
	static UFunction* pFnRequiresPassword = NULL;

	if ( ! pFnRequiresPassword )
		pFnRequiresPassword = (UFunction*) UObject::GObjObjects()->Data[ 8560 ];

	AAccessControl_execRequiresPassword_Parms RequiresPassword_Parms;

	this->ProcessEvent ( pFnRequiresPassword, &RequiresPassword_Parms, NULL );

	return RequiresPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.SetGamePassword
// [0x00020002] 
// Parameters infos:
// struct FString                 P                              ( CPF_Parm | CPF_NeedCtorLink )

void AAccessControl::SetGamePassword ( struct FString P )
{
	static UFunction* pFnSetGamePassword = NULL;

	if ( ! pFnSetGamePassword )
		pFnSetGamePassword = (UFunction*) UObject::GObjObjects()->Data[ 8558 ];

	AAccessControl_execSetGamePassword_Parms SetGamePassword_Parms;
	memcpy ( &SetGamePassword_Parms.P, &P, 0xC );

	this->ProcessEvent ( pFnSetGamePassword, &SetGamePassword_Parms, NULL );
};

// Function Engine.AccessControl.SetAdminPassword
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 P                              ( CPF_Parm | CPF_NeedCtorLink )

bool AAccessControl::SetAdminPassword ( struct FString P )
{
	static UFunction* pFnSetAdminPassword = NULL;

	if ( ! pFnSetAdminPassword )
		pFnSetAdminPassword = (UFunction*) UObject::GObjObjects()->Data[ 8555 ];

	AAccessControl_execSetAdminPassword_Parms SetAdminPassword_Parms;
	memcpy ( &SetAdminPassword_Parms.P, &P, 0xC );

	this->ProcessEvent ( pFnSetAdminPassword, &SetAdminPassword_Parms, NULL );

	return SetAdminPassword_Parms.ReturnValue;
};

// Function Engine.AccessControl.IsAdmin
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )

bool AAccessControl::IsAdmin ( class APlayerController* P )
{
	static UFunction* pFnIsAdmin = NULL;

	if ( ! pFnIsAdmin )
		pFnIsAdmin = (UFunction*) UObject::GObjObjects()->Data[ 8550 ];

	AAccessControl_execIsAdmin_Parms IsAdmin_Parms;
	IsAdmin_Parms.P = P;

	this->ProcessEvent ( pFnIsAdmin, &IsAdmin_Parms, NULL );

	return IsAdmin_Parms.ReturnValue;
};

// Function Engine.AccessControl.Destroyed
// [0x00020002] 
// Parameters infos:

void AAccessControl::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 8549 ];

	AAccessControl_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function Engine.AccessControl.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AAccessControl::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 8546 ];

	AAccessControl_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.Admin.ServerSwitch
// [0x002200C2] 
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerSwitch ( struct FString URL )
{
	static UFunction* pFnServerSwitch = NULL;

	if ( ! pFnServerSwitch )
		pFnServerSwitch = (UFunction*) UObject::GObjObjects()->Data[ 13098 ];

	AAdmin_execServerSwitch_Parms ServerSwitch_Parms;
	memcpy ( &ServerSwitch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnServerSwitch, &ServerSwitch_Parms, NULL );
};

// Function Engine.Admin.Switch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 URL                            ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Switch ( struct FString URL )
{
	static UFunction* pFnSwitch = NULL;

	if ( ! pFnSwitch )
		pFnSwitch = (UFunction*) UObject::GObjObjects()->Data[ 13096 ];

	AAdmin_execSwitch_Parms Switch_Parms;
	memcpy ( &Switch_Parms.URL, &URL, 0xC );

	this->ProcessEvent ( pFnSwitch, &Switch_Parms, NULL );
};

// Function Engine.Admin.ServerRestartMap
// [0x002200C2] 
// Parameters infos:

void AAdmin::ServerRestartMap ( )
{
	static UFunction* pFnServerRestartMap = NULL;

	if ( ! pFnServerRestartMap )
		pFnServerRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 13095 ];

	AAdmin_execServerRestartMap_Parms ServerRestartMap_Parms;

	this->ProcessEvent ( pFnServerRestartMap, &ServerRestartMap_Parms, NULL );
};

// Function Engine.Admin.RestartMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::RestartMap ( )
{
	static UFunction* pFnRestartMap = NULL;

	if ( ! pFnRestartMap )
		pFnRestartMap = (UFunction*) UObject::GObjObjects()->Data[ 13094 ];

	AAdmin_execRestartMap_Parms RestartMap_Parms;

	this->ProcessEvent ( pFnRestartMap, &RestartMap_Parms, NULL );
};

// Function Engine.Admin.PlayerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AAdmin::PlayerList ( )
{
	static UFunction* pFnPlayerList = NULL;

	if ( ! pFnPlayerList )
		pFnPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 13092 ];

	AAdmin_execPlayerList_Parms PlayerList_Parms;

	this->ProcessEvent ( pFnPlayerList, &PlayerList_Parms, NULL );
};

// Function Engine.Admin.ServerKick
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerKick ( struct FString S )
{
	static UFunction* pFnServerKick = NULL;

	if ( ! pFnServerKick )
		pFnServerKick = (UFunction*) UObject::GObjObjects()->Data[ 13090 ];

	AAdmin_execServerKick_Parms ServerKick_Parms;
	memcpy ( &ServerKick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerKick, &ServerKick_Parms, NULL );
};

// Function Engine.Admin.Kick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Kick ( struct FString S )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = (UFunction*) UObject::GObjObjects()->Data[ 13088 ];

	AAdmin_execKick_Parms Kick_Parms;
	memcpy ( &Kick_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function Engine.Admin.ServerKickBan
// [0x002200C2] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerKickBan ( struct FString S )
{
	static UFunction* pFnServerKickBan = NULL;

	if ( ! pFnServerKickBan )
		pFnServerKickBan = (UFunction*) UObject::GObjObjects()->Data[ 13086 ];

	AAdmin_execServerKickBan_Parms ServerKickBan_Parms;
	memcpy ( &ServerKickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnServerKickBan, &ServerKickBan_Parms, NULL );
};

// Function Engine.Admin.KickBan
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::KickBan ( struct FString S )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = (UFunction*) UObject::GObjObjects()->Data[ 13084 ];

	AAdmin_execKickBan_Parms KickBan_Parms;
	memcpy ( &KickBan_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function Engine.Admin.ServerAdmin
// [0x002200C2] 
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::ServerAdmin ( struct FString CommandLine )
{
	static UFunction* pFnServerAdmin = NULL;

	if ( ! pFnServerAdmin )
		pFnServerAdmin = (UFunction*) UObject::GObjObjects()->Data[ 13081 ];

	AAdmin_execServerAdmin_Parms ServerAdmin_Parms;
	memcpy ( &ServerAdmin_Parms.CommandLine, &CommandLine, 0xC );

	this->ProcessEvent ( pFnServerAdmin, &ServerAdmin_Parms, NULL );
};

// Function Engine.Admin.Admin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 CommandLine                    ( CPF_Parm | CPF_NeedCtorLink )

void AAdmin::Admin ( struct FString CommandLine )
{
	static UFunction* pFnAdmin = NULL;

	if ( ! pFnAdmin )
		pFnAdmin = (UFunction*) UObject::GObjObjects()->Data[ 13079 ];

	AAdmin_execAdmin_Parms Admin_Parms;
	memcpy ( &Admin_Parms.CommandLine, &CommandLine, 0xC );

	this->ProcessEvent ( pFnAdmin, &Admin_Parms, NULL );
};

// Function Engine.Admin.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AAdmin::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 13078 ];

	AAdmin_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.EmitterSpawnable.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AEmitterSpawnable::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19326 ];

	AEmitterSpawnable_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.EmitterSpawnable.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:
// class UParticleSystem*         NewTemplate                    ( CPF_Parm )
// unsigned long                  bDestroyOnFinish               ( CPF_OptionalParm | CPF_Parm )

void AEmitterSpawnable::eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = (UFunction*) UObject::GObjObjects()->Data[ 19323 ];

	AEmitterSpawnable_eventSetTemplate_Parms SetTemplate_Parms;
	SetTemplate_Parms.NewTemplate = NewTemplate;
	SetTemplate_Parms.bDestroyOnFinish = bDestroyOnFinish;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function Engine.SeqAct_ControlMovieTexture.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_ControlMovieTexture::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 10266 ];

	USeqAct_ControlMovieTexture_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.CoverReplicator.ClientReceiveLinkDisabledState
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned long                  bLinkDisabled                  ( CPF_Parm )

void ACoverReplicator::ClientReceiveLinkDisabledState ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled )
{
	static UFunction* pFnClientReceiveLinkDisabledState = NULL;

	if ( ! pFnClientReceiveLinkDisabledState )
		pFnClientReceiveLinkDisabledState = (UFunction*) UObject::GObjObjects()->Data[ 17797 ];

	ACoverReplicator_execClientReceiveLinkDisabledState_Parms ClientReceiveLinkDisabledState_Parms;
	ClientReceiveLinkDisabledState_Parms.Index = Index;
	ClientReceiveLinkDisabledState_Parms.Link = Link;
	ClientReceiveLinkDisabledState_Parms.bLinkDisabled = bLinkDisabled;

	this->ProcessEvent ( pFnClientReceiveLinkDisabledState, &ClientReceiveLinkDisabledState_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendLinkDisabledState
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendLinkDisabledState ( int Index )
{
	static UFunction* pFnServerSendLinkDisabledState = NULL;

	if ( ! pFnServerSendLinkDisabledState )
		pFnServerSendLinkDisabledState = (UFunction*) UObject::GObjObjects()->Data[ 17795 ];

	ACoverReplicator_execServerSendLinkDisabledState_Parms ServerSendLinkDisabledState_Parms;
	ServerSendLinkDisabledState_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendLinkDisabledState, &ServerSendLinkDisabledState_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyLinkDisabledStateChange
// [0x00020002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )

void ACoverReplicator::NotifyLinkDisabledStateChange ( class ACoverLink* Link )
{
	static UFunction* pFnNotifyLinkDisabledStateChange = NULL;

	if ( ! pFnNotifyLinkDisabledStateChange )
		pFnNotifyLinkDisabledStateChange = (UFunction*) UObject::GObjObjects()->Data[ 17791 ];

	ACoverReplicator_execNotifyLinkDisabledStateChange_Parms NotifyLinkDisabledStateChange_Parms;
	NotifyLinkDisabledStateChange_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyLinkDisabledStateChange, &NotifyLinkDisabledStateChange_Parms, NULL );
};

// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveManualCoverTypeSlots = NULL;

	if ( ! pFnClientReceiveManualCoverTypeSlots )
		pFnClientReceiveManualCoverTypeSlots = (UFunction*) UObject::GObjObjects()->Data[ 17784 ];

	ACoverReplicator_execClientReceiveManualCoverTypeSlots_Parms ClientReceiveManualCoverTypeSlots_Parms;
	ClientReceiveManualCoverTypeSlots_Parms.Index = Index;
	ClientReceiveManualCoverTypeSlots_Parms.Link = Link;
	ClientReceiveManualCoverTypeSlots_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveManualCoverTypeSlots_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveManualCoverTypeSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveManualCoverTypeSlots, &ClientReceiveManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// [0x00A200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendManualCoverTypeSlots ( int Index )
{
	static UFunction* pFnServerSendManualCoverTypeSlots = NULL;

	if ( ! pFnServerSendManualCoverTypeSlots )
		pFnServerSendManualCoverTypeSlots = (UFunction*) UObject::GObjObjects()->Data[ 17777 ];

	ACoverReplicator_execServerSendManualCoverTypeSlots_Parms ServerSendManualCoverTypeSlots_Parms;
	ServerSendManualCoverTypeSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendManualCoverTypeSlots, &ServerSendManualCoverTypeSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NewCoverType                   ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifySetManualCoverTypeForSlots = NULL;

	if ( ! pFnNotifySetManualCoverTypeForSlots )
		pFnNotifySetManualCoverTypeForSlots = (UFunction*) UObject::GObjObjects()->Data[ 17768 ];

	ACoverReplicator_execNotifySetManualCoverTypeForSlots_Parms NotifySetManualCoverTypeForSlots_Parms;
	NotifySetManualCoverTypeForSlots_Parms.Link = Link;
	NotifySetManualCoverTypeForSlots_Parms.NewCoverType = NewCoverType;

	this->ProcessEvent ( pFnNotifySetManualCoverTypeForSlots, &NotifySetManualCoverTypeForSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifySetManualCoverTypeForSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone )
{
	static UFunction* pFnClientReceiveAdjustedSlots = NULL;

	if ( ! pFnClientReceiveAdjustedSlots )
		pFnClientReceiveAdjustedSlots = (UFunction*) UObject::GObjObjects()->Data[ 17761 ];

	ACoverReplicator_execClientReceiveAdjustedSlots_Parms ClientReceiveAdjustedSlots_Parms;
	ClientReceiveAdjustedSlots_Parms.Index = Index;
	ClientReceiveAdjustedSlots_Parms.Link = Link;
	ClientReceiveAdjustedSlots_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveAdjustedSlots_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveAdjustedSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveAdjustedSlots, &ClientReceiveAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendAdjustedSlots ( int Index )
{
	static UFunction* pFnServerSendAdjustedSlots = NULL;

	if ( ! pFnServerSendAdjustedSlots )
		pFnServerSendAdjustedSlots = (UFunction*) UObject::GObjObjects()->Data[ 17754 ];

	ACoverReplicator_execServerSendAdjustedSlots_Parms ServerSendAdjustedSlots_Parms;
	ServerSendAdjustedSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendAdjustedSlots, &ServerSendAdjustedSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyAutoAdjustSlots = NULL;

	if ( ! pFnNotifyAutoAdjustSlots )
		pFnNotifyAutoAdjustSlots = (UFunction*) UObject::GObjObjects()->Data[ 17746 ];

	ACoverReplicator_execNotifyAutoAdjustSlots_Parms NotifyAutoAdjustSlots_Parms;
	NotifyAutoAdjustSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyAutoAdjustSlots, &NotifyAutoAdjustSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyAutoAdjustSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveDisabledSlots = NULL;

	if ( ! pFnClientReceiveDisabledSlots )
		pFnClientReceiveDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17739 ];

	ACoverReplicator_execClientReceiveDisabledSlots_Parms ClientReceiveDisabledSlots_Parms;
	ClientReceiveDisabledSlots_Parms.Index = Index;
	ClientReceiveDisabledSlots_Parms.Link = Link;
	ClientReceiveDisabledSlots_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveDisabledSlots_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveDisabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveDisabledSlots, &ClientReceiveDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendDisabledSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendDisabledSlots ( int Index )
{
	static UFunction* pFnServerSendDisabledSlots = NULL;

	if ( ! pFnServerSendDisabledSlots )
		pFnServerSendDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17732 ];

	ACoverReplicator_execServerSendDisabledSlots_Parms ServerSendDisabledSlots_Parms;
	ServerSendDisabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendDisabledSlots, &ServerSendDisabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyDisabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyDisabledSlots = NULL;

	if ( ! pFnNotifyDisabledSlots )
		pFnNotifyDisabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17724 ];

	ACoverReplicator_execNotifyDisabledSlots_Parms NotifyDisabledSlots_Parms;
	NotifyDisabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyDisabledSlots, &NotifyDisabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyDisabledSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone )
{
	static UFunction* pFnClientReceiveEnabledSlots = NULL;

	if ( ! pFnClientReceiveEnabledSlots )
		pFnClientReceiveEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17717 ];

	ACoverReplicator_execClientReceiveEnabledSlots_Parms ClientReceiveEnabledSlots_Parms;
	ClientReceiveEnabledSlots_Parms.Index = Index;
	ClientReceiveEnabledSlots_Parms.Link = Link;
	ClientReceiveEnabledSlots_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveEnabledSlots_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveEnabledSlots_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveEnabledSlots, &ClientReceiveEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendEnabledSlots
// [0x002200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendEnabledSlots ( int Index )
{
	static UFunction* pFnServerSendEnabledSlots = NULL;

	if ( ! pFnServerSendEnabledSlots )
		pFnServerSendEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17710 ];

	ACoverReplicator_execServerSendEnabledSlots_Parms ServerSendEnabledSlots_Parms;
	ServerSendEnabledSlots_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendEnabledSlots, &ServerSendEnabledSlots_Parms, NULL );
};

// Function Engine.CoverReplicator.NotifyEnabledSlots
// [0x00420002] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// TArray< int >                  SlotIndices                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ACoverReplicator::NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices )
{
	static UFunction* pFnNotifyEnabledSlots = NULL;

	if ( ! pFnNotifyEnabledSlots )
		pFnNotifyEnabledSlots = (UFunction*) UObject::GObjObjects()->Data[ 17702 ];

	ACoverReplicator_execNotifyEnabledSlots_Parms NotifyEnabledSlots_Parms;
	NotifyEnabledSlots_Parms.Link = Link;

	this->ProcessEvent ( pFnNotifyEnabledSlots, &NotifyEnabledSlots_Parms, NULL );

	if ( SlotIndices )
		memcpy ( SlotIndices, &NotifyEnabledSlots_Parms.SlotIndices, 0xC );
};

// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// [0x010201C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// unsigned long                  bLinkDisabled                  ( CPF_Parm )
// unsigned char                  NumSlotsEnabled                ( CPF_Parm )
// unsigned char                  SlotsEnabled                   ( CPF_Parm )
// unsigned char                  NumSlotsDisabled               ( CPF_Parm )
// unsigned char                  SlotsDisabled                  ( CPF_Parm )
// unsigned char                  NumSlotsAdjusted               ( CPF_Parm )
// unsigned char                  SlotsAdjusted                  ( CPF_Parm )
// unsigned char                  NumCoverTypesChanged           ( CPF_Parm )
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          ( CPF_Parm )
// unsigned long                  bDone                          ( CPF_Parm )

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone )
{
	static UFunction* pFnClientReceiveInitialCoverReplicationInfo = NULL;

	if ( ! pFnClientReceiveInitialCoverReplicationInfo )
		pFnClientReceiveInitialCoverReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 17688 ];

	ACoverReplicator_execClientReceiveInitialCoverReplicationInfo_Parms ClientReceiveInitialCoverReplicationInfo_Parms;
	ClientReceiveInitialCoverReplicationInfo_Parms.Index = Index;
	ClientReceiveInitialCoverReplicationInfo_Parms.Link = Link;
	ClientReceiveInitialCoverReplicationInfo_Parms.bLinkDisabled = bLinkDisabled;
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsEnabled = NumSlotsEnabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsEnabled, &SlotsEnabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsDisabled = NumSlotsDisabled;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsDisabled, &SlotsDisabled, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumSlotsAdjusted = NumSlotsAdjusted;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsAdjusted, &SlotsAdjusted, 0x8 );
	ClientReceiveInitialCoverReplicationInfo_Parms.NumCoverTypesChanged = NumCoverTypesChanged;
	memcpy ( &ClientReceiveInitialCoverReplicationInfo_Parms.SlotsCoverTypeChanged, &SlotsCoverTypeChanged, 0x20 );
	ClientReceiveInitialCoverReplicationInfo_Parms.bDone = bDone;

	this->ProcessEvent ( pFnClientReceiveInitialCoverReplicationInfo, &ClientReceiveInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// [0x00A200C2] 
// Parameters infos:
// int                            Index                          ( CPF_Parm )

void ACoverReplicator::ServerSendInitialCoverReplicationInfo ( int Index )
{
	static UFunction* pFnServerSendInitialCoverReplicationInfo = NULL;

	if ( ! pFnServerSendInitialCoverReplicationInfo )
		pFnServerSendInitialCoverReplicationInfo = (UFunction*) UObject::GObjObjects()->Data[ 17675 ];

	ACoverReplicator_execServerSendInitialCoverReplicationInfo_Parms ServerSendInitialCoverReplicationInfo_Parms;
	ServerSendInitialCoverReplicationInfo_Parms.Index = Index;

	this->ProcessEvent ( pFnServerSendInitialCoverReplicationInfo, &ServerSendInitialCoverReplicationInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.ClientSetOwner
// [0x010201C2] 
// Parameters infos:
// class APlayerController*       PC                             ( CPF_Parm )

void ACoverReplicator::ClientSetOwner ( class APlayerController* PC )
{
	static UFunction* pFnClientSetOwner = NULL;

	if ( ! pFnClientSetOwner )
		pFnClientSetOwner = (UFunction*) UObject::GObjObjects()->Data[ 17673 ];

	ACoverReplicator_execClientSetOwner_Parms ClientSetOwner_Parms;
	ClientSetOwner_Parms.PC = PC;

	this->ProcessEvent ( pFnClientSetOwner, &ClientSetOwner_Parms, NULL );
};

// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::ReplicateInitialCoverInfo ( )
{
	static UFunction* pFnReplicateInitialCoverInfo = NULL;

	if ( ! pFnReplicateInitialCoverInfo )
		pFnReplicateInitialCoverInfo = (UFunction*) UObject::GObjObjects()->Data[ 17671 ];

	ACoverReplicator_execReplicateInitialCoverInfo_Parms ReplicateInitialCoverInfo_Parms;

	this->ProcessEvent ( pFnReplicateInitialCoverInfo, &ReplicateInitialCoverInfo_Parms, NULL );
};

// Function Engine.CoverReplicator.PurgeOldEntries
// [0x00020002] 
// Parameters infos:

void ACoverReplicator::PurgeOldEntries ( )
{
	static UFunction* pFnPurgeOldEntries = NULL;

	if ( ! pFnPurgeOldEntries )
		pFnPurgeOldEntries = (UFunction*) UObject::GObjObjects()->Data[ 17669 ];

	ACoverReplicator_execPurgeOldEntries_Parms PurgeOldEntries_Parms;

	this->ProcessEvent ( pFnPurgeOldEntries, &PurgeOldEntries_Parms, NULL );
};

// Function Engine.GameMessage.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UGameMessage::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 21913 ];

	UGameMessage_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ToggleHUD::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32916 ];

	USeqAct_ToggleHUD_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ToggleCinematicMode.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_ToggleCinematicMode::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 32909 ];

	USeqAct_ToggleCinematicMode_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_ConsoleCommand::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32492 ];

	USeqAct_ConsoleCommand_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// [0x00020002] 
// Parameters infos:
// int                            OldVersion                     ( CPF_Parm )
// int                            NewVersion                     ( CPF_Parm )

void USeqAct_ConsoleCommand::VersionUpdated ( int OldVersion, int NewVersion )
{
	static UFunction* pFnVersionUpdated = NULL;

	if ( ! pFnVersionUpdated )
		pFnVersionUpdated = (UFunction*) UObject::GObjObjects()->Data[ 32489 ];

	USeqAct_ConsoleCommand_execVersionUpdated_Parms VersionUpdated_Parms;
	VersionUpdated_Parms.OldVersion = OldVersion;
	VersionUpdated_Parms.NewVersion = NewVersion;

	this->ProcessEvent ( pFnVersionUpdated, &VersionUpdated_Parms, NULL );
};

// Function Engine.SeqAct_SetSoundMode.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetSoundMode::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32808 ];

	USeqAct_SetSoundMode_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetSoundMode.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_SetSoundMode::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 32806 ];

	USeqAct_SetSoundMode_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UAnimNotify_PlayFaceFXAnim::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 15005 ];

	UAnimNotify_PlayFaceFXAnim_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// int                            TeamIndex                      ( CPF_Parm )
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalizedTeam = NULL;

	if ( ! pFnAllowBroadcastLocalizedTeam )
		pFnAllowBroadcastLocalizedTeam = (UFunction*) UObject::GObjObjects()->Data[ 15687 ];

	ABroadcastHandler_eventAllowBroadcastLocalizedTeam_Parms AllowBroadcastLocalizedTeam_Parms;
	AllowBroadcastLocalizedTeam_Parms.TeamIndex = TeamIndex;
	AllowBroadcastLocalizedTeam_Parms.Sender = Sender;
	AllowBroadcastLocalizedTeam_Parms.Message = Message;
	AllowBroadcastLocalizedTeam_Parms.Switch = Switch;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalizedTeam_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalizedTeam_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalizedTeam, &AllowBroadcastLocalizedTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// [0x00024802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnAllowBroadcastLocalized = NULL;

	if ( ! pFnAllowBroadcastLocalized )
		pFnAllowBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 15679 ];

	ABroadcastHandler_eventAllowBroadcastLocalized_Parms AllowBroadcastLocalized_Parms;
	AllowBroadcastLocalized_Parms.Sender = Sender;
	AllowBroadcastLocalized_Parms.Message = Message;
	AllowBroadcastLocalized_Parms.Switch = Switch;
	AllowBroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	AllowBroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	AllowBroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnAllowBroadcastLocalized, &AllowBroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastTeam
// [0x00024002] 
// Parameters infos:
// class AController*             Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastTeam = NULL;

	if ( ! pFnBroadcastTeam )
		pFnBroadcastTeam = (UFunction*) UObject::GObjObjects()->Data[ 15674 ];

	ABroadcastHandler_execBroadcastTeam_Parms BroadcastTeam_Parms;
	BroadcastTeam_Parms.Sender = Sender;
	memcpy ( &BroadcastTeam_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastTeam_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastTeam, &BroadcastTeam_Parms, NULL );
};

// Function Engine.BroadcastHandler.Broadcast
// [0x00024002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::Broadcast ( class AActor* Sender, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcast = NULL;

	if ( ! pFnBroadcast )
		pFnBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 15668 ];

	ABroadcastHandler_execBroadcast_Parms Broadcast_Parms;
	Broadcast_Parms.Sender = Sender;
	memcpy ( &Broadcast_Parms.msg, &msg, 0xC );
	memcpy ( &Broadcast_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcast, &Broadcast_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastLocalized
// [0x00024002] 
// Parameters infos:
// class AActor*                  Sender                         ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// class UClass*                  Message                        ( CPF_Parm )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnBroadcastLocalized = NULL;

	if ( ! pFnBroadcastLocalized )
		pFnBroadcastLocalized = (UFunction*) UObject::GObjObjects()->Data[ 15660 ];

	ABroadcastHandler_execBroadcastLocalized_Parms BroadcastLocalized_Parms;
	BroadcastLocalized_Parms.Sender = Sender;
	BroadcastLocalized_Parms.Receiver = Receiver;
	BroadcastLocalized_Parms.Message = Message;
	BroadcastLocalized_Parms.Switch = Switch;
	BroadcastLocalized_Parms.RelatedPRI = RelatedPRI;
	BroadcastLocalized_Parms.RelatedPRI01 = RelatedPRI01;
	BroadcastLocalized_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnBroadcastLocalized, &BroadcastLocalized_Parms, NULL );
};

// Function Engine.BroadcastHandler.BroadcastText
// [0x00024002] 
// Parameters infos:
// class APlayerReplicationInfo*  SenderPRI                      ( CPF_Parm )
// class APlayerController*       Receiver                       ( CPF_Parm )
// struct FString                 msg                            ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   Type                           ( CPF_OptionalParm | CPF_Parm )

void ABroadcastHandler::BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type )
{
	static UFunction* pFnBroadcastText = NULL;

	if ( ! pFnBroadcastText )
		pFnBroadcastText = (UFunction*) UObject::GObjObjects()->Data[ 15655 ];

	ABroadcastHandler_execBroadcastText_Parms BroadcastText_Parms;
	BroadcastText_Parms.SenderPRI = SenderPRI;
	BroadcastText_Parms.Receiver = Receiver;
	memcpy ( &BroadcastText_Parms.msg, &msg, 0xC );
	memcpy ( &BroadcastText_Parms.Type, &Type, 0x8 );

	this->ProcessEvent ( pFnBroadcastText, &BroadcastText_Parms, NULL );
};

// Function Engine.BroadcastHandler.AllowsBroadcast
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  broadcaster                    ( CPF_Parm )
// int                            InLen                          ( CPF_Parm )

bool ABroadcastHandler::AllowsBroadcast ( class AActor* broadcaster, int InLen )
{
	static UFunction* pFnAllowsBroadcast = NULL;

	if ( ! pFnAllowsBroadcast )
		pFnAllowsBroadcast = (UFunction*) UObject::GObjObjects()->Data[ 15651 ];

	ABroadcastHandler_execAllowsBroadcast_Parms AllowsBroadcast_Parms;
	AllowsBroadcast_Parms.broadcaster = broadcaster;
	AllowsBroadcast_Parms.InLen = InLen;

	this->ProcessEvent ( pFnAllowsBroadcast, &AllowsBroadcast_Parms, NULL );

	return AllowsBroadcast_Parms.ReturnValue;
};

// Function Engine.BroadcastHandler.UpdateSentText
// [0x00020002] 
// Parameters infos:

void ABroadcastHandler::UpdateSentText ( )
{
	static UFunction* pFnUpdateSentText = NULL;

	if ( ! pFnUpdateSentText )
		pFnUpdateSentText = (UFunction*) UObject::GObjObjects()->Data[ 15650 ];

	ABroadcastHandler_execUpdateSentText_Parms UpdateSentText_Parms;

	this->ProcessEvent ( pFnUpdateSentText, &UpdateSentText_Parms, NULL );
};

// Function Engine.HttpFactory.CreateRequest
// [0x00022002] 
// Parameters infos:
// class UHttpRequestInterface*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UHttpRequestInterface* UHttpFactory::CreateRequest ( )
{
	static UFunction* pFnCreateRequest = NULL;

	if ( ! pFnCreateRequest )
		pFnCreateRequest = (UFunction*) UObject::GObjObjects()->Data[ 16634 ];

	UHttpFactory_execCreateRequest_Parms CreateRequest_Parms;

	this->ProcessEvent ( pFnCreateRequest, &CreateRequest_Parms, NULL );

	return CreateRequest_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystemKVSInterface.WriteKeyValue
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlotIndex                  ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FPlatformInterfaceData  Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudSaveSystemKVSInterface::WriteKeyValue ( int SaveSlotIndex, struct FString KeyName, struct FPlatformInterfaceData* Value )
{
	static UFunction* pFnWriteKeyValue = NULL;

	if ( ! pFnWriteKeyValue )
		pFnWriteKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 16748 ];

	UCloudSaveSystemKVSInterface_execWriteKeyValue_Parms WriteKeyValue_Parms;
	WriteKeyValue_Parms.SaveSlotIndex = SaveSlotIndex;
	memcpy ( &WriteKeyValue_Parms.KeyName, &KeyName, 0xC );

	this->ProcessEvent ( pFnWriteKeyValue, &WriteKeyValue_Parms, NULL );

	if ( Value )
		memcpy ( Value, &WriteKeyValue_Parms.Value, 0x30 );

	return WriteKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystemKVSInterface.ReadKeyValue
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlotIndex                  ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )
// struct FPlatformInterfaceDelegateResult Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudSaveSystemKVSInterface::ReadKeyValue ( int SaveSlotIndex, struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value )
{
	static UFunction* pFnReadKeyValue = NULL;

	if ( ! pFnReadKeyValue )
		pFnReadKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 16732 ];

	UCloudSaveSystemKVSInterface_execReadKeyValue_Parms ReadKeyValue_Parms;
	ReadKeyValue_Parms.SaveSlotIndex = SaveSlotIndex;
	memcpy ( &ReadKeyValue_Parms.KeyName, &KeyName, 0xC );
	ReadKeyValue_Parms.Type = Type;

	this->ProcessEvent ( pFnReadKeyValue, &ReadKeyValue_Parms, NULL );

	if ( Value )
		memcpy ( Value, &ReadKeyValue_Parms.Value, 0x34 );

	return ReadKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlob
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         InDeleteDataBlobCallback       ( CPF_Parm | CPF_NeedCtorLink )

bool UCloudSaveSystemDataBlobStoreInterface::DeleteDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InDeleteDataBlobCallback )
{
	static UFunction* pFnDeleteDataBlob = NULL;

	if ( ! pFnDeleteDataBlob )
		pFnDeleteDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 16836 ];

	UCloudSaveSystemDataBlobStoreInterface_execDeleteDataBlob_Parms DeleteDataBlob_Parms;
	memcpy ( &DeleteDataBlob_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &DeleteDataBlob_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &DeleteDataBlob_Parms.InDeleteDataBlobCallback, &InDeleteDataBlobCallback, 0x10 );

	this->ProcessEvent ( pFnDeleteDataBlob, &DeleteDataBlob_Parms, NULL );

	return DeleteDataBlob_Parms.ReturnValue;
};

// Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlobCallbackDelegate
// [0x00140001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSucessfull                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystemDataBlobStoreInterface::DeleteDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error )
{
	static UFunction* pFnDeleteDataBlobCallbackDelegate = NULL;

	if ( ! pFnDeleteDataBlobCallbackDelegate )
		pFnDeleteDataBlobCallbackDelegate = (UFunction*) UObject::GObjObjects()->Data[ 16913 ];

	UCloudSaveSystemDataBlobStoreInterface_execDeleteDataBlobCallbackDelegate_Parms DeleteDataBlobCallbackDelegate_Parms;
	DeleteDataBlobCallbackDelegate_Parms.bWasSucessfull = bWasSucessfull;
	memcpy ( &DeleteDataBlobCallbackDelegate_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &DeleteDataBlobCallbackDelegate_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &DeleteDataBlobCallbackDelegate_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnDeleteDataBlobCallbackDelegate, &DeleteDataBlobCallbackDelegate_Parms, NULL );
};

// Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlob
// [0x00420000] 
// Parameters infos:
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         InSetDataBlobCallback          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        DataBlob                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudSaveSystemDataBlobStoreInterface::SetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InSetDataBlobCallback, TArray< unsigned char >* DataBlob )
{
	static UFunction* pFnSetDataBlob = NULL;

	if ( ! pFnSetDataBlob )
		pFnSetDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 16907 ];

	UCloudSaveSystemDataBlobStoreInterface_execSetDataBlob_Parms SetDataBlob_Parms;
	memcpy ( &SetDataBlob_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &SetDataBlob_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &SetDataBlob_Parms.InSetDataBlobCallback, &InSetDataBlobCallback, 0x10 );

	this->ProcessEvent ( pFnSetDataBlob, &SetDataBlob_Parms, NULL );

	if ( DataBlob )
		memcpy ( DataBlob, &SetDataBlob_Parms.DataBlob, 0xC );
};

// Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlobCallbackDelegate
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSucessfull                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystemDataBlobStoreInterface::SetDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error )
{
	static UFunction* pFnSetDataBlobCallbackDelegate = NULL;

	if ( ! pFnSetDataBlobCallbackDelegate )
		pFnSetDataBlobCallbackDelegate = (UFunction*) UObject::GObjObjects()->Data[ 16902 ];

	UCloudSaveSystemDataBlobStoreInterface_execSetDataBlobCallbackDelegate_Parms SetDataBlobCallbackDelegate_Parms;
	SetDataBlobCallbackDelegate_Parms.bWasSucessfull = bWasSucessfull;
	memcpy ( &SetDataBlobCallbackDelegate_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &SetDataBlobCallbackDelegate_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &SetDataBlobCallbackDelegate_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnSetDataBlobCallbackDelegate, &SetDataBlobCallbackDelegate_Parms, NULL );
};

// Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlob
// [0x00020000] 
// Parameters infos:
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         OnGetDataBlobComplete          ( CPF_Parm | CPF_NeedCtorLink )

void UCloudSaveSystemDataBlobStoreInterface::GetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate OnGetDataBlobComplete )
{
	static UFunction* pFnGetDataBlob = NULL;

	if ( ! pFnGetDataBlob )
		pFnGetDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 16898 ];

	UCloudSaveSystemDataBlobStoreInterface_execGetDataBlob_Parms GetDataBlob_Parms;
	memcpy ( &GetDataBlob_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &GetDataBlob_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &GetDataBlob_Parms.OnGetDataBlobComplete, &OnGetDataBlobComplete, 0x10 );

	this->ProcessEvent ( pFnGetDataBlob, &GetDataBlob_Parms, NULL );
};

// Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlobCallbackDelegate
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        DataBlob                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UCloudSaveSystemDataBlobStoreInterface::GetDataBlobCallbackDelegate ( unsigned long bWasSuccessful, struct FString StorageID, struct FString BlobName, struct FString Error, TArray< unsigned char >* DataBlob )
{
	static UFunction* pFnGetDataBlobCallbackDelegate = NULL;

	if ( ! pFnGetDataBlobCallbackDelegate )
		pFnGetDataBlobCallbackDelegate = (UFunction*) UObject::GObjObjects()->Data[ 16891 ];

	UCloudSaveSystemDataBlobStoreInterface_execGetDataBlobCallbackDelegate_Parms GetDataBlobCallbackDelegate_Parms;
	GetDataBlobCallbackDelegate_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &GetDataBlobCallbackDelegate_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &GetDataBlobCallbackDelegate_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &GetDataBlobCallbackDelegate_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnGetDataBlobCallbackDelegate, &GetDataBlobCallbackDelegate_Parms, NULL );

	if ( DataBlob )
		memcpy ( DataBlob, &GetDataBlobCallbackDelegate_Parms.DataBlob, 0xC );
};

// Function Engine.CloudStorageBaseCloudSaveSystemKVS.GenerateKeyNameForSaveSlot
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            SaveSlotIndex                  ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString UCloudStorageBaseCloudSaveSystemKVS::GenerateKeyNameForSaveSlot ( int SaveSlotIndex, struct FString KeyName )
{
	static UFunction* pFnGenerateKeyNameForSaveSlot = NULL;

	if ( ! pFnGenerateKeyNameForSaveSlot )
		pFnGenerateKeyNameForSaveSlot = (UFunction*) UObject::GObjObjects()->Data[ 17024 ];

	UCloudStorageBaseCloudSaveSystemKVS_execGenerateKeyNameForSaveSlot_Parms GenerateKeyNameForSaveSlot_Parms;
	GenerateKeyNameForSaveSlot_Parms.SaveSlotIndex = SaveSlotIndex;
	memcpy ( &GenerateKeyNameForSaveSlot_Parms.KeyName, &KeyName, 0xC );

	this->ProcessEvent ( pFnGenerateKeyNameForSaveSlot, &GenerateKeyNameForSaveSlot_Parms, NULL );

	return GenerateKeyNameForSaveSlot_Parms.ReturnValue;
};

// Function Engine.CloudStorageBaseCloudSaveSystemKVS.WriteKeyValue
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlotIndex                  ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FPlatformInterfaceData  Value                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudStorageBaseCloudSaveSystemKVS::WriteKeyValue ( int SaveSlotIndex, struct FString KeyName, struct FPlatformInterfaceData* Value )
{
	static UFunction* pFnWriteKeyValue = NULL;

	if ( ! pFnWriteKeyValue )
		pFnWriteKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 17025 ];

	UCloudStorageBaseCloudSaveSystemKVS_execWriteKeyValue_Parms WriteKeyValue_Parms;
	WriteKeyValue_Parms.SaveSlotIndex = SaveSlotIndex;
	memcpy ( &WriteKeyValue_Parms.KeyName, &KeyName, 0xC );

	this->ProcessEvent ( pFnWriteKeyValue, &WriteKeyValue_Parms, NULL );

	if ( Value )
		memcpy ( Value, &WriteKeyValue_Parms.Value, 0x30 );

	return WriteKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudStorageBaseCloudSaveSystemKVS.ReadKeyValue
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSlotIndex                  ( CPF_Parm )
// struct FString                 KeyName                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Type                           ( CPF_Parm )
// struct FPlatformInterfaceDelegateResult Value                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UCloudStorageBaseCloudSaveSystemKVS::ReadKeyValue ( int SaveSlotIndex, struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value )
{
	static UFunction* pFnReadKeyValue = NULL;

	if ( ! pFnReadKeyValue )
		pFnReadKeyValue = (UFunction*) UObject::GObjObjects()->Data[ 17017 ];

	UCloudStorageBaseCloudSaveSystemKVS_execReadKeyValue_Parms ReadKeyValue_Parms;
	ReadKeyValue_Parms.SaveSlotIndex = SaveSlotIndex;
	memcpy ( &ReadKeyValue_Parms.KeyName, &KeyName, 0xC );
	ReadKeyValue_Parms.Type = Type;

	this->ProcessEvent ( pFnReadKeyValue, &ReadKeyValue_Parms, NULL );

	if ( Value )
		memcpy ( Value, &ReadKeyValue_Parms.Value, 0x34 );

	return ReadKeyValue_Parms.ReturnValue;
};

// Function Engine.CloudStorageBaseCloudSaveSystemKVS.Init
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UCloudStorageBase*       InCloudStorage                 ( CPF_Parm )

void UCloudStorageBaseCloudSaveSystemKVS::Init ( class UCloudStorageBase* InCloudStorage )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 17015 ];

	UCloudStorageBaseCloudSaveSystemKVS_execInit_Parms Init_Parms;
	Init_Parms.InCloudStorage = InCloudStorage;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.ColorScaleVolume.UnTouch
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AColorScaleVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 17059 ];

	AColorScaleVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.ColorScaleVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AColorScaleVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 17052 ];

	AColorScaleVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.VolumeTimer.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 36180 ];

	AVolumeTimer_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function Engine.VolumeTimer.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AVolumeTimer::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 36179 ];

	AVolumeTimer_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DynamicPhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADynamicPhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18850 ];

	ADynamicPhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.DynamicTriggerVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ADynamicTriggerVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 18916 ];

	ADynamicTriggerVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.ExponentialHeightFog.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AExponentialHeightFog::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 19772 ];

	AExponentialHeightFog_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.ExponentialHeightFog.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AExponentialHeightFog::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 19770 ];

	AExponentialHeightFog_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.ExponentialHeightFog.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AExponentialHeightFog::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 19769 ];

	AExponentialHeightFog_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.FailedConnect.GetString
// [0x00026002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Switch                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPRI1HUD                       ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI                     ( CPF_OptionalParm | CPF_Parm )
// class APlayerReplicationInfo*  RelatedPRI01                   ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 OptionalObject                 ( CPF_OptionalParm | CPF_Parm )

struct FString UFailedConnect::GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = (UFunction*) UObject::GObjObjects()->Data[ 19895 ];

	UFailedConnect_execGetString_Parms GetString_Parms;
	GetString_Parms.Switch = Switch;
	GetString_Parms.bPRI1HUD = bPRI1HUD;
	GetString_Parms.RelatedPRI = RelatedPRI;
	GetString_Parms.RelatedPRI01 = RelatedPRI01;
	GetString_Parms.OptionalObject = OptionalObject;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );

	return GetString_Parms.ReturnValue;
};

// Function Engine.FailedConnect.GetFailSwitch
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FailString                     ( CPF_Parm | CPF_NeedCtorLink )

int UFailedConnect::GetFailSwitch ( struct FString FailString )
{
	static UFunction* pFnGetFailSwitch = NULL;

	if ( ! pFnGetFailSwitch )
		pFnGetFailSwitch = (UFunction*) UObject::GObjObjects()->Data[ 19892 ];

	UFailedConnect_execGetFailSwitch_Parms GetFailSwitch_Parms;
	memcpy ( &GetFailSwitch_Parms.FailString, &FailString, 0xC );

	this->ProcessEvent ( pFnGetFailSwitch, &GetFailSwitch_Parms, NULL );

	return GetFailSwitch_Parms.ReturnValue;
};

// Function Engine.HeightFog.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AHeightFog::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 22906 ];

	AHeightFog_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.HeightFog.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   VarName                        ( CPF_Parm )

void AHeightFog::eventReplicatedEvent ( struct FName VarName )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = (UFunction*) UObject::GObjObjects()->Data[ 22904 ];

	AHeightFog_eventReplicatedEvent_Parms ReplicatedEvent_Parms;
	memcpy ( &ReplicatedEvent_Parms.VarName, &VarName, 0x8 );

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function Engine.HeightFog.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AHeightFog::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 22903 ];

	AHeightFog_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function Engine.IPoolable.OnPoolReset
// [0x00020000] 
// Parameters infos:

void UIPoolable::OnPoolReset ( )
{
	static UFunction* pFnOnPoolReset = NULL;

	if ( ! pFnOnPoolReset )
		pFnOnPoolReset = (UFunction*) UObject::GObjObjects()->Data[ 24028 ];

	UIPoolable_execOnPoolReset_Parms OnPoolReset_Parms;

	this->ProcessEvent ( pFnOnPoolReset, &OnPoolReset_Parms, NULL );
};

// Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PlaylistId                     ( CPF_Parm )
// int                            NumPlayers                     ( CPF_Parm )

bool UOnlineEventsInterface::UpdatePlaylistPopulation ( int PlaylistId, int NumPlayers )
{
	static UFunction* pFnUpdatePlaylistPopulation = NULL;

	if ( ! pFnUpdatePlaylistPopulation )
		pFnUpdatePlaylistPopulation = (UFunction*) UObject::GObjObjects()->Data[ 27449 ];

	UOnlineEventsInterface_execUpdatePlaylistPopulation_Parms UpdatePlaylistPopulation_Parms;
	UpdatePlaylistPopulation_Parms.PlaylistId = PlaylistId;
	UpdatePlaylistPopulation_Parms.NumPlayers = NumPlayers;

	this->ProcessEvent ( pFnUpdatePlaylistPopulation, &UpdatePlaylistPopulation_Parms, NULL );

	return UpdatePlaylistPopulation_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadGameplayEventsData
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// TArray< unsigned char >        Payload                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineEventsInterface::UploadGameplayEventsData ( struct FUniqueNetId UniqueId, TArray< unsigned char >* Payload )
{
	static UFunction* pFnUploadGameplayEventsData = NULL;

	if ( ! pFnUploadGameplayEventsData )
		pFnUploadGameplayEventsData = (UFunction*) UObject::GObjObjects()->Data[ 27444 ];

	UOnlineEventsInterface_execUploadGameplayEventsData_Parms UploadGameplayEventsData_Parms;
	memcpy ( &UploadGameplayEventsData_Parms.UniqueId, &UniqueId, 0x48 );

	this->ProcessEvent ( pFnUploadGameplayEventsData, &UploadGameplayEventsData_Parms, NULL );

	if ( Payload )
		memcpy ( Payload, &UploadGameplayEventsData_Parms.Payload, 0xC );

	return UploadGameplayEventsData_Parms.ReturnValue;
};

// Function Engine.OnlineEventsInterface.UploadPlayerData
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            UniqueId                       ( CPF_Parm )
// struct FString                 PlayerNick                     ( CPF_Parm | CPF_NeedCtorLink )
// class UOnlineProfileSettings*  ProfileSettings                ( CPF_Parm )
// class UOnlinePlayerStorage*    PlayerStorage                  ( CPF_Parm )

bool UOnlineEventsInterface::UploadPlayerData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage )
{
	static UFunction* pFnUploadPlayerData = NULL;

	if ( ! pFnUploadPlayerData )
		pFnUploadPlayerData = (UFunction*) UObject::GObjObjects()->Data[ 27438 ];

	UOnlineEventsInterface_execUploadPlayerData_Parms UploadPlayerData_Parms;
	memcpy ( &UploadPlayerData_Parms.UniqueId, &UniqueId, 0x48 );
	memcpy ( &UploadPlayerData_Parms.PlayerNick, &PlayerNick, 0xC );
	UploadPlayerData_Parms.ProfileSettings = ProfileSettings;
	UploadPlayerData_Parms.PlayerStorage = PlayerStorage;

	this->ProcessEvent ( pFnUploadPlayerData, &UploadPlayerData_Parms, NULL );

	return UploadPlayerData_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UOnlineRecentPlayersList::GetCurrentPlayersListCount ( )
{
	static UFunction* pFnGetCurrentPlayersListCount = NULL;

	if ( ! pFnGetCurrentPlayersListCount )
		pFnGetCurrentPlayersListCount = (UFunction*) UObject::GObjObjects()->Data[ 29059 ];

	UOnlineRecentPlayersList_execGetCurrentPlayersListCount_Parms GetCurrentPlayersListCount_Parms;

	this->ProcessEvent ( pFnGetCurrentPlayersListCount, &GetCurrentPlayersListCount_Parms, NULL );

	return GetCurrentPlayersListCount_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList
// [0x00020002] 
// Parameters infos:
// TArray< struct FCurrentPlayerMet > Players                        ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::SetCurrentPlayersList ( TArray< struct FCurrentPlayerMet > Players )
{
	static UFunction* pFnSetCurrentPlayersList = NULL;

	if ( ! pFnSetCurrentPlayersList )
		pFnSetCurrentPlayersList = (UFunction*) UObject::GObjObjects()->Data[ 29056 ];

	UOnlineRecentPlayersList_execSetCurrentPlayersList_Parms SetCurrentPlayersList_Parms;
	memcpy ( &SetCurrentPlayersList_Parms.Players, &Players, 0xC );

	this->ProcessEvent ( pFnSetCurrentPlayersList, &SetCurrentPlayersList_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowCurrentPlayersList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowCurrentPlayersList = NULL;

	if ( ! pFnShowCurrentPlayersList )
		pFnShowCurrentPlayersList = (UFunction*) UObject::GObjObjects()->Data[ 29048 ];

	UOnlineRecentPlayersList_execShowCurrentPlayersList_Parms ShowCurrentPlayersList_Parms;
	ShowCurrentPlayersList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowCurrentPlayersList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowCurrentPlayersList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowCurrentPlayersList, &ShowCurrentPlayersList_Parms, NULL );

	return ShowCurrentPlayersList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowLastPartyPlayerList = NULL;

	if ( ! pFnShowLastPartyPlayerList )
		pFnShowLastPartyPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 29042 ];

	UOnlineRecentPlayersList_execShowLastPartyPlayerList_Parms ShowLastPartyPlayerList_Parms;
	ShowLastPartyPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowLastPartyPlayerList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowLastPartyPlayerList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowLastPartyPlayerList, &ShowLastPartyPlayerList_Parms, NULL );

	return ShowLastPartyPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowRecentPartiesPlayerList = NULL;

	if ( ! pFnShowRecentPartiesPlayerList )
		pFnShowRecentPartiesPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 29034 ];

	UOnlineRecentPlayersList_execShowRecentPartiesPlayerList_Parms ShowRecentPartiesPlayerList_Parms;
	ShowRecentPartiesPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowRecentPartiesPlayerList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowRecentPartiesPlayerList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowRecentPartiesPlayerList, &ShowRecentPartiesPlayerList_Parms, NULL );

	return ShowRecentPartiesPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Description                    ( CPF_Parm | CPF_NeedCtorLink )

bool UOnlineRecentPlayersList::ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description )
{
	static UFunction* pFnShowRecentPlayerList = NULL;

	if ( ! pFnShowRecentPlayerList )
		pFnShowRecentPlayerList = (UFunction*) UObject::GObjObjects()->Data[ 29028 ];

	UOnlineRecentPlayersList_execShowRecentPlayerList_Parms ShowRecentPlayerList_Parms;
	ShowRecentPlayerList_Parms.LocalUserNum = LocalUserNum;
	memcpy ( &ShowRecentPlayerList_Parms.Title, &Title, 0xC );
	memcpy ( &ShowRecentPlayerList_Parms.Description, &Description, 0xC );

	this->ProcessEvent ( pFnShowRecentPlayerList, &ShowRecentPlayerList_Parms, NULL );

	return ShowRecentPlayerList_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.SetLastParty
// [0x00420002] 
// Parameters infos:
// struct FUniqueNetId            PartyLeader                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  PartyMembers                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::SetLastParty ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers )
{
	static UFunction* pFnSetLastParty = NULL;

	if ( ! pFnSetLastParty )
		pFnSetLastParty = (UFunction*) UObject::GObjObjects()->Data[ 29024 ];

	UOnlineRecentPlayersList_execSetLastParty_Parms SetLastParty_Parms;
	memcpy ( &SetLastParty_Parms.PartyLeader, &PartyLeader, 0x48 );

	this->ProcessEvent ( pFnSetLastParty, &SetLastParty_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &SetLastParty_Parms.PartyMembers, 0xC );
};

// Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UOnlineRecentPlayersList::GetTeamForCurrentPlayer ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetTeamForCurrentPlayer = NULL;

	if ( ! pFnGetTeamForCurrentPlayer )
		pFnGetTeamForCurrentPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29020 ];

	UOnlineRecentPlayersList_execGetTeamForCurrentPlayer_Parms GetTeamForCurrentPlayer_Parms;
	memcpy ( &GetTeamForCurrentPlayer_Parms.Player, &Player, 0x48 );

	this->ProcessEvent ( pFnGetTeamForCurrentPlayer, &GetTeamForCurrentPlayer_Parms, NULL );

	return GetTeamForCurrentPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FUniqueNetId            Player                         ( CPF_Parm )

int UOnlineRecentPlayersList::GetSkillForCurrentPlayer ( struct FUniqueNetId Player )
{
	static UFunction* pFnGetSkillForCurrentPlayer = NULL;

	if ( ! pFnGetSkillForCurrentPlayer )
		pFnGetSkillForCurrentPlayer = (UFunction*) UObject::GObjObjects()->Data[ 29016 ];

	UOnlineRecentPlayersList_execGetSkillForCurrentPlayer_Parms GetSkillForCurrentPlayer_Parms;
	memcpy ( &GetSkillForCurrentPlayer_Parms.Player, &Player, 0x48 );

	this->ProcessEvent ( pFnGetSkillForCurrentPlayer, &GetSkillForCurrentPlayer_Parms, NULL );

	return GetSkillForCurrentPlayer_Parms.ReturnValue;
};

// Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers
// [0x00420002] 
// Parameters infos:
// TArray< struct FUniqueNetId >  Players                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::GetPlayersFromCurrentPlayers ( TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnGetPlayersFromCurrentPlayers = NULL;

	if ( ! pFnGetPlayersFromCurrentPlayers )
		pFnGetPlayersFromCurrentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 29012 ];

	UOnlineRecentPlayersList_execGetPlayersFromCurrentPlayers_Parms GetPlayersFromCurrentPlayers_Parms;

	this->ProcessEvent ( pFnGetPlayersFromCurrentPlayers, &GetPlayersFromCurrentPlayers_Parms, NULL );

	if ( Players )
		memcpy ( Players, &GetPlayersFromCurrentPlayers_Parms.Players, 0xC );
};

// Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
// [0x00420002] 
// Parameters infos:
// TArray< struct FUniqueNetId >  Players                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::GetPlayersFromRecentParties ( TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnGetPlayersFromRecentParties = NULL;

	if ( ! pFnGetPlayersFromRecentParties )
		pFnGetPlayersFromRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 29006 ];

	UOnlineRecentPlayersList_execGetPlayersFromRecentParties_Parms GetPlayersFromRecentParties_Parms;

	this->ProcessEvent ( pFnGetPlayersFromRecentParties, &GetPlayersFromRecentParties_Parms, NULL );

	if ( Players )
		memcpy ( Players, &GetPlayersFromRecentParties_Parms.Players, 0xC );
};

// Function Engine.OnlineRecentPlayersList.ClearRecentParties
// [0x00020002] 
// Parameters infos:

void UOnlineRecentPlayersList::ClearRecentParties ( )
{
	static UFunction* pFnClearRecentParties = NULL;

	if ( ! pFnClearRecentParties )
		pFnClearRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 29005 ];

	UOnlineRecentPlayersList_execClearRecentParties_Parms ClearRecentParties_Parms;

	this->ProcessEvent ( pFnClearRecentParties, &ClearRecentParties_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties
// [0x00420002] 
// Parameters infos:
// struct FUniqueNetId            PartyLeader                    ( CPF_Parm )
// TArray< struct FUniqueNetId >  PartyMembers                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers )
{
	static UFunction* pFnAddPartyToRecentParties = NULL;

	if ( ! pFnAddPartyToRecentParties )
		pFnAddPartyToRecentParties = (UFunction*) UObject::GObjObjects()->Data[ 29000 ];

	UOnlineRecentPlayersList_execAddPartyToRecentParties_Parms AddPartyToRecentParties_Parms;
	memcpy ( &AddPartyToRecentParties_Parms.PartyLeader, &PartyLeader, 0x48 );

	this->ProcessEvent ( pFnAddPartyToRecentParties, &AddPartyToRecentParties_Parms, NULL );

	if ( PartyMembers )
		memcpy ( PartyMembers, &AddPartyToRecentParties_Parms.PartyMembers, 0xC );
};

// Function Engine.OnlineRecentPlayersList.ClearRecentPlayers
// [0x00020002] 
// Parameters infos:

void UOnlineRecentPlayersList::ClearRecentPlayers ( )
{
	static UFunction* pFnClearRecentPlayers = NULL;

	if ( ! pFnClearRecentPlayers )
		pFnClearRecentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 28999 ];

	UOnlineRecentPlayersList_execClearRecentPlayers_Parms ClearRecentPlayers_Parms;

	this->ProcessEvent ( pFnClearRecentPlayers, &ClearRecentPlayers_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
// [0x00824002] 
// Parameters infos:
// struct FUniqueNetId            NewPlayer                      ( CPF_Parm )
// TArray< unsigned char >        PlayerKey                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 PlayerName                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer, TArray< unsigned char > PlayerKey, struct FString PlayerName )
{
	static UFunction* pFnAddPlayerToRecentPlayers = NULL;

	if ( ! pFnAddPlayerToRecentPlayers )
		pFnAddPlayerToRecentPlayers = (UFunction*) UObject::GObjObjects()->Data[ 28989 ];

	UOnlineRecentPlayersList_execAddPlayerToRecentPlayers_Parms AddPlayerToRecentPlayers_Parms;
	memcpy ( &AddPlayerToRecentPlayers_Parms.NewPlayer, &NewPlayer, 0x48 );
	memcpy ( &AddPlayerToRecentPlayers_Parms.PlayerKey, &PlayerKey, 0xC );
	memcpy ( &AddPlayerToRecentPlayers_Parms.PlayerName, &PlayerName, 0xC );

	this->ProcessEvent ( pFnAddPlayerToRecentPlayers, &AddPlayerToRecentPlayers_Parms, NULL );
};

// Function Engine.OnlineRecentPlayersList.ReplacePlayerHistoryForPlayer
// [0x00820002] 
// Parameters infos:
// struct FUniqueNetId            NewPlayer                      ( CPF_Parm )
// TArray< unsigned char >        PlayerKey                      ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineRecentPlayersList::ReplacePlayerHistoryForPlayer ( struct FUniqueNetId NewPlayer, TArray< unsigned char > PlayerKey )
{
	static UFunction* pFnReplacePlayerHistoryForPlayer = NULL;

	if ( ! pFnReplacePlayerHistoryForPlayer )
		pFnReplacePlayerHistoryForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 28994 ];

	UOnlineRecentPlayersList_execReplacePlayerHistoryForPlayer_Parms ReplacePlayerHistoryForPlayer_Parms;
	memcpy ( &ReplacePlayerHistoryForPlayer_Parms.NewPlayer, &NewPlayer, 0x48 );
	memcpy ( &ReplacePlayerHistoryForPlayer_Parms.PlayerKey, &PlayerKey, 0xC );

	this->ProcessEvent ( pFnReplacePlayerHistoryForPlayer, &ReplacePlayerHistoryForPlayer_Parms, NULL );
};

// Function Engine.OnlineStatsWrite_TA.SetIntStat
// [0x00020002] 
// Parameters infos:
// int                            StatId                         ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UOnlineStatsWrite_TA::SetIntStat ( int StatId, int Value )
{
	static UFunction* pFnSetIntStat = NULL;

	if ( ! pFnSetIntStat )
		pFnSetIntStat = (UFunction*) UObject::GObjObjects()->Data[ 29285 ];

	UOnlineStatsWrite_TA_execSetIntStat_Parms SetIntStat_Parms;
	SetIntStat_Parms.StatId = StatId;
	SetIntStat_Parms.Value = Value;

	this->ProcessEvent ( pFnSetIntStat, &SetIntStat_Parms, NULL );
};

// Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  SearchingPlayerNum             ( CPF_Parm )
// class UOnlineGameSearch*       SearchSettings                 ( CPF_Parm )
// class UOnlineGameSettings*     GameSettings                   ( CPF_Parm )

bool UOnlineSuppliedUIInterface::ShowMatchmakingUI ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings )
{
	static UFunction* pFnShowMatchmakingUI = NULL;

	if ( ! pFnShowMatchmakingUI )
		pFnShowMatchmakingUI = (UFunction*) UObject::GObjObjects()->Data[ 29301 ];

	UOnlineSuppliedUIInterface_execShowMatchmakingUI_Parms ShowMatchmakingUI_Parms;
	ShowMatchmakingUI_Parms.SearchingPlayerNum = SearchingPlayerNum;
	ShowMatchmakingUI_Parms.SearchSettings = SearchSettings;
	ShowMatchmakingUI_Parms.GameSettings = GameSettings;

	this->ProcessEvent ( pFnShowMatchmakingUI, &ShowMatchmakingUI_Parms, NULL );

	return ShowMatchmakingUI_Parms.ReturnValue;
};

// Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSuppliedUIInterface::ClearShowOnlineStatsUICompleteDelegate ( struct FScriptDelegate ShowOnlineStatsUICompleteDelegate )
{
	static UFunction* pFnClearShowOnlineStatsUICompleteDelegate = NULL;

	if ( ! pFnClearShowOnlineStatsUICompleteDelegate )
		pFnClearShowOnlineStatsUICompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29299 ];

	UOnlineSuppliedUIInterface_execClearShowOnlineStatsUICompleteDelegate_Parms ClearShowOnlineStatsUICompleteDelegate_Parms;
	memcpy ( &ClearShowOnlineStatsUICompleteDelegate_Parms.ShowOnlineStatsUICompleteDelegate, &ShowOnlineStatsUICompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnClearShowOnlineStatsUICompleteDelegate, &ClearShowOnlineStatsUICompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate
// [0x00020000] 
// Parameters infos:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate ( CPF_Parm | CPF_NeedCtorLink )

void UOnlineSuppliedUIInterface::AddShowOnlineStatsUICompleteDelegate ( struct FScriptDelegate ShowOnlineStatsUICompleteDelegate )
{
	static UFunction* pFnAddShowOnlineStatsUICompleteDelegate = NULL;

	if ( ! pFnAddShowOnlineStatsUICompleteDelegate )
		pFnAddShowOnlineStatsUICompleteDelegate = (UFunction*) UObject::GObjObjects()->Data[ 29297 ];

	UOnlineSuppliedUIInterface_execAddShowOnlineStatsUICompleteDelegate_Parms AddShowOnlineStatsUICompleteDelegate_Parms;
	memcpy ( &AddShowOnlineStatsUICompleteDelegate_Parms.ShowOnlineStatsUICompleteDelegate, &ShowOnlineStatsUICompleteDelegate, 0x10 );

	this->ProcessEvent ( pFnAddShowOnlineStatsUICompleteDelegate, &AddShowOnlineStatsUICompleteDelegate_Parms, NULL );
};

// Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI
// [0x00420000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UOnlineStatsRead*        StatsRead                      ( CPF_Parm )
// TArray< struct FUniqueNetId >  Players                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UOnlineSuppliedUIInterface::ShowOnlineStatsUI ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players )
{
	static UFunction* pFnShowOnlineStatsUI = NULL;

	if ( ! pFnShowOnlineStatsUI )
		pFnShowOnlineStatsUI = (UFunction*) UObject::GObjObjects()->Data[ 29292 ];

	UOnlineSuppliedUIInterface_execShowOnlineStatsUI_Parms ShowOnlineStatsUI_Parms;
	ShowOnlineStatsUI_Parms.StatsRead = StatsRead;

	this->ProcessEvent ( pFnShowOnlineStatsUI, &ShowOnlineStatsUI_Parms, NULL );

	if ( Players )
		memcpy ( Players, &ShowOnlineStatsUI_Parms.Players, 0xC );

	return ShowOnlineStatsUI_Parms.ReturnValue;
};

// Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete
// [0x00120000] 
// Parameters infos:

void UOnlineSuppliedUIInterface::OnShowOnlineStatsUIComplete ( )
{
	static UFunction* pFnOnShowOnlineStatsUIComplete = NULL;

	if ( ! pFnOnShowOnlineStatsUIComplete )
		pFnOnShowOnlineStatsUIComplete = (UFunction*) UObject::GObjObjects()->Data[ 29291 ];

	UOnlineSuppliedUIInterface_execOnShowOnlineStatsUIComplete_Parms OnShowOnlineStatsUIComplete_Parms;

	this->ProcessEvent ( pFnOnShowOnlineStatsUIComplete, &OnShowOnlineStatsUIComplete_Parms, NULL );
};

// Function Engine.PathNode_Dynamic.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString APathNode_Dynamic::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = (UFunction*) UObject::GObjObjects()->Data[ 30702 ];

	APathNode_Dynamic_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );

	return GetDebugAbbrev_Parms.ReturnValue;
};

// Function Engine.ReverbVolumeToggleable.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void AReverbVolumeToggleable::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 32187 ];

	AReverbVolumeToggleable_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.SeqAct_MITV_Activate.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USeqAct_MITV_Activate::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 32642 ];

	USeqAct_MITV_Activate_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_MITV_Activate.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_MITV_Activate::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32640 ];

	USeqAct_MITV_Activate_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_SetMatInstVectorParam::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32785 ];

	USeqAct_SetMatInstVectorParam_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqAct_SetVector.Activated
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void USeqAct_SetVector::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 32817 ];

	USeqAct_SetVector_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqAct_UpdatePhysBonesFromAnim::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 32931 ];

	USeqAct_UpdatePhysBonesFromAnim_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.SeqEvent_LOS.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USeqEvent_LOS::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = (UFunction*) UObject::GObjObjects()->Data[ 33039 ];

	USeqEvent_LOS_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );

	return GetObjClassVersion_Parms.ReturnValue;
};

// Function Engine.Trigger_LOS.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ATrigger_LOS::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 35160 ];

	ATrigger_LOS_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function Engine.TriggeredPath.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ATriggeredPath::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 35186 ];

	ATriggeredPath_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ATriggeredPath::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 35182 ];

	ATriggeredPath_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function Engine.TriggeredPath.OnToggle
// [0x00020002] 
// Parameters infos:
// class USeqAct_Toggle*          inAction                       ( CPF_Parm )

void ATriggeredPath::OnToggle ( class USeqAct_Toggle* inAction )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 35180 ];

	ATriggeredPath_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function Engine.TriggerStreamingLevel.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ATriggerStreamingLevel::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 35199 ];

	ATriggerStreamingLevel_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnDeleteUserFileComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::OnDeleteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnDeleteUserFileComplete = NULL;

	if ( ! pFnOnDeleteUserFileComplete )
		pFnOnDeleteUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 36109 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execOnDeleteUserFileComplete_Parms OnDeleteUserFileComplete_Parms;
	OnDeleteUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnDeleteUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnDeleteUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnDeleteUserFileComplete, &OnDeleteUserFileComplete_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlob
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         InDeleteDataBlobCallback       ( CPF_Parm | CPF_NeedCtorLink )

bool UUserCloudFileCloudSaveSystemDataBlobStore::DeleteDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InDeleteDataBlobCallback )
{
	static UFunction* pFnDeleteDataBlob = NULL;

	if ( ! pFnDeleteDataBlob )
		pFnDeleteDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 36103 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execDeleteDataBlob_Parms DeleteDataBlob_Parms;
	memcpy ( &DeleteDataBlob_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &DeleteDataBlob_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &DeleteDataBlob_Parms.InDeleteDataBlobCallback, &InDeleteDataBlobCallback, 0x10 );

	this->ProcessEvent ( pFnDeleteDataBlob, &DeleteDataBlob_Parms, NULL );

	return DeleteDataBlob_Parms.ReturnValue;
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnWriteUserFileComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::OnWriteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnWriteUserFileComplete = NULL;

	if ( ! pFnOnWriteUserFileComplete )
		pFnOnWriteUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 36098 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execOnWriteUserFileComplete_Parms OnWriteUserFileComplete_Parms;
	OnWriteUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnWriteUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnWriteUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnWriteUserFileComplete, &OnWriteUserFileComplete_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlob
// [0x00420002] 
// Parameters infos:
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         InSetDataBlobCallback          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        DataBlob                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::SetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InSetDataBlobCallback, TArray< unsigned char >* DataBlob )
{
	static UFunction* pFnSetDataBlob = NULL;

	if ( ! pFnSetDataBlob )
		pFnSetDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 36090 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execSetDataBlob_Parms SetDataBlob_Parms;
	memcpy ( &SetDataBlob_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &SetDataBlob_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &SetDataBlob_Parms.InSetDataBlobCallback, &InSetDataBlobCallback, 0x10 );

	this->ProcessEvent ( pFnSetDataBlob, &SetDataBlob_Parms, NULL );

	if ( DataBlob )
		memcpy ( DataBlob, &SetDataBlob_Parms.DataBlob, 0xC );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnReadUserFileComplete
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 UserId                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Filename                       ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::OnReadUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename )
{
	static UFunction* pFnOnReadUserFileComplete = NULL;

	if ( ! pFnOnReadUserFileComplete )
		pFnOnReadUserFileComplete = (UFunction*) UObject::GObjObjects()->Data[ 36082 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execOnReadUserFileComplete_Parms OnReadUserFileComplete_Parms;
	OnReadUserFileComplete_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &OnReadUserFileComplete_Parms.UserId, &UserId, 0xC );
	memcpy ( &OnReadUserFileComplete_Parms.Filename, &Filename, 0xC );

	this->ProcessEvent ( pFnOnReadUserFileComplete, &OnReadUserFileComplete_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlob
// [0x00020002] 
// Parameters infos:
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         InGetDataBlobCallback          ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::GetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InGetDataBlobCallback )
{
	static UFunction* pFnGetDataBlob = NULL;

	if ( ! pFnGetDataBlob )
		pFnGetDataBlob = (UFunction*) UObject::GObjObjects()->Data[ 36074 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execGetDataBlob_Parms GetDataBlob_Parms;
	memcpy ( &GetDataBlob_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &GetDataBlob_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &GetDataBlob_Parms.InGetDataBlobCallback, &InGetDataBlobCallback, 0x10 );

	this->ProcessEvent ( pFnGetDataBlob, &GetDataBlob_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.Init
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UUserCloudFileInterface* InUserCloudFile                ( CPF_Parm )

void UUserCloudFileCloudSaveSystemDataBlobStore::Init ( class UUserCloudFileInterface* InUserCloudFile )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 36072 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execInit_Parms Init_Parms;
	Init_Parms.InUserCloudFile = InUserCloudFile;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlobCallbackDelegate
// [0x00140001] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSucessfull                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::DeleteDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error )
{
	static UFunction* pFnDeleteDataBlobCallbackDelegate = NULL;

	if ( ! pFnDeleteDataBlobCallbackDelegate )
		pFnDeleteDataBlobCallbackDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36049 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execDeleteDataBlobCallbackDelegate_Parms DeleteDataBlobCallbackDelegate_Parms;
	DeleteDataBlobCallbackDelegate_Parms.bWasSucessfull = bWasSucessfull;
	memcpy ( &DeleteDataBlobCallbackDelegate_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &DeleteDataBlobCallbackDelegate_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &DeleteDataBlobCallbackDelegate_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnDeleteDataBlobCallbackDelegate, &DeleteDataBlobCallbackDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlobCallbackDelegate
// [0x00120000] 
// Parameters infos:
// unsigned long                  bWasSucessfull                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::SetDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error )
{
	static UFunction* pFnSetDataBlobCallbackDelegate = NULL;

	if ( ! pFnSetDataBlobCallbackDelegate )
		pFnSetDataBlobCallbackDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36051 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execSetDataBlobCallbackDelegate_Parms SetDataBlobCallbackDelegate_Parms;
	SetDataBlobCallbackDelegate_Parms.bWasSucessfull = bWasSucessfull;
	memcpy ( &SetDataBlobCallbackDelegate_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &SetDataBlobCallbackDelegate_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &SetDataBlobCallbackDelegate_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnSetDataBlobCallbackDelegate, &SetDataBlobCallbackDelegate_Parms, NULL );
};

// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlobCallbackDelegate
// [0x00520000] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )
// struct FString                 StorageID                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 BlobName                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Error                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        DataBlob                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UUserCloudFileCloudSaveSystemDataBlobStore::GetDataBlobCallbackDelegate ( unsigned long bWasSuccessful, struct FString StorageID, struct FString BlobName, struct FString Error, TArray< unsigned char >* DataBlob )
{
	static UFunction* pFnGetDataBlobCallbackDelegate = NULL;

	if ( ! pFnGetDataBlobCallbackDelegate )
		pFnGetDataBlobCallbackDelegate = (UFunction*) UObject::GObjObjects()->Data[ 36053 ];

	UUserCloudFileCloudSaveSystemDataBlobStore_execGetDataBlobCallbackDelegate_Parms GetDataBlobCallbackDelegate_Parms;
	GetDataBlobCallbackDelegate_Parms.bWasSuccessful = bWasSuccessful;
	memcpy ( &GetDataBlobCallbackDelegate_Parms.StorageID, &StorageID, 0xC );
	memcpy ( &GetDataBlobCallbackDelegate_Parms.BlobName, &BlobName, 0xC );
	memcpy ( &GetDataBlobCallbackDelegate_Parms.Error, &Error, 0xC );

	this->ProcessEvent ( pFnGetDataBlobCallbackDelegate, &GetDataBlobCallbackDelegate_Parms, NULL );

	if ( DataBlob )
		memcpy ( DataBlob, &GetDataBlobCallbackDelegate_Parms.DataBlob, 0xC );
};

// Function Engine.WaterVolume.PlayExitSplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayExitSplash ( class AActor* Other )
{
	static UFunction* pFnPlayExitSplash = NULL;

	if ( ! pFnPlayExitSplash )
		pFnPlayExitSplash = (UFunction*) UObject::GObjObjects()->Data[ 36196 ];

	AWaterVolume_execPlayExitSplash_Parms PlayExitSplash_Parms;
	PlayExitSplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayExitSplash, &PlayExitSplash_Parms, NULL );
};

// Function Engine.WaterVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 36194 ];

	AWaterVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function Engine.WaterVolume.PlayEntrySplash
// [0x00020002] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void AWaterVolume::PlayEntrySplash ( class AActor* Other )
{
	static UFunction* pFnPlayEntrySplash = NULL;

	if ( ! pFnPlayEntrySplash )
		pFnPlayEntrySplash = (UFunction*) UObject::GObjObjects()->Data[ 36192 ];

	AWaterVolume_execPlayEntrySplash_Parms PlayEntrySplash_Parms;
	PlayEntrySplash_Parms.Other = Other;

	this->ProcessEvent ( pFnPlayEntrySplash, &PlayEntrySplash_Parms, NULL );
};

// Function Engine.WaterVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void AWaterVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 36187 ];

	AWaterVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif