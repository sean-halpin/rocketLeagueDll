/*
#############################################################################################
# RocketLeague (1.0.10897.0) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: TAGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_MaxAirControlSensitivity                           10.f
#define CONST_MaxSteeringSensitivity                             10.f
#define CONST_UnrealUnitsPerMeter                                100
#define CONST_TRADEHOLD_NONE                                     0
#define CONST_TRADEHOLD_ALL                                      -1
#define CONST_TRADEHOLD_P2P                                      -2
#define CONST_MaxFriendKeyLength                                 64
#define CONST_MeshRadius                                         15.0f
#define CONST_MeshWidth                                          15.0f
#define CONST_MAX_REPLICATED_VOTERS                              8
#define CONST_BoostLevel_Active                                  1.0f
#define CONST_BoostLevel_Activated                               0.0f
#define CONST_BoostLevel_Inactive                                -1.0f
#define CONST_PlayerCountIrrelevant                              "NO_COUNT"
#define CONST_MAX_NAMEPLATES                                     8
#define CONST_MaxLoadoutSets                                     50

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum TAGame._AITypes_TA.EAITraitValue
/*enum EAITraitValue
{
	AITraitValue_Low                                   = 0,
	AITraitValue_Medium                                = 1,
	AITraitValue_High                                  = 2,
	AITraitValue_MAX                                   = 3
};*/

// Enum TAGame._AITypes_TA.EBTStatus
/*enum EBTStatus
{
	BTStatus_Fail                                      = 0,
	BTStatus_Success                                   = 1,
	BTStatus_Running                                   = 2,
	BTStatus_MAX                                       = 3
};*/

// Enum TAGame._AITypes_TA.EAITeam
/*enum EAITeam
{
	AITeam_Self                                        = 0,
	AITeam_Enemy                                       = 1,
	AITeam_Any                                         = 2,
	AITeam_MAX                                         = 3
};*/

// Enum TAGame._Types_TA.EExperimentalMapStatus
/*enum EExperimentalMapStatus
{
	EMS_Default                                        = 0,
	EMS_OnlyExperimentalPlaylist                       = 1,
	EMS_Any                                            = 2,
	EMS_MAX                                            = 3
};*/

// Enum TAGame._Types_TA.EMirrorFieldType
/*enum EMirrorFieldType
{
	MFT_None                                           = 0,
	MFT_X                                              = 1,
	MFT_Y                                              = 2,
	MFT_XY                                             = 3,
	MFT_TeamIndex                                      = 4,
	MFT_MAX                                            = 5
};*/

// Enum TAGame._Types_TA.EUIMenuState
/*enum EUIMenuState
{
	UIMS_StartMenu                                     = 0,
	UIMS_MainMenu                                      = 1,
	UIMS_MAX                                           = 2
};*/

// Enum TAGame._Types_TA.EChatChannel
/*enum EChatChannel
{
	EChatChannel_Match                                 = 0,
	EChatChannel_Team                                  = 1,
	EChatChannel_Party                                 = 2,
	EChatChannel_Individual                            = 3,
	EChatChannel_MAX                                   = 4
};*/

// Enum TAGame._Types_TA.ESkinType
/*enum ESkinType
{
	EST_Default                                        = 0,
	EST_Animated                                       = 1,
	EST_AnimatedPrimaryOnly                            = 2,
	EST_MAX                                            = 3
};*/

// Enum TAGame._Types_TA.EKeySelection
/*enum EKeySelection
{
	KS_Oldest                                          = 0,
	KS_Newest                                          = 1,
	KS_ShowKeyPicker                                   = 2,
	KS_MAX                                             = 3
};*/

// Enum TAGame._Types_TA.EProductQuality
/*enum EProductQuality
{
	EPQ_Common                                         = 0,
	EPQ_Uncommon                                       = 1,
	EPQ_Rare                                           = 2,
	EPQ_VeryRare                                       = 3,
	EPQ_Import                                         = 4,
	EPQ_Exotic                                         = 5,
	EPQ_BlackMarket                                    = 6,
	EPQ_Premium                                        = 7,
	EPQ_Limited                                        = 8,
	EPQ_MAX                                            = 9
};*/

// Enum TAGame._Types_TA.EUnlockMethod
/*enum EUnlockMethod
{
	UnlockMethod_Default                               = 0,
	UnlockMethod_Drop                                  = 1,
	UnlockMethod_Special                               = 2,
	UnlockMethod_Reward                                = 3,
	UnlockMethod_DLC                                   = 4,
	UnlockMethod_Never                                 = 5,
	UnlockMethod_MAX                                   = 6
};*/

// Enum TAGame._Types_TA.EMTXCatalogCategory
/*enum EMTXCatalogCategory
{
	MTX_None                                           = 0,
	MTX_Keys                                           = 1,
	MTX_EventCrates                                    = 2,
	MTX_MAX                                            = 3
};*/

// Enum TAGame._Types_TA.ECurrency
/*enum ECurrency
{
	Currency_Soft                                      = 0,
	Currency_Hard                                      = 1,
	Currency_MAX                                       = 2
};*/

// Enum TAGame._Types_TA.ETrinaryBool
/*enum ETrinaryBool
{
	TrinaryBool_Irrelevant                             = 0,
	TrinaryBool_False                                  = 1,
	TrinaryBool_True                                   = 2,
	TrinaryBool_MAX                                    = 3
};*/

// Enum TAGame._Types_TA.EPaintFinishType
/*enum EPaintFinishType
{
	PaintFinishType_Standard                           = 0,
	PaintFinishType_Metallic                           = 1,
	PaintFinishType_MAX                                = 2
};*/

// Enum TAGame._Types_TA.EPaintColorVariant
/*enum EPaintColorVariant
{
	PaintColorVariant_Primary                          = 0,
	PaintColorVariant_LightAccent                      = 1,
	PaintColorVariant_DarkAccent                       = 2,
	PaintColorVariant_Emissive                         = 3,
	PaintColorVariant_MAX                              = 4
};*/

// Enum TAGame._Types_TA.EChallengeState
/*enum EChallengeState
{
	ChallengeState_None                                = 0,
	ChallengeState_Active                              = 1,
	ChallengeState_Unlocked                            = 2,
	ChallengeState_MAX                                 = 3
};*/

// Enum TAGame._Types_TA.ECustomMatchSettingsType
/*enum ECustomMatchSettingsType
{
	CustomMatchSettingsType_PrivateMatch               = 0,
	CustomMatchSettingsType_LocalMatch                 = 1,
	CustomMatchSettingsType_TourCreate                 = 2,
	CustomMatchSettingsType_MAX                        = 3
};*/

// Enum TAGame._Types_TA.EReportPlayerReason
/*enum EReportPlayerReason
{
	ReportPlayerReason_Harrassment                     = 0,
	ReportPlayerReason_UnsportsmanlikeConduct          = 1,
	ReportPlayerReason_Cheating                        = 2,
	ReportPlayerReason_MAX                             = 3
};*/

// Enum TAGame._Types_TA.EEditingType
/*enum EEditingType
{
	ET_FreeCam                                         = 0,
	ET_Ball                                            = 1,
	ET_Car                                             = 2,
	ET_MAX                                             = 3
};*/

// Enum TAGame._Types_TA.EEquippableProductSlot
/*enum EEquippableProductSlot
{
	EPS_Skin                                           = 0,
	EPS_Wheels                                         = 1,
	EPS_Boost                                          = 2,
	EPS_Hat                                            = 3,
	EPS_Antenna                                        = 4,
	EPS_MAX                                            = 5
};*/

// Enum TAGame._Types_TA.EEquipAction
/*enum EEquipAction
{
	EquipAction_Both                                   = 0,
	EquipAction_Team0                                  = 1,
	EquipAction_Team1                                  = 2,
	EquipAction_MAX                                    = 3
};*/

// Enum TAGame._Types_TA.EHistory
/*enum EHistory
{
	H_None                                             = 0,
	H_Add                                              = 1,
	H_Remove                                           = 2,
	H_MAX                                              = 3
};*/

// Enum TAGame._Types_TA.EHistoryType
/*enum EHistoryType
{
	HT_None                                            = 0,
	HT_Undo                                            = 1,
	HT_Redo                                            = 2,
	HT_MAX                                             = 3
};*/

// Enum TAGame._Types_TA.EPawnType
/*enum EPawnType
{
	PT_Player                                          = 0,
	PT_Spectator                                       = 1,
	PT_Editor                                          = 2,
	PT_MAX                                             = 3
};*/

// Enum TAGame._Types_TA.ETrainingSaveType
/*enum ETrainingSaveType
{
	ETS_MyTraining                                     = 0,
	ETS_Favorited                                      = 1,
	ETS_Downloaded                                     = 2,
	ETS_MAX                                            = 3
};*/

// Enum TAGame._Types_TA.ESaveGameResult
/*enum ESaveGameResult
{
	SaveGameResult_Pending                             = 0,
	SaveGameResult_Success                             = 1,
	SaveGameResult_UserNotSignedIn                     = 2,
	SaveGameResult_Error                               = 3,
	SaveGameResult_NoSpace                             = 4,
	SaveGameResult_MAX                                 = 5
};*/

// Enum TAGame._Types_TA.EProductThumbnailSize
/*enum EProductThumbnailSize
{
	PTS_Garage                                         = 0,
	PTS_Drop                                           = 1,
	PTS_Preview                                        = 2,
	PTS_MAX                                            = 3
};*/

// Enum TAGame._Types_TA.EPartyChatCommands
/*enum EPartyChatCommands
{
	EPartyChat_Message                                 = 0,
	EPartyChat_Clear                                   = 1,
	EPartyChat_Repopulated                             = 2,
	EPartyChat_MAX                                     = 3
};*/

// Enum TAGame._Types_TA.EProductAttachmentSocket
/*enum EProductAttachmentSocket
{
	PAS_Hat                                            = 0,
	PAS_Front                                          = 1,
	PAS_Antenna                                        = 2,
	PAS_UnderGlow                                      = 3,
	PAS_Root                                           = 4,
	PAS_MAX                                            = 5
};*/

// Enum TAGame._Types_TA.ETAStatType
/*enum ETAStatType
{
	StatType_Private                                   = 0,
	StatType_Unranked                                  = 1,
	StatType_Ranked                                    = 2,
	StatType_MAX                                       = 3
};*/

// Enum TAGame._Types_TA.EBallHitType
/*enum EBallHitType
{
	HitType_Item0                                      = 0,
	HitType_Item1                                      = 1,
	HitType_Item2                                      = 2,
	HitType_Car                                        = 3,
	HitType_MAX                                        = 4
};*/

// Enum TAGame._Types_TA.EVoteStatus
/*enum EVoteStatus
{
	VOTE_Pending                                       = 0,
	VOTE_Yes                                           = 1,
	VOTE_No                                            = 2,
	VOTE_MAX                                           = 3
};*/

// Enum TAGame._Types_TA.ETrainingTag
/*enum ETrainingTag
{
	Tag_Aerials                                        = 0,
	Tag_Bounces                                        = 1,
	Tag_Shots                                          = 2,
	Tag_Saves                                          = 3,
	Tag_Clears                                         = 4,
	Tag_Rebounds                                       = 5,
	Tag_Redirects                                      = 6,
	Tag_Freestyles                                     = 7,
	Tag_Dribbles                                       = 8,
	Tag_AirDribbles                                    = 9,
	Tag_Kickoffs                                       = 10,
	Tag_WallShots                                      = 11,
	Tag_LongShots                                      = 12,
	Tag_CloseShots                                     = 13,
	Tag_AngleShots                                     = 14,
	Tag_BackwardsShots                                 = 15,
	Tag_Offense                                        = 16,
	Tag_Defense                                        = 17,
	Tag_PinchShots                                     = 18,
	Tag_MAX                                            = 19
};*/

// Enum TAGame._Types_TA.EDifficulty
/*enum EDifficulty
{
	D_Easy                                             = 0,
	D_Medium                                           = 1,
	D_Hard                                             = 2,
	D_MAX                                              = 3
};*/

// Enum TAGame._Types_TA.ETrainingType
/*enum ETrainingType
{
	Training_None                                      = 0,
	Training_Aerial                                    = 1,
	Training_Goalie                                    = 2,
	Training_Striker                                   = 3,
	Training_MAX                                       = 4
};*/

// Enum TAGame._Types_TA.ECarImpactResult
/*enum ECarImpactResult
{
	CarImpactResult_None                               = 0,
	CarImpactResult_ZeroSpeed                          = 1,
	CarImpactResult_ZeroSpeedTowardsCar                = 2,
	CarImpactResult_OtherCarFaster                     = 3,
	CarImpactResult_Success                            = 4,
	CarImpactResult_SuccessAttachedBall                = 5,
	CarImpactResult_FailDemolishTargetNone             = 6,
	CarImpactResult_FailNotSupersonic                  = 7,
	CarImpactResult_FailInsufficientForwardSpeed       = 8,
	CarImpactResult_FailNotABumperHit                  = 9,
	CarImpactResult_FailSameTeam                       = 10,
	CarImpactResult_Bump                               = 11,
	CarImpactResult_MAX                                = 12
};*/

// Enum TAGame._Types_TA.EDemolishSpeed
/*enum EDemolishSpeed
{
	DemolishSpeed_Supersonic                           = 0,
	DemolishSpeed_None                                 = 1,
	DemolishSpeed_MAX                                  = 2
};*/

// Enum TAGame._Types_TA.EDemolishTarget
/*enum EDemolishTarget
{
	DemolishTarget_OtherTeam                           = 0,
	DemolishTarget_Everyone                            = 1,
	DemolishTarget_None                                = 2,
	DemolishTarget_MAX                                 = 3
};*/

// Enum TAGame._Types_TA.EProductFilterLogLevel
/*enum EProductFilterLogLevel
{
	ProductFilterLogLevel_Filtered                     = 0,
	ProductFilterLogLevel_UnFiltered                   = 1,
	ProductFilterLogLevel_MAX                          = 2
};*/

// Enum TAGame._Types_TA.EProductTradeRestriction
/*enum EProductTradeRestriction
{
	ProductTradeRestriction_P2P                        = 0,
	ProductTradeRestriction_TradeIn                    = 1,
	ProductTradeRestriction_MAX                        = 2
};*/

// Enum TAGame._Types_TA.EControllerSoundMode
/*enum EControllerSoundMode
{
	CSM_Multiplayer                                    = 0,
	CSM_On                                             = 1,
	CSM_Off                                            = 2,
	CSM_MAX                                            = 3
};*/

// Enum TAGame._Types_TA.EVoiceFilter
/*enum EVoiceFilter
{
	VoiceFilter_All                                    = 0,
	VoiceFilter_Preset                                 = 1,
	VoiceFilter_Team                                   = 2,
	VoiceFilter_Friends                                = 3,
	VoiceFilter_None                                   = 4,
	VoiceFilter_MAX                                    = 5
};*/

// Enum TAGame._Types_TA.EPaintTeam
/*enum EPaintTeam
{
	PaintTeam_Blue                                     = 0,
	PaintTeam_Orange                                   = 1,
	PaintTeam_None                                     = 2,
	PaintTeam_MAX                                      = 3
};*/

// Enum TAGame._Types_TA.ETeam
/*enum ETeam
{
	Team_Blue                                          = 0,
	Team_Orange                                        = 1,
	Team_MAX                                           = 2
};*/

// Enum TAGame._Types_TA.SearchStatusOwner
/*enum SearchStatusOwner
{
	StatusOwner_None                                   = 0,
	StatusOwner_Matchmaking                            = 1,
	StatusOwner_PrivateMatch                           = 2,
	StatusOwner_Lan                                    = 3,
	StatusOwner_Tournaments                            = 4,
	StatusOwner_MAX                                    = 5
};*/

// Enum TAGame._Types_TA.EMatchmakingViewTab
/*enum EMatchmakingViewTab
{
	MatchmakingViewTab_Unranked                        = 0,
	MatchmakingViewTab_Ranked                          = 1,
	MatchmakingViewTab_MAX                             = 2
};*/

// Enum TAGame._Types_TA.EWheelPosition
/*enum EWheelPosition
{
	WP_FrontLeft                                       = 0,
	WP_FrontRight                                      = 1,
	WP_BackLeft                                        = 2,
	WP_BackRight                                       = 3,
	WP_MAX                                             = 4
};*/

// Enum TAGame.AchievementManager_TA.EAchievementType
/*enum EAchievementType
{
	AT_Game                                            = 0,
	AT_EXP0                                            = 1,
	AT_DLC0                                            = 2,
	AT_DLC1                                            = 3,
	AT_DLC2                                            = 4,
	AT_XBO0                                            = 5,
	AT_DLC3                                            = 6,
	AT_DLC4                                            = 7,
	AT_DLC5                                            = 8,
	AT_DLC6                                            = 9,
	AT_MAX                                             = 10
};*/

// Enum TAGame.AchievementManager_TA.EAchievementGame
/*enum EAchievementGame
{
	AG_Virtuoso                                        = 0,
	AG_Stocked                                         = 1,
	AG_FarFarAway                                      = 2,
	AG_SuperVictorious                                 = 3,
	AG_Champion                                        = 4,
	AG_TheStreak                                       = 5,
	AG_HelensPride                                     = 6,
	AG_BattleCarCollector                              = 7,
	AG_DropsintheBucket                                = 8,
	AG_Rocketeer                                       = 9,
	AG_GreaseMonkey                                    = 10,
	AG_PitchVeteran                                    = 11,
	AG_RidersBlock                                     = 12,
	AG_BreakShot                                       = 13,
	AG_Turbocharger                                    = 14,
	AG_DrillSergeant                                   = 15,
	AG_MinutetoWinit                                   = 16,
	AG_SpeedDemon                                      = 17,
	AG_PickMeUp                                        = 18,
	AG_WallCrawler                                     = 19,
	AG_TeamPlayer                                      = 20,
	AG_SARPBCForever                                   = 21,
	AG_FeatherinYourRecap                              = 22,
	AG_Winner                                          = 23,
	AG_CleanSheet                                      = 24,
	AG_TripleThreat                                    = 25,
	AG_DoubleUp                                        = 26,
	AG_SinglesClub                                     = 27,
	AG_PerfectStart                                    = 28,
	AG_StillAShowOff                                   = 29,
	AG_KnowTheDrill                                    = 30,
	AG_Traveler                                        = 31,
	AG_Tinkerer                                        = 32,
	AG_FirstTimer                                      = 33,
	AG_BarrasBravas                                    = 34,
	AG_Friendly                                        = 35,
	AG_MAX                                             = 36
};*/

// Enum TAGame.AchievementManager_TA.EAchievementEXP0
/*enum EAchievementEXP0
{
	AEXP0_SkyHigh                                      = 0,
	AEXP0_AllFours                                     = 1,
	AEXP0_Gladiator                                    = 2,
	AEXP0_MAX                                          = 3
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC0
/*enum EAchievementDLC0
{
	ADLC0_WinningIsWinning                             = 0,
	ADLC0_AnInchAnd62Miles                             = 1,
	ADLC0_RideOrDie                                    = 2,
	ADLC0_DontLookBack                                 = 3,
	ADLC0_FamilyNotFriends                             = 4,
	ADLC0_DriftKing                                    = 5,
	ADLC0_MAX                                          = 6
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC1
/*enum EAchievementDLC1
{
	ADLC1_SurvivalOfTheFittest                         = 0,
	ADLC1_Heartbreaker                                 = 1,
	ADLC1_NaturalProgression                           = 2,
	ADLC1_Throwback                                    = 3,
	ADLC1_HotShotPartTwo                               = 4,
	ADLC1_MAX                                          = 5
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC2
/*enum EAchievementDLC2
{
	ADLC2_MyWorldIsFire                                = 0,
	ADLC2_Spectacular                                  = 1,
	ADLC2_Savage                                       = 2,
	ADLC2_Ruthless                                     = 3,
	ADLC2_PsychoMasterExploder                         = 4,
	ADLC2_MAX                                          = 5
};*/

// Enum TAGame.AchievementManager_TA.EAchievementXBO0
/*enum EAchievementXBO0
{
	AXBO0_NiceHat                                      = 0,
	AXBO0_MarcusVMasterChief                           = 1,
	AXBO0_MAX                                          = 2
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC6
/*enum EAchievementDLC6
{
	ADLC6_StormTrooper                                 = 0,
	ADLC6_GoodTimes                                    = 1,
	ADLC6_SwapMeet                                     = 2,
	ADLC6_TradeSecret                                  = 3,
	ADLC6_RankUp                                       = 4,
	ADLC6_ComingOnStrong                               = 5,
	ADLC6_MAX                                          = 6
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC5
/*enum EAchievementDLC5
{
	ADLC5_RegisteredVoter                              = 0,
	ADLC5_Metaverse                                    = 1,
	ADLC5_BraveTheElements                             = 2,
	ADLC5_DamageControl                                = 3,
	ADLC5_FullCourse                                   = 4,
	ADLC5_BuckminsterX10                               = 5,
	ADLC5_MAX                                          = 6
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC4
/*enum EAchievementDLC4
{
	ADLC4_GG                                           = 0,
	ADLC4_Trifecta                                     = 1,
	ADLC4_InfinitePower                                = 2,
	ADLC4_StoppedCold                                  = 3,
	ADLC4_SeaTurtle                                    = 4,
	ADLC4_GetUpMrBubbles                               = 5,
	ADLC4_RocketGenocider                              = 6,
	ADLC4_MAX                                          = 7
};*/

// Enum TAGame.AchievementManager_TA.EAchievementDLC3
/*enum EAchievementDLC3
{
	ADLC3_MadScientist                                 = 0,
	ADLC3_IcingTheCake                                 = 1,
	ADLC3_LeftWingRightWing                            = 2,
	ADLC3_FastBreak                                    = 3,
	ADLC3_BuzzerBeater                                 = 4,
	ADLC3_BuddingArtist                                = 5,
	ADLC3_OneBetter                                    = 6,
	ADLC3_Certifiable                                  = 7,
	ADLC3_MAX                                          = 8
};*/

// Enum TAGame.ActivityFeedManager_TA.EActivityFeedType
/*enum EActivityFeedType
{
	AF_UnlockedBody                                    = 0,
	AF_DrivenDistance                                  = 1,
	AF_ScoredGoal                                      = 2,
	AF_BlockedShot                                     = 3,
	AF_WonGame                                         = 4,
	AF_MVPScore                                        = 5,
	AF_DefeatedFriend                                  = 6,
	AF_CompletedRegularSeason                          = 7,
	AF_WonChampionship                                 = 8,
	AF_UnlockedItem                                    = 9,
	AF_UnlockedSweetTooth                              = 10,
	AF_MAX                                             = 11
};*/

// Enum TAGame.PitchTekDrawingComponent_TA.EPitchTekDecalType
/*enum EPitchTekDecalType
{
	PTDT_Ball                                          = 0,
	PTDT_Car                                           = 1,
	PTDT_MAX                                           = 2
};*/

// Enum TAGame.BTLock.ELockScope
/*enum ELockScope
{
	LockScope_Local                                    = 0,
	LockScope_Global                                   = 1,
	LockScope_MAX                                      = 2
};*/

// Enum TAGame.CameraState_ReplayAutoCam_TA.ECountDownFocus
/*enum ECountDownFocus
{
	CDF_None                                           = 0,
	CDF_Pan                                            = 1,
	CDF_Rotate                                         = 2,
	CDF_MAX                                            = 3
};*/

// Enum TAGame.GFxData_LocalPlayer_TA.ESplitScreenPosition
/*enum ESplitScreenPosition
{
	SSP_Center                                         = 0,
	SSP_Left                                           = 1,
	SSP_Right                                          = 2,
	SSP_Top                                            = 3,
	SSP_Bottom                                         = 4,
	SSP_TopLeft                                        = 5,
	SSP_TopRight                                       = 6,
	SSP_BottomLeft                                     = 7,
	SSP_BottomRight                                    = 8,
	SSP_MAX                                            = 9
};*/

// Enum TAGame.ProductAsset_Body_TA.EForceProductsBehavior
/*enum EForceProductsBehavior
{
	FPB_Licensed                                       = 0,
	FPB_LicensedAll                                    = 1,
	FPB_All                                            = 2,
	FPB_MAX                                            = 3
};*/

// Enum TAGame.GameEvent_Tutorial_TA.ERotationType
/*enum ERotationType
{
	Rot_Auto                                           = 0,
	Rot_AutoAim                                        = 1,
	Rot_AutoForward                                    = 2,
	Rot_AutoArch                                       = 3,
	Rot_World                                          = 4,
	Rot_MapCenter                                      = 5,
	Rot_MAX                                            = 6
};*/

// Enum TAGame.GFxData_OnlineMatchStatus_TA.SearchMessageType
/*enum SearchMessageType
{
	MessageType_Status                                 = 0,
	MessageType_Warning                                = 1,
	MessageType_MAX                                    = 2
};*/

// Enum TAGame.GFxData_Party_TA.EPsyNetPartyStatus
/*enum EPsyNetPartyStatus
{
	PsyNetParty_Disabled                               = 0,
	PsyNetParty_Connecting                             = 1,
	PsyNetParty_Connected                              = 2,
	PsyNetParty_Disconnected                           = 3,
	PsyNetParty_MAX                                    = 4
};*/

// Enum TAGame.GFxData_UserSetting_TA.EUserSettingType
/*enum EUserSettingType
{
	UserSettingType_List                               = 0,
	UserSettingType_Boolean                            = 1,
	UserSettingType_Scalar                             = 2,
	UserSettingType_MAX                                = 3
};*/

// Enum TAGame.GFxData_Training_TA.EV2TutorialType
/*enum EV2TutorialType
{
	V2T_Basic                                          = 0,
	V2T_BasicAlt                                       = 1,
	V2T_Advanced                                       = 2,
	V2T_AdvancedDriving                                = 3,
	V2T_AdvancedDoubleJump                             = 4,
	V2T_AdvancedAerials                                = 5,
	V2T_AdvancedSkills                                 = 6,
	V2T_BasicTeam                                      = 7,
	V2T_AdvancedTeam                                   = 8,
	V2T_MAX                                            = 9
};*/

// Enum TAGame.GFxEngine_TA.ESoundStatePriority
/*enum ESoundStatePriority
{
	SSP_None                                           = 0,
	SSP_Scoreboard                                     = 1,
	SSP_Replay                                         = 2,
	SSP_Pause                                          = 3,
	SSP_BeginRound                                     = 4,
	SSP_EndRound                                       = 5,
	SSP_WinnerMenu                                     = 6,
	SSP_MAX                                            = 7
};*/

// Enum TAGame.ProductAsset_Wheel_TA.EMeshMirrorMode
/*enum EMeshMirrorMode
{
	MeshMirrorMode_Mirror                              = 0,
	MeshMirrorMode_Rotate                              = 1,
	MeshMirrorMode_MAX                                 = 2
};*/

// Enum TAGame.Replay_TA.EReplayVersion
/*enum EReplayVersion
{
	ReplayVersion_Base                                 = 0,
	ReplayVersion_OnlineLoadout                        = 1,
	ReplayVersion_CameraSettings                       = 2,
	ReplayVersion_TeamLoadouts                         = 3,
	ReplayVersion_MatchType                            = 4,
	ReplayVersion_ActorName                            = 5,
	ReplayVersion_MutatorSeekFree                      = 6,
	ReplayVersion_MAX                                  = 7
};*/

// Enum TAGame.Replay_TA.EReplayState
/*enum EReplayState
{
	ReplayState_Idle                                   = 0,
	ReplayState_Recording                              = 1,
	ReplayState_Playing                                = 2,
	ReplayState_MAX                                    = 3
};*/

// Enum TAGame.SkelControlSingleBoneCopy_TA.ECopyAxis
/*enum ECopyAxis
{
	CopyAxis_X                                         = 0,
	CopyAxis_Y                                         = 1,
	CopyAxis_Z                                         = 2,
	CopyAxis_Pitch                                     = 3,
	CopyAxis_Yaw                                       = 4,
	CopyAxis_Roll                                      = 5,
	CopyAxis_MAX                                       = 6
};*/

// Enum TAGame.Tutorial_TA.ETutorialOutput
/*enum ETutorialOutput
{
	TutorialOutput_Ended                               = 0,
	TutorialOutput_Completed                           = 1,
	TutorialOutput_Failed                              = 2,
	TutorialOutput_ScreenFadedIn                       = 3,
	TutorialOutput_ScreenFadedOut                      = 4,
	TutorialOutput_AllMessagesDisplayed                = 5,
	TutorialOutput_Started                             = 6,
	TutorialOutput_Reset                               = 7,
	TutorialOutput_Skipped                             = 8,
	TutorialOutput_MAX                                 = 9
};*/

// Enum TAGame.Tutorial_TA.ETutorialStatus
/*enum ETutorialStatus
{
	TutorialStatus_None                                = 0,
	TutorialStatus_Failed                              = 1,
	TutorialStatus_Completed                           = 2,
	TutorialStatus_MAX                                 = 3
};*/

// Enum TAGame.Tutorial_TA.EPlayerDriveType
/*enum EPlayerDriveType
{
	PlayerDriveType_All                                = 0,
	PlayerDriveType_Player                             = 1,
	PlayerDriveType_Bot                                = 2,
	PlayerDriveType_MAX                                = 3
};*/

// Enum TAGame.BreakOutActor_Platform_TA.EBreakoutDamageState
/*enum EBreakoutDamageState
{
	DamageState_Start                                  = 0,
	DamageState_Damaged                                = 1,
	DamageState_Broken                                 = 2,
	DamageState_MAX                                    = 3
};*/

// Enum TAGame.SpecialPickup_BallFreeze_TA.BallFreezeState
/*enum BallFreezeState
{
	BallFreezeState_Freezing                           = 0,
	BallFreezeState_Frozen                             = 1,
	BallFreezeState_MAX                                = 2
};*/

// Enum TAGame.SpecialPickup_GrapplingHook_TA.ERopeState
/*enum ERopeState
{
	RopeState_Traveling                                = 0,
	RopeState_Attached                                 = 1,
	RopeState_MAX                                      = 2
};*/

// Enum TAGame.SpecialPickup_Spring_TA.ESpringState
/*enum ESpringState
{
	SpringState_Traveling                              = 0,
	SpringState_PostHit                                = 1,
	SpringState_MAX                                    = 2
};*/

// Enum TAGame.DistributionFloatSpeed_TA.ESpeedDistributionSpace
/*enum ESpeedDistributionSpace
{
	SDD_Forward                                        = 0,
	SDD_Side                                           = 1,
	SDD_Up                                             = 2,
	SDD_World                                          = 3,
	SDD_MAX                                            = 4
};*/

// Enum TAGame.ForceVolume_TA.EForceDirection
/*enum EForceDirection
{
	EFD_VolumeRotation                                 = 0,
	EFD_ActorVelocity                                  = 1,
	EFD_Custom                                         = 2,
	EFD_MAX                                            = 3
};*/

// Enum TAGame.InterpTrackSkelControlRotation_TA.ERotationAxis
/*enum ERotationAxis
{
	ROTAXIS_Yaw                                        = 0,
	ROTAXIS_Pitch                                      = 1,
	ROTAXIS_Roll                                       = 2,
	ROTAXIS_MAX                                        = 3
};*/

// Enum TAGame.ProductAttribute_LicenseGroup_TA.ELicenseGroup
/*enum ELicenseGroup
{
	LicenseGroup_Default                               = 0,
	LicenseGroup_Mario                                 = 1,
	LicenseGroup_Berry                                 = 2,
	LicenseGroup_MAX                                   = 3
};*/

// Enum TAGame.SaveDataVersions_TA.ESaveDataVersion
/*enum ESaveDataVersion
{
	SaveDataVersion_Initial                            = 0,
	SaveDataVersion_LightShafts                        = 1,
	SaveDataVersion_NewOnlineProductsRemoved           = 2,
	SaveDataVersion_Invisitek                          = 3,
	SaveDataVersion_SoundSettings                      = 4,
	SaveDataVersion_MAX                                = 5
};*/

// Enum TAGame.ProductAttribute_Trademark_TA.ETrademarkGlyph
/*enum ETrademarkGlyph
{
	TrademarkGlyph_TradeMark                           = 0,
	TrademarkGlyph_Registered                          = 1,
	TrademarkGlyph_Copyright                           = 2,
	TrademarkGlyph_MAX                                 = 3
};*/

// Enum TAGame.ProfileVersions_TA.EProfileVersion
/*enum EProfileVersion
{
	ProfileVersion_Initial                             = 0,
	ProfileVersion_LoadoutPlayerTitle                  = 1,
	ProfileVersion_SaveReplayInput                     = 2,
	ProfileVersion_SaveReplayInput2                    = 3,
	ProfileVersion_ChatRebind                          = 4,
	ProfileVersion_SaveReplayInput3                    = 5,
	ProfileVersion_DingoChatFix                        = 6,
	ProfileVersion_CustomMatchSettings                 = 7,
	ProfileVersion_ChatSettings                        = 8,
	ProfileVersion_TeamLoadouts                        = 9,
	ProfileVersion_CarColors                           = 10,
	ProfileVersion_ChatGamepadBindingConsoleOnly       = 11,
	ProfileVersion_PaintFinishInLoadouts               = 12,
	ProfileVersion_MusicPlaylistSelector               = 13,
	ProfileVersion_ResetAccountSelectNNX               = 14,
	ProfileVersion_MAX                                 = 15
};*/

// Enum TAGame.StatTitle_TA.EStatTrackingUnitType
/*enum EStatTrackingUnitType
{
	CountUnit                                          = 0,
	SpeedUnit                                          = 1,
	DistanceUnit                                       = 2,
	EStatTrackingUnitType_MAX                          = 3
};*/

// Enum TAGame.GameEditor_Ring_TA.EDetectionType
/*enum EDetectionType
{
	DT_Ball                                            = 0,
	DT_Player                                          = 1,
	DT_MAX                                             = 2
};*/

// Enum TAGame.GameEvent_TrainingEditor_TA.EPlayTestType
/*enum EPlayTestType
{
	PlayTest_LoopRound                                 = 0,
	PlayTest_IncrementRound                            = 1,
	PlayTest_IncrementRoundLoop                        = 2,
	PlayTest_MAX                                       = 3
};*/

// Enum TAGame.MenuSequencer_TA.ESequenceStatus
/*enum ESequenceStatus
{
	SS_Idle                                            = 0,
	SS_Entering                                        = 1,
	SS_Leaving                                         = 2,
	SS_Pending                                         = 3,
	SS_MAX                                             = 4
};*/

// Enum TAGame.CameraStateSelector_Priority_TA.EStatePriority
/*enum EStatePriority
{
	SP_Default                                         = 0,
	SP_OverrideAny                                     = 1,
	SP_OverrideLower                                   = 2,
	SP_InitialOnly                                     = 3,
	SP_MAX                                             = 4
};*/

// Enum TAGame.CameraState_DirectorMoving_TA.ECameraLoopType
/*enum ECameraLoopType
{
	CLT_StopAtEnd                                      = 0,
	CLT_PingPong                                       = 1,
	CLT_Loop                                           = 2,
	CLT_MAX                                            = 3
};*/

// Enum TAGame.GFxData_MapPrefs_TA.EMapPrefType
/*enum EMapPrefType
{
	MapPrefType_None                                   = 0,
	MapPrefType_Like                                   = 1,
	MapPrefType_Dislike                                = 2,
	MapPrefType_MAX                                    = 3
};*/

// Enum TAGame.GFxData_ProductFilter_TA.EProductFilterType
/*enum EProductFilterType
{
	ProductFilterType_TradeIn                          = 0,
	ProductFilterType_P2P                              = 1,
	ProductFilterType_MAX                              = 2
};*/

// Enum TAGame.SpecialEventConfig_TA.ESpecialEventState
/*enum ESpecialEventState
{
	SES_Inactive                                       = 0,
	SES_Active                                         = 1,
	SES_Redemption                                     = 2,
	SES_MAX                                            = 3
};*/

// Enum TAGame.GFxData_TrainingModeBrowser_TA.ETrainingModeSearchTypes
/*enum ETrainingModeSearchTypes
{
	TMST_AllPublic                                     = 0,
	TMST_FeaturedOnly                                  = 1,
	TMST_MAX                                           = 2
};*/

// Enum TAGame.GFxData_UnlockNotification_TA.EUnlockType
/*enum EUnlockType
{
	UnlockType_AchievementUnlocked                     = 0,
	UnlockType_ChallengeActive                         = 1,
	UnlockType_ChallengeUnlocked                       = 2,
	UnlockType_MAX                                     = 3
};*/

// Enum TAGame.StaticMeshRBActor_TA.EApplyForceTo
/*enum EApplyForceTo
{
	EAF_None                                           = 0,
	EAF_Any                                            = 1,
	EAF_CarOnly                                        = 2,
	EAF_BallOnly                                       = 3,
	EAF_MAX                                            = 4
};*/

// Enum TAGame.TMetricsShared_TA.EFinishType
/*enum EFinishType
{
	EFinishType_Completed                              = 0,
	EFinishType_Quit                                   = 1,
	EFinishType_Error                                  = 2,
	EFinishType_MAX                                    = 3
};*/

// Enum TAGame.TMetricsShared_TA.EMatchType
/*enum EMatchType
{
	EmatchType_Online                                  = 0,
	EMatchType_Private                                 = 1,
	EMatchType_Offline                                 = 2,
	EMatchType_MAX                                     = 3
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class TAGame._AITypes_TA
// 0x0000 (0x003C - 0x003C)
class U_AITypes_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3506 ];

		return pClassPointer;
	};

};

UClass* U_AITypes_TA::pClassPointer = NULL;

// Class TAGame._Types_TA
// 0x0030 (0x006C - 0x003C)
class U_Types_TA : public UObject
{
public:
	struct FScriptDelegate                             __AssetLoadedDelegate__Delegate;                  		// 0x003C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __ProductThumbnailRenderedDelegate__Delegate;     		// 0x004C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __MapImageLoadedDelegate__Delegate;               		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3508 ];

		return pClassPointer;
	};

	struct FLoadoutTeamPaint GetLoadoutPaint ( struct FLoadoutData InLoadoutData );
	int GetRandomColorID ( class UCarColorSet_TA* Set );
	void InitColorSet ( class UCarColorSet_TA* Set, TArray< struct FGFxTeamColor >* OutColors );
	struct FString ProductQualityToString ( unsigned char Quality );
	bool TeamPaintsAreDifferent ( struct FLoadoutData* A, struct FLoadoutData* B );
	bool OnlineProductsAreDifferent ( );
	bool ProductsAreDifferent ( TArray< int >* A, TArray< int >* B );
	bool LoadoutsAreDifferent ( struct FLoadoutData* A, struct FLoadoutData* B );
	float UpdateInputValue ( struct FInputRate Rate, float DesiredValue, float OldValue, float DeltaTime );
	struct FClientLoadoutData ConvertToClientLoadout ( struct FLoadoutData* FromData );
	void MapImageLoadedDelegate ( struct FMapImageLoadResult Result );
	void ProductThumbnailRenderedDelegate ( struct FProductThumbnailResult Result );
	void AssetLoadedDelegate ( struct FAssetLoadResult Result );
	struct FRandomWeight PickWeightedRandom ( TArray< struct FRandomWeight > Arr, int* Index );
	bool VehicleInputHasChangedForKick ( struct FVehicleInputs* NewInput, struct FVehicleInputs* OldInput );
};

UClass* U_Types_TA::pClassPointer = NULL;

// Class TAGame.AIController_TA
// 0x01C8 (0x0560 - 0x0398)
class AAIController_TA : public AAIController
{
public:
	class ACar_TA*                                     Car;                                              		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AVehicle_TA*                                 Vehicle;                                          		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBTComponent*                                BT;                                               		// 0x03A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBTProxyType*                                SelfProxyType;                                    		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                NoneProxyType;                                    		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                DebugProxyType;                                   		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                TeamCarsProxyType;                                		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                EnemyCarsProxyType;                               		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                OtherCarsProxyType;                               		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                BoostPillsProxyType;                              		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                SelectedProxyType;                                		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   SelfTarget;                                       		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   NoneTarget;                                       		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   IteratorTarget;                                   		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   TeamCarsTarget;                                   		// 0x03D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   SelectedTarget;                                   		// 0x03D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   ContextTarget;                                    		// 0x03D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBTNode*                                     DebugBTNode;                                      		// 0x03DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTLockCollection*                           Locks;                                            		// 0x03E0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FSkillRange                                 SkillSteerError;                                  		// 0x03E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkillRange                                 SkillSteerSpeed;                                  		// 0x03F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSkillRange                                 SkillThrottleSpeed;                               		// 0x03FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AAIManager_TA*                               AIManager;                                        		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FNamedEvent >                       QueuedEvents;                                     		// 0x0410 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVehicleInputs                              Input;                                            		// 0x041C (0x0020) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ForwardDir;                                       		// 0x043C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ForwardRotation;                                  		// 0x0448 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     GroundNormal;                                     		// 0x0454 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCachedProxyData >                  CachedProxyDatas;                                 		// 0x0460 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCachedTargetData >                 CachedTargetDatas;                                		// 0x046C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 TargetFilterMap;                                  		// 0x0478 (0x003C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< class UBTNode* >                           CachedTargetFilters;                              		// 0x04B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     DebugDriveDestination;                            		// 0x04C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FCachedObstaclesData                        CachedObstacles;                                  		// 0x04CC (0x0024) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FAITraits                                   Traits;                                           		// 0x04F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACar_TA* >                           TeamCars;                                         		// 0x04F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACar_TA* >                           EnemyCars;                                        		// 0x0504 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACar_TA* >                           OtherCars;                                        		// 0x0510 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bForceUpdateConditions : 1;                       		// 0x051C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCanUseBoost : 1;                                 		// 0x051C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBeingReplaced : 1;                               		// 0x051C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UAIRole_TA*                                  TestRole;                                         		// 0x0520 (0x0004) [0x0000000000000000]              
	class UGameShare_TA*                               GameShare;                                        		// 0x0524 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      SelectedActor;                                    		// 0x0528 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              FieldScalar;                                      		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventNamedEvent__Delegate;                      		// 0x0530 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0534 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSkillChanged__Delegate;                    		// 0x0540 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0544 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTraitsChanged__Delegate;                   		// 0x0550 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0554 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3510 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void SetSelectedActor ( class AActor* NewActor );
	void AllTargets ( class UBTTarget* Target, struct FBTProxyData* OutData );
	bool GetObstacleInRadius ( struct FVector Destination, float Radius, struct FVector* HitLocation );
	bool GetObstacle ( struct FVector Destination, struct FVector* HitLocation );
	bool eventGetProxyDataInternal ( class UBTProxyType* Type, int Index, struct FBTProxyData* OutData );
	bool GetIndexedProxyData ( class UBTProxyType* Type, int Index, struct FBTProxyData* OutData );
	bool GetProxyData ( class UBTProxyType* Type, struct FBTProxyData* OutData );
	bool GetIndexedTargetData ( class UBTTarget* Target, int Index, struct FBTProxyData* OutData );
	bool GetTargetData ( class UBTTarget* Target, struct FBTProxyData* OutData );
	struct FBTProxyData eventCreateVehicleProxyData ( class AVehicle_TA* InVehicle );
	struct FBTProxyData eventCreateProxyData ( class AActor* A, float Radius );
	float GetDriveTime ( float Distance );
	float GetDriveDistance ( struct FBTProxyData Proxy );
	struct FVector FlattenOffset ( struct FVector Offset, float* Height );
	struct FVector FlattenDestination ( struct FVector Destination );
	struct FBTProxyData FlattenPhysics ( struct FBTProxyData* ProxyData );
	float GetClosestTime2D ( float MaxTime, struct FBTProxyData* A, struct FBTProxyData* B );
	bool WillImpact2D ( struct FBTProxyData* A, struct FBTProxyData* B, float* CollideTime );
	void AdvancePhysics ( float Time, struct FBTProxyData* PhysicsData );
	void PredictPhysics ( float Time, float GroundZ, struct FBTProxyData* PhysicsData );
	void PredictLanding ( float GroundZ, struct FBTProxyData* Data, float* Time );
	struct FVector AdvanceLocation ( float Time, struct FVector* Loc, struct FVector* Vel, struct FVector* Accel );
	void DebugDriveTo ( struct FVector Destination );
	void DoNothing ( );
	void AbortBT ( );
	void eventOnNamedEvent ( struct FName EventName, class AActor* Sender );
	void eventDestroyed ( );
	void OnCarSetup ( class ACar_TA* InCar );
	void SetCar ( );
	void UnPossess ( );
	void Possess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void SetSkill ( float NewSkill );
	void ReInitBT ( );
	void SetTraits ( struct FAITraits InTraits );
	void HandleOtherCarDestroyed ( class APawn_X* InCar );
	void HandleOtherCarDemolished ( class ACar_TA* Victim, struct FDemolishData Data );
	void HandleOtherCarTeamChanged ( class ACar_TA* InCar );
	void HandleCarSpawned ( class AGameEvent_TA* InGameEvent, class ACar_TA* InCar );
	void Init ( class AGameEvent_TA* InGameEvent );
	void eventPreBeginPlay ( );
	void EventTraitsChanged ( class AAIController_TA* AI );
	void EventSkillChanged ( class AAIController_TA* AI );
	void EventNamedEvent ( class AAIController_TA* AI, struct FName EventName, class AActor* Sender );
};

UClass* AAIController_TA::pClassPointer = NULL;

// Class TAGame.AIController_Soccar_TA
// 0x0068 (0x05C8 - 0x0560)
class AAIController_Soccar_TA : public AAIController_TA
{
public:
	class UBTProxyType*                                BallProxyType;                                    		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                BallLandingProxyType;                             		// 0x0564 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                BallTeamGoalLineProxyType;                        		// 0x0568 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                BallEnemyGoalLineProxyType;                       		// 0x056C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                BallProjectedProxyType;                           		// 0x0570 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                TeamGoalProxyType;                                		// 0x0574 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                EnemyGoalProxyType;                               		// 0x0578 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTProxyType*                                MidFieldProxyType;                                		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   BallTarget;                                       		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   TeamGoalTarget;                                   		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   EnemyGoalTarget;                                  		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABall_TA*                                    Ball;                                             		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAICachedGoalInfo                           TeamGoalInfo;                                     		// 0x0594 (0x0010) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	struct FAICachedGoalInfo                           EnemyGoalInfo;                                    		// 0x05A4 (0x0010) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	float                                              LastBallHitTime;                                  		// 0x05B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventBallChanged__Delegate;                     		// 0x05B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x05BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3512 ];

		return pClassPointer;
	};

	bool eventGetProxyDataInternal ( class UBTProxyType* Type, int Index, struct FBTProxyData* OutData );
	void GetGoalProxy ( class UBTProxyType* Type, struct FAICachedGoalInfo GoalInfo, struct FBTProxyData* OutData );
	void GetBallProxy ( struct FBTProxyData* OutData );
	void SetBall ( class ABall_TA* InBall );
	void HandleNewPickup ( class ACar_TA* InCar, class ASpecialPickup_TA* NewPickup );
	void HandleHitBall ( class ACar_TA* InCar, class ABall_TA* HitBall );
	void OnCarSetup ( class ACar_TA* InCar );
	void UpdateBall ( );
	void HandleActiveRoundChanged ( class AGameEvent_Soccar_TA* G );
	void HandleBallsChanged ( class AGameEvent_Soccar_TA* G, class ABall_TA* B );
	struct FAICachedGoalInfo GetCachedGoalInfo ( int TeamNum );
	void Init ( class AGameEvent_TA* InGameEvent );
	void EventBallChanged ( class AAIController_Soccar_TA* SoccarAI );
};

UClass* AAIController_Soccar_TA::pClassPointer = NULL;

// Class TAGame.AIManager_TA
// 0x0028 (0x0224 - 0x01FC)
class AAIManager_TA : public AActor
{
public:
	unsigned long                                      bFlushAILogEachLine : 1;                          		// 0x01FC (0x0004) [0x0000000000004003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      bOutputLogToWindow : 1;                           		// 0x01FC (0x0004) [0x0000000000004003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_Config )
	unsigned long                                      bPauseForDirtyTrees : 1;                          		// 0x01FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class UBTLockCollection*                           Locks;                                            		// 0x0200 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AAIController_TA* >                  Bots;                                             		// 0x0208 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCachedNavMeshLocation >            CachedNavMeshLocations;                           		// 0x0214 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AFileLog*                                    AILogFile;                                        		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3514 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void RemoveBot ( class AAIController_TA* Bot );
	void AddBot ( class AAIController_TA* Bot );
	void Init ( class AGameEvent_TA* InGameEvent );
	void eventAILog ( class UObject* Sender, struct FString Message, unsigned long bVerbose );
};

UClass* AAIManager_TA::pClassPointer = NULL;

// Class TAGame.AnimNodeBlend_TA
// 0x000F (0x0100 - 0x00F1)
class UAnimNodeBlend_TA : public UAnimNodeBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Position;                                         		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredPosition;                                  		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3516 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlend_TA::pClassPointer = NULL;

// Class TAGame.AnimNodeBlendBoost_TA
// 0x0004 (0x0108 - 0x0104)
class UAnimNodeBlendBoost_TA : public UAnimNodeBlend
{
public:
	float                                              BlendTime;                                        		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3518 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendBoost_TA::pClassPointer = NULL;

// Class TAGame.AnimNodeBlendSpeed_TA
// 0x0008 (0x0144 - 0x013C)
class UAnimNodeBlendSpeed_TA : public UAnimNodeAimOffset
{
public:
	float                                              BlendRate;                                        		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3520 ];

		return pClassPointer;
	};

};

UClass* UAnimNodeBlendSpeed_TA::pClassPointer = NULL;

// Class TAGame.AssetProfiler_TA
// 0x0080 (0x027C - 0x01FC)
class AAssetProfiler_TA : public AActor
{
public:
	float                                              TimePerAsset;                                     		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBetweenAssets;                                		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UProductSlot_TA* >                   Slots;                                            		// 0x0204 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRenderProfile                              CurrentProfile;                                   		// 0x0210 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	struct FRenderProfile                              NoneAssetProfile;                                 		// 0x0234 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAssetProfile >                     AssetProfiles;                                    		// 0x0258 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentProductID;                                 		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_TA*                            CurrentProduct;                                   		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductDatabase_TA*                         ProductsDB;                                       		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ACarPreviewActor_TA* >               Cars;                                             		// 0x0270 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3522 ];

		return pClassPointer;
	};

	void RecordAssetFrameTimesToCSV ( );
	void Finish ( );
	void StopRecording ( );
	void StartRecording ( );
	void StartNextAsset ( );
	void StopRecordingNoneAsset ( );
	void StartRecordingNoneAsset ( );
	void StartProfiling ( );
	void EquipProduct ( class UProductAsset_TA* Asset );
	class UProductAsset_TA* EquipProductID ( int ProductID );
	bool ShouldProfileProduct ( class UProductAsset_TA* Product );
	void PrintAsset ( struct FString AssetName, float AssetTime );
	void UpdateProfileTimes ( struct FRenderProfile* Profile );
	void GatherCars ( );
	void DisableVSync ( );
	void SetupPlayers ( );
	void eventPostBeginPlay ( );
};

UClass* AAssetProfiler_TA::pClassPointer = NULL;

// Class TAGame.AttachmentBehavior_TA
// 0x000C (0x0048 - 0x003C)
class UAttachmentBehavior_TA : public UObject
{
public:
	class UProductAsset_TA*                            Asset;                                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UActorComponent*                             Component;                                        		// 0x0040 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bPreview : 1;                                     		// 0x0044 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3524 ];

		return pClassPointer;
	};

	class UCarMeshComponent_TA* GetMesh ( );
	void SetPreviewing ( unsigned long bPreviewing );
	void OnInit ( );
	void Init ( class UProductAsset_TA* InAsset, class UActorComponent* InComponent );
};

UClass* UAttachmentBehavior_TA::pClassPointer = NULL;

// Class TAGame.RimSpinner_TA
// 0x0030 (0x0078 - 0x0048)
class URimSpinner_TA : public UAttachmentBehavior_TA
{
public:
	float                                              AccelRate;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecelRate;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneControlName;                                  		// 0x0054 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinScale;                                        		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WheelIndex;                                       		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSpeed;                                     		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentRotation;                                  		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      SpinBoneController;                               		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      WheelBoneController;                              		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWheel_TA*                                   Wheel;                                            		// 0x0074 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3526 ];

		return pClassPointer;
	};

	void HandleAttached ( class UCarMeshComponent_TA* Mesh );
	void OnInit ( );
};

UClass* URimSpinner_TA::pClassPointer = NULL;

// Class TAGame.PlayerControllerBase_TA
// 0x003C (0x0678 - 0x063C)
class APlayerControllerBase_TA : public APlayerController_X
{
public:
	float                                              SpectatorCameraAccel;                             		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpectatorVelXY;                                   		// 0x0640 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectatorVelZ;                                    		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPostProcessManager_TA*                      PostProcessManagerArchetype;                      		// 0x0650 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessManager_TA*                      PostProcessManager;                               		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpectatorPitchDir;                                		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SwivelPitchDir;                                   		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASpectatorVolume_TA*                         SpectatorVolume;                                  		// 0x0660 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerBanner_TA*                            PlayerBanner;                                     		// 0x0664 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventLoadingUnfairMatch__Delegate;              		// 0x0668 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x066C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3528 ];

		return pClassPointer;
	};

	struct FVector UpdateSpectatorLocation ( struct FVector CurrentLocation, float DeltaTime, unsigned long bAlwaysClamp );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	bool FindSpectatorVolumeLocation ( struct FVector CurrentLocation, struct FVector NextLocation, struct FVector* NewLocation );
	struct FVector ClampSpectatorLocation ( struct FVector NewLocation );
	void SetWorldSelectionUpdate ( unsigned long bAllowUpdate );
	void SetWorldSelectionAllowed ( unsigned long bAllowSelection );
	void SetPlayerInput ( class UClass* NewInputClass );
	void StartLanMatch ( struct FCustomMatchSettings* Settings );
	struct FString BuildMatchOptionsLan ( struct FCustomMatchSettings* Settings, TArray< struct FString >* ArrayInitializer_1FED97884D4A55F6D69DCFB86AC2B2B0 );
	void StartSplitscreenMatch ( struct FCustomMatchSettings* Settings, TArray< struct FString >* ArrayInitializer_52CD63F6468524E3BDDE58992F4AD89C );
	void StartMatch ( struct FName PlaylistName, struct FString URL );
	struct FString BuildMatchOptions ( class UGameSettingPlaylist_X* Playlist, TArray< struct FString > Options, struct FCustomMatchSettings* Settings, struct FString* ReduceLocal_4515250C49311C7D280EB09ECA3117E2 );
	struct FString JoinOption ( struct FString FullString, struct FString Value );
	struct FName GetValidMapName ( struct FName InName, int GameMode );
	void ClientRemoveSSPlayer ( struct FString Reason, struct FString Title );
	void OnGameInviteAccepted ( struct FString ErrorString, struct FOnlineGameSearchResult* InviteResult );
	void UpdateSpectatorViewRotation ( float DeltaTime );
	struct FRotator GetSpectatorViewRotationDeltaRotation ( float DeltaTime );
	bool PartyLobbyMessage_TA ( struct FUniqueNetId InSenderId, struct FString PlayerName, struct FString Message, unsigned long bIsLocalPlayer, unsigned char PartyChatCommand );
	void Say_TA ( struct FString Message, unsigned char ChatChannel, struct FUniqueNetId Recipient, unsigned long bPreset );
	void ServerSay_TA ( struct FString Message, unsigned char ChatChannel, unsigned long bPreset );
	void RepopulateChatHistory ( );
	bool InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings );
	bool ShouldEnableForceFeedback ( );
	class USaveData_TA* GetSaveData ( );
	class UProfile_TA* GetProfile ( );
	class ULocalPlayer_TA* GetLocalPlayer ( );
	void InitProfileSettings ( unsigned long bJustReceivedPlayer );
	void eventDestroyed ( );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	void EventLoadingUnfairMatch ( class APlayerControllerBase_TA* PlayerControllerBase );
};

UClass* APlayerControllerBase_TA::pClassPointer = NULL;

// Class TAGame.PlayerController_TA
// 0x01F8 (0x0870 - 0x0678)
class APlayerController_TA : public APlayerControllerBase_TA
{
public:
	struct FClientData                                 Client;                                           		// 0x0678 (0x002C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FClientStatsData                            ClientStats;                                      		// 0x06A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     Car;                                              		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     PRI;                                              		// 0x06B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVehicleInputs                              VehicleInput;                                     		// 0x06B8 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bReceivedServerShutdownMessage : 1;               		// 0x06D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPendingIdleKick : 1;                             		// 0x06D8 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUseDebugInputs : 1;                              		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bJumpPressed : 1;                                 		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBoostPressed : 1;                                		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHandbrakePressed : 1;                            		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasPitchedBack : 1;                              		// 0x06D8 (0x0004) [0x0000000000000000] [0x00000040] 
	struct FString                                     LoginURL;                                         		// 0x06DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      VoiceFilter;                                      		// 0x06E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ChatFilter;                                       		// 0x06E9 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FChatSpamData                               ChatSpam;                                         		// 0x06EC (0x0018) [0x0000000000000001]              ( CPF_Edit )
	class ULightBarComponent_TA*                       LightBar;                                         		// 0x0704 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UGameMusicComponent_TA*                      MusicComponent;                                   		// 0x0708 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UListenerLocationComponent_TA*               ListenerLocationComponent;                        		// 0x070C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioPriorityComponent_TA*                  AudioPriorityComponent;                           		// 0x0710 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APRI_TA*                                     FollowTarget;                                     		// 0x0714 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACamera*                                     SpectatorCameraArchetype;                         		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AHUD*                                        SpectatorHUDArchetype;                            		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      SpectatorInputClass;                              		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACamera*                                     EditorCameraArchetype;                            		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AHUD*                                        EditorHUDArchetype;                               		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      EditorInputClass;                                 		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInterface_GameEditor_TA*                    MoveActor;                                        		// 0x0734 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0738 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FVector                                     MoveActorGrabOffset;                              		// 0x073C (0x000C) [0x0000000000000000]              
	float                                              MoveActorGrabIncrement;                           		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              MinMoveActorGrabDistance;                         		// 0x074C (0x0004) [0x0000000000000000]              
	float                                              MouseIncrementSpeed;                              		// 0x0750 (0x0004) [0x0000000000000000]              
	float                                              BallVelocityIncrementAmount;                      		// 0x0754 (0x0004) [0x0000000000000000]              
	int                                                BallVelocityIncrementFireCount;                   		// 0x0758 (0x0004) [0x0000000000000000]              
	float                                              BallVelocityIncrementFireCountMax;                		// 0x075C (0x0004) [0x0000000000000000]              
	float                                              BallVelocityIncrementSpeedDefault;                		// 0x0760 (0x0004) [0x0000000000000000]              
	float                                              BallVelocityIncrementSpeedMax;                    		// 0x0764 (0x0004) [0x0000000000000000]              
	float                                              CrosshairTraceDistance;                           		// 0x0768 (0x0004) [0x0000000000000000]              
	class AActor*                                      TracedCrosshairActor;                             		// 0x076C (0x0004) [0x0000000000000000]              
	TArray< struct FCrosshairExtentInfo >              CrosshairTraceExtents;                            		// 0x0770 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterface_GameEditor_TA*                    RotatedActor;                                     		// 0x077C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0780 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FVector                                     RotateActorCameraLocationOffset;                  		// 0x0784 (0x000C) [0x0000000000000000]              
	struct FVector                                     RotateActorCameraRotationOffset;                  		// 0x0790 (0x000C) [0x0000000000000000]              
	int                                                RotateActorCameraSide;                            		// 0x079C (0x0004) [0x0000000000000000]              
	float                                              DesiredCameraSide;                                		// 0x07A0 (0x0004) [0x0000000000000000]              
	float                                              PawnTypeChangedTime;                              		// 0x07A4 (0x0004) [0x0000000000000000]              
	int                                                SelectedSpawnArchetype;                           		// 0x07A8 (0x0004) [0x0000000000000000]              
	struct FVehicleInputs                              DebugInputs;                                      		// 0x07AC (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              DelayBetweenMovePackets;                          		// 0x07CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeSinceLastMovePacket;                          		// 0x07D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlatformMetrics_TA*                         PlatformMetrics;                                  		// 0x07D4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              MouseXDeadZone;                                   		// 0x07D8 (0x0004) [0x0000000000000000]              
	float                                              MouseYDeadZone;                                   		// 0x07DC (0x0004) [0x0000000000000000]              
	float                                              MouseXDeadZoneAir;                                		// 0x07E0 (0x0004) [0x0000000000000000]              
	float                                              MouseYDeadZoneAir;                                		// 0x07E4 (0x0004) [0x0000000000000000]              
	struct FVehicleInputs                              LastInputs;                                       		// 0x07E8 (0x0020) [0x0000000000000000]              
	class APRI_TA*                                     PendingViewPRI;                                   		// 0x0808 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UNetworkJitterSettings_TA*                   JitterSettings;                                   		// 0x080C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventLaunchAccountPicker__Delegate;             		// 0x0810 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0814 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLaunchControllerApplet__Delegate;          		// 0x0820 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0824 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPendingIdleKickChanged__Delegate;          		// 0x0830 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0834 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMuteChanged__Delegate;                     		// 0x0840 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0844 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingEditorActorModified__Delegate;     		// 0x0850 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0854 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSelectBallCamTarget__Delegate;             		// 0x0860 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x0864 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3530 ];

		return pClassPointer;
	};

	void __PlayerController_TA__PostBeginPlay ( class UNetworkJitterSettings_TA* O );
	void ServerUpdateCustomMatchSettings ( struct FCustomMatchSettings Settings );
	void ServerCreateMatchBroadcast ( class AGameEvent_Soccar_TA* GameEvent );
	void ClampMoveActorGrabOffset ( );
	void RevertToDefaultCameraHUDInput ( );
	void SetCameraHUDInput ( class ACamera* InCameraArchetype, class AHUD* InHUDArchetype, class UClass* InPlayerInputClass );
	void SwitchToEditPawn ( );
	void ToggleEditorRound ( );
	void ToggleBetweenCarAndEditPawn ( );
	void Interact ( );
	void StopMovement ( unsigned long bOnlyIfNoAccel );
	struct FVector GetRotateActorCameraOffset ( float DeltaTime, unsigned long bSnap );
	void RestoreEditorPawnOrientation ( );
	void BackupEditorPawnOrientation ( );
	bool EditorPawnDeSerialize ( class UJsonObject* Data );
	struct FString EditorPawnSerialize ( );
	void UpdateRotatedActorOrientation ( float DeltaTime );
	void OnOpenPauseMenu ( );
	void ResetMouseCenter ( );
	float CalculateMouseAxis ( float Center, float CurrentLocation, float Deadzone, float MaxDist );
	struct FVector CalculateMouseAccelInput ( float XDeadZone, float YDeadZone, float XMaxDist, float YMaxDist, struct FVector* CurrentLocation );
	void ShowControllerApplet ( );
	void ShowAccountPicker ( );
	void QueSaveReplay ( );
	void SetFollowTarget ( class APRI_TA* InTarget );
	void FollowPlayer ( class APRI_TA* InPlayer );
	void ClientGroupSkillUpdated ( int Playlist, struct FUniqueNetIdGroup4 Players, struct FTierSkillRating Rating );
	void ClientSkillUpdated ( struct FPlayerSkillRating Rating, int Playlist );
	void GetHearSoundTransform ( struct FVector* OutLocation, struct FRotator* OutRotation );
	void ServerReportPlayer ( unsigned char Reason, struct FUniqueNetId PlayerID, struct FString PlayerName, struct FReportedPlayerInfo* StructInitializer_B66B72474E9BCE36456E77B584EE2077, struct FReportPlayerData* StructInitializer_705830F346121B48EE7AF0B54FAFC5E1, struct FReportPlayerData* StructInitializer_AE900ED545C486033B8CA0A93EC9CB8A );
	void HandleLocalStatEvent ( class APRI_TA* InPRI, class UStatEvent_TA* StatEvent, int Count );
	void OnPendingIdleKickChanged ( );
	void SetPendingIdleKick ( unsigned long bPending );
	void ClientSplitscreenJoinResponse ( struct FUniqueNetId PlayerID, unsigned long bAllow );
	void ServerRequestSplitscreenJoin ( struct FUniqueNetId PlayerID, struct FString PlayerName );
	bool eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void KickTrialPlayer ( );
	void NotifyGoalScored ( int ScoredOnTeam );
	void eventDestroyed ( );
	void SetGameHUDArchetype ( class AHUD* InArchetype );
	bool ShouldBeMuted ( class APlayerController_TA* Other );
	bool IsCommunicationFiltered ( unsigned char Filter, class APlayerController_TA* Other, unsigned long bPreset );
	void RefreshMutedPlayers ( unsigned long bForceRefresh );
	void eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventServerMutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayMutePlayer ( struct FUniqueNetId PlayerNetId );
	struct FString GetDebugMutePlayerName ( struct FUniqueNetId PlayerNetId );
	void ServerSetChatFilter ( unsigned char InVoiceFilter );
	void ServerSetVoiceFilter ( unsigned char InVoiceFilter );
	bool IsExplictlyMuted ( struct FUniqueNetId PlayerNetId );
	void HandlePRIUniqueIdChanged ( class APRI_X* InPRI );
	void ReplicateMutedPlayers ( );
	void DebugAI ( );
	void ClientNotifyChatDisabled ( float Time );
	void ChatMessage_TA ( class APlayerReplicationInfo* InPRI, struct FString Message, unsigned char ChatChannel, unsigned long bPreset );
	void ServerSayInternal_TA ( struct FString Message, unsigned char ChatChannel, unsigned long bPreset );
	void ServerSay_TA ( struct FString Message, unsigned char ChatChannel, unsigned long bPreset );
	void Say_TA ( struct FString Message, unsigned char ChatChannel, struct FUniqueNetId Recipient, unsigned long bPreset );
	bool CanChatWith ( class APlayerController_TA* Other, unsigned long bPreset );
	bool AllowTextMessage ( struct FString msg );
	void PushToTalkEnd ( );
	void PushToTalk ( );
	void HandleJoinGameMigrationCompleted ( unsigned long bSuccess, struct FString FailReason );
	void ClientNotifyServerShutdown ( );
	void eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientMutePlayer ( struct FUniqueNetId PlayerNetId, unsigned long bAddToMuteList );
	void GetOnlineStatus ( struct FString* PresenceString, struct FString* GameDataString );
	void ClientSetOnlineStatus ( );
	void HandleGameDataSelected ( int PlaylistId, int MutatorIndex );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	class AGameEvent_TA* GetGameEvent ( );
	void ClientArbitratedMatchEnded ( );
	void BannedKick ( );
	void NoReservationKick ( );
	void IdleKick ( );
	void ClientUseItem ( struct FVector UseLocation, struct FRotator UseRotation );
	void ServerTeleportCar ( struct FVector SpawnLocation, struct FRotator NewRotation );
	void eventTeleportCar ( struct FVector SpawnLocation, struct FRotator NewRotation );
	void ReceiveMessage ( struct FMessagePacket Packet );
	void ServerUsePickup ( class ARBActor_TA* Target );
	void UsePickup ( );
	void ToggleHandbrake ( unsigned long bHandbrake );
	void PlayerWantsToLaunchBall ( unsigned long bBoost );
	void ToggleBoost ( unsigned long bBoost );
	void ToggleJump ( unsigned long bJump );
	void TargetSelectLeft ( );
	void TargetSelectRight ( );
	void ReleaseRearCamera ( );
	void PressRearCamera ( );
	void ReleaseSecondaryCamera ( );
	void PressSecondaryCamera ( );
	void ReadyUp ( );
	void SwitchTeam ( );
	void SetDefaultCameraMode ( );
	void ResetCameraMode ( );
	struct FName GetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void ProcessMove_TA ( struct FVehicleInputs* NewInput );
	void ZeroMoveInput ( );
	void AddMouseMovementVal ( float PositiveInputVal, float NegativeInputVal, float InputDirVal, unsigned long bUsingMouseForPositiveAxis, unsigned long bUsingMouseForNegativeAxis, float* VehicleInputVal, float* CarAirAccelVal );
	void AddInputVal ( float InputVal, unsigned long bAddInputCondition, float* VehicleInputVal );
	void ModifiedAirRotationByMouseInput ( class UPlayerInput_TA* InputTA, float DeadZoneX, float DeadZoneY );
	bool UpdateMouseGroundSteer ( class UPlayerInput_TA* InputTA, float DeltaTime, float Deadzone, float MaxDist, float BrakingSpeed );
	bool UpdateMouseGroundThrottle ( class UPlayerInput_TA* InputTA, float DeltaTime, float Deadzone, float MaxDist );
	void PlayerMove ( float DeltaTime );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void ClientUpdatePing ( float TimeStamp, int InClientFrame );
	void eventSendClientAdjustment ( );
	TArray< struct FClientFrameData > MergeFrames ( TArray< struct FClientFrameData >* ArrayA, TArray< struct FClientFrameData >* ArrayB );
	void UpdateClientInputBuffer ( );
	void ServerMove_TA ( struct FClientPacketData Packet );
	void ReplicateMovePacket ( );
	void eventPostAsyncTick ( float DeltaTime );
	void PrePhysicsStep ( );
	void ProcessEmptyClientFrame ( );
	void ProcessClientFrame ( );
	bool UpdateLastActiveTime ( struct FVehicleInputs* TestInput );
	void HandleAddBoostComponent ( class UObject* BoostObj );
	void OnPawnChange ( class APawn* OldPawn, class APawn* NewPawn );
	void HandleSetProfile ( class ULocalPlayer_TA* LocalPlayer );
	class UProductMetrics_TA* GetProductMetrics ( );
	void ReplicateLoadout ( );
	void ReplicateCameraRotation ( );
	void SetUsingFreecam ( unsigned long bFreecam );
	void SetUsingBehindView ( unsigned long bBehindView );
	void SetUsingSecondaryCamera ( unsigned long bSecondaryCamera );
	void ReplicateCameraSettings ( );
	void HandlePawnTypeChanged ( class APRI_TA* InPRI );
	void HandlePendingViewCarSet ( class APRI_TA* InPRI );
	void HandleReplaceBot ( class APRI_TA* InPRI );
	void HandleTeamChanged ( class APRI_X* InPRI );
	void HandleGameEventChanged ( class APRI_TA* InPRI );
	void HandlePRICameraChanged ( class APRI_TA* InPRI );
	void SetupLightBarTeam ( );
	void ReplicateUserCarPreferences ( );
	void HandleAirControlSensitivityUpdated ( class UProfile_TA* Profile );
	void HandleSteeringSensitivityUpdated ( class UProfile_TA* Profile );
	void HandleDodgeInputThresholdUpdated ( class UProfile_TA* Profile );
	void ReplicateTotalXP ( );
	void HandleXPUpdated ( class UProfile_TA* Profile );
	void HandlePersistentCameraSet ( class APRI_TA* InPRI );
	void OnReceivedPRI ( );
	void InitProfileSettings ( unsigned long bJustReceivedPlayer );
	bool IsVoiceVolumeEnabled ( );
	void ClientSetLevelSessionID ( struct FGuid Id );
	void ReplicateLevelSessionID ( );
	void eventReceivedPlayer ( );
	void InitFromGRI ( class AGRI_X* GRI );
	void HandleGRISpawned ( class AGRI_X* GRI );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName EventName );
	void EventSelectBallCamTarget ( class APlayerController_TA* PC, int Direction );
	void EventTrainingEditorActorModified ( );
	void EventMuteChanged ( class APlayerController_TA* PC, struct FUniqueNetId PlayerID, unsigned long bMuted );
	void EventPendingIdleKickChanged ( class APlayerController_TA* PC );
	void EventLaunchControllerApplet ( );
	void EventLaunchAccountPicker ( int ControllerId );
};

UClass* APlayerController_TA::pClassPointer = NULL;

// Class TAGame.AudioPriorityComponent_TA
// 0x0048 (0x00B4 - 0x006C)
class UAudioPriorityComponent_TA : public UActorComponent_X
{
public:
	struct FInterpCurveFloat                           CarDistanceCurve;                                 		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           BallDistanceCurve;                                		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DrivingAtListenerDotThreshold;                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DrivingAtPlayerBonus;                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BoostingAtPlayerBonus;                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FColor >                            DebugColors;                                      		// 0x0098 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPriorityCandidate >                PriorityArray;                                    		// 0x00A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABall_TA*                                    Ball;                                             		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3532 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	struct FPriorityCandidate CreateCandidate ( class AVehicle_TA* Vehicle, struct FVector CenterLocation );
	void Tick ( float DeltaTime );
	void UpdateBallReference ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* InBall );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UAudioPriorityComponent_TA::pClassPointer = NULL;

// Class TAGame.BallRadiusVolume_TA
// 0x0014 (0x0210 - 0x01FC)
class ABallRadiusVolume_TA : public AActor
{
public:
	float                                              Radius;                                           		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawSphereComponent*                        PreviewRadius;                                    		// 0x0200 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class ABall_TA* >                          Inradius;                                         		// 0x0204 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3534 ];

		return pClassPointer;
	};

	void RemoveBall ( class ABall_TA* Ball );
	void AddBall ( class ABall_TA* Ball );
	void eventTick ( float DeltaTime );
};

UClass* ABallRadiusVolume_TA::pClassPointer = NULL;

// Class TAGame.RBActor_TA
// 0x01C0 (0x069C - 0x04DC)
class ARBActor_TA : public APawn_X
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                          		// 0x04DC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              MaxLinearSpeed;                                   		// 0x04E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxAngularSpeed;                                  		// 0x04E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableSleeping : 1;                             		// 0x04E8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplayActor : 1;                                 		// 0x04E8 (0x0004) [0x0000000000002022] [0x00000002] ( CPF_Const | CPF_Net | CPF_Transient )
	unsigned long                                      bFrozen : 1;                                      		// 0x04E8 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bAutoInitFXEffects : 1;                           		// 0x04E8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bIgnoreSyncing : 1;                               		// 0x04E8 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bPhysInitialized : 1;                             		// 0x04E8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	struct FNetworkSyncSettingsData                    NetworkSyncSettings;                              		// 0x04EC (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FReplicatedRBState                          OldRBState;                                       		// 0x0508 (0x0038) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FReplicatedRBState                          RBState;                                          		// 0x0540 (0x0038) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FReplicatedRBState                          ReplicatedRBState;                                		// 0x0578 (0x0038) [0x0000000000002022]              ( CPF_Const | CPF_Net | CPF_Transient )
	struct FReplicatedRBState                          ClientCorrectionRBState;                          		// 0x05B0 (0x0038) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FWorldContactData                           WorldContact;                                     		// 0x05E8 (0x0028) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     SyncErrorLocation;                                		// 0x0610 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              SyncErrorAngle;                                   		// 0x061C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     SyncErrorAxis;                                    		// 0x0620 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAkParamGroup*                               Ak;                                               		// 0x062C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  FXActor;                                          		// 0x0634 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UImpactEffectsComponent_TA*                  ImpactEffectsComponent;                           		// 0x0638 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FAccumulatedRigidBodyCollision >    RBCollisions;                                     		// 0x063C (0x000C) [0x0000000000482002]              ( CPF_Const | CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UClass*                                      RBHistoryClass;                                   		// 0x0648 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URBHistory_TA*                               RBHistory;                                        		// 0x064C (0x0004) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                LastRBCollisionsFrame;                            		// 0x0650 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UReplayComponent_TA*                         Replay;                                           		// 0x0654 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FWeldingInfo                                WeldedInfo;                                       		// 0x0658 (0x0020) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ARBActor_TA*                                 WeldedActor;                                      		// 0x0678 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ARBActor_TA*                                 WeldedTo;                                         		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PreWeldMass;                                      		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    Constraint2D;                                     		// 0x0684 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    BulletRigidBody;                                  		// 0x0688 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FScriptDelegate                             __EventRigidBodyCollision__Delegate;              		// 0x068C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0690 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3536 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void SetMass ( float NewMass );
	void SetConstrained3D ( struct FVector LinearLower, struct FVector LinearUpper, struct FVector AngularLower, struct FVector AngularUpper );
	void SetConstrained2D ( unsigned long bConstrain2D );
	void InitCCD ( );
	void SetPhysicsState ( struct FReplicatedRBState NewState );
	void SetFrozen ( unsigned long bEnabled );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	bool TakeDamage_X ( class UDamageComponent_X* Damage );
	void SetDyingPhysics ( );
	void SetMaxAngularSpeed ( float NewMaxSpeed );
	void SetMaxLinearSpeed ( float NewMaxSpeed );
	void eventOnRigidBodyCollision ( struct FAccumulatedRigidBodyCollision Collision );
	void AddTorque ( struct FVector Torque, unsigned char ForceMode );
	void AddForce ( struct FVector Force, unsigned char ForceMode );
	void eventPreAsyncTick ( float DeltaTime );
	void SetWelding ( struct FWeldingInfo Welding );
	void UnWeldRBActor ( class ARBActor_TA* Other );
	void WeldRBActor ( class ARBActor_TA* Other, struct FVector WeldOffset, struct FRotator WeldRotation );
	void eventOnRBPhysInit ( );
	void ReInitRBPhys ( );
	void TerminateRBPhys ( );
	void SetCurrentRBState ( struct FReplicatedRBState* NewRBState );
	struct FVector GetCurrentRBLocation ( );
	struct FReplicatedRBState GetCurrentRBState ( );
	int GetPhysicsFrame ( );
	float GetPhysicsTime ( );
	void PopFXState ( class UFXActorEvent_X* Event );
	void PushFXState ( class UFXActorEvent_X* Event );
	void InitFX ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventRigidBodyCollision ( class ARBActor_TA* RBActor, struct FAccumulatedRigidBodyCollision Collision );
};

UClass* ARBActor_TA::pClassPointer = NULL;

// Class TAGame.Ball_TA
// 0x0174 (0x0810 - 0x069C)
class ABall_TA : public ARBActor_TA
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x069C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AFXActor_X*                                  EndOfGameFXArchetype;                             		// 0x06A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AExplosion_X*                                ExplosionArchetype;                               		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AExplosion_X*                                NoGoalExplosionArchetype;                         		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowPlayerExplosionOverride : 1;                		// 0x06AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyGroundHit : 1;                             		// 0x06AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEndOfGameHidden : 1;                             		// 0x06AC (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bFadeIn : 1;                                      		// 0x06AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bFadeOut : 1;                                     		// 0x06AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPredictionOnGround : 1;                          		// 0x06AC (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCanBeAttached : 1;                               		// 0x06AC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bBallDemolish : 1;                                		// 0x06AC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bNewFalling : 1;                                  		// 0x06AC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bItemFreeze : 1;                                  		// 0x06AC (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	class UBallCamTarget_TA*                           BallCamTarget;                                    		// 0x06B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Radius;                                           		// 0x06B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VisualRadius;                                     		// 0x06B8 (0x0004) [0x0000000000000000]              
	TArray< struct FBallHitInfo >                      Touches;                                          		// 0x06BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastCalculateCarHit;                              		// 0x06C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InitialLocation;                                  		// 0x06CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x06D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHitWorldTime;                                 		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplicatedBallScale;                              		// 0x06E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UStaticMesh*                                 ReplicatedBallMesh;                               		// 0x06EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedWorldBounceScale;                       		// 0x06F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedBallGravityScale;                       		// 0x06F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedBallMaxLinearSpeedScale;                		// 0x06F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ReplicatedAddedCarBounceScale;                    		// 0x06FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AdditionalCarGroundBounceScaleZ;                  		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              AdditionalCarGroundBounceScaleXY;                 		// 0x0704 (0x0004) [0x0000000000000000]              
	unsigned char                                      HitTeamNum;                                       		// 0x0708 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x070C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FExplosionData                              ReplicatedExplosionData;                          		// 0x0710 (0x0010) [0x0000000000082020]              ( CPF_Net | CPF_Transient | CPF_Component )
	struct FExplosionDataExtended                      ReplicatedExplosionDataExtended;                  		// 0x0720 (0x0014) [0x0000000000082020]              ( CPF_Net | CPF_Transient | CPF_Component )
	class AExplosion_X*                                Explosion;                                        		// 0x0734 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExplosionTime;                                    		// 0x0738 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OldLocation;                                      		// 0x073C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          FadeMaterial;                                     		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              PredictionTimestep;                               		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPredictedPosition >                PredictedPositions;                               		// 0x0750 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LastPredictionTime;                               		// 0x075C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              BallSloMoRadius;                                  		// 0x0760 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallSloMoDuration;                                		// 0x0764 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallSloMoDilation;                                		// 0x0768 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallSloMoCooldown;                                		// 0x076C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallSloMoNext;                                    		// 0x0770 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallSloMoDiffSpeed;                               		// 0x0774 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     BallBelongsTo;                                    		// 0x0778 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                BallTouchScore;                                   		// 0x077C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FGoalPenetrationData                        GoalPenetration;                                  		// 0x0780 (0x0020) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	float                                              GroundForce;                                      		// 0x07A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACar_TA*                                     CurrentAffector;                                  		// 0x07A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBallTrajectoryComponent_TA*                 TrajectoryComponent;                              		// 0x07A8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPitchTekDrawingComponent_TA*                PitchTekComponent;                                		// 0x07AC (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventCarTouch__Delegate;                        		// 0x07B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x07B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitWorld__Delegate;                        		// 0x07C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x07C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitGround__Delegate;                       		// 0x07D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x07D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitGoal__Delegate;                         		// 0x07E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x07E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEventSet__Delegate;                    		// 0x07F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x07F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventExploded__Delegate;                        		// 0x0800 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0804 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3538 ];

		return pClassPointer;
	};

	void PredictGroundPosition ( int MaxIterations, struct FBallPredictionInfo* PredictionInfo );
	void PredictPosition ( float Time, struct FBallPredictionInfo* PredictionInfo );
	void DisableTrajectory ( );
	bool CanEverShowTrajectory ( );
	bool IsTrajectoryEnabled ( );
	struct FVector GetTrajectoryStartVelocity ( );
	struct FVector GetTrajectoryStartLocation ( );
	void UpdateTrajectoryPredictionPoints ( unsigned long bForceUpdate );
	void UpdateTrajectoryEnabled ( );
	bool ShouldDrawTrajectory ( );
	float GetAdditionalCarBounceScaleZ ( class ACar_TA* Car );
	void SpawnEndOfGameFX ( );
	void SetTouchScoreValue ( int NewValue );
	void SetEndOfGameHidden ( );
	void InitExplosionFX ( class AExplosion_X* InExplosion, class UGoal_TA* ExplosionGoal, class AFXActor_X* ExplosionFX );
	void Explode ( class UGoal_TA* ExplosionGoal, struct FVector ExplodeLocation, class APRI_TA* Scorer );
	void eventDestroyed ( );
	bool ShouldDemolish ( class ACar_TA* Car );
	void DoDestroy ( );
	void DoExplode ( );
	void OnRigidBodyCollision ( struct FAccumulatedRigidBodyCollision Collision );
	void eventTick ( float DeltaTime );
	void RestoreTimeDilation ( );
	void GetBallTimeDilation ( );
	void Launch ( struct FVector LaunchPosition, struct FVector LaunchDirection );
	void OnCarTouch ( class ACar_TA* HitCar, unsigned char HitType );
	void AttachToCar ( class ACar_TA* HitCar );
	void RecordCarHit ( class ACar_TA* HitCar, struct FVector HitLocation, struct FVector HitNormal, unsigned char HitType );
	void eventReset ( );
	void OnHitWorld ( struct FVector HitLoc, struct FVector HitNormal, class UPhysicalMaterial* PhysMat );
	bool IsGroundMaterial ( class UPhysicalMaterial* PhysMat );
	bool IsGroundHit ( struct FVector HitNormal );
	void FellOutOfWorld ( class UClass* dmgType );
	bool IsRoundActive ( );
	void eventOnHitGoal ( class UGoal_TA* Goal, struct FVector HitLoc );
	void SetGameEvent ( class AGameEvent_Soccar_TA* SoccarGame );
	void TurnOff ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void SetBallSloMoDiffSpeed ( float InDiffSpeed );
	void SetBallSloMoRadius ( float Inradius );
	void SetBallSloMoCooldown ( float InCooldown );
	void SetBallSloMoDilation ( float InDilation );
	void SetBallSloMoDuration ( float InDuration );
	void SetBallMesh ( class UStaticMesh* NewMesh );
	void SetWorldBounceScale ( float NewScale );
	void SetCarBounceScale ( float NewScale );
	void SetBallMaxLinearSpeedScale ( float InMaxLinearSpeedScale );
	void SetBallGravityScale ( float InBallGravityScale );
	void SetBallScale ( float NewScale );
	void eventReplicatedEvent ( struct FName VarName );
	void EventExploded ( class ABall_TA* Ball );
	void EventGameEventSet ( class ABall_TA* Ball );
	void EventHitGoal ( class ABall_TA* Ball, class UGoal_TA* Goal );
	void EventHitGround ( class ABall_TA* Ball, struct FVector HitLoc, struct FVector HitNormal );
	void EventHitWorld ( class ABall_TA* Ball, struct FVector HitLoc, struct FVector HitNormal );
	void EventCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
};

UClass* ABall_TA::pClassPointer = NULL;

// Class TAGame.BallTrajectoryComponent_TA
// 0x0054 (0x00C0 - 0x006C)
class UBallTrajectoryComponent_TA : public UActorComponent_X
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCalculatePoints : 1;                             		// 0x006C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FVector >                           TrajectoryPoints;                                 		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTrajectorySetup                            TrajectorySettings;                               		// 0x007C (0x0014) [0x0000000000000000]              
	float                                              TotalPathDistance;                                		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StartLocation;                                    		// 0x0094 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StartVelocity;                                    		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              TrajectoryUpdateTime;                             		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventTrajectoryEnabledChanged__Delegate;        		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3540 ];

		return pClassPointer;
	};

	int eventGetTrajectoryFXCount ( );
	void DestroyFXs ( );
	void eventSetupFXs ( );
	class APlayerController_TA* eventGetPlayer ( int LocalPlayerNum );
	TArray< class APlayerController_TA* > GetViewers ( );
	void CheckShouldShowTrajectory ( );
	float GetTrajectoryScale ( );
	void eventUpdateTrajectoryPrediction ( unsigned long bForceUpdate );
	void OnEnabledChanged ( );
	void SetEnable ( unsigned long bEnable );
	void HandleGameStateChanged ( class AGameEvent_TA* InGameEvent );
	void OnGameEventSet ( class ABall_TA* Ball );
	void HandlePlayerAimAssistChanged ( class UProfile_TA* Profile );
	void HandleLocalPlayersChanged ( class AGameEvent_TA* InGameEvent );
	void eventDetached ( );
	void eventBeginPlay ( );
	void EventTrajectoryEnabledChanged ( class ABall_TA* Ball );
};

UClass* UBallTrajectoryComponent_TA::pClassPointer = NULL;

// Class TAGame.BallTrajectoryComponent_Line_TA
// 0x0008 (0x00C8 - 0x00C0)
class UBallTrajectoryComponent_Line_TA : public UBallTrajectoryComponent_TA
{
public:
	unsigned long                                      bTrajectoryPointsNeedUpdated : 1;                 		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FColor                                      LineColor;                                        		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3542 ];

		return pClassPointer;
	};

	void DestroyFX ( int Index );
	void CreateFX ( int Index, TArray< class APlayerController_TA* >* Viewers );
	void DestroyFXs ( );
	void eventSetupFXs ( );
};

UClass* UBallTrajectoryComponent_Line_TA::pClassPointer = NULL;

// Class TAGame.BallTrajectoryComponent_Beam_TA
// 0x0010 (0x00D8 - 0x00C8)
class UBallTrajectoryComponent_Beam_TA : public UBallTrajectoryComponent_Line_TA
{
public:
	TArray< struct FTrajectoryFX >                     TrajectoryFXs;                                    		// 0x00C8 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UParticleSystem*                             ParticleBeamArchetype;                            		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3544 ];

		return pClassPointer;
	};

	int eventGetTrajectoryFXCount ( );
	void DestroyFX ( int Index );
	void DestroyFXs ( );
	void CreateFX ( int Index, TArray< class APlayerController_TA* >* Viewers );
};

UClass* UBallTrajectoryComponent_Beam_TA::pClassPointer = NULL;

// Class TAGame.BallTrajectoryComponent_Spline_TA
// 0x001C (0x00E4 - 0x00C8)
class UBallTrajectoryComponent_Spline_TA : public UBallTrajectoryComponent_Line_TA
{
public:
	TArray< struct FTrajectorySplineFX >               TrajectoryFXs;                                    		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ASplineLoftActorSpawnable_TA*                SplineArchetype;                                  		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              TangentMultiplier;                                		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              PulseMultiplier;                                  		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              MinInterpSpeed;                                   		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3546 ];

		return pClassPointer;
	};

	int eventGetTrajectoryFXCount ( );
	void DestroyFX ( int Index );
	void DestroyFXs ( );
	void CreateFX ( int Index, TArray< class APlayerController_TA* >* Viewers );
	void SetupFXs ( );
};

UClass* UBallTrajectoryComponent_Spline_TA::pClassPointer = NULL;

// Class TAGame.BallTrajectoryComponent_Mesh_TA
// 0x0034 (0x00F4 - 0x00C0)
class UBallTrajectoryComponent_Mesh_TA : public UBallTrajectoryComponent_TA
{
public:
	TArray< struct FMeshInfo >                         InterpMeshes;                                     		// 0x00C0 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FColor                                      BeamColor_Max;                                    		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FColor                                      BeamColor_Mid;                                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	struct FColor                                      BeamColor_Min;                                    		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              MinInterpSpeed;                                   		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              MeshScale;                                        		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              MeshMoveSpeed;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              MeshRotateSpeed;                                  		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              TrajectoryPlayTestScale;                          		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3548 ];

		return pClassPointer;
	};

	struct FLinearColor GetBeamColor ( float VelocityPower );
	void HandleVelocityStartSpeedChanged ( class ABall_GameEditor_TA* Ball );
	void SetupBallEditorMaterial ( );
	float GetTrajectoryScale ( );
	float eventGetMeshScale ( int MeshIndex );
	int eventGetTrajectoryFXCount ( );
	void DestroyFXs ( );
	void eventSetupFXs ( );
};

UClass* UBallTrajectoryComponent_Mesh_TA::pClassPointer = NULL;

// Class TAGame.BoostMesh_TA
// 0x0020 (0x005C - 0x003C)
class UBoostMesh_TA : public UObject
{
public:
	struct FRandomRange                                FadeInTime;                                       		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRandomRange                                FadeOutTime;                                      		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimatedMaterialMesh >             MaterialParams;                                   		// 0x004C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              MaxMaterialTime;                                  		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3550 ];

		return pClassPointer;
	};

	void ApplyPaint ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint );
	void ApplyLinearColorParameter ( class UActorComponent* Component, struct FName Param, struct FLinearColor InColor );
	void ApplyColorParameter ( class UActorComponent* Component, struct FName Param, struct FVector Value, float Alpha );
	void ApplyVectorParameter ( class UActorComponent* Component, struct FName Param, struct FVector Value );
	void ApplyFloatParameter ( class UActorComponent* Component, struct FName Param, float Value );
	void ApplyMaterialOverride ( class UMaterialInterface* Override, int Index );
	void FadeOut ( );
	void FadeIn ( );
	void ResetElapsedTime ( float Value );
	void CopyBoostMeshDistributionParameters ( class AFXActor_Boost_TA* Archetype );
	void Update ( float DeltaTime );
	void Initialize ( class AFXActor_X* FXActor );
};

UClass* UBoostMesh_TA::pClassPointer = NULL;

// Class TAGame.BreakOutActor_Platform_TA
// 0x0084 (0x0280 - 0x01FC)
class ABreakOutActor_Platform_TA : public AActor
{
public:
	int                                                Sides;                                            		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPrimaryPlayerStart : 1;                          		// 0x0200 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                TeamIndex;                                        		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDamage;                                        		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x020C (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0210 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class AFXActor_X*                                  FXArchetype;                                      		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NeighborRadius;                                   		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ABreakOutActor_Platform_TA* >        Neighbors;                                        		// 0x021C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	float                                              LastHitTime;                                      		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FBreakoutDamageState                        DamageState;                                      		// 0x022C (0x0018) [0x0000000000000020]              ( CPF_Net )
	class AFXActor_X*                                  FXActor;                                          		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FBreakoutDamageState                        PreReplayState;                                   		// 0x0248 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventDamageStateChanged__Delegate;              		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0264 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDamaged__Delegate;                         		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0274 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3552 ];

		return pClassPointer;
	};

	void SetPreReplayState ( );
	void SavePreReplayState ( );
	void GatherNeighbors ( class ABreakOutActor_Platform_TA* Start, int Iterations, TArray< class ABreakOutActor_Platform_TA* >* ToDamage );
	void HandleTeamColorsChanged ( class ATeam_TA* Team );
	void HandleTeamRemoved ( class UObject* TeamObj );
	void HandleTeamAdded ( class UObject* TeamObj );
	bool IsBroken ( );
	bool IsDamaged ( );
	void Reset ( );
	void SetDamageState ( unsigned char InDamageState, class APRI_TA* InDamageCauser, struct FVector InLocation, unsigned long bDirectDamage, unsigned long bImmediate );
	void IncreaseDamage ( class APRI_TA* DamageCauser, struct FVector FromLocation, unsigned long bDirectDamage );
	bool NeighborDamage ( class ABall_TA* Ball, int InDamage, struct FVector HitLocation );
	bool OnBallHit ( class ABall_TA* Ball, int InDamage, struct FVector HitNormal, struct FVector InVelocity, struct FVector HitLocation );
	void ReInitPhysics ( );
	void ReInitPhysicsDelayed ( );
	void InitFX ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventDamaged ( class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball );
	void EventDamageStateChanged ( class ABreakOutActor_Platform_TA* Platform, struct FBreakoutDamageState InState );
};

UClass* ABreakOutActor_Platform_TA::pClassPointer = NULL;

// Class TAGame.BTComponent
// 0x004C (0x0094 - 0x0048)
class UBTComponent : public UComponent
{
public:
	class UBTNode*                                     Root;                                             		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RootStatus;                                       		// 0x004C (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AAIController_TA*                            AI;                                               		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPrintStatusLogs : 1;                             		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDirtyStatusLogs : 1;                             		// 0x0054 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEvaluatingConditions : 1;                        		// 0x0054 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPauseNextTick : 1;                               		// 0x0054 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	TArray< struct FBTStatusLog >                      StatusLogs;                                       		// 0x0058 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                StatusLogsIndex;                                  		// 0x0064 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< int >                                      StatusLogsStack;                                  		// 0x0068 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UDebugDrawer_X*                              CanvasDrawer;                                     		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FBTDynamicLinkData >                DynamicLinks;                                     		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventDynamicLinksChanged__Delegate;             		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3554 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	struct FColor GetStatusColor ( unsigned char Status );
	struct FString GetDepthSpaces ( float Depth );
	void SetDynamicLink ( struct FName LinkName, class UBTNode* Node );
	void SetRoot ( class UBTNode* NewRootArchetype );
	void Abort ( );
	void Tick ( float DeltaTime );
	void Init ( class AAIController_TA* ForAI );
	void EventDynamicLinksChanged ( class UBTComponent* BT );
};

UClass* UBTComponent::pClassPointer = NULL;

// Class TAGame.BTLockCollection
// 0x002C (0x0074 - 0x0048)
class UBTLockCollection : public UComponent
{
public:
	TArray< struct FTimedLock >                        Locks;                                            		// 0x0048 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventLockSet__Delegate;                         		// 0x0054 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0058 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLockExpired__Delegate;                     		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3556 ];

		return pClassPointer;
	};

	void UpdateLocks ( );
	float GetTimeRemaining ( struct FName LockName );
	bool IsNameLocked ( struct FName LockName );
	void RemoveNamedLock ( struct FName LockName );
	void AddNamedLock ( struct FName LockName, float ForHowLong );
	void EventLockExpired ( struct FName LockName );
	void EventLockSet ( struct FName LockName );
};

UClass* UBTLockCollection::pClassPointer = NULL;

// Class TAGame.BTNode
// 0x0014 (0x0050 - 0x003C)
class UBTNode : public UObject
{
public:
	TArray< class UBTDecorator* >                      Decorators;                                       		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bDebugPause : 1;                                  		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AAIController_TA*                            AI;                                               		// 0x004C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3558 ];

		return pClassPointer;
	};

	void SetStatusString ( struct FString msg );
};

UClass* UBTNode::pClassPointer = NULL;

// Class TAGame.BTConditionalNode
// 0x0024 (0x0074 - 0x0050)
class UBTConditionalNode : public UBTNode
{
public:
	TArray< class UBTNode* >                           PreConditions;                                    		// 0x0050 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UBTNode* >                           Conditions;                                       		// 0x005C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class UBTNode* >                           SuccessConditions;                                		// 0x0068 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3560 ];

		return pClassPointer;
	};

};

UClass* UBTConditionalNode::pClassPointer = NULL;

// Class TAGame.BTAction
// 0x000C (0x0080 - 0x0074)
class UBTAction : public UBTConditionalNode
{
public:
	float                                              FinishTime;                                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbortTime;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartTime;                                        		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3562 ];

		return pClassPointer;
	};

	float GetRunningTime ( );
	unsigned char OnExecute ( );
	void eventOnStarted ( );
	unsigned char eventOnStart ( );
	void eventOnInit ( );
};

UClass* UBTAction::pClassPointer = NULL;

// Class TAGame.BTAction_Target
// 0x0088 (0x0108 - 0x0080)
class UBTAction_Target : public UBTAction
{
public:
	class UBTTarget*                                   Target;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetPredictionTime;                             		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBTProxyData                                SelfData;                                         		// 0x0088 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FBTProxyData                                TargetData;                                       		// 0x00C8 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3564 ];

		return pClassPointer;
	};

	unsigned char eventOnTargetExecute ( );
	unsigned char OnExecute ( );
};

UClass* UBTAction_Target::pClassPointer = NULL;

// Class TAGame.BTAction_MoveTo
// 0x004C (0x0154 - 0x0108)
class UBTAction_MoveTo : public UBTAction_Target
{
public:
	unsigned long                                      bReverse : 1;                                     		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBoost : 1;                                       		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowPointTurns : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPointTurn : 1;                                   		// 0x0108 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bWasFacingDestination : 1;                        		// 0x0108 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bHasPath : 1;                                     		// 0x0108 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	float                                              MinSpeed;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBoostDistance;                                 		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TeamSeparationDistance;                           		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReachDistance;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   FaceLocation;                                     		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   FaceRotation;                                     		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTurnRadius;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UBTMoveModifier* >                   Modifiers;                                        		// 0x012C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     OldPathDestination;                               		// 0x0138 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OldPathCarLocation;                               		// 0x0144 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedMaxGravitySlope;                            		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3566 ];

		return pClassPointer;
	};

	void SteerTowardsLocal ( struct FVector LocalOffset );
	void DriveAwayFrom ( struct FVector TargetLocation, float TargetRadius, float BufferRadius );
	bool SeparateTeammates ( );
	void SlowDown ( );
	void SetTemporaryMaxSpeed ( float InSpeed );
	void SlowForObstacles ( );
	struct FVector GetAimedDestination ( struct FVector Destination, struct FVector AimDir );
	bool GetAimDir ( struct FVector Destination, struct FVector* AimDir );
	void DriveTo ( struct FVector Destination );
	void UpdatePath ( struct FVector Destination );
	void PathTo ( struct FVector Destination );
	void CacheGravityScale ( );
	struct FVector GetLeadDestination ( );
	bool HasReachedTarget ( );
	bool HasPassedTarget ( );
	unsigned char OnTargetExecute ( );
	unsigned char eventOnStart ( );
	void eventOnInit ( );
};

UClass* UBTAction_MoveTo::pClassPointer = NULL;

// Class TAGame.BTMoveModifier
// 0x0004 (0x004C - 0x0048)
class UBTMoveModifier : public UComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3568 ];

		return pClassPointer;
	};

	void eventAdjustDestination ( struct FVector Goal, struct FVector* Destination );
};

UClass* UBTMoveModifier::pClassPointer = NULL;

// Class TAGame.BTCondition
// 0x000C (0x005C - 0x0050)
class UBTCondition : public UBTNode
{
public:
	float                                              UpdateDelay;                                      		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFlipResult : 1;                                  		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDirty : 1;                                       		// 0x0054 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      CachedResult : 1;                                 		// 0x0054 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	float                                              NextUpdateTime;                                   		// 0x0058 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3570 ];

		return pClassPointer;
	};

	bool ShouldProcessTeam ( unsigned char CheckTeam, int ActorTeam );
	bool ShouldProcessActor ( unsigned char CheckTeam, class AActor* CheckActor );
	void SetDirty ( );
	bool eventGetResult ( );
	void eventOnInit ( );
};

UClass* UBTCondition::pClassPointer = NULL;

// Class TAGame.BTC_Any
// 0x0004 (0x0060 - 0x005C)
class UBTC_Any : public UBTCondition
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3572 ];

		return pClassPointer;
	};

};

UClass* UBTC_Any::pClassPointer = NULL;

// Class TAGame.BTC_NotAny
// 0x0004 (0x0060 - 0x005C)
class UBTC_NotAny : public UBTCondition
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3574 ];

		return pClassPointer;
	};

};

UClass* UBTC_NotAny::pClassPointer = NULL;

// Class TAGame.BTC_ProxyBase
// 0x0048 (0x00A4 - 0x005C)
class UBTC_ProxyBase : public UBTCondition
{
public:
	class UBTTarget*                                   Self;                                             		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfPredictionTime;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBTProxyData                                SelfData;                                         		// 0x0064 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3576 ];

		return pClassPointer;
	};

};

UClass* UBTC_ProxyBase::pClassPointer = NULL;

// Class TAGame.BTC_TargetBase
// 0x00CC (0x0170 - 0x00A4)
class UBTC_TargetBase : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Target;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetPredictionTime;                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFlattenToDrivePlane : 1;                         		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FBTProxyData                                TargetData;                                       		// 0x00B0 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FBTProxyData                                SelfData3D;                                       		// 0x00F0 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FBTProxyData                                TargetData3D;                                     		// 0x0130 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3578 ];

		return pClassPointer;
	};

};

UClass* UBTC_TargetBase::pClassPointer = NULL;

// Class TAGame.BTC_Target
// 0x0048 (0x01B8 - 0x0170)
class UBTC_Target : public UBTC_TargetBase
{
public:
	float                                              DistanceGreaterThan;                              		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceLessThan;                                 		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightGreaterThan;                                		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightLessThan;                                   		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedGreaterThan;                                 		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedLessThan;                                    		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedTowardsGreaterThan;                          		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedTowardsLessThan;                             		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideSpeedGreaterThan;                             		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideSpeedLessThan;                                		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSpeedGreaterThan;                         		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSpeedLessThan;                            		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSpeedTowardsGreaterThan;                  		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSpeedTowardsLessThan;                     		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSideSpeedGreaterThan;                     		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeSideSpeedLessThan;                        		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngleGreaterThan;                                 		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngleLessThan;                                    		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3580 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_Target::pClassPointer = NULL;

// Class TAGame.BTC_SelectActor
// 0x0004 (0x0060 - 0x005C)
class UBTC_SelectActor : public UBTCondition
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3582 ];

		return pClassPointer;
	};

};

UClass* UBTC_SelectActor::pClassPointer = NULL;

// Class TAGame.BTAction_Input
// 0x0020 (0x00A0 - 0x0080)
class UBTAction_Input : public UBTAction
{
public:
	struct FVehicleInputs                              Input;                                            		// 0x0080 (0x0020) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3584 ];

		return pClassPointer;
	};

	unsigned char OnExecute ( );
};

UClass* UBTAction_Input::pClassPointer = NULL;

// Class TAGame.BTAction_Stop
// 0x0004 (0x0084 - 0x0080)
class UBTAction_Stop : public UBTAction
{
public:
	unsigned long                                      bWasGoingForward : 1;                             		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3586 ];

		return pClassPointer;
	};

	unsigned char OnExecute ( );
	unsigned char eventOnStart ( );
};

UClass* UBTAction_Stop::pClassPointer = NULL;

// Class TAGame.BTAction_HitBall
// 0x0018 (0x016C - 0x0154)
class UBTAction_HitBall : public UBTAction_MoveTo
{
public:
	float                                              RandomTargetOffset;                               		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimOffsetScale;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CurrentRandomTargetOffset;                        		// 0x015C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AAIController_Soccar_TA*                     SoccarAI;                                         		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3588 ];

		return pClassPointer;
	};

	struct FVector GetAimedDestination ( struct FVector Destination, struct FVector AimDir );
	struct FVector GetLeadDestination ( );
	unsigned char OnTargetExecute ( );
	bool HasHitBall ( );
	void OnStarted ( );
	void OnInit ( );
};

UClass* UBTAction_HitBall::pClassPointer = NULL;

// Class TAGame.BTAction_CatchBall
// 0x0004 (0x0170 - 0x016C)
class UBTAction_CatchBall : public UBTAction_HitBall
{
public:
	float                                              FallTime;                                         		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3590 ];

		return pClassPointer;
	};

	void DriveTo ( struct FVector Destination );
	unsigned char OnTargetExecute ( );
};

UClass* UBTAction_CatchBall::pClassPointer = NULL;

// Class TAGame.BTAction_WiggleTires
// 0x0000 (0x0080 - 0x0080)
class UBTAction_WiggleTires : public UBTAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3592 ];

		return pClassPointer;
	};

	unsigned char OnExecute ( );
};

UClass* UBTAction_WiggleTires::pClassPointer = NULL;

// Class TAGame.BTNodeParent
// 0x0010 (0x0084 - 0x0074)
class UBTNodeParent : public UBTConditionalNode
{
public:
	TArray< class UBTNode* >                           Children;                                         		// 0x0074 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                RunningChild;                                     		// 0x0080 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3594 ];

		return pClassPointer;
	};

};

UClass* UBTNodeParent::pClassPointer = NULL;

// Class TAGame.BTExecutor
// 0x0000 (0x0084 - 0x0084)
class UBTExecutor : public UBTNodeParent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3596 ];

		return pClassPointer;
	};

};

UClass* UBTExecutor::pClassPointer = NULL;

// Class TAGame.BTRandomSelector
// 0x0018 (0x009C - 0x0084)
class UBTRandomSelector : public UBTNodeParent
{
public:
	TArray< float >                                    ChildWeights;                                     		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      RemainingChildren;                                		// 0x0090 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3598 ];

		return pClassPointer;
	};

};

UClass* UBTRandomSelector::pClassPointer = NULL;

// Class TAGame.BTSelector
// 0x0000 (0x0084 - 0x0084)
class UBTSelector : public UBTNodeParent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3600 ];

		return pClassPointer;
	};

};

UClass* UBTSelector::pClassPointer = NULL;

// Class TAGame.BTEvaluator
// 0x0000 (0x0084 - 0x0084)
class UBTEvaluator : public UBTSelector
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3602 ];

		return pClassPointer;
	};

};

UClass* UBTEvaluator::pClassPointer = NULL;

// Class TAGame.BTSequence
// 0x0000 (0x0084 - 0x0084)
class UBTSequence : public UBTNodeParent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3604 ];

		return pClassPointer;
	};

};

UClass* UBTSequence::pClassPointer = NULL;

// Class TAGame.BTDecorator
// 0x0004 (0x0054 - 0x0050)
class UBTDecorator : public UBTNode
{
public:
	class UBTNode*                                     Child;                                            		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3606 ];

		return pClassPointer;
	};

};

UClass* UBTDecorator::pClassPointer = NULL;

// Class TAGame.BTDeco_Success
// 0x0000 (0x0054 - 0x0054)
class UBTDeco_Success : public UBTDecorator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3608 ];

		return pClassPointer;
	};

};

UClass* UBTDeco_Success::pClassPointer = NULL;

// Class TAGame.BTDynamicLink
// 0x0010 (0x0064 - 0x0054)
class UBTDynamicLink : public UBTDecorator
{
public:
	struct FName                                       LinkName;                                         		// 0x0054 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUnlinkedSuccess : 1;                             		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UBTNode*                                     ChildArchetype;                                   		// 0x0060 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3610 ];

		return pClassPointer;
	};

	void SetChildArchetype ( class UBTNode* NewChildArchetype );
	void HandleDynamicLinksChanged ( class UBTComponent* BT );
	void eventInit ( );
};

UClass* UBTDynamicLink::pClassPointer = NULL;

// Class TAGame.BTLock
// 0x001C (0x0070 - 0x0054)
class UBTLock : public UBTDecorator
{
public:
	unsigned char                                      LockScope;                                        		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LockName;                                         		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Time;                                             		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomTime;                                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTLockCollection*                           Locks;                                            		// 0x0068 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              LockTime;                                         		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3612 ];

		return pClassPointer;
	};

};

UClass* UBTLock::pClassPointer = NULL;

// Class TAGame.BTWeight
// 0x0004 (0x0058 - 0x0054)
class UBTWeight : public UBTDecorator
{
public:
	float                                              Weight;                                           		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3614 ];

		return pClassPointer;
	};

};

UClass* UBTWeight::pClassPointer = NULL;

// Class TAGame.BTProxyType
// 0x0004 (0x0040 - 0x003C)
class UBTProxyType : public UObject
{
public:
	unsigned long                                      bStatic : 1;                                      		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3616 ];

		return pClassPointer;
	};

};

UClass* UBTProxyType::pClassPointer = NULL;

// Class TAGame.BTTarget
// 0x0028 (0x0064 - 0x003C)
class UBTTarget : public UObject
{
public:
	class UBTProxyType*                                Type;                                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocalOffset;                                      		// 0x0040 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldOffset;                                      		// 0x004C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UBTNode* >                           Filters;                                          		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3618 ];

		return pClassPointer;
	};

};

UClass* UBTTarget::pClassPointer = NULL;

// Class TAGame.BugReport_TA
// 0x0004 (0x013C - 0x0138)
class UBugReport_TA : public UBugReport_X
{
public:
	class UReplay_TA*                                  Replay;                                           		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3620 ];

		return pClassPointer;
	};

	class UReplay_TA* eventGetReplay ( );
};

UClass* UBugReport_TA::pClassPointer = NULL;

// Class TAGame.CarColorSet_TA
// 0x004C (0x0088 - 0x003C)
class UCarColorSet_TA : public UObject
{
public:
	TArray< struct FLinearColor >                      Grayscales;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      H;                                                		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      SV;                                               		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                DefaultId;                                        		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ColorBlindColor;                                  		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                HueCount;                                         		// 0x0074 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                ValueCount;                                       		// 0x0078 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	TArray< struct FLinearColor >                      Colors;                                           		// 0x007C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3622 ];

		return pClassPointer;
	};

	int eventGetClosestID ( struct FLinearColor InColor );
	struct FLinearColor GetFontColor ( int ColorID );
	TArray< struct FLinearColor > GetStadiumColors ( int ColorID );
	struct FLinearColor GetColor ( int ColorID );
};

UClass* UCarColorSet_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_TA
// 0x0038 (0x0234 - 0x01FC)
class ACarComponent_TA : public AActor
{
public:
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             FXEvent;                                          		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x0204 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoActivate : 1;                                		// 0x0204 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSimulateComponent : 1;                           		// 0x0204 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCreated : 1;                                     		// 0x0204 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x0204 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRemovedFromCar : 1;                              		// 0x0204 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      ComponentData;                                    		// 0x0208 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ReplicatedActive;                                 		// 0x0209 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APRI_TA*                                     Activator;                                        		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AVehicle_TA*                                 Vehicle;                                          		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ACar_TA*                                     Car;                                              		// 0x0214 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ActivityTime;                                     		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplicatedActivityTime;                           		// 0x021C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFXActor_X*                                  FXActor;                                          		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventActivationChanged__Delegate;               		// 0x0224 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0228 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3624 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void HandleCarDestroyed ( class APawn_X* InCar );
	void eventDestroyed ( );
	float GetInactiveTime ( );
	float GetActiveTime ( );
	void ApplyForces ( float ActiveTime );
	void PrePhysicsStep ( float DeltaTime );
	void RemoveFromCar ( );
	bool CanDeactivate ( );
	bool ConditionalDeactivate ( );
	bool CanActivate ( );
	bool ConditionalActivate ( );
	void SetActive ( unsigned long bNewActive );
	void Deactivate ( );
	void Activate ( );
	void RemoveFX ( );
	void ReInitFX ( );
	void InitFX ( );
	void UnregisterCarEvents ( );
	void RegisterCarEvents ( );
	void OnCreated ( );
	void HandleVehicleSetup ( class ACar_TA* InCar );
	void OnVehicleSetupComplete ( );
	void Create ( class ACar_TA* OwnerCar, class APRI_TA* InActivator );
	void ArchetypeCreateFor ( class ACar_TA* OwnerCar );
	void ClientUpdateActive ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventActivationChanged ( class ACarComponent_TA* CarComponent );
};

UClass* ACarComponent_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_AirControl_TA
// 0x0028 (0x025C - 0x0234)
class ACarComponent_AirControl_TA : public ACarComponent_TA
{
public:
	struct FRotator                                    AirTorque;                                        		// 0x0234 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    AirDamping;                                       		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThrottleForce;                                    		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeDisableTimeRemaining;                        		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ControlScale;                                     		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AirControlSensitivity;                            		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3626 ];

		return pClassPointer;
	};

	void PrePhysicsStep ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	void OnCreated ( );
};

UClass* ACarComponent_AirControl_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_Boost_TA
// 0x0048 (0x027C - 0x0234)
class ACarComponent_Boost_TA : public ACarComponent_TA
{
public:
	float                                              BoostConsumptionRate;                             		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBoostAmount;                                   		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartBoostAmount;                                 		// 0x023C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              CurrentBoostAmount;                               		// 0x0240 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              BoostModifier;                                    		// 0x0244 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LastBoostAmountRequestTime;                       		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBoostAmount;                                  		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BoostForce;                                       		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBoostTime;                                     		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RechargeRate;                                     		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RechargeDelay;                                    		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                UnlimitedBoostRefCount;                           		// 0x0260 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      bUnlimitedBoost : 1;                              		// 0x0264 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNoBoost : 1;                                     		// 0x0264 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned char                                      ReplicatedBoostAmount;                            		// 0x0268 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventBoostAmountChanged__Delegate;              		// 0x026C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0270 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3628 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void ReadReplicatedBoostAmount ( );
	void eventSetReplicatedBoostAmount ( );
	void ApplyForces ( float ActiveTime );
	void PrePhysicsStep ( float DeltaTime );
	void ClientGiveBoost ( float Amount );
	void ConfirmBoostAmount ( );
	void ClientFixBoostAmount ( float TimeStamp, float Amount );
	void ServerConfirmBoostAmount ( float TimeStamp, float Amount );
	void SetRechargeDelay ( float InRechargeDelay );
	void SetRechargeRate ( float InRechargeRate );
	void SetNoBoost ( unsigned long Enabled );
	void SetUnlimitedBoost ( unsigned long Enabled );
	void SetBoostModifier ( float Modifier );
	void SetBoostAmount ( float Amount );
	void GiveBoost ( float Amount );
	void GiveStartingBoost ( );
	void GiveFullBoost ( );
	float GetPercentBoostFull ( );
	bool IsFull ( );
	void RemoveFromCar ( );
	bool CanDeactivate ( );
	bool CanActivate ( );
	void InitFX ( );
	void OnCreated ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventBoostAmountChanged ( class ACarComponent_Boost_TA* Boost );
};

UClass* ACarComponent_Boost_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_Dodge_TA
// 0x0064 (0x0298 - 0x0234)
class ACarComponent_Dodge_TA : public ACarComponent_TA
{
public:
	float                                              DodgeInputThreshold;                              		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideDodgeImpulse;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideDodgeImpulseMaxSpeedScale;                    		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardDodgeImpulse;                              		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardDodgeImpulseMaxSpeedScale;                 		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackwardDodgeImpulse;                             		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackwardDodgeImpulseMaxSpeedScale;                		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideDodgeTorque;                                  		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardDodgeTorque;                               		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeTorqueTime;                                  		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDodgeTorqueTime;                               		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeZDamping;                                    		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeZDampingDelay;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeZDampingUpTime;                              		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeImpulseScale;                                		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DodgeTorqueScale;                                 		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             JumpEvent;                                        		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             DoubleJumpEvent;                                  		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             DodgeEvent;                                       		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DodgeTorque;                                      		// 0x0280 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     DodgeDirection;                                   		// 0x028C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3630 ];

		return pClassPointer;
	};

	void PrePhysicsStep ( float DeltaTime );
	void ApplyTorqueForces ( float ActiveTime );
	void ApplyDodgeImpulse ( );
	struct FVector GetDodgeImpulse ( struct FVector DodgeDir );
	void ApplyForces ( float ActiveTime );
	bool CanActivate ( );
	void OnCreated ( );
};

UClass* ACarComponent_Dodge_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_DoubleJump_TA
// 0x0008 (0x023C - 0x0234)
class ACarComponent_DoubleJump_TA : public ACarComponent_TA
{
public:
	float                                              JumpImpulse;                                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseScale;                                     		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3632 ];

		return pClassPointer;
	};

	void PrePhysicsStep ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	void OnCreated ( );
};

UClass* ACarComponent_DoubleJump_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_FlipCar_TA
// 0x0010 (0x0244 - 0x0234)
class ACarComponent_FlipCar_TA : public ACarComponent_TA
{
public:
	float                                              FlipCarImpulse;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlipCarTorque;                                    		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlipCarTime;                                      		// 0x023C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned long                                      bFlipRight : 1;                                   		// 0x0240 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3634 ];

		return pClassPointer;
	};

	void PrePhysicsStep ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	bool CanActivate ( );
	void OnCreated ( );
};

UClass* ACarComponent_FlipCar_TA::pClassPointer = NULL;

// Class TAGame.CarComponent_Jump_TA
// 0x0028 (0x025C - 0x0234)
class ACarComponent_Jump_TA : public ACarComponent_TA
{
public:
	float                                              MinJumpTime;                                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpImpulse;                                      		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpForce;                                        		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpForceTime;                                    		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PodiumJumpForceTime;                              		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpImpulseSpeed;                                 		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              JumpAccel;                                        		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxJumpHeight;                                    		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxJumpHeightTime;                                		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDeactivate : 1;                                  		// 0x0258 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3636 ];

		return pClassPointer;
	};

	void PrePhysicsStep ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	void CacheJumpData ( );
	void OnCreated ( );
};

UClass* ACarComponent_Jump_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_TA
// 0x0048 (0x027C - 0x0234)
class ASpecialPickup_TA : public ACarComponent_TA
{
public:
	struct FString                                     PickupName;                                       		// 0x0234 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bHudIgnoreUseTime : 1;                            		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasActivated : 1;                                		// 0x0240 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0240 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              ActivationDuration;                               		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  PickupFXArchetype;                                		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPickupReplacement >                BodyReplacements;                                 		// 0x024C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UShakeComponent_X*                           ShakeComponentArchetype;                          		// 0x0258 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkSoundCue*                                 ActivateSFX;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 LocalActivateSFX;                                 		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  PickupFX;                                         		// 0x0264 (0x0004) [0x0000000000000000]              
	class UShakeComponent_X*                           ShakeComp;                                        		// 0x0268 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventActivated__Delegate;                       		// 0x026C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0270 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3638 ];

		return pClassPointer;
	};

	bool HasActivated ( );
	class ARBActor_TA* GetClientTarget ( );
	void OnVehicleSetupComplete ( );
	void RemovePickupFX ( );
	void InitPickupFX ( );
	float GetActiveTimePercent ( );
	void PreActivatedTick ( float DeltaTime );
	void PickupTick ( float DeltaTime );
	void PickupEnd ( );
	void PickupStart ( );
	class ACarComponent_Boost_TA* GetBoostComponent ( );
	void DeactivatePickup ( );
	bool TryActivate ( class ARBActor_TA* TargetOverride );
	void eventDestroyed ( );
	void HandleDemolish ( class ACar_TA* InCar, struct FDemolishData Data );
	void OnCreated ( );
	bool CanPickup ( class ACar_TA* InCar );
	void ApplyPickup ( class ACar_TA* InCar );
	void eventRecordCarHit ( class ABall_TA* Ball, struct FVector Normal, unsigned char HitType );
	void EventActivated ( class ACar_TA* InCar, class ASpecialPickup_TA* Pickup );
};

UClass* ASpecialPickup_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BallGravity_TA
// 0x0064 (0x02E0 - 0x027C)
class ASpecialPickup_BallGravity_TA : public ASpecialPickup_TA
{
public:
	float                                              BallGravity;                                      		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Range;                                            		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Offset;                                           		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeactivateOnTouch : 1;                           		// 0x0290 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UParticleSystem*                             BeamPSArchetype;                                  		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BeamPSParam;                                      		// 0x0298 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecordBallHitRate;                                		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   BallMIC;                                          		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BallMICParam;                                     		// 0x02A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_TA*                                 BallFXArchetype;                                  		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           BallMICCurve;                                     		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkSoundCue*                                 BallSFX;                                          		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastRecordedBallHitTime;                          		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    BeamPSC;                                          		// 0x02CC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AFXActor_TA*                                 BallFX;                                           		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        CopiedBallMesh;                                   		// 0x02D4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   BMIC;                                             		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ABall_TA*                                    PrevBall;                                         		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3640 ];

		return pClassPointer;
	};

	void HandleHitBall ( class ACar_TA* InCar, class ABall_TA* Ball );
	void RemoveBallFX ( );
	void UpdateBallFX ( class ABall_TA* Ball, struct FVector BallContactPos );
	void RemoveBeamFX ( );
	void UpdateBeamFX ( class ABall_TA* Ball );
	void UpdateVisual ( );
	void PickupTick ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_BallGravity_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Targeted_TA
// 0x0024 (0x02A0 - 0x027C)
class ASpecialPickup_Targeted_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bCanTargetBall : 1;                               		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanTargetCars : 1;                               		// 0x027C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCanTargetEnemyCars : 1;                          		// 0x027C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCanTargetTeamCars : 1;                           		// 0x027C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseDirectionalTargeting : 1;                     		// 0x027C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRequireTrace : 1;                                		// 0x027C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              Range;                                            		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirectionalTargetingAccuracy;                     		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ARBActor_TA*                                 ClientTarget;                                     		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ARBActor_TA*                                 Targeted;                                         		// 0x028C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventNewTarget__Delegate;                       		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0294 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3642 ];

		return pClassPointer;
	};

	class ARBActor_TA* GetClientTarget ( );
	void TargetChanged ( );
	void OnTargetChanged ( );
	void PreActivatedTick ( float DeltaTime );
	bool TryActivate ( class ARBActor_TA* TargetOverride );
	bool ValidateTargetTrace ( class ARBActor_TA* InTarget );
	bool ValidateTarget ( class ARBActor_TA* InTarget );
	class ARBActor_TA* GetTarget ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventNewTarget ( class ACar_TA* OwnerCar, class ASpecialPickup_TA* Pickup );
};

UClass* ASpecialPickup_Targeted_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BallFreeze_TA
// 0x0068 (0x0308 - 0x02A0)
class ASpecialPickup_BallFreeze_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_X*                                  FreezeBreakFXArchetype;                           		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  FreezeFXArchetype;                                		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   FreezeMIC;                                        		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FreezeMaterialParam;                              		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           FreezeInterpTime;                                 		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bMaintainMomentum : 1;                            		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTouched : 1;                                     		// 0x02C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              TimeToStop;                                       		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopMomentumPercentage;                           		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 FreezeSFX;                                        		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 BreakSFX;                                         		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        CopiedBallMesh;                                   		// 0x02D8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ABall_TA*                                    Ball;                                             		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OrigLinearVelocity;                               		// 0x02E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OrigAngularVelocity;                              		// 0x02EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              OrigSpeed;                                        		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RepOrigSpeed;                                     		// 0x02FC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInstanceConstant*                   FreezeMat;                                        		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFXActor_X*                                  FreezeFX;                                         		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3644 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void SpawnBreakFX ( );
	void HandleBallExploded ( class ABall_TA* InBall );
	void HandleBallHit ( class ABall_TA* InBall, class ACar_TA* InCar, unsigned char HitType );
	void RemovePickupFX ( );
	void TickPickupFX ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	void PickupTick ( float DeltaTime );
	void InitPickupFX ( );
	void OnTargetChanged ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_BallFreeze_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_GrapplingHook_TA
// 0x00D8 (0x0378 - 0x02A0)
class ASpecialPickup_GrapplingHook_TA : public ASpecialPickup_Targeted_TA
{
public:
	float                                              Impulse;                                          		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Force;                                            		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRopeLength;                                    		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PredictionSpeed;                                  		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeactivateOnTouch : 1;                           		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInstant : 1;                                     		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlocked : 1;                                     		// 0x02B0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAttachedToBall : 1;                              		// 0x02B0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FInterpCurveFloat                           RopeLengthCurve;                                  		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMesh*                                 RopeMesh;                                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RopeMeshScale;                                    		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              RopeMeshInitialSize;                              		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RopeRotationOffset;                               		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RopeMeshSlackParam;                               		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RopeMeshGravityParam;                             		// 0x02EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               HookMesh;                                         		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HookMeshScale;                                    		// 0x02F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HookMeshOffset;                                   		// 0x0304 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    HookRotationOffset;                               		// 0x0310 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitDistanceOffset;                                		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterAttachDuration;                              		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    HookAnimSet;                                      		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HookClosedAnim;                                   		// 0x0328 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       HookOpenAnim;                                     		// 0x0330 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlockedRequiredMoveDistance;                      		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlockedRequiredMoveTime;                          		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlockedStartTime;                                 		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     BlockedStartPos;                                  		// 0x0344 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent_TA*                     RMC;                                              		// 0x0350 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstance*                           RMI;                                              		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent_TA*                   HMC;                                              		// 0x0358 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ABall_TA*                                    Ball;                                             		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RopeOrigin;                                       		// 0x0360 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RopeToTime;                                       		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentRopeLength;                                		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttachTime;                                       		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3646 ];

		return pClassPointer;
	};

	void HandleBallExploded ( class ABall_TA* InBall );
	void PickupEnd ( );
	void ScaleMeshToLocation ( struct FVector NewLocation, struct FVector TargetLocation );
	struct FVector GetPredictedBallLocation ( class ABall_TA* InBall );
	struct FVector GetTargetedLocation ( );
	void HandleCollision ( class ARBActor_TA* RB, struct FAccumulatedRigidBodyCollision Collision );
	void UpdateVisual ( float DeltaTime );
	void PickupTick ( float DeltaTime );
	void ApplyForces ( float ActiveTime );
	void DoAttach ( );
	void RemovePickupFX ( );
	void InitPickupFX ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_GrapplingHook_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Spring_TA
// 0x0148 (0x03E8 - 0x02A0)
class ASpecialPickup_Spring_TA : public ASpecialPickup_Targeted_TA
{
public:
	float                                              Force;                                            		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalForce;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Torque;                                           		// 0x02A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyRelativeForce : 1;                          		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyConstantForce : 1;                          		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBreakConstantForceWithHit : 1;                   		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bApplyRelativeConstantForce : 1;                  		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInstant : 1;                                     		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bFollowAfterHit : 1;                              		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSpringed : 1;                                    		// 0x02B4 (0x0004) [0x0000000000000000] [0x00000040] 
	struct FInterpCurveFloat                           RelativeForceCurve;                               		// 0x02B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RelativeForceNormalDirection;                     		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpringLength;                                  		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConstantForce;                                    		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           RelativeConstantForceCurve;                       		// 0x02D4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           SpringLengthCurve;                                		// 0x02E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     FromOffset;                                       		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 SpringMesh;                                       		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpringMeshScale;                                  		// 0x0304 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringMeshInitialSize;                            		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SpringRotationOffset;                             		// 0x0314 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 HittingMesh;                                      		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HittingMeshScale;                                 		// 0x0324 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HittingMeshOffset;                                		// 0x0330 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    HittingRotationOffset;                            		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitDistanceOffset;                                		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AfterSpringDuration;                              		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BallHitType;                                      		// 0x0350 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           AfterHitLengthCurve;                              		// 0x0354 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AFXActor_TA*                                 HitFXArchetype;                                   		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_TA*                                 ShootFXArchetype;                                 		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 HitSFX;                                           		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FadeOutParam;                                     		// 0x0370 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           FadeOutCurve;                                     		// 0x0378 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinSpringLength;                                  		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeldedForceScalar;                                		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeldedVerticalForce;                              		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentSpringLength;                              		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              SpringedTime;                                     		// 0x0398 (0x0004) [0x0000000000000000]              
	class UStaticMeshComponent_TA*                     SMC;                                              		// 0x039C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstance*                           SMI;                                              		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent_TA*                     HMC;                                              		// 0x03A4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInstance* >                 HMI;                                              		// 0x03A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AfterSpringTime;                                  		// 0x03B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpringToTime;                                     		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SpringOrigin;                                     		// 0x03BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SpringedLocation;                                 		// 0x03C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SpringedNormal;                                   		// 0x03D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpringedLength;                                   		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AFXActor_TA*                                 ShootFX;                                          		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3648 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void HandleCarTouchedBall ( class ABall_TA* Ball, class ACar_TA* OtherCar, unsigned char HitType );
	void ScaleSpringMeshToLocation ( struct FVector NewLocation, struct FVector TargetLoction );
	void UpdateVisual ( float DeltaTime );
	void PickupTick ( float DeltaTime );
	void eventUpdateCarTouchedEvent ( );
	void ApplyForces ( float ActiveTime );
	struct FVector GetRelativeConstantForce ( struct FVector Direction );
	struct FVector GetRelativeImpulse ( struct FVector Direction );
	void SpawnHitFX ( );
	void DoSpring ( unsigned long bFirstHit );
	void RemovePickupFX ( );
	void InitPickupFX ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_Spring_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BallLasso_TA
// 0x0008 (0x03F0 - 0x03E8)
class ASpecialPickup_BallLasso_TA : public ASpecialPickup_Spring_TA
{
public:
	struct FName                                       SpringMeshSlackParam;                             		// 0x03E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3650 ];

		return pClassPointer;
	};

	void ScaleSpringMeshToLocation ( struct FVector NewLocation, struct FVector TargetLocation );
	void DoSpring ( unsigned long bFirstHit );
};

UClass* ASpecialPickup_BallLasso_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Tornado_TA
// 0x00F4 (0x0370 - 0x027C)
class ASpecialPickup_Tornado_TA : public ASpecialPickup_TA
{
public:
	float                                              Height;                                           		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Offset;                                           		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           VerticalForceCurve;                               		// 0x0290 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RotationalForce;                                  		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           CentripetalForceCurve;                            		// 0x02A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           CarDirectionForceCurve;                           		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Torque;                                           		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FXScale;                                          		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FXOffset;                                         		// 0x02D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 TornadoMesh;                                      		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeshOffset;                                       		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MeshScale;                                        		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TornadoMIC0;                                      		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TornadoMIC1;                                      		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TornadoMIC2;                                      		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TornadoMIC3;                                      		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TornadoMIC4;                                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TornadoMIC5;                                      		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           OpacityCurve;                                     		// 0x0314 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxVelocityOffset;                                		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallMultiplier;                                   		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebugVis : 1;                                    		// 0x032C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              VelocityEase;                                     		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 BallSFX;                                          		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 CarSFX;                                           		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        SMC;                                              		// 0x033C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MIC0;                                             		// 0x0340 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC1;                                             		// 0x0344 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC2;                                             		// 0x0348 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC3;                                             		// 0x034C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC4;                                             		// 0x0350 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   MIC5;                                             		// 0x0354 (0x0004) [0x0000000000000000]              
	struct FVector                                     Vel;                                              		// 0x0358 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ARBActor_TA* >                       Affecting;                                        		// 0x0364 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3652 ];

		return pClassPointer;
	};

	void ApplyForces ( float ActiveTime );
	void RemovePickupFX ( );
	void PlayCarSFX ( class ARBActor_TA* inActor );
	void PlayBallSFX ( class ARBActor_TA* inActor );
	void TickPickupFX ( float DeltaTime );
	void PickupTick ( float DeltaTime );
	void InitPickupFX ( );
};

UClass* ASpecialPickup_Tornado_TA::pClassPointer = NULL;

// Class TAGame.CertifiedStat_TA
// 0x0010 (0x004C - 0x003C)
class UCertifiedStat_TA : public UObject
{
public:
	class UClass*                                      StatClass;                                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      RankThresholds;                                   		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3654 ];

		return pClassPointer;
	};

	struct FString GetRankLabel ( int StatValue );
	int GetRank ( int StatValue );
	struct FString GetDescription ( );
	int GetID ( );
};

UClass* UCertifiedStat_TA::pClassPointer = NULL;

// Class TAGame.CertifiedStatDatabase_TA
// 0x004C (0x0088 - 0x003C)
class UCertifiedStatDatabase_TA : public UObject
{
public:
	TArray< class UCertifiedStat_TA* >                 Stats;                                            		// 0x003C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FMap_Mirror                                 StatNameToStatID;                                 		// 0x0048 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bClickToRebuild : 1;                              		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3656 ];

		return pClassPointer;
	};

	class UCertifiedStat_TA* GetStatByName ( struct FName StatName );
	class UCertifiedStat_TA* GetStat ( int Id );
	struct FName GetStatName ( int StatId );
	int GetStatId ( struct FName StatName );
};

UClass* UCertifiedStatDatabase_TA::pClassPointer = NULL;

// Class TAGame.CollisionTestComponent_TA
// 0x0043 (0x00A8 - 0x0065)
class UCollisionTestComponent_TA : public UActorComponent
{
public:
	class AActor*                                      LineStart;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LineEnd;                                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ArchetypeToSpawn;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CachedCenter;                                     		// 0x0074 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CachedStart;                                      		// 0x0080 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CachedEnd;                                        		// 0x008C (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              Speed;                                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Step;                                             		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Time;                                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3658 ];

		return pClassPointer;
	};

};

UClass* UCollisionTestComponent_TA::pClassPointer = NULL;

// Class TAGame.CrowdActorSettings_TA
// 0x00BC (0x00F8 - 0x003C)
class UCrowdActorSettings_TA : public UObject
{
public:
	float                                              NoiseRiseRate;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseFallRate;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRandomRange                                IdleNoise;                                        		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRandomRange                                IdleNoiseDuration;                                		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCrowdNoiseModifier_TA*                      CountdownStartNoise;                              		// 0x0054 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UCrowdNoiseModifier_TA*                      CountdownEndNoise;                                		// 0x0058 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UCrowdNoiseModifier_TA*                      OvertimeStartNoise;                               		// 0x005C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UCrowdNoiseModifier_TA*                      TimeAlmostOutNoise;                               		// 0x0060 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< struct FStatCrowdNoise >                   StatNoises;                                       		// 0x0064 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	class UAkSoundCue*                                 RandomChantsSound;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRandomRange                                RandomChantsDelay;                                		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UpdateStatNoises : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FInterpCurveFloat                           BallGoalDistanceNoiseCurve;                       		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     GoalDotDirection;                                 		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinGoalDotAngle;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBallHitCrowdNoise >                BallHitNoises;                                    		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BallHitNoiseDelay;                                		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAkSoundCue* >                       CountDownSoundList;                               		// 0x00B0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAkSoundCue* >                       RoundCountDownSoundList;                          		// 0x00BC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkSoundCue*                                 OneMinRemaining;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ThirtySecondsRemaining;                           		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 CrowdStingerWin;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 CrowdStingerLose;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 CrowdStingerForfeit;                              		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 CrowdStartOverTimeSound;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 MatchEndedEncore;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MatchEndedEncoreDelay;                            		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCrowdDefenseSettings                       DefenseChant;                                     		// 0x00E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3660 ];

		return pClassPointer;
	};

};

UClass* UCrowdActorSettings_TA::pClassPointer = NULL;

// Class TAGame.CrowdNoiseModifier_TA
// 0x0014 (0x0050 - 0x003C)
class UCrowdNoiseModifier_TA : public UObject
{
public:
	float                                              ValueMin;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueMax;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DurationMin;                                      		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DurationMax;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 OneShotSound;                                     		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3662 ];

		return pClassPointer;
	};

};

UClass* UCrowdNoiseModifier_TA::pClassPointer = NULL;

// Class TAGame.DecalComponent_Constrained_TA
// 0x0008 (0x0348 - 0x0340)
class UDecalComponent_Constrained_TA : public UDecalComponent
{
public:
	float                                              WorldZ;                                           		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttachedRotation : 1;                            		// 0x0344 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3664 ];

		return pClassPointer;
	};

};

UClass* UDecalComponent_Constrained_TA::pClassPointer = NULL;

// Class TAGame.DistributionFloatSpeed_TA
// 0x0010 (0x007D - 0x006D)
class UDistributionFloatSpeed_TA : public UDistributionFloatParameterBase
{
public:
	struct FVector                                     VelocityScale;                                    		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VelocitySpace;                                    		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3666 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatSpeed_TA::pClassPointer = NULL;

// Class TAGame.DistributionFloatSteer_TA
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatSteer_TA : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3668 ];

		return pClassPointer;
	};

};

UClass* UDistributionFloatSteer_TA::pClassPointer = NULL;

// Class TAGame.DLCPack_TA
// 0x0048 (0x0084 - 0x003C)
class UDLCPack_TA : public UObject
{
public:
	unsigned char                                      GameVersion;                                      		// 0x003C (0x0001) [0x0000000000000000]              
	TArray< unsigned char >                            UnlockedPlatforms;                                		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UProductSlot_TA*                             LabelSlot;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SteamID;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PS4ID;                                            		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     XboxOneID;                                        		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SwitchID;                                         		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UProduct_TA* >                       Products;                                         		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3670 ];

		return pClassPointer;
	};

	int GetDLCLabelSlotProductID ( int SubIdx );
};

UClass* UDLCPack_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioBaseComponent_TA
// 0x0030 (0x009C - 0x006C)
class UEngineAudioBaseComponent_TA : public UActorComponent_X
{
public:
	class UAkPlaySoundComponent*                       EngineAudio;                                      		// 0x006C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkPlaySoundComponent*                       ExhaustAudio;                                     		// 0x0070 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioBlowoffComponent_TA*             BlowoffComponent;                                 		// 0x0074 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UWheelSpeedComponent_TA*                     WheelSpeed;                                       		// 0x0078 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UThrottleStateComponent_TA*                  ThrottleComponent;                                		// 0x007C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkSoundCue*                                 GearChangeSound;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaxActorsGroup_TA*                          MaxActorsGroup;                                   		// 0x0084 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AVehicle_TA*                                 Car;                                              		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __GetNormalizedRpmDelegate__Delegate;             		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0090 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3672 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void eventGearChanged ( );
	void HandleSplitScreenTypeChanged ( class UGameViewportClient_TA* ViewportClient );
	void HandleDisabled ( );
	void HandleEnabled ( );
	void InitFromAsset ( class UProductAsset_EngineAudio_TA* EngineAsset );
	void eventDetached ( );
	void eventAttached ( );
	float GetNormalizedRpmDelegate ( );
};

UClass* UEngineAudioBaseComponent_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioComponent_TA
// 0x0018 (0x00B4 - 0x009C)
class UEngineAudioComponent_TA : public UEngineAudioBaseComponent_TA
{
public:
	class UEngineAudioProfile_TA*                      Profile;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCarStateData                               OldCarState;                                      		// 0x00A0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    NativeState;                                      		// 0x00B0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3674 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	float GetNormalizedRpm ( );
	struct FName GetNativeStateName ( );
	void DestroyNativeState ( );
	void HandleDisabled ( );
	void InitFromAsset ( class UProductAsset_EngineAudio_TA* EngineAsset );
};

UClass* UEngineAudioComponent_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioREVComponent_TA
// 0x0068 (0x0104 - 0x009C)
class UEngineAudioREVComponent_TA : public UEngineAudioBaseComponent_TA
{
public:
	class UEngineAudioProfileREV_TA*                   Profile;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkRevPhysicsSimulation*                     PhysicsSim;                                       		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UEngineAudioRevSimLimiter_TA*                RevLimiter;                                       		// 0x00A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioRevSimReverse_TA*                Reverse;                                          		// 0x00A8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioRevSimVelocitySync_TA*           VelocitySync;                                     		// 0x00AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioRevSimBoost_TA*                  Boost;                                            		// 0x00B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioRevSimBoostLevel_TA*             BoostLevel;                                       		// 0x00B4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioRevSimResistance_TA*             Resistance;                                       		// 0x00B8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FAkRevSimFrame                              SimFrame;                                         		// 0x00BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FAkRevSimUpdateParams                       CachedUpdateParams;                               		// 0x00C8 (0x003C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3676 ];

		return pClassPointer;
	};

	float __EngineAudioREVComponent_TA__InitFromAsset ( );
	void __EngineAudioREVComponent_TA__InitFromAsset ( class UAkRevPhysicsSimulation* S );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void InitFromAsset ( class UProductAsset_EngineAudio_TA* EngineAsset );
};

UClass* UEngineAudioREVComponent_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioBlowoffComponent_TA
// 0x0010 (0x007C - 0x006C)
class UEngineAudioBlowoffComponent_TA : public UActorComponent_X
{
public:
	class UAkSoundCue*                                 BlowoffSound;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlowoffThrottleTime;                              		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehicle_TA*                                 Car;                                              		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FullThrottleTime;                                 		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3678 ];

		return pClassPointer;
	};

	void eventAttached ( );
};

UClass* UEngineAudioBlowoffComponent_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioPreviewBase_TA
// 0x0010 (0x004C - 0x003C)
class UEngineAudioPreviewBase_TA : public UObject
{
public:
	float                                              StartDelay;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_EngineAudio_TA*                EngineAsset;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	class UAkParamGroup*                               Ak;                                               		// 0x0044 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Throttle;                                         		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3680 ];

		return pClassPointer;
	};

	void eventGearChanged ( );
	void Update ( float DeltaTime );
	void StopPreview ( );
	void StartPreview ( );
	void Init ( class UProductAsset_EngineAudio_TA* InAsset, class UAkParamGroup* InAkParams );
};

UClass* UEngineAudioPreviewBase_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioPreview_TA
// 0x0018 (0x0064 - 0x004C)
class UEngineAudioPreview_TA : public UEngineAudioPreviewBase_TA
{
public:
	class UEngineAudioProfile_TA*                      Profile;                                          		// 0x004C (0x0004) [0x0000000000000000]              
	struct FPointer                                    NativeState;                                      		// 0x0050 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FInterpCurveFloat                           GearToWheelSpeedAccel;                            		// 0x0054 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3682 ];

		return pClassPointer;
	};

	void DestroyNativeState ( );
	void UpdateNativeState ( float DeltaTime );
	void Init ( class UProductAsset_EngineAudio_TA* InAsset, class UAkParamGroup* InAkParams );
};

UClass* UEngineAudioPreview_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioProfileBase_TA
// 0x0010 (0x004C - 0x003C)
class UEngineAudioProfileBase_TA : public UObject
{
public:
	float                                              BlowoffThrottleTime;                              		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelForwardSpeedInterpRate;                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSideSpeedInterpRate;                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWheelSpeed;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3684 ];

		return pClassPointer;
	};

};

UClass* UEngineAudioProfileBase_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioProfile_TA
// 0x004C (0x0098 - 0x004C)
class UEngineAudioProfile_TA : public UEngineAudioProfileBase_TA
{
public:
	TArray< struct FAudioGear >                        Gears;                                            		// 0x004C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              GearSwitchTime;                                   		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMAccelStart;                                    		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMAccelEnd;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMAccelClutched;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMDecelClutched;                                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMMaxClutched;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMAccelFactor;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMDecelFactor;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMAccelBoostStart;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMAccelBoostEnd;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMShiftUpBoost;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RPMMaxLoad;                                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineLoadSmoothFactor;                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirMaxThrottleTime;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RevLimitRPM;                                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RevLimitRPMDecel;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3686 ];

		return pClassPointer;
	};

};

UClass* UEngineAudioProfile_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioProfileREV_TA
// 0x0020 (0x006C - 0x004C)
class UEngineAudioProfileREV_TA : public UEngineAudioProfileBase_TA
{
public:
	struct FAkRevSimPhysicsControls                    Controls;                                         		// 0x004C (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkRevPhysicsSimulation*                     PhysicsSim;                                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UEngineAudioRevSimLimiter_TA*                RevLimiter;                                       		// 0x0068 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3688 ];

		return pClassPointer;
	};

};

UClass* UEngineAudioProfileREV_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioRevSimBoost_TA
// 0x0010 (0x0058 - 0x0048)
class UEngineAudioRevSimBoost_TA : public UComponent
{
public:
	float                                              InterpTime;                                       		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpScale;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpExp;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActiveTime;                                       		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3690 ];

		return pClassPointer;
	};

};

UClass* UEngineAudioRevSimBoost_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioRevSimBoostLevel_TA
// 0x0020 (0x0068 - 0x0048)
class UEngineAudioRevSimBoostLevel_TA : public UComponent
{
public:
	float                                              ActivatedInterpTime;                              		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InactiveInterpTime;                               		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpExp;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivatedSpeedSq;                                 		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpTime;                                       		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpValue;                                      		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpTimeElapsed;                                		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetValue;                                      		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3692 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
};

UClass* UEngineAudioRevSimBoostLevel_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioRevSimLimiter_TA
// 0x0018 (0x0060 - 0x0048)
class UEngineAudioRevSimLimiter_TA : public UComponent
{
public:
	float                                              LimitTime;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideSpeedThresh;                                  		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecelScale;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirMaxThrottleTime;                               		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeRemaining;                                    		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeActiveInAir;                                  		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3694 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
};

UClass* UEngineAudioRevSimLimiter_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioRevSimResistance_TA
// 0x0024 (0x006C - 0x0048)
class UEngineAudioRevSimResistance_TA : public UComponent
{
public:
	float                                              Clutched;                                         		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZScale;                                           		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           SideSpeedCurve;                                   		// 0x0050 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SideFriction;                                     		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZFriction;                                        		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SideAngle;                                        		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3696 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
};

UClass* UEngineAudioRevSimResistance_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioRevSimReverse_TA
// 0x0004 (0x004C - 0x0048)
class UEngineAudioRevSimReverse_TA : public UComponent
{
public:
	float                                              ReverseGearScale;                                 		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3698 ];

		return pClassPointer;
	};

};

UClass* UEngineAudioRevSimReverse_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioRevSimVelocitySync_TA
// 0x001C (0x0064 - 0x0048)
class UEngineAudioRevSimVelocitySync_TA : public UComponent
{
public:
	float                                              NoThrottleTime;                                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoThrottleTimeElapsed;                            		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealToSimScale;                                   		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpSpeed;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTime;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTimeLeft;                                   		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FirstGearThrottleThreshold;                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3700 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
};

UClass* UEngineAudioRevSimVelocitySync_TA::pClassPointer = NULL;

// Class TAGame.EngineShare_TA
// 0x0078 (0x0168 - 0x00F0)
class UEngineShare_TA : public UEngineShare_X
{
public:
	unsigned long                                      bEnableClientPrediction : 1;                      		// 0x00F0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClientPhysicsUpdate : 1;                         		// 0x00F0 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisableClientCorrections : 1;                    		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bColorBlind : 1;                                  		// 0x00F0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	class UReplayManager_TA*                           ReplayManager;                                    		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USaveGameManager_TA*                         SystemSaveGameManager;                            		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAdManager_TA*                               AdManager;                                        		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineProductStore_TA*                      OnlineProductStore;                               		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PhysicsFramerate;                                 		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxPhysicsSubsteps;                               		// 0x0108 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxUploadedClientFrames;                          		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxClientReplayFrames;                            		// 0x0110 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                PhysicsFrame;                                     		// 0x0114 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderAlpha;                                      		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReplicatedPhysicsFrame;                           		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                DirtyPhysicsFrame;                                		// 0x0120 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UITickNotify_TA* >                   TickNotifies;                                     		// 0x0124 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                TickNotifyIndex;                                  		// 0x0130 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     ShellArchetypePath;                               		// 0x0134 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class USystemSettingsManager_TA*                   SystemSettingsManager;                            		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBugReportTime;                                		// 0x0144 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FScriptDelegate                             __EventPreAsyncTick__Delegate;                    		// 0x0148 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x014C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventColorBlindChanged__Delegate;               		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x015C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3702 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void SetColorBlind ( unsigned long bIsColorBlind );
	float GetBulletFixedDeltaTime ( );
	void RunPhysicsStep ( int BulletSceneIndex, float DeltaTime );
	void DrawBuildInfo ( class UCanvas* C );
	void UpdateReplicatedPhysicsFrame ( int ServerFrame, float Ping );
	void DebugDedicatedServer ( float ForHowLong );
	float GetPhysicsTime ( );
	void SetTickNotify ( class UITickNotify_TA* Obj, unsigned long bNotify );
	class UObject* LoadStandaloneObject ( class UClass* ExpectedClass, struct FName ObjectName, int LoadFlags );
	void InitOnlineGame ( class UOnlineSubsystem* NewOnlineSubsystem );
	void eventRecordAppStart ( );
	void eventInit ( );
	class USaveGameManager_TA* GetSystemSaveGameManager ( );
	struct FString GetVersionString ( );
	void EventColorBlindChanged ( );
	void EventPreAsyncTick ( float DeltaTime );
};

UClass* UEngineShare_TA::pClassPointer = NULL;

// Class TAGame.Errors_TA
// 0x0050 (0x00A4 - 0x0054)
class UErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  ReplayImport;                                     		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  ReplayExport;                                     		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  ReplayNoReplay;                                   		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  ReplayExportNoSpace;                              		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  UpdateRequired;                                   		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TrialLogin;                                       		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TradeInMaxed;                                     		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TransactionInProgress;                            		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  OrderNotFound;                                    		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  InventoryOutOfSync;                               		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TimedOut;                                         		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TrainingModeNotFound;                             		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TrainingModeInvalidFavoritedCodes;                		// 0x0084 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TrainingModeListPlayerTrainingFailed;             		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TrainingModeAddFailed;                            		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  TrainingModeUpdateFailed;                         		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  CodeIsNotValid;                                   		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  CodeHasBeenRedeemed;                              		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  CodeMaxIncorrectAttempts;                         		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  GarageSlotIsLocked;                               		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3704 ];

		return pClassPointer;
	};

};

UClass* UErrors_TA::pClassPointer = NULL;

// Class TAGame.FeatureFilterTest_TA
// 0x0000 (0x003C - 0x003C)
class UFeatureFilterTest_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3706 ];

		return pClassPointer;
	};

	int GetImplementationMacro ( );
	void Test ( );
};

UClass* UFeatureFilterTest_TA::pClassPointer = NULL;

// Class TAGame.FlockActor_TA
// 0x0058 (0x0254 - 0x01FC)
class AFlockActor_TA : public AActor
{
public:
	class UStaticMesh*                                 AgentMesh;                                        		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UInstancedStaticMeshComponent*               FlockInstancedMesh;                               		// 0x0200 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                FlockSize;                                        		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SeperationWeight;                                 		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FlockRadius;                                      		// 0x020C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AgentSpeed;                                       		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SeperationIdealDistance;                          		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASplineActor*                                Spline;                                           		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnSpreadDistanceAlongSpline;                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRestartTimerEnabled : 1;                         		// 0x0228 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UpdateFlockMovement : 1;                          		// 0x0228 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ResetFlockOnToggleUpdateMovement : 1;             		// 0x0228 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              WaitTimeInSeconds;                                		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAgentScale;                                    		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAgentScale;                                    		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentRestartTime;                               		// 0x0238 (0x0004) [0x0000000000000000]              
	TArray< struct FFlockAgent >                       Agents;                                           		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     AverageAgentPosition;                             		// 0x0248 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3708 ];

		return pClassPointer;
	};

};

UClass* AFlockActor_TA::pClassPointer = NULL;

// Class TAGame.ForceVolume_TA
// 0x0014 (0x023C - 0x0228)
class AForceVolume_TA : public AVolume
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                          		// 0x0228 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      ForceDirection;                                   		// 0x022C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ConstantForceMode;                                		// 0x022D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EnterForceMode;                                   		// 0x022E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConstantForce;                                    		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnterForce;                                       		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CustomForceDirection;                             		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3710 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	struct FVector GetForceDirection ( class ARBActor_TA* RB );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPrePhysicsStep ( float DeltaTime );
};

UClass* AForceVolume_TA::pClassPointer = NULL;

// Class TAGame.FpsBucketRecorder_TA
// 0x0017 (0x007C - 0x0065)
class UFpsBucketRecorder_TA : public UActorComponent
{
public:
	TArray< struct FFpsBucketData >                    Buckets;                                          		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MinFPS;                                           		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                MaxFPS;                                           		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3712 ];

		return pClassPointer;
	};

	struct FFpsBucketData GetTotalAverage ( );
	TArray< struct FFpsBucketData > GetAverages ( );
};

UClass* UFpsBucketRecorder_TA::pClassPointer = NULL;

// Class TAGame.FXActor_GameEditorActor_TA
// 0x0014 (0x026C - 0x0258)
class AFXActor_GameEditorActor_TA : public AFXActor_X
{
public:
	float                                              SpeedMultiplier;                                  		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             EditingState;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	struct FVector                                     PrevLocation;                                     		// 0x0260 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3714 ];

		return pClassPointer;
	};

	void HandleSelectionChange ( class UInterface_GameEditor_TA* EditorObject, unsigned long bSelected );
	void TickFX ( float DeltaTime );
	void PostBeginPlay ( );
};

UClass* AFXActor_GameEditorActor_TA::pClassPointer = NULL;

// Class TAGame.FXActor_TA
// 0x0014 (0x026C - 0x0258)
class AFXActor_TA : public AFXActor_X
{
public:
	class UFXActorEvent_X*                             HideWorldUIState;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	TArray< class UFXActorEvent_X* >                   TeamStates;                                       		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ULocalPlayerAudioParamsComponent_TA*         LocalPlayerAudioParamsComponent;                  		// 0x0268 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3716 ];

		return pClassPointer;
	};

	void ApplyPaint ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint );
	void HandleHideWorldUIChanged ( class UGameShare_TA* G );
	void SetCarActorParam ( class ACar_TA* InCar );
	void eventOnOwnerChanged ( );
	void PostBeginPlay ( );
};

UClass* AFXActor_TA::pClassPointer = NULL;

// Class TAGame.FXActor_Ball_TA
// 0x004C (0x02B8 - 0x026C)
class AFXActor_Ball_TA : public AFXActor_TA
{
public:
	float                                              SuperSonicSpeed;                                  		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGoalProximityDistance;                         		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallFadeInSpeed;                                  		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallFadeOutSpeed;                                 		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailOpacityLerpSpeed;                            		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTrailOpacity;                              		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallFadeSpeed;                                    		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallFadeOpacity;                                  		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShockwaveParamMin;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveParamMax;                                		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShockwaveParamTime;                               		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             InAirState;                                       		// 0x0298 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             SuperSonicState;                                  		// 0x029C (0x0004) [0x0000000000000000]              
	class ABall_TA*                                    Ball;                                             		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitTeamNum;                                       		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TouchingWorldTime;                                		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInAir : 1;                                       		// 0x02AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSuperSonic : 1;                                  		// 0x02AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              CurrentTrailDilation;                             		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxTrailDilation;                                 		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3718 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void UpdateBallPenetration ( );
	void HandleBallExploded ( class ABall_TA* InBall );
	void HandleBallGameEventSet ( class ABall_TA* InBall );
	void ClearBallPositionMaterials ( );
	void SetBallPositionMaterials ( struct FLinearColor LocParam, float ShockwaveParam );
	void UpdateBallPositionMaterials ( );
	float GetClosestLocalPlayerDistance ( );
	void UpdateColor ( );
	void UpdateGoalProximity ( );
	void UpdateBallFade ( float DeltaTime );
	void StartBallFadeOut ( );
	void StartBallFadeIn ( );
	void TickFX ( float DeltaTime );
	void PostBeginPlay ( );
};

UClass* AFXActor_Ball_TA::pClassPointer = NULL;

// Class TAGame.FXActor_BallBreakout_TA
// 0x0040 (0x02F8 - 0x02B8)
class AFXActor_BallBreakout_TA : public AFXActor_Ball_TA
{
public:
	class UAkSoundCue*                                 MaxChargeSFX;                                     		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 SwitchTeamSFX;                                    		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 IdleSFX;                                          		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ResetSFX;                                         		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAkSoundCue* >                       ChargeSFX;                                        		// 0x02C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAkSoundCue* >                       DamageSFX;                                        		// 0x02D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UFXActorEvent_X* >                   DamageEvents;                                     		// 0x02E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABall_Breakout_TA*                           BallBreakout;                                     		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastDamage;                                       		// 0x02F0 (0x0004) [0x0000000000000000]              
	float                                              LastNoDamageHit;                                  		// 0x02F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3720 ];

		return pClassPointer;
	};

	void UpdateGoalProximity ( );
	void UpdateBallFade ( float DeltaTime );
	void StartBallFadeOut ( );
	void StartBallFadeIn ( );
	void HandleAppliedDamage ( class ABall_Breakout_TA* InBall, struct FAppliedBreakoutDamage Damage );
	void HandleNoDamageHit ( class ABall_Breakout_TA* InBall );
	void HandleLastTeamTouchChanged ( class ABall_Breakout_TA* InBall, unsigned char InLastTeamTouch );
	void HandleDamageIndexChanged ( class ABall_Breakout_TA* InBall, int InDamageIndex );
	void PostBeginPlay ( );
};

UClass* AFXActor_BallBreakout_TA::pClassPointer = NULL;

// Class TAGame.FXActor_Boost_TA
// 0x0078 (0x02E4 - 0x026C)
class AFXActor_Boost_TA : public AFXActor_TA
{
public:
	TArray< struct FParticleParameterSet >             ParametersPerExtraBoostSockets;                   		// 0x026C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FParticleBodyParameterSet >         BodyParticleParameters;                           		// 0x0278 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkSoundCue*                                 DryFireSound;                                     		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CarBoostGlowColor;                                		// 0x0288 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimatedMaterialMesh >             BoostMeshMaterialParams;                          		// 0x0298 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FBoostMeshMaterialOverride >        BoostMeshMaterialOverrides;                       		// 0x02A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBoostMesh_TA*                               BoostMeshArchetype;                               		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBoostMesh_TA*                               BoostMesh;                                        		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRandomRange                                BoostMeshFadeInTime;                              		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRandomRange                                BoostMeshFadeOutTime;                             		// 0x02C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPreviewParticleOverride >          PreviewParticleOverrides;                         		// 0x02C8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bWasBoosting : 1;                                 		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWasInputBoosting : 1;                            		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              MaxBoostMeshMaterialTime;                         		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AVehicle_TA*                                 Vehicle;                                          		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarPreviewActor_TA*                         CarPreview;                                       		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3722 ];

		return pClassPointer;
	};

	void HandleCarDemolished ( class ACar_TA* Car, struct FDemolishData Data );
	void ApplyPaint ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint );
	void ApplyPreviewParticleOverrides ( );
	void StopAllEffects ( );
	void BoostMeshFadeOut ( );
	void BoostMeshFadeIn ( );
	void ResetBoostMeshElapsedTime ( float Value );
	void CopyBoostMeshDistributionParameters ( class AFXActor_Boost_TA* Archetype );
	void UpdateBoostMeshMaterials ( float DeltaTime );
	void InitializeBoostMesh ( );
	void CreateBoostMeshMaterials ( class AFXActor_X* FXActor );
	void Inherit ( class AFXActor_X* Other );
	bool eventIsPRInfoInGameState ( struct FName GameState );
	void TickFX ( float DeltaTime );
	void CopyFrom ( class AFXActor_X* Other );
	void SetBodyParticleParams ( class AFXActor_X* BodyFXActor );
	void InitExtraBoostComponents ( class UProductAsset_Body_TA* BodyAsset );
	void DuplicateAttachment ( class UProductAsset_Body_TA* BodyAsset, int AttachmentIdx );
	void SetParticleParams ( struct FName AttachmentName, TArray< struct FParticleSysParam > Params );
	void SetAttachmentActor ( class AActor* AttachToActor );
};

UClass* AFXActor_Boost_TA::pClassPointer = NULL;

// Class TAGame.FXActor_BreakoutPlatform_TA
// 0x005C (0x02C8 - 0x026C)
class AFXActor_BreakoutPlatform_TA : public AFXActor_TA
{
public:
	class UMaterialInterface*                          PlatformMaterial;                                 		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          RaysMaterial;                                     		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LocationParam;                                    		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPlatformParam >                    DamagedParams;                                    		// 0x027C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPlatformParam >                    BrokenParams;                                     		// 0x0288 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAkSoundCue*                                 DamageSFX;                                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 DirectBreakSFX;                                   		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 IndirectBreakSFX;                                 		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageDistanceSpeed;                              		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             DamagedState;                                     		// 0x02A4 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             BrokenState;                                      		// 0x02A8 (0x0004) [0x0000000000000000]              
	class ABreakOutActor_Platform_TA*                  BreakoutPlatform;                                 		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   RaysMIC;                                          		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DamageState;                                      		// 0x02B8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageTime;                                       		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BrokenTime;                                       		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemainingTime;                                    		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3724 ];

		return pClassPointer;
	};

	void SetTeamColor ( struct FLinearColor TeamColor );
	void PlayDestroyIndirectSFX ( );
	void PlayDestroyDirectSFX ( );
	void PlayDamageSFX ( );
	void UpdateParamsAtTime ( TArray< struct FPlatformParam > Params, float Time );
	void UpdateDamageParams ( float DeltaTime );
	void TickFX ( float DeltaTime );
	void HandleDamageStateChanged ( class ABreakOutActor_Platform_TA* Platform, struct FBreakoutDamageState InState );
	void SetAttachmentActor ( class AActor* AttachToActor );
};

UClass* AFXActor_BreakoutPlatform_TA::pClassPointer = NULL;

// Class TAGame.FXActor_Car_TA
// 0x0090 (0x02FC - 0x026C)
class AFXActor_Car_TA : public AFXActor_TA
{
public:
	class UEffectsMap_X*                               WheelEffectsMap;                                  		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkWheelImpactSound;                               		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkWheelDriveSound;                                		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkEnterSupersonicSound;                           		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkLoopSupersonicSound;                            		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinImpactMomentum;                                		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AkImpactTypeKey;                                  		// 0x0284 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AkImpactIntensityKey;                             		// 0x028C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                WheelImpactShake;                                 		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      WheelImpactForceFeedback;                         		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           ShakeScaleCurve;                                  		// 0x029C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystem*                             SupersonicWheelTemplate;                          		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostGlowRate;                                    		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UShakeComponent_X*                           ShakeComponent;                                   		// 0x02B4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AVehicle_TA*                                 Vehicle;                                          		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bThrottle : 1;                                    		// 0x02BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInAir : 1;                                       		// 0x02BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBrake : 1;                                       		// 0x02BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWasBoosting : 1;                                 		// 0x02BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bWasBoostFlying : 1;                              		// 0x02BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bWasSuperSonic : 1;                               		// 0x02BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x02BC (0x0004) [0x0000000000000000] [0x00000040] 
	class UFXActorEvent_X*                             ThrottleState;                                    		// 0x02C0 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             SuperSonicState;                                  		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             InAirState;                                       		// 0x02C8 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             BoostState;                                       		// 0x02CC (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             BoostPreviewState;                                		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             BoostFlyState;                                    		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UPhysicalMaterial*                           ContactPhysMat;                                   		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterialProperty_TA*                ContactPhysMatProp;                               		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FWheelFX >                          WheelEffects;                                     		// 0x02E0 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UParticleSystem*                             WheelEffectsParticle;                             		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCarMeshComponent_TA*                        CarMesh;                                          		// 0x02F0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaxActorsGroup_TA*                          MaxActorsGroup;                                   		// 0x02F4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              BoostGlow;                                        		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3726 ];

		return pClassPointer;
	};

	void PlayWheelLandCameraShake ( float ImpactSpeed );
	void SetWheelEffectActive ( int WheelIdx, unsigned long bEffectActive );
	void SetContactPhysMat ( class UPhysicalMaterial* NewPhysMat );
	void UpdateContactPhysMat ( );
	void PlaySpawnFX ( class ACar_TA* Car );
	void eventSetBraking ( unsigned long bNewBraking );
	void eventTickFX ( float DeltaTime );
	void HandleTeamChanged ( class ACar_TA* InCar );
	class AFXActor_TA* CreateTrailFXActor ( class UProductAsset_SupersonicTrail_TA* TrailAsset );
	void InitSupersonicFX ( class ACar_TA* Car );
	void InitWheelBones ( class ACar_TA* Car );
	void HandleVehicleSetup ( class ACar_TA* Car );
	void StopWheelEffects ( );
	void StopAllEffects ( );
	void HandleDisabled ( );
	void HandleEnabled ( );
	void eventDestroyed ( );
	void PostBeginPlay ( );
};

UClass* AFXActor_Car_TA::pClassPointer = NULL;

// Class TAGame.GameData_TA
// 0x0124 (0x0160 - 0x003C)
class UGameData_TA : public UObject
{
public:
	class UProductDatabase_TA*                         Products;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UXPManager_TA*                               XPManager;                                        		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTeamSize;                                      		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UProductSlot_TA* >                   ProductSlots;                                     		// 0x0048 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UProductSlot_TA*                             BodySlot;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             SkinSlot;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             WheelSlot;                                        		// 0x005C (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             BoostSlot;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             AntennaSlot;                                      		// 0x0064 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             HatSlot;                                          		// 0x0068 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             FrontSlot;                                        		// 0x006C (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             PaintFinishSlot;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             BotSlot;                                          		// 0x0074 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             LogoSlot;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             UnderGlowSlot;                                    		// 0x007C (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             PremiumInventorySlot;                             		// 0x0080 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             CustomFinishSlot;                                 		// 0x0084 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             EngineAudioSlot;                                  		// 0x0088 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             SupersonicTrailSlot;                              		// 0x008C (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             GoalExplosionSlot;                                		// 0x0090 (0x0004) [0x0000000000000000]              
	class UProductSlot_TA*                             PlayerBannerSlot;                                 		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           TeamArchetypePaths;                               		// 0x0098 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< class ATeam_TA* >                          TeamArchetypes;                                   		// 0x00A4 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     GameModeListPath;                                 		// 0x00B0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UGameModeList_TA*                            GameModeList;                                     		// 0x00BC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FLoadoutData                                DefaultLoadouts[ 0x2 ];                           		// 0x00C0 (0x0068) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FClientLoadoutData                          DefaultClientLoadout;                             		// 0x0128 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UCarColorSet_TA*                             CustomColorSet;                                   		// 0x0134 (0x0004) [0x0000000000000000]              
	class UCarColorSet_TA*                             ClubColorSet;                                     		// 0x0138 (0x0004) [0x0000000000000000]              
	class UCarColorSet_TA*                             PlayerBannerColorSet;                             		// 0x013C (0x0004) [0x0000000000000000]              
	class UMapList_TA*                                 MapList;                                          		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGlobalLookupTexture_TA*                     GlobalLookupTexture;                              		// 0x0144 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            OnlineProductAttributes;                          		// 0x0148 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class USkinOverrideTable_TA*                       SkinOverrideTable;                                		// 0x0154 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPaintDatabase_TA*                           PaintDB;                                          		// 0x0158 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCertifiedStatDatabase_TA*                   CertifiedStatDB;                                  		// 0x015C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3728 ];

		return pClassPointer;
	};

	struct FString GetMapName ( unsigned long bLocalize );
	TArray< class UProductSlot_TA* > GetDefaultLoadoutSlots ( );
	TArray< class UProductSlot_TA* > GetGarageLoadoutSlots ( );
	bool CanProductBeInSlot ( class UProduct_TA* Product, class UProductSlot_TA* Slot );
	class UProductDatabase_TA* GetProductDB ( );
	void SetDefaultTeamColors ( );
	void SetGlobalTeamColors ( TArray< struct FLinearColor > Colors );
};

UClass* UGameData_TA::pClassPointer = NULL;

// Class TAGame.GameEngine_TA
// 0x0000 (0x07DC - 0x07DC)
class UGameEngine_TA : public UGameEngine_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3730 ];

		return pClassPointer;
	};

	struct FString GetBuildInfo ( struct FString Key );
	float GetAbsoluteTime ( );
};

UClass* UGameEngine_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_TA
// 0x02D4 (0x04D0 - 0x01FC)
class AGameEvent_TA : public AActor
{
public:
	class UMatchType_TA*                               MatchType;                                        		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MatchTypeClass;                                   		// 0x0200 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       EventType;                                        		// 0x0204 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       MatchTypeName;                                    		// 0x020C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      GameMode;                                         		// 0x0214 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedStateIndex;                             		// 0x0215 (0x0001) [0x0000000000002022]              ( CPF_Const | CPF_Net | CPF_Transient )
	class ACar_TA*                                     CarArchetype;                                     		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CountdownTime;                                    		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FinishTime;                                       		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMultiplayer : 1;                                 		// 0x0224 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFillWithAI : 1;                                  		// 0x0224 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowReadyUp : 1;                                		// 0x0224 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRestartingMatch : 1;                             		// 0x0224 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRandomizedBotLoadouts : 1;                       		// 0x0224 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHasLeaveMatchPenalty : 1;                        		// 0x0224 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCanVoteToForfeit : 1;                            		// 0x0224 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableAimAssist : 1;                            		// 0x0224 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	int                                                MinPlayers;                                       		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPlayers;                                       		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x0230 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AAIManager_TA*                               AIManagerArchetype;                               		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AAIManager_TA*                               AIManager;                                        		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APylon_Soccar_TA*                            Pylon;                                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AAIController_TA*                            BotArchetype;                                     		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BotSkill;                                         		// 0x024C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RespawnTime;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMutator_TA* >                       DefaultMutators;                                  		// 0x0254 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMutator_TA* >                       Mutators;                                         		// 0x0260 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MatchTimeDilation;                                		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AHUD*                                        HUDArchetype;                                     		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPlayerRespawnTime >                PlayersAwaitingRespawn;                           		// 0x0274 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APlayerController_TA*                        Activator;                                        		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     ActivatorCar;                                     		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class AController* >                       Players;                                          		// 0x0288 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APRI_TA* >                           PRIs;                                             		// 0x0294 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ACar_TA* >                           Cars;                                             		// 0x02A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APlayerController_TA* >              LocalPlayers;                                     		// 0x02AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                StartPointIndex;                                  		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DeprecatedIndexToState;                           		// 0x02BC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       ReplicatedStateName;                              		// 0x02C8 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMessage_TA*                                 GameFullMessage;                                  		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 OtherActiveMessage;                               		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 NotEnoughPlayersMessage;                          		// 0x02D8 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 TooManyPlayersMessage;                            		// 0x02DC (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 NotPartyLeaderMessage;                            		// 0x02E0 (0x0004) [0x0000000000000000]              
	TArray< class UMessage_TA* >                       CountdownMessages;                                		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMessage_TA*                                 GoMessage;                                        		// 0x02F0 (0x0004) [0x0000000000000000]              
	TArray< class UMessage_TA* >                       ReplacingBotCountdownMessages;                    		// 0x02F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMessage_TA*                                 ReplacingBotGoMessage;                            		// 0x0300 (0x0004) [0x0000000000000000]              
	TArray< struct FPlayerChatMessage >                ChatHistory;                                      		// 0x0304 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                GameStateTimeRemaining;                           		// 0x0310 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReplicatedGameStateTimeRemaining;                 		// 0x0314 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              IdleKickTime;                                     		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleKickWarningTime;                              		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           BotSkillByPlayerSkillCurve;                       		// 0x0320 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      BannedPlayers;                                    		// 0x0330 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APRI_TA*                                     GameOwner;                                        		// 0x033C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FCustomMatchSettings                        MatchSettings;                                    		// 0x0340 (0x0060) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     RichPresenceString;                               		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FReportedPlayerInfo >               ReportedPlayers;                                  		// 0x03AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMatchAdminComponent_TA*                     MatchAdmin;                                       		// 0x03B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UListenServer_TA*                            ListenServer;                                     		// 0x03BC (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventMatchStarted__Delegate;                    		// 0x03C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x03C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameStateChanged__Delegate;                		// 0x03D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x03D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameStateTimeUpdated__Delegate;            		// 0x03E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x03E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFinished__Delegate;                        		// 0x03F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x03F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDestroyed__Delegate;                       		// 0x0400 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0404 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerRestarted__Delegate;                 		// 0x0410 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0414 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerAdded__Delegate;                     		// 0x0420 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0424 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerRemoved__Delegate;                   		// 0x0430 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x0434 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarAdded__Delegate;                        		// 0x0440 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0444 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarRemoved__Delegate;                      		// 0x0450 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x0454 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPenaltyChanged__Delegate;                  		// 0x0460 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x0464 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCanVoteForfeitChanged__Delegate;           		// 0x0470 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x0474 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCountDownTimeUpdated__Delegate;            		// 0x0480 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData12[ 0x4 ];                             		// 0x0484 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOwnerUpdated__Delegate;                		// 0x0490 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData13[ 0x4 ];                             		// 0x0494 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchTypeSet__Delegate;                    		// 0x04A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData14[ 0x4 ];                             		// 0x04A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLocalPlayersChanged__Delegate;             		// 0x04B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData15[ 0x4 ];                             		// 0x04B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchSettingsChanged__Delegate;            		// 0x04C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData16[ 0x4 ];                             		// 0x04C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3732 ];

		return pClassPointer;
	};

	void __GameEvent_TA__PostBeginPlay ( class UOnlineGameDedicatedServer_X* _, struct FCustomMatchSettings Settings );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	bool SuppressModalDialogs ( );
	bool ShouldShowBallIndicator ( );
	class UGameMode_TA* GetGameMode ( );
	void HandlePlayerBanStatusResponse ( class URPC_GetBanStatus_TA* RPC );
	class APlayerController_TA* FindPCForUniqueID ( struct FUniqueNetId PlayerID );
	void CheckForBannedPlayers ( );
	bool AllowSplitScreenPlayer ( );
	void AddPlayerChatMessage ( struct FUniqueNetId PlayerID, unsigned char ChatChannel, class ATeamInfo* Team, struct FString Message );
	void ConditionalStartSpectatorMatch ( );
	struct FString LocalizePresence ( struct FString GameDataString );
	void GetPresenceStatus ( struct FString* Out_PresenceString, struct FString* Out_GameDataString );
	struct FName GetMatchTypeName ( );
	bool IsPlayingLan ( );
	bool IsPlayingOffline ( );
	bool IsPlayingPrivate ( );
	bool IsPlayingPublic ( );
	bool IsOnlineMultiplayer ( );
	void CreateMatchType ( struct FString Options );
	bool AllPlayersSelectedTeam ( );
	bool CanQueSaveReplay ( );
	void ForceMatchStart ( );
	void ConditionalStartMatch ( );
	bool DisableStatXP ( );
	bool GiveExtraXP ( );
	void GenerateItemDrops ( );
	void SaveLocalPlayerStats ( );
	bool CanUseBallCam ( );
	bool HandleNextGame ( );
	struct FName GetDesiredSoundGameMode ( );
	void UpdateSoundGameMode ( );
	void UpdateSoundState ( );
	struct FName GetDesiredSoundState ( );
	void SetMaxPlayers ( int InMaxPlayers );
	void SetRestartingMatch ( unsigned long bRestart );
	class UIOnlineGameHost_X* GetOnlineGameHost ( );
	class UOnlineGameLanServer_X* GetOnlineGameLanServer ( );
	class UOnlineGameDedicatedServer_TA* GetOnlineGameDedicatedServer ( );
	bool ShouldBeFullScreen ( );
	bool IsFinished ( );
	void OnAllPlayersReady ( );
	void CheckPlayersReady ( );
	void SetAllowReadyUp ( unsigned long bAllow, unsigned long bReadySpectators );
	bool IsPlayerIdle ( class APlayerController* PC, float Time );
	bool IsConnectionIdle ( class UNetConnection* NetConnection, float Time );
	void KickSplitscreenIdlers ( );
	void KickIdlers ( );
	void StopIdleKickTimer ( );
	void StartIdleKickTimer ( float OffsetTime );
	void BroadcastCountdownMessage ( int Seconds );
	void BroadcastGoMessage ( );
	bool AllowShutdown ( );
	bool AllowScoreboard ( );
	void HandleCarAddCarComponent ( class UObject* O );
	float GetRealDeltaTime ( float ElapsedTime );
	void SetTimeDilation ( float NewTimeDilation );
	void ClearRespawnList ( );
	void RemovePlayerFromRespawnList ( class AController* C );
	int GetRespawnTime ( );
	void AddControllerToRespawnList ( class AController* InController );
	void AddPlayerToRespawnList ( class APawn* Car );
	void HandleCarDemolished ( class ACar_TA* Car, struct FDemolishData Data );
	void HandleCarDestroyed ( class APawn_X* Car );
	void RemoveCar ( class ACar_TA* Car );
	void AddCar ( class ACar_TA* Car );
	void TickRespawnTime ( float DeltaTime );
	void Tick ( float DeltaTime );
	void SetBotSkill ( float NewSkill );
	class AAIController_TA* SpawnBot ( );
	class UProductAsset_Bot_TA* ChooseBotAsset ( class AAIController_TA* Bot );
	bool MoveToGround ( class AActor* Mover, float HeightCheck );
	void SetAllDriving ( unsigned long bDriving );
	void eventDestroyed ( );
	void OnFinished ( );
	void StartEvent ( );
	void StartCountDown ( );
	void StartInitialCountDown ( );
	void OnGameStateTimeLapsed ( );
	void OnGameStateTimeUpdated ( );
	void UpdateGameStateTime ( );
	void SetGameStateTimeRemaining ( int StateTime, unsigned long bFromReplication );
	void SetGameStateTime ( int StateTime );
	void GotoGameState ( struct FName StateName );
	void OnPlayerRestarted ( class ACar_TA* PlayerCar );
	void TeleportCar ( class ACar_TA* PlayerCar );
	void OnCarSpawned ( class ACar_TA* NewCar );
	class ACar_TA* SpawnCar ( class AController* NewPlayer, struct FVector SpawnLoc, struct FRotator SpawnRot );
	bool SpotIsEncroached ( struct FVector Spot );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
	void RandomizeSpawnPoints ( );
	bool RestartPlayer ( class AController* NewPlayer );
	bool PlayerCanRestart ( class AController* aPlayer );
	void RestartPlayers ( );
	void RemoveLocalPlayer ( class APlayerController_TA* Player );
	void AddLocalPlayer ( class APlayerController_TA* Player );
	void RemovePRI ( class APRI_TA* PRI );
	void AddPRI ( class APRI_TA* PRI );
	void BanPlayerID ( struct FUniqueNetId PlayerID );
	void BanConnection ( class UNetConnection* Connection );
	void OnPlayerRemoved ( class AController* OldPlayer );
	void RemovePlayer ( class AController* Player );
	int GetMaxHumans ( );
	int GetNumHumans ( );
	void AddPlayers ( TArray< class AController* > PlayersToAdd );
	bool ReplacePlayer ( class APRI_TA* NewPlayer, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity );
	bool ReplaceBot ( class APRI_TA* PRI, class APRI_TA* Replace, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity );
	bool FindBotReplacement ( class APRI_TA* PRI );
	void UpdateBotCount ( );
	void TimerUpdateBotCount ( );
	void HandleSelectedLoadout ( class APRI_TA* PlayerPRI );
	void OnPlayerAdded ( class AController* NewPlayer );
	bool AddPlayer ( class AController* Player, class UMessage_TA** ErrorMsg );
	bool IsAIDebugger ( class AController* C );
	void OnInit ( );
	void HandleAverageSkillChanged ( class UOnlineGameDedicatedServer_X* Server );
	void InitBotSkill ( );
	void MutateObject ( class UObject* O );
	void InitMutators ( );
	void HandleFinished ( class AGameEvent_TA* GameEvent );
	void Init ( class APlayerController_TA* InActivator );
	class UClass* GetMatchTypeFromOptions ( struct FString Options );
	void InitListenServer ( );
	void eventInitGame ( struct FString Options );
	bool PlayerCanStartEvent ( class APlayerController_TA* InActivator, class UMessage_TA** ErrorMsg );
	class UOnlineGame_Base_X* GetOnlineGame ( );
	void NotifyKismetGameStateChanged ( );
	void OnGameStateChanged ( );
	void OnCanVoteForfeitChanged ( );
	void UpdateCanVoteToForfeit ( );
	bool ShouldAllowVoteToForfeit ( );
	void OnPenaltyChanged ( );
	void UpdateLeaveMatchPenalty ( );
	class UGameSettingPlaylist_X* GetPlaylist ( );
	bool ShouldHaveLeaveMatchPenalty ( );
	class UGameMetrics_TA* GetMetrics ( );
	void AddReportedPlayer ( struct FReportedPlayerInfo* ReportedPlayer );
	void OnMatchSettingsChanged ( );
	void SetCustomMatchSettings ( struct FCustomMatchSettings NewSettings );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void EventMatchSettingsChanged ( class AGameEvent_TA* GameEvent, struct FCustomMatchSettings NewMatchSettings );
	void EventLocalPlayersChanged ( class AGameEvent_TA* GameEvent );
	void EventMatchTypeSet ( class AGameEvent_TA* GameEvent );
	void EventGameOwnerUpdated ( class AGameEvent_TA* GameEvent, class APRI_TA* NewGameOwner );
	void EventCountDownTimeUpdated ( class AGameEvent_TA* GameEvent, int Seconds );
	void EventCanVoteForfeitChanged ( class AGameEvent_TA* GameEvent );
	void EventPenaltyChanged ( class AGameEvent_TA* GameEvent );
	void EventCarRemoved ( class AGameEvent_TA* GameEvent, class ACar_TA* Car );
	void EventCarAdded ( class AGameEvent_TA* GameEvent, class ACar_TA* Car );
	void EventPlayerRemoved ( class AGameEvent_TA* GameEvent, class APRI_TA* PRI );
	void EventPlayerAdded ( class AGameEvent_TA* GameEvent, class APRI_TA* PRI );
	void EventPlayerRestarted ( class AGameEvent_TA* GameEvent, class ACar_TA* PlayerCar );
	void EventDestroyed ( class AGameEvent_TA* GameEvent );
	void EventFinished ( class AGameEvent_TA* GameEvent );
	void EventGameStateTimeUpdated ( class AGameEvent_TA* GameEvent );
	void EventGameStateChanged ( class AGameEvent_TA* GameEvent );
	void EventMatchStarted ( class AGameEvent_TA* GameEvent );
};

UClass* AGameEvent_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Team_TA
// 0x003C (0x050C - 0x04D0)
class AGameEvent_Team_TA : public AGameEvent_TA
{
public:
	TArray< class ATeam_TA* >                          TeamArchetypes;                                   		// 0x04D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ATeam_TA* >                          Teams;                                            		// 0x04DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxTeamSize;                                      		// 0x04E8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NumBots;                                          		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMuteOppositeTeams : 1;                           		// 0x04F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableMutingOtherTeam : 1;                      		// 0x04F0 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bForfeit : 1;                                     		// 0x04F0 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUnfairTeams : 1;                                 		// 0x04F0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bAlwaysAutoSelectTeam : 1;                        		// 0x04F0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class AVoteActor_TA*                               RematchVoteArchetype;                             		// 0x04F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVoteActor_TA*                               RematchVote;                                      		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventTeamsCreated__Delegate;                    		// 0x04FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0500 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3734 ];

		return pClassPointer;
	};

	void ClearTemporarySpawnSpots ( );
	bool ChooseTeam ( int TeamIndex, class APlayerController_TA* Player );
	bool CanChangeTeam ( );
	void OnPenaltyChanged ( );
	void OnTeamForfeited ( class ATeam_TA* Team );
	void HandleTeamForfeit ( class ATeam_TA* Team );
	void MuteOppositeTeams ( unsigned long bMute );
	void UpdateBotCount ( );
	bool ReplacePlayer ( class APRI_TA* PRI, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity );
	bool ReplaceBot ( class APRI_TA* PRI, class APRI_TA* Replace, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity );
	bool FindBotReplacement ( class APRI_TA* PRI );
	void EndGame ( );
	void ForceNoContest ( );
	void CheckForForfeit ( class AController* RemovedPlayer, class ATeam_TA* Team );
	void OnPlayerRemoved ( class AController* OldPlayer );
	class ATeam_TA* PickTeam ( class AController* C );
	bool AutoSelectTeam ( class AController* NewPlayer );
	void AddTemporarySpawnSpot ( class ATeam_TA* Team, class ACar_TA* Car );
	void SetPlayerTeam ( class AController* Player, int Team );
	void CleanupPlayerCar ( class AController* Player );
	void RemovePlayerFromTeam ( class AController* Player );
	void AddPlayerToTeam ( class ATeam_TA* NewTeam, class AController* NewPlayer );
	void HandleSelectedLoadout ( class APRI_TA* PlayerPRI );
	void OnPlayerAdded ( class AController* NewPlayer );
	void eventDestroyed ( );
	void DestroyTeams ( );
	void NotifyAllTeamsCreated ( struct FScriptDelegate Callback );
	void OnAllTeamsCreated ( );
	void AssignCustomTeamSettings ( );
	void OnMatchSettingsChanged ( );
	bool AllTeamsCreated ( );
	void SetTeam ( int TeamNum, class ATeam_TA* NewTeam );
	void CreateTeams ( );
	void OnInit ( );
	void SetMaxTeamSize ( int MaxSize );
	void UpdateMaxTeamSize ( );
	void SetUnfairTeams ( unsigned long bUnfair );
	void InitBotSkill ( );
	void eventInitGame ( struct FString Options );
	void EventTeamsCreated ( class AGameEvent_Team_TA* GameEvent );
};

UClass* AGameEvent_Team_TA::pClassPointer = NULL;

// Class TAGame.GameMode_TA
// 0x0024 (0x0060 - 0x003C)
class UGameMode_TA : public UObject
{
public:
	class AGameInfo*                                   GameArchetype;                                    		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMapSet_TA*                                  MapSet;                                           		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             DisallowedMutatorCategories;                      		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      GameInfoClass;                                    		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FString                                     GameArchetypePath;                                		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3736 ];

		return pClassPointer;
	};

};

UClass* UGameMode_TA::pClassPointer = NULL;

// Class TAGame.GameModeList_TA
// 0x000C (0x0048 - 0x003C)
class UGameModeList_TA : public UObject
{
public:
	TArray< class UGameMode_TA* >                      GameModes;                                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3738 ];

		return pClassPointer;
	};

	class UGameMode_TA* GetGameModeForClass ( class UClass* GameInfoClass );
	class UMapSet_TA* GetMapSet ( int GameModeIndex );
	struct FString GetGameURL ( int GameModeIndex );
};

UClass* UGameModeList_TA::pClassPointer = NULL;

// Class TAGame.GameShare_TA
// 0x00D0 (0x010C - 0x003C)
class UGameShare_TA : public UObject
{
public:
	class UObjectListComponent_X*                      BallCamTargetList;                                		// 0x003C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UObjectListComponent_X*                      GameEventList;                                    		// 0x0040 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UObjectListComponent_X*                      VehiclePickupList;                                		// 0x0044 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UObjectListComponent_X*                      LocalFXList;                                      		// 0x0048 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaxActorsGroup_TA*                          CarEngineAudioGroup;                              		// 0x004C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInstance* >                 BallPositionMaterialInstances;                    		// 0x0050 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AVehiclePickup_Boost_TA* >           ActiveBoostPills;                                 		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bHideWorldUI : 1;                                 		// 0x0068 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class ACar_TA* >                           Cars;                                             		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UNameplateComponent_TA* >            Nameplates;                                       		// 0x0078 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class ACarPreviewActor_TA* >               CarPreviewActors;                                 		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAkSoundSource* >                    SoundSourcePool;                                  		// 0x0090 (0x000C) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FScriptDelegate                             __EventHideWorldUIChanged__Delegate;              		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarAdded__Delegate;                        		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarRemoved__Delegate;                      		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00C0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventNameplateAdded__Delegate;                  		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventNameplateRemoved__Delegate;                		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x00E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarPreviewActorAdded__Delegate;            		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x00F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarPreviewActorRemoved__Delegate;          		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0100 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3740 ];

		return pClassPointer;
	};

	void NotifyCarPreviewActorAdded ( struct FScriptDelegate Callback );
	void RemoveCarPreviewActor ( class ACarPreviewActor_TA* PreviewCar );
	void AddCarPreviewActor ( class ACarPreviewActor_TA* PreviewCar );
	void RemoveNameplate ( class UNameplateComponent_TA* Nameplate );
	void AddNameplate ( class UNameplateComponent_TA* Nameplate );
	void RemoveCar ( class ACar_TA* Car );
	void AddCar ( class ACar_TA* Car );
	void SetWorldUIHidden ( unsigned long bHidden );
	void NotifyHideWorldUIChanged ( struct FScriptDelegate Callback );
	void EventCarPreviewActorRemoved ( class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewCar );
	void EventCarPreviewActorAdded ( class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewCar );
	void EventNameplateRemoved ( class UGameShare_TA* GameShare, class UNameplateComponent_TA* NameplateComponent );
	void EventNameplateAdded ( class UGameShare_TA* GameShare, class UNameplateComponent_TA* NameplateComponent );
	void EventCarRemoved ( class UGameShare_TA* GameShare, class ACar_TA* Car );
	void EventCarAdded ( class UGameShare_TA* GameShare, class ACar_TA* Car );
	void EventHideWorldUIChanged ( class UGameShare_TA* GameShare );
	class UAkSoundSource* GetPooledSoundSource ( );
};

UClass* UGameShare_TA::pClassPointer = NULL;

// Class TAGame.GFxEngine_TA
// 0x0018 (0x0128 - 0x0110)
class UGFxEngine_TA : public UGFxEngine_X
{
public:
	TArray< struct FSoundStateItem >                   UISoundStates;                                    		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bViewingOnlineScene : 1;                          		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class ULoadingScreen_TA*                           LoadingScreen;                                    		// 0x0120 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3742 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	int UISoundStatePrioritySort ( struct FSoundStateItem A, struct FSoundStateItem B );
	void UpdateUISoundState ( );
	void OnShellDestroyed ( class UGFxShell_X* Shell );
	void eventOnGameSessionEnded ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	unsigned char GetSoundStatePriority ( struct FName StateName );
	void ClearUISoundState ( class UGFxShell_X* Shell );
	void PopUISoundState ( struct FName StateName, class UGFxShell_X* Shell );
	void PushUISoundState ( struct FName StateName, class UGFxShell_X* Shell );
	void InitOnlineSub ( );
	void Init ( );
};

UClass* UGFxEngine_TA::pClassPointer = NULL;

// Class TAGame.GlobalLookupTexture_TA
// 0x0068 (0x01A8 - 0x0140)
class UGlobalLookupTexture_TA : public UScriptedTexture
{
public:
	struct FIntVector                                  EnvironmentAPosition;                             		// 0x0140 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FIntVector                                  EnvironmentBPosition;                             		// 0x0148 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FIntVector                                  SunlightPosition;                                 		// 0x0150 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FIntVector                                  WorldLightPosition;                               		// 0x0158 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TeamsPositionX;                                   		// 0x0160 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                PlayersPositionX;                                 		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FLinearColor >                      TopTeamColors;                                    		// 0x0168 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      BottomTeamColors;                                 		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UObject* >                           Players;                                          		// 0x0180 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      TopPlayerColors;                                  		// 0x018C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      BottomPlayerColors;                               		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bDebug : 1;                                       		// 0x01A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3744 ];

		return pClassPointer;
	};

	void OnRender ( class UCanvas* Canvas );
	struct FLinearColor GetFullBrightColor ( struct FLinearColor InColor, float ValueScale );
	void Update ( );
	void SetTeamColors ( int Team, struct FLinearColor Primary, struct FLinearColor Secondary );
	void RemovePlayer ( class UObject* Player );
	float AddPlayer ( class UObject* Player, struct FLinearColor Primary, struct FLinearColor Secondary );
};

UClass* UGlobalLookupTexture_TA::pClassPointer = NULL;

// Class TAGame.Goal_TA
// 0x00D8 (0x0144 - 0x006C)
class UGoal_TA : public UActorComponent_X
{
public:
	class AActor*                                      GoalOrientation;                                  		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class AActor* >                            OverrideGoalIndicatorOrientations;                		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      TeamNum;                                          		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  ScoreFX;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     GoalIndicatorArchetype;                           		// 0x0084 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bNoGoalIndicator : 1;                             		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyGoalsFromDirection : 1;                      		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowFocusExtent : 1;                             		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      GoalDirection;                                    		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                PointsToAward;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AutoCamFocusExtent;                               		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GoalFocusLocationOffset;                          		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGoalScorerAttachRadius;                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GoalScoredDotDirection;                           		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAttachGoalToScorerDot;                         		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Location;                                         		// 0x00C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Direction;                                        		// 0x00D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    Rotation;                                         		// 0x00E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LocalMin;                                         		// 0x00EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LocalMax;                                         		// 0x00F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LocalExtent;                                      		// 0x0104 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     WorldCenter;                                      		// 0x0110 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     WorldExtent;                                      		// 0x011C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FBox                                        WorldBox;                                         		// 0x0128 (0x001C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3746 ];

		return pClassPointer;
	};

	struct FVector GetGoalFocusExtentCenter ( );
	void eventBeginPlay ( );
};

UClass* UGoal_TA::pClassPointer = NULL;

// Class TAGame.GroundStaticMeshActor_TA
// 0x0004 (0x0218 - 0x0214)
class AGroundStaticMeshActor_TA : public AStaticMeshActor
{
public:
	float                                              HideLocationOffset;                               		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3748 ];

		return pClassPointer;
	};

};

UClass* AGroundStaticMeshActor_TA::pClassPointer = NULL;

// Class TAGame.HandlingPreset_TA
// 0x002C (0x0068 - 0x003C)
class UHandlingPreset_TA : public UObject
{
public:
	struct FVehicleAxleData                            FrontAxle;                                        		// 0x003C (0x0014) [0x0000000000000001]              ( CPF_Edit )
	struct FVehicleAxleData                            BackAxle;                                         		// 0x0050 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysAsset;                                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3750 ];

		return pClassPointer;
	};

};

UClass* UHandlingPreset_TA::pClassPointer = NULL;

// Class TAGame.IdenticalProductCache_TA
// 0x003C (0x0084 - 0x0048)
class UIdenticalProductCache_TA : public UComponent
{
public:
	struct FMap_Mirror                                 Products;                                         		// 0x0048 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3752 ];

		return pClassPointer;
	};

	class UOnlineProduct_TA* GetKeyProduct ( class UOnlineProduct_TA* Product );
	TArray< class UOnlineProduct_TA* > GetUniqueProducts ( );
	int GetQuantity ( class UOnlineProduct_TA* Product );
	void Clear ( );
	void Remove ( class UOnlineProduct_TA* OnlineProduct );
	void Add ( class UOnlineProduct_TA* OnlineProduct );
	void Set ( TArray< class UOnlineProduct_TA* >* OnlineProducts );
};

UClass* UIdenticalProductCache_TA::pClassPointer = NULL;

// Class TAGame.ImpactEffectsComponent_TA
// 0x00E8 (0x0154 - 0x006C)
class UImpactEffectsComponent_TA : public UActorComponent_X
{
public:
	int                                                SoundPriority;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UEffectsMap_X*                               ImpactEffectsMap;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkImpactSound;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkSlideSound;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AkSlideSoundDelay;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AkImpactTypeKey;                                  		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AkImpactIntensityKey;                             		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinImpactMomentum;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinImpactDelay;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                ImpactCameraShake;                                		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      ImpactForceFeedback;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           ShakeScaleCurve;                                  		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LastWorldImpactTime;                              		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastActorImpactTime;                              		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlideTime;                                        		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    SlideParticleComponent;                           		// 0x00BC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UAkPlaySoundComponent*                       SlideAudioComponent;                              		// 0x00C0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UShakeComponent_X*                           ShakeComponent;                                   		// 0x00C4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FCollisionEffectData                        LastCollisionEffectData;                          		// 0x00C8 (0x0044) [0x0000000000002000]              ( CPF_Transient )
	struct FCollisionEffectData                        SlideCollisionEffectData;                         		// 0x010C (0x0044) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterialProperty_TA*                SlidePhysMatProp;                                 		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3754 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	class UParticleSystemComponent* eventPlayPooledParticle ( class UParticleSystem* Template, struct FVector Location, struct FRotator Rotation, class AActor* AttachTo );
	void HandleCollision ( struct FAccumulatedRigidBodyCollision* Collision );
};

UClass* UImpactEffectsComponent_TA::pClassPointer = NULL;

// Class TAGame.InputRecorder_TA
// 0x0034 (0x0230 - 0x01FC)
class AInputRecorder_TA : public AActor
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                          		// 0x01FC (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              MaxRecordTime;                                    		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRecording : 1;                                   		// 0x0204 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlaying : 1;                                     		// 0x0204 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< struct FReplicatedRBState >                CarStates;                                        		// 0x0208 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FReplicatedRBState >                BallStates;                                       		// 0x0214 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVehicleInputs >                    Inputs;                                           		// 0x0220 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                InputIndex;                                       		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3756 ];

		return pClassPointer;
	};

	void eventFinished ( );
	struct FReplicatedRBState eventGetBallState ( );
	struct FReplicatedRBState eventGetCarState ( );
	class ABall_TA* GetBall ( );
	class ACar_TA* GetCar ( );
	void StartPlayback ( );
	void StopRecord ( );
	void HandleDestroyed ( class APawn_X* P );
	void StartRecord ( );
};

UClass* AInputRecorder_TA::pClassPointer = NULL;

// Class TAGame.InterpTrackAnimControlWithSensibleDefault_TA
// 0x0000 (0x00B8 - 0x00B8)
class UInterpTrackAnimControlWithSensibleDefault_TA : public UInterpTrackAnimControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3758 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackAnimControlWithSensibleDefault_TA::pClassPointer = NULL;

// Class TAGame.InterpTrackSkelControlRotation_TA
// 0x0009 (0x009D - 0x0094)
class UInterpTrackSkelControlRotation_TA : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RotAxis;                                          		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3760 ];

		return pClassPointer;
	};

};

UClass* UInterpTrackSkelControlRotation_TA::pClassPointer = NULL;

// Class TAGame.ITickNotify_TA
// 0x0000 (0x003C - 0x003C)
class UITickNotify_TA : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3762 ];

		return pClassPointer;
	};

};

UClass* UITickNotify_TA::pClassPointer = NULL;

// Class TAGame.LightCurveType_TA
// 0x0004 (0x0040 - 0x003C)
class ULightCurveType_TA : public UObject
{
public:
	int                                                ParameterValue;                                   		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3764 ];

		return pClassPointer;
	};

};

UClass* ULightCurveType_TA::pClassPointer = NULL;

// Class TAGame.ListenerLocationComponent_TA
// 0x0020 (0x008C - 0x006C)
class UListenerLocationComponent_TA : public UActorComponent_X
{
public:
	float                                              ListenerHeight;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShowDebugTransform : 1;                          		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector                                     ListenerLocation;                                 		// 0x0074 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ListenerRotation;                                 		// 0x0080 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3766 ];

		return pClassPointer;
	};

	void GetListenerSoundTransform ( struct FVector* OutLocation, struct FRotator* OutRotation );
	void eventTick ( float DeltaTime );
	void eventAttached ( );
};

UClass* UListenerLocationComponent_TA::pClassPointer = NULL;

// Class TAGame.LocalPlayer_TA
// 0x0040 (0x0438 - 0x03F8)
class ULocalPlayer_TA : public ULocalPlayer_X
{
public:
	class USaveGameManager_TA*                         SaveGameManager;                                  		// 0x03F8 (0x0004) [0x0000000000000000]              
	class UProfile_TA*                                 Profile;                                          		// 0x03FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SplitScreenPosition;                              		// 0x0400 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0404 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.LocalPlayer_TA.SuspendingEventToken
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x040C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.LocalPlayer_TA.SignoutStartedEventToken
	unsigned long                                      bOpenedStartMenu : 1;                             		// 0x0414 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPendingBroadcastLoadout : 1;                     		// 0x0414 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __EventProfileSet__Delegate;                      		// 0x0418 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x041C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenPositionChanged__Delegate;      		// 0x0428 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x042C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3768 ];

		return pClassPointer;
	};

	void HandleNewEula ( class UOnlineLegalText_X* Eula );
	void CheckForRankedReconnect ( );
	void SetOpenedStartMenu ( unsigned long bOpen );
	void HandleOnlineLoginChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void HandleGameDataSelected ( int PlaylistId, int MutatorIndex );
	void HandleGameStateChanged ( class AGameEvent_TA* GameEvent );
	void ClearLoginDelegates ( );
	void OnContinueWithNoUser ( class UGFxModal_X* Modal );
	void OnShowAccountPicker ( class UGFxModal_X* Modal );
	void OnLoginCancelled ( );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void OnControllerPairingChanged ( int NewLocalUserNum, int PreviousLocalUserNum );
	void OnLoginChange ( unsigned char LocalUserNum );
	void ForceSaveGame ( );
	bool IsControllerAssociatedWithLoggedInUser ( unsigned char LocalUserNum );
	bool IsUserLoggedIn ( );
	void UnregisterUserStatusChangeFunctions ( );
	void RegisterUserStatusChangeFunctions ( );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	unsigned char GetSplitScreenPosition ( class UGameViewportClient* InViewportClient );
	void HandleSplitScreenTypeChanged ( class UGameViewportClient_TA* InViewportClient );
	void NotifyWhenProfileSet ( struct FScriptDelegate Callback );
	void SetProfile ( class UProfile_TA* NewProfile );
	void SetDefaultProfile ( );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error );
	void HandleLocalPlayerLeave ( class ULocalPlayer* Player );
	void OnRemoved ( );
	void OnCreated ( );
	struct FUniqueNetId eventGetUniqueNetId ( );
	struct FString eventGetNickname ( );
	void EventSplitScreenPositionChanged ( class ULocalPlayer_TA* LocalPlayer );
	void EventProfileSet ( class ULocalPlayer_TA* LocalPlayer );
};

UClass* ULocalPlayer_TA::pClassPointer = NULL;

// Class TAGame.MapData_TA
// 0x0030 (0x006C - 0x003C)
class UMapData_TA : public UObject
{
public:
	class UTexture2D*                                  Thumbnail;                                        		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMapData_TA*                                 VariantOf;                                        		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeatherVariant;                                   		// 0x0044 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      GameVersion;                                      		// 0x0045 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomWeight;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             OnImageLoadedDelegate;                            		// 0x004C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FString                                     AssetPath;                                        		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTexture2D*                                  LargeImage;                                       		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3770 ];

		return pClassPointer;
	};

	void LoadLargeMapImage ( struct FScriptDelegate OnLoaded );
	class UMapData_TA* PickPreferredRandomMap ( int NumPlayers, TArray< class UMapData_TA* >* Maps, TArray< struct FName >* Likes, TArray< struct FName >* Dislikes );
	TArray< class UMapData_TA* > GetMapTypes ( TArray< class UMapData_TA* > Maps );
	int GetWeightedIndex ( TArray< float > PreferredWeights );
	TArray< float > GetPreferredWeights ( int NumPlayers, TArray< class UMapData_TA* >* Maps, TArray< struct FName >* Likes, TArray< struct FName >* Dislikes );
	TArray< float > GetWeightsFromPoints ( TArray< class UMapData_TA* > Maps, TArray< int > Points, int NumPlayers );
	TArray< int > GetPoints ( TArray< class UMapData_TA* > Maps, TArray< struct FName > Likes, TArray< struct FName > Dislikes );
	TArray< class UMapData_TA* > GetNonVariantMaps ( TArray< class UMapData_TA* >* Maps );
	class UMapData_TA* PickRandomMap ( TArray< class UMapData_TA* > Maps );
	struct FString GetLocalizedVariantName ( );
	struct FString GetLocalizedBaseName ( );
	struct FString GetLocalizedName ( );
};

UClass* UMapData_TA::pClassPointer = NULL;

// Class TAGame.MapList_TA
// 0x0054 (0x0090 - 0x003C)
class UMapList_TA : public UObject
{
public:
	TArray< class UMapData_TA* >                       AllMaps;                                          		// 0x003C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UMapData_TA* >                       SortedMaps;                                       		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AdditionalCookedMaps;                             		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMapGroup >                         MapGroups;                                        		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMapGroup >                         GeneratedMapGroups;                               		// 0x006C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UMapSet_TA*                                  SelectableMaps;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMapSet_TA*                                  SeasonMaps;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMapSet_TA*                                  SeasonPlayoffsMaps;                               		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMapSet_TA* >                        AllMapSets;                                       		// 0x0084 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3772 ];

		return pClassPointer;
	};

	TArray< class UMapData_TA* > GetSortedMaps ( TArray< class UMapData_TA* > UnsortedMaps );
	class UMapData_TA* GetMap ( struct FName MapName );
};

UClass* UMapList_TA::pClassPointer = NULL;

// Class TAGame.MapSet_TA
// 0x0040 (0x007C - 0x003C)
class UMapSet_TA : public UObject
{
public:
	TArray< class UMapSet_TA* >                        IncludeSets;                                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMapSet_TA* >                        ExcludeSets;                                      		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMapData_TA* >                       IncludeMaps;                                      		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMapData_TA* >                       ExcludeMaps;                                      		// 0x0060 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMapData_TA* >                       Maps;                                             		// 0x006C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UMapSelector_TA*                             MapSelector;                                      		// 0x0078 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3774 ];

		return pClassPointer;
	};

	class UMapData_TA* GetRandomMap ( );
	class UMapSelector_TA* GetMapSelector ( );
};

UClass* UMapSet_TA::pClassPointer = NULL;

// Class TAGame.MatchBroadcast_TA
// 0x0024 (0x0220 - 0x01FC)
class AMatchBroadcast_TA : public AActor
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x01FC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class APlayerReplicationInfo* >            RecordedPlayers;                                  		// 0x0200 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bBroadcasting : 1;                                		// 0x020C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __EventLog__Delegate;                             		// 0x0210 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0214 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3776 ];

		return pClassPointer;
	};

	struct FName __MatchBroadcast_TA__RecordStartEvents ( class UMutator_TA* M );
	void eventClientLog ( struct FString EventJson );
	void RecordFunction ( );
	int GetPlayerID ( class APlayerReplicationInfo* PRI );
	void RecordMatchEnd ( );
	void RecordOvertime ( );
	void RecordPlayerStat ( int PlayerID, struct FName Stat );
	void RecordPlayerAttackStat ( int AttackerID, int VictimID, struct FName Stat, struct FVector AttackerLocation, struct FVector AttackerVelocity, struct FRotator AttackerRotation );
	void RecordPlayerHitBallStat ( int PlayerID, struct FName Stat, float HitTime, struct FVector CarLocation, struct FVector CarVelocity, struct FRotator CarRotation, struct FVector BallLocation, struct FVector BallVelocity );
	void RecordGoalScored ( int AttackingTeam, int DefendingTeam, struct FVector BallLocation, struct FVector BallVelocity );
	void RecordPlayerScoreHit ( int PlayerID, float HitTime, struct FVector CarLocation, struct FVector CarVelocity, struct FRotator CarRotation, struct FVector BallLocation, struct FVector BallVelocity );
	void RecordTeamScore ( int Team, int Score );
	void RecordLeaveTeam ( int PlayerID );
	void RecordJoinTeam ( int PlayerID, int Team );
	void RecordLeaveGame ( int PlayerID );
	void RecordJoinServer ( int PlayerID, struct FUniqueNetId PlayerNetId, struct FString PlayerName, struct FUniqueNetId PartyLeaderNetID, struct FString IP );
	void RecordJoinGame ( int PlayerID, struct FUniqueNetId PlayerNetId, struct FString PlayerName );
	void RecordMatchStart ( struct FString MapName, struct FName GameType, struct FName MatchType, int PlaylistId, TArray< struct FName > Mutators );
	float eventGetGameTimeSeconds ( );
	void HandleScoreUpdated ( class ATeam_TA* Team );
	void RecordInitialScores ( );
	void RecordInitialPlayers ( );
	void RecordStartEvents ( TArray< struct FName >* MapLocal_3B83822148D9AFF728C20A9FF0489114 );
	void HandleMatchEnded ( class AGameEvent_Soccar_TA* G );
	void HandleOvertime ( class AGameEvent_Soccar_TA* G );
	void HandleStat ( class AStatFactory_TA* Factory, class APRI_TA* PRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim );
	void HandleGoalScored ( class AGameEvent_Soccar_TA* G, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx );
	void HandleTeamChanged ( class APRI_X* PRI );
	void HandlePlayerRemoved ( class AGameEvent_TA* G, class APRI_TA* PRI );
	struct FString GetIP ( class APRI_TA* PRI );
	struct FUniqueNetId GetPartyLeader ( struct FUniqueNetId Member );
	void HandlePlayerAdded ( class AGameEvent_TA* G, class APRI_TA* PRI );
	void StopRecording ( );
	void StartRecording ( );
	void HandleStatFactory ( class AGameEvent_Soccar_TA* G );
	void HandleTeamsCreated ( class AGameEvent_Team_TA* G );
	void eventDestroyed ( );
	void Start ( );
	void ServerStart ( );
	void Init ( class AGameEvent_Soccar_TA* InGameEvent );
	void ClientCheckReady ( );
	void eventOnOwnerChanged ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventLog ( class AMatchBroadcast_TA* Broadcast, struct FString EventJson );
};

UClass* AMatchBroadcast_TA::pClassPointer = NULL;

// Class TAGame.MatchBroadcastLog_TA
// 0x0004 (0x0040 - 0x003C)
class UMatchBroadcastLog_TA : public UObject
{
public:
	struct FPointer                                    Log;                                              		// 0x003C (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3778 ];

		return pClassPointer;
	};

	void Append ( struct FString EventJson );
	void Init ( struct FString Filename );
};

UClass* UMatchBroadcastLog_TA::pClassPointer = NULL;

// Class TAGame.MaterialParamsSet_TA
// 0x0024 (0x0060 - 0x003C)
class UMaterialParamsSet_TA : public UObject
{
public:
	TArray< struct FMaterialTextureParam >             TextureParameters;                                		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMaterialVectorParam >              VectorParameters;                                 		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMaterialScalarParam >              ScalarParameters;                                 		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3780 ];

		return pClassPointer;
	};

	void Apply ( class UMaterialInstanceConstant* MatInst );
};

UClass* UMaterialParamsSet_TA::pClassPointer = NULL;

// Class TAGame.MatineeExporter_TA
// 0x003C (0x0238 - 0x01FC)
class AMatineeExporter_TA : public AActor
{
public:
	struct FString                                     Filename;                                         		// 0x01FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RecordTime;                                       		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            RecordClasses;                                    		// 0x020C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct AMatineeExporter_TA_FActorHistory > Actors;                                           		// 0x0218 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastMessageTime;                                  		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UReplay_TA*                                  Replay;                                           		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartReplayTime;                                  		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartWorldTime;                                   		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRecordFrame : 1;                                 		// 0x0234 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3782 ];

		return pClassPointer;
	};

	struct FName eventGetPlayerName ( class AActor* LevelActor );
	class USequenceAction* eventCreateGetPlayerCar ( struct FString PlayerName );
	class USequenceAction* eventCreateStadiumTeamColor ( );
	class USequenceAction* eventCreateSingleCommandConsole ( struct FString Command );
	class USequenceAction* eventCreateDoubleConsoleCommand ( struct FString Command1, struct FString Command2 );
	class USequenceAction* eventCreateSetLoadout ( class AActor* CarActor );
	class USequenceAction* eventCreateSetReplayCameraAction ( );
	class USequenceEvent* eventCreateReplayTimeEvent ( );
	void Export ( unsigned long bMatineeExportNewSave );
	void HandleFrame ( class UReplay_TA* InReplay );
	void HandleFirstFrame ( class UReplay_TA* InReplay );
	void eventPostBeginPlay ( );
};

UClass* AMatineeExporter_TA::pClassPointer = NULL;

// Class TAGame.MaxActorsGroup_TA
// 0x002C (0x0074 - 0x0048)
class UMaxActorsGroup_TA : public UComponent
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0048 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                MaxActors;                                        		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              UpdateDelay;                                      		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NextUpdateTime;                                   		// 0x0054 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FMaxActorCallback >                 Actors;                                           		// 0x0058 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnToggledDelegate__Delegate;                    		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3784 ];

		return pClassPointer;
	};

	struct FString GetEnabledActorsString ( );
	void RemoveListener ( class AActor* CheckActor, struct FScriptDelegate OnEnabled, struct FScriptDelegate OnDisabled );
	void AddListener ( class AActor* CheckActor, struct FScriptDelegate OnEnabled, struct FScriptDelegate OnDisabled );
	void OnToggledDelegate ( );
};

UClass* UMaxActorsGroup_TA::pClassPointer = NULL;

// Class TAGame.Message_TA
// 0x006C (0x00A8 - 0x003C)
class UMessage_TA : public UObject
{
public:
	struct FName                                       Type;                                             		// 0x003C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkSoundCue*                                 Sound;                                            		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkSoundCue*                                 PrimaryPlayerSound;                               		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     Key;                                              		// 0x004C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Section;                                          		// 0x0058 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LocalizedMessage;                                 		// 0x0064 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             ParamNames;                                       		// 0x0070 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           ParamTokens;                                      		// 0x007C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FMessagePacket                              Packet;                                           		// 0x0088 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMessagePacket                              DefaultPacket;                                    		// 0x0098 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3786 ];

		return pClassPointer;
	};

	struct FString eventGetObjectText ( class UObject* O );
	void Trigger ( class APlayerController_TA* Receiver, struct FMessagePacket InPacket );
	struct FMessagePacket GetPacket ( );
	void BroadcastLocal ( TArray< class AController* > Receivers );
	void Broadcast ( TArray< class AController* > Receivers );
	void SendTo ( class APlayerController_TA* Receiver );
	class UMessage_TA* SetInt ( struct FName ParamName, int Value );
	class UMessage_TA* SetObject ( struct FName ParamName, class UObject* Value );
	class UMessage_TA* Set ( struct FName ParamName, struct FString Value );
	struct FString GetText ( struct FMessagePacket InPacket );
};

UClass* UMessage_TA::pClassPointer = NULL;

// Class TAGame.MutatorGameSetting_TA
// 0x0024 (0x0060 - 0x003C)
class UMutatorGameSetting_TA : public UGameSetting_X
{
public:
	TArray< struct FString >                           RequiresMutators;                                 		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           DisallowedWithMutators;                           		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     MutatorPackage;                                   		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3788 ];

		return pClassPointer;
	};

	class UMutator_TA* GetMutator ( );
	struct FString eventGetMutatorArchetypePath ( );
};

UClass* UMutatorGameSetting_TA::pClassPointer = NULL;

// Class TAGame.NavigationHandle_TA
// 0x000C (0x0160 - 0x0154)
class UNavigationHandle_TA : public UNavigationHandle
{
public:
	struct FVector                                     OldDriveLocation;                                 		// 0x0154 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3790 ];

		return pClassPointer;
	};

	void GetNextDriveDestination ( struct FVector CurrentDestination, struct FVector* OutDestination );
	bool PathCache_Empty ( );
};

UClass* UNavigationHandle_TA::pClassPointer = NULL;

// Class TAGame.Note_Linked_TA
// 0x0008 (0x0210 - 0x0208)
class ANote_Linked_TA : public ANote
{
public:
	class ANote_Linked_TA*                             NextNote;                                         		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ANote_Linked_TA*                             PrevNote;                                         		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3792 ];

		return pClassPointer;
	};

};

UClass* ANote_Linked_TA::pClassPointer = NULL;

// Class TAGame.NxForceFieldCapsule_TA
// 0x0028 (0x0264 - 0x023C)
class ANxForceFieldCapsule_TA : public ANxForceField
{
public:
	class UDrawCapsuleComponent*                       InnerDrawComponent;                               		// 0x023C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawCapsuleComponent*                       OuterDrawComponent;                               		// 0x0240 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              InnerRadius;                                      		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterRadius;                                      		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Length;                                           		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerStrength;                                    		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterStrength;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerMaxSpeed;                                    		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterMaxSpeed;                                    		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x0260 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3794 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};

UClass* ANxForceFieldCapsule_TA::pClassPointer = NULL;

// Class TAGame.OnlineProduct_TA
// 0x0020 (0x005C - 0x003C)
class UOnlineProduct_TA : public UObject
{
public:
	int                                                ProductID;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0040 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.OnlineProduct_TA.InstanceID
	TArray< class UProductAttribute_TA* >              Attributes;                                       		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SeriesID;                                         		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                TradeHold;                                        		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3796 ];

		return pClassPointer;
	};

	void __OnlineProduct_TA__OnLoaded ( class UProductAttribute_Certified_TA* Certified );
	bool __OnlineProduct_TA__OnLoaded1 ( class UProductAttribute_Certified_TA* Certified );
	void __OnlineProduct_TA__OnLoaded2 ( class UProductAttribute_TA* A );
	void OnLoaded ( TArray< class UProductAttribute_Certified_TA* >* OfTypeLocal_318A7FE74744BC301C4B529C6B160000, TArray< class UProductAttribute_Certified_TA* >* FilterLocal_91B0743D45373AA5CDFC0C84BF50D048 );
	void RemoveAttributes ( class UClass* AttributeClass, TArray< class UProductAttribute_TA* >* FilterLocal_76A1866F4AEE43360514EC94B7816DBC );
	void RemoveAttribute ( class UProductAttribute_TA* InAttribute );
	void AddAttribute ( class UProductAttribute_TA* InAttribute );
	class UProduct_TA* GetProduct ( );
	void SetProductID ( int InProductID );
	void SortByTradeHoldAscending ( TArray< class UOnlineProduct_TA* >* Products );
	void SortByTradeHoldDescending ( TArray< class UOnlineProduct_TA* >* Products );
	bool RequiresDynamicThumbnail ( );
	struct FString GetSortLabel ( );
	struct FString GetDebugString ( );
	int OnlineProductHash ( );
	void GetPaintedColorAttribute ( struct FString* ProductPaintColorName, int* ProductPaintColor );
	unsigned char GetQuality ( );
	TArray< class UProductAttribute_TA* > GetReplicatedAttributes ( );
	bool HasReplicatedAttributes ( );
	TArray< class UProductAttribute_TA* > GetAttributes ( );
	class UProductAttribute_TA* GetAttribute ( class UClass* AttributeClass );
	struct FOnlineProductData InstanceOnlineProductData ( unsigned long bReplicatedAttributesOnly );
	void Init ( struct FOnlineProductData* OnlineData );
	class UOnlineProduct_TA* CreateOnlineProduct ( struct FOnlineProductData* ProductData );
	void ProcessOnlineData ( TArray< class UOnlineProduct_TA* >* OutProducts, TArray< struct FOnlineProductData >* InProductData );
};

UClass* UOnlineProduct_TA::pClassPointer = NULL;

// Class TAGame.PaintDatabase_TA
// 0x004C (0x0088 - 0x003C)
class UPaintDatabase_TA : public UObject
{
public:
	TArray< class UProductPaint_TA* >                  Paints;                                           		// 0x003C (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FMap_Mirror                                 PaintNameToPaintID;                               		// 0x0048 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bClickToRebuild : 1;                              		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3798 ];

		return pClassPointer;
	};

	class UProductPaint_TA* GetPaintByName ( struct FName PaintName );
	class UProductPaint_TA* GetPaint ( int Id );
	struct FName GetPaintName ( int PaintID );
	int GetPaintID ( struct FName PaintName );
};

UClass* UPaintDatabase_TA::pClassPointer = NULL;

// Class TAGame.ParticleSystemComponent_TA
// 0x000C (0x031C - 0x0310)
class UParticleSystemComponent_TA : public UParticleSystemComponent
{
public:
	struct FVector                                     PreviewFakeVelocity;                              		// 0x0310 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3800 ];

		return pClassPointer;
	};

};

UClass* UParticleSystemComponent_TA::pClassPointer = NULL;

// Class TAGame.Persona_TA
// 0x0080 (0x00BC - 0x003C)
class UPersona_TA : public UObject
{
public:
	struct FString                                     PlayerName;                                       		// 0x003C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FUniqueNetId                                PlayerID;                                         		// 0x0048 (0x0048) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      OnlinePresenceState;                              		// 0x0090 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     OnlinePresenceMessage;                            		// 0x0094 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bBlockedStatus : 1;                               		// 0x00A0 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	int                                                GroupId;                                          		// 0x00A4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00A8 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.Persona_TA.LastActive
	struct FString                                     PlayerNote;                                       		// 0x00B0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3802 ];

		return pClassPointer;
	};

	void UpdateFromOnlineFriend ( struct FOnlineFriend OnlineInfo );
};

UClass* UPersona_TA::pClassPointer = NULL;

// Class TAGame.Personas_TA
// 0x0048 (0x0084 - 0x003C)
class UPersonas_TA : public UObject
{
public:
	TArray< class UPersona_TA* >                       Personas;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMap_Mirror                                 PersonaMap;                                       		// 0x0048 (0x003C) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3804 ];

		return pClassPointer;
	};

	void GetAllPersonasInGroup ( int GroupId, TArray< class UPersona_TA* >* OutPersonas );
	void AddPersona ( class UPersona_TA* Persona );
	class UPersona_TA* CreatePersona ( struct FUniqueNetId PlayerID, struct FString PlayerName );
	class UPersona_TA* CreatePersonaWithData ( struct FOnlineFriend FriendData );
	class UPersona_TA* UpdatePersonaFromData ( struct FOnlineFriend FriendData );
	void AddToMap ( class UPersona_TA* Persona );
	class UPersona_TA* GetPersonaFromID ( struct FUniqueNetId PlayerID );
};

UClass* UPersonas_TA::pClassPointer = NULL;

// Class TAGame.PhysicalMaterialProperty_TA
// 0x0010 (0x004C - 0x003C)
class UPhysicalMaterialProperty_TA : public UPhysicalMaterialPropertyBase
{
public:
	float                                              TireFrictionScale;                                		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AkSwitchValue;                                    		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStickyWheels : 1;                                		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bConsiderForGround : 1;                           		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3806 ];

		return pClassPointer;
	};

};

UClass* UPhysicalMaterialProperty_TA::pClassPointer = NULL;

// Class TAGame.PitchTekDrawingComponent_TA
// 0x002F (0x0094 - 0x0065)
class UPitchTekDrawingComponent_TA : public UActorComponent
{
public:
	struct FVector                                     PreviousOwnerPosition;                            		// 0x0068 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DecalType;                                        		// 0x0074 (0x0001) [0x0000000000000000]              
	TArray< struct FWheelContactData >                 WheelContacts;                                    		// 0x0078 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FPitchTekCarBodyContactData                 CarBodyContactData;                               		// 0x0084 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3808 ];

		return pClassPointer;
	};

	void QueueJumpBlastDecal ( struct FVector JumpBlastLocation );
	void QueueDemolitionExplosionDecal ( struct FVector DemolitionExplosionLocation );
	void QueueGoalExplosionDecal ( struct FVector GoalExplosionLocation );
};

UClass* UPitchTekDrawingComponent_TA::pClassPointer = NULL;

// Class TAGame.PremiumSkin_TA
// 0x0044 (0x0080 - 0x003C)
class UPremiumSkin_TA : public UObject
{
public:
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Quality;                                          		// 0x0040 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkinType;                                         		// 0x0041 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FMaterialParams                             SkinParameters;                                   		// 0x0044 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  Thumbnail;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UPremiumSkinSet_TA* >                SkinSets;                                         		// 0x006C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UProductAsset_Skin_TA*                       AssetTemplate;                                    		// 0x0078 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UProductTemplate_TA*                         ProductTemplate;                                  		// 0x007C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3810 ];

		return pClassPointer;
	};

};

UClass* UPremiumSkin_TA::pClassPointer = NULL;

// Class TAGame.PremiumSkinSet_TA
// 0x0010 (0x004C - 0x003C)
class UPremiumSkinSet_TA : public UObject
{
public:
	class UProductAsset_Body_TA*                       Body;                                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPremiumSkinSetItem >               Skins;                                            		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3812 ];

		return pClassPointer;
	};

};

UClass* UPremiumSkinSet_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_TA
// 0x0040 (0x007C - 0x003C)
class UProductAsset_TA : public UObject
{
public:
	class UProductTemplate_TA*                         Product;                                          		// 0x003C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UTexture2D*                                  Thumbnail;                                        		// 0x0040 (0x0004) [0x0000000000200003]              ( CPF_Edit | CPF_Const )
	class UThumbnailRenderer_TA*                       ThumbnailRenderer;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ThumbnailCameraTranslationOffset;                 		// 0x0048 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    ThumbnailCameraRotationOffset;                    		// 0x0054 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    ThumbnailProductRotation;                         		// 0x0060 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceRebuildThumbnail : 1;                       		// 0x006C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< class UProductAttribute_TA* >              Attributes;                                       		// 0x0070 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3814 ];

		return pClassPointer;
	};

	class UProductAttribute_TA* GetAttribute ( class UClass* AttributeClass );
	void eventModifyThumbnailScene ( class UThumbnailScene_TA* Scene, TArray< class UProductAttribute_TA* >* InAttributes );
	struct FString eventCheckCanSave ( );
	class UProduct_TA* GetProduct ( );
};

UClass* UProductAsset_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Body_TA
// 0x01E8 (0x0264 - 0x007C)
class UProductAsset_Body_TA : public UProductAsset_TA
{
public:
	class USkeletalMesh*                               Mesh;                                             		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0084 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UHandlingPreset_TA*                          HandlingPreset;                                   		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVehicleAxleSettings                        FrontAxle;                                        		// 0x0098 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FVehicleAxleSettings                        BackAxle;                                         		// 0x00C0 (0x0028) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVehicleAxleSettings >              AdditionalAxles;                                  		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MassScale;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BallHitZDamping;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FSimpleSpringSettings                       ChassisSpring;                                    		// 0x00FC (0x0050) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChassisRotationScale;                             		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChassisTranslationScale;                          		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravelMax;                              		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravelMin;                              		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLegacySuspensionOffsets : 1;                  		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAkSoundCue*                                 EngineSound;                                      		// 0x0160 (0x0004) [0x0000000000000000]              
	class UAkSoundCue*                                 ExhaustSound;                                     		// 0x0164 (0x0004) [0x0000000000000000]              
	class UAkSoundCue*                                 BlowoffSound;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	class UEngineAudioProfile_TA*                      EngineAudioProfile;                               		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_EngineAudio_TA*                EngineAudioAsset;                                 		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UProductAsset_EngineAudio_TA* >      EngineAudioAssets;                                		// 0x0174 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                EngineAudioProductID;                             		// 0x0180 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UProductAssetReference_TA*                   EngineAudioReference;                             		// 0x0184 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class AFXActor_X*                                  FXActor;                                          		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SkinMaterialIndex;                                		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BrakelightMaterialIndex;                          		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ChassisMaterialIndex;                             		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             BoostEmitterSockets;                              		// 0x0198 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BoostFlapsAngle;                                  		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UProductAsset_TA* >                  ForcedProducts;                                   		// 0x01A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ForcedProductsBehavior;                           		// 0x01B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FTeamPaintFinish                            ForcedPaintFinishes[ 0x2 ];                       		// 0x01B8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ForcedTeamColors[ 0x2 ];                          		// 0x01C8 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ForcedCustomColor;                                		// 0x01E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UProduct_TA* >                       AdditionalUnlocks2;                               		// 0x01F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FProductAttachment >                Attachments;                                      		// 0x0204 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FParticleSysParam >                 BoostParticleParameters;                          		// 0x0210 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystem*                             SupersonicWheelTemplate;                          		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  DemolishFX;                                       		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  SpawnFX;                                          		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  ExitFX;                                           		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelPreviewAnimTranslateScale;                   		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMaterialParams                             SkinParameters;                                   		// 0x0230 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UProductAsset_Wheel_TA*                      ThumbnailWheelAsset;                              		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSkeletalMeshLODDistanceInfo >      LODDistanceInfo;                                  		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3816 ];

		return pClassPointer;
	};

	bool CanEquip ( class UProduct_TA* InProduct );
	bool HasBone ( struct FName InBoneName );
	void FixPhysicsBoxTranslation ( );
	void eventModifyThumbnailScene ( class UThumbnailScene_TA* Scene, TArray< class UProductAttribute_TA* >* InAttributes );
	struct FString eventCheckCanSave ( );
};

UClass* UProductAsset_Body_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Bot_TA
// 0x0020 (0x009C - 0x007C)
class UProductAsset_Bot_TA : public UProductAsset_TA
{
public:
	TArray< class UProduct_TA* >                       LoadoutProducts2;                                 		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                BlueTeamColorID;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OrangeTeamColorID;                                		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CustomColorID;                                    		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAITraits                                   Traits;                                           		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3818 ];

		return pClassPointer;
	};

	struct FLoadoutData GetLoadout ( int TeamIndex );
};

UClass* UProductAsset_Bot_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Container_TA
// 0x0000 (0x007C - 0x007C)
class UProductAsset_Container_TA : public UProductAsset_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3820 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_Container_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_EngineAudio_TA
// 0x0020 (0x009C - 0x007C)
class UProductAsset_EngineAudio_TA : public UProductAsset_TA
{
public:
	class UAkSoundCue*                                 EngineSound;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ExhaustSound;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 IgnitionSound;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 BlowoffSound;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ThrottleEngageSound;                              		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ThrottleReleaseSound;                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 GearChangeSound;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UEngineAudioProfileBase_TA*                  Profile;                                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3822 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_EngineAudio_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_GoalExplosion_TA
// 0x0004 (0x0080 - 0x007C)
class UProductAsset_GoalExplosion_TA : public UProductAsset_TA
{
public:
	class AFXActor_X*                                  GoalExplosionFX;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3824 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_GoalExplosion_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Pack_TA
// 0x0000 (0x007C - 0x007C)
class UProductAsset_Pack_TA : public UProductAsset_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3826 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_Pack_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_PaintFinish_TA
// 0x004C (0x00C8 - 0x007C)
class UProductAsset_PaintFinish_TA : public UProductAsset_TA
{
public:
	class ULightCurveType_TA*                          LightCurveType;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    DetailNormal;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpecularTint;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RimLightTint;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DiffuseDetailNormalStrength;                      		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpecularDetailNormalStrength;                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpecularStrength;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnvironmentStrength;                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SparkleStrength;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PearlescentStrength;                              		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTextureParameterValue >            TextureParameterValues;                           		// 0x00A4 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValue >             ScalarParameterValues;                            		// 0x00B0 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValue >             VectorParameterValues;                            		// 0x00BC (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3828 ];

		return pClassPointer;
	};

	void eventModifyThumbnailScene ( class UThumbnailScene_TA* Scene, TArray< class UProductAttribute_TA* >* InAttributes );
	void SetPaintFinishParametersOnMaterial ( class UMaterialInstance* MatInst, class UProductAsset_PaintFinish_TA* Finish, struct FString Prefix );
};

UClass* UProductAsset_PaintFinish_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_PlayerBanner_TA
// 0x0020 (0x009C - 0x007C)
class UProductAsset_PlayerBanner_TA : public UProductAsset_TA
{
public:
	class USwfMovie*                                   MovieReference;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TopLayer;                                         		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  PaintableLayer;                                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  TintableLayer;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DefaultPaintColor;                                		// 0x008C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3830 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_PlayerBanner_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Skin_TA
// 0x0054 (0x00D0 - 0x007C)
class UProductAsset_Skin_TA : public UProductAsset_TA
{
public:
	class UMaterialInterface*                          Skin;                                             		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Body_TA*                       Body;                                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMaterialParams                             SkinParameters;                                   		// 0x0084 (0x0024) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      SkinType;                                         		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ThumbnailTeamColor;                               		// 0x00AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ThumbnailCustomColor;                             		// 0x00BC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTeamFinishDisabled : 1;                          		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCustomFinishDisabled : 1;                        		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3832 ];

		return pClassPointer;
	};

	bool HasForcedCustomFinish ( );
	bool HasForcedTeamFinish ( );
	void eventModifyThumbnailScene ( class UThumbnailScene_TA* Scene, TArray< class UProductAttribute_TA* >* InAttributes );
	struct FString eventCheckCanSave ( );
};

UClass* UProductAsset_Skin_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_SupersonicTrail_TA
// 0x000C (0x0088 - 0x007C)
class UProductAsset_SupersonicTrail_TA : public UProductAsset_TA
{
public:
	class AFXActor_TA*                                 FXActor;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkEnterSound;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkLoopSound;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3834 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_SupersonicTrail_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Wheel_TA
// 0x0040 (0x00BC - 0x007C)
class UProductAsset_Wheel_TA : public UProductAsset_TA
{
public:
	unsigned char                                      MirrorMode;                                       		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 RearStaticMesh;                                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               RearSkeletalMesh;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimTree;                                         		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 CollisionMesh;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAttachmentBehavior_TA* >            Behaviors;                                        		// 0x0098 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FWheelAttachment                            Attachment;                                       		// 0x00A4 (0x0018) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3836 ];

		return pClassPointer;
	};

	struct FVector GetMeshBoxExtent ( unsigned char WheelPos );
	void eventModifyThumbnailScene ( class UThumbnailScene_TA* Scene, TArray< class UProductAttribute_TA* >* InAttributes );
	struct FString eventCheckCanSave ( );
};

UClass* UProductAsset_Wheel_TA::pClassPointer = NULL;

// Class TAGame.ProductAssetReference_TA
// 0x0008 (0x0044 - 0x003C)
class UProductAssetReference_TA : public UObject
{
public:
	class UProductAsset_TA*                            Asset;                                            		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ProductID;                                        		// 0x0040 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3838 ];

		return pClassPointer;
	};

};

UClass* UProductAssetReference_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_TA
// 0x0018 (0x0054 - 0x003C)
class UProductAttribute_TA : public UObject
{
public:
	struct FName                                       Typename;                                         		// 0x003C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bReplicated : 1;                                  		// 0x0044 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bRequiresDynamicThumbnail : 1;                    		// 0x0044 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	struct FString                                     Label;                                            		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3840 ];

		return pClassPointer;
	};

	struct FString eventGetSortLabel ( );
	struct FString GetTypeHashID ( );
	struct FString eventGetHashID ( );
	struct FString GetOnlineProductAttributeValue ( );
	struct FOnlineProductAttribute InstanceOnlineProductAttribute ( );
	void ApplyToObject ( class UProductAsset_TA* Asset, class UObject* Target );
	void ApplyAttributes ( class UProductAsset_TA* Asset, class UObject* Target, TArray< class UProductAttribute_TA* >* Attributes );
	void OnLoaded ( );
	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* OtherAttributes );
	bool eventInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* OtherAttributes );
	class UProductAttribute_TA* Get ( class UClass* AttributeClass, TArray< class UProductAttribute_TA* > Attributes );
};

UClass* UProductAttribute_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Certified_TA
// 0x0024 (0x0078 - 0x0054)
class UProductAttribute_Certified_TA : public UProductAttribute_TA
{
public:
	struct FName                                       ValueKeyName;                                     		// 0x0054 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UCertifiedStat_TA*                           CertifiedStat;                                    		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                StatId;                                           		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                StatValue;                                        		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventRankedUp__Delegate;                        		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x006C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3842 ];

		return pClassPointer;
	};

	struct FString GetSortLabel ( );
	struct FString eventGetHashID ( );
	struct FString GetTypeHashID ( );
	struct FString GetDescription ( );
	struct FString GetRankLabel ( );
	int GetRank ( );
	void AddStatValue ( int InValue );
	struct FString GetOnlineProductAttributeValue ( );
	void OnLoaded ( );
	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* Attributes );
	class UProductAttribute_Certified_TA* CreateInstance ( struct FName StatName );
	void EventRankedUp ( class UProductAttribute_Certified_TA* CertifiedAttribute );
};

UClass* UProductAttribute_Certified_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Licensed_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Licensed_TA : public UProductAttribute_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3844 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_Licensed_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_LicenseGroup_TA
// 0x0008 (0x005C - 0x0054)
class UProductAttribute_LicenseGroup_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      Group;                                            		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRequireSameLicenseGroupOnBody : 1;               		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3846 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_LicenseGroup_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Painted_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_Painted_TA : public UProductAttribute_TA
{
public:
	int                                                PaintID;                                          		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3848 ];

		return pClassPointer;
	};

	bool __ProductAttribute_Painted_TA__ApplyToSetParameter ( struct FPaintAttributeParameter PaintParam );
	struct FString GetSortLabel ( );
	struct FString eventGetHashID ( );
	struct FString GetTypeHashID ( );
	void ApplyToPlayerBanner ( class UPlayerBanner_TA* Banner, class UProductPaint_TA* Paint );
	void ApplyToFXActor ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class AFXActor_TA* FXActor );
	struct FLinearColor GetPaintColor ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, unsigned char PaintVariant );
	void ApplyToSetParameter ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UISetParameter* Target, TArray< struct FPaintAttributeParameter >* FilterLocal_0E6D84364CE6241C81C8AB91AE6522C2 );
	void ApplyToBody ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UCarMeshComponentBase_TA* Mesh );
	void ApplyToMesh ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UMeshComponent* Mesh, unsigned long bSkinAsset );
	void ApplyPaintToObject ( class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UObject* Target, unsigned long bSkinAsset );
	void ApplyToObject ( class UProductAsset_TA* Asset, class UObject* Target );
	struct FString GetOnlineProductAttributeValue ( );
	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* Attributes );
	class UProductAttribute_Painted_TA* CreateInstance ( int InPaintID );
};

UClass* UProductAttribute_Painted_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_PaintSettings_TA
// 0x0074 (0x00C8 - 0x0054)
class UProductAttribute_PaintSettings_TA : public UProductAttribute_TA
{
public:
	struct FPaintMaterialGroup                         MaterialGroups[ 0x2 ];                            		// 0x0054 (0x0018) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bPaintParticles : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPaintBody : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       PaintParameterName;                               		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PaintType;                                        		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPaintAttributeParameter >          PaintAdditionalParameters;                        		// 0x007C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PaintEmissiveMultiplier;                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                PaintableMaterials;                               		// 0x008C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                PaintableMaterialsMetallic;                       		// 0x0098 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UProductPaint_TA* >                  IncludePaints;                                    		// 0x00A4 (0x000C) [0x0000000000402003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UProductPaint_TA* >                  ExcludePaints;                                    		// 0x00B0 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UProductPaint_TA* >                  UnsupportedPaints;                                		// 0x00BC (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3850 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_PaintSettings_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_PaintSettingsUpload_TA
// 0x000C (0x0060 - 0x0054)
class UProductAttribute_PaintSettingsUpload_TA : public UProductAttribute_TA
{
public:
	TArray< int >                                      ExcludePaints;                                    		// 0x0054 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3852 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_PaintSettingsUpload_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_PlatformExclusive_TA
// 0x0010 (0x0064 - 0x0054)
class UProductAttribute_PlatformExclusive_TA : public UProductAttribute_TA
{
public:
	TArray< unsigned char >                            InclusiveConsoles;                                		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UProduct_TA*                                 ReplacementProduct;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3854 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_PlatformExclusive_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Quality_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_Quality_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      Quality;                                          		// 0x0054 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3856 ];

		return pClassPointer;
	};

	struct FString eventGetHashID ( );
	struct FString GetTypeHashID ( );
	struct FString GetOnlineProductAttributeValue ( );
	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* Attributes );
};

UClass* UProductAttribute_Quality_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_QualityProductDBOverride_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_QualityProductDBOverride_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      QualityOverride;                                  		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3858 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_QualityProductDBOverride_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_TeamForcedProduct_TA
// 0x0008 (0x005C - 0x0054)
class UProductAttribute_TeamForcedProduct_TA : public UProductAttribute_TA
{
public:
	class UProductAssetReference_TA*                   Teams[ 0x2 ];                                     		// 0x0054 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3860 ];

		return pClassPointer;
	};

	int ValidateProduct ( int TeamIndex, int ProductID );
	bool eventCanEquip ( int ProductID );
};

UClass* UProductAttribute_TeamForcedProduct_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_UnlockMethod_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_UnlockMethod_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      UnlockMethod;                                     		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3862 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_UnlockMethod_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_UserColor_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_UserColor_TA : public UProductAttribute_TA
{
public:
	int                                                ColorID;                                          		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3864 ];

		return pClassPointer;
	};

	void ApplyToObject ( class UProductAsset_TA* Asset, class UObject* Target );
	class UProductAttribute_UserColor_TA* CreateInstance ( int InColorID );
	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* OtherAttributes );
};

UClass* UProductAttribute_UserColor_TA::pClassPointer = NULL;

// Class TAGame.ProductDatabase_Builder_TA
// 0x0004 (0x0040 - 0x003C)
class UProductDatabase_Builder_TA : public UObject
{
public:
	unsigned long                                      bPrime : 1;                                       		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClickToBuildMarked : 1;                          		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3866 ];

		return pClassPointer;
	};

};

UClass* UProductDatabase_Builder_TA::pClassPointer = NULL;

// Class TAGame.ProductDatabase_TA
// 0x0090 (0x00CC - 0x003C)
class UProductDatabase_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bDebug : 1;                                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoadingAssetAsync : 1;                           		// 0x0040 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAssetLoadedThisFrame : 1;                        		// 0x0040 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	TArray< class UProduct_TA* >                       Products_New;                                     		// 0x0044 (0x000C) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< class UDLCPack_TA* >                       DLCPacks;                                         		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UProductAsset_TA* >                  AlwaysLoadedAssets;                               		// 0x005C (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FBodyToEngineAudioPair >            BodyToEngineAudioMap;                             		// 0x0068 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FMap_Mirror                                 ProductNameToProductID;                           		// 0x0074 (0x003C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FAssetLoadRequest >                 LoadAssetQue;                                     		// 0x00B0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTemporaryProduct >                 TemporaryProducts;                                		// 0x00BC (0x000C) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	class UProductThumbnailQueue_TA*                   ThumbnailQueue;                                   		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3868 ];

		return pClassPointer;
	};

	class UOnlineProduct_TA* FindProductByProductID ( int ProductID, TArray< class UOnlineProduct_TA* >* OnlineProducts );
	class UOnlineProduct_TA* FindProductByInstanceID ( TArray< class UOnlineProduct_TA* >* OnlineProducts );
	void DisplaySort ( TArray< struct FSortedProductData >* SortedProducts );
	bool ContainsOnlineProducts ( );
	bool StaticIsOnlineQuality ( unsigned char Quality );
	bool IsOnlineUnlock ( unsigned char UnlockMethod );
	bool IsOnlineID ( );
	void FlushAsyncLoading ( );
	bool DoesPlayerOwnProduct ( int ProductID, struct FUniqueNetId* PlayerID );
	void RemoveIncompatibleProducts ( TArray< int >* OutProducts );
	void RemoveIncompatibleLoadout ( struct FLoadoutData* Loadout );
	int ReplaceIncompatibleProduct ( int ProductID, TArray< int >* EquippedProducts );
	bool CanEquip ( int ProductID, TArray< int >* EquippedProducts );
	void ConvertProductIDs ( TArray< int >* ProductIDs, TArray< class UProduct_TA* >* OutProducts );
	void CancelLoadAsset ( int ProductID, class UObject* Listener );
	void CancelLoadAssets ( class UObject* Listener );
	void LoadAssetByNameAsync ( struct FName AssetName, struct FScriptDelegate OnLoaded );
	void LoadAssetAsync ( int ProductID, struct FScriptDelegate OnLoaded );
	class UProductAsset_TA* LoadAssetByName ( struct FName AssetName );
	class UProductAsset_TA* LoadAsset ( int ProductID );
	TArray< class UProduct_TA* > GetAllProductsBySlot ( class UProductSlot_TA* Slot );
	void AllProductsBySlot ( class UProductSlot_TA* Slot, class UProduct_TA** Product );
	void AllProducts ( class UProduct_TA** Product );
	class UProduct_TA* GetProductByName ( struct FName ProductName );
	class UProduct_TA* GetProduct ( int Id );
	struct FName GetProductName ( int ProductID );
	int GetProductID ( struct FName ProductName );
};

UClass* UProductDatabase_TA::pClassPointer = NULL;

// Class TAGame.ProductFilter_TA
// 0x0010 (0x004C - 0x003C)
class UProductFilter_TA : public UObject
{
public:
	struct FScriptDelegate                             __ProductUnlocked__Delegate;                      		// 0x003C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3870 ];

		return pClassPointer;
	};

	void AddLogLevel ( unsigned char LogLevel, struct FProductFilter* Filter );
	struct FString GetFilterLogString ( struct FProductFilter Filter );
	void SortProductIDs ( struct FScriptDelegate ProductUnlockedDelegate, TArray< class UOnlineProduct_TA* >* OnlineProducts );
	void FilterProducts ( struct FProductFilter* Filter );
	bool ProductUnlocked ( int ProductID );
};

UClass* UProductFilter_TA::pClassPointer = NULL;

// Class TAGame.ProductLoader_TA
// 0x0020 (0x0068 - 0x0048)
class UProductLoader_TA : public UComponent
{
public:
	TArray< class UProductAsset_TA* >                  Assets;                                           		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumLoadingAssets;                                 		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventAllProductsLoaded__Delegate;               		// 0x0058 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x005C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3872 ];

		return pClassPointer;
	};

	void __ProductLoader_TA__LoadProducts ( class UProduct_TA* P );
	bool __ProductLoader_TA__AddForcedProducts ( class UProductAsset_TA* Asset );
	void __ProductLoader_TA__AddMissingSlots ( class UProductSlot_TA* Slot );
	bool __ProductLoader_TA__AddMissingSlots1 ( class UProductSlot_TA* Slot );
	bool __ProductLoader_TA__AddMissingSlots2 ( class UProductSlot_TA* Slot );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void CancelLoad ( );
	void OnAllAssetsLoaded ( );
	void HandleRequiredAssetLoaded ( struct FAssetLoadResult Result );
	void AddEngineAudio ( );
	void AddMissingSlots ( TArray< class UProductSlot_TA* >* FilterLocal_2DB583DF482610A7910A748C3650FD75, TArray< class UProductSlot_TA* >* FilterLocal_D9654814416A62011D3C3FBAC21542A2 );
	void AddForcedProducts ( TArray< class UProductAsset_TA* >* FilterLocal_01B3630C4AB65482566A4D97CD284604 );
	void OnAllLoadoutAssetsLoaded ( );
	void HandleLoadoutAssetLoaded ( struct FAssetLoadResult Result );
	void HandleAssetLoaded ( struct FAssetLoadResult Result );
	class UProductAsset_TA* AllProducts ( class UClass* ProductClass, class UProductAsset_TA** Asset );
	class UProductAsset_TA* GetProduct ( class UClass* ProductClass );
	class UProductAsset_TA* GetProductByID ( int ProductID );
	class UProductAsset_TA* GetProductBySlot ( class UProductSlot_TA* Slot );
	void LoadClientLoadout ( struct FClientLoadoutData* NewLoadout );
	void LoadLoadout ( struct FLoadoutData* NewLoadout );
	bool ShouldLoadProduct ( class UProduct_TA* Product );
	void LoadProduct ( int ProductID, struct FScriptDelegate Callback );
	void LoadProducts ( TArray< int > ProductIDs );
	void EventAllProductsLoaded ( class UProductLoader_TA* Loader );
};

UClass* UProductLoader_TA::pClassPointer = NULL;

// Class TAGame.ProductPaint_TA
// 0x008D (0x00C9 - 0x003C)
class UProductPaint_TA : public UObject
{
public:
	struct FString                                     Label;                                            		// 0x003C (0x000C) [0x0000000000428003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_EditConst | CPF_NeedCtorLink )
	struct FLinearColor                                Colors[ 0x4 ];                                    		// 0x0048 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                PaintColor;                                       		// 0x0088 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FLinearColor                                EmissiveColor;                                    		// 0x0098 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FLinearColor                                LightAccentColor;                                 		// 0x00A8 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FLinearColor                                DarkAccentColor;                                  		// 0x00B8 (0x0010) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      FinishType;                                       		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3874 ];

		return pClassPointer;
	};

	int GetID ( );
};

UClass* UProductPaint_TA::pClassPointer = NULL;

// Class TAGame.ProductSlot_TA
// 0x0040 (0x007C - 0x003C)
class UProductSlot_TA : public UObject
{
public:
	struct FString                                     Label;                                            		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AnimatedLabel;                                    		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                SlotIndex;                                        		// 0x0060 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UProduct_TA*                                 DefaultProduct_New;                               		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductTemplate_TA*                         ProductTemplate;                                  		// 0x0068 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UProductAsset_TA*                            ProductAssetTemplate;                             		// 0x006C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UTexture*                                    Icon;                                             		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bReplicated : 1;                                  		// 0x0074 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAlwaysCooked : 1;                                		// 0x0074 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDedicatedServerRelevant : 1;                     		// 0x0074 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAlwaysLoaded : 1;                                		// 0x0074 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowLicensedEquip : 1;                          		// 0x0074 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	float                                              DropWeight;                                       		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3876 ];

		return pClassPointer;
	};

	int GetDefaultProductID ( );
};

UClass* UProductSlot_TA::pClassPointer = NULL;

// Class TAGame.ProductTemplate_TA
// 0x0060 (0x009C - 0x003C)
class UProductTemplate_TA : public UObject
{
public:
	class UProductSlot_TA*                             Slot;                                             		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      GameVersion;                                      		// 0x0040 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnlockMethod;                                     		// 0x0041 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Quality;                                          		// 0x0042 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Pack_TA*                       Folder;                                           		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDLCPack_TA*                                 DLC;                                              		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      StatClass;                                        		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProduct_TA*                                 RequiredProduct;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FProductReplacement2                        PlatformReplacement;                              		// 0x0054 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            PlatformExclusive;                                		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            TradeRestrictions;                                		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UProductAttribute_TA* >              Attributes;                                       		// 0x007C (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UProductAttribute_TA* >              ChinaAttributes;                                  		// 0x0088 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bLocalized : 1;                                   		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoGenerateDLCPack : 1;                         		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLicensed : 1;                                    		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                SortPriority;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3878 ];

		return pClassPointer;
	};

};

UClass* UProductTemplate_TA::pClassPointer = NULL;

// Class TAGame.Product_TA
// 0x0018 (0x00B4 - 0x009C)
class UProduct_TA : public UProductTemplate_TA
{
public:
	struct FName                                       AssetPackageName;                                 		// 0x009C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     AssetPath;                                        		// 0x00A4 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bReplaced : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPack : 1;                                        		// 0x00B0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3880 ];

		return pClassPointer;
	};

	bool IsPaintable ( );
	struct FString GetLongLabel ( );
	struct FString GetDisplayLabelSlot ( );
	unsigned char GetQuality ( );
	bool IsPlatformExclusive ( );
	bool IsLicensed ( );
	bool IsSchematic ( );
	bool IsContainerKey ( );
	bool IsContainerUnlocked ( );
	bool IsContainer ( );
	bool CanEquip ( );
	TArray< class UProductAttribute_TA* > GetAttributes ( );
	class UProductAttribute_TA* GetAttribute ( class UClass* AttributeClass );
	TArray< unsigned char > GetPlatforms ( );
	void LoadAssetAsync ( struct FScriptDelegate Callback );
	class UProductAsset_TA* LoadAsset ( );
	struct FString GetTrademarkLabel ( );
	struct FString GetAsciiLabel ( );
	struct FString GetLabel ( );
	int GetID ( );
	int GetPackID ( );
};

UClass* UProduct_TA::pClassPointer = NULL;

// Class TAGame.ProductThumbnail_TA
// 0x000C (0x0048 - 0x003C)
class UProductThumbnail_TA : public UObject
{
public:
	class UTexture*                                    Texture;                                          		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureRenderTarget2D*                      RenderTarget;                                     		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RenderCount;                                      		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3882 ];

		return pClassPointer;
	};

	void ResetRenderCount ( );
};

UClass* UProductThumbnail_TA::pClassPointer = NULL;

// Class TAGame.ProductThumbnailQueue_TA
// 0x003C (0x0078 - 0x003C)
class UProductThumbnailQueue_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< int >                                      ThumbnailSizes;                                   		// 0x0040 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              RenderDelay;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ThumbnailPurgeThreshold;                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RenderCountMax;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCreatedThumbnailScene : 1;                       		// 0x0058 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	TArray< struct FRenderThumbnailScene >             SceneQue;                                         		// 0x005C (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRenderThumbnailRequest >           Requests;                                         		// 0x0068 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ThumbnailsCreatedSinceLastPurge;                  		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3884 ];

		return pClassPointer;
	};

	void CancelRenderThumbnail ( class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, unsigned char Size );
	void CancelRenderThumbnails ( class UObject* Listener );
	void RenderThumbnail ( class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, unsigned char Size, struct FScriptDelegate OnRendered );
};

UClass* UProductThumbnailQueue_TA::pClassPointer = NULL;

// Class TAGame.ProductUtil_TA
// 0x0000 (0x003C - 0x003C)
class UProductUtil_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3886 ];

		return pClassPointer;
	};

	void RemovingMissingInstanceIDs ( TArray< class UOnlineProduct_TA* >* OnlineProducts );
	class UOnlineProduct_TA* CreateOnlineProduct ( struct FOnlineProductData* ProductData );
	void ProcessOnlineData ( TArray< struct FOnlineProductData >* InProductData, TArray< class UOnlineProduct_TA* >* OutProducts );
	class UOnlineProduct_TA* GetFirstOnlineProduct ( int ProductID, TArray< class UOnlineProduct_TA* >* OnlineProducts );
	int GetProductIDFromOnlineID ( TArray< class UOnlineProduct_TA* >* OnlineProducts );
	class UOnlineProduct_TA* GetOnlineProductByID ( TArray< class UOnlineProduct_TA* >* OnlineProducts );
	TArray< class UOnlineProduct_TA* > GetNewProducts ( TArray< class UOnlineProduct_TA* >* OldProducts, TArray< class UOnlineProduct_TA* >* NewProducts );
	bool IsOnlineID ( );
};

UClass* UProductUtil_TA::pClassPointer = NULL;

// Class TAGame.PSC_Constrained_TA
// 0x0008 (0x0318 - 0x0310)
class UPSC_Constrained_TA : public UParticleSystemComponent
{
public:
	float                                              WorldZ;                                           		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttachedRotation : 1;                            		// 0x0314 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3888 ];

		return pClassPointer;
	};

};

UClass* UPSC_Constrained_TA::pClassPointer = NULL;

// Class TAGame.Pylon_Soccar_TA
// 0x0078 (0x0414 - 0x039C)
class APylon_Soccar_TA : public APylon
{
public:
	class UAkSoundCue*                                 InGameMusicCue;                                   		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDynamicMusic : 1;                                		// 0x03A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAkSoundCue*                                 GoalScoreSound;                                   		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 GoalScoreVO;                                      		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 GameStartStinger;                                 		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 GoalScoreStinger;                                 		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 EpicSaveStinger;                                  		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 OvertimeStinger;                                  		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 WinStinger;                                       		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 LoseStinger;                                      		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GoalScoreStingerDelay;                            		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    FieldOrientation;                                 		// 0x03C8 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     FieldSize;                                        		// 0x03D4 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     FieldExtent;                                      		// 0x03E0 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     FieldCenter;                                      		// 0x03EC (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< class UGoal_TA* >                          Goals;                                            		// 0x03F8 (0x000C) [0x00000000044A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class APlayerStart* >                      SpawnPoints;                                      		// 0x0404 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	float                                              GroundZ;                                          		// 0x0410 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3890 ];

		return pClassPointer;
	};

	struct FVector ClampPointToField ( struct FVector V );
	struct FVector ClampToField ( struct FVector V );
};

UClass* APylon_Soccar_TA::pClassPointer = NULL;

// Class TAGame.Ball_Breakout_TA
// 0x00A8 (0x08B8 - 0x0810)
class ABall_Breakout_TA : public ABall_TA
{
public:
	TArray< struct FBreakoutDamage >                   DamageAtTime;                                     		// 0x0810 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      DamageForceLevels;                                		// 0x081C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClearTeamOnDamage : 1;                           		// 0x0828 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanDamageOwnTeam : 1;                            		// 0x0828 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              MinDamageVelocity;                                		// 0x082C (0x0004) [0x0000000000000000]              
	float                                              MinDamageTime;                                    		// 0x0830 (0x0004) [0x0000000000000000]              
	int                                                MinImpactSpeedForCharge;                          		// 0x0834 (0x0004) [0x0000000000000000]              
	float                                              DoubleTapTime;                                    		// 0x0838 (0x0004) [0x0000000000000000]              
	float                                              ForceAccumDecayPerSecond;                         		// 0x083C (0x0004) [0x0000000000000000]              
	float                                              ForceAccumMax;                                    		// 0x0840 (0x0004) [0x0000000000000000]              
	float                                              ForceAccumRecent;                                 		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastTeamTouch;                                    		// 0x0848 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class ACar_TA*                                     LastCarTouch;                                     		// 0x084C (0x0004) [0x0000000000000000]              
	int                                                LastDamage;                                       		// 0x0850 (0x0004) [0x0000000000000000]              
	float                                              LastDamageTime;                                   		// 0x0854 (0x0004) [0x0000000000000000]              
	int                                                DamageIndex;                                      		// 0x0858 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AbsorbedForce;                                    		// 0x085C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAppliedBreakoutDamage                      AppliedDamage;                                    		// 0x0860 (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FScriptDelegate                             __EventDamageIndexChanged__Delegate;              		// 0x0878 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x087C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLastTeamTouchChanged__Delegate;            		// 0x0888 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x088C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitNoDamage__Delegate;                     		// 0x0898 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x089C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAppliedDamage__Delegate;                   		// 0x08A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x08AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3892 ];

		return pClassPointer;
	};

	float GetDamagePercent ( );
	bool WillDamage ( );
	int GetDamageIndexForForce ( float Force );
	int GetDamageIndexForTime ( float Time );
	void eventTick ( float DeltaTime );
	void SetLastTeamTouch ( unsigned char InLastTeamTouch );
	void ForceDamageIndex ( int InIndex );
	void SetDamageIndex ( int InIndex );
	void OnRigidBodyCollision ( struct FAccumulatedRigidBodyCollision Collision );
	void OnCarTouch ( class ACar_TA* HitCar, unsigned char HitType );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventAppliedDamage ( class ABall_Breakout_TA* Ball, struct FAppliedBreakoutDamage Damage );
	void EventHitNoDamage ( class ABall_Breakout_TA* Ball );
	void EventLastTeamTouchChanged ( class ABall_Breakout_TA* Ball, unsigned char InLastTeamTouch );
	void EventDamageIndexChanged ( class ABall_Breakout_TA* Ball, int InDamageIndex );
};

UClass* ABall_Breakout_TA::pClassPointer = NULL;

// Class TAGame.Ball_Trajectory_TA
// 0x0074 (0x0884 - 0x0810)
class ABall_Trajectory_TA : public ABall_TA
{
public:
	TArray< struct FVector >                           AccurateTrajectoryPoints;                         		// 0x0810 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           AllPoints;                                        		// 0x081C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastCalculateTime;                                		// 0x0828 (0x0004) [0x0000000000000000]              
	float                                              FixedDeltaTime;                                   		// 0x082C (0x0004) [0x0000000000000000]              
	float                                              TotalPathDistance;                                		// 0x0830 (0x0004) [0x0000000000000000]              
	int                                                FrameCount;                                       		// 0x0834 (0x0004) [0x0000000000000000]              
	int                                                TotalStepCount;                                   		// 0x0838 (0x0004) [0x0000000000000000]              
	int                                                TotalFrameCount;                                  		// 0x083C (0x0004) [0x0000000000000000]              
	int                                                CurrentStepCount;                                 		// 0x0840 (0x0004) [0x0000000000000000]              
	int                                                StepToPutAPointAt;                                		// 0x0844 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastLocation;                                     		// 0x0848 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastVelocity;                                     		// 0x0854 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastAngularVelocity;                              		// 0x0860 (0x000C) [0x0000000000000000]              
	struct FTrajectorySetup                            TrajectorySettings;                               		// 0x086C (0x0014) [0x0000000000000000]              
	class UBallTrajectoryComponent_TA*                 TrajectoryComponentToUpdate;                      		// 0x0880 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3894 ];

		return pClassPointer;
	};

	bool CalculateTrajectory ( struct FTrajectorySetup Settings, float TrajectoryScale, class UBallTrajectoryComponent_TA* InTrajectoryComponent, struct FVector StartLocation, struct FVector LaunchVelocity, struct FVector InAngularVelocity, unsigned long bForceUpdate );
	bool CanEverShowTrajectory ( );
	void eventPostBeginPlay ( );
};

UClass* ABall_Trajectory_TA::pClassPointer = NULL;

// Class TAGame.Vehicle_TA
// 0x00D4 (0x0770 - 0x069C)
class AVehicle_TA : public ARBActor_TA
{
public:
	class UCarMeshComponent_TA*                        CarMesh;                                          		// 0x069C (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UVehicleSim_TA*                              VehicleSim;                                       		// 0x06A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              StickyForceGround;                                		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StickyForceWall;                                  		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoFlipTorque;                                   		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoFlipForce;                                    		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDriving : 1;                                     		// 0x06B4 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bReplicatedHandbrake : 1;                         		// 0x06B4 (0x0004) [0x0000000000002022] [0x00000002] ( CPF_Const | CPF_Net | CPF_Transient )
	unsigned long                                      bOnGround : 1;                                    		// 0x06B4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSuperSonic : 1;                                  		// 0x06B4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPodiumMode : 1;                                  		// 0x06B4 (0x0004) [0x0000000000002020] [0x00000010] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDebugNetworkWhenDriving : 1;                     		// 0x06B4 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FVehicleInputs                              Input;                                            		// 0x06B8 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedThrottle;                               		// 0x06D8 (0x0001) [0x0000000000002022]              ( CPF_Const | CPF_Net | CPF_Transient )
	unsigned char                                      ReplicatedSteer;                                  		// 0x06D9 (0x0001) [0x0000000000002022]              ( CPF_Const | CPF_Net | CPF_Transient )
	class AAIController_TA*                            AIController;                                     		// 0x06DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerController_TA*                        PlayerController;                                 		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     PRI;                                              		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UObjectListComponent_X*                      CarComponents;                                    		// 0x06E8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                VehicleUpdateTag;                                 		// 0x06EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FBallInteractionSettings                    BallInteraction;                                  		// 0x06F0 (0x002C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCarInteractionData                         CarInteraction;                                   		// 0x071C (0x0008) [0x0000000000000000]              
	struct FVector                                     LocalCollisionOffset;                             		// 0x0724 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LocalCollisionExtent;                             		// 0x0730 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                LastHitBallFrame;                                 		// 0x073C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarComponent_Boost_TA*                      BoostComponent;                                   		// 0x0740 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarComponent_Dodge_TA*                      DodgeComponent;                                   		// 0x0744 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarComponent_AirControl_TA*                 AirControlComponent;                              		// 0x0748 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarComponent_Jump_TA*                       JumpComponent;                                    		// 0x074C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPitchTekDrawingComponent_TA*                PitchTekComponent;                                		// 0x0750 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULocalPlayerAudioParamsComponent_TA*         LocalPlayerAudioParamsComponent;                  		// 0x0754 (0x0004) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              TimeBelowSupersonicSpeed;                         		// 0x0758 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicsConfig_X*                            PhysicsConfig;                                    		// 0x075C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventPRIChanged__Delegate;                      		// 0x0760 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0764 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3896 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void eventVehicleSettingsUpdated ( );
	void eventOnSuperSonicChanged ( );
	void eventOnGroundChanged ( );
	float GetForwardSpeed ( );
	float GetTimeOffGround ( );
	float GetTimeOnGround ( );
	struct FVector GetGroundNormal ( );
	bool IsOnWall ( );
	bool IsOnGround ( );
	int GetNumWheelWorldContacts ( );
	int GetNumWheelContacts ( );
	void ZeroMovementVariables ( );
	void eventSetVehicleInput ( struct FVehicleInputs NewInput );
	void EnablePodiumMode ( );
	void SetDriving ( unsigned long bDrive );
	void OnPRIChanged ( );
	void OnControllerChanged ( );
	void UnPossessed ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void eventReplicatedEvent ( struct FName VarName );
	void EventPRIChanged ( class AVehicle_TA* Vehicle );
};

UClass* AVehicle_TA::pClassPointer = NULL;

// Class TAGame.RBHistory_TA
// 0x0028 (0x0070 - 0x0048)
class URBHistory_TA : public UComponent
{
public:
	TArray< int >                                      FrameSnapshots;                                   		// 0x0048 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned long >                            DirtySnapshots;                                   		// 0x0054 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRBPhysicsSnapshot >                RBPhysicsSnapshots;                               		// 0x0060 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                RecordIndex;                                      		// 0x006C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3898 ];

		return pClassPointer;
	};

};

UClass* URBHistory_TA::pClassPointer = NULL;

// Class TAGame.RBVehicleHistory_TA
// 0x003C (0x00AC - 0x0070)
class URBVehicleHistory_TA : public URBHistory_TA
{
public:
	float                                              InputFadeTime;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRBVehicleSnapshot >                RBVehicleSnapshots;                               		// 0x0074 (0x000C) [0x0000000000482002]              ( CPF_Const | CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FCarComponentHistory >              ComponentHistories;                               		// 0x0080 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FVehicleInputs                              BackupVehicleInputs;                              		// 0x008C (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3900 ];

		return pClassPointer;
	};

};

UClass* URBVehicleHistory_TA::pClassPointer = NULL;

// Class TAGame.RBVehiclePart_TA
// 0x000C (0x0208 - 0x01FC)
class ARBVehiclePart_TA : public AActor
{
public:
	int                                                MaxVehicleParts;                                  		// 0x01FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAkParamGroup*                               Ak;                                               		// 0x0200 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UImpactEffectsComponent_TA*                  ImpactEffectsComponent;                           		// 0x0204 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3902 ];

		return pClassPointer;
	};

	void SetCollisionComponent ( class UPrimitiveComponent* PrimComp );
	void CopyPrimitive ( class UPrimitiveComponent* From, class UPrimitiveComponent* To );
	class UVehiclePartSkeletalMeshComponent_TA* CopySkeletalMesh ( class USkeletalMeshComponent* InComponent, class UPhysicsAsset* CollisionAsset );
	class UVehiclePartStaticMeshComponent_TA* CopyStaticMesh ( class UStaticMeshComponent* InComponent, class URB_BodySetup* BodySetup );
	void RemoveOldVehiclePart ( );
	void InitFX ( );
	void PostBeginPlay ( );
};

UClass* ARBVehiclePart_TA::pClassPointer = NULL;

// Class TAGame.Replay_TA
// 0x01B0 (0x01EC - 0x003C)
class UReplay_TA : public UObject
{
public:
	struct FString                                     ReplayName;                                       		// 0x003C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                EngineVersion;                                    		// 0x0048 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                LicenseeVersion;                                  		// 0x004C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NetVersion;                                       		// 0x0050 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReplayVersion;                                    		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                GameVersion;                                      		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                BuildID;                                          		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Changelist;                                       		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     BuildVersion;                                     		// 0x0064 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              RecordFPS;                                        		// 0x0070 (0x0004) [0x0000000040004002]              ( CPF_Const | CPF_Config | CPF_EditInlineNotify )
	float                                              KeyframeDelay;                                    		// 0x0074 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MaxChannels;                                      		// 0x0078 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                MaxReplaySizeMB;                                  		// 0x007C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	TArray< class UClass* >                            PlaybackClasses;                                  		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreClasses;                                    		// 0x008C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     Filename;                                         		// 0x0098 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Id;                                               		// 0x00A4 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FName                                       MapName;                                          		// 0x00B0 (0x0008) [0x0000000040000002]              ( CPF_Const | CPF_EditInlineNotify )
	struct FString                                     Date;                                             		// 0x00B8 (0x000C) [0x0000000040400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                NumFrames;                                        		// 0x00C4 (0x0004) [0x0000000040000002]              ( CPF_Const | CPF_EditInlineNotify )
	struct FName                                       MatchType;                                        		// 0x00C8 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PlayerName;                                       		// 0x00D0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bFileCorrupted : 1;                               		// 0x00DC (0x0004) [0x0000000040000002] [0x00000001] ( CPF_Const | CPF_EditInlineNotify )
	unsigned long                                      bForceKeyframe : 1;                               		// 0x00DC (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bLoadedNetPackages : 1;                           		// 0x00DC (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDebug : 1;                                       		// 0x00DC (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	TArray< unsigned char >                            Data;                                             		// 0x00E0 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FReplayKeyframe >                   KeyFrames;                                        		// 0x00EC (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      ReplayState;                                      		// 0x00F8 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentFrame;                                     		// 0x00FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NextKeyframe;                                     		// 0x0100 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              CurrentTime;                                      		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FReplayActorChannel >               Channels;                                         		// 0x0108 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 ChannelsMap;                                      		// 0x0114 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPackageMap*                                 PackageMap;                                       		// 0x0150 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FName >                             Levels;                                           		// 0x0154 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      FreeChannels;                                     		// 0x0160 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              AccumulatedDeltaTime;                             		// 0x016C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeToSkipTo;                                     		// 0x0170 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                FrameToSkipTo;                                    		// 0x0174 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                PlayersOnlyTicks;                                 		// 0x0178 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    WriterAr;                                         		// 0x017C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ReaderAr;                                         		// 0x0180 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FReplayLogItem >                    Logs;                                             		// 0x0184 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FTimelineKeyframe >                 TimelineKeyframes;                                		// 0x0190 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FScriptDelegate                             __EventPlaybackStopped__Delegate;                 		// 0x019C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSpawned__Delegate;                         		// 0x01AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x01B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreTimeSkip__Delegate;                     		// 0x01BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x01C0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPostTimeSkip__Delegate;                    		// 0x01CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x01D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayedFrame__Delegate;                     		// 0x01DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x01E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3904 ];

		return pClassPointer;
	};

	bool IsFromBeforeGameVersion ( unsigned char BeforeGameVersion );
	bool IsFromBeforeReplayVersion ( unsigned char BeforeReplayVersion );
	struct FName GetMapToLoad ( );
	void SetReplayName ( struct FString NewName );
	void RemoveTimelineKeyframe ( int KeyframeIndex );
	void AddTimelineKeyframe ( struct FName Type, int frame );
	void ReplayLog ( class UObject* Context, struct FString Text );
	void eventTrimData ( int FirstKeyframe, int FirstFrame );
	class UReplay_TA* CreateCopy ( float StartTime );
	void ImportReplay ( struct FString Path );
	void ExportReplay ( struct FString Path );
	void SkipToFrame ( int frame, unsigned long bFlush );
	void SkipToTime ( float Time, unsigned long bFlush );
	class AActor* GetPlaybackActor ( struct FName RecordedActorName );
	float GetReplayTimeSeconds ( );
	void StopPlayback ( );
	void StartPlaybackAtFrame ( int StartFrame );
	void StartPlaybackAtTimeSeconds ( float StartTime );
	void StopRecord ( );
	void StartRecord ( );
	void Tick ( float DeltaTime );
	void AllReplayActors ( class UClass* BaseClass, class AActor** Actor );
	void eventPreExport ( );
	void EventPlayedFrame ( class UReplay_TA* Replay );
	void EventPostTimeSkip ( class UReplay_TA* Replay );
	void EventPreTimeSkip ( class UReplay_TA* Replay );
	void EventSpawned ( class UReplay_TA* Replay, class AActor* A );
	void EventPlaybackStopped ( class UReplay_TA* Replay );
};

UClass* UReplay_TA::pClassPointer = NULL;

// Class TAGame.ReplayComponent_TA
// 0x0007 (0x006C - 0x0065)
class UReplayComponent_TA : public UActorComponent
{
public:
	unsigned long                                      bRecording : 1;                                   		// 0x0068 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPlaying : 1;                                     		// 0x0068 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3906 ];

		return pClassPointer;
	};

};

UClass* UReplayComponent_TA::pClassPointer = NULL;

// Class TAGame.ReplayManager_TA
// 0x008C (0x00C8 - 0x003C)
class UReplayManager_TA : public UObject
{
public:
	struct FString                                     ReplaysPath;                                      		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UTickComponent_X*                            TickComponent;                                    		// 0x0048 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FPointer >                          ExportTasks;                                      		// 0x004C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ClassTasks;                                       		// 0x0058 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ImportTasks;                                      		// 0x0064 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    HeadersCountTask;                                 		// 0x0070 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          HeaderLoadTasks;                                  		// 0x0074 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FReplayExportCallbackData >         ExportCallbacks;                                  		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FReplayImportCallbackData >         ImportCallbacks;                                  		// 0x008C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventExportFinished__Delegate;                  		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x009C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventImportFinished__Delegate;                  		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHeadersLoaded__Delegate;                   		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3908 ];

		return pClassPointer;
	};

	void eventSetTick ( unsigned long bTick );
	void Tick ( float DeltaTime );
	void DeleteReplay ( struct FString Filename );
	void ExportReplay ( class UReplay_TA* Replay, struct FScriptDelegate Callback );
	void ImportReplay ( struct FString Filename, struct FScriptDelegate Callback, unsigned long bSyncronous );
	void LoadHeader ( struct FString Filename, struct FScriptDelegate Callback );
	void LoadHeaders ( struct FScriptDelegate Callback );
	struct FString GetReplayFolder ( );
	void Init ( );
	class UReplayManager_TA* GetInstance ( );
	bool IsExporting ( );
	void EventHeadersLoaded ( class UReplayManager_TA* Manager, TArray< struct FReplayHeaderLoadResult > Headers );
	void EventImportFinished ( class UReplayManager_TA* Manager, class UReplay_TA* Replay, class UError* Error );
	void EventExportFinished ( class UReplayManager_TA* Manager, struct FString Id, class UError* Error );
};

UClass* UReplayManager_TA::pClassPointer = NULL;

// Class TAGame.RPC_AddBuild_TA
// 0x0054 (0x00F0 - 0x009C)
class URPC_AddBuild_TA : public URPC_X
{
public:
	int                                                Id;                                               		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                CL;                                               		// 0x00A0 (0x0004) [0x0000000000000000]              
	struct FString                                     Branch;                                           		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BuildVersion;                                     		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Label;                                            		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FeaturesFilter;                                   		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GameVersion;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FString                                     Configuration;                                    		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Environment;                                      		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3910 ];

		return pClassPointer;
	};

	void Init ( );
};

UClass* URPC_AddBuild_TA::pClassPointer = NULL;

// Class TAGame.SaveGameManager_TA
// 0x0054 (0x00AC - 0x0058)
class USaveGameManager_TA : public UTickableStateObject_X
{
public:
	class USaveObjectManager_TA*                       SaveObjectManager;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FString                                     SaveDataID;                                       		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ULocalPlayer_TA*                             Player;                                           		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USaveData_TA*                                SaveData;                                         		// 0x006C (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UObjectProvider*                             SaveObjectProvider;                               		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HardVersion;                                      		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinTimeBetweenSaves;                              		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastSaveTime;                                     		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UError*                                      DataLoadError;                                    		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UError*                                      DataSaveError;                                    		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDataLoaded : 1;                                  		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUserIgnoredLoadFailure : 1;                      		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableSaving : 1;                                		// 0x0088 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDisableSaveOSS : 1;                              		// 0x0088 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FScriptDelegate                             __EventDataLoaded__Delegate;                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0090 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDataSaved__Delegate;                       		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3912 ];

		return pClassPointer;
	};

	bool DeleteMount ( );
	void HandleNoSpaceSystemDialogComplete ( unsigned long bContinueWithouSaving );
	void Save_Internal ( );
	void ClearSaveTimer ( );
	void SetSaveTimer ( float Delay );
	void HandleDataSaved ( struct FSaveObjectResult Result );
	void Save ( unsigned long ForceSave );
	void UserIgnoredLoadFailure ( unsigned long bValue );
	void HandleProceedWithDefaultSaveData ( struct FLoadObjectResult* StructInitializer_EAE0DDBA462BAE7B825116A3A0C225B0 );
	void DisableSaving ( );
	void EnableSaving ( );
	void HandleDataLoaded ( struct FLoadObjectResult Result );
	void Load ( );
	void NotifyWhenLoaded ( struct FScriptDelegate Callback );
	void HandlePlayerLoginStatusChange ( class UOnlinePlayer_X* OnlinePlayer );
	void Init ( class ULocalPlayer_TA* InPlayer );
	struct FString GetSaveFilename ( );
	void ValidateSaveObjects ( TArray< class USaveObject_TA* >* OutSaveObjects );
	void EventDataSaved ( class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error );
	void EventDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error );
};

UClass* USaveGameManager_TA::pClassPointer = NULL;

// Class TAGame.SaveObjectManager_TA
// 0x008C (0x00C8 - 0x003C)
class USaveObjectManager_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPointer >                          ImportTasks;                                      		// 0x0040 (0x000C) [0x0000000000103000]              ( CPF_Native | CPF_Transient )
	TArray< struct FScriptDelegate >                   ImportCallbacks;                                  		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          ExportTasks;                                      		// 0x0058 (0x000C) [0x0000000000103000]              ( CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ListFilesTasks;                                   		// 0x0064 (0x000C) [0x0000000000103000]              ( CPF_Native | CPF_Transient )
	TArray< struct FScriptDelegate >                   ListFilesCallbacks;                               		// 0x0070 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                KeepNewestSaveFileCount;                          		// 0x007C (0x0004) [0x0000000000000000]              
	class UObject*                                     SaveData;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     SavePath;                                         		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ControllerId;                                     		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSaving : 1;                                      		// 0x0094 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlayerSaveData : 1;                              		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FScriptDelegate                             __EventDataLoaded__Delegate;                      		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x009C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDataSaved__Delegate;                       		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnFilesListed__Delegate;                        		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3914 ];

		return pClassPointer;
	};

	void CancelGetHeaders ( struct FScriptDelegate Callback );
	void GetHeaders ( int InControllerID, struct FString InPath, struct FString InPattern, struct FScriptDelegate Callback );
	void SetNewFileSaveCount ( int Count );
	void eventHandleSaveResult ( unsigned char Result, struct FSaveObjectResult* StructInitializer_450520674EECCB130929DBA14B74A1B6 );
	class UError* GetSaveError ( unsigned char Result );
	class UError* GetLoadError ( unsigned char InResult );
	void LoadAsync ( int ControllerIndex, class UObject* RootObj, struct FString PathName, int Version, unsigned long bExactFileMatch, struct FScriptDelegate Callback );
	struct FLoadObjectResult Load ( int InControllerID, class UObject* RootObj, struct FString PathName, int Version, unsigned long bExactFileMatch );
	void SaveAsync ( int InControllerID, class UObject* RootObj, struct FString PathName, int Version, unsigned long bExactFileMatch );
	struct FSaveObjectResult Save ( int InControllerID, class UObject* RootObj, struct FString PathName, int Version, unsigned long bExactFileMatch );
	void DecrementSaveManagerCounter ( );
	void IncrementSaveManagerCounter ( );
	int GetSaveDataSpace ( int ControllerIndex );
	struct FString GetPlatformSavePath ( struct FString DefaultPath, struct FUniqueNetId PlayerID );
	bool DeleteMount ( int ControllerIndex, struct FString PathName );
	bool DeleteFiles ( int ControllerIndex, struct FString PathName, int KeepNewestFileCount );
	bool IsReadingSaveData ( );
	void LoadGameDataAsync ( int ControllerIndex, class UObject* RootObj, int Version, struct FString PathName, unsigned long bExactFileMatch, struct FScriptDelegate Callback );
	unsigned char LoadGameData ( int ControllerIndex, class UObject* RootObj, int Version, struct FString PathName, unsigned long bExactFileMatch );
	bool IsDoneSaving ( );
	bool IsSaving ( );
	unsigned char UpdateSaveResult ( int ControllerIndex );
	unsigned char SaveGameDataAsync ( int ControllerIndex, class UObject* RootObj, int Version, struct FString PathName, unsigned long bExactFileMatch );
	unsigned char SaveGameData ( int ControllerIndex, class UObject* RootObj, int Version, struct FString PathName, unsigned long bExactFileMatch );
	void OnFilesListed ( TArray< struct FString > Files, unsigned char Result );
	void EventDataSaved ( struct FSaveObjectResult Result );
	void EventDataLoaded ( struct FLoadObjectResult Result );
};

UClass* USaveObjectManager_TA::pClassPointer = NULL;

// Class TAGame.SaveObjectSerializer_TA
// 0x0005 (0x0041 - 0x003C)
class USaveObjectSerializer_TA : public USerializer_X
{
public:
	int                                                Version;                                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Result;                                           		// 0x0040 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3916 ];

		return pClassPointer;
	};

	class USaveObjectSerializer_TA* SetVersion ( int InVersion );
	void DeserializeObject ( class UObject* Target, TArray< unsigned char >* InData );
	void SerializeObject ( class UObject* Target, TArray< unsigned char >* OutData );
	class USaveObjectSerializer_TA* CreateNew ( int InVersion );
};

UClass* USaveObjectSerializer_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_DumpMovie_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_DumpMovie_TA : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3918 ];

		return pClassPointer;
	};

};

UClass* USeqAct_DumpMovie_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetLoadout_TA
// 0x003C (0x0138 - 0x00FC)
class USeqAct_SetLoadout_TA : public USequenceAction
{
public:
	TArray< class UProductAsset_TA* >                  Products;                                         		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                       		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_PaintFinish_TA*                AccentFinish;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TeamColor;                                        		// 0x0110 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AccentColor;                                      		// 0x0120 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                TeamColorID;                                      		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverwriteCurrent : 1;                            		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3920 ];

		return pClassPointer;
	};

	void HandleOverrideLoadout ( class ACar_TA* Car );
	void HandleFirstLoadout ( class ACar_TA* Car );
	void CopyPropertiesFromCar ( class ACar_TA* Car );
	void eventActivated ( );
};

UClass* USeqAct_SetLoadout_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_UIStateChange_TA
// 0x0001 (0x0115 - 0x0114)
class USeqEvent_UIStateChange_TA : public USequenceEvent
{
public:
	unsigned char                                      UIState;                                          		// 0x0114 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3922 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_UIStateChange_TA::pClassPointer = NULL;

// Class TAGame.SimpleSpringComponent_TA
// 0x0078 (0x00C0 - 0x0048)
class USimpleSpringComponent_TA : public UComponent
{
public:
	struct FSimpleSpringSettings                       Spring;                                           		// 0x0048 (0x0050) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x0098 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FVector                                     Displacement;                                     		// 0x009C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MassLocation;                                     		// 0x00A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MassVelocity;                                     		// 0x00B4 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3924 ];

		return pClassPointer;
	};

	void eventDrawDebug ( struct FRotator BaseRotation );
	struct FVector GetNormalizedDisplacement ( );
	void AddForce ( struct FVector Force );
	void UpdateSpring ( float DeltaTime, struct FVector* BaseLocation, struct FRotator* BaseRotation );
	void UpdatePrimitive ( float DeltaTime, class UPrimitiveComponent* BaseComponent );
};

UClass* USimpleSpringComponent_TA::pClassPointer = NULL;

// Class TAGame.AntennaComponent_TA
// 0x0050 (0x0110 - 0x00C0)
class UAntennaComponent_TA : public USimpleSpringComponent_TA
{
public:
	struct FName                                       TopperSocket;                                     		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               AntennaMesh;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AntennaSegmentExtension;                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          AntennaMaterial;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             BendyBoneControllers;                             		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BendScale;                                        		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              PitchScale;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollScale;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchZScale;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollZScale;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   TopperMaterial;                                   		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTopperWindSpeedParamValue;                    		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent_TA*                   AntennaSK;                                        		// 0x0100 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class USkelControlSingleBone* >            BendyControls;                                    		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3926 ];

		return pClassPointer;
	};

	void UpdateSpring ( float DeltaTime, struct FVector* BaseLocation, struct FRotator* BaseRotation );
	void UpdatePrimitive ( float DeltaTime, class UPrimitiveComponent* BaseComponent );
	void SetTopperMaterial ( class UMaterialInstanceConstant* InTopperMaterial );
	void InitAntenna ( class USkeletalMeshComponent_TA* AttachToMesh );
};

UClass* UAntennaComponent_TA::pClassPointer = NULL;

// Class TAGame.SkelControlRotationSpring_TA
// 0x0054 (0x0140 - 0x00EC)
class USkelControlRotationSpring_TA : public USkelControlSingleBone
{
public:
	struct FRotator                                    RotationMin;                                      		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationMax;                                      		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpringToPitch;                                    		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpringToYaw;                                      		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpringToRoll;                                     		// 0x011C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USimpleSpringComponent_TA*                   SpringComponent;                                  		// 0x0128 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     TestSpringForce;                                  		// 0x012C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestSpringDelay;                                  		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastTestSpringTime;                               		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3928 ];

		return pClassPointer;
	};

};

UClass* USkelControlRotationSpring_TA::pClassPointer = NULL;

// Class TAGame.SkelControlSingleBoneCopy_TA
// 0x0070 (0x015C - 0x00EC)
class USkelControlSingleBoneCopy_TA : public USkelControlSingleBone
{
public:
	struct FName                                       ControlToCopyName;                                		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FAxisConversion                             TranslationX;                                     		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FAxisConversion                             TranslationY;                                     		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FAxisConversion                             TranslationZ;                                     		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FAxisConversion                             RotationPitch;                                    		// 0x0118 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FAxisConversion                             RotationYaw;                                      		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FAxisConversion                             RotationRoll;                                     		// 0x0130 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TranslationScale;                                 		// 0x013C (0x000C) [0x0000000000000000]              
	struct FVector                                     RotationScale;                                    		// 0x0148 (0x000C) [0x0000000000000000]              
	unsigned long                                      bConvertedScales : 1;                             		// 0x0154 (0x0004) [0x0000000000000000] [0x00000001] 
	class USkelControlSingleBone*                      ControlToCopy;                                    		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3930 ];

		return pClassPointer;
	};

};

UClass* USkelControlSingleBoneCopy_TA::pClassPointer = NULL;

// Class TAGame.SkelControlSingleBoneParameterized_TA
// 0x00A8 (0x0194 - 0x00EC)
class USkelControlSingleBoneParameterized_TA : public USkelControlSingleBone
{
public:
	struct FRawDistributionFloat                       Pitch;                                            		// 0x00EC (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Yaw;                                              		// 0x0108 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Roll;                                             		// 0x0124 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PitchSpeed;                                       		// 0x0140 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       YawSpeed;                                         		// 0x015C (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       RollSpeed;                                        		// 0x0178 (0x001C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3932 ];

		return pClassPointer;
	};

};

UClass* USkelControlSingleBoneParameterized_TA::pClassPointer = NULL;

// Class TAGame.SkelControlTether_TA
// 0x0010 (0x00CC - 0x00BC)
class USkelControlTether_TA : public USkelControlBase
{
public:
	struct FName                                       AnchorBoneName;                                   		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceMin;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceMax;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3934 ];

		return pClassPointer;
	};

};

UClass* USkelControlTether_TA::pClassPointer = NULL;

// Class TAGame.SkeletalMeshActor_NoSlomo_TA
// 0x0000 (0x023C - 0x023C)
class ASkeletalMeshActor_NoSlomo_TA : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3936 ];

		return pClassPointer;
	};

};

UClass* ASkeletalMeshActor_NoSlomo_TA::pClassPointer = NULL;

// Class TAGame.SkeletalMeshActorMAT_Products_TA
// 0x007C (0x02C4 - 0x0248)
class ASkeletalMeshActorMAT_Products_TA : public ASkeletalMeshActorMAT
{
public:
	class UProductAsset_Body_TA*                       BodyAsset;                                        		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Skin_TA*                       SkinAsset;                                        		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_PaintFinish_TA*                TeamFinishAsset;                                  		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_PaintFinish_TA*                CustomFinishAsset;                                		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Wheel_TA*                      WheelAsset;                                       		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Boost_TA*                      BoostAsset;                                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Attachment_TA*                 AntennaAsset;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Attachment_TA*                 HatAsset;                                         		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrontWheelScale;                                  		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackWheelScale;                                   		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TeamColor;                                        		// 0x0270 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomColor;                                      		// 0x0280 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              FakeBoostVelocity;                                		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivateBoostVelocity;                          		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCarPreviewMeshComponent_TA*                 CarMeshComp;                                      		// 0x0298 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      FLWheelSKComponent;                               		// 0x029C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      FRWheelSKComponent;                               		// 0x02A0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      BLWheelSKComponent;                               		// 0x02A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      BRWheelSKComponent;                               		// 0x02A8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        FLWheelSMComponent;                               		// 0x02AC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        FRWheelSMComponent;                               		// 0x02B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        BLWheelSMComponent;                               		// 0x02B4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        BRWheelSMComponent;                               		// 0x02B8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UNameplateComponent_TA*                      NameplateComponent;                               		// 0x02BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UProductLoader_TA*                           ProductLoader;                                    		// 0x02C0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3938 ];

		return pClassPointer;
	};

	void HandleAllProductsLoaded ( class UProductLoader_TA* InProductLoader );
	void UpdateWithLoadout ( struct FLoadoutData Loadout );
	bool AddUnique_AssetID ( class UProductAsset_TA* Asset, TArray< int >* Out_IntList );
	TArray< int > GetAttachedProductIDs ( );
	void eventCreateAttachments ( );
	void UpdateBoost ( );
	void eventCreateBoostActor ( );
	void UpdateAllComponents ( );
	void eventTick ( float DeltaTime );
	void eventPostBeginPlay ( );
};

UClass* ASkeletalMeshActorMAT_Products_TA::pClassPointer = NULL;

// Class TAGame.SkeletalMeshComponent_NoSlomo_TA
// 0x0000 (0x064C - 0x064C)
class USkeletalMeshComponent_NoSlomo_TA : public USkeletalMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3940 ];

		return pClassPointer;
	};

};

UClass* USkeletalMeshComponent_NoSlomo_TA::pClassPointer = NULL;

// Class TAGame.SkeletalMeshComponent_TA
// 0x0008 (0x0654 - 0x064C)
class USkeletalMeshComponent_TA : public USkeletalMeshComponent
{
public:
	float                                              FOVOverride;                                      		// 0x064C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreScriptAttach : 1;                          		// 0x0650 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3942 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	class UParticleSystemComponent* CreateAttachmentPSC ( class UParticleSystem* PS );
	class USkeletalMeshComponent_TA* CreateAttachmentSK ( class USkeletalMesh* Mesh, class UMaterialInterface* MaterialOverride );
	class UStaticMeshComponent_TA* CreateAttachmentSMC ( class UStaticMesh* Mesh, class UMaterialInterface* MaterialOverride, unsigned long bCreateNewMIC );
	void ModifyAttachmentPrimitive ( class UPrimitiveComponent* PrimComp );
	void eventTick ( float DeltaTime );
	void eventOnDetached ( );
	void eventOnAttached ( );
};

UClass* USkeletalMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.CarMeshComponentBase_TA
// 0x009C (0x06F0 - 0x0654)
class UCarMeshComponentBase_TA : public USkeletalMeshComponent_TA
{
public:
	class UProductAsset_Body_TA*                       BodyAsset;                                        		// 0x0654 (0x0004) [0x0000000000000000]              
	class UProductAsset_Skin_TA*                       SkinAsset;                                        		// 0x0658 (0x0004) [0x0000000000000000]              
	class UProductAsset_Wheel_TA*                      WheelAsset;                                       		// 0x065C (0x0004) [0x0000000000000000]              
	struct FLinearColor                                TeamColorOverride;                                		// 0x0660 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                CustomColorOverride;                              		// 0x0670 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team;                                             		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TeamColorID;                                      		// 0x0684 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CustomColorID;                                    		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_Logo_TA*                       Logo;                                             		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSwapLogoColors : 1;                              		// 0x0690 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bBoosting : 1;                                    		// 0x0690 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x0690 (0x0004) [0x0000000000000000] [0x00000004] 
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                       		// 0x0694 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_PaintFinish_TA*                CustomFinish;                                     		// 0x0698 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FClubColorSet                               ClubColors;                                       		// 0x069C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAntennaComponent_TA* >              Antennas;                                         		// 0x06A4 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMeshComponent* >                    WheelMeshes;                                      		// 0x06B0 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class AFXActor_X*                                  BodyFX;                                           		// 0x06BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AFXActor_X* >                        FXActors;                                         		// 0x06C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AFXActor_X*                                  BodyFXActor;                                      		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FClientLoadoutOnlineData                    ProductAttributes;                                		// 0x06D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             ProductAttachmentSockets;                         		// 0x06DC (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                QueuedTeamFinishID;                               		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueuedCustomFinishID;                             		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3944 ];

		return pClassPointer;
	};

	void __CarMeshComponentBase_TA__OnPaintChanged ( class UMeshComponent* W );
	struct FVector CalculatePresetSuspensionOffset ( );
	void AttachFXActor ( class AFXActor_X* FXActorTemplate );
	void AttachOrnament ( class UProductAsset_TA* Asset, struct FProductAttachment* AttachStruct );
	void SetMaterialColorParams ( class UMaterialInstanceConstant* MatInst, struct FLinearColor PaintColor, struct FName ColorParam, struct FName FullColorParam );
	void SetMaterialColors ( class UMaterialInstanceConstant* MatInst );
	struct FLinearColor GetCorrectedPaintColor ( struct FLinearColor InColor );
	void SetMeshMaterialColors ( class UMeshComponent* Mesh );
	void CreateWheelMICs ( );
	void SetPaintFinishParameters ( class UMeshComponent* Mesh );
	void OnPaintChanged ( );
	void ResetMaterials ( class UMeshComponent* Mesh );
	void InitMaterials ( );
	bool FilterTeamAttributes ( class UProductAttribute_TA* Attribute );
	void ApplyAttributes ( class UProductAsset_TA* Asset, class UObject* Target, TArray< class UProductAttribute_TA* >* ConcatLocal_116FC9CC43D8CE3DA086FE8D4B276B43, TArray< class UProductAttribute_TA* >* FilterLocal_ADEE5EFE4F558D58852CA088C41CCB41 );
	void SetIsLocalPlayer ( unsigned long bIsLocal );
	bool IsColorBlind ( );
	struct FLinearColor GetCustomColor ( );
	struct FLinearColor GetTeamColor ( );
	void SetLogo ( class UProductAsset_Logo_TA* InLogo, unsigned long bSwapColors );
	void SetCustomFinish ( class UProductAsset_PaintFinish_TA* Finish );
	void HandleCustomFinishLoaded ( struct FAssetLoadResult Result );
	void SetCustomFinishID ( int ProductID );
	void SetCustomColorOverride ( struct FLinearColor NewColor );
	void SetCustomColorID ( int ColorID );
	void SetTeamFinish ( class UProductAsset_PaintFinish_TA* Finish );
	void HandleTeamFinishLoaded ( struct FAssetLoadResult Result );
	void SetTeamFinishID ( int ProductID );
	void SetClubColors ( struct FClubColorSet Colors );
	void SetTeamColorOverride ( struct FLinearColor NewColor );
	void SetTeamColorID ( int InTeam, int InColorID );
	void ClearColorOverrides ( );
	void SetTeamPaint ( struct FLoadoutTeamPaint Paint );
	void CreateWheelMesh ( unsigned char WheelPos, float WheelRadius, float WheelWidth, float WheelOffset, struct FName BoneName );
	void AddBehaviors ( class UProductAsset_TA* Asset, class UActorComponent* Component, TArray< class UAttachmentBehavior_TA* >* BehaviorArchetypes );
	void CreateWheelMeshes ( );
	void SetMaterialParameters ( int ElementIdx, struct FMaterialParams* Params );
	void eventOnDetached ( );
	void InitVisuals ( );
	void eventInitAssets ( );
};

UClass* UCarMeshComponentBase_TA::pClassPointer = NULL;

// Class TAGame.CarMeshComponent_TA
// 0x0068 (0x0758 - 0x06F0)
class UCarMeshComponent_TA : public UCarMeshComponentBase_TA
{
public:
	float                                              BoostBlendInTime;                                 		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostBlendOutTime;                                		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostDriveFlapScale;                              		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBlendRate;                         		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSteerBlendRate;                              		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FWheelSkelControlSet >              WheelControls;                                    		// 0x0704 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              BoostFlyHeight;                                   		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USkelControlBase* >                  BoostFlyControls;                                 		// 0x0714 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USimpleSpringComponent_TA*                   ChassisSpringComponent;                           		// 0x0720 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USkelControlSingleBone*                      ChassisSpringControl;                             		// 0x0724 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USkelControlBase* >                  BoostControls;                                    		// 0x0728 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bInAir : 1;                                       		// 0x0734 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bBoostFlying : 1;                                 		// 0x0734 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPreviewSupersonic : 1;                           		// 0x0734 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWantsBoostCameraAdjustment : 1;                  		// 0x0734 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              Throttle;                                         		// 0x0738 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAttachmentBehavior_TA* >            Behaviors;                                        		// 0x073C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventAttached__Delegate;                        		// 0x0748 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x074C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3946 ];

		return pClassPointer;
	};

	bool WantsBoostCameraAdjustment ( );
	class UAttachmentBehavior_TA* AddBehavior ( class UProductAsset_TA* Asset, class UActorComponent* Component, class UAttachmentBehavior_TA* BehaviorArchetype );
	void AddBehaviors ( class UProductAsset_TA* Asset, class UActorComponent* Component, TArray< class UAttachmentBehavior_TA* >* BehaviorArchetypes );
	void SetBodyFXActor ( class AFXActor_X* InBodyFX );
	void OnPaintChanged ( );
	void InitVisuals ( );
	void InitAttachments ( class UProductLoader_TA* InLoadout );
	void SetLoadout ( class UProductLoader_TA* InLoadout );
	void SetProductAttributes ( struct FClientLoadoutOnlineData* OnlineLoadout );
	void InitWheelControl ( int Idx, struct FString Prefix );
	void InitWheelControls ( );
	void InitBoostControls ( );
	void ClearAttachments ( );
	void NotifyWhenAttached ( struct FScriptDelegate Callback );
	void eventOnDetached ( );
	void eventOnAttached ( );
	void EventAttached ( class UCarMeshComponent_TA* Mesh );
};

UClass* UCarMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.CarPreviewMeshComponent_TA
// 0x0010 (0x0700 - 0x06F0)
class UCarPreviewMeshComponent_TA : public UCarMeshComponentBase_TA
{
public:
	class UProductAsset_Boost_TA*                      BoostAsset;                                       		// 0x06F0 (0x0004) [0x0000000000000000]              
	class AFXActor_Boost_TA*                           BoostFX;                                          		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_Attachment_TA*                 AntennaAsset;                                     		// 0x06F8 (0x0004) [0x0000000000000000]              
	class UProductAsset_Attachment_TA*                 HatAsset;                                         		// 0x06FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3948 ];

		return pClassPointer;
	};

	void InitAttachments ( );
	void InitFXStatesForActor ( class AFXActor_X* FXActor );
	void InitFXStates ( );
	void InitBoostFX ( );
	void InitBodyFX ( );
	void InitFXVisuals ( );
};

UClass* UCarPreviewMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.SkyLightVolumeComponent_TA
// 0x0050 (0x01D0 - 0x0180)
class USkyLightVolumeComponent_TA : public USkyLightComponent
{
public:
	float                                              BlendDistance;                                    		// 0x0180 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ASkyLight*                                   LightToOverride;                                  		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBrushComponent*                             BrushComponent;                                   		// 0x0188 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x018C (0x0004) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x0190 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3950 ];

		return pClassPointer;
	};

	void SetLowerLightProperties ( float NewBrightness, struct FColor NewLightColor );
};

UClass* USkyLightVolumeComponent_TA::pClassPointer = NULL;

// Class TAGame.StatEvent_TA
// 0x004C (0x0088 - 0x003C)
class UStatEvent_TA : public UObject
{
public:
	int                                                Points;                                           		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAddToScore : 1;                                  		// 0x0040 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsLeaderboardStat : 1;                           		// 0x0040 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotifyTicker : 1;                                		// 0x0040 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanMute : 1;                                     		// 0x0040 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCountMultiplied : 1;                             		// 0x0040 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	int                                                MedalThreshold;                                   		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TrophyThreshold;                                  		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UStatGroup_TA*                               Group;                                            		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture*                                    Texture;                                          		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       UISound;                                          		// 0x0054 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      DisplayProductStatClass;                          		// 0x005C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                OnlineMultiplier;                                 		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FString                                     Label;                                            		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PluralLabel;                                      		// 0x0070 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3952 ];

		return pClassPointer;
	};

	int GetPoints ( class AGameEvent_TA* GameEvent, int Count );
	struct FName GetGroupName ( );
};

UClass* UStatEvent_TA::pClassPointer = NULL;

// Class TAGame.StatFactoryBase_TA
// 0x000C (0x0208 - 0x01FC)
class AStatFactoryBase_TA : public AActor
{
public:
	TArray< class UStatEvent_TA* >                     AllStatEvents;                                    		// 0x01FC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3954 ];

		return pClassPointer;
	};

};

UClass* AStatFactoryBase_TA::pClassPointer = NULL;

// Class TAGame.StatGroup_TA
// 0x0000 (0x003C - 0x003C)
class UStatGroup_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3956 ];

		return pClassPointer;
	};

};

UClass* UStatGroup_TA::pClassPointer = NULL;

// Class TAGame.StaticMeshComponent_TA
// 0x0004 (0x027C - 0x0278)
class UStaticMeshComponent_TA : public UStaticMeshComponent
{
public:
	unsigned long                                      bIgnoreScriptAttach : 1;                          		// 0x0278 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3958 ];

		return pClassPointer;
	};

	void SetBoundsScale ( float Value );
	void eventOnDetached ( );
	void eventOnAttached ( );
};

UClass* UStaticMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.BallIndicator_TA
// 0x0018 (0x0294 - 0x027C)
class UBallIndicator_TA : public UStaticMeshComponent_TA
{
public:
	float                                              MinTranslationX;                                  		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTranslationX;                                  		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZTranslationOffset;                               		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Ball;                                             		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3960 ];

		return pClassPointer;
	};

	void HandleBallRemoved ( class UObject* BallObject );
	void HandleBallAdded ( class UObject* BallObject );
	void eventOnDetached ( );
	void eventOnAttached ( );
};

UClass* UBallIndicator_TA::pClassPointer = NULL;

// Class TAGame.NameplateMeshComponent_TA
// 0x0020 (0x029C - 0x027C)
class UNameplateMeshComponent_TA : public UStaticMeshComponent_TA
{
public:
	struct FInterpCurveFloat                           DistanceScaleCurve;                               		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           FOVScaleCurve;                                    		// 0x028C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3962 ];

		return pClassPointer;
	};

	void TickNameplate ( );
	void SetPlayerIndex ( int Index );
	void SetRenderTexture ( class UTextureRenderTarget2D* InTex );
};

UClass* UNameplateMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.Team_TA
// 0x011C (0x0334 - 0x0218)
class ATeam_TA : public ATeamInfo
{
public:
	class UCarColorSet_TA*                             CarColorSet;                                      		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCarColorSet_TA*                             CarColorSet_v0;                                   		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FontColor;                                        		// 0x0220 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ColorBlindFontColor;                              		// 0x0230 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      TeamControllerColor;                              		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      TeamScoreStrobeColor;                             		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTeamColorScriptedTexture_TA*                TeamScriptedTexture;                              		// 0x0248 (0x0004) [0x0000000000000000]              
	TArray< struct FLinearColor >                      DefaultColorList;                                 		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      ColorBlindColorList;                              		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      CurrentColorList;                                 		// 0x0264 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AGameEvent_Team_TA*                          GameEvent;                                        		// 0x0270 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class APRI_TA* >                           Members;                                          		// 0x0274 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CustomTeamName;                                   		// 0x0280 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     SanitizedTeamName;                                		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UProductAsset_Logo_TA*                       Logo;                                             		// 0x0298 (0x0004) [0x0000000000000000]              
	struct FReplicatedLogoData                         LogoData;                                         		// 0x029C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FClubColorSet                               ClubColors;                                       		// 0x02A4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AVoteActor_TA*                               ForfeitVoteArchetype;                             		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVoteActor_TA*                               ForfeitVote;                                      		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bForfeit : 1;                                     		// 0x02B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FTemporarySpawnSpot >               TemporarySpawnSpots;                              		// 0x02B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventMemberAdded__Delegate;                     		// 0x02C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMemberRemoved__Delegate;                   		// 0x02D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x02D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventColorsChanged__Delegate;                   		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x02E8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoreUpdated__Delegate;                    		// 0x02F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x02F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventNameChanged__Delegate;                     		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0308 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLogoChanged__Delegate;                     		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0318 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventForfeit__Delegate;                         		// 0x0324 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0328 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3964 ];

		return pClassPointer;
	};

	void UpdateGameShaderParamColors ( int TeamIdx, TArray< struct FLinearColor > NewColors );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void OnClubColorsChanged ( );
	void SetClubColors ( struct FClubColorSet Colors );
	void Forfeit ( );
	void HandleForfeitVoteDestroyed ( class AVoteActor_TA* VoteActor );
	void HandleForfeitVoteFinished ( class AVoteActor_TA* VoteActor );
	void VoteToForfeit ( class APRI_TA* PRI );
	bool IsColorBlind ( );
	void GetColors ( struct FLinearColor* OutFontColor, TArray< struct FLinearColor >* OutColors );
	void NotifyKismetTeamColorChanged ( );
	void UpdateColors ( );
	void SetLogo ( int LogoID, unsigned long bSwapColors );
	struct FString GetTeamName ( );
	void HandleTeamNameSanitized ( struct FString Original, struct FString Sanitized );
	void SetCustomTeamName ( struct FString NewName );
	void SetDefaultColors ( );
	void SetColorList ( TArray< struct FLinearColor > ColorList, unsigned long bAllowMaxBrightness );
	class APRI_TA* GetTeamMemberNamed ( struct FString PlayerName );
	int GetNumBots ( );
	int GetNumHumans ( );
	void OnScoreUpdated ( );
	void ResetScore ( );
	void RemovePoints ( int Points );
	void SetScore ( int Points );
	void ScorePoint ( int AdditionalScore );
	void eventDestroyed ( );
	void MuteOtherTeam ( class ATeam_TA* OtherTeam, unsigned long bMute );
	void MutePlayer ( class AController* Other );
	bool GetPlayerReplacementSpot ( struct FVector* OutLoc, struct FRotator* OutRot, struct FVector* OutVel );
	void ClearTemporarySpawnSpots ( );
	void ExpireTemporarySpawnSpots ( );
	void AddTemporarySpawnSpot ( class AActor* AtActor );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void OnGameEventSet ( );
	void SetGameEvent ( class AGameEvent_Team_TA* InGameEvent );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventForfeit ( class ATeam_TA* Team );
	void EventLogoChanged ( class ATeam_TA* Team );
	void EventNameChanged ( class ATeam_TA* Team );
	void EventScoreUpdated ( class ATeam_TA* Team );
	void EventColorsChanged ( class ATeam_TA* Team );
	void EventMemberRemoved ( class ATeam_TA* Team, class APRI_TA* Member );
	void EventMemberAdded ( class ATeam_TA* Team, class APRI_TA* Member );
};

UClass* ATeam_TA::pClassPointer = NULL;

// Class TAGame.TeamColorScriptedTexture_TA
// 0x0010 (0x0150 - 0x0140)
class UTeamColorScriptedTexture_TA : public UScriptedTexture
{
public:
	TArray< struct FLinearColor >                      PixelColorList;                                   		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bMaxBrightness : 1;                               		// 0x014C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3966 ];

		return pClassPointer;
	};

	void RenderColorArray ( TArray< struct FLinearColor > ColorArray );
	void OnRender ( class UCanvas* Canvas );
	struct FLinearColor GetFullBrightColor ( struct FLinearColor C, float ValueScale );
	void SetColorsArray ( TArray< struct FLinearColor > ColorList, unsigned long bAllowMaxBrightness );
};

UClass* UTeamColorScriptedTexture_TA::pClassPointer = NULL;

// Class TAGame.ThrottleShakeComponent_TA
// 0x000C (0x0150 - 0x0144)
class UThrottleShakeComponent_TA : public UShakeComponent_X
{
public:
	float                                              ThrottleRiseSpeed;                                		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThrottleFallSpeed;                                		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Throttle;                                         		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3968 ];

		return pClassPointer;
	};

};

UClass* UThrottleShakeComponent_TA::pClassPointer = NULL;

// Class TAGame.ThumbnailRenderer_TA
// 0x01B8 (0x01F4 - 0x003C)
class UThumbnailRenderer_TA : public UObject
{
public:
	struct FRotator                                    CameraRotation;                                   		// 0x003C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CameraTranslation;                                		// 0x0048 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraFOV;                                        		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAutoZoomCamera : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableLightEnvironment : 1;                     		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      CompressionNone : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSkipBackground : 1;                              		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSkipScene : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FRotator                                    ProductRotation;                                  		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ProductTranslation;                               		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UPrefab*                                     ScenePrefab;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessChain*                           ScenePostProcessChain;                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        ScenePostProcessSettings;                         		// 0x007C (0x0150) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                BackgroundColor;                                  		// 0x01CC (0x0010) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                RenderWidth;                                      		// 0x01DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                RenderHeight;                                     		// 0x01E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                TextureWidth;                                     		// 0x01E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                TextureHeight;                                    		// 0x01E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      MipGenSettings;                                   		// 0x01EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBias;                                          		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3970 ];

		return pClassPointer;
	};

	class UTexture2D* RenderScene ( class UThumbnailScene_TA* Scene );
	class UThumbnailScene_TA* BuildScene ( );
};

UClass* UThumbnailRenderer_TA::pClassPointer = NULL;

// Class TAGame.ThumbnailScene_TA
// 0x0030 (0x006C - 0x003C)
class UThumbnailScene_TA : public UObject
{
public:
	TArray< struct FThumbnailComponent >               SceneComponents;                                  		// 0x003C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     ViewTranslation;                                  		// 0x0048 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ViewRotation;                                     		// 0x0054 (0x000C) [0x0000000000000000]              
	unsigned long                                      bForceAllUsedMipsResident : 1;                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	class UTexture2D*                                  Background;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FPointer                                    RenderScene;                                      		// 0x0068 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3972 ];

		return pClassPointer;
	};

	void HideAllMeshes ( );
	class UActorComponent* GetSceneComponent ( class UClass* ComponentClass, struct FName Tag );
};

UClass* UThumbnailScene_TA::pClassPointer = NULL;

// Class TAGame.VehiclePartStaticMeshComponent_TA
// 0x0004 (0x027C - 0x0278)
class UVehiclePartStaticMeshComponent_TA : public UStaticMeshComponent
{
public:
	class URB_BodySetup*                               BodySetupOverride;                                		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3974 ];

		return pClassPointer;
	};

};

UClass* UVehiclePartStaticMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.VehiclePickup_TA
// 0x0044 (0x0240 - 0x01FC)
class AVehiclePickup_TA : public AActor
{
public:
	float                                              RespawnDelay;                                     		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  FXActor;                                          		// 0x0204 (0x0004) [0x0000000000220001]              ( CPF_Edit | CPF_EditConst )
	class UFXActorEvent_X*                             PickedUpEvent;                                    		// 0x0208 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             LocalPickedUpEvent;                               		// 0x020C (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0210 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPickupData                                 ReplicatedPickupData;                             		// 0x0214 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bPickedUp : 1;                                    		// 0x021C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNetRelevant : 1;                                 		// 0x021C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNoPickup : 1;                                    		// 0x021C (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventSpawned__Delegate;                         		// 0x0220 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0224 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPickedUp__Delegate;                        		// 0x0230 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0234 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3976 ];

		return pClassPointer;
	};

	void PlayPickedUpFX ( );
	bool IsTouchingAVehicle ( );
	void UpdateTickDisabled ( );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void SetNetRelevant ( unsigned long bRelevant );
	void Respawn ( );
	void SetPickedUp ( unsigned long bNewPickedUp, class ACar_TA* InInstigator );
	void Pickup ( class ACar_TA* Car );
	bool CanPickup ( class ACar_TA* Car );
	void OnTouch ( class ACar_TA* Car );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void OnPickUp ( );
	void OnSpawn ( );
	void SetNoPickup ( );
	void SetupReplicateNoPickup ( );
	void InitFX ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventPickedUp ( class AVehiclePickup_TA* Pickup );
	void EventSpawned ( class AVehiclePickup_TA* Pickup );
};

UClass* AVehiclePickup_TA::pClassPointer = NULL;

// Class TAGame.VehicleSim_TA
// 0x007F (0x00E4 - 0x0065)
class UVehicleSim_TA : public UActorComponent
{
public:
	TArray< class UWheel_TA* >                         Wheels;                                           		// 0x0068 (0x000C) [0x000000000448000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FInterpCurveFloat                           SteerAngleCurve;                                  		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DriveTorque;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           DriveTorqueCurve;                                 		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BrakeTorque;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           HandbrakeSteerAngleCurve;                         		// 0x009C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInputRate                                  HandbrakeRate;                                    		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleBrakeFactor;                                  		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OppositeBrakeFactor;                              		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAckermannSteering : 1;                        		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWasAttached : 1;                                 		// 0x00C0 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	float                                              OutputThrottle;                                   		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutputSteer;                                      		// 0x00C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutputBrake;                                      		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OutputHandbrake;                                  		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AVehicle_TA*                                 Vehicle;                                          		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     Car;                                              		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    BulletVehicle;                                    		// 0x00DC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              SteeringSensitivity;                              		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3978 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	struct FTurningCircle GetMaxTurningCircle ( float SteerAmt, float AtSpeed, struct FVector AtLocation, struct FRotator AtRotation );
	struct FTurningCircle GetMaxTurningCircleAt ( float SteerAmt, float AtSpeed, struct FVector AtLocation, struct FRotator AtRotation );
	void eventOnDetached ( );
	void SetupWheelPreset ( class UWheel_TA* Wheel, struct FVehicleAxleData PresetAxle, struct FVehicleWheelSettings WheelSettings );
	void SetupPresetAxle ( class UWheel_TA* LeftWheel, class UWheel_TA* RightWheel, struct FVehicleAxleSettings VisualAxle, struct FVehicleAxleData PresetAxle );
	void SetupWheelBone ( class UWheel_TA* Wheel, struct FVehicleAxleSettings Axle, struct FVehicleWheelSettings WheelSettings );
	void SetupBoneAxle ( class UWheel_TA* LeftWheel, class UWheel_TA* RightWheel, struct FVehicleAxleSettings Axle );
	void eventOnAttached ( );
};

UClass* UVehicleSim_TA::pClassPointer = NULL;

// Class TAGame.VoteActor_TA
// 0x00B0 (0x02AC - 0x01FC)
class AVoteActor_TA : public AActor
{
public:
	struct FString                                     Subject;                                          		// 0x01FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TimeRemaining;                                    		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUnanimousVote : 1;                               		// 0x020C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFinished : 1;                                    		// 0x020C (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	TArray< struct FVoter >                            Voters;                                           		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVoter                                      ReplicatedVoters[ 0x8 ];                          		// 0x021C (0x0040) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventStarted__Delegate;                         		// 0x025C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0260 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventVotersChanged__Delegate;                   		// 0x026C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0270 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTimeRemainingChanged__Delegate;            		// 0x027C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0280 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFinished__Delegate;                        		// 0x028C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0290 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDestroyed__Delegate;                       		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x02A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3980 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void DestroySelf ( );
	bool Failed ( );
	bool Passed ( );
	int RequiredVotes ( );
	int NoVotes ( );
	int YesVotes ( );
	void FinishVote ( );
	void CheckFinished ( );
	void SetVoteStatus ( class APRI_TA* PRI, unsigned char Status );
	void OnVotersChanged ( );
	void RemoveVoter ( class APRI_TA* PRI );
	void AddVoter ( class APRI_TA* PRI );
	void UpdateTimeRemaining ( );
	void AddTeam ( class ATeam_TA* Team );
	void AddGameEvent ( class AGameEvent_TA* GameEvent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void EventDestroyed ( class AVoteActor_TA* VoteActor );
	void EventFinished ( class AVoteActor_TA* VoteActor );
	void EventTimeRemainingChanged ( class AVoteActor_TA* VoteActor );
	void EventVotersChanged ( class AVoteActor_TA* VoteActor );
	void EventStarted ( class AVoteActor_TA* VoteActor );
};

UClass* AVoteActor_TA::pClassPointer = NULL;

// Class TAGame.Wheel_TA
// 0x0118 (0x0160 - 0x0048)
class UWheel_TA : public UComponent
{
public:
	float                                              SteerFactor;                                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionStiffness;                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionDampingCompression;                     		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionDampingRelaxation;                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionMaxRaise;                               		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinSpeedDecayRate;                               		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           LatFrictionCurve;                                 		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           LongFrictionCurve;                                		// 0x0078 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           HandbrakeLatFrictionCurve;                        		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           HandbrakeLongFrictionCurve;                       		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           WallFrictionCurve;                                		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BoneName;                                         		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PhysicsBoneName;                                  		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoneOffset;                                       		// 0x00C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PresetRestPosition;                               		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LocalSuspensionRayStart;                          		// 0x00E0 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LocalRestPosition;                                		// 0x00EC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UVehicleSim_TA*                              VehicleSim;                                       		// 0x00F8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                WheelIndex;                                       		// 0x00FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FWheelContactData                           Contact;                                          		// 0x0100 (0x0044) [0x0000000000082002]              ( CPF_Const | CPF_Transient | CPF_Component )
	unsigned long                                      bDrawDebug : 1;                                   		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHadContact : 1;                                  		// 0x0144 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	float                                              FrictionCurveInput;                               		// 0x0148 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              SpinSpeed;                                        		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventContactChanged__Delegate;                  		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0154 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3982 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	struct FVector GetRefWheelLocation ( );
	float GetSuspensionDistance ( );
	float GetSteer ( );
	struct FVector GetLinearVelocity ( );
	void EventContactChanged ( class UWheel_TA* Wheel );
};

UClass* UWheel_TA::pClassPointer = NULL;

// Class TAGame.WheelSpeedComponent_TA
// 0x001C (0x0088 - 0x006C)
class UWheelSpeedComponent_TA : public UActorComponent_X
{
public:
	class AVehicle_TA*                                 Car;                                              		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WheelForwardSpeedInterpRate;                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSideSpeedInterpRate;                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWheelSpeed;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvgWheelForwardSpeed;                             		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AvgWheelSideSpeed;                                		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AvgWheelSpinSpeed;                                		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3984 ];

		return pClassPointer;
	};

	void eventDetached ( );
	void eventAttached ( );
};

UClass* UWheelSpeedComponent_TA::pClassPointer = NULL;

// Class TAGame.BuildInfo_TA
// 0x0028 (0x0064 - 0x003C)
class UBuildInfo_TA : public UObject
{
public:
	struct FString                                     VersionString;                                    		// 0x003C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                Changelist;                                       		// 0x0048 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     Branch;                                           		// 0x004C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Label;                                            		// 0x0058 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3986 ];

		return pClassPointer;
	};

};

UClass* UBuildInfo_TA::pClassPointer = NULL;

// Class TAGame.AIRole_TA
// 0x000C (0x0048 - 0x003C)
class UAIRole_TA : public UObject
{
public:
	TArray< struct FBTDynamicLinkData >                DynamicLinks;                                     		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58837 ];

		return pClassPointer;
	};

};

UClass* UAIRole_TA::pClassPointer = NULL;

// Class TAGame.PRI_TA
// 0x0448 (0x0770 - 0x0328)
class APRI_TA : public APRI_X
{
public:
	int                                                MatchScore;                                       		// 0x0328 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MatchGoals;                                       		// 0x032C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MatchOwnGoals;                                    		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatchAssists;                                     		// 0x0334 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MatchSaves;                                       		// 0x0338 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MatchShots;                                       		// 0x033C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MatchDemolishes;                                  		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatchBonusXP;                                     		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatchBreakoutDamage;                              		// 0x0348 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bMatchMVP : 1;                                    		// 0x034C (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bMatchAdmin : 1;                                  		// 0x034C (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bLoadoutSet : 1;                                  		// 0x034C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bOnlineLoadoutSet : 1;                            		// 0x034C (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bLoadoutsSet : 1;                                 		// 0x034C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bOnlineLoadoutsSet : 1;                           		// 0x034C (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	unsigned long                                      bTeamPaintSet : 1;                                		// 0x034C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bReady : 1;                                       		// 0x034C (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBusy : 1;                                        		// 0x034C (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsingSecondaryCamera : 1;                        		// 0x034C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bUsingBehindView : 1;                             		// 0x034C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bUsingFreecam : 1;                                		// 0x034C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bIsInSplitScreen : 1;                             		// 0x034C (0x0004) [0x0000000000000020] [0x00001000] ( CPF_Net )
	unsigned long                                      bDeveloper : 1;                                   		// 0x034C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bVoteToForfeitDisabled : 1;                       		// 0x034C (0x0004) [0x0000000000002020] [0x00004000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsingItems : 1;                                  		// 0x034C (0x0004) [0x0000000000002020] [0x00008000] ( CPF_Net | CPF_Transient )
	unsigned long                                      PlayerHistoryValid : 1;                           		// 0x034C (0x0004) [0x0000000000000020] [0x00010000] ( CPF_Net )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_TA*                               ReplicatedGameEvent;                              		// 0x0354 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ACar_TA*                                     Car;                                              		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLoadoutData                                FullLoadouts[ 0x2 ];                              		// 0x035C (0x0068) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLoadoutAttributesArray                     FullLoadoutAttributes[ 0x2 ];                     		// 0x03C4 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FClientLoadoutOnlineData                    FullOnlineLoadout[ 0x2 ];                         		// 0x03DC (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FClientLoadoutData                          ClientLoadout;                                    		// 0x03F4 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FClientLoadoutOnlineData                    ClientLoadoutOnline;                              		// 0x0400 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FClientLoadoutDatas                         ClientLoadouts;                                   		// 0x040C (0x0018) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FClientLoadoutOnlineDatas                   ClientLoadoutsOnline;                             		// 0x0424 (0x001C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOnlineProductStat >                OnlineProductStats;                               		// 0x0440 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLoadoutTeamPaint                           TeamPaint;                                        		// 0x044C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTAPlayerStat >                     MatchStats;                                       		// 0x045C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                RespawnTimeRemaining;                             		// 0x0468 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                WaitingStartTime;                                 		// 0x046C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotalGameTimePlayed;                              		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACameraSettingsActor_TA*                     PersistentCamera;                                 		// 0x0474 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ACameraSettingsActor_TA*                     Camera;                                           		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FProfileCameraSettings                      CameraSettings;                                   		// 0x047C (0x001C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CameraPitch;                                      		// 0x0498 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CameraYaw;                                        		// 0x0499 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PawnType;                                         		// 0x049A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      PlayerHistoryKey[ 0x40 ];                         		// 0x049B (0x0040) [0x0000000000000020]              ( CPF_Net )
	TArray< class UProductStat_TA* >                   ProductStats;                                     		// 0x04DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FProductStat >                      PendingProductStatValues;                         		// 0x04E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FUniqueNetId                                PartyLeader;                                      		// 0x04F4 (0x0048) [0x0000000000000020]              ( CPF_Net )
	int                                                TotalXP;                                          		// 0x053C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     SanitizedPlayerName;                              		// 0x0540 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       Title;                                            		// 0x054C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FSkillTierData                              SkillTier;                                        		// 0x0554 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DodgeInputThreshold;                              		// 0x055C (0x0004) [0x0000000000000000]              
	float                                              SteeringSensitivity;                              		// 0x0560 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              AirControlSensitivity;                            		// 0x0564 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextTimeRestrictedStatEventAllowedTime;           		// 0x0568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimeRestrictedStatEventTime;                  		// 0x056C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TimeTillItem;                                     		// 0x0570 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MaxTimeTillItem;                                  		// 0x0574 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                BoostPickups;                                     		// 0x0578 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BallTouches;                                      		// 0x057C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CarTouches;                                       		// 0x0580 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     ReplacingBotPRI;                                  		// 0x0584 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FMemberTitleStat                            PrimaryTitle;                                     		// 0x0588 (0x0014) [0x0000000000000020]              ( CPF_Net )
	struct FMemberTitleStat                            SecondaryTitle;                                   		// 0x059C (0x0014) [0x0000000000000020]              ( CPF_Net )
	class AFXActor_X*                                  PlayerGoalExplosion;                              		// 0x05B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerBanner_TA*                            PlayerBanner;                                     		// 0x05B4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BotProductName;                                   		// 0x05B8 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventGameEventChanged__Delegate;                		// 0x05C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x05C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatEvent__Delegate;                       		// 0x05D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x05D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSelectedLoadout__Delegate;                 		// 0x05E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x05E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRespawnTimeUpdated__Delegate;              		// 0x05F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x05F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatTickerMessage__Delegate;               		// 0x0600 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0604 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventInvalidPsyonixID__Delegate;                		// 0x0610 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0614 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReadyChanged__Delegate;                    		// 0x0620 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0624 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarSet__Delegate;                          		// 0x0630 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x0634 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenStatusChanged__Delegate;        		// 0x0640 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0644 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPersistentCameraSet__Delegate;             		// 0x0650 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x0654 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCameraChanged__Delegate;                   		// 0x0660 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x0664 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPartyLeaderChanged__Delegate;              		// 0x0670 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x0674 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScorePoint__Delegate;                      		// 0x0680 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData12[ 0x4 ];                             		// 0x0684 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventWonMVP__Delegate;                          		// 0x0690 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData13[ 0x4 ];                             		// 0x0694 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatTitlesSet__Delegate;                   		// 0x06A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData14[ 0x4 ];                             		// 0x06A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTotalXPChanged__Delegate;                  		// 0x06B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData15[ 0x4 ];                             		// 0x06B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPawnTypeChanged__Delegate;                 		// 0x06C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData16[ 0x4 ];                             		// 0x06C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCommittedStats__Delegate;                  		// 0x06D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData17[ 0x4 ];                             		// 0x06D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventVoteToForfeitDisabled__Delegate;           		// 0x06E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData18[ 0x4 ];                             		// 0x06E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTitleChanged__Delegate;                    		// 0x06F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData19[ 0x4 ];                             		// 0x06F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSkillTierChanged__Delegate;                		// 0x0700 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData20[ 0x4 ];                             		// 0x0704 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventServerChangeTeamFailed__Delegate;          		// 0x0710 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData21[ 0x4 ];                             		// 0x0714 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoredGoal__Delegate;                      		// 0x0720 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData22[ 0x4 ];                             		// 0x0724 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReplacingBotChanged__Delegate;             		// 0x0730 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData23[ 0x4 ];                             		// 0x0734 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchAdmin__Delegate;                      		// 0x0740 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData24[ 0x4 ];                             		// 0x0744 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventServerUnlockedAchievement__Delegate;       		// 0x0750 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData25[ 0x4 ];                             		// 0x0754 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReceivedCurrencyDrop__Delegate;            		// 0x0760 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData26[ 0x4 ];                             		// 0x0764 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59091 ];

		return pClassPointer;
	};

	bool __PRI_TA__RemoveIrrelevantAttributes ( class UProductAttribute_TA* A );
	bool __PRI_TA__InitClientLoadoutOnlineData ( class UProductAttribute_TA* A );
	bool __PRI_TA__InitFromAttributes ( class UProductAttribute_TA* A );
	void eventDestroyed ( );
	void OnUniqueIdChanged ( );
	void UpdatePlayerBanner ( );
	struct FString GetBotName ( );
	void SetBotProductName ( struct FName InBotProductName );
	void BindCarDelegates ( unsigned long bBind );
	void ClientUnlockAchievement ( int AchievementId, unsigned char AchievementType );
	void ServerSetPlayerActivatedFX ( class AFXActor_X* FX );
	void UpdateCarLocalPlayer ( );
	void OnReplacingBotPRIChanged ( );
	void OnTeamChanged ( );
	void ClearBotReplacement ( );
	void SetBotReplacement ( class AAIController_TA* C );
	void ReportCheater ( struct FString Reason );
	bool ValidateLoadoutTeamPaints ( );
	bool ValidateLoadoutSlots ( );
	void ValidateLoadoutDLC ( );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void OnVoteToForfeitDisabled ( );
	void DisablebVoteToForfeit ( );
	void ServerVoteToForfeit ( );
	void SetPlayerNameSanitized ( struct FString Original, struct FString Sanitized );
	void SanitizePlayerName ( class APRI_X* PRI );
	class UOnlineGame_Base_X* GetOnlineGameBase ( );
	class UOnlineGame_X* GetOnlineGame ( );
	void SetUserCarPreferences ( float NewDodgeThreshold, float NewSteeringSensitivity, float NewAirControlSensitivity );
	void ServerSetUserCarPreferences ( float NewDodgeThreshold, float NewSteeringSensitivity, float NewAirControlSensitivity );
	void ServerSetTotalXP ( int NewXP );
	int ValidateUserInt ( struct FString Reason, int NewValue, int Min, int Max );
	float ValidateUserFloat ( struct FString Reason, float NewValue, float Min, float Max );
	void OnTotalXPChanged ( );
	void OnPawnTypeChanged ( );
	void SetWaitingPlayer ( unsigned long B );
	void SetPawnType ( unsigned char NewPawnType );
	bool IsEditor ( );
	bool IsSpectator ( );
	void ServerSpectate ( );
	void ClientChangeTeamFailed ( int TeamNum );
	void ServerChangeTeam ( int TeamNum );
	void ServerSetVoteStatus ( class AVoteActor_TA* VoteActor, unsigned char NewVote );
	void SetPodiumTitle ( int Index, struct FMemberTitleStat InTitle );
	void ReplicatePodiumTitles ( );
	void ClearPodiumTitle ( struct FMemberTitleStat* StructInitializer_D7A4669B4A315079285F0689C2C8481B, struct FMemberTitleStat* StructInitializer_4ADF56004A44A958C02B7EB758A1E37B );
	void OnMatchAdmin ( );
	void OnMVPChange ( );
	void NotifyWonMVP ( );
	bool IsInvalidName ( );
	bool IsInGameState ( struct FName StateName );
	bool IsInWarmUpMode ( );
	void SetReady ( unsigned long bNewReady );
	void ServerMatchAdminSetPaused ( unsigned long bPause );
	void ServerMatchAdminSetScoreAndTime ( int NewScoreTeam0, int NewScoreTeam1, int SecondsRemaining, unsigned long bOverTime, unsigned long bRestartRound );
	void SetMatchAdmin ( unsigned long bIsMatchAdmin );
	void ServerReadyUp ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void ClientUpdateOnlineProductStats ( struct FClientOnlineProductStat ClientStat );
	void UpdateOnlineProductStats ( );
	void ClientGiveOnlineCurrencyDrop ( struct FCurrencyDrop Drop );
	void ClientGenerateItemDrop ( );
	void ClientGiveOnlineReward ( struct FOnlineProductData Product );
	void HandleOnlineCurrencyDrops ( TArray< struct FCurrencyDrop >* CurrencyDrops );
	void HandleOnlineProductDrops ( TArray< struct FOnlineProductData >* ProductDrops );
	void GenerateItemDrop ( );
	void SetWaitingStartTime ( );
	void ClientNotifyStatTickerMessage ( class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent );
	void OnRespawnTimeRemainingChanged ( );
	void SetRespawnTime ( int NewTime );
	void OnRep_RepStatTitles ( );
	void ClientScoredGoal ( struct FVector BallHitLocation );
	void OnRep_SteeringSensitivity ( );
	void OnRep_ClientScorePoint ( );
	void ResetScore ( );
	void RemovePoints ( int Points );
	void ScorePoint ( int AdditionalScore );
	void SetStatCount ( class UStatEvent_TA* StatEvent, int ForceCount );
	void IncrementStat ( class UStatEvent_TA* StatEvent, int Count );
	void ClientNotifyGainedStat ( class UStatEvent_TA* StatEvent, int Count );
	void OnGainedStat ( class UStatEvent_TA* StatEvent, int Count );
	void GiveScore ( class UStatEvent_TA* StatEvent, int Count );
	bool CanAwardTimeRestrictedStatEvent ( );
	void RecordTimeRestrictedStatEvent ( );
	void ResetTimeRestrictedStatEvent ( );
	int GetMatchStatCount ( struct FName StatName );
	void CommitMatchStats ( class UProfile_TA* Profile );
	void CommitProductStats ( class UProfile_TA* Profile );
	void CommitStats ( );
	void InitProductStats ( class UProductLoader_TA* Loadout );
	void HandleLoadoutLoaded ( class UProductLoader_TA* Loadout );
	void UpdateFromLoadout ( );
	void UpdateUserCarPreferences ( class ACarComponent_AirControl_TA* AirControlComponent );
	void HandleAirControl ( class ACarComponent_AirControl_TA* AirControlComp );
	void SetCar ( class ACar_TA* NewCar );
	bool IsClientPlayerPRI ( );
	bool IsLocalPlayerPRI ( );
	void Unregister ( );
	void AddLocalPlayerToGameEvent ( );
	void SetReplayGameEvent ( class AGameEvent_TA* InGameEvent );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	void OnLoadoutsSetInternal ( );
	bool AreLoadoutsSet ( );
	void OnLoadoutsOnlineSet ( );
	void OnLoadoutsSet ( );
	void Deprecated_OnLoadoutSetInternal ( );
	bool Deprecated_IsLoadoutSet ( );
	void Deprecated_OnLoadoutOnlineSet ( );
	void Deprecated_OnLoadoutSet ( );
	void SetTestLoadout ( struct FLoadoutData NewLoadout );
	TArray< struct FOnlineProductData > GetMatchCompleteLoadout ( );
	void InitCertifiedProductStat ( int ProductID, class UProductAttribute_Certified_TA* Certified );
	void RemoveCertifiedProductStat ( );
	void InitFromAttributes ( struct FLoadoutData* Loadout, struct FLoadoutAttributesArray* LoadoutAttributes );
	void InitClientLoadoutOnlineData ( struct FLoadoutAttributesArray* LoadoutAttributes, struct FClientLoadoutOnlineData* OutClientData, TArray< class UProductAttribute_TA* >* FilterLocal_3D88B12F49B1E58C2DD17695DDBD3693 );
	bool ValidatePaintedAttribute ( class UProductAttribute_Painted_TA* Current, class UProductAttribute_Painted_TA* Actual );
	bool ValidateCertifiedAttribute ( struct FOnlineProductStat ProductStat, class UProductAttribute_Certified_TA* Actual );
	bool ValidateOnlineLoadout ( struct FLoadoutData* OutLoadout, struct FLoadoutAttributesArray* OutAttributes, struct FClientLoadoutOnlineData* OutOnlineLoadout, TArray< class UOnlineProduct_TA* >* OnlineProducts, struct FClientLoadoutOnlineProduct* StructInitializer_840F9C834A4ABF737A396AB777AF5268, struct FProductAttributesArray* StructInitializer_F5704DBA424CDF9128413EA894FF7E30 );
	void HandleOnlineLoadoutReceived ( class URPC_ProductsLoadoutGet_TA* RPC );
	void RemoveIrrelevantAttributes ( struct FLoadoutData* Loadout, struct FLoadoutAttributesArray* OutLoadoutAttributes, TArray< class UProductAttribute_TA* >* FilterLocal_736DDA9E49ECF823793D169BC49FC645 );
	void InitLoadoutAttributesForTeam ( class APRI_X* PRI );
	void SetLoadouts ( struct FLoadoutData* Loadouts, struct FLoadoutAttributesArray* LoadoutAttributes );
	void ServerSetLoadout ( struct FServerSetLoadoutParams Params );
	bool ShouldValidateOnlineProducts ( );
	void OnSplitScreenStatusChanged ( );
	void HandleLocalPlayerLeave ( class ULocalPlayer* OldPlayer );
	void HandleLocalPlayerJoin ( class ULocalPlayer* NewPlayer );
	void ServerSplitScreenStatusChanged ( unsigned long bInSplitScreen );
	void UpdateSplitScreenStatus ( );
	void OnPartyLeaderChanged ( );
	void ServerSetPartyLeader ( struct FUniqueNetId InPartyLeader, unsigned long bInParty );
	void SetPartyLeader ( struct FUniqueNetId InPartyLeader, unsigned long bInParty );
	void HandlePartyStatusChanged ( class UOnlineGameParty_X* Party );
	void UpdatePartyStatus ( );
	void OnSkillTierChanged ( );
	void ReplicateSkillTier ( int NewTier );
	void OnTitleChanged ( );
	void SetTitle ( struct FName NewTitle );
	void HandlePlayerTitle ( class UOnlineGamePlayerTitles_X* TitlesObj, struct FUniqueNetId InPlayerId );
	void UpdateTitle ( );
	void HandleCameraChanged ( class ACameraSettingsActor_TA* Actor );
	void SetCamera ( class ACameraSettingsActor_TA* Actor );
	void eventOnOwnerChanged ( );
	void GetNewFriendKey ( );
	void SetPlayerHistoryKey ( TArray< unsigned char > HistoryKeyArray );
	void ServerSetPlayerHistoryKey ( unsigned char* HistoryKeyArray );
	void eventOnNewPlayerHistoryKey ( );
	void AddPlayerHistoryKey ( class UOnlineRecentPlayersList* PlayersList );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventReceivedCurrencyDrop ( class APRI_TA* PRI, struct FCurrencyDrop Drop );
	void EventServerUnlockedAchievement ( class APRI_TA* PRI, int AchievementId, unsigned char AchievementType );
	void EventMatchAdmin ( class APRI_TA* PRI );
	void EventReplacingBotChanged ( class APRI_TA* PRI );
	void EventScoredGoal ( class APRI_TA* PRI, struct FVector BallHitLocation );
	void EventServerChangeTeamFailed ( int TeamIndex );
	void EventSkillTierChanged ( class APRI_TA* PRI );
	void EventTitleChanged ( class APRI_TA* PRI );
	void EventVoteToForfeitDisabled ( class APRI_TA* PRI );
	void EventCommittedStats ( class APRI_TA* PRI );
	void EventPawnTypeChanged ( class APRI_TA* PRI );
	void EventTotalXPChanged ( class APRI_TA* PRI );
	void EventStatTitlesSet ( class APRI_TA* PRI );
	void EventWonMVP ( class APRI_TA* PRI );
	void EventScorePoint ( class APRI_TA* PRI, int Points );
	void EventPartyLeaderChanged ( class APRI_TA* PRI );
	void EventCameraChanged ( class APRI_TA* PRI );
	void EventPersistentCameraSet ( class APRI_TA* PRI );
	void EventSplitScreenStatusChanged ( class APRI_TA* PRI );
	void EventCarSet ( class APRI_TA* PRI );
	void EventReadyChanged ( class APRI_TA* PRI );
	void EventInvalidPsyonixID ( );
	void EventStatTickerMessage ( class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent );
	void EventRespawnTimeUpdated ( int NewTime );
	void EventSelectedLoadout ( class APRI_TA* PRI );
	void EventStatEvent ( class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count );
	void EventGameEventChanged ( class APRI_TA* PRI );
};

UClass* APRI_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Logo_TA
// 0x0030 (0x00AC - 0x007C)
class UProductAsset_Logo_TA : public UProductAsset_TA
{
public:
	class UTexture*                                    Texture;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TeamColor;                                        		// 0x0080 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                CustomColor;                                      		// 0x0090 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UProduct_TA* >                       Bots2;                                            		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59175 ];

		return pClassPointer;
	};

	struct FLinearColor GetFontColor ( unsigned long bSwapColors );
	TArray< struct FLinearColor > GetStadiumColors ( unsigned long bSwapColors );
	struct FString GetTeamName ( );
};

UClass* UProductAsset_Logo_TA::pClassPointer = NULL;

// Class TAGame.Car_TA
// 0x017C (0x08EC - 0x0770)
class ACar_TA : public AVehicle_TA
{
public:
	TArray< class ACarComponent_TA* >                  DefaultCarComponents;                             		// 0x0770 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UEngineAudioComponent_TA*                    EngineAudio;                                      		// 0x077C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UEngineAudioREVComponent_TA*                 EngineAudioRev;                                   		// 0x0780 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UThrottleShakeComponent_TA*                  ThrottleShake;                                    		// 0x0784 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ACarComponent_DoubleJump_TA*                 DoubleJumpComponent;                              		// 0x0788 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarComponent_FlipCar_TA*                    FlipComponent;                                    		// 0x078C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DemolishTarget;                                   		// 0x0790 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DemolishSpeed;                                    		// 0x0791 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UProductLoader_TA*                           Loadout;                                          		// 0x0794 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AFXActor_X*                                  ExitFXArchetype;                                  		// 0x0798 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADemolishExplosion_TA*                       DemolishExplosionArchetype;                       		// 0x079C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ADemolishExplosion_TA*                       DemolishExplosion;                                		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBallIndicator_TA*                           BallIndicatorArchetype;                           		// 0x07A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBallIndicator_TA*                           BallIndicator;                                    		// 0x07A8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UTeamIndicator_TA*                           TeamIndicatorArchetype;                           		// 0x07AC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTeamIndicator_TA*                           TeamIndicator;                                    		// 0x07B0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              MaxTimeForDodge;                                  		// 0x07B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastWheelsHitBallTime;                            		// 0x07B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLoadoutTeamPaint                           TeamPaint;                                        		// 0x07BC (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FClubColorSet                               ClubColors;                                       		// 0x07CC (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              ReplicatedCarScale;                               		// 0x07D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bDemolishOnOpposingGround : 1;                    		// 0x07D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWasOnOpposingGround : 1;                         		// 0x07D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDemolishOnGoalZone : 1;                          		// 0x07D8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWasInGoalZone : 1;                               		// 0x07D8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bJumped : 1;                                      		// 0x07D8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDoubleJumped : 1;                                		// 0x07D8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bOverrideHandbrakeOn : 1;                         		// 0x07D8 (0x0004) [0x0000000000002020] [0x00000040] ( CPF_Net | CPF_Transient )
	unsigned long                                      bOverrideBoostOn : 1;                             		// 0x07D8 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	class UMessage_TA*                                 DemolishWarningMessage;                           		// 0x07DC (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 PickupMessage;                                    		// 0x07E0 (0x0004) [0x0000000000000000]              
	struct FDemolishData                               ReplicatedDemolish;                               		// 0x07E4 (0x0020) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AFXActor_X*                                  BodyFXActor;                                      		// 0x0804 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     AttackerPRI;                                      		// 0x0808 (0x0004) [0x0000000000000000]              
	class ABall_TA*                                    AttachedBall;                                     		// 0x080C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     MouseAccel;                                       		// 0x0810 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MouseAirAccel;                                    		// 0x081C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ASpecialPickup_TA*                           AttachedPickup;                                   		// 0x0828 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     ReplayFocusOffset;                                		// 0x082C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              AddedBallForceMultiplier;                         		// 0x0838 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              AddedCarForceMultiplier;                          		// 0x083C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UCarTrajectoryComponent_TA*                  CarTrajectoryComponent;                           		// 0x0840 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UNameplateComponentCar_TA*                   NameplateComponentCar;                            		// 0x0848 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventVehicleSetup__Delegate;                    		// 0x084C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0850 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBumpedCar__Delegate;                       		// 0x085C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0860 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDemolished__Delegate;                      		// 0x086C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0870 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTeamSet__Delegate;                         		// 0x087C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0880 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTeamPaintChanged__Delegate;                		// 0x088C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0890 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitBall__Delegate;                         		// 0x089C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x08A0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLanded__Delegate;                          		// 0x08AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x08B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSuperSonicChanged__Delegate;               		// 0x08BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x08C0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAttachedPickup__Delegate;                  		// 0x08CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x08D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitWorld__Delegate;                        		// 0x08DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x08E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59414 ];

		return pClassPointer;
	};

	float GetMaxDriveBackwardsSpeed ( );
	float GetMaxDriveForwardSpeed ( );
	struct FVector GetReplayFocusLocation ( );
	void OnPickupChanged ( class ASpecialPickup_TA* inPickup );
	void SetAttachedPickup ( class ASpecialPickup_TA* inPickup );
	void EnablePodiumMode ( );
	void ServerEquipProduct ( struct FName ProductName );
	void HasBall ( class ABall_TA* InBall );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void CopyPushFactorCurve ( );
	void ClearAttacker ( );
	void NotifyNewAttacker ( class APRI_TA* Attacker );
	void UpdateTeamIndicator ( );
	void eventTick ( float DeltaTime );
	void UpdateBallIndicator ( );
	struct FString GetReplicatedLoadoutString ( );
	void eventOnSuperSonicChanged ( );
	void eventOnGroundChanged ( );
	void FellOutOfWorld ( class UClass* dmgType );
	class UNetConnection* GetNetConnection ( );
	class APlayerController* GetTopPlayerController ( );
	void DemolishDestroyTimer ( );
	void ClearFX ( );
	void OnDemolished ( struct FDemolishData Data );
	void Demolish ( class ARBActor_TA* Demolisher );
	bool IsBumperHit_Extent ( struct FVector HitLocation );
	bool IsBumperHit_CarAngle ( class ACar_TA* OtherCar );
	bool IsBumperHit_HitNormalAngle ( struct FVector HitNormal );
	bool IsBumperHit ( class ACar_TA* OtherCar, struct FVector HitLocation, struct FVector HitNormal );
	void SetSoundMode ( struct FName NewModeValue, struct FName NewModeGroup );
	bool Teleport ( struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bStopVelocity, unsigned long bUpdateRotation, float ExtraForce );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnJumpReleased ( );
	void OnJumpPressed ( );
	void LaunchBall ( );
	void eventSetVehicleInput ( struct FVehicleInputs NewInput );
	bool CanDemolish ( class ACar_TA* HitCar );
	bool ShouldDemolish ( class ACar_TA* HitCar, struct FVector HitLocation, struct FVector HitNormal, unsigned char* Result );
	unsigned char ApplyCarImpactForces ( class ACar_TA* OtherCar, struct FVector HitLocation, struct FVector HitNormal );
	void ApplyBallImpactForces ( class ABall_TA* Ball, struct FVector HitLocation );
	bool IsDodging ( );
	void OnHitBall ( class ABall_TA* Ball, struct FVector HitLocation, struct FVector HitNormal );
	void eventOnRigidBodyCollision ( struct FAccumulatedRigidBodyCollision Collision );
	bool AnyWheelTouchingGround ( );
	class ACarComponent_TA* GiveCarComponent ( class ACarComponent_TA* ComponentArchetype, class APRI_TA* Activator );
	void AddDefaultCarComponents ( );
	void NotifyWhenVehicleSetup ( struct FScriptDelegate Callback );
	void InitCarFX ( );
	void InitFX ( );
	void DetachPrimitiveComponent ( class UPrimitiveComponent* Component );
	void HandleWheelBallHit ( class UWheel_TA* Wheel );
	void HandleAllProductsLoaded ( class UProductLoader_TA* Loader );
	void RespawnInPlace ( );
	void SetPickupMessage ( class UMessage_TA* InPickupMessage );
	void SetDemolishOnGoalZone ( unsigned long bInDemolishOnGoalZone, class UMessage_TA* WarningMessage );
	void SetDemolishOnOpposingGround ( unsigned long bInDemolishOnOpposingGround, class UMessage_TA* WarningMessage );
	void SetCarScale ( float NewScale );
	void OnClubColorsChanged ( );
	void OnTeamPaintChanged ( );
	void HandleTeamChanged ( class APRI_X* MyPRI );
	void UpdateTeamLoadout ( );
	void InitTeamPaint ( );
	int GetLoadoutTeamIndex ( );
	int GetPreviewTeamIndex ( );
	bool HasTeam ( );
	void HandleLoadoutSelected ( class APRI_TA* MyPRI );
	void SetLoadout ( struct FClientLoadoutData* Data );
	void HandleGameStateChanged ( class AGameEvent_TA* InGameEvent );
	void HandleGameEventChanged ( class APRI_TA* MyPRI );
	void OnPRIChanged ( );
	void OnControllerChanged ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventHitWorld ( class ACar_TA* Car, class AActor* HitActor );
	void EventAttachedPickup ( class ACar_TA* Car, class ASpecialPickup_TA* NewPickup );
	void EventSuperSonicChanged ( class ACar_TA* Car );
	void EventLanded ( class ACar_TA* Car );
	void EventHitBall ( class ACar_TA* Car, class ABall_TA* Ball );
	void EventTeamPaintChanged ( class ACar_TA* Car );
	void EventTeamSet ( class ACar_TA* Car );
	void EventDemolished ( class ACar_TA* Victim, struct FDemolishData Data );
	void EventBumpedCar ( class ACar_TA* Car, class ACar_TA* HitCar );
	void EventVehicleSetup ( class ACar_TA* Car );
};

UClass* ACar_TA::pClassPointer = NULL;

// Class TAGame.AchievementManager_TA
// 0x0338 (0x0390 - 0x0058)
class UAchievementManager_TA : public UTickableStateObject_X
{
public:
	class APlayerControllerBase_TA*                    PC;                                               		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DLC0Cars;                                         		// 0x005C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             DLC1Cars;                                         		// 0x0068 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             DLC2Cars;                                         		// 0x0074 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             ClassicCars;                                      		// 0x0080 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             DLC2Products;                                     		// 0x008C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredDontLookBackProducts;                     		// 0x0098 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredRideOrDieDecalProducts;                   		// 0x00A4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredRideOrDiePaintProducts;                   		// 0x00B0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredAnInchAnd62MilesProducts;                 		// 0x00BC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             SARPBCArenas;                                     		// 0x00C8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredLevelsToPlay;                             		// 0x00D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UMapSet_TA*                                  RequiredRocketLabsArenas;                         		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             RocketLabsArenaNames;                             		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMapData_TA* >                       BraveTheElementsBaseLevels;                       		// 0x00F0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             RequiredRumbleActivation;                         		// 0x00FC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              MaxBoostTime;                                     		// 0x0108 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxTimeOnWall;                                    		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDriveDistanceKM;                               		// 0x0110 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxHandbrakeRadius;                               		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinHandbrakeDotAngleForComplete;                  		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                DunksScored;                                      		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                LastKMDrivenInt;                                  		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                RocketBoostFills;                                 		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                SpinnerProductID;                                 		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                CristianoProductID;                               		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                TotalDLC0BoostTime;                               		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                GoalsScoredInCurrentGame;                         		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                SavesInCurrentGame;                               		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                AssistsInCurrentGame;                             		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                DLC2PsychoMasterExplodeCount;                     		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                TotalBreakoutGoals;                               		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxRocketBoostFills;                              		// 0x0148 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TotalBreakoutPlatformsToDamage;                   		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TotalDLC0WheelDriveDistanceKM;                    		// 0x0150 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Winner_GameEventsWon;                             		// 0x0154 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SuperVictorious_GameEventsWon;                    		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PitchVeteran_GameEventsPlayed;                    		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PickMeUp_RandomItemDrops;                         		// 0x0160 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                DropsInTheBucket_RandomItemDrops;                 		// 0x0164 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                RidersBlock_GoalSaves;                            		// 0x0168 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Savage_Goals;                                     		// 0x016C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Spectacular_Goals;                                		// 0x0170 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Ruthless_Goals;                                   		// 0x0174 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                RocketGenocider_Goals;                            		// 0x0178 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MadScientist_Maps;                                		// 0x017C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ComingOnStrong_GoalsOrAssists;                    		// 0x0180 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bBoostWasFull : 1;                                		// 0x0184 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPlayerInited : 1;                                		// 0x0184 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHandbrakePressed : 1;                            		// 0x0184 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCheckMinuteToWinIt : 1;                          		// 0x0184 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDidInitialCheckForMinuteToWinIt : 1;             		// 0x0184 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCheckBuzzerBeater : 1;                           		// 0x0184 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDidInitialCheckForBuzzerBeater : 1;              		// 0x0184 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bQualifiesForDLC1Throwback : 1;                   		// 0x0184 (0x0004) [0x0000000000000000] [0x00000080] 
	struct FVector                                     LastCarLocation;                                  		// 0x0188 (0x000C) [0x0000000000000000]              
	struct FVector                                     HandbrakeStartDir;                                		// 0x0194 (0x000C) [0x0000000000000000]              
	struct FVector                                     HandbrakeStartLocation;                           		// 0x01A0 (0x000C) [0x0000000000000000]              
	struct FString                                     WastelandMapName;                                 		// 0x01AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     AquaticMapName;                                   		// 0x01B8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     UtopiaMapName;                                    		// 0x01C4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ArcMapName;                                       		// 0x01D0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       ProductName_Body_GearsCar;                        		// 0x01DC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Body_Import;                          		// 0x01E4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Body_Interceptor;                     		// 0x01EC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Body_MuscleCar;                       		// 0x01F4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Body_Warthog;                         		// 0x01FC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Body_WastelandTruck;                  		// 0x0204 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Boost_Bubble;                         		// 0x020C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Boost_MusicalNotes;                   		// 0x0214 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Hat_Mohawk;                           		// 0x021C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Hat_SharkFin;                         		// 0x0224 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Skin_Scarab_Hearts;                   		// 0x022C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Skin_Zippy_Hearts;                    		// 0x0234 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Wheel_Spinner;                        		// 0x023C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Wheel_SoccerBall;                     		// 0x0244 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ProductName_Hat_Halo;                             		// 0x024C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_BoostTimeMinutes;                        		// 0x0254 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_Certifiable;                             		// 0x025C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_DistanceDrivenKm;                        		// 0x0264 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_ItemCollected;                           		// 0x026C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_LeftWingRightWing;                       		// 0x0274 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_MadScientist;                            		// 0x027C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_MatchComplete;                           		// 0x0284 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_WallTimeMinutes;                         		// 0x028C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_RocketGenocider;                         		// 0x0294 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_BraveTheElements;                        		// 0x029C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_FullCourse;                              		// 0x02A4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_BuckminsterX10;                          		// 0x02AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       StatName_ComingOnStrong;                          		// 0x02B4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       HockeyEventType;                                  		// 0x02BC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class USaveData_TA*                                BaseSaveData;                                     		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UAchievementSave_TA*                         SaveData;                                         		// 0x02C8 (0x0004) [0x0000000000000000]              
	class APRI_TA*                                     LastPRI;                                          		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameInfo_Replay_TA*                         LastGame;                                         		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_TA*                               LastGameEvent;                                    		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     LastCar;                                          		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FGuid                                       PendingTradeGuid;                                 		// 0x02DC (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __EventNewMVPScore__Delegate;                     		// 0x02F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGoalAmountScored__Delegate;                		// 0x0300 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0304 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDrivenDistance__Delegate;                  		// 0x0310 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0314 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventShotAmountBlocked__Delegate;               		// 0x0320 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0324 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEventAmountWon__Delegate;              		// 0x0330 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0334 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventChampionshipAmountChanged__Delegate;       		// 0x0340 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0344 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRandomItemAmountDropped__Delegate;         		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x0354 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRegularSeasonAmountChanged__Delegate;      		// 0x0360 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x0364 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAchievementUnlocked__Delegate;             		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x0374 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatIncremented__Delegate;                 		// 0x0380 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x0384 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59432 ];

		return pClassPointer;
	};

	bool __AchievementManager_TA__CheckAllCarSlotsCustomized ( class UProductSlot_TA* Slot );
	bool __AchievementManager_TA__GetEquippedOnlineProducts ( class UOnlineProduct_TA* P );
	void HandleSkillTierChanged ( class APRI_TA* PRI );
	void HandleTradeInComplete ( class UGFxData_ProductTradeIn_TA* GFxData, TArray< class UOnlineProduct_TA* > Given, TArray< class UOnlineProduct_TA* > Received );
	void HandleTradeComplete ( class UOnlineGameParty_TA* P, class URPC_ProductsTradePlayerStatus_TA* RPC );
	void HandleTradeStart ( class UOnlineGameParty_TA* P, struct FGuid TradeId );
	bool IsTournamentMatch ( );
	bool IsOnlineMatch ( );
	void CheckUnlockGoodTimes ( );
	class UMapData_TA* GetMapData ( );
	unsigned char GetWeatherVariant ( );
	bool IsTurbulentWeather ( );
	bool HasItemQualityEquipped ( unsigned char Quality );
	TArray< class UOnlineProduct_TA* > GetEquippedOnlineProducts ( TArray< class UOnlineProduct_TA* >* MapLocal_29CC99EC46C5ABF05AC404A801B3C376, TArray< class UOnlineProduct_TA* >* FilterLocal_CD93BAFB4A57C93EFE543DAA4CAB8220 );
	void CheckUnlockStormTrooper ( );
	void Save ( );
	bool AddToIntList ( int Number, TArray< int >* Out_IntList );
	bool AddToNameList ( struct FName NewName, TArray< struct FName >* Out_NameList );
	bool AddToStringList ( struct FString NewName, TArray< struct FString >* Out_StringList );
	void ResetTemporaryVaribles ( );
	bool PlayerIsOnATeam ( );
	bool NotifyKeyInput ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	bool UpdateGoalsScoredAgainstBots ( class AGameEvent_TA* GameEvent, int MaxGoals, struct FName RequiredProduct, float BotSkillLevel, int* Out_UpdatedGoals );
	void HandleScoredGoal ( class APRI_TA* PRI, struct FVector BallHitLocation );
	void HandlePlayerDemolished ( class ACar_TA* Victim, struct FDemolishData Data );
	void SetHandbrakeStartData ( );
	bool OtherTeamIsAllBots ( class AGameEvent_TA* GameEvent );
	bool ProductIsInAnyOpponentLoadout ( class AGameEvent_TA* GameEvent, struct FName ProductName );
	bool IsPlayingSnowDay ( class AGameEvent_Soccar_TA* SoccarEvent );
	bool QualifiesForDLC1Throwback ( );
	bool OrginalBattleCarIsInLoadout ( );
	bool DLC1CarIsInLoadout ( );
	void OnBreakoutPlatformDamaged ( int Count );
	void HandleUsedAllMapVotes ( class UProfile_TA* Profile );
	void UpdateBraveTheElementsLevelsPlayed ( );
	void CheckUnlockedBraveTheElements ( );
	void CheckUnlockedDamageControl ( class AGameEvent_Soccar_TA* GameEvent );
	void CheckDLC0PowerSlide ( );
	bool Handbrake180Completed ( );
	int GetTotalProductStats ( TArray< struct FName > ProductNames );
	void CheckDLC0WheelDriveDistance ( );
	void CheckDLC0BoostTime ( );
	void HandleStatsCommited ( class APRI_TA* PRI );
	bool PaintFinishIsInLoadout ( struct FName ProductName );
	bool ProductIsInLoadout ( struct FName ProductName );
	bool IsWearingHat ( );
	bool HasRideOrDieRequiredProducts ( );
	bool PlayingMapOrVariant ( struct FName MapName );
	bool PlayingMap ( struct FString MapName );
	void CheckUnlockedAllGameAchievements ( );
	void CheckAllCarSlotsCustomized ( int ProductID, TArray< class UProductSlot_TA* >* FilterLocal_829B14DB410D1E3DC4ABFCA1336C8985 );
	void HandleReplayStarted ( class AGameInfo_Replay_TA* Game );
	void HandleProductEquipped ( class UProfile_TA* InProfile, int ProductID );
	void HandleProfileSet ( class ULocalPlayer_TA* LocalPlayer );
	bool AllSeasonGamesPlayedWithDLC0Cars ( class AGameEvent_Season_TA* GameEvent );
	void HandleWonChampionship ( class AGameEvent_Season_TA* GameEvent );
	float ConvertUnrealToKM ( float Distance );
	void CheckDriveTime ( );
	void CheckBoosting ( float DeltaTime );
	void CheckWallDriveTime ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void HandleBoostAmountChanged ( class ACarComponent_Boost_TA* Boost );
	void CheckTrainingModesPlayed ( );
	void CheckGameProgress ( );
	void UpdateTrainingModesPlayed ( class AGameEvent_TA* GameEvent );
	bool PlayedAllLevels ( TArray< struct FName >* RequiredLevels );
	void UpdateLevelsPlayed ( );
	void IncrementComingOnStrong ( );
	void HandleStatEvent ( class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count );
	void CheckTrifecta ( );
	void CheckUnlockedCars ( );
	void HandleCertifiedStatRankedUp ( class UProductAttribute_Certified_TA* CertifiedAttribute );
	void HandleNewOnlineProduct ( class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct );
	void HandleNewProductUnlocked ( class USaveData_TA* Data, int ProductID );
	bool IsPlayingWithAFriend ( class AGameEvent_TA* GameEvent, class APRI_TA* NewPlayerPRI );
	bool PlayedAllCars ( TArray< struct FName > CarsToCheck );
	void UpdateCarsPlayed ( );
	void HandleMatchEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void CheckBotTeamsPlayed ( class AGameEvent_Soccar_TA* GameEvent );
	void UpdateBotTeamsPlayed ( class AGameEvent_Soccar_TA* GameEvent );
	void IncrementGames ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleMatchWinnerSet ( class AGameEvent_Soccar_TA* GameEvent );
	void HandlePlayerCarSet ( class APRI_TA* PRI );
	void HandleNewPlayerAdded ( class AGameEvent_TA* GameEvent, class APRI_TA* PRI );
	void HandleOvertimeUpdated ( class AGameEvent_Soccar_TA* GameEvent );
	bool GameEventHasPlayers ( class AGameEvent_TA* GameEvent );
	bool IsTiedOrTrailingOtherTeam ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleGameTimeUpdated ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleCarAddComponent ( class UObject* O );
	void SetupDriftKingForUnlock ( );
	void InitCar ( );
	void HandlePickupActivated ( class ACar_TA* InCar, class ASpecialPickup_TA* ActivatedPickup );
	void CheckAllRumbleActivations ( class ASpecialPickup_TA* ActivatedPickup );
	struct FName GetRumbleItemName ( class ASpecialPickup_TA* Pickup );
	void HandleCarSet ( class APRI_TA* InPRI );
	void HandleTeamChanged ( class APRI_X* InPRI );
	void HandleGameEventChanged ( class APRI_TA* PRI );
	void UpdatePRI ( class APRI_TA* PRI );
	void HandleReceivedPRI ( class APlayerController_X* InPC );
	void SetBaseSaveData ( class USaveData_TA* MySaveData );
	void HandleBaseSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error );
	void HandlePlayerReceived ( class APlayerController_X* InPC );
	void Init ( class APlayerControllerBase_TA* InPC );
	void SyncPS4Achievements ( TArray< unsigned long > SyncedAchievements );
	void CheckPS4AchievementsSynced ( );
	void SyncSteamAchievements ( int TitleId );
	void OnFirstExecution ( );
	void IncrementStat ( int AchievementId, int Progress );
	bool AchievementTypeExistsOnPlatform ( unsigned char AchievementType );
	int GetAchievementTypeMax ( unsigned char AchievementType );
	int GetAchievementIconID ( int InAchievementID, unsigned char AchievementType );
	void GetAchievementIDAndType ( int ActualAchievementID, int* Out_AchievementID, unsigned char* Out_AchievementType );
	int GetActualAchievementID ( int InAchievementID, unsigned char AchievementType );
	bool HasUnlockAuthority ( struct FAchievementInfo AchievementData );
	struct FAchievementInfo GetAchievementInfo ( int AchievementId, unsigned char AchievementType );
	bool IsUnlocked ( int AchievementId, unsigned char AchievementType, unsigned long bIgnoreAuthority );
	void SetAchievementUnlocked ( int AchievementId, unsigned char AchievementType, unsigned long bUnlocked );
	void UnlockAchievement ( int AchievementId, unsigned char AchievementType, unsigned long bIgnoreAuthority );
	void HandleServerUnlockedAchievement ( class APRI_TA* PRI, int AchievementId, unsigned char AchievementType );
	void EventStatIncremented ( class UAchievementManager_TA* Manager );
	void EventAchievementUnlocked ( class UAchievementManager_TA* Manager, int AchievementId, unsigned char AchievementType );
	void EventRegularSeasonAmountChanged ( class UAchievementManager_TA* Manager, int Amount );
	void EventRandomItemAmountDropped ( class UAchievementManager_TA* Manager, int Amount );
	void EventChampionshipAmountChanged ( class UAchievementManager_TA* Manager, int Wins );
	void EventGameEventAmountWon ( class UAchievementManager_TA* Manager, int GamesWon );
	void EventShotAmountBlocked ( class UAchievementManager_TA* Manager, int bLocked );
	void EventDrivenDistance ( class UAchievementManager_TA* Manager, float Distance );
	void EventGoalAmountScored ( class UAchievementManager_TA* Manager, int Score );
	void EventNewMVPScore ( class UAchievementManager_TA* Manager, int Score );
};

UClass* UAchievementManager_TA::pClassPointer = NULL;

// Class TAGame.GameInfoBase_TA
// 0x0010 (0x0420 - 0x0410)
class AGameInfoBase_TA : public AGameInfo_X
{
public:
	TArray< class UGFxSoundPack_X* >                   SoundPacks;                                       		// 0x0410 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMusicTheme_TA*                              MusicTheme;                                       		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59489 ];

		return pClassPointer;
	};

	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
};

UClass* AGameInfoBase_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Replay_TA
// 0x003C (0x045C - 0x0420)
class AGameInfo_Replay_TA : public AGameInfoBase_TA
{
public:
	class UReplay_TA*                                  Replay;                                           		// 0x0420 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevTime;                                         		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplayStartTime;                                  		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ReplayKismetLevelName;                            		// 0x0430 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventReplayStarted__Delegate;                   		// 0x043C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0440 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEventSet__Delegate;                    		// 0x044C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0450 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59488 ];

		return pClassPointer;
	};

	void HandleReplayTimeSkip ( class UReplay_TA* InReplay );
	void TriggerTimeEvents ( );
	void OnLoadReplayCancel ( class UGFxModal_X* Modal );
	void OnLoadReplayRetry ( class UGFxModal_X* Modal );
	void HandleReplayImportError ( class UReplay_TA* InReplay, class UError* Error );
	void eventTick ( float DeltaTime );
	void HandleReplayActorSpawned ( class UReplay_TA* InReplay, class AActor* A );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void HandleReplayImported ( class UReplayManager_TA* Manager, class UReplay_TA* InReplay, class UError* Error );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void EventGameEventSet ( class AGameInfo_Replay_TA* Game );
	void EventReplayStarted ( class AGameInfo_Replay_TA* Game );
};

UClass* AGameInfo_Replay_TA::pClassPointer = NULL;

// Class TAGame.AchievementSave_TA
// 0x0274 (0x02B0 - 0x003C)
class UAchievementSave_TA : public UObject
{
public:
	struct FAchievementInfo                            Achievements[ 0x24 ];                             		// 0x003C (0x0090) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_EXP0[ 0x3 ];                         		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC0[ 0x6 ];                         		// 0x00D8 (0x0018) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC1[ 0x5 ];                         		// 0x00F0 (0x0014) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC2[ 0x5 ];                         		// 0x0104 (0x0014) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_XBO0[ 0x2 ];                         		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC3[ 0x8 ];                         		// 0x0120 (0x0020) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC4[ 0x7 ];                         		// 0x0140 (0x001C) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC5[ 0x6 ];                         		// 0x015C (0x0018) [0x0000000000000000]              
	struct FAchievementInfo                            Achievements_DLC6[ 0x6 ];                         		// 0x0174 (0x0018) [0x0000000000000000]              
	TArray< struct FString >                           BotTeamsPlayed;                                   		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           TrainingModesPlayed;                              		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             LevelsPlayed;                                     		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             LabsMapsPlayed;                                   		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             CarsPlayed;                                       		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             RumbleItemsActivated;                             		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             BraveTheElementsLevelsPlayed;                     		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TotalBoostTime;                                   		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              TotalTimeOnWall;                                  		// 0x01E4 (0x0004) [0x0000000000000000]              
	float                                              TotalDriveDistanceKM;                             		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                GoalShotsAny;                                     		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                GoalShots;                                        		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                GoalSaves;                                        		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                SavageGoals;                                      		// 0x01F8 (0x0004) [0x0000000000000000]              
	int                                                GameEventsWon;                                    		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                GamesWonInARow;                                   		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                GameEventsPlayed;                                 		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                SpectacularGoals;                                 		// 0x0208 (0x0004) [0x0000000000000000]              
	int                                                TotalScoredGoals;                                 		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                TotalShotsBlocked;                                		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                RandomItemsDropped;                               		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                HighestMVPScore;                                  		// 0x0218 (0x0004) [0x0000000000000000]              
	int                                                ChampionshipsWon;                                 		// 0x021C (0x0004) [0x0000000000000000]              
	int                                                RegularSeasonsCompleted;                          		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                HighestRecordedCertifiedRank;                     		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                BreakoutGoals;                                    		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                BreakoutPlatformsDamaged;                         		// 0x022C (0x0004) [0x0000000000000000]              
	unsigned long                                      bPowerSlideCristianoCompleted : 1;                		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPowerSlideSpinnerCompleted : 1;                  		// 0x0230 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRideOrDieDominusCompleted : 1;                   		// 0x0230 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRideOrDieTakumiCompleted : 1;                    		// 0x0230 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bResetWinningIsWinningSeasonList : 1;             		// 0x0230 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FName >                             CustomizedSlotNames;                              		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    CheckDistancesDrivenKM;                           		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CheckScoredGoals;                                 		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CheckShotsBlocked;                                		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CheckGameEventsWon;                               		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CheckRandomItemsDropped;                          		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      LeftWingRightWingTeamsPlayed;                     		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned long >                            WinningIsWinningPlayedWithDLC0Cars;               		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ExhibitionMatchesPlayed;                          		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                RankedMatchesPlayed;                              		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                UnrankedMatchesPlayed;                            		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                PrivateMatchesPlayed;                             		// 0x02A0 (0x0004) [0x0000000000000000]              
	int                                                ReplayEditorOpened;                               		// 0x02A4 (0x0004) [0x0000000000000000]              
	int                                                CreditsViewed;                                    		// 0x02A8 (0x0004) [0x0000000000000000]              
	int                                                GoalsOrAssists;                                   		// 0x02AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59492 ];

		return pClassPointer;
	};

	void Reconcile ( class UAchievementSave_TA* Other );
};

UClass* UAchievementSave_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_TA
// 0x02BC (0x07C8 - 0x050C)
class AGameEvent_Soccar_TA : public AGameEvent_Team_TA
{
public:
	class ACar_TA*                                     TestCarArchetype;                                 		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABall_TA*                                    BallArchetype;                                    		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGoalIndicator_TA*                           GoalIndicatorArchetype;                           		// 0x0514 (0x0004) [0x0000000000000000]              
	class AActor*                                      BallSpawnPoint;                                   		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AStatFactory_TA*                             StatFactoryArchetype;                             		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialEventState;                                		// 0x0520 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SeriesLength;                                     		// 0x0528 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                GameTime;                                         		// 0x052C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                WarmupTime;                                       		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxScore;                                         		// 0x0534 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AutoBalanceDifference;                            		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           ScoreSlomoCurve;                                  		// 0x053C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastTrialTime;                                    		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScoreSlomoTime;                                   		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GameTimeRemaining;                                		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SecondsRemaining;                                 		// 0x055C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              TotalGameTimePlayed;                              		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMessage_TA*                                 GoalScoredMessage;                                		// 0x0564 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 OvertimeMessage;                                  		// 0x0568 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 OneMinRemainingMessage;                           		// 0x056C (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 ThirtySecondsRemainingMessage;                    		// 0x0570 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 StopMessage;                                      		// 0x0574 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 GamePausedMessage;                                		// 0x0578 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 GameUnPausedMessage;                              		// 0x057C (0x0004) [0x0000000000000000]              
	unsigned long                                      bRoundActive : 1;                                 		// 0x0580 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlayReplays : 1;                                 		// 0x0580 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBallHasBeenHit : 1;                              		// 0x0580 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bOverTime : 1;                                    		// 0x0580 (0x0004) [0x0000000000002020] [0x00000008] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUnlimitedTime : 1;                               		// 0x0580 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPlayedGameStartMusic : 1;                        		// 0x0580 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bKickOnTrialEnd : 1;                              		// 0x0580 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bNoContest : 1;                                   		// 0x0580 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bDisableGoalDelay : 1;                            		// 0x0580 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bDisableSpawnInRedZone : 1;                       		// 0x0580 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bShowNoScorerGoalMessage : 1;                     		// 0x0580 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bMatchEnded : 1;                                  		// 0x0580 (0x0004) [0x0000000000002020] [0x00000800] ( CPF_Net | CPF_Transient )
	int                                                NextSpawnIndex;                                   		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AReplayDirector_TA*                          ReplayDirectorArchetype;                          		// 0x0588 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AReplayDirector_TA*                          ReplayDirector;                                   		// 0x058C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class ABall_TA* >                          GameBalls;                                        		// 0x0590 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TotalGameBalls;                                   		// 0x059C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostGoalTime;                                     		// 0x05A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AStatFactory_TA*                             StatFactory;                                      		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGoal_TA* >                          Goals;                                            		// 0x05A8 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                SecondsRemainingCountdown;                        		// 0x05B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMessage_TA*                                 SecondsRemainingMessage;                          		// 0x05B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FieldCenter;                                      		// 0x05BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ATeam_TA*                                    GameWinner;                                       		// 0x05C8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ATeam_TA*                                    MatchWinner;                                      		// 0x05CC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APRI_TA*                                     MVP;                                              		// 0x05D0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class APRI_TA*                                     FastestGoalPlayer;                                		// 0x05D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     SlowestGoalPlayer;                                		// 0x05D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     FurthestGoalPlayer;                               		// 0x05DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FastestGoalSpeed;                                 		// 0x05E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlowestGoalSpeed;                                 		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FurthestGoal;                                     		// 0x05E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ReplicatedScoredOnTeam;                           		// 0x05EC (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RoundNum;                                         		// 0x05F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FReplicatedStingerData                      ReplicatedMusicStinger;                           		// 0x05F4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UAkSoundCue*                                 InGameMusicCue;                                   		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 TrainingRoundEndCue;                              		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KickIdleReplayOffset;                             		// 0x0604 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AssistMaxTime;                                    		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMatchRecorder_X*                            MatchRecorderArchetype;                           		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMatchRecorder_X*                            MatchRecorder;                                    		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallHasBeenHitStartDelay;                         		// 0x0614 (0x0004) [0x0000000000000000]              
	float                                              LowFPSRate;                                       		// 0x0618 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowFPSTimeThreshold;                              		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LowFPSTime;                                       		// 0x0620 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGameEvent_Soccar_SubRules_TA*               DefaultSubRules;                                  		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameEvent_Soccar_SubRules_TA*               SubRulesArchetype;                                		// 0x0628 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UGameEvent_Soccar_SubRules_TA*               SubRules;                                         		// 0x062C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USpawnPointCluster_TA*                       SpawnPointsPodium;                                		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              PodiumDelay;                                      		// 0x0634 (0x0004) [0x0000000000000000]              
	float                                              PodiumTime;                                       		// 0x0638 (0x0004) [0x0000000000000000]              
	class USpawnPointCluster_TA*                       SpawnPointsLobby;                                 		// 0x063C (0x0004) [0x0000000000000000]              
	int                                                LobbyEndCountdown;                                		// 0x0640 (0x0004) [0x0000000000000000]              
	int                                                LobbyCountdown;                                   		// 0x0644 (0x0004) [0x0000000000000000]              
	float                                              LobbyTime;                                        		// 0x0648 (0x0004) [0x0000000000000000]              
	int                                                LobbySpawnRestartTime;                            		// 0x064C (0x0004) [0x0000000000000000]              
	TArray< class UStatCategory_TA* >                  StatCategories;                                   		// 0x0650 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABall_Trajectory_TA*                         BallTrajectory;                                   		// 0x065C (0x0004) [0x0000000000000000]              
	class ABall_Trajectory_TA*                         BallTrajectoryArchetype;                          		// 0x0660 (0x0004) [0x0000000000000000]              
	class UCountdownObject_TA*                         UnpauseCountdown;                                 		// 0x0664 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerController_TA*                        Pauser;                                           		// 0x0668 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SoundScoreStatus;                                 		// 0x066C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SoundGameState;                                   		// 0x0674 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FOnlinePlayerMatchData >            PlayerMatchData;                                  		// 0x067C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMatchBroadcastComponent_TA*                 MatchBroadcast;                                   		// 0x0688 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UGameObserver_TA*                            GameObserver;                                     		// 0x068C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFpsBucketRecorder_TA*                       FpsRecorder;                                      		// 0x0690 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMatchSeries_TA*                             MatchSeries;                                      		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __EventActiveRoundChanged__Delegate;              		// 0x0698 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x069C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStartNewRound__Delegate;                   		// 0x06A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x06AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBallAdded__Delegate;                       		// 0x06B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x06BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBallRemoved__Delegate;                     		// 0x06C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x06CC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFirstBallHit__Delegate;                    		// 0x06D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x06DC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGoalScored__Delegate;                      		// 0x06E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x06EC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameTimeUpdated__Delegate;                 		// 0x06F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x06FC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOvertimeUpdated__Delegate;                 		// 0x0708 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x070C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEnded__Delegate;                       		// 0x0718 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x071C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchEnded__Delegate;                      		// 0x0728 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x072C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventEndGameCountDown__Delegate;                		// 0x0738 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x073C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOverStingerWin__Delegate;              		// 0x0748 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x074C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOverStingerLose__Delegate;             		// 0x0758 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData12[ 0x4 ];                             		// 0x075C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOverStingerForfeit__Delegate;          		// 0x0768 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData13[ 0x4 ];                             		// 0x076C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReplayDirectorSet__Delegate;               		// 0x0778 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData14[ 0x4 ];                             		// 0x077C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchWinnerSet__Delegate;                  		// 0x0788 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData15[ 0x4 ];                             		// 0x078C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerScored__Delegate;                    		// 0x0798 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData16[ 0x4 ];                             		// 0x079C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReplicatedGoalScored__Delegate;            		// 0x07A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData17[ 0x4 ];                             		// 0x07AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatFactoryInitialized__Delegate;          		// 0x07B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData18[ 0x4 ];                             		// 0x07BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59632 ];

		return pClassPointer;
	};

	struct FFPSBucketMetrics __GameEvent_Soccar_TA__ReportFps ( struct FFpsBucketData Bucket, struct FFPSBucketMetrics* StructInitializer_BF23B575405D72D7CC5379B866F6CBCA );
	void HandleTrajectoryEnabledChanged ( class ABall_TA* InBall );
	void DestroyBallTrajectory ( );
	void AddBallTrajectory ( );
	void GetPresenceStatus ( struct FString* Out_PresenceString, struct FString* Out_GameDataString );
	bool ShowScorerGoalMessage ( );
	bool CanUseBallCam ( );
	bool RestartPlayer ( class AController* NewPlayer );
	void HandleCarDemolished ( class ACar_TA* Car, struct FDemolishData Data );
	bool DisableStatXP ( );
	void SetDisableSpawnInRedZone ( unsigned long bInDisableSpawnInRedZone );
	void SetDisableGoalDelay ( unsigned long bInDisableGoalDelay );
	void ForceMatchStart ( );
	void RemoveLocalPlayer ( class APlayerController_TA* Player );
	void AddLocalPlayer ( class APlayerController_TA* Player );
	void DestroyGoalIndicators ( class APlayerController_TA* Player );
	class AGoalIndicator_TA* SpawnGoalIndicator ( class APlayerController_TA* Player, class UGoal_TA* Goal, class AActor* OrientationActor );
	void CreateGoalIndicators ( class APlayerController_TA* Player );
	class APlayerController_TA* GetLocalPrimaryPlayer ( );
	bool CheckTrialEnded ( );
	void HandleMatchCompleteDataReceived ( class URPC_MatchComplete_TA* RPC );
	void BeginHighlightsReplay ( );
	bool ShouldAllowVoteToForfeit ( );
	bool ShouldHaveLeaveMatchPenalty ( );
	void RemovePlayer ( class AController* Player );
	void HandleUnpauseTimer ( class UCountdownObject_TA* CountdownObject, int CountValue );
	void SetPaused ( class APlayerController_TA* InPauser, unsigned long bInPaused );
	bool ShouldCountdownResumeFromPause ( );
	void SetScoreAndTime ( class APlayerController_TA* PC, int NewScoreTeam0, int NewScoreTeam1, int InGameTimeRemaining, unsigned long bInOvertime, unsigned long bRestartRound );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void SaveLocalPlayerStats ( );
	bool ShouldPlayReplay ( );
	bool ShouldRecordReplay ( );
	void OnBallHasBeenHit ( );
	class ABall_TA* SpawnBall ( struct FVector SpawnLoc, unsigned long bWake, unsigned long bSpawnCannon, struct FString BallArch );
	struct FName GetScoreStatus ( unsigned char TeamNum );
	void UpdateSoundScoreStatus ( );
	void UpdateSoundState ( );
	int GetTotalScore ( );
	struct FName GetDesiredSoundState ( );
	void HandleCarSet ( class APRI_TA* InPRI );
	void RemovePRI ( class APRI_TA* PRI );
	void AddPRI ( class APRI_TA* PRI );
	void PlayGameStartMusic ( );
	void RemovePlayerFromTeam ( class AController* Player );
	void AddPlayerToTeam ( class ATeam_TA* NewTeam, class AController* NewPlayer );
	class ATeam_TA* PickTeamForSeries ( class AController* C );
	class ATeam_TA* PickTeam ( class AController* C );
	bool AutoSelectTeam ( class AController* C );
	void PlayGoalScoredSounds ( );
	void ReplicateGoalScoreStinger ( );
	void OnMatchWinnerSet ( );
	void PlayGameOverStinger ( );
	void StopInGameMusic ( );
	void StartInGameMusic ( );
	void PlayMusicStinger ( class UAkSoundCue* Stinger );
	void ClearReplicatedMusicStinger ( );
	void ReplicateMusicStinger ( class UAkSoundCue* Stinger );
	class APRI_TA* GetMVP ( class ATeam_TA* WinningTeam, TArray< class APRI_TA* >* SortLocal_36D70877431261F702F0CA8D1B218B4D );
	int MVPSort ( class APRI_TA* A, class APRI_TA* B );
	void HandleHitGoal ( class ABall_TA* Ball, class UGoal_TA* Goal );
	void ClearReplicatedScoredOnTeam ( );
	void TriggerScoreChangedEvent ( );
	void HandleScoreUpdated ( class ATeam_TA* Team );
	void OnAllTeamsCreated ( );
	void TriggerGoalScoreEvent ( int TeamScoredOn, class ACar_TA* Scorer );
	bool CanAwardAchievements ( );
	bool AllowScoreboard ( );
	void SetTotalGameBalls ( int TotalBalls );
	void RecordRecentPlayers ( );
	void UpdateStats ( );
	void AddStatData ( struct FName StatId, struct FUniqueNetId PlayerID, int Value, TArray< struct FUploadStatDataSet >* DataSet );
	void NotifyKismetOfCurrentTime ( );
	void OnGameTimeUpdated ( );
	void OnOvertimeUpdated ( );
	void ForceOvertime ( );
	void StartOvertime ( );
	bool OnMyHalf ( struct FVector TestLocation, unsigned char TeamNum );
	bool InGoalZone ( struct FVector TestLocation );
	class ATeam_TA* GetWinningTeam ( );
	void ResetPickups ( );
	void ResetPlayers ( );
	void OnBallSpawned ( class ABall_TA* NewBall );
	void ResetBalls ( );
	void DestroyCars ( );
	void FreezePawns ( );
	void DestroyBalls ( );
	void RemoveGameBall ( class ABall_TA* Ball );
	void AddGameBall ( class ABall_TA* Ball );
	void StartNewRound ( );
	void CheckForAutoBalance ( );
	bool HasWinner ( );
	void CheckForForfeit ( class AController* RemovedPlayer, class ATeam_TA* Team );
	void SubmitSkillMatch ( );
	void SubmitMatch ( );
	void CommitPlayerMatchData ( class APRI_TA* PRI, unsigned long bCompletedMatch );
	void SubmitMatchComplete ( );
	void GenerateItemDrops ( );
	void OnMatchEnded ( );
	bool ShouldDoPodiumSpotlight ( );
	void SubmitChallengePlayedGame ( );
	struct FName GetEndMatchState ( );
	void EndGame ( );
	void StartNewGame ( );
	void ResetGame ( );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
	void HandleGaveStat ( class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim );
	void ReportFps ( class UFpsBucketRecorder_TA* Recorder, TArray< struct FFPSBucketMetrics >* MapLocal_3694660F4C3495DD3E5EB5B174A7F3D7 );
	void eventDestroyed ( );
	void InitCrowdManager ( );
	void InitField ( );
	void InitGameObserver ( );
	void InitMatchRecorder ( );
	void OnInit ( );
	void InitMutators ( );
	void InitGame ( struct FString Options );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventStatFactoryInitialized ( class AGameEvent_Soccar_TA* GameEvent );
	void EventReplicatedGoalScored ( class AGameEvent_Soccar_TA* GameEvent, unsigned char ScoredOnTeam );
	void EventPlayerScored ( class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer );
	void EventMatchWinnerSet ( class AGameEvent_Soccar_TA* GameEvent );
	void EventReplayDirectorSet ( class AGameEvent_Soccar_TA* GameEvent );
	void EventGameOverStingerForfeit ( class AGameEvent_Soccar_TA* GameEvent );
	void EventGameOverStingerLose ( class AGameEvent_Soccar_TA* GameEvent );
	void EventGameOverStingerWin ( class AGameEvent_Soccar_TA* GameEvent );
	void EventEndGameCountDown ( class AGameEvent_Soccar_TA* GameEvent, int TimeRemaining );
	void EventMatchEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void EventGameEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void EventOvertimeUpdated ( class AGameEvent_Soccar_TA* GameEvent );
	void EventGameTimeUpdated ( class AGameEvent_Soccar_TA* GameEvent );
	void EventGoalScored ( class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx );
	void EventFirstBallHit ( class AGameEvent_Soccar_TA* GameEvent );
	void EventBallRemoved ( class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball );
	void EventBallAdded ( class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball );
	void EventStartNewRound ( class AGameEvent_Soccar_TA* GameEvent );
	void EventActiveRoundChanged ( class AGameEvent_Soccar_TA* GameEvent );
};

UClass* AGameEvent_Soccar_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Season_TA
// 0x0080 (0x0848 - 0x07C8)
class AGameEvent_Season_TA : public AGameEvent_Soccar_TA
{
public:
	int                                                PreMatchTime;                                     		// 0x07C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USeason_TA*                                  Season;                                           		// 0x07CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSeasonMatch                                Match;                                            		// 0x07D0 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x07EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATeam_TA*                                    HumanTeam;                                        		// 0x07F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATeam_TA*                                    BotTeam;                                          		// 0x07F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HumanMatchTeam;                                   		// 0x07F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BotMatchTeam;                                     		// 0x07FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SeasonIntroTime;                                  		// 0x0800 (0x0004) [0x0000000000000000]              
	class AScreenDisplayActor_TA*                      ChampionshipTrophyArchetype;                      		// 0x0804 (0x0004) [0x0000000000000000]              
	class UAkSoundCue*                                 ChampionshipTrophySound;                          		// 0x0808 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsChampionShipGame : 1;                          		// 0x080C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsFirstGameOfSeason : 1;                         		// 0x080C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bLastGameOfRegularSeason : 1;                     		// 0x080C (0x0004) [0x0000000000000000] [0x00000004] 
	class USimilarSeasonLogos_TA*                      SimilarLogoGroups;                                		// 0x0810 (0x0004) [0x0000000000000000]              
	struct FString                                     TeamOverrides[ 0x2 ];                             		// 0x0814 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UProductAsset_TA* >                  PreloadedBotProducts;                             		// 0x082C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventWonChampionShip__Delegate;                 		// 0x0838 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x083C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59631 ];

		return pClassPointer;
	};

	void BeginHighlightsReplay ( );
	void OnMatchWinnerSet ( );
	bool GiveExtraXP ( );
	bool AllowSplitScreenPlayer ( );
	void CheckTeamOverride ( int TeamIdx, struct FSeasonTeam* TeamData );
	bool IsLastRegularGameOfSeason ( );
	bool IsFirstGameOfSeason ( );
	bool IsChampionshipGame ( );
	void SpawnChampionshipTrophy ( );
	void StartGame ( );
	void SaveSeasonStats ( );
	bool ShouldSwapBotColors ( class UProductAsset_Logo_TA* PlayerLogo, class UProductAsset_Logo_TA* BotLogo );
	class UProductAsset_Bot_TA* ChooseBotAsset ( class AAIController_TA* Bot );
	void InitSeasonTeams ( );
	void OnAllTeamsCreated ( );
	void AssignCustomTeamSettings ( );
	class ATeam_TA* PickTeam ( class AController* C );
	void ToggleDropTimers ( unsigned long bEnableTimers );
	void PreloadBots ( );
	void OnInit ( );
	void InitGame ( struct FString Options );
	void UpdateStats ( );
	void EventWonChampionShip ( class AGameEvent_Season_TA* GameEvent );
};

UClass* AGameEvent_Season_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_TA
// 0x0018 (0x0438 - 0x0420)
class AGameInfo_TA : public AGameInfoBase_TA
{
public:
	unsigned long                                      bShutdownQueued : 1;                              		// 0x0420 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShuttingDown : 1;                                		// 0x0420 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class AGameEvent_TA*                               CurrentGame;                                      		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventGameInitialized__Delegate;                 		// 0x0428 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x042C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59660 ];

		return pClassPointer;
	};

	void StartGameEvent ( struct FGameEventData GameData );
	bool AllowPausing ( class APlayerController* PC );
	class UGameMode_TA* GetGameMode ( );
	bool AtCapacity ( unsigned long bSpectator );
	void HandleTimeDilationChanged ( class AWorldInfo* WI );
	void RestartLevel ( );
	void NotifyClientsServerShutdown ( );
	void StartShutdown ( );
	void QueueShutdown ( );
	void ShutdownGame ( );
	struct FVector GetGoodSpawnPointNear ( class AActor* A, struct FVector PossibleLoc );
	void RestartPlayer ( class AController* NewPlayer );
	void GenericPlayerInitialization ( class AController* C );
	void eventAddDefaultInventory ( class APawn* P );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	struct FString GetFakePlayerName ( class AController* Other );
	void Logout ( class AController* Exiting );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UIOnlineGameHost_X* GetOnlineGameHost ( );
	void EventGameInitialized ( class AGameInfo_TA* Game );
};

UClass* AGameInfo_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Soccar_TA
// 0x000C (0x0444 - 0x0438)
class AGameInfo_Soccar_TA : public AGameInfo_TA
{
public:
	TArray< struct FGameEventData >                    GameEventArchetypes;                              		// 0x0438 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59659 ];

		return pClassPointer;
	};

	bool HasMoreThanOneRemotePlayer ( );
	void KickAllPlayers ( struct FString Reason );
	void RestartLevel ( );
	void RestartPlayer ( class AController* aPlayer );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	void HandleNewDedicatedServerForPlayers ( struct FString IP );
	void QueueShutdown ( );
	void RestartGameEvent ( );
	bool IsGameEventType ( struct FString LaunchOption, class UObject* Archetype );
	void HandleMainEventDestroyed ( class AGameEvent_TA* GameEvent );
	void OnCreateCurrentGame ( );
	void InitGameEvent ( class AGameEvent_TA* GameEventArchetype, unsigned long bAddAllPlayers );
	void StartGameEvent ( struct FGameEventData GameData );
	void StartGameEventFromLaunchOption ( struct FString LaunchOption );
	void StartDefaultGameEvent ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage );
	void eventPostBeginPlay ( );
};

UClass* AGameInfo_Soccar_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Basketball_TA
// 0x0000 (0x0444 - 0x0444)
class AGameInfo_Basketball_TA : public AGameInfo_Soccar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59658 ];

		return pClassPointer;
	};

};

UClass* AGameInfo_Basketball_TA::pClassPointer = NULL;

// Class TAGame.Profile_TA
// 0x0464 (0x04A0 - 0x003C)
class UProfile_TA : public UObject
{
public:
	int                                                LocalID;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     ProfileName;                                      		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USaveData_TA*                                SaveData;                                         		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ControllerId;                                     		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInvertSwivelPitch : 1;                           		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInvertSpectatorPitch : 1;                        		// 0x0054 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPrefersSecondaryCamera : 1;                      		// 0x0054 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bToggleSecondaryCamera : 1;                       		// 0x0054 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bToggleRearCamera : 1;                            		// 0x0054 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFreecam : 1;                                     		// 0x0054 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEnableHorizontalSplitscreen : 1;                 		// 0x0054 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEnableForceFeedback : 1;                         		// 0x0054 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bEnableCameraShake : 1;                           		// 0x0054 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bMetric : 1;                                      		// 0x0054 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bMuteStatEvents : 1;                              		// 0x0054 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bDisableDivisions : 1;                            		// 0x0054 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDisableContainerNotifications : 1;               		// 0x0054 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bShouldRandomizeLoadoutEachGame : 1;              		// 0x0054 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bDisableCrossPlay : 1;                            		// 0x0054 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bLockSpecatorBallCam : 1;                         		// 0x0054 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPushToTalk : 1;                                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bUseBallIndicator : 1;                            		// 0x0054 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bUseTeamIndicator : 1;                            		// 0x0054 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bUseBallCamIndicator : 1;                         		// 0x0054 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAlternateNameplates : 1;                         		// 0x0054 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAlwaysShowNameplates : 1;                        		// 0x0054 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bLoadoutsInitialized : 1;                         		// 0x0054 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x0054 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bBallTrajectoryEnabled : 1;                       		// 0x0054 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bInGameTipsEnabled : 1;                           		// 0x0054 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bAirPitchSafetyEnabled : 1;                       		// 0x0054 (0x0004) [0x0000000000000000] [0x04000000] 
	class UControlPreset_X*                            ControlPreset;                                    		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ControlsPresetName;                               		// 0x005C (0x0008) [0x0000000000000000]              
	TArray< struct FPlayerBinding >                    PCBindings;                                       		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerBinding >                    GamepadBindings;                                  		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerBinding >                    ActivePCBindings;                                 		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPlayerBinding >                    ActiveGamepadBindings;                            		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MouseSensitivity;                                 		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              ControllerDeadzone;                               		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              MouseXDeadZone;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              MouseYDeadZone;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              MouseXDeadZoneAir;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              MouseYDeadZoneAir;                                		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              KeyboardAxisBlendTime;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              DodgeInputThreshold;                              		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              SteeringSensitivity;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              AirControlSensitivity;                            		// 0x00B8 (0x0004) [0x0000000000000000]              
	class ULoadout_TA*                                 Loadout;                                          		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class ULoadoutSet_TA* >                    LoadoutSets;                                      		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ULoadoutSet_TA*                              EquippedLoadoutSet;                               		// 0x00CC (0x0004) [0x0000000000000000]              
	struct FName                                       PlayerTitle;                                      		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UPlayerBannerSave_TA*                        PlayerBannerData;                                 		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned char                                      MatchmakingViewTab;                               		// 0x00DC (0x0001) [0x0000000000000000]              
	TArray< struct FName >                             QuickMatchPlaylists;                              		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           QuickMatchRegions;                                		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CustomMatchRegion;                                		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCustomMatchSettings                        CustomMatchSettings;                              		// 0x0104 (0x0060) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FCustomMatchSettings                        PrivateMatchSettings;                             		// 0x0164 (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCustomMatchSettings                        SplitscreenMatchSettings;                         		// 0x01C4 (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCustomMatchSettings                        ServerBrowserSettings;                            		// 0x0224 (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FKeyValuePair >                     CustomMatchGameTags;                              		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGameTags_TA* >                      GameTags;                                         		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PreviewTeamIndex;                                 		// 0x029C (0x0004) [0x0000000000000000]              
	struct FProfileCameraSettings                      Camera;                                           		// 0x02A0 (0x001C) [0x0000000000000000]              
	struct FProfileAutoCamSettings                     AutoCam;                                          		// 0x02BC (0x0028) [0x0000000000000000]              
	struct FString                                     BugReportEmail;                                   		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TimeFormat;                                       		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USeason_TA* >                        Seasons;                                          		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FStatValue >                        StatValues;                                       		// 0x0308 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FProductStat >                      ProductStats;                                     		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalXP;                                          		// 0x0320 (0x0004) [0x0000000000000000]              
	class UTutorialSave_TA*                            Tutorial;                                         		// 0x0324 (0x0004) [0x0000000000000000]              
	TArray< struct FUISavedKeyValue >                  UISavedValues;                                    		// 0x0328 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineProfile_TA*                           OnlineProfile;                                    		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             QuickChatBindings;                                		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ProfileVersion;                                   		// 0x0344 (0x0004) [0x0000000000000000]              
	TArray< struct FPlaylistMapPrefs >                 MapPrefs;                                         		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentLevel;                                     		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    XPGainPercentage;                                 		// 0x0358 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                EditLoadoutSetIndex;                              		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AimAssistLevelOverride;                           		// 0x0368 (0x0004) [0x0000000000000000]              
	int                                                MaxAimAssistLevelOverride;                        		// 0x036C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventXPInitialized__Delegate;                   		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0374 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventXPUpdated__Delegate;                       		// 0x0380 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0384 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCrossPlayChanged__Delegate;                		// 0x0390 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0394 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventQuickChatBindingsChanged__Delegate;        		// 0x03A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x03A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                 		// 0x03B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x03B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreEquipProductToLoadouts__Delegate;       		// 0x03C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x03C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;           		// 0x03D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x03D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventEquippedLoadoutChanged__Delegate;          		// 0x03E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x03E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreviewTeamChanged__Delegate;              		// 0x03F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x03F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLoadoutSetsChanged__Delegate;              		// 0x0400 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x0404 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventActiveBindingsChanged__Delegate;           		// 0x0410 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x0414 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventControlPresetChanged__Delegate;            		// 0x0420 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x0424 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAimAssistEnabledChanged__Delegate;         		// 0x0430 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData12[ 0x4 ];                             		// 0x0434 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBallTrajectoryChanged__Delegate;           		// 0x0440 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData13[ 0x4 ];                             		// 0x0444 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventInGameTipsChanged__Delegate;               		// 0x0450 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData14[ 0x4 ];                             		// 0x0454 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUsedAllMapVotes__Delegate;                 		// 0x0460 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData15[ 0x4 ];                             		// 0x0464 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDodgeInputThresholdUpdated__Delegate;      		// 0x0470 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData16[ 0x4 ];                             		// 0x0474 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSteeringSensitivityUpdated__Delegate;      		// 0x0480 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData17[ 0x4 ];                             		// 0x0484 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAirControlSensitivityUpdated__Delegate;    		// 0x0490 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData18[ 0x4 ];                             		// 0x0494 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59729 ];

		return pClassPointer;
	};

	bool __Profile_TA__GetUniqueNetId ( class ULocalPlayer* P );
	struct FUniqueNetId GetUniqueNetId ( );
	TArray< struct FProfileProduct > GetProfileProducts ( );
	void SetAirControlSensitivity ( float Value );
	void SetSteeringSensitivity ( float Value );
	void SetDodgeInputThreshold ( float Value );
	struct FName GetKeyForAction ( struct FName Action, unsigned long bGamepad );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	bool AllowContainerNotifications ( );
	void SetAimAssistLevelOverride ( int Level );
	bool GetBallTrajectoryEnabled ( );
	void SetBallTrajectoryEnabled ( unsigned long bEnable );
	void OnBallTrajectoryChanged ( );
	bool GetAimAssistEnabled ( );
	void SetAimAssistEnabled ( unsigned long bEnable );
	void ResetAllSavedControlBindings ( );
	void SetActiveBindings ( TArray< struct FPlayerBinding > InPCBindings, TArray< struct FPlayerBinding > InGamepadBindings );
	void SetControlsPreset ( struct FName PresetName );
	void ClearRemovedMapPrefs ( struct FName PlaylistId, TArray< class UMapData_TA* > PlaylistMaps );
	void RecordMapPrefsMetrics ( );
	void SetMapPrefs ( struct FPlaylistMapPrefs Prefs, unsigned long bUsedAllVotes );
	struct FPlaylistMapPrefs GetMapPrefs ( struct FName Playlist );
	void AddLoadoutProductData ( int SlotIndex, int ProductID, class UOnlineProduct_TA* OnlineProduct, TArray< class UProductAttribute_TA* > Attributes, TArray< struct FLoadoutProductData >* OutProducts );
	void InitServerSetLoadoutParams ( struct FLoadoutData* Loadouts, TArray< struct FProfileProduct > ProfileProducts, struct FServerSetLoadoutParams* OutParams );
	struct FServerSetLoadoutParams BuildServerSetLoadoutParams ( );
	void SetPreviewTeam ( int InTeamIndex );
	void HandleOnlineProductEquipped ( class ULoadoutSet_TA* LoadoutSet );
	void HandleProductEquipped ( class ULoadoutSet_TA* LoadoutSet, int ProductID );
	void SetEditingLoadoutSet ( int Index );
	void DeleteLoadoutSet ( int Index );
	class ULoadoutSet_TA* CreateNewLoadoutSet ( );
	class ULoadoutSet_TA* AddNewLoadout ( );
	void EquipLoadoutSet ( class ULoadoutSet_TA* InLoadoutSet );
	class ULoadoutSet_TA* GetEditingLoadoutSet ( );
	class ULoadoutSet_TA* GetLoadoutSet ( int SetIndex );
	class ULoadout_TA* GetEditingLoadout ( int TeamIndex );
	class ULoadout_TA* GetLoadout ( int TeamIndex, int SetIndex );
	void ResetQuickChatBindings ( );
	void ChangeQuickChatBinding ( int Index, struct FName Message );
	void SetCrossPlayDisabled ( unsigned long bDisabled );
	void SetCustomMatchSettings ( struct FCustomMatchSettings Settings, unsigned char Type );
	struct FCustomMatchSettings GetCustomMatchSettings ( unsigned char Type );
	class UGameTags_TA* GetGameTags ( unsigned char Type );
	void ConvertGameTagsToObjects ( TArray< struct FKeyValuePair >* Pairs, TArray< class UGameTags_TA* >* OutGameTags );
	void InstanceGameTags ( );
	void StaticGetXPInfo ( int XPTotal, int* Out_XPLevel, struct FString* Out_XPTitle, int* Out_XPProgressInCurrentLevel, int* Out_XPRequiredForNextLevel );
	void GetXPInfo ( int* Out_XPTotal, int* Out_XPLevel, struct FString* Out_XPTitle, int* Out_XPProgressInCurrentLevel, int* Out_XPRequiredForNextLevel );
	void GiveXP ( float Amount );
	void InitXP ( int NewTotal );
	class USeason_TA* GetLatestSeason ( );
	void AddProductStatValue ( int ProductID, int Delta );
	int GetProductStatValue ( int ProductID );
	int GetStatValue ( unsigned char StatType, struct FName Id );
	void IncrementStatValue ( unsigned char StatType, struct FName Id, int Amount );
	void SetStatValue ( unsigned char StatType, struct FName Id, int Value );
	void HandleLoadoutChanged ( class ULoadoutSet_TA* InLoadoutSet, class ULoadout_TA* InLoadout );
	void ValidatePlayerBanner ( );
	void ValidateLoadoutSet ( class ULoadoutSet_TA* InLoadoutSet );
	void ValidateLoadoutsWithProduct ( TArray< class ULoadoutSet_TA* >* FilterLocal_CEC7495D494AAA0F4312C3AE492B42E1 );
	void ValidateLoadouts ( );
	void ClearLoadouts ( );
	void CheckForNewBindings ( TArray< struct FPlayerBinding > DefaultBindings, TArray< struct FPlayerBinding >* Bindings );
	void ResetOnlineProfile ( );
	class UOnlineProfile_TA* CreateOnlineProfile ( int InLocalID );
	void RemoveGameSettingsTag ( struct FString GameSettingName );
	void OnLoaded ( class USaveData_TA* InSaveData );
	void Save ( );
	void Init ( class USaveData_TA* InSaveData, struct FString InProfileName, int InLocalID );
	void EventAirControlSensitivityUpdated ( class UProfile_TA* Profile );
	void EventSteeringSensitivityUpdated ( class UProfile_TA* Profile );
	void EventDodgeInputThresholdUpdated ( class UProfile_TA* Profile );
	void EventUsedAllMapVotes ( class UProfile_TA* Profile );
	void EventInGameTipsChanged ( class UProfile_TA* Profile );
	void EventBallTrajectoryChanged ( class UProfile_TA* Profile );
	void EventAimAssistEnabledChanged ( class UProfile_TA* Profile );
	void EventControlPresetChanged ( class UProfile_TA* Profile );
	void EventActiveBindingsChanged ( class UProfile_TA* Profile );
	void EventLoadoutSetsChanged ( class UProfile_TA* Profile );
	void EventPreviewTeamChanged ( class UProfile_TA* Profile, int InPreviewTeamIndex );
	void EventEquippedLoadoutChanged ( class UProfile_TA* Profile, class ULoadout_TA* InLoadout );
	void EventOnlineProductEquipped ( class UProfile_TA* Profile );
	void EventPreEquipProductToLoadouts ( class UProfile_TA* Profile, int ProductID );
	void EventProductEquipped ( class UProfile_TA* Profile, int ProductID );
	void EventQuickChatBindingsChanged ( class UProfile_TA* Profile );
	void EventCrossPlayChanged ( class UProfile_TA* Profile );
	void EventXPUpdated ( class UProfile_TA* Profile );
	void EventXPInitialized ( class UProfile_TA* Profile );
};

UClass* UProfile_TA::pClassPointer = NULL;

// Class TAGame.Season_TA
// 0x0060 (0x009C - 0x003C)
class USeason_TA : public UObject
{
public:
	int                                                NumTeams;                                         		// 0x003C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                TeamSize;                                         		// 0x0040 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Difficulty;                                       		// 0x0044 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumRegularWeeks;                                  		// 0x0048 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumPlayoffsWeeks;                                 		// 0x004C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumPlayoffsTeams;                                 		// 0x0050 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FSeasonTeam >                       Teams;                                            		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FSeasonPlayer >                     Players;                                          		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FSeasonPlayerStat >                 PlayerStats;                                      		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                Year;                                             		// 0x0078 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                CurrentWeek;                                      		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FSeasonMatch >                      Matches;                                          		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventWeekSimulated__Delegate;                   		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0090 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59732 ];

		return pClassPointer;
	};

	void PrintRankings ( TArray< struct FSeasonTeamRank >* Rankings );
	void SetDifficulty ( int NewDifficulty );
	void SetBots ( struct FString BotID0, struct FString BotName0, struct FString BotID1, struct FString BotName1, struct FString BotID2, struct FString BotName2 );
	void BuildPlayoffsMatches ( );
	void SelectPlayoffsTeams ( );
	void SimulateWeek ( unsigned long bForceHumansToWin );
	void SaveMatch ( struct FSeasonMatch Match );
	bool GetMatch ( int Team, int Week, unsigned long bReturnByes, struct FSeasonMatch* Match, int* MatchIdx );
	int SortTeamRank ( struct FSeasonTeamRank A, struct FSeasonTeamRank B );
	void GetTeamRankings ( int Week, TArray< struct FSeasonTeamRank >* Rankings );
	int GetWins ( int Team, int Week );
	int GetTotalSeasonWeeks ( );
	bool IsFinished ( int Week );
	int GetLastWeek ( );
	bool IsChampionship ( int Week );
	bool IsPlayoffs ( int Week );
	bool IsPostSeason ( int Week );
	bool IsLastRegularSeason ( int Week );
	bool IsRegularSeason ( int Week );
	bool IsFirstGameOfSeason ( int Week );
	void BuildBotTeams ( );
	void BuildMatches ( );
	void EventWeekSimulated ( class USeason_TA* InSeason );
};

UClass* USeason_TA::pClassPointer = NULL;

// Class TAGame.LoadoutSet_TA
// 0x0058 (0x0094 - 0x003C)
class ULoadoutSet_TA : public UObject
{
public:
	struct FString                                     LoadoutSetName;                                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ULoadout_TA*                                 Loadouts[ 0x2 ];                                  		// 0x0048 (0x0008) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x0050 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __EventChanged__Delegate;                         		// 0x0054 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0058 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                 		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;           		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0078 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLoadoutsInitialized__Delegate;             		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59762 ];

		return pClassPointer;
	};

	bool HasOnlineProduct ( );
	class UProductAsset_Body_TA* LoadBodyAsset ( );
	int GetBodyProductID ( );
	bool HasProducts ( );
	bool HasProduct ( int ProductID );
	void HandleOnlineProductEquipped ( );
	void HandleProductEquipped ( int ProductID );
	void HandleLoadoutChanged ( class ULoadout_TA* Loadout );
	void AddListeners ( );
	void CopyFromLoadoutSet ( class ULoadoutSet_TA* LoadoutSetToCopy );
	void InitLoadouts ( class UProfile_TA* InProfile );
	class ULoadoutSet_TA* CreateEmptyLoadoutSet ( struct FString InName );
	class ULoadoutSet_TA* CreateLoadoutSet ( class UProfile_TA* InProfile, struct FString InName );
	void EventLoadoutsInitialized ( class ULoadoutSet_TA* LoadoutSet );
	void EventOnlineProductEquipped ( class ULoadoutSet_TA* LoadoutSet );
	void EventProductEquipped ( class ULoadoutSet_TA* LoadoutSet, int ProductID );
	void EventChanged ( class ULoadoutSet_TA* LoadoutSet, class ULoadout_TA* Loadout );
};

UClass* ULoadoutSet_TA::pClassPointer = NULL;

// Class TAGame.SaveData_TA
// 0x0200 (0x023C - 0x003C)
class USaveData_TA : public UObject
{
public:
	class USaveGameManager_TA*                         SaveManager;                                      		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFromPreviousSave : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVsync : 1;                                       		// 0x0040 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowLightShafts : 1;                             		// 0x0040 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTranslucentArenaShaders : 1;                     		// 0x0040 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowWeatherFX : 1;                               		// 0x0040 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bColorBlind : 1;                                  		// 0x0040 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnableOnlineData : 1;                            		// 0x0040 (0x0004) [0x0000000000006000] [0x00000040] ( CPF_Transient | CPF_Config )
	TArray< struct FOptionsValue >                     VideoOptions;                                     		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Resolution;                                       		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                WindowMode;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxFPS;                                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MasterVolume;                                     		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SoundVolume;                                      		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MusicVolume;                                      		// 0x006C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AmbientVolume;                                    		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VoiceVolume;                                      		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      OutputType;                                       		// 0x0078 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ControllerSoundMode;                              		// 0x0079 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      VoiceFilter;                                      		// 0x007A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChatFilter;                                       		// 0x007B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplitScreenType2P;                                		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplitScreenType3P;                                		// 0x007D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      KeySelection;                                     		// 0x007E (0x0001) [0x0000000000000000]              
	float                                              ControllerVolume;                                 		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SafeZoneRatio;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        SafeZoneLimits;                                   		// 0x0088 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FProfileSliderLimits                        UIScaleLimits;                                    		// 0x0094 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              UIScale;                                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      UnlockedProducts;                                 		// 0x00A4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x00B0 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.NewProductIDs
	TArray< int >                                      NewProducts;                                      		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0xC ];                             		// 0x00C8 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.NewOnlineProducts
	unsigned char                                      UnknownData02[ 0xC ];                             		// 0x00D4 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.UnseenContainerProducts
	struct FTrialSaveData                              TrialSave;                                        		// 0x00E0 (0x0010) [0x0000000000000000]              
	TArray< class UOnlineProduct_TA* >                 OnlineProducts;                                   		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineProductStoreSet_TA*                   OnlineProductSet;                                 		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UIdenticalProductCache_TA*                   IdenticalOnlineProducts;                          		// 0x0100 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned char                                      UnknownData03[ 0x8 ];                             		// 0x0104 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.LastUnlockDisplayId
	unsigned char                                      UnknownData04[ 0x8 ];                             		// 0x010C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.LastProdRewardMigrationId
	TArray< class UProfile_TA* >                       Profiles;                                         		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAchievementSave_TA*                         AchievementData;                                  		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FUISavedKeyValue >                  UISavedValues;                                    		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      MutedPlayers;                                     		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      MatchCompleteCarBodies;                           		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             AllCarsPlayedRewards;                             		// 0x0148 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             WinSeasonModeRewards;                             		// 0x0154 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             KonamiCodeRewards;                                		// 0x0160 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UOnlineSaveData_TA*                          OnlineData;                                       		// 0x016C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     RankedReconnectBeacon;                            		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x8 ];                             		// 0x017C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.RankedReconnectEpochTime
	TArray< struct FPlaylistSkillData >                SkillData;                                        		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SchematicResources;                               		// 0x0190 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SelectedFreeplayMap;                              		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBlogTileCache_TA*                           BlogTileCache;                                    		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                SaveDataVersion;                                  		// 0x01A4 (0x0004) [0x0000000000000000]              
	class UInitialUserSettingsSender_TA*               InitialUserSettingsSender;                        		// 0x01A8 (0x0004) [0x0000000000000000]              
	class UMusicPlayerSave_TA*                         MusicPlayerSave;                                  		// 0x01AC (0x0004) [0x0000000000000000]              
	TArray< class UGameSettingPlaylist_X* >            DecayedPlaylists;                                 		// 0x01B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UObjectProvider*                             SaveObjectProvider;                               		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class USaveObject_TA* >                    SaveObjects;                                      		// 0x01C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventNewProductUnlocked__Delegate;              		// 0x01CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x01D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDLCChange__Delegate;                       		// 0x01DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x01E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventNewOnlineProduct__Delegate;                		// 0x01EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData08[ 0x4 ];                             		// 0x01F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductsSynced__Delegate;            		// 0x01FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData09[ 0x4 ];                             		// 0x0200 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineSavedDataSynced__Delegate;           		// 0x020C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData10[ 0x4 ];                             		// 0x0210 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSkillDecayed__Delegate;                    		// 0x021C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData11[ 0x4 ];                             		// 0x0220 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSchematicResourcesChanged__Delegate;       		// 0x022C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData12[ 0x4 ];                             		// 0x0230 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59780 ];

		return pClassPointer;
	};

	void __SaveData_TA__HandleDataLoaded ( class UOnlineProduct_TA* Op );
	void __SaveData_TA__Unload ( class USaveObject_TA* S );
	void __SaveData_TA__ValidateProfiles ( class UProfile_TA* P, int I );
	int __SaveData_TA__ValidateProfiles ( class UProfile_TA* L, class UProfile_TA* R );
	void __SaveData_TA__ValidateLoadouts ( class UProfile_TA* P );
	bool __SaveData_TA__GetNewProducts ( class UProduct_TA* P );
	void UpdateTrialStatus ( class UOnlineGameTrial_X* Trial );
	void ClearSavedValue ( struct FName Key );
	bool HasSavedValue ( struct FName Key );
	void SetSavedValue ( struct FName Key, struct FString Value );
	TArray< int > GetUniqueSeriesIDs ( );
	void SetPlaylistSkillData ( struct FPlaylistSkillData Data );
	struct FPlaylistSkillData GetPlaylistSkillData ( int Playlist );
	void CheckForSkillDecay ( );
	void HandlePlaylistsChanged ( class UOnlineGamePlaylists_X* Playlists );
	void HandleSkillSynced ( class UOnlineGameSkill_X* Skill, struct FUniqueNetId PlayerID, class UError* Error );
	void HandleKonamiCode ( );
	void ClearRankedReconnect ( );
	bool RankedReconnectAvailable ( );
	void SetRankedReconnect ( struct FString BeaconAddress );
	class UOnlineProduct_TA* FindFirstOnlineProduct ( int InProductID );
	class UOnlineProduct_TA* GetUniqueOnlineProduct ( );
	TArray< class UOnlineProduct_TA* > GetUniqueOnlineProducts ( );
	int GetOnlineProductQuantity ( class UOnlineProduct_TA* Product );
	TArray< struct FOnlineProductData > InstanceReplicatedOnlineProductData ( );
	TArray< class UOnlineProduct_TA* > GetOnlineProducts ( int InProductID );
	void HandleOnlineProductsReceived ( class URPC_ProductsPlayerGet_TA* RPC );
	bool OnlineDataNeedsUpload ( class UOnlineSaveData_TA* OnlineSave, class UOnlineProfile_TA* OnlineProfile );
	void ClearOnlineProducts ( );
	void ClearCloudData ( );
	void ConditionalUploadOnlineData ( class USaveData_TA* SaveData, class UOnlineSaveData_TA* DeltaSave, class UOnlineProfile_TA* DeltaProfile );
	void UpdateOnlineData ( );
	class UOnlineProfile_TA* FindOnlineProfile ( int ProfileId, TArray< class UOnlineProfile_TA* >* OnlineProfiles );
	void HandleOnlineSaveDataReceived ( class URPC_SaveDataGet_TA* RPC );
	void SetSchematicResouces ( int Total );
	void HandleSchematicResourcesReceived ( class URPC_SchematicResourcesGet_TA* RPC );
	void SyncSchematicResources ( );
	void SyncOnlineProducts ( );
	void SyncCloudData ( class UOnlinePlayer_X* OnlinePlayer );
	bool CanSyncOnlineData ( struct FUniqueNetId PlayerID );
	void ResetOnlineSaveData ( );
	class UOnlineSaveData_TA* CreateOnlineSaveData ( class USaveData_TA* ForSave );
	void MarkReplayEditorOpened ( );
	void MarkCreditsViewed ( );
	float GetUnlockProgress ( );
	float GetGameModeUnlockProgress ( );
	float GetItemUnlockProgress ( );
	void UpdateGameProgress ( );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	bool DidPlayMatchWithAllDefaultBodies ( );
	void GetLockedItemsFromNames ( TArray< struct FName >* ProductNames, TArray< int >* LockedIDs );
	TArray< int > SetMatchCompleteForBody ( int ProductID );
	TArray< int > GetSeasonRewards ( class UProfile_TA* Profile, class AGameEvent_TA* GameEvent );
	int UnlockRandomDrop ( class UProfile_TA* Profile, class AGameEvent_TA* GameEvent );
	void HandleLoadUnlockedBody ( struct FAssetLoadResult Result );
	void UnlockForcedProduct ( struct FName ProductName );
	void UnlockChildProducts ( int ProductID );
	void RemoveNewProducts ( );
	void GetUnseenContainerDrops ( );
	void RemoveContainerDrop ( );
	void ClearUnseenContainerDrops ( );
	void GetLatestContainerDrop ( );
	bool IsUnseenContainerDrop ( );
	void AddUnseenContainerDrop ( );
	void ValidateLastUnlockDisplayId ( );
	void SetItemDropDisplayed ( );
	void OnNewOnlineProduct ( class UOnlineProduct_TA* OnlineProduct );
	void RemoveOnlineProductId ( );
	void GiveOnlineProduct ( class UOnlineProduct_TA* OnlineProduct );
	bool DisableContainerNotifications ( );
	bool UnlockProductNoNotify ( int ProductID );
	bool UnlockProduct ( int ProductID );
	void UnlockDefaultProducts ( );
	class USaveData_TA* ClearUnlockedProducts ( );
	TArray< class UProduct_TA* > GetNewProducts ( TArray< class UProduct_TA* >* MapLocal_7C29636643D426FFE10BE4A2F716C3C6, TArray< class UProduct_TA* >* FilterLocal_0A2FFFDF462E386E074629AAD9B80D0D, TArray< class UProduct_TA* >* DistinctLocal_CEE65F0942056336F385C0BF65F4D887 );
	class UProduct_TA* GetProductFromOnlineID ( );
	int GetProductIDFromOnlineID ( );
	class UOnlineProduct_TA* GetFirstOnlineProduct ( int ProductID );
	class UOnlineProduct_TA* GetOnlineProduct ( );
	bool IsInstanceOwned ( );
	bool IsProductUnlockedEx ( class UProduct_TA* Product );
	bool IsProductUnlocked ( class UProduct_TA* Product );
	bool IsProductIdUnlocked ( int ProductID );
	bool IsProductUnlockable ( int ProductID, struct FString* Reason );
	bool CanUnlockProduct ( int ProductID );
	void ValidateUnlocks ( );
	void ValidateLoadoutsWithProduct ( );
	void ValidateLoadouts ( );
	void ValidateProfiles ( TArray< class UProfile_TA* >* SortLocal_C38CFC3D4662515B02C36BA7DBD4C2F3 );
	void RemoveAllProfiles ( );
	struct FString GetProfileName ( int LocalID );
	class UProfile_TA* GetProfileForByLocalID ( int LocalID );
	class UProfile_TA* GetProfileForPlayer ( struct FUniqueNetId PlayerID );
	bool ProductIsNew ( );
	bool LockProduct ( int ProductID );
	void GetDLCProducts ( TArray< class UProduct_TA* >* Unlocked, TArray< class UProduct_TA* >* Locked );
	void HandleUnlockedDLCChanged ( );
	void HandleOnlineGameInitialized ( );
	void SetSelectedFreeplayMap ( struct FString Value );
	void SetUseTranslucentArenaShaders ( unsigned long Value );
	void SetUIScale ( float Value );
	float GetDefaultSaveZone ( );
	void SetSafeZone ( float Value );
	void HandleReceivePlayerController ( class UPlayer* PlayerRef );
	void HandlePsyNetLogin ( class UPsyNetConnection_X* C );
	void Save ( );
	void HandleSaveObjectDirty ( class USaveObject_TA* SaveObject );
	void OnLoadSaveObject ( class USaveObject_TA* SaveObject );
	void Unload ( );
	void HandleDataLoaded ( class USaveGameManager_TA* Manager, class UError* Error );
	void EventSchematicResourcesChanged ( class USaveData_TA* Data );
	void EventSkillDecayed ( class USaveData_TA* Data, TArray< class UGameSettingPlaylist_X* > InDecayedPlaylists );
	void EventOnlineSavedDataSynced ( class USaveData_TA* Data );
	void EventOnlineProductsSynced ( class USaveData_TA* Data );
	void EventNewOnlineProduct ( class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct );
	void EventDLCChange ( class USaveData_TA* Data );
	void EventNewProductUnlocked ( class USaveData_TA* Data, int ProductID );
};

UClass* USaveData_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Tutorial_TA
// 0x01B0 (0x0978 - 0x07C8)
class AGameEvent_Tutorial_TA : public AGameEvent_Soccar_TA
{
public:
	struct FVector                                     TotalFieldExtent;                                 		// 0x07C8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	int                                                TeamNum;                                          		// 0x07D4 (0x0004) [0x0000000000000000]              
	int                                                BallGoalNum;                                      		// 0x07D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bOnlyScoreInBallGoalNum : 1;                      		// 0x07DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRedoRound : 1;                                   		// 0x07DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowSuperBoost : 1;                             		// 0x07DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDisplayedRedoPenaltyMessage : 1;                 		// 0x07DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowBoostMeter : 1;                              		// 0x07DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      Difficulty;                                       		// 0x07E0 (0x0001) [0x0000000000000000]              
	unsigned char                                      DebugRotationType;                                		// 0x07E1 (0x0001) [0x0000000000000000]              
	struct FDifficultyInfo                             DifficultyList[ 0x3 ];                            		// 0x07E4 (0x006C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      WaveIndexesLeft;                                  		// 0x0850 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              GoalDepth;                                        		// 0x085C (0x0004) [0x0000000000000000]              
	int                                                GameEventRounds;                                  		// 0x0860 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EventStartTime;                                   		// 0x0864 (0x0004) [0x0000000000000000]              
	struct FVector                                     BallInitialVelocity;                              		// 0x0868 (0x000C) [0x0000000000000000]              
	int                                                SpawnIndexTypeOverride;                           		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACannon_TA*                                  Cannon;                                           		// 0x0878 (0x0004) [0x0000000000000000]              
	int                                                WaveIndex;                                        		// 0x087C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WaveSpawnCount;                                   		// 0x0880 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RandomSpawnIndex;                                 		// 0x0884 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTutorial_TA*                                Tutorial;                                         		// 0x0888 (0x0004) [0x0000000000000000]              
	struct FString                                     StartMessageArchetype;                            		// 0x088C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     BallSpawnLocation;                                		// 0x0898 (0x000C) [0x0000000000000000]              
	TArray< struct FCarSpawnData >                     CarSpawns;                                        		// 0x08A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PointsScoredThisRound;                            		// 0x08B0 (0x0004) [0x0000000000000000]              
	int                                                BallSpawnCount;                                   		// 0x08B4 (0x0004) [0x0000000000000000]              
	float                                              BallBounceScale;                                  		// 0x08B8 (0x0004) [0x0000000000000000]              
	class ACannon_TA*                                  CannonArchetype;                                  		// 0x08BC (0x0004) [0x0000000000000000]              
	class ADynamicSpawnPoint_TA*                       DynamicSpawnPoint;                                		// 0x08C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentDebugStepX;                                		// 0x08C4 (0x0004) [0x0000000000000000]              
	int                                                CurrentDebugStepY;                                		// 0x08C8 (0x0004) [0x0000000000000000]              
	int                                                CurrentDebugStepZ;                                		// 0x08CC (0x0004) [0x0000000000000000]              
	int                                                RedoCount;                                        		// 0x08D0 (0x0004) [0x0000000000000000]              
	int                                                RedoTotal;                                        		// 0x08D4 (0x0004) [0x0000000000000000]              
	class UGFxModal_X*                                 ResetModal;                                       		// 0x08D8 (0x0004) [0x0000000000000000]              
	struct FFieldSpawnInfo                             BallSpawnInfo;                                    		// 0x08DC (0x003C) [0x0000000000000000]              
	struct FScriptDelegate                             __EventVehicleSetup__Delegate;                    		// 0x0918 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x091C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoreUpdated__Delegate;                    		// 0x0928 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x092C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDifficultyUpdated__Delegate;               		// 0x0938 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x093C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventShowBoostMeterChanged__Delegate;           		// 0x0948 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x094C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUseActionsChanged__Delegate;               		// 0x0958 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x095C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTutorialTipChanged__Delegate;              		// 0x0968 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x096C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59793 ];

		return pClassPointer;
	};

	void SetTutorialTip ( struct FString NewTip );
	void SetShowBoostMeter ( unsigned long bShow );
	struct FName GetDesiredSoundState ( );
	struct FVector GetDebugSpawnLocation ( struct FFieldSpawnInfo SpawnInfo );
	float GetStepLoc ( int Steps, float TotalDist, unsigned long bIncrement, int* Out_CurrentStep );
	struct FVector GetDebugLocationInExtent ( struct FVector Extent );
	void InitDebugSetup ( class ACar_TA* Car );
	void SkipTutorial ( );
	void UpdateBotCount ( );
	void InitMutators ( );
	bool IsPrimaryPlayer ( class ACar_TA* Car );
	bool CanAwardPoints ( );
	void OnResetRoundCancel ( class UGFxModal_X* Modal );
	void OnResetRoundConfirm ( class UGFxModal_X* Modal );
	void ShowResetRoundMessage ( );
	void Destroyed ( );
	bool EndTutorial ( );
	bool StartTutorial ( class APlayerController_TA* PC, struct FString TutorialName, class USequenceAction* KNode, unsigned long bSkipFadeIn );
	void CommitRedoRound ( );
	void RedoRound ( );
	bool CanRedoRound ( );
	void StartNewRound ( );
	void SaveLocalPlayerStats ( );
	class ATeam_TA* GetWinningTeam ( );
	void CleanupRoundActors ( );
	struct FVector DetermineBallInitialVelocity ( struct FVector BallSpawnLoc, class ACar_TA* Car, struct FFieldSpawnInfo SpawnInfo );
	bool CanQueSaveReplay ( );
	void ResetBalls ( );
	struct FName GetScoreStatus ( unsigned char InTeamNum );
	int GetScore ( );
	void StartRound ( );
	int GetGameEventRounds ( );
	int GetTotalRounds ( );
	void ResetRoundTime ( );
	void OnPlayerRestarted ( class ACar_TA* PlayerCar );
	void ResetOrientation ( class AController* Controller, struct FVector Loc, struct FRotator Rot );
	struct FVector GetBallInitialVelocity ( struct FVector BallSpawnLoc, class ACar_TA* Car, struct FFieldSpawnInfo SpawnInfo );
	unsigned char GetTrainingType ( );
	struct FString GetDifficulty ( );
	struct FString GetTrainingName ( );
	void EndGame ( );
	bool CanAwardAchievements ( );
	bool AllowScoreboard ( );
	class ATeam_TA* PickTeam ( class AController* C );
	struct FVector GetRandomLocationInExtent ( struct FVector Extent );
	bool Chance ( int Chances );
	int GetOppositeTeamNum ( );
	struct FVector GetDirectionToGoal ( int GoalNum );
	bool IsGameEventComplete ( );
	struct FVector ClampPointToExtent ( struct FVector ExtentCenter, struct FVector Point, struct FVector Extent );
	struct FFieldSpawnInfo GetRandomBallSpawnInfo ( );
	struct FFieldSpawnInfo GetRandomPlayerSpawnInfo ( );
	struct FVector PredictInitialVelocity ( struct FVector StartLoc, struct FVector EndLoc, float Z );
	class ABall_TA* GetGameBall ( );
	class ACar_TA* GetGamePawn ( );
	void ResetGameEvent ( );
	void CheckForReset ( );
	float GetGoalViewWidth ( class UGoal_TA* Goal, struct FVector ViewerLoc );
	bool IsBallMovingTowardsGoal ( class UGoal_TA* Goal, class ABall_TA* Ball, float MinVelocityForDestroy, float InGoalDepth );
	void SetGoalDepth ( );
	int GetShuffledSpawnIndex ( );
	struct FCarSpawnData GetCarSpawnData ( class AController* Controller );
	void AddToCarSpawnData ( class AController* Controller, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
	struct FRotator GetCarSpawnRotation ( struct FFieldSpawnInfo SpawnInfo, struct FVector CarSpawnLocation );
	struct FVector GetCarSpawnLocation ( struct FFieldSpawnInfo SpawnInfo );
	void DestroyCannon ( );
	void SetCannonOrientation ( struct FVector NewLocation, struct FRotator NewRotation );
	class ABall_TA* SpawnBall ( struct FVector SpawnLoc, unsigned long bWake, unsigned long bSpawnCannon, struct FString BallArch );
	void InitBallEffects ( );
	void InitBallVelocity ( );
	struct FVector GetRandomGoalAimLocation ( int InTeamNum, struct FVector BallLoc );
	struct FVector GetGoalExtent ( class UGoal_TA* Goal );
	void SetBallVelocity ( struct FVector InitialVelocity, class ABall_TA* Ball );
	struct FVector GetSpawnLocation ( struct FFieldSpawnInfo SpawnInfo );
	struct FVector GetMaxFieldExtent ( struct FFieldSpawnInfo SpawnInfo );
	void InitGameSetup ( class ACar_TA* Car );
	void OnVehicleSetup ( class ACar_TA* Car );
	void HandleVehicleSetup ( class ACar_TA* Car );
	void InitCrowdManager ( );
	void HandleScoreUpdated ( class ATeam_TA* Team );
	void SetDifficulty ( int InDifficulty );
	void UpdateStats ( );
	void AddLocalPlayer ( class APlayerController_TA* Player );
	void OnInit ( );
	void EventTutorialTipChanged ( class AGameEvent_Tutorial_TA* GameEvent, struct FString NewTip );
	void EventUseActionsChanged ( class AGameEvent_Tutorial_TA* GameEvent );
	void EventShowBoostMeterChanged ( class AGameEvent_Tutorial_TA* GameEvent );
	void EventDifficultyUpdated ( class AGameEvent_Tutorial_TA* GameEvent );
	void EventScoreUpdated ( class AGameEvent_Tutorial_TA* GameEvent );
	void EventVehicleSetup ( class AGameEvent_Tutorial_TA* GameEvent, class ACar_TA* Car );
};

UClass* AGameEvent_Tutorial_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Breakout_TA
// 0x0000 (0x0444 - 0x0444)
class AGameInfo_Breakout_TA : public AGameInfo_Soccar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59807 ];

		return pClassPointer;
	};

};

UClass* AGameInfo_Breakout_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Training_TA
// 0x0000 (0x0978 - 0x0978)
class AGameEvent_Training_TA : public AGameEvent_Tutorial_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59841 ];

		return pClassPointer;
	};

	void BeginHighlightsReplay ( );
};

UClass* AGameEvent_Training_TA::pClassPointer = NULL;

// Class TAGame.Loadout_TA
// 0x0098 (0x00D4 - 0x003C)
class ULoadout_TA : public UObject
{
public:
	TArray< int >                                      Products;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0048 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.Loadout_TA.OnlineProducts
	struct FLoadoutTeamPaint                           TeamPaint;                                        		// 0x0054 (0x0010) [0x0000000000000000]              
	struct FLoadoutTeamPaint                           TeamPaints[ 0x2 ];                                		// 0x0064 (0x0020) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       PlayerTitle;                                      		// 0x0084 (0x0008) [0x0000000000000000]              
	int                                                GaragePreviewTeam;                                		// 0x008C (0x0004) [0x0000000000000000]              
	class UProfile_TA*                                 Profile;                                          		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventChanged__Delegate;                         		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0098 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreviewTeamChanged__Delegate;              		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                 		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;           		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x00C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59919 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	class UProductAsset_Body_TA* LoadBodyAsset ( );
	int GetBodyProductID ( );
	bool IsProductEquipped ( class UProductSlot_TA* Slot, int ProductID );
	void SetGaragePreviewTeam ( int PreviewTeam );
	void SetData ( struct FLoadoutData* Data );
	struct FLoadoutData GetData ( );
	void ApplyRequiredProducts ( int ProductID, struct FLoadoutData* Data );
	void ValidateForcedProducts ( int TeamIndex, struct FLoadoutData* Data, TArray< int >* MapLocal_D62FAEF54B9E8362D7755D87B6EF16BB );
	void ValidateProductID ( class UProfile_TA* ForProfile, struct FString SlotName, int* ProductID );
	void StaticValidate ( class UProfile_TA* ForProfile, struct FLoadoutTeamPaint* Paint, TArray< int >* OutProducts );
	void Validate ( );
	struct FLoadoutData EquipProduct ( class ULoadout_TA* ForLoadout, int SlotIndex );
	void Init ( class UProfile_TA* InProfile, int TeamIndex );
	void EventOnlineProductEquipped ( );
	void EventProductEquipped ( int ProductID );
	void EventPreviewTeamChanged ( class ULoadout_TA* Loadout );
	void EventChanged ( class ULoadout_TA* Loadout );
};

UClass* ULoadout_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_TA
// 0x0040 (0x0350 - 0x0310)
class UPlayerInput_TA : public UPlayerInput_X
{
public:
	float                                              GamepadLookScale;                                 		// 0x0310 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              aTargetSelect;                                    		// 0x0314 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              TargetSelectDeadZone;                             		// 0x0318 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTargetSelected : 1;                              		// 0x031C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsUsingMouseSteer : 1;                           		// 0x031C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsUsingMouseThrottle : 1;                        		// 0x031C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsUsingPositiveMouseAirYaw : 1;                  		// 0x031C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsUsingNegativeMouseAirYaw : 1;                  		// 0x031C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsUsingPositiveMouseAirPitch : 1;                		// 0x031C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsUsingNegativeMouseAirPitch : 1;                		// 0x031C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsUsingPositiveMouseAirRoll : 1;                 		// 0x031C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsUsingNegativeMouseAirRoll : 1;                 		// 0x031C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	float                                              aPositiveYaw;                                     		// 0x0320 (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aNegativeYaw;                                     		// 0x0324 (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aPositivePitch;                                   		// 0x0328 (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aNegativePitch;                                   		// 0x032C (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aPositiveRoll;                                    		// 0x0330 (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aNegativeRoll;                                    		// 0x0334 (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aLookRoll;                                        		// 0x0338 (0x0004) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	unsigned char                                      bRoll;                                            		// 0x033C (0x0001) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	unsigned char                                      bPitch;                                           		// 0x033D (0x0001) [0x0000000000002004]              ( CPF_Input | CPF_Transient )
	float                                              aMouseForward;                                    		// 0x0340 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseStrafe;                                     		// 0x0344 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aDodgeForward;                                    		// 0x0348 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aDodgeStrafe;                                     		// 0x034C (0x0004) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60000 ];

		return pClassPointer;
	};

	TArray< struct FBindingAction > GetDefaultActions ( struct FBindingAction* StructInitializer_28BC6E7E4C8D7B6179D082A5D3ED6FA6, struct FBindingAction* StructInitializer_0A863AE744234EF2977B0BAB5BF54B37, struct FBindingAction* StructInitializer_34FA09094C731483EF0FE196A8116940, struct FBindingAction* StructInitializer_804945644185F37D5A467295A263D3BB, struct FBindingAction* StructInitializer_8DC88D2B44F96BCFB196CB845062D0C8, struct FBindingAction* StructInitializer_54A183714D121D1C4A526C9BA7CDDEA8, struct FBindingAction* StructInitializer_261DB6134CCB0B24F95C19A2F2D5A265, struct FBindingAction* StructInitializer_1C6198B3403A1EC64437A1ACBD031300, struct FBindingAction* StructInitializer_3A7353234D3F3A493692B2A40AB0ED00, struct FBindingAction* StructInitializer_7FB8D85C4D1C7610DB7EA1980DACA2C8, struct FBindingAction* StructInitializer_E521664844B543832C4759B7449E8980, struct FBindingAction* StructInitializer_7817BB1341B226D4FD5D8992794CCE68, struct FBindingAction* StructInitializer_C1EE0AEB4F0B771545185186C158F016, struct FBindingAction* StructInitializer_0905A2414A8A52C684FEFC92D756DBC9, struct FBindingAction* StructInitializer_57BB4BF844699F0C2F9C94BFA28E0A4C, struct FBindingAction* StructInitializer_BE9763DD48A51F3DF2703A917CDC75C9, struct FBindingAction* StructInitializer_BFDFD5A846BFE048F0A27BB7FB3E8058, struct FBindingAction* StructInitializer_1F33CCEE42ECB03C3DAD78B67FE92053, struct FBindingAction* StructInitializer_EC85F3654083CDCAE48D969E12B8DA51, struct FBindingAction* StructInitializer_186B768C4B1B303598C8BAAB0CF4F2EF, struct FBindingAction* StructInitializer_80E0253F44E8584AB12AE3842F9F0A65, struct FBindingAction* StructInitializer_D17620624DC87B0500B674AA3076462F, struct FBindingAction* StructInitializer_2047496244CCFDB106149CA8BC5BF1B5, struct FBindingAction* StructInitializer_1C9A5E7C4680B5B35AC3299C44DF49CF, struct FBindingAction* StructInitializer_B00CBAA040CE501F718B0BAC7C59AC76, struct FBindingAction* StructInitializer_0D79891542DE09B26AB705A913247911, struct FBindingAction* StructInitializer_7D3B7192442F84993688DE9F3C09EEE3, struct FBindingAction* StructInitializer_78FFA88245E4286459BBD7AF795E111D, struct FBindingAction* StructInitializer_01CFB33D49460551B59C8191CBC63D02, struct FBindingAction* StructInitializer_E427C4D14D8433BA2B926A882A2A1EDB, struct FBindingAction* StructInitializer_B4DA5A504CB83821226C2CB6C1A26B22, struct FBindingAction* StructInitializer_553FBFAC49F0A14754CD959944D33D90, struct FBindingAction* StructInitializer_3048905A46B04E259DA96F9A4C269F6D, struct FBindingAction* StructInitializer_F780C2B5454FB47762E999867B1D123F, struct FBindingAction* StructInitializer_90B86F294FC0585438C414B79F91F7E3, struct FBindingAction* StructInitializer_C101E4C74E6F56E09983A8972D94B9E8, struct FBindingAction* StructInitializer_97EAC076418F60EF01A074B44F00612C, struct FBindingAction* StructInitializer_75E8131B450FE6D4C388B9B65DD6F264, struct FBindingAction* StructInitializer_422D518E488836275B5298A0E856396B, struct FBindingAction* StructInitializer_C10C7BFB4AA128AA97984C839A940688, struct FBindingAction* StructInitializer_AF3F90F6467F096F002242A4A374BDC6, struct FBindingAction* StructInitializer_ED577D304357E99A8FF2AA9E87878E7A, struct FBindingAction* StructInitializer_772B4D984C7228EF0BCC4EB1E11E0BD3, struct FBindingAction* StructInitializer_5A306BD74FAE25DEFA1368836ACB4B6F, struct FBindingAction* StructInitializer_7AC00C184DD1F8575C884D9DC952F99C, struct FBindingAction* StructInitializer_6B0554E144F5D0E1D93E48AA82A94CAE, struct FBindingAction* StructInitializer_D8C8186A418B44EF2DDF96A513CEE596, struct FBindingAction* StructInitializer_1CA7DD1540A33F74F09F5F8D25E3D5C7, struct FBindingAction* StructInitializer_2D0130BB43E250FCA449F8BA7D194F00, struct FBindingAction* StructInitializer_BFFAA29444D7819C393B2B93AE5EE007, struct FBindingAction* StructInitializer_9093BF2D443266F51DFB9FAFC237C8BF, struct FBindingAction* StructInitializer_AB831C5D4310B2A4C84C8BA9033E02C5, struct FBindingAction* StructInitializer_0488273E458FD8E87AD7E88E2EA81958, struct FBindingAction* StructInitializer_7D64F3414AEDC61AF1CB77B2C15B43C1, struct FBindingAction* StructInitializer_602043F44359DCA7F8B5A5AA358280CB, struct FBindingAction* StructInitializer_35D3469243556F6A17DB22BE17CD91A4, struct FBindingAction* StructInitializer_F5F9C0874444A5978A03F8AA753B871A, struct FBindingAction* StructInitializer_E1CCD0E448CCE015F1DAB4AD0E3A5FF7, struct FBindingAction* StructInitializer_5B98F8594F8830C72DBD6EA237B1F34B, struct FBindingAction* StructInitializer_CB3BDBE34A3736B3B4AC78A24BBABF4E, struct FBindingAction* StructInitializer_D91D3A67494F99B86C3826B8CD7F0F9A, struct FBindingAction* StructInitializer_5FD8E5504B319F968A2F3D9B190D9749, struct FBindingAction* StructInitializer_E877D6864E36C7E598020AAC7768F432, struct FBindingAction* StructInitializer_0811D50D4DA7521BE94CF9BD3D285393, struct FBindingAction* StructInitializer_5447827445090DF27E46549E541F71C1, struct FBindingAction* StructInitializer_BBFB7ED445DDDA06803D1396CCDB92A6, struct FBindingAction* StructInitializer_8ABBE8EA454DA748233704A8E3EAFB6D, struct FBindingAction* StructInitializer_0617745043CC8E536548F4A1D516AA8E, struct FBindingAction* StructInitializer_383BA16545D726A3DC9CF6988C01B574, struct FBindingAction* StructInitializer_AEF3020541FC2EC9B8FAACB6EB9FB6D2, struct FBindingAction* StructInitializer_012872324A87B0231330C6A6423EAC41, struct FBindingAction* StructInitializer_490BD86448FFD44AD3AFACB568392F38, struct FBindingAction* StructInitializer_5627EAE449044E99BFE1349AA14F5567, struct FBindingAction* StructInitializer_448B3D7446B521809ADB20BEAF8A6148, struct FBindingAction* StructInitializer_B99ECE2B45935BDC9B9A25B76167C7CA, struct FBindingAction* StructInitializer_DBF45B0C491BDCF0BB6B658CE540D51C, struct FBindingAction* StructInitializer_9AAC136A4C64BBCFF0E57CA7C95BACF9, struct FBindingAction* StructInitializer_E73E96B1428622A115338B8391801232, struct FBindingAction* StructInitializer_F1801E8D4495D7F5370D61B1B5E7BE66, struct FBindingAction* StructInitializer_935DA13C495A1C98380AAB801DDA5EB9, struct FBindingAction* StructInitializer_47948F274BB317E8B04651A76325C07B, struct FBindingAction* StructInitializer_2C7DCF9941FDA96A661D95A9E6A64B45, struct FBindingAction* StructInitializer_DC6795A441D779407355E39DA63AF1B4, struct FBindingAction* StructInitializer_130FCDE64436B21F5BB817A295136CCE, struct FBindingAction* StructInitializer_5811EF4D4517784179B1E5ABC6C6A37A, struct FBindingAction* StructInitializer_EE2CE16843E13A6C83F92A8221ED3FFA, struct FBindingAction* StructInitializer_DFA385104A76D7C60CE414BF0E96898F, struct FBindingAction* StructInitializer_9827FF9041AEE981F430AC918B7DA21F, struct FBindingAction* StructInitializer_7ADE15FE4A7FF558D5824D80597DA882, struct FBindingAction* StructInitializer_FEED32724AFA0B2BE3933B8E770CCBB5, struct FBindingAction* StructInitializer_E69A84864A798D563E64E095BE33AE73, struct FBindingAction* StructInitializer_A648835E4AD471A518887F90C48BE569, struct FBindingAction* StructInitializer_173FC8A44663DBA3B0CBBFBE607DDE50, struct FBindingAction* StructInitializer_9323D8084B4B7E7D02C2669694A69A70, struct FBindingAction* StructInitializer_D37E0CD541A54DE929E275BE31756F77, struct FBindingAction* StructInitializer_EBE974A1475C907C7F98F1B4030EA525, struct FBindingAction* StructInitializer_19D4FB7E45B95F64891C7491DB044BB9, struct FBindingAction* StructInitializer_1FFBCD724842C98F8C53D0B2752785C7, struct FBindingAction* StructInitializer_90C72E3745FF4DA04F3BCB8AF5E8CAB4, struct FBindingAction* StructInitializer_C4BEAA2E4F6F943753C087A93AD2C8CD );
	void UpdateTargetSelect ( class APlayerController_TA* PC );
	struct FName GetKeyForAction ( struct FName Action, unsigned long bGamepad );
	struct FString GetUIKeyForAction ( struct FName Action, unsigned long bGamepad );
	bool IsUsingMouseInput ( struct FName Action, struct FName Key );
	void RemoveBindingsFromArray ( struct FName Category, TArray< struct FPlayerBinding >* OutBindings );
	void RemoveBindings ( struct FName Category );
	bool IsKeyPressed ( struct FName Key );
	void eventPlayerInput ( float DeltaTime );
	void HandleActiveBindingsChanged ( class UProfile_TA* Profile );
	void HandleControlPresetChanged ( class UProfile_TA* Profile );
	void InitFromProfile ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_TA::pClassPointer = NULL;

// Class TAGame.__AchievementManager_TA__HandleTradeInComplete
// 0x0001 (0x003D - 0x003C)
class U__AchievementManager_TA__HandleTradeInComplete : public UObject
{
public:
	unsigned char                                      PrevQuality;                                      		// 0x003C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60030 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UOnlineProduct_TA* P );
};

UClass* U__AchievementManager_TA__HandleTradeInComplete::pClassPointer = NULL;

// Class TAGame.GFxData_ProductTradeIn_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_ProductTradeIn_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FTradeInDropTable >                 DropTables;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     InvalidProductString;                             		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventTradeInComplete__Delegate;                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60037 ];

		return pClassPointer;
	};

	class UProfile_TA* GetProfile ( );
	void OnTradeInFailed ( );
	void OnTradeInComplete ( );
	void HandleTradeInComplete ( class URPC_ProductsTradeIn_TA* RPC, TArray< class UOnlineProduct_TA* >* MapLocal_11A360614B3393163A7AA6AC9944DF85 );
	void TradeIn ( );
	bool IsProcessingTrade ( );
	void EventTradeInComplete ( class UGFxData_ProductTradeIn_TA* GFxData, TArray< class UOnlineProduct_TA* > Given, TArray< class UOnlineProduct_TA* > Received );
};

UClass* UGFxData_ProductTradeIn_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsTradePlayerStatus_TA
// 0x0074 (0x0110 - 0x009C)
class URPC_ProductsTradePlayerStatus_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	struct FGuid                                       TradeId;                                          		// 0x00E4 (0x0010) [0x0000000000000000]              
	unsigned long                                      bIsComplete : 1;                                  		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FOnlineProductData >                ProductData;                                      		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60043 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	bool HasCompleted ( );
	class URPC_ProductsTradePlayerStatus_TA* SetTradeId ( struct FGuid InTradeId );
	class URPC_ProductsTradePlayerStatus_TA* SetLocalPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsTradePlayerStatus_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameParty_TA
// 0x00C4 (0x03C8 - 0x0304)
class UOnlineGameParty_TA : public UOnlineGameParty_X
{
public:
	TArray< struct FPartyMemberLoadout >               PartyLoadouts;                                    		// 0x0304 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FStoredPartyMessage >               StoredPartyMessages;                              		// 0x0310 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxPartyMessages;                                 		// 0x031C (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerJoinPartyString;                            		// 0x0320 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerLeavePartyString;                           		// 0x032C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerNewLeaderPartyString;                       		// 0x0338 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UProductAssetCache_TA*                       AssetCache;                                       		// 0x0344 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventPartyMemberLoadoutChange__Delegate;        		// 0x0348 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x034C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPartyMemberLoadoutRemoved__Delegate;       		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x035C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradeProductUpdate__Delegate;              		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x036C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradeVerify__Delegate;                     		// 0x0378 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x037C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradeVerifyTimeOut__Delegate;              		// 0x0388 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x038C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerError__Delegate;                		// 0x0398 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x039C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerStart__Delegate;                		// 0x03A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x03AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerComplete__Delegate;             		// 0x03B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData07[ 0x4 ];                             		// 0x03BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60046 ];

		return pClassPointer;
	};

	void RepopulateChatHistory ( );
	void HandleChatMessage ( class UOnlineMessageComponent_X* Component, class UPartyMessage_Chat_TA* InChatMessage );
	void SendPartyLobbyMessage ( struct FString Message );
	void HandleTradePlayerComplete ( class URPC_ProductsTradePlayerStatus_TA* RPC );
	void CheckTradeStatus ( );
	void HandleStartTradePlayerComplete ( class URPC_ProductsTradePlayer_TA* RPC );
	void SendTradeToBackEnd ( );
	void HandleVerifyTrade ( class URPC_ProductsLoadoutGet_TA* RPC );
	void HandleVerifyTradeTimeOut ( );
	void SendVerifyTradeToBackEnd ( );
	void HandleTradeProductUpdate ( class UOnlineMessageComponent_X* Component, class UObject* Message );
	void SetPartyMessageHandlerTradeProductUpdate ( unsigned long bAddHandler );
	void TradeProductUpdate ( struct FOnlineProductData ProductData, unsigned long bAddProduct );
	bool IsProcessingTrade ( );
	bool CanAcceptTrade ( );
	void UpdateOnlineProducts ( struct FPartyMemberLoadout* Loadout );
	void HandleDisableCrossPlayChanged ( class UProfile_TA* P );
	bool UseGroupMMR ( );
	void UpdateAssetCache ( );
	void HandleGameEventFinished ( class AGameEvent_TA* GameEvent );
	bool WantsToFollowTheLeaderOutOfGame ( );
	int BuildMatchmakingRestrictions ( );
	void HandlePrimaryPlayerSet ( class APlayerController_Menu_TA* PC );
	void BroadcastPlayerLoadout ( struct FPartyMemberLoadout MemberLoadout );
	struct FPartyMemberLoadout CreatePartyMemberLoadout ( class ULocalPlayer_TA* Player );
	void BroadcastLocalPlayerLoadoutsDelayed ( );
	void BroadcastLocalPlayerLoadouts ( );
	void BroadcastAllLocalPlayers ( );
	void HandleLoadoutMessage ( class UOnlineMessageComponent_X* Component, class UObject* Message );
	void HandlePreviewTeamChange ( class UProfile_TA* InProfile, int InPreviewTeamIndex );
	void BroadcastPendingLocalPlayerLoadouts ( );
	void HandleJoinLobby ( unsigned long bWasSuccessful, struct FString Error, struct FActiveLobbyInfo* LobbyInfo, struct FUniqueLobbyId* LobbyUID );
	void HandleLoadoutChange ( class UProfile_TA* InProfile, class ULoadout_TA* Loadout );
	void RemovePartyMemberByLocalPlayer ( class ULocalPlayer* Player );
	void OnPartyLeaderChanged ( );
	void OnNewLobby ( );
	void RemovePartyMemberByID ( struct FUniqueNetId MemberId );
	void HandleLocalPlayerLeave ( class ULocalPlayer* Player );
	void OnEditExistingPartyMember ( int MemberIdx );
	void OnAddNewPartyMember ( int MemberIdx );
	void RefreshLoadouts ( int MemberIdx );
	void ClearPartyChat ( );
	void AddPartyServiceLobbyMessage ( struct FString Message );
	int LocalPlayerSort ( struct FPartyMemberLoadout Left, struct FPartyMemberLoadout Right );
	void SetLoadout ( class ULocalPlayer* Player, struct FPartyMemberLoadout* Loadout );
	void HandleProfileSet ( class ULocalPlayer_TA* P );
	void OnInit ( );
	void EventTradePlayerComplete ( class UOnlineGameParty_TA* PartyObject, class URPC_ProductsTradePlayerStatus_TA* RPC );
	void EventTradePlayerStart ( class UOnlineGameParty_TA* P, struct FGuid TradeId );
	void EventTradePlayerError ( class UOnlineGameParty_TA* PartyObject, class URPC_X* RPC );
	void EventTradeVerifyTimeOut ( class UOnlineGameParty_X* PartyObject );
	void EventTradeVerify ( class UOnlineGameParty_X* PartyObject, TArray< class UOnlineProduct_TA* > ProductData );
	void EventTradeProductUpdate ( class UOnlineGameParty_TA* PartyObject, struct FOnlineProductData ProductData, unsigned long bAddProduct );
	void EventPartyMemberLoadoutRemoved ( );
	void EventPartyMemberLoadoutChange ( );
};

UClass* UOnlineGameParty_TA::pClassPointer = NULL;

// Class TAGame.MatchType_TA
// 0x0010 (0x004C - 0x003C)
class UMatchType_TA : public UObject
{
public:
	class AGameEvent_TA*                               GameEvent;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned long                                      bPreAssignedTeams : 1;                            		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                WaitForPlayersTime;                               		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              WaitingForPlayersStartTime;                       		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60059 ];

		return pClassPointer;
	};

	bool AllowMatchAdmin ( );
	bool ChooseTeam ( int TeamIndex, class APlayerController_TA* Player );
	bool CanRestartPlayer ( class AController* NewPlayer );
	bool AutoSelectTeam ( class AController* NewPlayer );
	class ATeam_TA* PickTeam ( class AController* C );
	bool CanCheckForBannedPlayers ( );
	bool ShouldSubmitMatchComplete ( );
	bool UseCustomMatchSettings ( );
	bool CanIncreaseMaxTeamSize ( );
	void OnStartWaitingForPlayers ( );
	bool IsOnlineMultiplayer ( );
	bool ShouldSetGameOwner ( );
	bool CanCheckForForfeit ( );
	bool ShouldCancelMatch ( );
	bool ShouldStartMatch ( );
	struct FName GetMatchTypeName ( );
	bool RecordPlayedMap ( );
	bool AllowSpectators ( );
	void OnPlayerAddedToTeam ( );
	bool CanRematchVote ( );
	bool CanUpdateStats ( );
	int GetMaxTeamSize ( );
	bool CanChangeTeam ( );
	bool GiveExtraXP ( );
	bool CanIdleKick ( );
	void OnInitGameEvent ( );
	class UOnlineGameLanServer_X* GetOnlineGameLanServer ( );
	class UOnlineGameDedicatedServer_TA* GetOnlineGameDedicatedServer ( );
	class UOnlineGame_Base_X* GetOnlineGame ( );
	bool AllPlayersHaveACar ( );
	void InitCustomMatchSettings ( struct FCustomMatchSettings Settings );
	void Init ( class AGameEvent_TA* InGameEvent, struct FString Options );
};

UClass* UMatchType_TA::pClassPointer = NULL;

// Class TAGame.MatchType_Public_TA
// 0x0000 (0x004C - 0x004C)
class UMatchType_Public_TA : public UMatchType_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60058 ];

		return pClassPointer;
	};

	bool ChooseTeam ( int TeamIndex, class APlayerController_TA* Player );
	bool CanRestartPlayer ( class AController* NewPlayer );
	bool AutoSelectTeam ( class AController* NewPlayer );
	bool CanCheckForBannedPlayers ( );
	bool ShouldSubmitMatchComplete ( );
	bool IsOnlineMultiplayer ( );
	bool CanCheckForForfeit ( );
	bool CanUpdateStats ( );
	bool CanRematchVote ( );
	bool CanIdleKick ( );
	class ATeam_TA* PickTeamFromReservations ( class AController* C );
	class ATeam_TA* PickTeam ( class AController* C );
	int GetMaxTeamSize ( );
	bool ShouldCancelMatch ( );
	bool ShouldStartMatch ( );
	void OnStartWaitingForPlayers ( );
	bool GiveExtraXP ( );
	struct FName GetMatchTypeName ( );
};

UClass* UMatchType_Public_TA::pClassPointer = NULL;

// Class TAGame.MatchType_PublicRanked_TA
// 0x0000 (0x004C - 0x004C)
class UMatchType_PublicRanked_TA : public UMatchType_Public_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60060 ];

		return pClassPointer;
	};

	bool ShouldCancelMatch ( );
	bool ShouldStartMatch ( );
};

UClass* UMatchType_PublicRanked_TA::pClassPointer = NULL;

// Class TAGame.__AchievementManager_TA__HasItemQualityEquipped
// 0x0001 (0x003D - 0x003C)
class U__AchievementManager_TA__HasItemQualityEquipped : public UObject
{
public:
	unsigned char                                      Quality;                                          		// 0x003C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60075 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UOnlineProduct_TA* P );
};

UClass* U__AchievementManager_TA__HasItemQualityEquipped::pClassPointer = NULL;

// Class TAGame.GameEvent_Breakout_TA
// 0x0018 (0x07E0 - 0x07C8)
class AGameEvent_Breakout_TA : public AGameEvent_Soccar_TA
{
public:
	unsigned long                                      bOnlyResetScoredOnTeam : 1;                       		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bResetOvertime : 1;                               		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      LastScoredOnTeam;                                 		// 0x07CC (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __EventPlatformDamaged__Delegate;                 		// 0x07D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x07D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60116 ];

		return pClassPointer;
	};

	void HandleDamageStateChanged ( class ABreakOutActor_Platform_TA* Platform, struct FBreakoutDamageState InState );
	void HandlePlatformDamaged ( class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball );
	void HandleGoalScored ( class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex );
	void ResetAllBreakoutMeshes ( );
	bool ShouldResetPlatform ( class ABreakOutActor_Platform_TA* BOM );
	void eventPostBeginPlay ( );
	void EventPlatformDamaged ( class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball );
};

UClass* AGameEvent_Breakout_TA::pClassPointer = NULL;

// Class TAGame.XPManager_TA
// 0x0024 (0x0060 - 0x003C)
class UXPManager_TA : public UObject
{
public:
	int                                                LevelCap;                                         		// 0x003C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Level_Max;                                        		// 0x0040 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Level_XPBaseStep;                                 		// 0x0044 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Level_XPBucketSize;                               		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Level_XPIncrementAmt;                             		// 0x004C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Level_XPBaseRequirement;                          		// 0x0050 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FTitleInfo >                        Titles;                                           		// 0x0054 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60128 ];

		return pClassPointer;
	};

	int GetTotalXPRequiredForLevel ( int Level );
	struct FString DetermineLevelTitle ( int Level );
	int CalculateRequiredXPForLevel ( int Level );
	int CalculatePlayerLevel ( int XP, unsigned long bShowLog );
	bool AllProductsUnlocked ( class UProfile_TA* Profile, TArray< class UProductSlot_TA* >* ArrayResultLocal_31DC19FD4EC3310C1C3FBFAEF0FC9398 );
	void PruneSkinsForLockedCars ( class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile, TArray< int >* LockedProductIDs );
	int PickRandomItemFromSlot ( class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile );
	bool SlotContainsLockedProducts ( class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile );
	bool SlotContainsLockedDropProducts ( class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile );
	class UProductSlot_TA* PickRandomSlot ( class UProfile_TA* Profile, TArray< class UProductSlot_TA* >* ArrayResultLocal_0783EC2E42D2295561F220965E839DE5, TArray< class UProductSlot_TA* >* FilterLocal_3258A87C43EFFF3C41DA5DAF25F1E42C );
	int GetRandomLockedProductID ( class UProfile_TA* Profile );
};

UClass* UXPManager_TA::pClassPointer = NULL;

// Class TAGame.OnlineSaveData_TA
// 0x0018 (0x0054 - 0x003C)
class UOnlineSaveData_TA : public UObject
{
public:
	TArray< int >                                      Products;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSaveDataSetProperties                      SetProperties;                                    		// 0x0048 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60238 ];

		return pClassPointer;
	};

	void ReconcileUniqueArrayName ( TArray< struct FName >* Destination, TArray< struct FName >* Source );
	void ReconcileUniqueArrayString ( TArray< struct FString >* Destination, TArray< struct FString >* Source );
	void ReconcileQMax ( );
	void ReconcileMax ( int* Left, int* Right );
	void ReconcileFMax ( float* Left, float* Right );
	bool NeedsUpload ( );
	void StaticUnlockProduct ( int ProductID, TArray< int >* OutProducts );
	void UnlockProduct ( int ProductID );
	void Reconcile ( class USaveData_TA* SaveData );
	void Init ( class USaveData_TA* SaveData );
};

UClass* UOnlineSaveData_TA::pClassPointer = NULL;

// Class TAGame.ActivityFeedManager_TA
// 0x0008 (0x0060 - 0x0058)
class UActivityFeedManager_TA : public UTickableStateObject_X
{
public:
	class APlayerControllerBase_TA*                    PC;                                               		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60247 ];

		return pClassPointer;
	};

	TArray< struct FString > GetFriendsPlayedAgainst ( class AGameEvent_TA* GameEvent );
	void CheckFriendsPlayedAgainst ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleMatchWinnerSet ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleProductUnlocked ( class USaveData_TA* Data, int ProductID );
	void HandleChampionshipAmountChanged ( class UAchievementManager_TA* Manager, int Wins );
	void HandleRegularSeasonAmountChanged ( class UAchievementManager_TA* Manager, int Amount );
	void HandleNewMVPScore ( class UAchievementManager_TA* Manager, int Score );
	void HandleGameEventAmountWon ( class UAchievementManager_TA* Manager, int GamesWon );
	void HandleShotAmountBlocked ( class UAchievementManager_TA* Manager, int bLocked );
	void HandleGoalAmountScored ( class UAchievementManager_TA* Manager, int Score );
	void HandleDistanceDriven ( class UAchievementManager_TA* Manager, float Distance );
	void HandleGameEventChanged ( class APRI_TA* PRI );
	void UpdatePRI ( class APRI_TA* PRI );
	void HandleReceivedPRI ( class APlayerController_X* InPC );
	void Init ( class APlayerControllerBase_TA* InPC );
	void PostActivtyFeedSingleString ( unsigned char ActivityFeedID, struct FString ReplaceString );
	void PostActivityFeedMessage ( unsigned char ActivityFeedID, TArray< struct FString > StringReplaceList );
};

UClass* UActivityFeedManager_TA::pClassPointer = NULL;

// Class TAGame.OnlinePlayer_TA
// 0x0018 (0x0160 - 0x0148)
class UOnlinePlayer_TA : public UOnlinePlayer_X
{
public:
	class UAchievementManager_TA*                      AchievementManagerArchetype;                      		// 0x0148 (0x0004) [0x0000000000000000]              
	class UAchievementManager_TA*                      AchievementManager;                               		// 0x014C (0x0004) [0x0000000000000000]              
	class UActivityFeedManager_TA*                     ActivityFeedManager;                              		// 0x0150 (0x0004) [0x0000000000000000]              
	class UPlayerProgressionManager_TA*                PlayerProgressionManager;                         		// 0x0154 (0x0004) [0x0000000000000000]              
	class UPlayerProgressionManager_TA*                PlayerProgressionManagerArchetype;                		// 0x0158 (0x0004) [0x0000000000000000]              
	class UPersonas_TA*                                Personas;                                         		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60263 ];

		return pClassPointer;
	};

	void GetPlayersLikesDislikes ( class UGameSettingPlaylist_X* Playlist, TArray< struct FName >* PlayerLikes, TArray< struct FName >* PlayerDislikes );
	void HandleReceivedController ( class UPlayer* PlayerRef );
	void InitPlayer ( );
};

UClass* UOnlinePlayer_TA::pClassPointer = NULL;

// Class TAGame.AdManager_TA
// 0x0038 (0x0090 - 0x0058)
class UAdManager_TA : public UTickableStateObject_X
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0058 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.AdManager_TA.CacheDuration
	TArray< struct FCachedAdImageData >                CachedAdImages;                                   		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBillboardData >                    BillboardZoneMapping;                             		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FBillboardUpdateRequestData >       BillboardMeshUpdateRequests;                      		// 0x0078 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UOnlineImageDownloaderWeb_X*                 ImageDownloader;                                  		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentAdIndex;                                   		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URPC_AdsGet_TA*                              CurrentRPC;                                       		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60321 ];

		return pClassPointer;
	};

	void AddBillboardMeshRequest ( class UStaticMeshComponent* Mesh );
	void RequestBillboardMeshUpdate ( class UStaticMeshComponent* Mesh );
	void CompleteBillboardMeshRequests ( );
	class UTexture2DDynamic* GetCachedAdForZoneID ( int ZoneID );
	void HandleOnlineImageDownloaded ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage ImageInfo );
	void GetNextImage ( );
	void HandleGetImageURLResponse ( class URPC_AdsGet_TA* RPC );
	void ConstructAdRequest ( );
	void ClearAllRequests ( struct FString MapName );
	void ClearExpiredImages ( );
	void OnPsynetLoggedIn ( );
	void Init ( );
};

UClass* UAdManager_TA::pClassPointer = NULL;

// Class TAGame.RPC_AdsGet_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_AdsGet_TA : public URPC_X
{
public:
	struct FString                                     Language;                                         		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAdInfo >                           Ads;                                              		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60333 ];

		return pClassPointer;
	};

	class URPC_AdsGet_TA* SetLanguage ( struct FString InLanguage );
};

UClass* URPC_AdsGet_TA::pClassPointer = NULL;

// Class TAGame.AIProxy_TA
// 0x0058 (0x0094 - 0x003C)
class UAIProxy_TA : public UObject
{
public:
	class AActor*                                      Actor;                                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Location;                                         		// 0x0040 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Velocity;                                         		// 0x004C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    Rotation;                                         		// 0x0058 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Forward;                                          		// 0x0064 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Right;                                            		// 0x0070 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Up;                                               		// 0x007C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Speed;                                            		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Speed2D;                                          		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForwardSpeed;                                     		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60749 ];

		return pClassPointer;
	};

	void Update ( );
	void InitProxy ( class AAIManager_TA* AIManager, class AActor* inActor );
};

UClass* UAIProxy_TA::pClassPointer = NULL;

// Class TAGame.CarPreviewActor_TA
// 0x0114 (0x0310 - 0x01FC)
class ACarPreviewActor_TA : public AActor
{
public:
	int                                                ControllerId;                                     		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductLoader_TA*                           ProductLoader;                                    		// 0x0200 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCarMeshComponent_TA*                        CarMesh;                                          		// 0x0204 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0208 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UCarPreviewAnim_TA* >                AttachmentPreviewAnims;                           		// 0x020C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UCarPreviewAnim_TA* >                WheelAnims;                                       		// 0x0218 (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UCarPreviewAnim_TA*                          BodyAnim;                                         		// 0x0224 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCarPreviewAnim_TA*                          EngineAudioAnim;                                  		// 0x0228 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCarPreviewAnim_TA*                          EngineAudioAnimInstance;                          		// 0x022C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              SupersonicFakeSpeed;                              		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ATurnTableActor_TA*                          TurntableActor;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLoadoutData                                Loadout;                                          		// 0x0238 (0x0034) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLoadoutData                                OldLoadout;                                       		// 0x026C (0x0034) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UProductAsset_TA* >                  PreviewProducts;                                  		// 0x02A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AFXActor_X*                                  BoostFX;                                          		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductSlot_TA*                             PreviewSlot;                                      		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATeam_TA*                                    TeamArchetype;                                    		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PlayerName;                                       		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AFXActor_X*                                  BodyFX;                                           		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_Boost_TA*                      BoostAsset;                                       		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_SupersonicTrail_TA*            SupersonicAsset;                                  		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLockLoadout : 1;                                 		// 0x02D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAddToCarPreviewList : 1;                         		// 0x02D0 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class AFXActor_TA* >                       SupersonicFX;                                     		// 0x02D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UProductAsset_EngineAudio_TA*                EngineAudioAsset;                                 		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UEngineAudioPreviewBase_TA*                  EngineAudioPreview;                               		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LinkedControllerId;                               		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkParamGroup*                               Ak;                                               		// 0x02EC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventInitializeComponents__Delegate;            		// 0x02F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __ProductApplicatorDelegate__Delegate;            		// 0x0300 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0304 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60841 ];

		return pClassPointer;
	};

	void RefreshLoadout ( class UProfile_TA* Profile );
	int GetTeamIndex ( class UProfile_TA* Profile );
	void SetTeamIndex ( class UProfile_TA* Profile, int TeamIndex );
	class ULoadoutSet_TA* GetLoadoutSet ( class UProfile_TA* Profile );
	void SetLoadoutSet ( class ULoadoutSet_TA* InLoadoutSet, int InTeamIndex );
	void EnableTick ( unsigned long bEnable );
	void DestroyTurnTableActor ( );
	void ResetColors ( );
	void SetLockLoadout ( unsigned long bInLock );
	void BuildOnlineLoadout ( struct FLoadoutData* InLoadout, struct FClientLoadoutOnlineData* OnlineLoadout );
	void UpdateParticlesFakeVelocity ( );
	struct FRotator GetSMRotation ( );
	void SetSMRotation ( float DeltaTime, float YawInput, unsigned long bGamepad );
	void SetTurnTableActor ( class ATurnTableActor_TA* InTurnTableActor, struct FRotator StartRotation );
	void FindTurnTableActor ( );
	void eventOnOwnerChanged ( );
	void Tick ( float DeltaTime );
	void SetPreviewHidden ( unsigned long bHide );
	void SetPlayerName ( struct FString InPlayerName );
	void AnimateBody ( );
	void AnimateWheels ( );
	void AnimateAttachment ( class UProductSlot_TA* Slot, class UPrimitiveComponent* AttachmentComponent, struct FName CustomAnimName );
	void AnimateAntenna ( class UAntennaComponent_TA* AntennaArchetype );
	class UPrimitiveComponent* FindAttachmentComponent ( class UProductSlot_TA* Slot, struct FProductAttachment* AttachStruct );
	void AnimateSlotChange ( class UProductAsset_TA* Product );
	class UActorComponent* FindAttachmentByArchetype ( class UActorComponent* InArchetype );
	class UStaticMeshComponent* FindSMAttachmentByAsset ( class UStaticMesh* Mesh );
	class USkeletalMeshComponent* FindSKAttachmentByAsset ( class USkeletalMesh* Mesh );
	void UpdateTranslations ( );
	void ClearBodyFX ( );
	void ClearBoostFX ( );
	void ClearComponents ( );
	void InitSupersonicFX ( );
	void InitEngineAudioFX ( );
	void InitBoostFX ( );
	void InitBodyFX ( );
	void InitComponents ( );
	void HandleAllProductsLoaded ( class UProductLoader_TA* Loader );
	void UpdateBoostFX ( );
	void SetPreviewSlot ( class UProductSlot_TA* InSlot );
	void ChangeCarPart ( int SlotIndex, int ProductID, int TeamPaintIndex );
	void ForceSetLoadout ( struct FLoadoutData* InLoadout );
	void SetLoadout ( struct FLoadoutData* InLoadout );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void ProductApplicatorDelegate ( class UProductAsset_TA* Asset );
	void EventInitializeComponents ( class ACarPreviewActor_TA* PreviewActor );
};

UClass* ACarPreviewActor_TA::pClassPointer = NULL;

// Class TAGame.AttachmentAnim_TA
// 0x000C (0x0054 - 0x0048)
class UAttachmentAnim_TA : public UAttachmentBehavior_TA
{
public:
	class UAnimSet*                                    AnimSet;                                          		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName;                                         		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60919 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* UAttachmentAnim_TA::pClassPointer = NULL;

// Class TAGame.DamageComponent_TA
// 0x0008 (0x009C - 0x0094)
class UDamageComponent_TA : public UDamageComponent_X
{
public:
	float                                              RBImpulse;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBVelocityChange;                                 		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61006 ];

		return pClassPointer;
	};

	void Reset ( );
	class UDamageComponent_X* ScaleDamage ( float InScale );
};

UClass* UDamageComponent_TA::pClassPointer = NULL;

// Class TAGame.BallCamTarget_TA
// 0x001C (0x0088 - 0x006C)
class UBallCamTarget_TA : public UActorComponent_X
{
public:
	struct FVector                                     LocalTranslation;                                 		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldTranslation;                                 		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61050 ];

		return pClassPointer;
	};

	void eventDetached ( );
	void eventAttached ( );
	struct FVector GetFocus ( );
};

UClass* UBallCamTarget_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_CarTouchBall_TA
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_CarTouchBall_TA : public USequenceEvent
{
public:
	unsigned long                                      bOneTouchOnly : 1;                                		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61217 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CarTouchBall_TA::pClassPointer = NULL;

// Class TAGame.Ball_Tutorial_TA
// 0x0000 (0x0810 - 0x0810)
class ABall_Tutorial_TA : public ABall_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61313 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};

UClass* ABall_Tutorial_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_BallInRange_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_BallInRange_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61351 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_BallInRange_TA::pClassPointer = NULL;

// Class TAGame.BTAction_BlockGoal
// 0x0004 (0x0158 - 0x0154)
class UBTAction_BlockGoal : public UBTAction_MoveTo
{
public:
	float                                              GoalRadius;                                       		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61520 ];

		return pClassPointer;
	};

	unsigned char OnTargetExecute ( );
	void OnInit ( );
};

UClass* UBTAction_BlockGoal::pClassPointer = NULL;

// Class TAGame.BTAction_DivertBall
// 0x0000 (0x016C - 0x016C)
class UBTAction_DivertBall : public UBTAction_HitBall
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61551 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* UBTAction_DivertBall::pClassPointer = NULL;

// Class TAGame.BTAction_Jump
// 0x000C (0x0114 - 0x0108)
class UBTAction_Jump : public UBTAction_Target
{
public:
	float                                              MinJumpTime;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetRadiusHeightScale;                          		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StateStartTime;                                   		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61554 ];

		return pClassPointer;
	};

	float GetImpactTime ( );
	float GetStateTime ( );
	void GotoJumpState ( struct FName StateName );
	unsigned char eventOnStart ( );
};

UClass* UBTAction_Jump::pClassPointer = NULL;

// Class TAGame.BTAction_DodgeHit
// 0x0018 (0x012C - 0x0114)
class UBTAction_DodgeHit : public UBTAction_Jump
{
public:
	float                                              FlipAmount;                                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   AimTarget;                                        		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DodgeDirection;                                   		// 0x011C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              DodgeTime;                                        		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61580 ];

		return pClassPointer;
	};

	struct FVector GetDodgeVelocity ( struct FVector DodgeInput );
	unsigned char eventOnStart ( );
	float GetImpactTime ( );
};

UClass* UBTAction_DodgeHit::pClassPointer = NULL;

// Class TAGame.BTAction_Face
// 0x001C (0x0124 - 0x0108)
class UBTAction_Face : public UBTAction_Target
{
public:
	float                                              ReachAngle;                                       		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTravel;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMovingForward : 1;                               		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FVector                                     StartLocation;                                    		// 0x0118 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61631 ];

		return pClassPointer;
	};

	unsigned char OnTargetExecute ( );
	void SetMovingForward ( unsigned long bForward );
	unsigned char eventOnStart ( );
};

UClass* UBTAction_Face::pClassPointer = NULL;

// Class TAGame.BTAction_PowerSlide
// 0x0014 (0x011C - 0x0108)
class UBTAction_PowerSlide : public UBTAction_Target
{
public:
	unsigned long                                      bReverse : 1;                                     		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Delay;                                            		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   TurnTarget;                                       		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Steer;                                            		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                startYaw;                                         		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61651 ];

		return pClassPointer;
	};

	unsigned char OnTargetExecute ( );
	unsigned char eventOnStart ( );
};

UClass* UBTAction_PowerSlide::pClassPointer = NULL;

// Class TAGame.BTAction_Test
// 0x0018 (0x016C - 0x0154)
class UBTAction_Test : public UBTAction_MoveTo
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0154 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     AimLocation;                                      		// 0x0160 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61669 ];

		return pClassPointer;
	};

	bool GetAimDir ( struct FVector Destination, struct FVector* AimDir );
	unsigned char OnTargetExecute ( );
	unsigned char eventOnStart ( );
	struct FVector GetRandomFieldLocation ( );
};

UClass* UBTAction_Test::pClassPointer = NULL;

// Class TAGame.BTAction_WallBounce
// 0x0000 (0x0080 - 0x0080)
class UBTAction_WallBounce : public UBTAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61683 ];

		return pClassPointer;
	};

};

UClass* UBTAction_WallBounce::pClassPointer = NULL;

// Class TAGame.BTC_AreaClear
// 0x000C (0x017C - 0x0170)
class UBTC_AreaClear : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Source;                                           		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SourcePredictionTime;                             		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61714 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void eventOnInit ( );
};

UClass* UBTC_AreaClear::pClassPointer = NULL;

// Class TAGame.BTC_Between
// 0x0010 (0x00B4 - 0x00A4)
class UBTC_Between : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Start;                                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   End;                                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngleLessThan;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngleGreaterThan;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61725 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_Between::pClassPointer = NULL;

// Class TAGame.BTC_Boost
// 0x000C (0x00B0 - 0x00A4)
class UBTC_Boost : public UBTC_ProxyBase
{
public:
	float                                              BoostAmountLessThan;                              		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostAmountGreaterThan;                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFull : 1;                                        		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotFull : 1;                                     		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61736 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_Boost::pClassPointer = NULL;

// Class TAGame.BTC_BounceHeight
// 0x0008 (0x0178 - 0x0170)
class UBTC_BounceHeight : public UBTC_TargetBase
{
public:
	float                                              HeightLessThan;                                   		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightGreaterThan;                                		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61746 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_BounceHeight::pClassPointer = NULL;

// Class TAGame.BTC_CanJumpTo
// 0x0000 (0x0178 - 0x0178)
class UBTC_CanJumpTo : public UBTC_BounceHeight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61756 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_CanJumpTo::pClassPointer = NULL;

// Class TAGame.BTC_ClosestTime
// 0x0008 (0x01C0 - 0x01B8)
class UBTC_ClosestTime : public UBTC_Target
{
public:
	float                                              TimeGreaterThan;                                  		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeLessThan;                                     		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61781 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_ClosestTime::pClassPointer = NULL;

// Class TAGame.BTC_ClosestTo
// 0x0008 (0x0178 - 0x0170)
class UBTC_ClosestTo : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDistance;                                    		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61788 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void eventOnInit ( );
};

UClass* UBTC_ClosestTo::pClassPointer = NULL;

// Class TAGame.BTC_JumpHit
// 0x0004 (0x0174 - 0x0170)
class UBTC_JumpHit : public UBTC_TargetBase
{
public:
	float                                              MinImpactTime;                                    		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61797 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void PredictJump ( float Time );
};

UClass* UBTC_JumpHit::pClassPointer = NULL;

// Class TAGame.BTC_DodgeHit
// 0x0008 (0x017C - 0x0174)
class UBTC_DodgeHit : public UBTC_JumpHit
{
public:
	float                                              FlipAmount;                                       		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpTime;                                         		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61809 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_DodgeHit::pClassPointer = NULL;

// Class TAGame.BTC_Facing
// 0x0000 (0x01B8 - 0x01B8)
class UBTC_Facing : public UBTC_Target
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61819 ];

		return pClassPointer;
	};

};

UClass* UBTC_Facing::pClassPointer = NULL;

// Class TAGame.BTC_FieldDistance
// 0x00E4 (0x0254 - 0x0170)
class UBTC_FieldDistance : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Goal;                                             		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   OtherGoal;                                        		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardGreaterThan;                               		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardLessThan;                                  		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideGreaterThan;                                  		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SideLessThan;                                     		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsSideGreaterThan;                               		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsSideLessThan;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseGoalOrientation : 1;                          		// 0x0190 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FBTProxyData                                GoalData;                                         		// 0x0194 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FBTProxyData                                OtherGoalData;                                    		// 0x01D4 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FBTProxyData                                MidFieldData;                                     		// 0x0214 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61821 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	struct FVector GetRelativeOffset ( struct FVector InLocation );
	void eventOnInit ( );
};

UClass* UBTC_FieldDistance::pClassPointer = NULL;

// Class TAGame.BTC_GameState
// 0x0008 (0x0064 - 0x005C)
class UBTC_GameState : public UBTCondition
{
public:
	struct FName                                       StateName;                                        		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61851 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void HandleGameStateChanged ( class AGameEvent_TA* GameEvent );
	void eventOnInit ( );
};

UClass* UBTC_GameState::pClassPointer = NULL;

// Class TAGame.BTC_HitLanding
// 0x0000 (0x0170 - 0x0170)
class UBTC_HitLanding : public UBTC_TargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61860 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void OnInit ( );
};

UClass* UBTC_HitLanding::pClassPointer = NULL;

// Class TAGame.BTC_Impact
// 0x0008 (0x01C0 - 0x01B8)
class UBTC_Impact : public UBTC_Target
{
public:
	float                                              TimeGreaterThan;                                  		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeLessThan;                                     		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61868 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_Impact::pClassPointer = NULL;

// Class TAGame.BTC_InCone
// 0x0010 (0x00B4 - 0x00A4)
class UBTC_InCone : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Source;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   Destination;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngleLessThan;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngleGreaterThan;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61875 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_InCone::pClassPointer = NULL;

// Class TAGame.BTC_Landing
// 0x0008 (0x01C0 - 0x01B8)
class UBTC_Landing : public UBTC_Target
{
public:
	float                                              LandTimeLessThan;                                 		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LandTimeGreaterThan;                              		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61888 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_Landing::pClassPointer = NULL;

// Class TAGame.BTC_Lock
// 0x000C (0x0068 - 0x005C)
class UBTC_Lock : public UBTCondition
{
public:
	struct FName                                       LockName;                                         		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumLocks;                                         		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61895 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void HandleLockRemoved ( struct FName InLockName );
	void HandleLockAdded ( struct FName InLockName );
	void ListenForLocks ( class UBTLockCollection* Locks );
	void eventOnInit ( );
};

UClass* UBTC_Lock::pClassPointer = NULL;

// Class TAGame.BTC_SegmentDistance
// 0x0020 (0x00C4 - 0x00A4)
class UBTC_SegmentDistance : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Start;                                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBTTarget*                                   End;                                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartGreaterThan;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartLessThan;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndGreaterThan;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndLessThan;                                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsSideGreaterThan;                               		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AbsSideLessThan;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61909 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_SegmentDistance::pClassPointer = NULL;

// Class TAGame.BTC_Skill
// 0x0008 (0x0064 - 0x005C)
class UBTC_Skill : public UBTCondition
{
public:
	float                                              SkillGreaterThan;                                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkillLessThan;                                    		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61928 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void HandleSkillChanged ( class AAIController_TA* InAI );
	void eventOnInit ( );
};

UClass* UBTC_Skill::pClassPointer = NULL;

// Class TAGame.BTC_SoccarState
// 0x0008 (0x006C - 0x0064)
class UBTC_SoccarState : public UBTC_GameState
{
public:
	unsigned long                                      bKickoff : 1;                                     		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61937 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void HandleBallHit ( class AGameEvent_Soccar_TA* G );
	void eventOnInit ( );
};

UClass* UBTC_SoccarState::pClassPointer = NULL;

// Class TAGame.BTC_Stuck
// 0x0000 (0x005C - 0x005C)
class UBTC_Stuck : public UBTCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61948 ];

		return pClassPointer;
	};

	bool IsTouchingOtherCar ( );
	bool eventGetResult ( );
};

UClass* UBTC_Stuck::pClassPointer = NULL;

// Class TAGame.BTC_TeamSize
// 0x0008 (0x0064 - 0x005C)
class UBTC_TeamSize : public UBTCondition
{
public:
	int                                                MinTeamSize;                                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTeamSize;                                      		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61956 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void HandleMembersChanged ( class ATeam_TA* Team, class APRI_TA* PRI );
	void eventOnInit ( );
};

UClass* UBTC_TeamSize::pClassPointer = NULL;

// Class TAGame.BTC_TimeSinceBallHit
// 0x0014 (0x0070 - 0x005C)
class UBTC_TimeSinceBallHit : public UBTCondition
{
public:
	unsigned char                                      CheckTeam;                                        		// 0x005C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeGreaterThan;                                  		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeLessThan;                                     		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABall_TA*                                    Ball;                                             		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHitTime;                                      		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61970 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void HandleCarTouch ( class ABall_TA* InBall, class ACar_TA* HitCar, unsigned char HitType );
	void HandleBallChanged ( class AAIController_Soccar_TA* InAI );
	void OnInit ( );
};

UClass* UBTC_TimeSinceBallHit::pClassPointer = NULL;

// Class TAGame.BTC_Traits
// 0x0000 (0x005C - 0x005C)
class UBTC_Traits : public UBTCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61987 ];

		return pClassPointer;
	};

};

UClass* UBTC_Traits::pClassPointer = NULL;

// Class TAGame.BTC_Vehicle
// 0x0014 (0x00B8 - 0x00A4)
class UBTC_Vehicle : public UBTC_ProxyBase
{
public:
	unsigned long                                      bOnBack : 1;                                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotOnBack : 1;                                   		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bWheelsOnGround : 1;                              		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bWheelsNotOnGround : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              GroundNormalGreaterThan;                          		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundNormalLessThan;                             		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardSpeedGreaterThan;                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForwardSpeedLessThan;                             		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61989 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
};

UClass* UBTC_Vehicle::pClassPointer = NULL;

// Class TAGame.BTMoveModifier_Boost
// 0x0014 (0x0060 - 0x004C)
class UBTMoveModifier_Boost : public UBTMoveModifier
{
public:
	float                                              MinDistanceFromDestination;                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleFromCar;                                  		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleFromDestination;                          		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehiclePickup_Boost_TA*                     BoostPickup;                                      		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCheckTime;                                    		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62082 ];

		return pClassPointer;
	};

	class AVehiclePickup_Boost_TA* FindBoostPickup ( struct FVector Destination );
	void HandleBoostPickedUp ( class AVehiclePickup_TA* Pickup );
	void SetBoostPickup ( class AVehiclePickup_Boost_TA* NewPickup );
	void AdjustDestination ( struct FVector Goal, struct FVector* Destination );
};

UClass* UBTMoveModifier_Boost::pClassPointer = NULL;

// Class TAGame.VehiclePickup_Boost_TA
// 0x000C (0x024C - 0x0240)
class AVehiclePickup_Boost_TA : public AVehiclePickup_TA
{
public:
	float                                              BoostAmount;                                      		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UVehiclePickup_BoostModifier_TA*             Modifier;                                         		// 0x0244 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAkSoundCue*                                 LocalPickupSound;                                 		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62085 ];

		return pClassPointer;
	};

	void PlayPickedUpFX ( );
	void Pickup ( class ACar_TA* Car );
	void SetPickupType ( class UVehiclePickup_BoostModifier_TA* BoostModifierType );
	bool CanPickup ( class ACar_TA* Car );
};

UClass* AVehiclePickup_Boost_TA::pClassPointer = NULL;

// Class TAGame.ReplayDirector_TA
// 0x00D8 (0x02D4 - 0x01FC)
class AReplayDirector_TA : public AActor
{
public:
	float                                              SlomoPreScoreTime;                                		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoPostScoreTime;                               		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoDefendTime;                                  		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoDefendDistance;                              		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoTimeDilation;                                		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinReplayTime;                                    		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxReplayTime;                                    		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReplayPadding;                                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ReplayStartSound;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 SlomoStartSound;                                  		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 SlomoStopSound;                                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighlightReplayDuration;                          		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeBeforeHighlightReplay;                        		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UReplay_Soccar_TA*                           Replay;                                           		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      FocusCar;                                         		// 0x0234 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              FocusCarChangeTime;                               		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      FocusBall;                                        		// 0x023C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FBallHitInfo >                      BallTouches;                                      		// 0x0240 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       BallName;                                         		// 0x024C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScoreTime;                                        		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ScoreHitIndex;                                    		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGoal_TA*                                    ScoredGoal;                                       		// 0x025C (0x0004) [0x0000000004082028]              ( CPF_ExportObject | CPF_Net | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bSlomo : 1;                                       		// 0x0260 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bSlomoForDefender : 1;                            		// 0x0260 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoSave : 1;                                    		// 0x0260 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                FocusHitIndex;                                    		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FReplayFocusCar >                   FocusCars;                                        		// 0x0268 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                FocusCarIdx;                                      		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplayStartGameTime;                              		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BallSpawnTime;                                    		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0280 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ScoredOnTeam;                                     		// 0x0284 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FReplayScoreData                            ScoreData;                                        		// 0x0288 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PreviousScores[ 0x2 ];                            		// 0x0298 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ForceCutToFocusActors;                            		// 0x02A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventReplayFinished__Delegate;                  		// 0x02A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x02A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoreDataChanged__Delegate;                		// 0x02B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x02B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAutoSaveChanged__Delegate;                 		// 0x02C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x02C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62129 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void SetAutoSave ( );
	void SaveUserKeyframe ( );
	void BuildFocusCars ( );
	void SetSlomo ( unsigned long bNewSlomo );
	void eventTick ( float DeltaTime );
	void eventDestroyed ( );
	class AActor* GetReplayProxy ( struct FName ReplayActorName );
	float GetReplayTimeSeconds ( );
	void SetFocusActors ( class AActor* NewCar, class AActor* NewBall );
	float GetReplayStartTime ( );
	void SetSlomoForDefender ( class ABall_TA* Ball, int DefendingTeam );
	void OnScoreDataChanged ( );
	void GoalScored ( class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex );
	void HandleScoreUpdated ( class ATeam_TA* Team );
	void HandleAllTeamsCreated ( class AGameEvent_Team_TA* TeamGame );
	void RecordPlayers ( );
	void HandleGameStateChanged ( class AGameEvent_TA* G );
	void OnSoccarGameSet ( );
	void SetGameEvent ( class AGameEvent_Soccar_TA* InGameEvent );
	void eventReplicatedEvent ( struct FName VarName );
	void EventAutoSaveChanged ( class AReplayDirector_TA* Director );
	void EventScoreDataChanged ( class AReplayDirector_TA* Director );
	void EventReplayFinished ( class AReplayDirector_TA* Director );
};

UClass* AReplayDirector_TA::pClassPointer = NULL;

// Class TAGame.Camera_MainMenu_TA
// 0x001C (0x05E8 - 0x05CC)
class ACamera_MainMenu_TA : public ACamera_X
{
public:
	struct FVector                                     HandheldCamFrequency;                             		// 0x05CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HandheldCamAmplitude;                             		// 0x05D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCameraState_X*                              CurrentState;                                     		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62131 ];

		return pClassPointer;
	};

	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	class UCameraState_X* SelectCameraState ( );
	void SetCameraState ( struct FName StateName );
	class UCameraState_X* GetCameraStateByName ( struct FName StateName );
	void InstanceCameraStates ( );
};

UClass* ACamera_MainMenu_TA::pClassPointer = NULL;

// Class TAGame.CameraState_CarPreview_TA
// 0x0064 (0x00C0 - 0x005C)
class UCameraState_CarPreview_TA : public UCameraState_X
{
public:
	TArray< float >                                    SideOffsets;                                      		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCameraOrientation >                ViewOffsets;                                      		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BlendRate;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinPitch;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              MaxPitch;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	struct FCameraOrientation                          CurrentOrientation;                               		// 0x0080 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSideOffset;                                		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    RotationOffset;                                   		// 0x00B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UCameraState_PremiumGarage_TA*               PrevPremiumGarageState;                           		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62136 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void AdjustOutPOVCameraRotation ( struct FRotator AddedRotator, struct FCameraOrientation* OutPOV );
	void OnSnap ( );
	void PreviewFadeIn ( );
	void PreviewFadeOut ( class UCameraState_CarPreview_TA* InPrevState );
	void BeginCameraState ( );
	void GetAccumulatedOrientation ( struct FVector* out_Location, struct FRotator* out_Rotation, int* NumPreviewActors );
	void GetActorOrientation ( struct FCameraOrientation* OutPOV, float* OutSideOffset );
	void GetSingleActorOrientation ( class ACarPreviewActor_TA* ViewTarget, struct FVector* OutLoc, struct FRotator* OutRot );
};

UClass* UCameraState_CarPreview_TA::pClassPointer = NULL;

// Class TAGame.Camera_TA
// 0x00AC (0x0678 - 0x05CC)
class ACamera_TA : public ACamera_X
{
public:
	struct FSwivelExtent                               SwivelExtentSlow;                                 		// 0x05CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FSwivelExtent                               SwivelExtentFast;                                 		// 0x05D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwivelFastSpeed;                                  		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwivelDieRate;                                    		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        FOVLimits;                                        		// 0x05EC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        HeightLimits;                                     		// 0x05F8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        AngleLimits;                                      		// 0x0604 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        DistanceLimits;                                   		// 0x0610 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        StiffnessLimits;                                  		// 0x061C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        SwivelSpeedLimits;                                		// 0x0628 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        TransitionSpeedLimits;                            		// 0x0634 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HorizontalSplitscreenHeightOffset;                		// 0x0640 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HorizontalSplitscreenFOVOffset;                   		// 0x0644 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VerticalSplitscreenFOVOffset;                     		// 0x0648 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClipRate;                                         		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    CurrentSwivel;                                    		// 0x0650 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ARBActor_TA*                                 Demolisher;                                       		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDemolished : 1;                                  		// 0x0660 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class ACameraSettingsActor_TA*                     CameraSettings;                                   		// 0x0664 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventCameraTargetChanged__Delegate;             		// 0x0668 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x066C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62154 ];

		return pClassPointer;
	};

	void eventOnViewTargetChanged ( );
	float ClipToField ( float CameraLocationZ );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void Demolished ( class ARBActor_TA* InDemolisher );
	void ApplySwivel ( struct FCameraOrientation* OutPOV );
	struct FRotator GetDesiredSwivel ( float LookUp, float LookRight );
	void UpdateSwivel ( float DeltaTime );
	float GetDefaultFOVOffset ( );
	float GetDefaultViewHeightOffset ( );
	void UpdateAspectRatio ( struct FCameraOrientation* OutPOV );
	void PostProcessCameraState ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFOV ( );
	class ACameraSettingsActor_TA* GetCameraSettings ( );
	void ProcessCameraState ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void HandleRemoveLocalFX ( class UObject* SeqObj );
	void HandleAddLocalFX ( class UObject* SeqObj );
	void InitializeFor ( class APlayerController* PC );
	void EventCameraTargetChanged ( class ACamera_TA* Camera, class AActor* Target );
};

UClass* ACamera_TA::pClassPointer = NULL;

// Class TAGame.CameraSettingsActor_TA
// 0x003C (0x0238 - 0x01FC)
class ACameraSettingsActor_TA : public AReplicationInfo
{
public:
	float                                              UploadCameraDelay;                                		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APRI_TA*                                     PRI;                                              		// 0x0200 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FProfileCameraSettings                      ProfileSettings;                                  		// 0x0204 (0x001C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsingSecondaryCamera : 1;                        		// 0x0220 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsingBehindView : 1;                             		// 0x0220 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsingFreecam : 1;                                		// 0x0220 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned char                                      CameraPitch;                                      		// 0x0224 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CameraYaw;                                        		// 0x0225 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FScriptDelegate                             __EventCameraChanged__Delegate;                   		// 0x0228 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x022C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62187 ];

		return pClassPointer;
	};

	void FinishUploadCameraRotation ( );
	void UploadCameraRotation ( );
	void ServerSetCameraRotationReliable ( unsigned char Pitch, unsigned char Yaw );
	void ServerSetCameraRotation ( unsigned char Pitch, unsigned char Yaw );
	void SetCameraRotationInternal ( unsigned char Pitch, unsigned char Yaw );
	void SetCameraRotation ( unsigned char Pitch, unsigned char Yaw );
	void ServerSetUsingFreecam ( unsigned long bUsing );
	void SetUsingFreecam ( unsigned long bUsing );
	void ServerSetUsingBehindView ( unsigned long bUsing );
	void SetUsingBehindView ( unsigned long bUsing );
	void ServerSetUsingSecondaryCamera ( unsigned long bUsing );
	void SetUsingSecondaryCamera ( unsigned long bUsing );
	void ServerSetCameraSettings ( struct FProfileCameraSettings InSettings );
	void SetProfileSettings ( struct FProfileCameraSettings InSettings );
	void eventDestroyed ( );
	void eventOnOwnerChanged ( );
	void eventReplicatedEvent ( struct FName VarName );
	void EventCameraChanged ( class ACameraSettingsActor_TA* Actor );
};

UClass* ACameraSettingsActor_TA::pClassPointer = NULL;

// Class TAGame.GameViewportClient_TA
// 0x0074 (0x0200 - 0x018C)
class UGameViewportClient_TA : public UGameViewportClient_X
{
public:
	unsigned long                                      bSplitScreenDisabled : 1;                         		// 0x018C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateSplitscreenSizes : 1;                      		// 0x018C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDrawWorldFullScreen : 1;                         		// 0x018C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDrawBuildInfo : 1;                               		// 0x018C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	TArray< float >                                    LastSplitJoinTryTimes;                            		// 0x0190 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              UIScaleModifier;                                  		// 0x019C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventPostInit__Delegate;                        		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenTypeChanged__Delegate;          		// 0x01B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x01B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDrawWorldFullScreenChanged__Delegate;      		// 0x01C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x01C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUIScaleModifierUpdated__Delegate;          		// 0x01D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x01D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSafeZoneRatioUpdated__Delegate;            		// 0x01E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x01E4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUpdatedNumLocalPlayers__Delegate;          		// 0x01F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x01F4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62197 ];

		return pClassPointer;
	};

	void __GameViewportClient_TA__Init ( class AGameEvent_TA* _ );
	void __GameViewportClient_TA__Init1 ( class ULocalPlayer* _ );
	void __GameViewportClient_TA__Init2 ( class ULocalPlayer* _ );
	int __GameViewportClient_TA__AddSplitScreenPlayer ( class ULocalPlayer* LP );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void SetUIScaleModifier ( float Value );
	void SetSafeZone ( float Value );
	void HandlePrimaryPlayerChange ( class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary );
	int GetLocalPlayerCount ( );
	void NotifyOnNumLocalPlayersUpdated ( struct FScriptDelegate Callback );
	void UpdateNumLocalPlayers ( );
	float GetAspectRatio ( class ULocalPlayer* Player );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	void AddSplitScreenPlayer ( TArray< int >* MapLocal_7FE9E5E34F78A0B60D414B94A9EF4670 );
	void HandleUserSignInComplete_CreateSplitScreenPlayer ( unsigned char LocalUserNum );
	void InitiateAsyncLoginForSplitscreen ( int ControllerId );
	bool HandleSplitScreenJoinAsync ( int ControllerId );
	bool HandleKeyPress ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void SplitscreenJoinResponse ( struct FUniqueNetId PlayerID, unsigned long bAllow );
	void RequestSplitscreenJoin ( int ControllerId );
	bool GameEventAllowSplitScreenPlayer ( );
	void CreateSplitScreenPlayer ( int ControllerId );
	void HandleSplitscreenJoinPrivilegeCheck ( class UPrivilegeCheck_X* PrivilegeCheck );
	void TryToCreateSplitScreenPlayer ( int ControllerId );
	void HandleUserSwitchComplete ( unsigned char LocalUserNum );
	bool IsPlayingOnline ( );
	bool GameWantsFullScreen ( );
	void eventLayoutPlayers ( );
	void SetSplitscreenSizes ( );
	class APlayerControllerBase_TA* GetPrimaryPlayerController ( );
	void UpdateActiveSplitscreenType ( );
	void DrawTransition ( class UCanvas* Canvas );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	bool eventInit ( struct FString* OutError );
	void EventUpdatedNumLocalPlayers ( class UGameViewportClient_TA* GVC, int LocalPlayerCount );
	void EventSafeZoneRatioUpdated ( class UGameViewportClient_TA* GVC );
	void EventUIScaleModifierUpdated ( class UGameViewportClient_TA* GVC );
	void EventDrawWorldFullScreenChanged ( class UGameViewportClient_TA* GVC );
	void EventSplitScreenTypeChanged ( class UGameViewportClient_TA* GVC );
	void EventPostInit ( class UGameViewportClient_TA* GVC );
};

UClass* UGameViewportClient_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_AttachFX_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_AttachFX_TA : public USequenceAction
{
public:
	class UParticleSystemComponent*                    PSC;                                              		// 0x00FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62246 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_AttachFX_TA::pClassPointer = NULL;

// Class TAGame.Camera_Replay_TA
// 0x0024 (0x069C - 0x0678)
class ACamera_Replay_TA : public ACamera_TA
{
public:
	class UCameraState_X*                              KismetCameraState;                                		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FocusActorString;                                 		// 0x067C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       CameraMode;                                       		// 0x0688 (0x0008) [0x0000000000000000]              
	struct FName                                       DefaultCameraMode;                                		// 0x0690 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraState_Replay_TA*                      CurrentCameraState;                               		// 0x0698 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62261 ];

		return pClassPointer;
	};

	float ClipToField ( float CameraLocationZ );
	void UpdateAspectRatio ( struct FCameraOrientation* OutPOV );
	void UpdateFOV ( );
	void ApplySwivel ( struct FCameraOrientation* OutPOV );
	void SetFocusActor ( struct FString InFocusActorString );
	void SetCameraMode ( struct FName Mode );
	void UpdateCameraState ( );
	class UCameraState_X* GetCameraStateByName ( struct FName ArchetypeName );
	void eventUpdateCamera ( float DeltaTime );
	void InstanceCameraStates ( );
};

UClass* ACamera_Replay_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Replay_TA
// 0x0020 (0x007C - 0x005C)
class UCameraState_Replay_TA : public UCameraState_X
{
public:
	unsigned long                                      bLocalMovement : 1;                               		// 0x005C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClipToField : 1;                                 		// 0x005C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FString                                     FocusActorString;                                 		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      OldFocusActor;                                    		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OldFocusActorLocation;                            		// 0x0070 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62263 ];

		return pClassPointer;
	};

	class AActor* GetFocusActor ( );
	void UpdateFlyPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFocusActorPOV ( class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
	class UCameraState_X* GetProxyCameraState ( );
	bool ShouldClipToField ( );
	bool AllowSwivel ( );
	bool IsDisabled ( struct FString InFocusActorString );
};

UClass* UCameraState_Replay_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Director_TA
// 0x0020 (0x009C - 0x007C)
class UCameraState_Director_TA : public UCameraState_Replay_TA
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraStateSelector_TA*                     IdleSelector;                                     		// 0x0080 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCameraStateSelector_TA*                     CountdownSelector;                                		// 0x0084 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCameraStateSelector_TA*                     KickoffSelector;                                  		// 0x0088 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCameraStateSelector_TA*                     DefaultSelector;                                  		// 0x008C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCameraStateSelector_TA*                     CurrentSelector;                                  		// 0x0090 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCameraState_X*                              CurrentState;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62284 ];

		return pClassPointer;
	};

	bool ShouldClipToField ( );
	void UpdateSelector ( );
	void SetSelector ( class UCameraStateSelector_TA* InSelector );
	class UCameraState_X* GetProxyCameraState ( );
	void InitCameraState ( class UCameraState_X* InState );
	void InitSelector ( class UCameraStateSelector_TA* InSelector );
	void InitSelectors ( );
	void InitDirector ( );
};

UClass* UCameraState_Director_TA::pClassPointer = NULL;

// Class TAGame.CameraState_TA
// 0x000C (0x0068 - 0x005C)
class UCameraState_TA : public UCameraState_X
{
public:
	float                                              StateStartTime;                                   		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     Car;                                              		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACameraSettingsActor_TA*                     CameraSettings;                                   		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62302 ];

		return pClassPointer;
	};

	struct FProfileCameraSettings GetProfileCameraSettings ( );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	struct FRotator GetCarRotation ( );
	struct FVector GetCarLocation ( );
	bool IsOnGround ( );
	void BeginCameraState ( );
	bool ShouldExecute ( );
	bool UpdateCarRef ( );
};

UClass* UCameraState_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Car_TA
// 0x00D8 (0x0140 - 0x0068)
class UCameraState_Car_TA : public UCameraState_TA
{
public:
	float                                              InterpToAirRate;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpToGroundRate;                               		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVector                               FocusInterp;                                      		// 0x0070 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVector                               FocusOffsetInterp;                                		// 0x0094 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpVector                               DistanceInterp;                                   		// 0x00B8 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundRotationInterpRate;                         		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundRotationInterpRateWall;                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirVelocityInfluence;                             		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirVelocityInfluenceMaxSpeed;                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceSpeedScale;                               		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceOffsetMin;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeedFOV;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVInterpSpeed;                                   		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SupersonicFOV;                                    		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SupersonicFOVInterpSpeed;                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncyChassisScale;                               		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollScale;                                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirGroundBlend;                                   		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCameraOrientation                          ViewOffset;                                       		// 0x0110 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFirstExecution : 1;                              		// 0x013C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62325 ];

		return pClassPointer;
	};

	struct FViewTargetTransitionParams GetEndBlendParams ( class UCameraState_X* NewState );
	void UpdateInterpVector ( struct FVector NewValue, float DeltaTime, struct FInterpVector* Interp );
	void UpdateRotationModifiers ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateDistance ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateAirPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateGroundPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateAirAndGroundCamera ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFocus ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFocusWorldOffset ( float DeltaTime );
	void UpdateAirGroundBlend ( float DeltaTime );
	void UpdateViewOffset ( );
	void UpdateValidPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
};

UClass* UCameraState_Car_TA::pClassPointer = NULL;

// Class TAGame.CameraState_BallCam_TA
// 0x006C (0x01AC - 0x0140)
class UCameraState_BallCam_TA : public UCameraState_Car_TA
{
public:
	float                                              RotationRate;                                     		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchScale;                                       		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchFocusZFactor;                                		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchExtentMin;                                   		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchExtentMax;                                   		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UBallCamTarget_TA*                           Target;                                           		// 0x0154 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FCameraOrientation                          BasePOV;                                          		// 0x0158 (0x002C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OldTargetLocation;                                		// 0x0184 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWasReverseCam : 1;                               		// 0x0190 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x0190 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FPlaneSelectData >                  PlaneSelectSettings;                              		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAngleSelectData >                  AngleSelectSettings;                              		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62424 ];

		return pClassPointer;
	};

	void UpdateFocus ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFocusWorldOffset ( float DeltaTime );
	void UpdateAirAndGroundCamera ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateRotationModifiers ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateValidPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldExecute ( );
	bool TargetIsWelded ( );
	bool IsValidTarget ( class UBallCamTarget_TA* InTarget );
	bool RotatedPlaneContainsPoint ( struct FVector Origin, struct FRotator PlaneRotation, float YExtent, float ZExtent, struct FVector Point, float* Out_DistanceToOrgin );
	class UBallCamTarget_TA* FindClosestTargetInRotatedPlane ( float XExtent, float YExtent, float MaxRadius );
	class UBallCamTarget_TA* FindClosestTargetInDirection ( struct FRotator StartRotation, int YDirection, float MaxRadius );
	class UBallCamTarget_TA* FindClosestTargetByAngle ( float MinDotAngle, float MaxRadius );
	class UBallCamTarget_TA* GetBestBallTarget ( );
	bool ChooseTarget ( );
	void SetTarget ( class UBallCamTarget_TA* NewTarget );
	void HandleRemoveTarget ( class UObject* NewTarget );
	void HandleAddTarget ( class UBallCamTarget_TA* NewTarget );
	void TargetSelect ( class APlayerController_TA* PC, int Direction );
	void EndCameraState ( );
	void BeginCameraState ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_BallCam_TA::pClassPointer = NULL;

// Class TAGame.CameraState_PremiumGarage_TA
// 0x0058 (0x0118 - 0x00C0)
class UCameraState_PremiumGarage_TA : public UCameraState_CarPreview_TA
{
public:
	struct FViewTargetTransitionParams                 BetweenPremiumCameraBlend;                        		// 0x00C0 (0x0010) [0x0000000000000000]              
	float                                              FadeInFromBlackTime;                              		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              FadeToBlackTime;                                  		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              PitchDeadzone;                                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              PitchSensitivity;                                 		// 0x00DC (0x0004) [0x0000000000000000]              
	struct FInterpCurveFloat                           PitchAutocorrectCurve;                            		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PitchMaxSpeed;                                    		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              PitchBlendbackModifier;                           		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              PitchBlendbackMin;                                		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FInterpCurveFloat                           CameraReturnBlendCurve;                           		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastAdjustTime;                                   		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ATurnTableActor_TA*                          TurntableActor;                                   		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxShell_TA*                                Shell;                                            		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62580 ];

		return pClassPointer;
	};

	void UpdateAllViewTargetRotation ( float DeltaTime );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void AdjustOutPOVCameraRotation ( struct FRotator AddedRotator, struct FCameraOrientation* OutPOV );
	float GetCameraCurveSpeed ( );
	void ManuallyAdjustCar ( unsigned long bEnable );
	void BeginCameraState ( );
	struct FViewTargetTransitionParams GetEndBlendParams ( class UCameraState_X* NewState );
	void GetActorOrientation ( struct FCameraOrientation* OutPOV, float* OutSideOffset );
	void GetAccumulatedOrientation ( struct FVector* out_Location, struct FRotator* out_Rotation, int* NumPreviewActors );
};

UClass* UCameraState_PremiumGarage_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_GFxMenu_TA
// 0x004C (0x046C - 0x0420)
class AGameInfo_GFxMenu_TA : public AGameInfoBase_TA
{
public:
	class UCarPreviewSet_TA*                           CarPreviewSet;                                    		// 0x0420 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPremiumGaragePreviewSet_TA*                 PremiumPreviewSet;                                		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UExplosionPreviewer_TA*                      ExplosionPreviewer;                               		// 0x0428 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMenuSequencer_TA*                           MenuSequencer;                                    		// 0x042C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     UIStateNames[ 0x2 ];                              		// 0x0430 (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                PreviewCarChangeGCTriggerThreshold;               		// 0x0448 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FScriptDelegate                             __EventIntroCarsInPosition__Delegate;             		// 0x044C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0450 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGarageComplexLoaded__Delegate;             		// 0x045C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0460 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62582 ];

		return pClassPointer;
	};

	void __GameInfo_GFxMenu_TA__InitPreviews ( class UCountTrigger_X* _ );
	bool AllowPausing ( class APlayerController* PC );
	void GarageComplexLoaded ( );
	void TriggerUIStateChangeEvents ( unsigned char UIState );
	void SetUIState ( class ULocalPlayer_TA* Player, unsigned char UIState );
	void HandlePrimaryPlayerIdChanged ( class UOnlineGameAccount_X* Account, struct FUniqueNetId PlayerID );
	void HandlePrimaryPlayerSet ( class APlayerController_Menu_TA* PC );
	void InitShell ( class APlayerController_Menu_TA* PC );
	void GenericPlayerInitialization ( class AController* C );
	bool CanStartMatch ( );
	void RestartPlayer ( class AController* NewPlayer );
	void eventDestroyed ( );
	void InitMenuSequencer ( );
	void InitPreviews ( );
	void eventPreBeginPlay ( );
	void EventGarageComplexLoaded ( class AGameInfo_GFxMenu_TA* GameInfoMenu );
	void EventIntroCarsInPosition ( class AGameInfo_GFxMenu_TA* GameInfoMenu );
};

UClass* AGameInfo_GFxMenu_TA::pClassPointer = NULL;

// Class TAGame.CarPreviewSet_TA
// 0x0048 (0x0084 - 0x003C)
class UCarPreviewSet_TA : public UObject
{
public:
	TArray< class ACarPreviewActor_TA* >               CarPreviewActors;                                 		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineGameParty_TA*                         OnlineParty;                                      		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRemotePlayersHidden : 1;                         		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                MaxCars;                                          		// 0x0050 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __EventPreviewActorsChanged__Delegate;            		// 0x0054 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0058 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreviewActorSetProfile__Delegate;          		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSwapFinished__Delegate;                    		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0078 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62584 ];

		return pClassPointer;
	};

	bool SetRemotePlayersHidden ( unsigned long bHidden );
	void HandlePrimaryPlayerSet ( class APlayerController_Menu_TA* PC );
	void OnPreviewActorsChanged ( );
	void HandlePartyMemberLoadoutRemoved ( );
	void HandlePartyMemberLoadoutChange ( );
	void HandleReceiveController ( class UPlayer* PlayerRef );
	void HandlePlayerJoin ( class ULocalPlayer* P );
	void UpdatePreview ( int Index );
	void UpdatePreviewAll ( );
	void UpdatePreviewForPlayer ( class ULocalPlayer* P );
	class ACarPreviewActor_TA* GetMainCarPreview ( class ULocalPlayer* P );
	class ACarPreviewActor_TA* GetPlayerCarPreviewActor ( class ULocalPlayer* P );
	void UpdateAllPreviews ( );
	void InitPreviewActors ( );
	void HandleCarPreviewActorAdded ( class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewActor );
	void Cleanup ( );
	void Init ( );
	void EventSwapFinished ( );
	void EventPreviewActorSetProfile ( class ACarPreviewActor_TA* Car );
	void EventPreviewActorsChanged ( class UCarPreviewSet_TA* G );
};

UClass* UCarPreviewSet_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Demolished_TA
// 0x0024 (0x008C - 0x0068)
class UCameraState_Demolished_TA : public UCameraState_TA
{
public:
	float                                              RotationInterpRate;                               		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       DemolishedPawn;                                   		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateTime;                                        		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialFOV;                                       		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVBlendTime;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInterp : 1;                                      		// 0x007C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              MaxZoomInFOV;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFOVBlendDistance;                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62592 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void EndCameraState ( );
	void BeginCameraState ( );
	bool ShouldKeepExecuting ( );
	bool ShouldExecute ( );
	struct FViewTargetTransitionParams GetEndBlendParams ( class UCameraState_X* NewState );
};

UClass* UCameraState_Demolished_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Freecam_TA
// 0x0084 (0x00EC - 0x0068)
class UCameraState_Freecam_TA : public UCameraState_TA
{
public:
	struct FCameraOrientation                          ViewOffset_Near;                                  		// 0x0068 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FCameraOrientation                          ViewOffset_Far;                                   		// 0x0094 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FCameraOrientation                          ViewOffset;                                       		// 0x00C0 (0x002C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62619 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldExecute ( );
};

UClass* UCameraState_Freecam_TA::pClassPointer = NULL;

// Class TAGame.CameraState_LiveReplay_TA
// 0x0078 (0x00D4 - 0x005C)
class UCameraState_LiveReplay_TA : public UCameraState_X
{
public:
	struct FVector                                     LocationOffset;                                   		// 0x005C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           FocusSpeedOverTime;                               		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CarBallFocusBlendDistance;                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOV;                                              		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoInterpTime;                                  		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoDistance;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlomoFOV;                                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityPrediction;                               		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpToFieldCenterRate;                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpToFieldCenterOffset;                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionFocusDelay;                              		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorerOffsetInterpSpeed;                          		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     FocusCar;                                         		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      FocusBall;                                        		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasDoneFirstUpdate : 1;                          		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanUpdate : 1;                                   		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bSetGoalScorerFocusOffset : 1;                    		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              LastFocusChangeTime;                              		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SlomoTime;                                        		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGoal_TA*                                    Goal;                                             		// 0x00C4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FVector                                     GoalScorerFocusOffset;                            		// 0x00C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62629 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	struct FVector GetCameraBaseLocation ( struct FVector CameraFocus );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void Tick ( float DeltaTime );
	void UpdateSlomo ( float DeltaTime );
	void EndCameraState ( );
	void BeginCameraState ( );
	struct FViewTargetTransitionParams GetEndBlendParams ( class UCameraState_X* NewState );
	bool ShouldExecute ( );
};

UClass* UCameraState_LiveReplay_TA::pClassPointer = NULL;

// Class TAGame.CameraState_ReplayAutoCam_TA
// 0x01DC (0x0258 - 0x007C)
class UCameraState_ReplayAutoCam_TA : public UCameraState_Replay_TA
{
public:
	float                                              FOVInterpSpeed;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              StartViewFocusTime;                               		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              FocusPitchInterpSpeed;                            		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              FocusYawInterpSpeed;                              		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              AerialFOV;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              CountDownFOV;                                     		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              CountDownPanSpeed;                                		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              CountDownRotateSpeed;                             		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              CountDownPanBlendAmount;                          		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              CountDownFocusActorStartTime;                     		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              LocationBlendSpeed;                               		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              BallAerialZStartTime;                             		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              MinBallAerialZHeight;                             		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              MinPlayerAerialZHeight;                           		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              MinFocusActorViewTime;                            		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              BallFloorFocusPercent;                            		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              LocationAngleInterpSpeed;                         		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              LastLocationAngleUpdateTime;                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              MinStartRadiusForPlayerAerial;                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              MaxStartRadiusForPlayerAerial;                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              DesiredCameraDistance;                            		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              ResetToMapDefaultTime;                            		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              MaxWaitTimeTillBallHit;                           		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              FocusActorZViewOffset;                            		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              FloorTraceDistance;                               		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              BackAwayFromWallDistance;                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              NoCarsNearBallDistance;                           		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              MinPlayerCameraFloorHeight;                       		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              FocusPointInterpSpeed;                            		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              MinMaxPitch;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              LastDesiredLocationBlendSpeed;                    		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              AdditionalFocusZ;                                 		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              TimeSinceIgnoredGoalFocusExtent;                  		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              LastTimeAPlayerWasNearBall;                       		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              AdditionalBackAwayFromBallSpeed;                  		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              GoalScorerFocusDistance;                          		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              MapResetStartDistance;                            		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              MapResetStartHeight;                              		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              GoalScoredDistance;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              MaxGoalYZoomOutDistance;                          		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              MaxGoalXZoomOutDistance;                          		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              MinCameraDistanceToBall;                          		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSnapFOV : 1;                                     		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSnapToFocus : 1;                                 		// 0x0124 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBallHasBeenHit : 1;                              		// 0x0124 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bHasGoalScorerFocus : 1;                          		// 0x0124 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHitWallLastFrame : 1;                            		// 0x0124 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FVector                                     BallFloorLocation;                                		// 0x0128 (0x000C) [0x0000000000000000]              
	struct FVector                                     BallFloorNormal;                                  		// 0x0134 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastCarFocusOffset;                               		// 0x0140 (0x000C) [0x0000000000000000]              
	struct FVector                                     CountDownPanDirection;                            		// 0x014C (0x000C) [0x0000000000000000]              
	struct FVector                                     CountDownPanStartOffset;                          		// 0x0158 (0x000C) [0x0000000000000000]              
	struct FVector                                     CountDownRotateOffset;                            		// 0x0164 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastFocusOffset;                                  		// 0x0170 (0x000C) [0x0000000000000000]              
	struct FVector                                     LastFocusLocation;                                		// 0x017C (0x000C) [0x0000000000000000]              
	struct FVector                                     LastDesiredLocation;                              		// 0x0188 (0x000C) [0x0000000000000000]              
	struct FRotator                                    LocationAngle;                                    		// 0x0194 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DesiredLocationAngle;                             		// 0x01A0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    DesiredRotation;                                  		// 0x01AC (0x000C) [0x0000000000000000]              
	struct FRotator                                    MapResetStartRotation;                            		// 0x01B8 (0x000C) [0x0000000000000000]              
	class APRI_TA*                                     FocusActor;                                       		// 0x01C4 (0x0004) [0x0000000000000000]              
	class APRI_TA*                                     LastScorer;                                       		// 0x01C8 (0x0004) [0x0000000000000000]              
	TArray< class APRI_TA* >                           AerialPRIs;                                       		// 0x01CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APRI_TA* >                           CountDownPRIs;                                    		// 0x01D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGoal_TA*                                    GoalFocus;                                        		// 0x01E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      CountDownFocusType;                               		// 0x01E8 (0x0001) [0x0000000000000000]              
	class ABall_TA*                                    Ball;                                             		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCameraState_X*                              ReplayCameraState;                                		// 0x01F4 (0x0004) [0x0000000000000000]              
	struct FProfileSliderLimits                        CameraDistanceLimits;                             		// 0x01F8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        CameraZLimits;                                    		// 0x0204 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        CameraMoveSpeedLimits;                            		// 0x0210 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        CameraMoveSpeedZLimits;                           		// 0x021C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        PlayerCameraDistanceLimits;                       		// 0x0228 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        RotateSpeedLimits;                                		// 0x0234 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        PlayerFocusBlendSpeedLimits;                      		// 0x0240 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FProfileSliderLimits                        AerialPredictionLimits;                           		// 0x024C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62725 ];

		return pClassPointer;
	};

	void DrawRotatedBox ( struct FVector Origin, struct FRotator BoxRotation, struct FVector Extent, struct FColor C, unsigned long bPersistent );
	bool RotatedBoxContainsPoint ( struct FVector Origin, struct FRotator BoxRotation, struct FVector Extent, struct FVector Point );
	struct FVector FlattenPointToPlane ( struct FVector Center, struct FRotator Rot, struct FVector Point );
	class AGameEvent_Soccar_TA* GetSoccarGame ( );
	class UCameraState_X* GetProxyCameraState ( );
	bool LookingAtWall ( struct FRotator CameraRotation );
	void HandleBallExploded ( class ABall_TA* InBall );
	void ResetCameraToMapDefault ( );
	float GetDefaultMoveSpeed ( );
	bool WasJustIgnoringGoalFocusExtent ( float MinTimeSince );
	float ModifyByAerialMultiplier ( float Min, float Max );
	float GetAerialPredictionMultiplier ( );
	bool GetFocusOnGoals ( );
	bool GetCutToAerialCam ( );
	bool BallIsAboveMinAerialZ ( );
	bool GetAllowFocusActor ( );
	bool GetUseReplayCamera ( );
	float GetFocusActorBlendSpeed ( );
	float GetDesiredAerialActorDistance ( );
	float GetDesiredRotateSpeed ( );
	float GetDesiredMoveSpeedZ ( );
	float GetDesiredMoveSpeed ( );
	float GetDesiredCameraZ ( );
	bool BallHasBeenHit ( );
	void UpdateDesiredCameraDistance ( float DeltaTime );
	float GetDefaultCameraDistance ( );
	float GetDesiredCameraDistance ( );
	float GetDesiredCameraFOV ( );
	void HandleGameStateChanged ( class AGameEvent_TA* GameEvent );
	bool ChooseCountDownFocusActor ( );
	void UpdateCountDownTextureStreaming ( );
	class APRI_TA* GetNextEligibleCountDownFocusActor ( );
	bool IsCountDownFocusEligible ( class APRI_TA* PRI );
	void ResetCountDownPRIs ( );
	void HandleFirstBallHit ( class AGameEvent_Soccar_TA* GameEvent );
	bool InGameState ( struct FName StateName );
	class APRI_TA* PredictFirstPlayerToBall ( );
	bool APlayerIsMovingTowardCenterWithinRadius ( struct FVector Center, float Radius, float MinDotAngleTowardsBall );
	bool MovingTowardsBall ( class APRI_TA* PRI, float MaxDotAngle );
	bool FlyingTowardsBall ( class APRI_TA* PRI, float MinZFlyHeight, float MinAcceptableDistanceToBall );
	bool AddToAerialPRIs ( class APRI_TA* PRI );
	void ResetFocusActorSettings ( );
	class APRI_TA* UpdateAerialPRIs ( float PickWaitTime );
	bool SetFocusActor ( class APRI_TA* PRI );
	bool UpdateFocusActor_PostGoal ( struct FVector FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV );
	void HandlePlayerScored ( class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer );
	void UpdateFocusActor_POV ( struct FVector FocusPoint, float DeltaTime, float BlendSpeed, unsigned long bCutToCamera, struct FCameraOrientation* OutPOV );
	bool UpdateFocusActor_Active ( struct FVector FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV );
	bool UpdateFocusActor_CountDown ( struct FVector FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV );
	bool UpdateFocusActor ( struct FVector FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV );
	void AdjustSideLocation ( struct FVector* AdjustedLocation );
	bool AdjustDesiredLocationAngleFromHit ( struct FVector TraceStart, struct FVector HitLocation, struct FVector HitNormal, float ExtraTraceDistance, struct FVector* Out_AdjustedLocation );
	bool CanFitAtLocation ( struct FVector DesiredLocation, float ExtraTraceDistance, struct FVector* Out_TraceStart, struct FVector* out_HitLocation, struct FVector* out_HitNormal );
	void AdjustDesiredLocation ( struct FVector* AdjustedLocation );
	bool CanMoveCameraToThisAngle ( struct FVector CameraLocation, struct FRotator NewAngle, float DesiredTraceDistance );
	struct FRotator GetBallSideAngle ( struct FVector CameraLocation );
	void SetDesiredLocationAngle ( struct FRotator NewAngle );
	bool BallToCloseOrMovingTowardCamera ( struct FVector CameraLocation );
	bool UpdateLocationAngle ( struct FCameraOrientation* POV );
	struct FVector GetBallFloorFocusPoint ( float DeltaTime );
	class UGoal_TA* FindGoalWithinRange ( );
	float GetZAngleFromLocation ( struct FVector ActorLocation, struct FRotator ActorRotation, struct FVector TestLocation );
	float GetYAngleFromLocation ( struct FVector ActorLocation, struct FRotator ActorRotation, struct FVector TestLocation );
	bool FloorTrace ( struct FVector TraceStart, float TraceDistance, struct FVector* out_HitLocation, struct FVector* out_HitNormal );
	float GetDesiredZLocation ( struct FVector OldCameraLocation, struct FVector NewCameraLocation, struct FVector DesiredLocation, float* Out_MinZHeight );
	void UpdateLocation ( struct FVector FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateRotation ( struct FVector FocusPoint, float YawInterpSpeed, float PitchInterpSpeed, float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void SetFromMapInfo ( );
	void EndCameraState ( );
	void BeginCameraState ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_ReplayAutoCam_TA::pClassPointer = NULL;

// Class TAGame.MapInfo_TA
// 0x008C (0x00C8 - 0x003C)
class UMapInfo_TA : public UMapInfo
{
public:
	struct FWorldColorData                             WorldColors;                                      		// 0x003C (0x0040) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFieldType;                                  		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MirrorFieldXYRotation;                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FieldCenter;                                      		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    MapResetStartRotation;                            		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MapResetStartHeight;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MapResetStartDistance;                            		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWaitTimeTillBallHit;                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GoalScoredDistance;                               		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGoalYZoomOutDistance;                          		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxGoalXZoomOutDistance;                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CountDownFOV;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackAwayFromWallDistance;                         		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PylonExtentOverride;                              		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62810 ];

		return pClassPointer;
	};

};

UClass* UMapInfo_TA::pClassPointer = NULL;

// Class TAGame.CameraState_ReplayFly_TA
// 0x0018 (0x0094 - 0x007C)
class UCameraState_ReplayFly_TA : public UCameraState_Replay_TA
{
public:
	struct FVector                                     OldPCLocation;                                    		// 0x007C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    OldPCRotation;                                    		// 0x0088 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63188 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
};

UClass* UCameraState_ReplayFly_TA::pClassPointer = NULL;

// Class TAGame.CameraState_ReplayFollow_TA
// 0x0020 (0x009C - 0x007C)
class UCameraState_ReplayFollow_TA : public UCameraState_Replay_TA
{
public:
	float                                              FollowDistance;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFollowDistance;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFollowDistance;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           FollowRotationRateCurve;                          		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bFirstExecution : 1;                              		// 0x0098 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63196 ];

		return pClassPointer;
	};

	void UpdateFocusActorPOV ( class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV );
	bool IsDisabled ( struct FString InFocusActorString );
	void eventBeginCameraState ( );
};

UClass* UCameraState_ReplayFollow_TA::pClassPointer = NULL;

// Class TAGame.CameraState_ReplaySoftAttach_TA
// 0x001C (0x0098 - 0x007C)
class UCameraState_ReplaySoftAttach_TA : public UCameraState_Replay_TA
{
public:
	struct FRotator                                    AttachRotation;                                   		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AttachOffset;                                     		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63215 ];

		return pClassPointer;
	};

	void ClampPOV ( struct FCameraOrientation* OutPOV );
	void UpdateFocusActorPOV ( class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV );
	bool IsDisabled ( struct FString InFocusActorString );
};

UClass* UCameraState_ReplaySoftAttach_TA::pClassPointer = NULL;

// Class TAGame.CameraState_ReplayHardAttach_TA
// 0x0000 (0x0098 - 0x0098)
class UCameraState_ReplayHardAttach_TA : public UCameraState_ReplaySoftAttach_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63229 ];

		return pClassPointer;
	};

	void UpdateFocusActorPOV ( class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV );
	bool IsDisabled ( struct FString InFocusActorString );
};

UClass* UCameraState_ReplayHardAttach_TA::pClassPointer = NULL;

// Class TAGame.CameraState_ReplayPlayerView_TA
// 0x000C (0x0088 - 0x007C)
class UCameraState_ReplayPlayerView_TA : public UCameraState_Replay_TA
{
public:
	class UCameraState_X*                              CarCameraState;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraState_X*                              BallCameraState;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraState_X*                              CurrentCameraState;                               		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63238 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	class UCameraState_X* GetProxyCameraState ( );
	void Init ( class ACamera_X* InCamera );
	bool AllowSwivel ( );
	bool IsDisabled ( struct FString InFocusActorString );
};

UClass* UCameraState_ReplayPlayerView_TA::pClassPointer = NULL;

// Class TAGame.CameraState_SeasonIntro_TA
// 0x0010 (0x006C - 0x005C)
class UCameraState_SeasonIntro_TA : public UCameraState_X
{
public:
	float                                              RotateSpeed;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              ZHeightPercent;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              XOffsetDistance;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63258 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldExecute ( );
};

UClass* UCameraState_SeasonIntro_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Waiting_TA
// 0x0008 (0x01C0 - 0x01B8)
class UCameraState_Waiting_TA : public UCameraState_CamActor_X
{
public:
	float                                              MinExecutionTime;                                 		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExecutionTime;                                    		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63273 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void Tick ( float DeltaTime );
	bool ShouldKeepExecuting ( );
	struct FViewTargetTransitionParams GetEndBlendParams ( class UCameraState_X* NewState );
	bool ShouldExecute ( );
};

UClass* UCameraState_Waiting_TA::pClassPointer = NULL;

// Class TAGame.Cannon_TA
// 0x0021 (0x021D - 0x01FC)
class ACannon_TA : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimTree*                                   CannonAnimTree;                                   		// 0x0200 (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    CannonAnimSet;                                    		// 0x0204 (0x0004) [0x0000000000000000]              
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                 		// 0x0208 (0x0004) [0x0000000000000000]              
	class USkelControlSingleBone*                      PitchControl;                                     		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              Pitch;                                            		// 0x0210 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UParticleSystem*                             EngineThrusterParticle;                           		// 0x0214 (0x0004) [0x0000000000000000]              
	class UAkSoundCue*                                 CannonFireSound;                                  		// 0x0218 (0x0004) [0x0000000000000000]              
	unsigned char                                      FireCount;                                        		// 0x021C (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63289 ];

		return pClassPointer;
	};

	void Fire ( );
	void DoSimulatedFire ( );
	void PlayFullBodyAnim ( struct FName AnimName, float Rate, float BlendIn, float BlendOut, unsigned long bLoop );
	void SetPitch ( float InPitch );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACannon_TA::pClassPointer = NULL;

// Class TAGame.LocalPlayerAudioParamsComponent_TA
// 0x000C (0x0054 - 0x0048)
class ULocalPlayerAudioParamsComponent_TA : public UComponent
{
public:
	class UISetParameter*                              ParameterInterface;                               		// 0x0048 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class APlayerController*                           PC;                                               		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63355 ];

		return pClassPointer;
	};

	void UpdateNumLocalPlayers ( class UGameViewportClient_TA* GVC, int LocalPlayerCount );
	void HandleLocalPlayerChange ( class ULocalPlayer* NewPlayer );
	void ApplyParams ( unsigned long bIsLocal, unsigned char SplitScreenPosition );
	void UpdateParams ( );
	void Init ( class APlayerController* InPC, class UISetParameter* InParameterInterface );
};

UClass* ULocalPlayerAudioParamsComponent_TA::pClassPointer = NULL;

// Class TAGame.GFxData_LocalPlayer_TA
// 0x00C0 (0x0114 - 0x0054)
class UGFxData_LocalPlayer_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bOpenedStartMenu : 1;                             		// 0x0054 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bCheckedStartupEvents : 1;                        		// 0x0054 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bSaveDataLoaded : 1;                              		// 0x0054 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bBadConnection : 1;                               		// 0x0054 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bBallcam : 1;                                     		// 0x0054 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bUseBallCamIndicator : 1;                         		// 0x0054 (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bAlternateNameplates : 1;                         		// 0x0054 (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bMetric : 1;                                      		// 0x0054 (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bPrimaryPlayer : 1;                               		// 0x0054 (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bPartyLeader : 1;                                 		// 0x0054 (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bIsInParty : 1;                                   		// 0x0054 (0x0004) [0x0000000040000000] [0x00000400] ( CPF_EditInlineNotify )
	unsigned long                                      bIsPlayerTrading : 1;                             		// 0x0054 (0x0004) [0x0000000040000000] [0x00000800] ( CPF_EditInlineNotify )
	unsigned long                                      bDemoBuild : 1;                                   		// 0x0054 (0x0004) [0x0000000040000000] [0x00001000] ( CPF_EditInlineNotify )
	unsigned long                                      bForceSplitScreenUI : 1;                          		// 0x0054 (0x0004) [0x0000000040000000] [0x00002000] ( CPF_EditInlineNotify )
	unsigned long                                      bPrivateMatchGameOwner : 1;                       		// 0x0054 (0x0004) [0x0000000040000000] [0x00004000] ( CPF_EditInlineNotify )
	unsigned long                                      bAgeRestricted : 1;                               		// 0x0054 (0x0004) [0x0000000040000000] [0x00008000] ( CPF_EditInlineNotify )
	unsigned long                                      bPendingIdleKick : 1;                             		// 0x0054 (0x0004) [0x0000000040000000] [0x00010000] ( CPF_EditInlineNotify )
	unsigned long                                      bVoteToForfeitDisabled : 1;                       		// 0x0054 (0x0004) [0x0000000040000000] [0x00020000] ( CPF_EditInlineNotify )
	unsigned long                                      bDisableCrossPlay : 1;                            		// 0x0054 (0x0004) [0x0000000040000000] [0x00040000] ( CPF_EditInlineNotify )
	unsigned long                                      bDisableContainerNotifications : 1;               		// 0x0054 (0x0004) [0x0000000040000000] [0x00080000] ( CPF_EditInlineNotify )
	unsigned long                                      bReplacingBot : 1;                                		// 0x0054 (0x0004) [0x0000000040000000] [0x00100000] ( CPF_EditInlineNotify )
	struct FString                                     SaveDataError;                                    		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     OnlineError;                                      		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PlayerName;                                       		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    PlayerAvatarTexture;                              		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                XpLevel;                                          		// 0x0080 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     XPTitle;                                          		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                XPTotal;                                          		// 0x0090 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                XPProgressInCurrentLevel;                         		// 0x0094 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                XPRequiredForNextLevel;                           		// 0x0098 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Team;                                             		// 0x009C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              CameraYaw;                                        		// 0x00A0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SplitScreenPosition;                              		// 0x00A4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ControllerId;                                     		// 0x00A8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                LocalPlayerIndex;                                 		// 0x00AC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       LastMatchType;                                    		// 0x00B0 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              SafeZoneRatio;                                    		// 0x00B8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ContainerToOpenId;                                		// 0x00BC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      OrphanedControllerId;                             		// 0x00C0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                PlayerID;                                         		// 0x00C4 (0x0048) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class ULocalPlayer_TA*                             Player;                                           		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxModal_X*                                 ModalOrphaned;                                    		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63394 ];

		return pClassPointer;
	};

	void ClearContainerToOpen ( );
	bool HasContainerToOpen ( );
	bool AreDivisionsDisabled ( );
	void HandleCrossPlayChanged ( class UProfile_TA* Profile );
	void OnExitToStartScreen ( class UGFxModal_X* Modal );
	void OnPickAccount ( class UGFxModal_X* Modal );
	void ShowOrphanedUserDialog ( unsigned char InControllerID );
	void ShowSecondaryPlayerOrphanedModal ( );
	void ShowPrimaryPlayerOrphanedModal ( );
	void OnUserRestored ( unsigned char InControllerID );
	void OnUserOrphaned ( unsigned char InControllerID );
	void HandleVoteToForfeitDisabled ( class APRI_TA* PRI );
	void HandlePendingIdleKickChanged ( class APlayerController_TA* PC );
	void HandleCanPlayOnlineChanged ( class UOnlinePlayer_X* P );
	void HandleLocalPlayerChanged ( class ULocalPlayer* NewPlayer );
	void ClearLocalPlayerData ( class AGameEvent_TA* GameEvent );
	void HandlePrivateMatchGameOwnerUpdated ( class AGameEvent_TA* GameEvent, class APRI_TA* NewGameOwner );
	void ChangeName ( struct FString NewName );
	void Spectate ( );
	void OnJoinTeamFailed ( int TeamNum );
	void OnServerChangeTeamFailed ( int TeamNum );
	void ChangeTeam ( int TeamIndex );
	class APRI_TA* GetPRI ( );
	bool GetOverlayEnabled ( );
	void SetCheckedStartupEvents ( unsigned long bHasChecked );
	void SetOpenedStartMenu ( unsigned long bHasBeenOpened );
	void UpdateXP ( class UProfile_TA* Profile );
	void HandleXPInitialized ( class UProfile_TA* Profile );
	void OnXpInitialized ( int NewXP );
	void HandleSplitScreenPositionChanged ( class ULocalPlayer_TA* LocalPlayer );
	class UOnlineGame_X* GetOnlineGame ( );
	void HandleGetAvatar ( struct FUniqueNetId InPlayerId, class UTexture* Avatar, struct FString OnlinePlayerName );
	void HandleReceivedPRI ( class APlayerController_X* PC );
	void HandleReceivedController ( class UPlayer* PlayerRef );
	void CheckBootMessages ( );
	void HandleAuthenticatedNameChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void HandlePsyWebLoginChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void HandleLoginStatusChanged ( class UOnlinePlayer_X* OnlinePlayer );
	void UpdateCrossPlaySettings ( );
	void HandleProfileSet ( class ULocalPlayer_TA* InLocalPlayer );
	void HandleSplitScreenTypeChanged ( class UGameViewportClient_TA* GVC );
	void HandleDrawWorldFullScreenChanged ( class UGameViewportClient_TA* GVC );
	void UpdateName ( );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error );
	void UpdatePrimaryPlayer ( );
	void HandlePrimaryPlayerChange ( class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_LocalPlayer_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Attachment_TA
// 0x0014 (0x0090 - 0x007C)
class UProductAsset_Attachment_TA : public UProductAsset_TA
{
public:
	TArray< struct FProductAttachment >                Attachments;                                      		// 0x007C (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       CustomAnimName;                                   		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63490 ];

		return pClassPointer;
	};

	void ModifyThumbnailMesh ( class UMeshComponent* Component, struct FProductAttachment* Attachment, TArray< class UProductAttribute_TA* >* InAttributes );
	class USkeletalMeshComponent* GetSceneSkeletalMesh ( class UThumbnailScene_TA* Scene, int AttachmentIdx );
	void eventModifyThumbnailScene ( class UThumbnailScene_TA* Scene, TArray< class UProductAttribute_TA* >* InAttributes );
};

UClass* UProductAsset_Attachment_TA::pClassPointer = NULL;

// Class TAGame.__CarMeshComponentBase_TA__AttachOrnament
// 0x0004 (0x0040 - 0x003C)
class U__CarMeshComponentBase_TA__AttachOrnament : public UObject
{
public:
	class UAprilConfig_X*                              AprilConfig;                                      		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63551 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UPrimitiveComponent* PrimComp );
};

UClass* U__CarMeshComponentBase_TA__AttachOrnament::pClassPointer = NULL;

// Class TAGame.ProductAttribute_TeamOverride_TA
// 0x001C (0x0070 - 0x0054)
class UProductAttribute_TeamOverride_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      Team;                                             		// 0x0054 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       AssetName;                                        		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Thumbnail;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63597 ];

		return pClassPointer;
	};

	void ApplyToMesh ( class UMeshComponent* Mesh, TArray< class UMaterialInterface* >* InMaterials );
	void ApplyToObject ( class UProductAsset_TA* Asset, class UObject* Target );
};

UClass* UProductAttribute_TeamOverride_TA::pClassPointer = NULL;

// Class TAGame.ThrottleStateComponent_TA
// 0x0010 (0x007C - 0x006C)
class UThrottleStateComponent_TA : public UActorComponent_X
{
public:
	class UAkSoundCue*                                 EngageSound;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 ReleaseSound;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehicle_TA*                                 Car;                                              		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPrevThrottle : 1;                                		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63787 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UThrottleStateComponent_TA::pClassPointer = NULL;

// Class TAGame.TeamIndicator_TA
// 0x0020 (0x008C - 0x006C)
class UTeamIndicator_TA : public UActorComponent_X
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           TeamColors;                                       		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AVehicle_TA*                                 Vehicle;                                          		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FTeamVehicleIndicator >             Indicators;                                       		// 0x0080 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64022 ];

		return pClassPointer;
	};

	void RemoveIndicator ( int IndicatorIdx );
	void eventTick ( float DeltaTime );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UTeamIndicator_TA::pClassPointer = NULL;

// Class TAGame.DemolishExplosion_TA
// 0x001C (0x0224 - 0x0208)
class ADemolishExplosion_TA : public AExplosion_X
{
public:
	float                                              PartRandomAngle;                                  		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartRandomSpeedMin;                               		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartRandomSpeedMax;                               		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartRandomSpeedMinZ;                              		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartRandomSpeedMaxZ;                              		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PartRandomAngularSpeed;                           		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BodyLifetime;                                     		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64027 ];

		return pClassPointer;
	};

	struct FVector GetRandomAngularVelocity ( );
	struct FVector GetRandomVelocity ( struct FRotator AttackerRotation );
	void SpawnParts ( struct FDemolishData Data );
	void Init ( struct FDemolishData Data );
};

UClass* ADemolishExplosion_TA::pClassPointer = NULL;

// Class TAGame.CarTrajectoryComponent_TA
// 0x004C (0x00B8 - 0x006C)
class UCarTrajectoryComponent_TA : public UActorComponent_X
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FVector >                           Points;                                           		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalDrawPoints;                                  		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                FramesBetweenPoints;                              		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastAngle;                                        		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    VelocityRot;                                      		// 0x0088 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentVelocity;                                  		// 0x0094 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastRotateAxis;                                   		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastVelocity;                                     		// 0x00AC (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64305 ];

		return pClassPointer;
	};

	float GetPointInterpSpeed ( int PointIndex );
	void eventTick ( float DeltaTime );
	void eventAttached ( );
	void SetEnabled ( unsigned long bEnable );
};

UClass* UCarTrajectoryComponent_TA::pClassPointer = NULL;

// Class TAGame.NameplateComponent_TA
// 0x0014 (0x0080 - 0x006C)
class UNameplateComponent_TA : public UActorComponent_X
{
public:
	struct FString                                     PlayerName;                                       		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Team;                                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsLocalPlayer : 1;                               		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsReady : 1;                                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLocalizeName : 1;                                		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64307 ];

		return pClassPointer;
	};

	bool IsReady ( );
	bool IsLocalPlayer ( class APRI_TA* LocalPRI );
	int GetPlayerTeam ( );
	struct FString GetPlayerName ( );
	class APRI_TA* GetPRI ( );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UNameplateComponent_TA::pClassPointer = NULL;

// Class TAGame.NameplateComponentCar_TA
// 0x0004 (0x0084 - 0x0080)
class UNameplateComponentCar_TA : public UNameplateComponent_TA
{
public:
	class ACar_TA*                                     Car;                                              		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64306 ];

		return pClassPointer;
	};

	bool IsReady ( );
	bool IsLocalPlayer ( class APRI_TA* LocalPRI );
	int GetPlayerTeam ( );
	struct FString GetPlayerName ( );
	class APRI_TA* GetPRI ( );
	void eventAttached ( );
};

UClass* UNameplateComponentCar_TA::pClassPointer = NULL;

// Class TAGame.Car_Season_TA
// 0x0000 (0x08EC - 0x08EC)
class ACar_Season_TA : public ACar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64392 ];

		return pClassPointer;
	};

	int GetLoadoutTeamIndex ( );
	void HandleLogoChanged ( class ATeam_TA* Team );
	void UpdateTeamLogo ( );
	void OnTeamPaintChanged ( );
};

UClass* ACar_Season_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_Boost_TA
// 0x000C (0x0088 - 0x007C)
class UProductAsset_Boost_TA : public UProductAsset_TA
{
public:
	class AFXActor_X*                                  FXActor;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewFrontWheelSpinSpeed;                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewBackWheelSpinSpeed;                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64547 ];

		return pClassPointer;
	};

	struct FString eventCheckCanSave ( );
};

UClass* UProductAsset_Boost_TA::pClassPointer = NULL;

// Class TAGame.CarPreviewAnim_TA
// 0x006C (0x00D8 - 0x006C)
class UCarPreviewAnim_TA : public UActorComponent_X
{
public:
	class UProductSlot_TA*                             Slot;                                             		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPreviewAnimKeyframe >              KeyFrames;                                        		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Delay;                                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDelayHidden : 1;                                 		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bComponentWasAttached : 1;                        		// 0x0080 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FName                                       SkelControlName;                                  		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ACarPreviewActor_TA*                         PreviewActor;                                     		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPrimitiveComponent*                         Component;                                        		// 0x0090 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FPreviewAnimKeyframe                        FinalKeyframe;                                    		// 0x0094 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	float                                              KeyframeTime;                                     		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                KeyframeIndex;                                    		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      SkelControl;                                      		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64683 ];

		return pClassPointer;
	};

	void SetRotation ( struct FRotator Rotation );
	void SetTranslation ( struct FVector Translation );
	void UpdateAnim ( );
	void UpdateKeyframeIndex ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void eventDetached ( );
	void Start ( class ACarPreviewActor_TA* InOwner, class UPrimitiveComponent* InComponent );
};

UClass* UCarPreviewAnim_TA::pClassPointer = NULL;

// Class TAGame.OnlineProductStore_TA
// 0x000C (0x0048 - 0x003C)
class UOnlineProductStore_TA : public UObject
{
public:
	TArray< class UOnlineProductStoreSet_TA* >         Sets;                                             		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64831 ];

		return pClassPointer;
	};

	class UOnlineProduct_TA* FindProduct ( );
	void RemoveSet ( class UOnlineProductStoreSet_TA* Set );
	class UOnlineProductStoreSet_TA* CreateSet ( );
	class UOnlineProductStore_TA* GetInstance ( );
};

UClass* UOnlineProductStore_TA::pClassPointer = NULL;

// Class TAGame.TurnTableActor_TA
// 0x004C (0x0288 - 0x023C)
class ATurnTableActor_TA : public ASkeletalMeshActor
{
public:
	class URotateComponent_TA*                         RotateComponent;                                  		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bIsSwapping : 1;                                  		// 0x0240 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInReveal : 1;                                    		// 0x0240 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCarLocked : 1;                                   		// 0x0240 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FName                                       SwapCarName;                                      		// 0x0244 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LiftItemName;                                     		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LockCarName;                                      		// 0x0254 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TriggerRevealCompleteName;                        		// 0x025C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                DelayedPreviewSlot;                               		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventCarSwapComplete__Delegate;                 		// 0x0268 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x026C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRevealComplete__Delegate;                  		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x027C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64845 ];

		return pClassPointer;
	};

	void StopMovement ( );
	struct FRotator GetDiscRotation ( );
	void SetBoneRotation ( struct FRotator NewRot );
	void HandleRotationChanged ( class URotateComponent_TA* InRotateComponent, struct FRotator NewRotation );
	void SetDiscRotation ( float InDirectionMag, float DeltaTime );
	bool CanSubstituteCars ( );
	void LockCar ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void TriggerRevealComplete ( );
	void DelayPreviewSlot ( int SlotIndex );
	void DoReveal ( );
	void TriggerNamedEvent ( struct FName NamedEvent );
	void SwapCars ( unsigned long bReverse );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void EventRevealComplete ( int SlotIndex );
	void EventCarSwapComplete ( );
};

UClass* ATurnTableActor_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioPreviewRev_TA
// 0x0014 (0x0060 - 0x004C)
class UEngineAudioPreviewRev_TA : public UEngineAudioPreviewBase_TA
{
public:
	class UEngineAudioProfileREV_TA*                   Profile;                                          		// 0x004C (0x0004) [0x0000000000000000]              
	class UAkRevPhysicsSimulation*                     PhysicsSim;                                       		// 0x0050 (0x0004) [0x0000000000000000]              
	struct FAkRevSimFrame                              SimFrame;                                         		// 0x0054 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64887 ];

		return pClassPointer;
	};

	void __EngineAudioPreviewRev_TA__Init ( class UAkRevPhysicsSimulation* S );
	void Init ( class UProductAsset_EngineAudio_TA* InAsset, class UAkParamGroup* InAkParams );
};

UClass* UEngineAudioPreviewRev_TA::pClassPointer = NULL;

// Class TAGame.PlayerController_Menu_TA
// 0x0030 (0x06A8 - 0x0678)
class APlayerController_Menu_TA : public APlayerControllerBase_TA
{
public:
	TArray< class UPlayerInputSequence_TA* >           InputSequences;                                   		// 0x0678 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bExecutedKonamiCode : 1;                          		// 0x0684 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __EventKonamiCode__Delegate;                      		// 0x0688 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x068C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBecomePrimaryPlayer__Delegate;             		// 0x0698 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x069C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64952 ];

		return pClassPointer;
	};

	bool ShouldEnableForceFeedback ( );
	void ShowControllerApplet ( );
	void ShowAccountPicker ( );
	void MusicTogglePlaylistSelection ( );
	void MusicNextTrack ( );
	void KonamiCode ( );
	void eventPlayerTick ( float DeltaTime );
	void ClientSetOnlineStatus ( );
	void RemoveInputSequence ( struct FName SequenceName );
	void RemoveSplashScreenSequences ( );
	void eventDestroyed ( );
	int GetInputSequencePriority ( class UPlayerInputSequence_TA* Sequence );
	void InitProfileSettings ( unsigned long bJustReceivedPlayer );
	void eventReceivedPlayer ( );
	void EventBecomePrimaryPlayer ( class APlayerController_Menu_TA* Primary );
	void EventKonamiCode ( );
};

UClass* APlayerController_Menu_TA::pClassPointer = NULL;

// Class TAGame.OnlineProductStoreSet_TA
// 0x0058 (0x0094 - 0x003C)
class UOnlineProductStoreSet_TA : public UObject
{
public:
	class ULocalPlayer*                                Player;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                PlayerID;                                         		// 0x0040 (0x0048) [0x0000000000000000]              
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64981 ];

		return pClassPointer;
	};

	void ClearProducts ( );
	void RemoveProduct ( class UOnlineProduct_TA* Product );
	void AddProduct ( class UOnlineProduct_TA* Product );
	void SetProducts ( TArray< class UOnlineProduct_TA* >* InProducts );
	class UOnlineProduct_TA* FindProduct ( );
	struct FUniqueNetId GetPlayerID ( );
	void InitRemote ( struct FUniqueNetId InPlayerId );
	void InitLocal ( class ULocalPlayer* InPlayer );
};

UClass* UOnlineProductStoreSet_TA::pClassPointer = NULL;

// Class TAGame.CarThumbnailActor_TA
// 0x0004 (0x0200 - 0x01FC)
class ACarThumbnailActor_TA : public AActor
{
public:
	class UCarMeshComponent_TA*                        Mesh;                                             		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65010 ];

		return pClassPointer;
	};

};

UClass* ACarThumbnailActor_TA::pClassPointer = NULL;

// Class TAGame.CheatManagerBase_TA
// 0x0030 (0x0094 - 0x0064)
class UCheatManagerBase_TA : public UCheatManager_X
{
public:
	int                                                RemainingItemsToGive;                             		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TotalAmountItemsAttempted;                        		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TotalRequested;                                   		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bMatineeExportNewSave : 1;                        		// 0x0070 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              ProfileGameTimeSlice;                             		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PendingReplayFileName;                            		// 0x0078 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FReplayDuplicationParams                    PendingReplayDuplication;                         		// 0x0084 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x008C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.CheatManagerBase_TA.LastEquippedIntanceID

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65014 ];

		return pClassPointer;
	};

};

UClass* UCheatManagerBase_TA::pClassPointer = NULL;

// Class TAGame.CheatManager_TA
// 0x000C (0x00A0 - 0x0094)
class UCheatManager_TA : public UCheatManagerBase_TA
{
public:
	class AInputRecorder_TA*                           InputRecorder;                                    		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      DebugColor;                                       		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TestClubColor;                                    		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65027 ];

		return pClassPointer;
	};

};

UClass* UCheatManager_TA::pClassPointer = NULL;

// Class TAGame.Constraint2D_TA
// 0x0000 (0x0218 - 0x0218)
class AConstraint2D_TA : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65032 ];

		return pClassPointer;
	};

};

UClass* AConstraint2D_TA::pClassPointer = NULL;

// Class TAGame.CrowdActor_TA
// 0x004C (0x0248 - 0x01FC)
class ACrowdActor_TA : public AActor
{
public:
	class UAkSoundCue*                                 CrowdSound;                                       		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCrowdActorSettings_TA*                      Settings;                                         		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x0204 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              TargetIdleNoise;                                  		// 0x0208 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetIdleNoiseRate;                              		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentIdleNoise;                                 		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ModifiedNoise;                                    		// 0x0214 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CurrentNoise;                                     		// 0x0218 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCrowdNoiseModifierInstance >       NoiseModifiers;                                   		// 0x021C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FCrowdNoiseModifierInstance                 TimeAlmostOutNoiseInstance;                       		// 0x0228 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentBallGoalDistanceNoise;                     		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkSoundCue*                                 ReplicatedOneShotSound;                           		// 0x0234 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ReplicatedCountDownNumber;                        		// 0x0238 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ReplicatedRoundCountDownNumber;                   		// 0x023C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastBallHitNoiseTime;                             		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastBallHitNoiseLevel;                            		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65037 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void HandleCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void HandleBallRemoved ( class AGameEvent_Soccar_TA* G, class ABall_TA* Ball );
	void HandleBallAdded ( class AGameEvent_Soccar_TA* G, class ABall_TA* Ball );
	void HandleGaveStat ( class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim );
	void HandleCountDownTimeUpdated ( class AGameEvent_TA* InGameEvent, int Seconds );
	void HandleGameTimeUpdated ( class AGameEvent_Soccar_TA* InGameEvent );
	void UpdateTimeAlmostOutNoiseModifier ( class AGameEvent_Soccar_TA* InGameEvent );
	void HandleOvertimeUpdated ( class AGameEvent_Soccar_TA* InGameEvent );
	void HandleGameStateChanged ( class AGameEvent_TA* InGameEvent );
	void PlayRoundCountDownSound ( int CountDownNumber );
	void PlayCountDownSound ( int CountDownNumber );
	void HandleEndGameCountDown ( class AGameEvent_Soccar_TA* G, int TimeRemaining );
	void HandleStingerForfeit ( class AGameEvent_Soccar_TA* G );
	void HandleStingerLose ( class AGameEvent_Soccar_TA* G );
	void HandleStingerWin ( class AGameEvent_Soccar_TA* G );
	void eventTick ( float DeltaTime );
	void TickBallGoalDistance ( );
	void SetNoise ( float NewNoise );
	void TickNoise ( float DeltaTime, float TargetNoise );
	void ClearOneShotSound ( );
	void PlayOneShotSound ( class UAkSoundCue* Sound );
	void AddNoiseModifier ( class UCrowdNoiseModifier_TA* Modifier );
	struct FCrowdNoiseModifierInstance CreateNoiseModifierInstance ( class UCrowdNoiseModifier_TA* Modifier );
	void TickNoiseModifiers ( float DeltaTime );
	void TickIdleNoise ( float DeltaTime );
	void UpdateTargetIdleNoise ( );
	void InitClientListeners ( class AGameEvent_Soccar_TA* InGameEvent );
	void Init ( class AGameEvent_Soccar_TA* InGameEvent );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	float GetRandomValue ( struct FRandomRange Range );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACrowdActor_TA::pClassPointer = NULL;

// Class TAGame.StatFactory_TA
// 0x010C (0x0314 - 0x0208)
class AStatFactory_TA : public AStatFactoryBase_TA
{
public:
	struct FStatEventCollection                        Events;                                           		// 0x0208 (0x00A4) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FBallInfo >                         BallCache;                                        		// 0x02AC (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              GoalSizeFudge;                                    		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotMaxTime;                                      		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotArriveTime;                                   		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotMaxDistance;                                  		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EpicSaveArriveTime;                               		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EpicSaveMinSpeed;                                 		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RedZoneDistance;                                  		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JuggleMinSpeed;                                   		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BulletHitSpeed;                                   		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AerialHitHeight;                                  		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AerialHitMinRelSpeed;                             		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BicycleSpinSpeed;                                 		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongGoalDistance;                                 		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HatTrickThreshold;                                		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlaymakerThreshold;                               		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SaviorThreshold;                                  		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DemolitionThreshold;                              		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGaveFirstTouch : 1;                              		// 0x02FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventGaveStat__Delegate;                        		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0308 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65069 ];

		return pClassPointer;
	};

	void OnBallAdded ( class AGameEvent_Soccar_TA* GameEventSoccar, class ABall_TA* Ball );
	void OnMatchEnded ( class AGameEvent_Soccar_TA* SoccarEvent );
	void DetermineTouchCounts ( class AGameEvent_Soccar_TA* SoccarEvent );
	void DeterminePickupCounts ( class AGameEvent_Soccar_TA* SoccarEvent );
	void OnActiveRoundChanged ( class AGameEvent_Soccar_TA* InGameEvent );
	void HandleBumpedCar ( class ACar_TA* Car, class ACar_TA* HitCar );
	void OnCarDemolished ( class ACar_TA* Victim, struct FDemolishData Data );
	void OnGoalScored ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex );
	void OnCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void OnBallHitWorld ( class ABall_TA* Ball, struct FVector HitLoc, struct FVector HitNormal );
	void TickBalls ( float DeltaTime );
	void Tick ( float DeltaTime );
	void UpdateRedZone ( int BallIdx );
	class UGoal_TA* CalculateShotGoal ( class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime );
	void UpdateShotGoal ( int BallIdx );
	class UGoal_TA* FindShotGoal ( class ABall_TA* Ball );
	bool IsBulletHit ( struct FBallHitInfo Hit );
	bool IsBackwardsHit ( struct FBallHitInfo Hit );
	float GetDeltaSpeed ( struct FBallHitInfo Hit );
	bool IsTurtleHit ( struct FBallHitInfo Hit );
	bool IsJuggleHit ( struct FBallHitInfo Hit );
	bool IsBicycleHit ( struct FBallHitInfo Hit );
	bool IsAerialHit ( struct FBallHitInfo Hit );
	bool IsInRedZone ( class UGoal_TA* Goal, struct FVector BallLocation );
	bool IsEpicSave ( class ABall_TA* Ball, struct FBallHitInfo Hit, class UGoal_TA* Goal );
	float GetHitDistanceToGoal ( class ABall_TA* Ball, struct FBallHitInfo Hit, class UGoal_TA* Goal );
	void BroadcastStatTickerEvent ( class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent );
	void GiveScore ( class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim, int Count );
	void UnregisterCar ( class APawn_X* Car );
	void RegisterCar ( class ACar_TA* Car );
	void UnregisterBall ( class APawn_X* Ball );
	void RegisterBall ( class ABall_TA* Ball );
	int GetBallIndex ( class ABall_TA* Ball );
	void SetGameEvent ( class AGameEvent_Soccar_TA* InGameEvent );
	void EventGaveStat ( class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim );
};

UClass* AStatFactory_TA::pClassPointer = NULL;

// Class TAGame.CrowdManager_TA
// 0x002C (0x0228 - 0x01FC)
class ACrowdManager_TA : public AActor
{
public:
	TArray< class ACrowdActor_TA* >                    CrowdActors;                                      		// 0x01FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UCrowdActorSettings_TA*                      Settings;                                         		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x020C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class ACrowdActor_TA* >                    RandomChantCrowdActors;                           		// 0x0210 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAkSoundCue*                                 ReplicatedGlobalOneShotSound;                     		// 0x021C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DefenseZoneTime;                                  		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x0224 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65205 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void TimerUpdateDefenseChant ( );
	void StartTimerDefenseChant ( );
	void PlayRandomChant ( );
	void SetRandomChantTimer ( );
	void PlayMatchEndedEncore ( );
	void HandleMatchEnded ( class AGameEvent_Soccar_TA* G );
	void HandleOvertimeUpdated ( class AGameEvent_Soccar_TA* InGameEvent );
	void HandleGameStateChanged ( class AGameEvent_TA* G );
	void ClearGlobalOneShotSound ( );
	void PlayGlobalOneShotSound ( class UAkSoundCue* Sound );
	void Init ( class AGameEvent_Soccar_TA* InGameEvent );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ACrowdManager_TA::pClassPointer = NULL;

// Class TAGame.MatchType_Private_TA
// 0x0008 (0x0054 - 0x004C)
class UMatchType_Private_TA : public UMatchType_Public_TA
{
public:
	unsigned long                                      bOnePlayerSelectedTeam : 1;                       		// 0x004C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                LargestMaxTeamSize;                               		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65224 ];

		return pClassPointer;
	};

	bool AllowMatchAdmin ( );
	class ATeam_TA* PickTeamFromReservations ( class AController* C );
	bool CanIncreaseMaxTeamSize ( );
	bool UseCustomMatchSettings ( );
	bool ShouldSetGameOwner ( );
	bool AllowSpectators ( );
	bool RecordPlayedMap ( );
	bool ShouldSubmitMatchComplete ( );
	void OnStartWaitingForPlayers ( );
	bool CanCheckForForfeit ( );
	bool ShouldCancelMatch ( );
	bool CanRematchVote ( );
	bool CanUpdateStats ( );
	bool GiveExtraXP ( );
	bool CanIdleKick ( );
	class ATeam_TA* PickTeam ( class AController* C );
	bool CanRestartPlayer ( class AController* NewPlayer );
	bool AutoSelectTeam ( class AController* NewPlayer );
	int GetMaxTeamSize ( );
	bool ChooseTeam ( int TeamIndex, class APlayerController_TA* Player );
	bool CanJoinATeam ( );
	struct FName GetMatchTypeName ( );
	bool CanChangeTeam ( );
	void OnPlayerAddedToTeam ( );
	bool ShouldStartMatch ( );
	void OnInitGameEvent ( );
};

UClass* UMatchType_Private_TA::pClassPointer = NULL;

// Class TAGame.MatchType_Offline_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_Offline_TA : public UMatchType_Private_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65223 ];

		return pClassPointer;
	};

	bool IsOnlineMultiplayer ( );
	struct FName GetOfflinePlaylistName ( class AGameEvent_TA* InGameEvent, struct FString Options );
	void OnInitGameEvent ( );
	struct FName GetMatchTypeName ( );
	void Init ( class AGameEvent_TA* InGameEvent, struct FString Options );
};

UClass* UMatchType_Offline_TA::pClassPointer = NULL;

// Class TAGame.MatchType_Tutorial_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_Tutorial_TA : public UMatchType_Offline_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65222 ];

		return pClassPointer;
	};

	bool AllowMatchAdmin ( );
	void InitCustomMatchSettings ( struct FCustomMatchSettings Settings );
	struct FName GetOfflinePlaylistName ( class AGameEvent_TA* InGameEvent, struct FString Options );
	int GetMaxTeamSize ( );
	struct FName GetMatchTypeName ( );
};

UClass* UMatchType_Tutorial_TA::pClassPointer = NULL;

// Class TAGame.DebugHelpMenu_TA
// 0x0030 (0x00B8 - 0x0088)
class UDebugHelpMenu_TA : public UInteraction
{
public:
	float                                              CategoryTextScale;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ItemTextScale;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KeyTextScale;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDebugCategory >                    HelpCategories;                                   		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SelectedCategoryIdx;                              		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SelectedItemIdx;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ItemsWidth;                                       		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ItemsHeight;                                      		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Fade;                                             		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bClosing : 1;                                     		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65254 ];

		return pClassPointer;
	};

	void Close ( );
	void ExecuteItem ( int CatIdx, int ItemIdx );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void DrawItem ( class UCanvas* C, int CategoryIdx, int ItemIdx );
	void DrawCategory ( class UCanvas* C, int CategoryIdx );
	void eventPostRender ( class UCanvas* C );
	void BuildHelpItems ( );
	int GetCategoryIndex ( struct FString CategoryName );
	bool GetHelpValues ( struct FString Cmd, struct FString* Command, struct FString* Category, struct FString* Description );
};

UClass* UDebugHelpMenu_TA::pClassPointer = NULL;

// Class TAGame.DebugInput_TA
// 0x0000 (0x0270 - 0x0270)
class UDebugInput_TA : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65323 ];

		return pClassPointer;
	};

};

UClass* UDebugInput_TA::pClassPointer = NULL;

// Class TAGame.DecalBlockingActor_TA
// 0x0000 (0x0214 - 0x0214)
class ADecalBlockingActor_TA : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65325 ];

		return pClassPointer;
	};

};

UClass* ADecalBlockingActor_TA::pClassPointer = NULL;

// Class TAGame.DynamicMeshActor_TA
// 0x0004 (0x0200 - 0x01FC)
class ADynamicMeshActor_TA : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01FC (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65378 ];

		return pClassPointer;
	};

	void ToggleBallPosition ( unsigned long bAdd );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* ADynamicMeshActor_TA::pClassPointer = NULL;

// Class TAGame.DynamicSpawnPoint_TA
// 0x0000 (0x01FC - 0x01FC)
class ADynamicSpawnPoint_TA : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65389 ];

		return pClassPointer;
	};

};

UClass* ADynamicSpawnPoint_TA::pClassPointer = NULL;

// Class TAGame.SystemSettingsManager_TA
// 0x0004 (0x0040 - 0x003C)
class USystemSettingsManager_TA : public UObject
{
public:
	int                                                NumPlayers;                                       		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65397 ];

		return pClassPointer;
	};

	void ApplySettings ( class UGameViewportClient_TA* GVC );
	void UpdateNumPlayers ( class UGameViewportClient_TA* GVC );
	void HandleSplitScreenTypeChanged ( class UGameViewportClient_TA* GVC );
	void HandleWorldFullScreenChanged ( class UGameViewportClient_TA* GVC );
	void Init ( );
};

UClass* USystemSettingsManager_TA::pClassPointer = NULL;

// Class TAGame.SoundSettingsManager_TA
// 0x0008 (0x0044 - 0x003C)
class USoundSettingsManager_TA : public UObject
{
public:
	class USoundSettingsSave_TA*                       SoundSave;                                        		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundSettingsControllerSave_TA*             SoundSaveController;                              		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65422 ];

		return pClassPointer;
	};

	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded ( );
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded1 ( );
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded2 ( );
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded3 ( );
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded4 ( );
	void __SoundSettingsManager_TA__HandleSoundSettingsControllerLoaded ( );
	void __SoundSettingsManager_TA__HandleSoundSettingsControllerLoaded1 ( );
	void SetControllerSoundMode ( unsigned char NewValue );
	void HandleLocalPlayerCountChange ( class ULocalPlayer* Player );
	void SetControllerVolume ( float NewValue );
	void SetOutputType ( unsigned char NewValue );
	void SetVoiceVolume ( float NewValue );
	void SetAmbientVolume ( float NewValue );
	void SetMusicVolume ( float NewValue );
	void SetSoundVolume ( float NewValue );
	void ApplyControllerSoundSettings ( );
	void HandleSoundSettingsControllerUnloaded ( class USoundSettingsControllerSave_TA* InSoundSave );
	void HandleSoundSettingsControllerLoaded ( class USoundSettingsControllerSave_TA* InSoundSave );
	void ApplySoundSettings ( );
	void HandleSoundSettingsUnloaded ( class USoundSettingsSave_TA* InSoundSave );
	void HandleSoundSettingsLoaded ( class USoundSettingsSave_TA* InSoundSave );
	void InitFromPlayer ( class ULocalPlayer_TA* Player );
	void HandlePrimaryPlayerChange ( class ULocalPlayer* Old, class ULocalPlayer_TA* NewPlayer );
	void HandleLocalPlayerJoin ( class ULocalPlayer_TA* Player );
	void Init ( );
};

UClass* USoundSettingsManager_TA::pClassPointer = NULL;

// Class TAGame.AppMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UAppMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65453 ];

		return pClassPointer;
	};

	void AppStart ( );
};

UClass* UAppMetrics_TA::pClassPointer = NULL;

// Class TAGame.FloppyBits_TA
// 0x000C (0x0054 - 0x0048)
class UFloppyBits_TA : public UAttachmentBehavior_TA
{
public:
	class UPhysicsAsset*                               PhysAsset;                                        		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollisionChannels;                                		// 0x004C (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      SkelMesh;                                         		// 0x0050 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65511 ];

		return pClassPointer;
	};

	void InitPhysics ( );
	void HandleAttached ( class UCarMeshComponent_TA* CarMesh );
	void OnInit ( );
};

UClass* UFloppyBits_TA::pClassPointer = NULL;

// Class TAGame.__FXActor_TA__ApplyPaint
// 0x0008 (0x0044 - 0x003C)
class U__FXActor_TA__ApplyPaint : public UObject
{
public:
	class UProductAttribute_PaintSettings_TA*          PaintSettings;                                    		// 0x003C (0x0004) [0x0000000000000000]              
	class UProductPaint_TA*                            Paint;                                            		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65531 ];

		return pClassPointer;
	};

	void LambdaCallback ( struct FFXAttachment FXAttach );
};

UClass* U__FXActor_TA__ApplyPaint::pClassPointer = NULL;

// Class TAGame.__XPManager_TA__PickRandomSlot
// 0x0004 (0x0040 - 0x003C)
class U__XPManager_TA__PickRandomSlot : public UObject
{
public:
	class UProfile_TA*                                 Profile;                                          		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65913 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UProductSlot_TA* Slot );
};

UClass* U__XPManager_TA__PickRandomSlot::pClassPointer = NULL;

// Class TAGame.__XPManager_TA__AllProductsUnlocked
// 0x0004 (0x0040 - 0x003C)
class U__XPManager_TA__AllProductsUnlocked : public UObject
{
public:
	class UProfile_TA*                                 Profile;                                          		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65958 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UProductSlot_TA* Slot );
};

UClass* U__XPManager_TA__AllProductsUnlocked::pClassPointer = NULL;

// Class TAGame.GameMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UGameMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66082 ];

		return pClassPointer;
	};

	void StatEvent ( struct FUniqueNetId PlayerID, struct FName StatName, struct FString HitLocation );
	void RecordStatEvent ( struct FUniqueNetId PlayerID, struct FName StatName, struct FVector HitLocation );
	void GameEnd ( int WinningTeam, int Team0Score, int Team1Score );
	void Overtime ( );
	void GoalScoreHit ( struct FUniqueNetId PlayerID, struct FString CarLocation, struct FString CarVelocity, struct FString BallLocation, struct FString BallVelocity, float ElapsedTimeSeconds );
	void RecordGoalScoreTouch ( struct FBallHitInfo Hit );
	void GoalScored ( int Team, struct FString BallLocation, struct FString BallVelocity );
	void RecordGoalScored ( int Team, struct FVector BallLocation, struct FVector BallVelocity );
	void ForfeitVoteFail ( int Team );
	void ForfeitVotePass ( int Team );
	void ForfeitVoteStart ( struct FUniqueNetId Instigator, int Team );
	void LeaveTeam ( struct FUniqueNetId PlayerID );
	void JoinTeam ( struct FUniqueNetId PlayerID, int Team );
	void EndRound ( int SecondsRemaining );
	void StartRound ( int SecondsRemaining );
	void IdleKick ( struct FUniqueNetId PlayerID );
	void RemovePlayer ( struct FUniqueNetId PlayerID );
	void AddPlayer ( struct FUniqueNetId PlayerID );
	void PlayPlaylist ( int PlaylistId );
	void PlayMutator ( struct FName MutatorName );
	void GameInit ( struct FName MapName, struct FName EventName, struct FName MatchType );
};

UClass* UGameMetrics_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_StadiumTeamColorsChanged_TA
// 0x001C (0x0130 - 0x0114)
class USeqEvent_StadiumTeamColorsChanged_TA : public USequenceEvent
{
public:
	int                                                Team;                                             		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Primary;                                          		// 0x0118 (0x000C) [0x0000000000000000]              
	struct FVector                                     Secondary;                                        		// 0x0124 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66115 ];

		return pClassPointer;
	};

	void LinearColorToVector ( struct FLinearColor* InColor, struct FVector* OutVector );
	void SetTeamColors ( TArray< struct FLinearColor >* Colors );
};

UClass* USeqEvent_StadiumTeamColorsChanged_TA::pClassPointer = NULL;

// Class TAGame.Team_Soccar_TA
// 0x002C (0x0360 - 0x0334)
class ATeam_Soccar_TA : public ATeam_TA
{
public:
	int                                                GameScore;                                        		// 0x0334 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class AActor* >                            PrimaryStarts;                                    		// 0x0338 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            SecondaryStarts;                                  		// 0x0344 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventGameScoreUpdated__Delegate;                		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0354 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66147 ];

		return pClassPointer;
	};

	void OnGameScoreUpdated ( );
	void ScoreGame ( );
	void InitSpawnPoints ( );
	class AActor* MirrorStartPoint ( class AActor* SpawnPoint, struct FVector Pivot );
	void eventDestroyed ( );
	void SetGameEvent ( class AGameEvent_Team_TA* InGameEvent );
	void eventReplicatedEvent ( struct FName VarName );
	void EventGameScoreUpdated ( class ATeam_Soccar_TA* Team );
};

UClass* ATeam_Soccar_TA::pClassPointer = NULL;

// Class TAGame.MatchSeries_TA
// 0x0010 (0x004C - 0x003C)
class UMatchSeries_TA : public UObject
{
public:
	int                                                SeriesLength;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< struct FSeriesTeam >                       Teams;                                            		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66158 ];

		return pClassPointer;
	};

	int __MatchSeries_TA__GetGamesPlayed ( int Sum, struct FSeriesTeam Team );
	int GetSeriesWinner ( );
	int GetGamesPlayed ( int* ReduceLocal_1DB897AD4DD51EBA5A7835AFC427B57E );
	bool AllGamesPlayed ( );
	void ScoreGame ( int TeamIndex );
	int FindTeamForPlayer ( struct FUniqueNetId Player );
	void RemoveTeamPlayer ( struct FUniqueNetId Player );
	void AddTeamPlayer ( int TeamIndex, struct FUniqueNetId Player );
};

UClass* UMatchSeries_TA::pClassPointer = NULL;

// Class TAGame.SkinOverrideTable_TA
// 0x000C (0x0048 - 0x003C)
class USkinOverrideTable_TA : public UObject
{
public:
	TArray< struct FProductSkinOverride >              Skins;                                            		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66304 ];

		return pClassPointer;
	};

};

UClass* USkinOverrideTable_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_ProductLink_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_ProductLink_TA : public UProductAttribute_TA
{
public:
	int                                                ProductID;                                        		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66331 ];

		return pClassPointer;
	};

	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* Attributes );
};

UClass* UProductAttribute_ProductLink_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Masterpiece_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Masterpiece_TA : public UProductAttribute_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66332 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_Masterpiece_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Level_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_Level_TA : public UProductAttribute_TA
{
public:
	int                                                Level;                                            		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66333 ];

		return pClassPointer;
	};

	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* Attributes );
};

UClass* UProductAttribute_Level_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_EquippableSlot_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_EquippableSlot_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      Slot;                                             		// 0x0054 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66334 ];

		return pClassPointer;
	};

	struct FName GetSlotName ( );
	struct FString GetOnlineProductAttributeValue ( );
	bool OnInit ( struct FString AttributeValue, TArray< struct FOnlineProductAttribute >* Attributes );
};

UClass* UProductAttribute_EquippableSlot_TA::pClassPointer = NULL;

// Class TAGame.Mutator_TA
// 0x0000 (0x003C - 0x003C)
class UMutator_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66386 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_TA::pClassPointer = NULL;

// Class TAGame.GameEventProductAssetCache_TA
// 0x0008 (0x0074 - 0x006C)
class UGameEventProductAssetCache_TA : public UActorComponent_X
{
public:
	class UProductAssetCache_TA*                       Cache;                                            		// 0x006C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66470 ];

		return pClassPointer;
	};

	void RefreshCache ( );
	void RefreshCacheDelayed ( );
	void HandleSelectedLoadout ( class APRI_TA* PRI );
	void HandlePlayerRemoved ( class AGameEvent_TA* G, class APRI_TA* PRI );
	void HandlePlayerAdded ( class AGameEvent_TA* G, class APRI_TA* PRI );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UGameEventProductAssetCache_TA::pClassPointer = NULL;

// Class TAGame.MatchAdminComponent_TA
// 0x0008 (0x0044 - 0x003C)
class UMatchAdminComponent_TA : public UObject
{
public:
	class AGameEvent_TA*                               GameEvent;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	class UOnlinePlayerPermissions_X*                  PlayerPermissions;                                		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66495 ];

		return pClassPointer;
	};

	bool IsMatchAdmin ( class APRI_TA* PRI );
	bool IsLocalHost ( );
	void UpdateAll ( );
	void UpdatePlayer ( class APRI_TA* PRI );
	void HandlePermissionsUpdated ( class UOnlinePlayerPermissions_X* P );
	void HandleGameOwnerUpdated ( class AGameEvent_TA* G, class APRI_TA* PRI );
	void HandlePlayerAdded ( class AGameEvent_TA* G, class APRI_TA* PRI );
	void Init ( class AGameEvent_TA* InGameEvent );
};

UClass* UMatchAdminComponent_TA::pClassPointer = NULL;

// Class TAGame.LoadoutRandomizer_TA
// 0x0000 (0x003C - 0x003C)
class ULoadoutRandomizer_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66650 ];

		return pClassPointer;
	};

	int GetRandomColorID ( class UCarColorSet_TA* Set );
	void RandomizeTeamPaint ( struct FLoadoutData* Data );
	void RandomizeSlot ( class UProfile_TA* Profile, class UProductSlot_TA* Slot, struct FLoadoutData* Data, TArray< class UOnlineProduct_TA* >* ArrayInitializer_CE4AE3F646E8312E5ADCAEA4F2490831 );
	void Randomize ( class UProfile_TA* Profile, struct FLoadoutData* Loadouts );
	void RandomizeLoadout ( class UProfile_TA* Profile, struct FLoadoutData* Loadout );
	void RandomizerLog ( struct FString LogStr );
};

UClass* ULoadoutRandomizer_TA::pClassPointer = NULL;

// Class TAGame.HUDBase_TA
// 0x0050 (0x04E0 - 0x0490)
class AHUDBase_TA : public AHUD_X
{
public:
	class UGFxShell_TA*                                Shell;                                            		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DisconnectedString;                               		// 0x0494 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerMaintString;                                		// 0x04A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyChatTitle;                                   		// 0x04AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxData_Chat_TA*                            ChatData;                                         		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxData_PlayerBanner_TA*                    GFxPlayerBanner;                                  		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventGameMessage__Delegate;                     		// 0x04C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x04C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventChatMessage__Delegate;                     		// 0x04D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x04D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66710 ];

		return pClassPointer;
	};

	void InitPlayerBanner ( );
	void DrawLookupTextures ( );
	void DrawHUD ( );
	void NotifyChatDisabled ( float Time );
	void NotifyServerShutdown ( );
	void eventNotifyBadConnection ( float Ping, int InPacketLoss, int OutPacketLoss, float ReceiveTime, float AckTime, float NetSpeed );
	void ToggleScoreboard ( );
	bool ChatWithExternalKeyboard ( struct FString Title, struct FScriptDelegate Callback );
	void OpenPartyChat ( );
	void OpenTeamChat ( );
	void OpenChat ( );
	void ToggleMidGameMenu ( );
	void UpdatePRIData ( );
	void ReceiveMessage ( class UMessage_TA* Message, struct FString Text );
	void AddChatMessage ( int Team, struct FString PlayerName, struct FString Message, unsigned char ChatChannel, unsigned long bLocalPlayer, struct FUniqueNetId SenderId, unsigned long bTransient, unsigned long bPreset );
	void OnChatMessage ( struct FChatMessage NewMsg );
	void LobbyMessage_TA ( struct FString PlayerName, struct FString Message, unsigned char ChatChannel, class APlayerReplicationInfo* SenderPRI, unsigned char PartyChatCommand );
	void IndividualMessage_TA ( struct FString PlayerName, struct FString Message, unsigned char ChatChannel, struct FUniqueNetId PersonaID );
	void Message_TA ( class APlayerReplicationInfo* PRI, struct FString Message, unsigned char ChatChannel, unsigned long bPreset, struct FUniqueNetId Recipient );
	class UOnlineGame_X* GetOnlineGame ( );
	class UOnlinePlayer_X* GetOnlinePlayer ( );
	class AGameEvent_TA* GetGameEvent ( );
	void eventDestroyed ( );
	void HandleProfileSet ( class ULocalPlayer_TA* InPlayer );
	void PostBeginPlay ( );
	void EventChatMessage ( struct FChatMessage Message );
	void EventGameMessage ( class UMessage_TA* Message, struct FString Text );
};

UClass* AHUDBase_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_TA
// 0x00C4 (0x05A4 - 0x04E0)
class AGFxHUD_TA : public AHUDBase_TA
{
public:
	struct FString                                     UIState;                                          		// 0x04E0 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UGFxMoviePlayer_X*                           MatchInfoMovieArchetype;                          		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMoviePlayer_X*                           MatchInfoMovie;                                   		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxNameplatesManager_TA*                    NameplatesManager;                                		// 0x04F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     PlayerJoinString;                                 		// 0x04F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerLeaveString;                                		// 0x0504 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatTitle;                                        		// 0x0510 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamChatTitle;                                    		// 0x051C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatDisabledMessage;                              		// 0x0528 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ReplayQueSaveMessage;                             		// 0x0534 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class APRI_TA*                                     OwnerPRI;                                         		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     OwnerCar;                                         		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0548 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_Team_TA*                          TeamGameEvent;                                    		// 0x054C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxData_GameEvent_TA*                       GameEventData;                                    		// 0x0550 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxData_LocalCar_TA*                        CarData;                                          		// 0x0554 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxData_ItemDrops_TA*                       ItemDropData;                                     		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGFxData_PRI_TA* >                   PRIData;                                          		// 0x055C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UGFxData_PlayerRecord_TA* >          PlayerRecordData;                                 		// 0x0568 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              CloseScoreboardTime;                              		// 0x0574 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bShowedDisconnectMessage : 1;                     		// 0x0578 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class APRI_TA* >                           PendingShowAddMessagePlayers;                     		// 0x057C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ARBActor_TA*                                 LastTarget;                                       		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TestLastLogTime;                                  		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAdHocBeacon_X*                              AdHocBeacon;                                      		// 0x0590 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventOpenedMidGameMenu__Delegate;               		// 0x0594 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0598 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66709 ];

		return pClassPointer;
	};

	void __GFxHUD_TA__HandleServerNameChanged ( struct FString O, struct FString S );
	void HandleRespawnTimeUpdated ( int NewTime );
	void HandleReplaceBot ( class APRI_TA* InPRI );
	struct FScreenLocation GetScreenLocation ( struct FVector WorldLocation, float SafeZone );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void DrawNameplatesTexture ( );
	void DrawHUD ( );
	void HandleReplayAutoSave ( class AReplayDirector_TA* Director, struct FUniqueNetId* StructInitializer_86C96AB14F673E5DF051AD86E08FFE9A );
	void HandleVoteFinished ( class AVoteActor_TA* VoteActor );
	void HandleVoteStarted ( class AVoteActor_TA* VoteActor );
	void NotifyChatDisabled ( float Time, struct FUniqueNetId* StructInitializer_8DA86E824397F2605E2B639502900BE8 );
	void ChatPreset ( int Index );
	void HandleInternetConnectionChanged ( unsigned long bConnected );
	void NotifyClientTravel ( );
	void NotifyServerShutdown ( );
	void HandlePRICameraChanged ( class APRI_TA* InPRI );
	void CloseScoreboard ( );
	void OpenScoreboard ( );
	void OpenMidgameMenu ( );
	void ReceiveMessage ( class UMessage_TA* Message, struct FString Text );
	void HandleStatTickerMessage ( class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent );
	void HandleStatEvent ( class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count );
	void OpenTeamChat ( );
	void OpenChat ( );
	bool CanOpenChat ( );
	bool AnyPlayerChatRestricted ( );
	void UpdateCarData ( );
	class ACar_TA* GetFocusCar ( );
	void UpdateCarDataFromCar ( class ACar_TA* Car );
	void UpdateCameraYaw ( );
	void eventTick ( float DeltaTime );
	int GetBoostAmountForUI ( class ACarComponent_Boost_TA* Boost );
	void SetBadConnection ( unsigned long bShow );
	void eventNotifyBadConnection ( float Ping, int InPacketLoss, int OutPacketLoss, float ReceiveTime, float AckTime, float NetSpeed );
	void UpdatePRIData ( );
	void SetOwnerCar ( class ACar_TA* NewCar );
	void HandlePawnChanged ( class APlayerController_X* PC, class APawn* OldPawn, class APawn* NewPawn );
	void OnAllTeamsCreated ( );
	void HandleAllTeamsCreated ( class AGameEvent_Team_TA* G );
	void HandleGameStateChanged ( class AGameEvent_TA* G );
	void HandlePlayerRemoved ( class AGameEvent_TA* G, class APRI_TA* InPRI );
	void HandlePlayerIDChanged ( class APRI_X* InPRI );
	void HideNameplates ( );
	void ShowNameplates ( );
	void ToggleNameplates ( );
	void UpdatePendingAddMessagePlayers ( );
	void HandlePlayerAdded ( class AGameEvent_TA* G, class APRI_TA* InPRI );
	struct FString GetPlayerName ( class APRI_TA* PRI );
	void UpdateGFxPlayerRecord ( class APRI_TA* InPRI );
	void UpdateSessionStatus ( );
	void DestroyGFxPRIData ( class UGFxData_PRI_TA* OldData );
	class UGFxData_PRI_TA* CreateGFxPRIData ( );
	void HandleReservationsUpdated ( class AGRI_X* GRI );
	bool IsValidID ( struct FUniqueNetId PlayerID );
	class UGFxData_PRI_TA* GetPRIDataFromID ( struct FUniqueNetId PlayerID );
	int GetPRIDataIndex ( class APRI_TA* InPRI );
	void HandleMatchTypeSet ( class AGameEvent_TA* InGameEvent );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	void HandleGameEventChanged ( class APRI_TA* InPRI );
	void SetTeam ( class ATeam_TA* Team );
	void HandleTeamChanged ( class APRI_X* InPRI );
	void SetOwnerPRI ( class APRI_TA* InPRI );
	void HandleReceivedPRI ( class APlayerController_X* PC );
	void UpdateMutatorTags ( struct FString MatchTags );
	void UpdateMutatorTagsFromPreset ( class UPresetMutators_X* Presets );
	void HandleGameDataSelected ( int PlaylistId, int MutatorIndex );
	void HandleServerNameChanged ( class AGRI_X* GRI );
	void HandleCanVoteForfeitChanged ( class AGameEvent_TA* InGameEvent );
	void HandlePenaltyChanged ( class AGameEvent_TA* InGameEvent );
	void HandleServerNameSanitized ( struct FString Original, struct FString Sanitized );
	void HandleGRIReplicated ( class AGRI_X* GRI );
	void HandleHideWorldUIChanged ( class UGameShare_TA* G );
	void eventDestroyed ( );
	void InitGFxData ( );
	void InitGFx ( );
	void eventPostBeginPlay ( );
	void EventOpenedMidGameMenu ( class AGFxHUD_TA* HUD );
};

UClass* AGFxHUD_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameDedicatedServer_TA
// 0x0020 (0x0270 - 0x0250)
class UOnlineGameDedicatedServer_TA : public UOnlineGameDedicatedServer_X
{
public:
	int                                                LastPlaylistID;                                   		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UObject* >                           AllRelevantProducts;                              		// 0x0254 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventGameEventInitialized__Delegate;            		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0264 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66734 ];

		return pClassPointer;
	};

	bool CanStartMatch ( );
	bool AllowSplitscreenJoin ( class APlayerReplicationInfo* PrimaryPRI, struct FUniqueNetId PlayerID, struct FString PlayerName );
	void AllowPlayerLogin ( struct FString Options, struct FUniqueNetId PlayerID, struct FString* ErrorMessage );
	void GoToNextMap ( );
	struct FName GetNextRandomMapName ( int GameMode );
	void GotoPrivateMatchMap ( struct FName MapName, int GameMode, struct FString GameTags );
	unsigned char GetTeamNum ( struct FUniqueNetId PlayerID );
	void ReportLowFPS ( );
	int GetPlaylistPlayerCount ( class UGameSettingPlaylist_X* Playlist );
	void SetPlaylist ( int PlaylistId );
	void OnMainEventDestroyed ( );
	bool KickPlayersOnGameEventDestroyed ( );
	void HandleMigrationJoin ( );
	void ClearSettings ( );
	void HandleGameEventEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleGameInitialized ( class AGameInfo_TA* Game );
	void StartMatch ( );
	class AGameEvent_TA* GetCurrentGameEvent ( );
	void LoadAllRelevantProducts ( );
	void OnInit ( );
	void EventGameEventInitialized ( class AGameEvent_TA* GameEvent );
};

UClass* UOnlineGameDedicatedServer_TA::pClassPointer = NULL;

// Class TAGame.RPC_GetBanStatus_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_GetBanStatus_TA : public URPC_X
{
public:
	TArray< struct FUniqueNetId >                      Players;                                          		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      Banned;                                           		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66891 ];

		return pClassPointer;
	};

	class URPC_GetBanStatus_TA* SetPlayers ( TArray< struct FUniqueNetId > InPlayers );
};

UClass* URPC_GetBanStatus_TA::pClassPointer = NULL;

// Class TAGame.MatchType_Lan_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_Lan_TA : public UMatchType_Private_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66927 ];

		return pClassPointer;
	};

	bool IsOnlineMultiplayer ( );
	struct FName GetMatchTypeName ( );
};

UClass* UMatchType_Lan_TA::pClassPointer = NULL;

// Class TAGame.RPC_ReportPlayer_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_ReportPlayer_TA : public URPC_X
{
public:
	TArray< struct FReportedPlayerInfo >               Reports;                                          		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameID;                                           		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66993 ];

		return pClassPointer;
	};

	class URPC_ReportPlayer_TA* SetGameID ( struct FString InGameID );
	class URPC_ReportPlayer_TA* SetReports ( TArray< struct FReportedPlayerInfo > InReports );
};

UClass* URPC_ReportPlayer_TA::pClassPointer = NULL;

// Class TAGame.RPC_ChatLog_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_ChatLog_TA : public URPC_X
{
public:
	TArray< struct FPlayerChatMessage >                Messages;                                         		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameID;                                           		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66998 ];

		return pClassPointer;
	};

	class URPC_ChatLog_TA* SetGameID ( struct FString InGameID );
	class URPC_ChatLog_TA* SetMessages ( TArray< struct FPlayerChatMessage >* InMessages );
};

UClass* URPC_ChatLog_TA::pClassPointer = NULL;

// Class TAGame.ListenServer_TA
// 0x001C (0x0058 - 0x003C)
class UListenServer_TA : public UObject
{
public:
	class AGRI_X*                                      GRI;                                              		// 0x003C (0x0004) [0x0000000000000000]              
	class UAdHocBeacon_X*                              AdHocBeacon;                                      		// 0x0040 (0x0004) [0x0000000000000000]              
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0044 (0x0004) [0x0000000000000000]              
	TArray< struct FLoadingPlayer >                    LoadingPlayers;                                   		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bRegistered : 1;                                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67005 ];

		return pClassPointer;
	};

	int __ListenServer_TA__GetNumPlayers ( struct FLoadingPlayer P );
	void GoToNextMap ( );
	void HandleCreateLanServerError ( class UError* Error );
	void HandleLanServerCreated ( );
	void RegisterLanServer ( );
	void SubmitLanServerMetaData ( );
	struct FString BuildLanServerMetaData ( );
	void RebuildReservations ( struct FReplicatedReservationData* StructInitializer_A52E2D6D4EA4872533E464976B1CDD71 );
	void TimerUpdateReservations ( );
	void UpdateReservations ( );
	void TimeoutLoadingPlayers ( );
	float GetMapLoadTime ( unsigned char Platform );
	void RemoveLoadingPlayer ( struct FUniqueNetId PlayerID );
	int GetMaxPlayers ( );
	int GetNumPlayers ( TArray< int >* MapLocal_D2C53A8C4A4BF9D46E7DDE928DC68181, int* ReduceLocal_1AF5376C41B7D5EDC48FB7A9B95CF695 );
	void KickConnectedPlayers ( );
	struct FUniqueNetId GetCustomMatchOwner ( );
	struct FCustomMatchSettings GetCustomMatchSettings ( );
	void PlayerLoggedOut ( class APlayerReplicationInfo* PRI );
	void PlayerLoggedIn ( class APlayerReplicationInfo* PRI );
	bool AllowSplitscreenJoin ( class APlayerReplicationInfo* PrimaryPRI, struct FUniqueNetId PlayerID, struct FString PlayerName );
	bool IsLocalPlayer ( struct FUniqueNetId PlayerID );
	bool CanAddPlayers ( int Count );
	void AllowPlayerLogin ( struct FString Options, struct FUniqueNetId PlayerID, struct FString* ErrorMessage, struct FLoadingPlayer* StructInitializer_170C5CBB4B2527DF45A159807D0AD3BB );
	void HandleGRIChanged ( );
	void Init ( class AGameEvent_TA* InGameEvent );
};

UClass* UListenServer_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_GameEventStateChanged_TA
// 0x000C (0x0120 - 0x0114)
class USeqEvent_GameEventStateChanged_TA : public USequenceEvent
{
public:
	struct FString                                     StateName;                                        		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67007 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_GameEventStateChanged_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Lobby_TA
// 0x0008 (0x04D8 - 0x04D0)
class AGameEvent_Lobby_TA : public AGameEvent_TA
{
public:
	class ABall_TA*                                    BallArchetype;                                    		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ABall_TA*                                    Ball;                                             		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67050 ];

		return pClassPointer;
	};

	bool AllowShutdown ( );
	void eventDestroyed ( );
	void OnCarSpawned ( class ACar_TA* NewCar );
	void InitField ( );
	void eventPostBeginPlay ( );
	void StartFirstState ( );
	void OnInit ( );
};

UClass* AGameEvent_Lobby_TA::pClassPointer = NULL;

// Class TAGame.PlayerStart_TA
// 0x0000 (0x02E4 - 0x02E4)
class APlayerStart_TA : public APlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67059 ];

		return pClassPointer;
	};

};

UClass* APlayerStart_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_PostGameLobby_TA
// 0x0000 (0x04D8 - 0x04D8)
class AGameEvent_PostGameLobby_TA : public AGameEvent_Lobby_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67078 ];

		return pClassPointer;
	};

	bool ShouldShowBallIndicator ( );
	void StartFirstState ( );
};

UClass* AGameEvent_PostGameLobby_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_TA
// 0x0000 (0x003C - 0x003C)
class UGameEvent_Soccar_SubRules_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67269 ];

		return pClassPointer;
	};

	void OnGetBallModifiedScore ( class ABall_TA* Ball, int ScoreIndex, int* BallScore );
	void OnGetBallSpawnPosition ( struct FVector* BallPosition );
	bool OnCanUseBallCam ( );
	class ATeam_TA* OnGetWinningTeam ( );
	bool ShouldSpawnBall ( );
	bool ShouldDisableStatXP ( );
	void SetBallListeners ( class ABall_TA* Ball, unsigned long bListen );
	void OnRestartPlayer ( class AController* NewPlayer );
	void OnCarDemolished ( class ACar_TA* Car, struct FDemolishData Data );
	void OnTick ( float DeltaTime );
	void OnRemoveGameBall ( );
	void OnAddGameBall ( class ABall_TA* Ball );
	void OnFirstBallHit ( );
	void OnMatchEnd ( );
	void OnNewRound ( );
	void Init ( );
};

UClass* UGameEvent_Soccar_SubRules_TA::pClassPointer = NULL;

// Class TAGame.GoalIndicator_TA
// 0x003C (0x0238 - 0x01FC)
class AGoalIndicator_TA : public AActor
{
public:
	class UGoal_TA*                                    Goal;                                             		// 0x01FC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class APlayerController_TA*                        PCOwner;                                          		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     PRI;                                              		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ULensFlareComponent_X*                       LensFlareComponent;                               		// 0x0208 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x020C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 DefenseMesh;                                      		// 0x0210 (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 OffenseMesh;                                      		// 0x0214 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          MaterialGoalDefense;                              		// 0x0218 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          MaterialGoalOffense;                              		// 0x021C (0x0004) [0x0000000000000000]              
	unsigned long                                      bSpawnForSpectator : 1;                           		// 0x0220 (0x0004) [0x0000000000000000] [0x00000001] 
	class UStaticMesh*                                 SpectatorMesh;                                    		// 0x0224 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          SpectatorMaterialGoal;                            		// 0x0228 (0x0004) [0x0000000000000000]              
	TArray< class ULensFlare* >                        LensFlareTeamList;                                		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67318 ];

		return pClassPointer;
	};

	void HandleViewerTeamChanged ( class APRI_X* InPRI );
	void HandleViewerReceivedPRI ( class APlayerController_X* PC );
	void Destroyed ( );
	void SetGoal ( class AGameEvent_Soccar_TA* GameEvent, class UGoal_TA* In_Goal );
};

UClass* AGoalIndicator_TA::pClassPointer = NULL;

// Class TAGame.CountdownObject_TA
// 0x0014 (0x006C - 0x0058)
class UCountdownObject_TA : public UTickableStateObject_X
{
public:
	int                                                CountTime;                                        		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __EventCountChange__Delegate;                     		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67367 ];

		return pClassPointer;
	};

	void UpdateCountdown ( );
	void StopCount ( );
	void Start ( int InCountTime );
	void EventCountChange ( class UCountdownObject_TA* CountdownObject, int CountValue );
};

UClass* UCountdownObject_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_GoalScored_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_GoalScored_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67491 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_GoalScored_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_ScoreChanged_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_ScoreChanged_TA : public USequenceEvent
{
public:
	int                                                BlueScore;                                        		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                RedScore;                                         		// 0x0118 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67500 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_ScoreChanged_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_CountDownStart_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_CountDownStart_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67619 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CountDownStart_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_CountDownCompleted_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_CountDownCompleted_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67629 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_CountDownCompleted_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_RoundStart_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_RoundStart_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67634 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_RoundStart_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_LiveReplay_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LiveReplay_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67735 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_LiveReplay_TA::pClassPointer = NULL;

// Class TAGame.RPC_MatchComplete_TA
// 0x0028 (0x00C4 - 0x009C)
class URPC_MatchComplete_TA : public URPC_X
{
public:
	struct FString                                     MatchGUID;                                        		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlinePlayerMatchData >            MatchData;                                        		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      GameVersion;                                      		// 0x00B4 (0x0001) [0x0000000000000000]              
	TArray< struct FOnlineProductDrop >                Drops;                                            		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67762 ];

		return pClassPointer;
	};

	TArray< struct FCurrencyDrop > GetCurrencyDrops ( struct FUniqueNetId* PlayerID, TArray< struct FCurrencyDrop >* ArrayInitializer_C1825B3F4B4AE37A4EA9A2A5811CCA31 );
	TArray< struct FOnlineProductData > GetDrops ( struct FUniqueNetId* PlayerID );
	class URPC_MatchComplete_TA* SetMatchData ( TArray< struct FOnlinePlayerMatchData >* InMatchData );
	class URPC_MatchComplete_TA* SetGameVersion ( unsigned char InGameVersion );
	class URPC_MatchComplete_TA* SetMatchGUID ( struct FString InGuid );
};

UClass* URPC_MatchComplete_TA::pClassPointer = NULL;

// Class TAGame.Replay_Soccar_TA
// 0x0038 (0x0224 - 0x01EC)
class UReplay_Soccar_TA : public UReplay_TA
{
public:
	int                                                TeamSize;                                         		// 0x01EC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bUnfairBots : 1;                                  		// 0x01F0 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	int                                                PrimaryPlayerTeam;                                		// 0x01F4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Team0Score;                                       		// 0x01F8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Team1Score;                                       		// 0x01FC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FScoredGoal >                       Goals;                                            		// 0x0200 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FHighlight >                        HighLights;                                       		// 0x020C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FReplayPlayerStats >                PlayerStats;                                      		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67846 ];

		return pClassPointer;
	};

	void eventPreExport ( );
	void RemoveTimelineKeyframe ( int KeyframeIndex );
	void AddTimelineEvent ( struct FName EventID, float TimeBeforeEvent );
	void RecordUserEvent ( );
	void RecordHighlight ( class APRI_TA* FocusPlayer, struct FName BallName );
	void RecordSave ( class APRI_TA* Saver, struct FName BallName );
	void RecordGoal ( class APRI_TA* Scorer, struct FName BallName );
	void AddPlayer ( class APRI_TA* PRI );
};

UClass* UReplay_Soccar_TA::pClassPointer = NULL;

// Class TAGame.SpawnPointCluster_TA
// 0x000C (0x0048 - 0x003C)
class USpawnPointCluster_TA : public UObject
{
public:
	TArray< class USpawnPointGroup_TA* >               SpawnTeams;                                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67865 ];

		return pClassPointer;
	};

	class USpawnPointGroup_TA* GetGroup ( class ATeamInfo* Team );
	int GetGroupId ( class AActor* SpawnPoint );
	void RemoveFromSpawnPoints ( class AController* ForPlayer );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
	bool TryAddToSpawnPointAtIndex ( class AController* ForPlayer, int PointIdx );
	bool TryAddToSpawnPoint ( class AController* ForPlayer );
	void SetSpawnPoints ( class AGameEvent_TA* GameEvent, struct FVector Center, struct FRotator Orientation );
	void Init ( class AGameEvent_TA* GameEvent, struct FVector CenterOffset, struct FRotator CenterRotation );
};

UClass* USpawnPointCluster_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_PodiumStart_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_PodiumStart_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67883 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_PodiumStart_TA::pClassPointer = NULL;

// Class TAGame.StatCategory_TA
// 0x0010 (0x004C - 0x003C)
class UStatCategory_TA : public UObject
{
public:
	TArray< class UStatTitle_TA* >                     Titles;                                           		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Multiplier;                                       		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67892 ];

		return pClassPointer;
	};

};

UClass* UStatCategory_TA::pClassPointer = NULL;

// Class TAGame.StatTitle_TA
// 0x002D (0x0069 - 0x003C)
class UStatTitle_TA : public UObject
{
public:
	struct FString                                     PrimaryTitle;                                     		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SecondaryTitle;                                   		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                Points;                                           		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                MinStatValueRequired;                             		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                MaxStatValueAllowed;                              		// 0x005C (0x0004) [0x0000000000000000]              
	class UStatEvent_TA*                               Stat;                                             		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPerStat : 1;                                     		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bInverseStat : 1;                                 		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bClampStatToOne : 1;                              		// 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      StatUnitType;                                     		// 0x0068 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67895 ];

		return pClassPointer;
	};

	struct FString GetUnitTypeAsString ( unsigned long bMetric );
	bool GetNumPoints ( class APRI_TA* Member, class UStatCategory_TA* Category, int* PointsEarned, int* StatCount );
};

UClass* UStatTitle_TA::pClassPointer = NULL;

// Class TAGame.TraceableSpawnPoint_TA
// 0x0004 (0x0200 - 0x01FC)
class ATraceableSpawnPoint_TA : public AActor
{
public:
	class UCylinderComponent*                          CylinderComp;                                     		// 0x01FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67943 ];

		return pClassPointer;
	};

};

UClass* ATraceableSpawnPoint_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_GameTimeChanged_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_GameTimeChanged_TA : public USequenceEvent
{
public:
	float                                              CallTimePercent;                                  		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHasBeenCalled : 1;                               		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68027 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_GameTimeChanged_TA::pClassPointer = NULL;

// Class TAGame.RPC_Challenge_PlayedGame_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_Challenge_PlayedGame_TA : public URPC_X
{
public:
	TArray< struct FUniqueNetId >                      PlayerIDs;                                        		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameMode;                                         		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68062 ];

		return pClassPointer;
	};

	class URPC_Challenge_PlayedGame_TA* SetGameMode ( struct FString InGameMode );
	class URPC_Challenge_PlayedGame_TA* AddPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_Challenge_PlayedGame_TA::pClassPointer = NULL;

// Class TAGame.__GameEvent_Soccar_TA__ReportFps
// 0x0004 (0x0040 - 0x003C)
class U__GameEvent_Soccar_TA__ReportFps : public UObject
{
public:
	int                                                TotalFrames;                                      		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68070 ];

		return pClassPointer;
	};

	void LambdaCallback ( struct FFPSBucketMetrics Bucket );
};

UClass* U__GameEvent_Soccar_TA__ReportFps::pClassPointer = NULL;

// Class TAGame.PerfMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UPerfMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68072 ];

		return pClassPointer;
	};

	void ClientFPS ( int TotalFrames, TArray< struct FFPSBucketMetrics > Buckets );
	void ServerFPS ( int TotalFrames, TArray< struct FFPSBucketMetrics > Buckets );
};

UClass* UPerfMetrics_TA::pClassPointer = NULL;

// Class TAGame.MatchBroadcastComponent_TA
// 0x000C (0x0054 - 0x0048)
class UMatchBroadcastComponent_TA : public UComponent
{
public:
	class UMatchBroadcastLog_TA*                       MatchLog;                                         		// 0x0048 (0x0004) [0x0000000000000000]              
	class URPC_RecordMatchStats_TA*                    MatchRPC;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	class UOnlineGame_Base_X*                          OnlineGame;                                       		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68090 ];

		return pClassPointer;
	};

	void AppendBroadcastLog ( class AMatchBroadcast_TA* Broadcast, struct FString EventJson );
	void SetBroadcast ( class AMatchBroadcast_TA* Broadcast );
	void InitServer ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleLocalPlayersChanged ( class AGameEvent_TA* GameEvent );
	void InitClient ( class AGameEvent_Soccar_TA* GameEvent );
	void SendMatchRPC ( );
	void HandleMatchEndedForRPC ( class AGameEvent_Soccar_TA* G );
	bool CreateMatchRPC ( class AGameEvent_Soccar_TA* GameEvent );
	bool CreateMatchLog ( );
	struct FString GetLogFileName ( );
	bool IsCommandlineEnabled ( );
	void Init ( class AGameEvent_Soccar_TA* GameEvent );
};

UClass* UMatchBroadcastComponent_TA::pClassPointer = NULL;

// Class TAGame.GameObserver_TA
// 0x00B4 (0x0120 - 0x006C)
class UGameObserver_TA : public UActorComponent_X
{
public:
	float                                              HitTimeToBallMin;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitTimeToBallMax;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitPredictDistMax;                                		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitPredictDistMin;                                		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffenseDotBetweenMin;                             		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffenseDotBetweenMax;                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffenseDistToGoalMin;                             		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffenseDistToGoalMax;                             		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffenseDistToBallMin;                             		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffenseDistToBallMax;                             		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseDotBetweenMin;                             		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseDotBetweenMax;                             		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseDistToGoalMin;                             		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseDistToGoalMax;                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseDistToBallMin;                             		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefenseDistToBallMax;                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDistToBallMin;                         		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDistToBallMax;                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDistToBallWeight;                      		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDotToBallMin;                          		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDotToBallMax;                          		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDotToBallWeight;                       		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityOffenseWeight;                         		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScorabilityDefenseWeight;                         		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarBallAerialBlend;                               		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAerialHitProbability;                          		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebugCarData : 1;                                		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDebugGoalData : 1;                               		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugBallData : 1;                               		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebugPrediction : 1;                             		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< struct FCarData >                          RelevantCars;                                     		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGoalData >                         RelevantGoals;                                    		// 0x00E4 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	float                                              MinAerialAltitude;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAerialAltitude;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AerialLikelyhood;                                 		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              MaxCalculatedTimeToBall;                          		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBallData                                   RelevantBall;                                     		// 0x0100 (0x0014) [0x0000000000000000]              
	TArray< class UObject* >                           Listeners;                                        		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68091 ];

		return pClassPointer;
	};

	void DrawGoalData ( struct FGoalData Data );
	void DrawCarData ( struct FCarData Data );
	void DrawBallData ( struct FBallData Data );
	float GetAerialSkill ( float Altitude );
	struct FVector GetBallLocationAtTime ( class ABall_TA* InBall, float inTime );
	struct FVector GetCarLocationAtTime ( class ACar_TA* InCar, float inTime );
	struct FVector ClampLocationToGoal ( class UGoal_TA* InGoal, struct FVector InLocation );
	void GetCarGoalData ( class ACar_TA* ForCar, struct FGoalData ForGoal, struct FCarGoalData* Data );
	struct FGoalData GetOffensiveGoal ( class ACar_TA* ForCar );
	struct FGoalData GetDefensiveGoal ( class ACar_TA* ForCar );
	void UpdateCarData ( struct FCarData* Data );
	struct FCarData GetCarDataForPRI ( class APRI_TA* PRI );
	struct FCarData GetCarData ( class ACar_TA* ForCar );
	void UpdateCarsData ( );
	void UpdateGoalData ( struct FGoalData* Data );
	void UpdateGoalsData ( );
	void UpdateBallData ( );
	void eventTick ( float DeltaTime );
	void UpdateShouldTick ( );
	void RemoveListener ( class UObject* InListener );
	void AddListener ( class UObject* InListener );
	class AGameEvent_Soccar_TA* GetSoccarEvent ( );
	class ABall_TA* GetBall ( );
	void HandleCarHitBall ( class ACar_TA* InCar, class ABall_TA* InBall );
	void HandleCarRemoved ( class UGameShare_TA* InGameShare, class ACar_TA* InCar );
	void HandleCarAdded ( class UGameShare_TA* InGameShare, class ACar_TA* InCar );
	void InitCars ( );
	void HandleBallRemoved ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* InBall );
	void HandleBallAdded ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* InBall );
	void InitBall ( );
	void InitFieldProperties ( );
	void eventAttached ( );
};

UClass* UGameObserver_TA::pClassPointer = NULL;

// Class TAGame.SimilarSeasonLogos_TA
// 0x000C (0x0048 - 0x003C)
class USimilarSeasonLogos_TA : public UObject
{
public:
	TArray< struct FSimilarLogoGroup >                 LogoGroups;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68112 ];

		return pClassPointer;
	};

};

UClass* USimilarSeasonLogos_TA::pClassPointer = NULL;

// Class TAGame.ScreenDisplayActor_TA
// 0x0058 (0x0298 - 0x0240)
class AScreenDisplayActor_TA : public ADynamicSMActor_Spawnable
{
public:
	class APlayerControllerBase_TA*                    PC;                                               		// 0x0240 (0x0004) [0x0000000000000000]              
	struct FVector                                     StartLocationOffset;                              		// 0x0244 (0x000C) [0x0000000000000000]              
	struct FVector                                     LocationOffset;                                   		// 0x0250 (0x000C) [0x0000000000000000]              
	struct FRotator                                    CurrentRotation;                                  		// 0x025C (0x000C) [0x0000000000000000]              
	float                                              RotationSpeed;                                    		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              StartRotationOffset;                              		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              BlendInSpeed;                                     		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              BlendInAmount;                                    		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              CameraShakeDuration;                              		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              CameraShakeAmplitude;                             		// 0x027C (0x0004) [0x0000000000000000]              
	float                                              CameraShakeFrequency;                             		// 0x0280 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ParticleFX;                                       		// 0x0284 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    ParticleComponent;                                		// 0x0288 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     FXOffset;                                         		// 0x028C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68118 ];

		return pClassPointer;
	};

	void SpawnFX ( );
	void PlayBlendInCameraShake ( );
	void OnOffsetBlendedIn ( );
	void Tick ( float DeltaTime );
	void Init ( );
};

UClass* AScreenDisplayActor_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_Basketball_TA
// 0x0008 (0x0044 - 0x003C)
class UGameEvent_Soccar_SubRules_Basketball_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                LongDistanceScore;                                		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                DefaultScore;                                     		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68248 ];

		return pClassPointer;
	};

	void OnGetBallModifiedScore ( class ABall_TA* Ball, int ScoreIndex, int* BallScore );
};

UClass* UGameEvent_Soccar_SubRules_Basketball_TA::pClassPointer = NULL;

// Class TAGame.Tutorial_TA
// 0x0140 (0x0198 - 0x0058)
class UTutorial_TA : public UTickableStateObject_X
{
public:
	class USequenceAction*                             KNode_Owner;                                      		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerController_TA*                        PC;                                               		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_Tutorial_TA*                      GameEvent;                                        		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ModalSectionName;                                 		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxModal_X*                                 MessageModal;                                     		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FMessageInfo >                      Messages;                                         		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MessageIndex;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              DisplayMessageStartTime;                          		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEndTutorialOnFinalMessage : 1;                   		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCompleteTutorialOnFinalMessage : 1;              		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInitialMessagesFinished : 1;                     		// 0x0088 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0088 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSkipFadeIn : 1;                                  		// 0x0088 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFadeTransitionComplete : 1;                      		// 0x0088 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bTutorialStarted : 1;                             		// 0x0088 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bActionNameToDetectPressed : 1;                   		// 0x0088 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCarTouched : 1;                                  		// 0x0088 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bCompleteOnBallTouch : 1;                         		// 0x0088 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bFailTutorialOnOtherCarHitBall : 1;               		// 0x0088 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bDestroyBallsOnFadeIn : 1;                        		// 0x0088 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDestroyBotsOnFadeIn : 1;                         		// 0x0088 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHasBot : 1;                                      		// 0x0088 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bFoundBot : 1;                                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bStartWithSecondaryCamActive : 1;                 		// 0x0088 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bStartWithBoostMeterDisabled : 1;                 		// 0x0088 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bBotCanPlay : 1;                                  		// 0x0088 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bStartBotOnAllMessagesDisplayed : 1;              		// 0x0088 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bBallCanHitPlayersGoal : 1;                       		// 0x0088 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bCompleteOnLastBallTouched : 1;                   		// 0x0088 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bCompleteOnHitGoal : 1;                           		// 0x0088 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bFailOnHitGoal : 1;                               		// 0x0088 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bFreezeCarOnSpawn : 1;                            		// 0x0088 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCanEverDodge : 1;                                		// 0x0088 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanEverDoubleJump : 1;                           		// 0x0088 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bTutorialFinished : 1;                            		// 0x0088 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bPauseDuringMessages : 1;                         		// 0x0088 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bCanResetTutorial : 1;                            		// 0x0088 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bCanSkipTutorial : 1;                             		// 0x0088 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bShowGameFinishMessage : 1;                       		// 0x0088 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bSkipped : 1;                                     		// 0x0088 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bQuit : 1;                                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReset : 1;                                       		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTLog : 1;                                        		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FMessageInfo                                CorrectAnswer;                                    		// 0x0090 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMessageInfo                                IncorrectAnswer;                                  		// 0x00C0 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              StartFadeDisplayTime;                             		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              FadeTime;                                         		// 0x00F8 (0x0004) [0x0000000000000000]              
	class UGFxShell_TA*                                Shell;                                            		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ActionNameToDetect;                               		// 0x0100 (0x0008) [0x0000000000000000]              
	float                                              FailTimeAfterBallTouch;                           		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              CountdownTime;                                    		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                BotTeam;                                          		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              TutorialFailTime;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              TutorialCompleteTime;                             		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              BallDestroyTimeOnTouch;                           		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              AllMessagesDisplayedTime;                         		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              WaitTimeBeforeCheckCompleteAction;                		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned char                                      TutorialStatus;                                   		// 0x0128 (0x0001) [0x0000000000000000]              
	float                                              StartTime;                                        		// 0x012C (0x0004) [0x0000000000000000]              
	struct FString                                     StartTimeString;                                  		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           UseActions;                                       		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             IgnoreActionPressList;                            		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             FailedActionPressList;                            		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             StartActionPressList;                             		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             CompleteActionPressList;                          		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             CompleteActionIgnorePressList;                    		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __EventTutorialEnded__Delegate;                   		// 0x0188 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x018C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68309 ];

		return pClassPointer;
	};

	struct FString GetTutorialName ( );
	void SkipTutorial_Confirm ( class UGFxModal_X* Modal );
	void SkipTutorial ( );
	void ResetTutorial ( );
	void SelectMultipleChoiceButton ( class UGFxModal_X* Modal, int buttonIndex );
	void MultipleChoice_Button3 ( class UGFxModal_X* Modal );
	void MultipleChoice_Button2 ( class UGFxModal_X* Modal );
	void MultipleChoice_Button1 ( class UGFxModal_X* Modal );
	void MultipleChoice_Button0 ( class UGFxModal_X* Modal );
	void ForceActivateOutput ( unsigned char Output );
	void NotifyEventOnTutorial ( struct FString EventName );
	void ReachedTimeAfterBallTouch ( );
	void HandleBallDestroyed ( class APawn_X* Pawn );
	void HandleCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void HandleHitGoal ( class ABall_TA* Ball, class UGoal_TA* Goal );
	void HandleBallAdded ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball );
	void RegisterGameBallDelegates ( );
	void CloseMessageModal ( );
	void TutorialCompleteTimeFinished ( );
	void TutorialFailTimeFinished ( );
	void EndTutorial ( );
	void ShowGameMessage ( struct FName Type, struct FString Message );
	void FailedTutorial ( );
	void CompletedTutorial ( );
	void SetIgnoreOnCompleteActionList ( );
	void AddKeyNameFromAction ( struct FName ActionName, TArray< struct FString >* KeyList );
	TArray< struct FString > GetActionDisplayNames ( struct FActionNameInfo ActionInfo );
	bool RemoveMatchingKeys ( struct FString KeyToAdd, TArray< struct FString >* Out_KeyList );
	struct FString GetUIReadableString ( struct FString Key );
	struct FString GetMergedActionString ( TArray< struct FString > KeyList );
	struct FString GetBodyText ( struct FMessageInfo InMessage );
	bool DisplayMessage ( struct FMessageInfo InMessage );
	bool DisplayNextMessage ( );
	void DisplayCurrentMessage ( );
	void OnAllMessagesDisplayed ( );
	void ShowNextMessage ( class UGFxModal_X* Modal );
	struct FMessageInfo GetMessage ( );
	void eventTick ( float DeltaTime );
	void CheckActionNameToDetect ( );
	void OnActionNameToDetectReleased ( );
	void OnActionNameToDetectPressed ( );
	void OnActionKeyReleased ( struct FName ActionName );
	void OnActionKeyPressed ( struct FName ActionName );
	bool NotifyKeyInput ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	bool NotifyAxisInput ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool CompleteActionPressed ( struct FName Key, unsigned long bGamepad );
	bool StartActionPressed ( struct FName Key, unsigned long bGamepad );
	void SetIgnoredInput ( unsigned long bClearPreviousActions );
	void SetAllDriving ( unsigned char PlayerDriveType, unsigned long bDriving );
	void TutorialStart ( );
	void CountTimeElapsed ( );
	void InitTutorial ( );
	void OnScreenFadedOut ( );
	void OnScreenFadedIn ( );
	void HideFadeScreen ( );
	void ShowFadeScreen ( float DisplayTime );
	void Destroyed ( );
	bool CanDestroy ( );
	void FoundBot ( );
	void HandleVehicleSetup ( class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car );
	void HandleInputTypeChanged ( class UGFxShell_X* InShell );
	void Init ( class APlayerController_TA* InPC, class AGameEvent_Tutorial_TA* InGameEvent, class USequenceAction* InKNode_Owner );
	void EventTutorialEnded ( class UTutorial_TA* Tutorial );
};

UClass* UTutorial_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Training_Goalie_TA
// 0x0004 (0x097C - 0x0978)
class AGameEvent_Training_Goalie_TA : public AGameEvent_Training_TA
{
public:
	int                                                Score;                                            		// 0x0978 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68340 ];

		return pClassPointer;
	};

	void CommitRedoRound ( );
	void ResetGameEvent ( );
	void GetBallAimInfo ( struct FVector BallSpawnLoc, struct FFieldSpawnInfo SpawnInfo, struct FVector* Out_GoalAimLocation, float* Out_DepthPercent, float* Out_HeightPercent, float* Out_WidthPercent );
	struct FVector GetBallArchVelocity ( struct FVector BallSpawnLoc, struct FFieldSpawnInfo SpawnInfo );
	struct FVector GetBallForwardVelocity ( struct FVector BallSpawnLoc, struct FFieldSpawnInfo SpawnInfo );
	struct FVector GetBallAimVelocity ( struct FVector BallSpawnLoc, struct FFieldSpawnInfo SpawnInfo );
	struct FVector DetermineBallInitialVelocity ( struct FVector BallSpawnLoc, class ACar_TA* Car, struct FFieldSpawnInfo SpawnInfo );
	struct FRotator GetCarSpawnRotation ( struct FFieldSpawnInfo SpawnInfo, struct FVector CarSpawnLocation );
	struct FVector GetCarSpawnLocation ( struct FFieldSpawnInfo SpawnInfo );
	int GetScore ( );
};

UClass* AGameEvent_Training_Goalie_TA::pClassPointer = NULL;

// Class TAGame.TutorialSave_TA
// 0x000C (0x0048 - 0x003C)
class UTutorialSave_TA : public UObject
{
public:
	TArray< struct FString >                           TrainingEventsPlayed;                             		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68527 ];

		return pClassPointer;
	};

	bool AddToTutorialPlayedList ( struct FString EventName );
	bool HasPlayedTraining ( struct FString EventName );
};

UClass* UTutorialSave_TA::pClassPointer = NULL;

// Class TAGame.GFxShell_TA
// 0x00FC (0x01B0 - 0x00B4)
class UGFxShell_TA : public UGFxShell_X
{
public:
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BugReportDelay;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxData_System_TA*                          SystemData;                                       		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxData_LocalPlayer_TA*                     LocalPlayerData;                                  		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     BugReportEmail;                                   		// 0x00C8 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UBugReport_X*                                CurrentBugReport;                                 		// 0x00D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SaveReplayMessage;                                		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BugReportWaitMessage;                             		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultDisconnectionTitle;                        		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PsyNetReconnectMessage;                           		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PSPlusTipTitle;                                   		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PSPlusTipMessage;                                 		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedReconnectTitle;                             		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankedReconnectBody;                              		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BannedTitle;                                      		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BannedTimeRemainingMessage;                       		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PermaBannedMessage;                               		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UGFxModal_X* >                       ActiveModals;                                     		// 0x015C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bDisableStartupMovies : 1;                        		// 0x0168 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bTrial : 1;                                       		// 0x0168 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bAprilFoolsRankedIcons : 1;                       		// 0x0168 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	int                                                TrialMinutesRemaining;                            		// 0x016C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                TrialHoursRemainingUntilNextGame;                 		// 0x0170 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PendingErrorTitle;                                		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     PendingErrorMessage;                              		// 0x0180 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastPsyNetReconnectTime;                          		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     RankedReconnectAddress;                           		// 0x0190 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxModal_X*                                 ModalKick;                                        		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     BuildEdition;                                     		// 0x01A0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UAprilConfig_X*                              AprilConfig;                                      		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68611 ];

		return pClassPointer;
	};

	void __GFxShell_TA__OnStart ( class UOnlineGamePlaylists_X* Playlists );
	class UGFxModal_X* AlertError ( struct FString Error, struct FString Title );
	void UpdateAprilConfig ( );
	void PreloadLegalText ( );
	struct FString GetPrivacyPolicy ( );
	struct FString GetTermsOfService ( );
	struct FString GetEULA ( );
	void OnRankedReconnect ( class UGFxModal_X* Model );
	void ShowRankedReconnectModal ( struct FString BeaconAddress );
	void OnGotoStorePage ( class UGFxModal_X* Modal );
	void ShowUnauthorizedModal ( );
	void HandlePlaylistsChanged ( class UOnlineGamePlaylists_X* Playlists );
	void SetInputActionEnabled ( struct FName ActionName, unsigned long bEnabled );
	void VoteToForfeit ( );
	void ShowTextInput ( struct FString Title, struct FString Body, struct FScriptDelegate Callback, unsigned long bDisplayAsPassword, struct FString DefaultText, int MaxLength );
	void SyncSkills ( );
	void HandleCommerceDialogClosed ( );
	void SetViewingOnlineScene ( unsigned long bViewing );
	void HandlePsyNetLoginAttempt ( class UOnlinePlayerAuthentication_X* Auth );
	void HandlePsyNetLoginConfirm ( class UGFxModal_X* Modal );
	struct FString GetPrivilegeRestrictionMessage ( unsigned char FailedPrivilege );
	void HandlePrivilegeCheckRestriction ( class UPrivilegeCheck_X* PrivilegeCheck );
	void HandleOnlineGameConnectionError ( class UError* Error, class UOnlinePlayer_X* OnlinePlayer );
	void HandlePsyNetDisabled ( class UPsyNetConnection_X* Connection );
	void HandleBanned ( class UOnlinePlayerAuthentication_X* Auth );
	void HandlePauseChanged ( );
	void PopUISoundState ( struct FName StateName );
	void PushUISoundState ( struct FName StateName );
	void CheckoutCompleteFlashNNX ( );
	void OpenStoreOverlay ( TArray< struct FString >* ArrayInitializer_DA2170004190CE97D8ED3587ADDB4FF4 );
	void UpsellClosed ( );
	void UpsellOpened ( struct FString Context );
	void OnOpenUpsell ( struct FString Context );
	class UTrialMetrics_TA* GetTrialMetrics ( );
	void OnKickPlayerCanceled ( class UGFxModal_X* Modal );
	void OnKickPlayerAccepted ( class UGFxModal_X* Modal );
	void OnKickPlayerModalClosed ( class UGFxModal_X* Modal );
	void HandleCloseKickPlayerDialog ( );
	void HandleDrawWorldFullScreenChanged ( class UGameViewportClient_TA* GVC );
	void HandleSplitScreenTypeChanged ( class UGameViewportClient_TA* GVC );
	void ShowControllerPickerUI ( );
	void ShowControllerUI ( );
	void ShowKickPlayerModal ( int ControllerIndex );
	void ShowLoginUI ( int ControllerIndex );
	void HandleKickedResponse ( class UGFxModal_X* Modal );
	void HandleUserSaveReplay ( class UGFxModal_X* Modal );
	void ShowErrorMessage ( );
	void HandleGameInit ( class AGRI_X* GRI );
	void HandleConnectionError ( struct FString Title, struct FString Message );
	void OnCancelSaveSaveData ( class UGFxModal_X* Modal );
	void OnRetrySaveSaveData ( class UGFxModal_X* Modal );
	class UGFxModal_X* CreateSaveErrorModal ( class UError* Error );
	void HandleSaveDataSaved ( class USaveGameManager_TA* SaveManager, class USaveData_TA* SaveData, class UError* Error );
	void NotifyEnableSaveDataProcess ( class UGFxModal_X* Modal );
	void OnDisableSaveData ( class UGFxModal_X* Modal );
	void OnCreateNewSaveData ( class UGFxModal_X* Modal );
	void OnConfirmCreateNewSaveData ( class UGFxModal_X* Modal );
	void OnRetryLoadSaveData ( class UGFxModal_X* Modal );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* SaveManager, class USaveData_TA* SaveData, class UError* Error );
	void DelayedNotifyWhenSaveDataLoaded ( );
	void CancelBugReport ( );
	void SubmitBugReport ( struct FString Title, struct FString Description, struct FString Email );
	bool StartBugReport ( );
	void HandleModalClosed ( class UGFxModal_X* Modal );
	class UGFxObject* OnCreateTutorialModal ( );
	class UGFxObject* OnCreateModal ( struct FString ClassType );
	class UGFxObject* GetModalObject ( class UClass* ModalClass );
	class UGFxModal_X* CreateModal ( class UClass* ModalClass );
	void OpenFriendsList ( );
	void ViewProfile ( struct FUniqueNetId ProfileId );
	struct FString GetKeyForAction ( struct FName Action, unsigned long bGamepad );
	void ExitToOpenContainer ( int ContainerID );
	void LeaveMatch ( );
	void ExitToMainMenu ( );
	void ExitGame ( );
	void PlaySeason ( );
	void PlayNow ( );
	void OnPrintOpenScreens ( );
	void OnChampionshipTrophyScreenFinished ( );
	void ChampionshipTrophyScreenFinished ( );
	void SpawnChampionshipTrophy ( );
	void SeasonSkipPreMatch ( );
	void RestartMatch ( );
	class UProfile_TA* GetProfile ( );
	void HandleGameSessionEnded ( );
	void HandleGameInvitePassword ( struct FString Password, unsigned long bCanceled );
	void HandleGameInvitePasswordRequired ( );
	void ShowPasswordPrompt ( struct FScriptDelegate Callback );
	void HandleGameInviteConfirmed ( class UGFxModal_X* Modal );
	void HandleGameInviteConfirmation ( struct FName ConfirmationReason );
	void HandleGameInviteAccepted ( );
	void ShowSingleButtonMessage ( struct FString MessageType );
	bool IsTrialExpired ( );
	void HandleTrialStatusChanged ( class UOnlineGameTrial_X* InTrial );
	void HandlePCDestroyed ( class APlayerController_X* PC );
	void HandleReceivedController ( class UPlayer* PlayerRef );
	void eventOnStart ( );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxShell_TA::pClassPointer = NULL;

// Class TAGame.UIStrings_TA
// 0x0108 (0x0144 - 0x003C)
class UUIStrings_TA : public UUIStrings_X
{
public:
	struct FString                                     Continue;                                         		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExitGame;                                         		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Retry;                                            		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OK;                                               		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Cancel;                                           		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Yes;                                              		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     No;                                               		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SignIn;                                           		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Days;                                             		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Hours;                                            		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Minutes;                                          		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Seconds;                                          		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Meters;                                           		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Kilometers;                                       		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Feet;                                             		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Miles;                                            		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MetersUnit;                                       		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeetUnit;                                         		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MetersPerSecondUnit;                              		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeetPerSecondUnit;                                		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Error;                                            		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Warning;                                          		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68615 ];

		return pClassPointer;
	};

};

UClass* UUIStrings_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Training_Aerial_TA
// 0x0000 (0x0978 - 0x0978)
class AGameEvent_Training_Aerial_TA : public AGameEvent_Training_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68688 ];

		return pClassPointer;
	};

	void CheckForReset ( );
	struct FVector DetermineBallInitialVelocity ( struct FVector BallSpawnLoc, class ACar_TA* Car, struct FFieldSpawnInfo SpawnInfo );
};

UClass* AGameEvent_Training_Aerial_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Training_Striker_TA
// 0x0000 (0x0978 - 0x0978)
class AGameEvent_Training_Striker_TA : public AGameEvent_Training_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68689 ];

		return pClassPointer;
	};

	void CheckForReset ( );
	struct FVector DetermineBallInitialVelocity ( struct FVector BallSpawnLoc, class ACar_TA* Car, struct FFieldSpawnInfo SpawnInfo );
	int GetScore ( );
};

UClass* AGameEvent_Training_Striker_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Tutorial_Basic_TA
// 0x000C (0x0984 - 0x0978)
class AGameEvent_Tutorial_Basic_TA : public AGameEvent_Tutorial_TA
{
public:
	int                                                CurrentScore;                                     		// 0x0978 (0x0004) [0x0000000000000000]              
	int                                                TotalRounds;                                      		// 0x097C (0x0004) [0x0000000000000000]              
	int                                                CurrentRounds;                                    		// 0x0980 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68733 ];

		return pClassPointer;
	};

	bool MoveToGround ( class AActor* Mover, float HeightCheck );
	void OnVehicleSetup ( class ACar_TA* Car );
	void InitBallVelocity ( );
	void CheckForReset ( );
	void StartRound ( );
	void HideTimer ( );
	void SetManualScores ( int InTotalRounds, int InCurrentRound, int InCurrentScore );
	int GetGameEventRounds ( );
	int GetTotalRounds ( );
	int GetScore ( );
	void SkipTutorial ( );
	void RedoRound ( );
	void TutorialFinished ( );
	class ATeam_TA* PickTeam ( class AController* C );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
};

UClass* AGameEvent_Tutorial_Basic_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Tutorial_Advanced_TA
// 0x0000 (0x0984 - 0x0984)
class AGameEvent_Tutorial_Advanced_TA : public AGameEvent_Tutorial_Basic_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68732 ];

		return pClassPointer;
	};

};

UClass* AGameEvent_Tutorial_Advanced_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Tutorial_FreePlay_TA
// 0x0020 (0x0998 - 0x0978)
class AGameEvent_Tutorial_FreePlay_TA : public AGameEvent_Tutorial_TA
{
public:
	float                                              MaxSpawnRadius;                                   		// 0x0978 (0x0004) [0x0000000000000000]              
	int                                                MaxTryCount;                                      		// 0x097C (0x0004) [0x0000000000000000]              
	float                                              HeightSpawnCheck;                                 		// 0x0980 (0x0004) [0x0000000000000000]              
	struct FVector                                     AvgExtents;                                       		// 0x0984 (0x000C) [0x0000000000000000]              
	float                                              ResetDelay;                                       		// 0x0990 (0x0004) [0x0000000000000000]              
	float                                              LastResetTime;                                    		// 0x0994 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68798 ];

		return pClassPointer;
	};

	void DestroyGoalIndicators ( class APlayerController_TA* Player );
	void CreateGoalIndicators ( class APlayerController_TA* Player );
	void InitGameSetup ( class ACar_TA* Car );
	struct FVector GetCarSpawnLocation ( struct FFieldSpawnInfo SpawnInfo );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
	void OnVehicleSetup ( class ACar_TA* Car );
	void InitBallEffects ( );
	void RedoRound ( );
	void ResetRound ( );
	void OnBallSpawned ( class ABall_TA* NewBall );
	struct FVector GetSpawnLocation ( struct FFieldSpawnInfo SpawnInfo );
	struct FFieldSpawnInfo GetRandomBallSpawnInfo ( );
};

UClass* AGameEvent_Tutorial_FreePlay_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_BotPerfTest_TA
// 0x0008 (0x0440 - 0x0438)
class AGameInfo_BotPerfTest_TA : public AGameInfo_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarArchetype;                                  		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TeamSize;                                         		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68866 ];

		return pClassPointer;
	};

	void HandleMainEventDestroyed ( class AGameEvent_TA* GameEvent );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage );
	void eventPostBeginPlay ( );
};

UClass* AGameInfo_BotPerfTest_TA::pClassPointer = NULL;

// Class TAGame.MusicTheme_TA
// 0x000C (0x0048 - 0x003C)
class UMusicTheme_TA : public UObject
{
public:
	TArray< struct FGameVersionMusicTheme >            Versions;                                         		// 0x003C (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68867 ];

		return pClassPointer;
	};

};

UClass* UMusicTheme_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Cinematic_TA
// 0x0004 (0x0424 - 0x0420)
class AGameInfo_Cinematic_TA : public AGameInfoBase_TA
{
public:
	class AAssetProfiler_TA*                           Profiler;                                         		// 0x0420 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68961 ];

		return pClassPointer;
	};

	void SetStadiumColors ( );
	void StopProfile ( );
	void ProfileAssets ( );
	void GenericPlayerInitialization ( class AController* C );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void InitGame ( struct FString Options, struct FString* ErrorMessage );
};

UClass* AGameInfo_Cinematic_TA::pClassPointer = NULL;

// Class TAGame.PlayerController_Cinematic_TA
// 0x0004 (0x0640 - 0x063C)
class APlayerController_Cinematic_TA : public APlayerController_X
{
public:
	class UPostProcessManager_X*                       PostProcessManagerArchetype;                      		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68977 ];

		return pClassPointer;
	};

	void eventReceivedPlayer ( );
};

UClass* APlayerController_Cinematic_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MenuSequence_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_MenuSequence_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FMenuSequencePair >                 MenuStack;                                        		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68998 ];

		return pClassPointer;
	};

	void OnSequenceChange ( struct FName NewSequence );
	void HandleSequenceChanged ( class UMenuSequence_TA* NewSequence );
	void SetMenuSequence ( struct FName MenuSequence );
	void PopMenuSequence ( struct FName MenuID );
	void PushMenuSequence ( struct FName MenuSequence, struct FName MenuID );
	void eventOnShellSet ( );
};

UClass* UGFxData_MenuSequence_TA::pClassPointer = NULL;

// Class TAGame.GFxData_System_TA
// 0x0038 (0x008C - 0x0054)
class UGFxData_System_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     Language;                                         		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     UIState;                                          		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SharedUIState;                                    		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                LocalPlayerCount;                                 		// 0x0078 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bSaveDataLoaded : 1;                              		// 0x007C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bLoggedInPsyNet : 1;                              		// 0x007C (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bLoggedInPlatform : 1;                            		// 0x007C (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned char                                      SplitScreenType;                                  		// 0x0080 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      AvailableGamepadType;                             		// 0x0081 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              SafeZoneRatio;                                    		// 0x0084 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              UIScale;                                          		// 0x0088 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69011 ];

		return pClassPointer;
	};

	void HandleSafeZoneRatioUpdated ( class UGameViewportClient_TA* GVC );
	void HandleUIScaleModifierUpdated ( class UGameViewportClient_TA* GVC );
	void HandleAvailableGamepadTypeChanged ( class UGFxEngine_X* Engine );
	void HandleLocalPlayerChanged ( class ULocalPlayer* NewPlayer );
	void HandleSplitScreenTypeChanged ( class UGameViewportClient_TA* GVC );
	void SetSharedUIState ( struct FString NewSharedUIState );
	void HandleProfileSet ( class ULocalPlayer_TA* InPlayer );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error );
	void HandleLocalPlayerLoginStatusChanged ( class UOnlinePlayer_X* InPlayer );
	void HandleSessionAlreadyActiveOkClick ( class UGFxModal_X* Modal );
	void HandlePsyWebLoginChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void eventOnShellSet ( );
};

UClass* UGFxData_System_TA::pClassPointer = NULL;

// Class TAGame.__GameInfo_GFxMenu_TA__InitPreviews
// 0x0004 (0x0040 - 0x003C)
class U__GameInfo_GFxMenu_TA__InitPreviews : public UObject
{
public:
	class UCountTrigger_X*                             GCTrigger;                                        		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69028 ];

		return pClassPointer;
	};

	void LambdaCallback ( class ACarPreviewActor_TA* _ );
};

UClass* U__GameInfo_GFxMenu_TA__InitPreviews::pClassPointer = NULL;

// Class TAGame.PremiumGaragePreviewSet_TA
// 0x0050 (0x008C - 0x003C)
class UPremiumGaragePreviewSet_TA : public UObject
{
public:
	int                                                PreviewActorIndices[ 0x2 ];                       		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInPremiumGarage : 1;                             		// 0x0044 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFirstSet : 1;                                    		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class ACarPreviewActor_TA* >               CarPreviewActors;                                 		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineGameParty_TA*                         OnlineParty;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACarPreviewActor_TA*                         CurrentCar;                                       		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                CurrentCarIdx;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	int                                                PreviewSlotIdx;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	class UDLCPack_TA*                                 QueuedSwapPack;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                QueuedSwapSubIdx;                                 		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventSwapFinished__Delegate;                    		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0070 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRevealComplete__Delegate;                  		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0080 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69029 ];

		return pClassPointer;
	};

	void SetPreviewBaseLoadout ( );
	void FinishReveal ( );
	void OnRevealFinished ( int SlotIdx );
	void DoReveal ( class UOnlineProduct_TA* OnlineProduct );
	void InitReveal ( );
	void ResetInvalidAssets ( class ACarPreviewActor_TA* PreviewActor, int SlotIndex, int ProductID );
	void SetCarRotations ( float DeltaTime, int Rotation, unsigned long bGamepad );
	void ExitPremiumGarage ( );
	void EnterPremiumGarage ( );
	class ATurnTableActor_TA* GetTurntable ( );
	struct FLoadoutData GetCurrentLoadout ( );
	void SetPreviewSlot ( class UProductSlot_TA* Slot );
	void SetPreviewSlotIndex ( int SlotIndex );
	void SetPreviewProduct ( int SlotIdx, int ProductID, int TeamIdx, unsigned long bUsePrimaryBaseLoadout );
	void SetOldLoadout ( struct FLoadoutData Loadout );
	void HandleCarSwapComplete ( );
	void UpdateWheel ( struct FAssetLoadResult Result );
	void SwapPremiumCarTo ( class UDLCPack_TA* DLCPack, int SubIdx );
	void HandleCarPreviewActorAdded ( class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewActor );
	void Cleanup ( );
	void Init ( );
	void EventRevealComplete ( int SlotIdx );
	void EventSwapFinished ( );
};

UClass* UPremiumGaragePreviewSet_TA::pClassPointer = NULL;

// Class TAGame.ExplosionPreviewer_TA
// 0x0014 (0x005C - 0x0048)
class UExplosionPreviewer_TA : public UComponent
{
public:
	class UProductLoader_TA*                           ProductLoader;                                    		// 0x0048 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                ExplosionId;                                      		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProductAsset_GoalExplosion_TA*              ExplosionProduct;                                 		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPreviewing : 1;                                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	class APlayerController*                           PC;                                               		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69031 ];

		return pClassPointer;
	};

	void ClearPreview ( );
	void StopExplosion ( TArray< int >* ArrayInitializer_BB339377421B8C8C1AA63892F5756C90 );
	void PlayExplosion ( TArray< int >* ArrayInitializer_C30BD33B4BAEC6A136D211BB6FB45A3C );
	void HandleProductLoaded ( class UProductLoader_TA* InLoader );
	void SetProduct ( int ProductID, TArray< int >* ArrayInitializer_C6FFE245425EF462ACAE3986FD1F53DE );
	void SetLoadout ( struct FLoadoutData* InLoadout );
	void UpdateExplosion ( );
	void SetPreviewSlot ( class UProductSlot_TA* InSlot );
	void SetPreviewSlotIndex ( int InSlotIndex );
};

UClass* UExplosionPreviewer_TA::pClassPointer = NULL;

// Class TAGame.MenuSequencer_TA
// 0x003C (0x00A8 - 0x006C)
class UMenuSequencer_TA : public UActorComponent_X
{
public:
	TArray< class UMenuSequence_TA* >                  Sequences;                                        		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       DefaultSequence;                                  		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMenuSequence_TA*                            CurrentSequence;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	class UMenuSequence_TA*                            PendingSequence;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned char                                      Status;                                           		// 0x0088 (0x0001) [0x0000000000000000]              
	TArray< class UMenuSequence_TA* >                  PendingSequenceQueue;                             		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventSequenceChanged__Delegate;                 		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x009C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69036 ];

		return pClassPointer;
	};

	class APlayerController* GetLocalPlayerController ( );
	void eventTick ( float DeltaTime );
	void HandleSequenceEntered ( class UMenuSequence_TA* Sequence );
	void InternalSequenceEnter ( class UMenuSequence_TA* NewSequence, class UMenuSequence_TA* PrevSequence );
	void InternalSequenceLeave ( class UMenuSequence_TA* NewSequence, class UMenuSequence_TA* PrevSequence );
	void HandleSequenceLeft ( class UMenuSequence_TA* FromSequence );
	void TryEnterNextSequence ( );
	void SetSequence ( struct FName SequenceName );
	class UMenuSequence_TA* GetSequence ( struct FName SequenceName );
	class UMenuSequence_TA* InstanceSequence ( class UMenuSequence_TA* Archetype );
	void InstanceSequences ( );
	void eventAttached ( );
	void EventSequenceChanged ( class UMenuSequence_TA* NewSequence );
};

UClass* UMenuSequencer_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_PerfTest_TA
// 0x0000 (0x0420 - 0x0420)
class AGameInfo_PerfTest_TA : public AGameInfoBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69039 ];

		return pClassPointer;
	};

	int SortCameraActors ( class ACameraActor* A, class ACameraActor* B );
	void SelectCamera ( int Direction );
	void PrevCamera ( );
	void NextCamera ( );
	void GenericPlayerInitialization ( class AController* C );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
};

UClass* AGameInfo_PerfTest_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_ReplayTime_TA
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_ReplayTime_TA : public USequenceEvent
{
public:
	float                                              TimeSeconds;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69108 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_ReplayTime_TA::pClassPointer = NULL;

// Class TAGame.DynamicPlayerStart_TA
// 0x0000 (0x02E4 - 0x02E4)
class ADynamicPlayerStart_TA : public APlayerStart_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69116 ];

		return pClassPointer;
	};

};

UClass* ADynamicPlayerStart_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Season_TA
// 0x0004 (0x043C - 0x0438)
class AGameInfo_Season_TA : public AGameInfo_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarArchetype;                                  		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69121 ];

		return pClassPointer;
	};

	void RestartLevel ( );
	void RestartPlayer ( class AController* aPlayer );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	void eventPostLogin ( class APlayerController* NewPlayer );
};

UClass* AGameInfo_Season_TA::pClassPointer = NULL;

// Class TAGame.MapSelector_TA
// 0x0048 (0x0090 - 0x0048)
class UMapSelector_TA : public UComponent
{
public:
	unsigned long                                      bDebug : 1;                                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UMapData_TA* >                       AllMaps;                                          		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMapGroup >                         AllGroups;                                        		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMapGroup >                         RemainingGroupMaps;                               		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      RemainingGroups;                                  		// 0x0070 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      PreviousGroups;                                   		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PreviousGroupMax;                                 		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMapData_TA*                                 LastPlayedMap;                                    		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69170 ];

		return pClassPointer;
	};

	struct FMapGroup __MapSelector_TA__GetNextMap ( int GroupIdx );
	struct FName GetNextPreferredMapName ( int NumPlayers, TArray< struct FName >* Likes, TArray< struct FName >* Dislikes );
	class UMapData_TA* GetNextPreferredMap ( int NumPlayers, TArray< struct FName >* Likes, TArray< struct FName >* Dislikes );
	struct FMapGroup GetChosenGroup ( TArray< float > GroupWeights );
	TArray< float > GetMapGroupWeights ( int NumPlayers, TArray< struct FName >* Likes, TArray< struct FName >* Dislikes );
	float GetMapGroupWeight ( struct FMapGroup Group, int NumPlayers, TArray< struct FName >* Likes, TArray< struct FName >* Dislikes );
	struct FName GetNextMapName ( );
	struct FString GetMapsString ( TArray< class UMapData_TA* > Maps );
	void SetMapPlayed ( class UMapData_TA* Map );
	class UMapData_TA* GetNextMap ( TArray< struct FMapGroup >* MapLocal_49B586574552AEB72DFB2FB2BA0E5AFC );
	void RebuildRemainingGroups ( );
	void SetMaps ( TArray< class UMapData_TA* > Maps );
};

UClass* UMapSelector_TA::pClassPointer = NULL;

// Class TAGame.GRI_TA
// 0x0010 (0x059C - 0x058C)
class AGRI_TA : public AGRI_X
{
public:
	unsigned long                                      bHasTalkers : 1;                                  		// 0x058C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     NewDedicatedServerIP;                             		// 0x0590 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69176 ];

		return pClassPointer;
	};

	void SetNewDedicatedServerIP ( struct FString IP );
	void SetVoiceChatActive ( unsigned long bActive );
	void HandleTalkingStatusChange ( class UOnlineGameVoice_X* OnlineGameVoice, class APlayerReplicationInfo* PRI, unsigned long bTalking );
	struct FString GetTimeString ( int Seconds, unsigned long bCountDown, unsigned long bShowMinutes, float MS, unsigned long bShowMS );
	void eventDestroyed ( );
	void SetDefaultScriptedColors ( );
	void eventPostBeginPlay ( );
};

UClass* AGRI_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Tutorial_TA
// 0x0004 (0x0448 - 0x0444)
class AGameInfo_Tutorial_TA : public AGameInfo_Soccar_TA
{
public:
	unsigned long                                      bAutoEntered : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69203 ];

		return pClassPointer;
	};

	void TutorialHelper ( );
	void SkipTutorial ( );
	void ResetTraining ( );
	void InitTutorialGameEvent ( class AGameEvent_TA* GameEventArchetype, int InDifficulty );
	void StartTutorialType ( struct FString Type, struct FString Difficulty );
	void SetTutorialDifficulty ( int Difficulty );
	void eventPostBeginPlay ( );
};

UClass* AGameInfo_Tutorial_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_TutorialHelper_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_TutorialHelper_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69224 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_TutorialHelper_TA::pClassPointer = NULL;

// Class TAGame.GameSettingPlaylist_TA
// 0x0004 (0x0084 - 0x0080)
class UGameSettingPlaylist_TA : public UGameSettingPlaylist_X
{
public:
	class UMapSet_TA*                                  MapSet;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69226 ];

		return pClassPointer;
	};

	void Setup ( class UPlaylistSettings_X* Settings );
};

UClass* UGameSettingPlaylist_TA::pClassPointer = NULL;

// Class TAGame.PlaylistSettings_TA
// 0x0004 (0x0084 - 0x0080)
class UPlaylistSettings_TA : public UPlaylistSettings_X
{
public:
	class UMapSet_TA*                                  MapSet;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69231 ];

		return pClassPointer;
	};

};

UClass* UPlaylistSettings_TA::pClassPointer = NULL;

// Class TAGame.__GameShare_TA__NotifyCarPreviewActorAdded
// 0x0010 (0x004C - 0x003C)
class U__GameShare_TA__NotifyCarPreviewActorAdded : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                         		// 0x003C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69268 ];

		return pClassPointer;
	};

	void LambdaCallback ( class ACarPreviewActor_TA* C );
};

UClass* U__GameShare_TA__NotifyCarPreviewActorAdded::pClassPointer = NULL;

// Class TAGame.GFxData_Chat_TA
// 0x0050 (0x00A4 - 0x0054)
class UGFxData_Chat_TA : public UGFxDataSingleton_X
{
public:
	int                                                MaxMessages;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FChatPresetMessageGroup >           PresetGroups;                                     		// 0x0058 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FChatPresetMessage >                PresetMessages;                                   		// 0x0064 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxChatMessage >                   Messages;                                         		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FPendingFilterMessage >             PendingFilterMessages;                            		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     BlockedMessageString;                             		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChatFilteredString;                               		// 0x0094 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bGameEnded : 1;                                   		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69458 ];

		return pClassPointer;
	};

	void OnOpenPartyChat ( );
	void OnOpenTeamChat ( );
	void OnOpenChat ( );
	void RepopulatedChat ( );
	void ClearChat ( );
	void OnChatMessage ( int Team, struct FString PlayerName, struct FString Message, unsigned char ChatChannel, unsigned long bLocalPlayer, struct FUniqueNetId SenderId );
	void AddChatMessage ( int Team, struct FString PlayerName, struct FString Message, unsigned char ChatChannel, unsigned long bLocalPlayer, struct FUniqueNetId SenderId, unsigned long bTransient, unsigned long bPreset );
	void DispatchChatMessage ( struct FString Message, unsigned char ChatChannel, struct FUniqueNetId Recipient );
	void HandleMessageSanitizeError ( struct FString OriginalPhrase, class UError* Error, struct FUniqueNetId* StructInitializer_A5B404CB479733E25AD8E4BDBA880B4A );
	void HandleMessageSanitized ( struct FString Original, struct FString Sanitized );
	void HandleIndividualChat ( struct FString InMessage, struct FUniqueNetId SenderId );
	void SendPartyChatMessage ( struct FString Message, unsigned long bCanceled );
	void SendTeamChatMessage ( struct FString Message, unsigned long bCanceled );
	void SendGlobalChatMessage ( struct FString Message, unsigned long bCanceled );
	void SendChatChannelMessage ( struct FString Message, unsigned char ChatChannel, struct FUniqueNetId Recipient );
	void SendChatMessage ( struct FString Message, unsigned long bTeamMessage );
	unsigned char GetChatFilter ( );
	void OnPressChatPreset ( int Index );
	void SendChatPresetMessage ( struct FName MessageId, unsigned long bTeam );
	void InitChatMessages ( );
	class APlayerController_TA* GetPlayerController ( );
	class AGameEvent_Soccar_TA* GetGameEvent ( );
	void HandleGameEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleBindingsChanged ( class UProfile_TA* Profile );
	void eventOnRemoved ( );
	void HandleGameEventChanged ( class APRI_TA* PRI );
	void HandlePRIReceived ( class APlayerController_X* PC );
	void OnShellSet ( );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxData_Chat_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Community_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_Community_TA : public UGFxDataSingleton_X
{
public:
	TArray< class UGFxData_BlogTile_TA* >              GFxBlogTiles;                                     		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineGameBlog_X*                           OnlineGameBlog;                                   		// 0x0060 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              UpdateBlogTimeout;                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     MotD;                                             		// 0x0068 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                NumOfCarouselTiles;                               		// 0x0074 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69588 ];

		return pClassPointer;
	};

	struct FString __GFxData_Community_TA__HandleTextSynced ( class UGFxData_BlogTile_TA* GFxBlogTile );
	void ShowHelp ( );
	int TileEpochCompare ( class UBlogTile_X* Left, class UBlogTile_X* Right );
	TArray< class UBlogTile_X* > GetActiveTiles ( int NumOfActiveTiles, TArray< class UBlogTile_X* >* BlogTiles, TArray< class UBlogTile_X* >* FilterLocal_A2EFD73B4D7C0C68B04734B3ED652213, TArray< class UBlogTile_X* >* SortLocal_156CC6914B6DC61B90BAF8B1E1E7AB4F, TArray< class UBlogTile_X* >* FilterLocal_8E6F5F5B4D18D8E3A5544EA84C00C7D1 );
	class UBlogTile_X* GetActiveTile ( TArray< class UBlogTile_X* >* BlogTiles );
	void AddActiveTiles ( unsigned char TileType, int NumOfActiveTiles, TArray< class UBlogTile_X* >* BlogTiles );
	void AddActiveTile ( unsigned char TileType, TArray< class UBlogTile_X* >* BlogTiles );
	void AddBlogTile ( class UBlogTile_X* BlogTile, unsigned char TileType );
	void HandleTextSynced ( class UOnlineStaticTextSync_X* TextSync, TArray< struct FString >* MapLocal_B1366C164F0F5383521995872CEB9624 );
	void ClearBlogTileNewInfo ( int Row );
	void UpdateBlog ( );
	void HandleInternetConnectionChanged ( unsigned long bConnected );
	void eventOnShellSet ( );
};

UClass* UGFxData_Community_TA::pClassPointer = NULL;

// Class TAGame.GFxData_BlogTile_TA
// 0x0014 (0x0068 - 0x0054)
class UGFxData_BlogTile_TA : public UGFxDataRow_X
{
public:
	class UTexture*                                    ImageTexture;                                     		// 0x0054 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	int                                                TextureSizeX;                                     		// 0x0058 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	int                                                TextureSizeY;                                     		// 0x005C (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned char                                      TileType;                                         		// 0x0060 (0x0001) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bNewInfo : 1;                                     		// 0x0064 (0x0004) [0x0000000040002000] [0x00000001] ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bLive : 1;                                        		// 0x0064 (0x0004) [0x0000000040002000] [0x00000002] ( CPF_Transient | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69603 ];

		return pClassPointer;
	};

	void SetLive ( );
	void HandleDownloadedImage ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	void DownloadImage ( struct FString* ImageURL );
	void SetTileType ( unsigned char InTileType );
	void SetbNewInfo ( unsigned long bInNewInfo );
	void SetBlogTile ( class UBlogTile_X* InBlogTile );
};

UClass* UGFxData_BlogTile_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_Community_TA__GetActiveTiles
// 0x0008 (0x0044 - 0x003C)
class U__GFxData_Community_TA__GetActiveTiles : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x003C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__GFxData_Community_TA__GetActiveTiles.EpochNow

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69611 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UBlogTile_X* BlogTile );
};

UClass* U__GFxData_Community_TA__GetActiveTiles::pClassPointer = NULL;

// Class TAGame.__GFxData_Community_TA__AddActiveTiles
// 0x0001 (0x003D - 0x003C)
class U__GFxData_Community_TA__AddActiveTiles : public UObject
{
public:
	unsigned char                                      TileType;                                         		// 0x003C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69635 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UBlogTile_X* CarouselTile );
};

UClass* U__GFxData_Community_TA__AddActiveTiles::pClassPointer = NULL;

// Class TAGame.BlogTileCache_TA
// 0x0018 (0x0054 - 0x003C)
class UBlogTileCache_TA : public UObject
{
public:
	TArray< struct FString >                           UnreadTileIDs;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PreviouslyDisplayedTileIDs;                       		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69663 ];

		return pClassPointer;
	};

	bool __BlogTileCache_TA__UpdateTileIDs ( struct FString ActiveTileID );
	bool IsUnreadTileID ( struct FString TileID );
	bool UpdateTileIDs ( TArray< struct FString >* ActiveTileIDs, TArray< struct FString >* FilterLocal_19F5534749F8FEEC1F7871B9543A2D3D );
};

UClass* UBlogTileCache_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Controls_TA
// 0x0054 (0x00A8 - 0x0054)
class UGFxData_Controls_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FLocalizedBindingCategory >         Categories;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FLocalizedAction >                  Actions;                                          		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FUIPlayerBinding >                  PCBindings;                                       		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FUIPlayerBinding >                  GamepadBindings;                                  		// 0x0078 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProfile_TA*                                 Profile;                                          		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FBindingAction >                    BindingActions;                                   		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       PendingRecordBindingAction;                       		// 0x0094 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PendingRecordBindingAxis;                         		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UInteraction*                                Interaction;                                      		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69681 ];

		return pClassPointer;
	};

	void HandleActiveBindingsChanged ( class UProfile_TA* InProfile );
	bool IsRemappableType ( struct FName Action, unsigned char RemappableType, TArray< struct FPlayerBinding >* Bindings );
	bool IsRemappable ( struct FName Action, TArray< struct FPlayerBinding > Bindings );
	void Save ( );
	void ReseToDefaults ( );
	void OnBindingSet ( );
	void OnRecordBindingCanceled ( );
	TArray< struct FUIPlayerBinding > InitUIBindingsForArray ( struct FName PresetName, TArray< struct FPlayerBinding >* Bindings );
	void InitUIBindings ( struct FName PresetName );
	void InvertAxisForBinding ( struct FName Action, TArray< struct FPlayerBinding >* OutBindings );
	void InvertAxis ( struct FName Axis );
	void RemoveBinding ( struct FName Action, struct FName Key, unsigned char AxisSign, TArray< struct FPlayerBinding >* OutBindings );
	void SetSingleBinding ( struct FName Action, struct FName Key, unsigned char AxisSign, TArray< struct FPlayerBinding > DefaultBindings, TArray< struct FPlayerBinding >* OutBindings );
	void SetBinding ( struct FName Action, struct FName Key, unsigned char AxisSign, TArray< struct FPlayerBinding > DefaultBindings, TArray< struct FPlayerBinding >* OutBindings );
	void SetCurrentBinding ( struct FName Key, unsigned long bGamepad, unsigned char AxisSign );
	bool HandleBindingInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool HandleBindingInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void ClearBindingFromArray ( struct FName Action, TArray< struct FPlayerBinding >* OutBindings );
	void ClearBinding ( struct FName Action );
	void CancelRecordBinding ( );
	void StartRecordBinding ( struct FName Action );
	struct FString LocalizeKeyInternal ( struct FName Key );
	struct FString LocalizeKey ( struct FName Key, unsigned char AxisSign );
	struct FLocalizedAction GetLocalizedAction ( struct FName ActionName );
	void HandleProfileSet ( class ULocalPlayer_TA* InLocalPlayer );
	void eventOnShellSet ( );
};

UClass* UGFxData_Controls_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Credits_TA
// 0x0048 (0x009C - 0x0054)
class UGFxData_Credits_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FLocalizedDepartmentData >          LocalizedDepartmentGroups;                        		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLocalizedPostCreditData >          LocalizedCopyrightGroups;                         		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLocalizedPostCreditData >          LocalizedMusicGroups;                             		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDepartmentData >                   DepartmentGroups;                                 		// 0x0078 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FPostCreditData >                   CopyrightGroups;                                  		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FPostCreditData >                   MusicGroups;                                      		// 0x0090 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69831 ];

		return pClassPointer;
	};

	void AddToPostCreditData ( struct FLocalizedPostCreditData LocalizedPostCredit, TArray< struct FPostCreditData >* Out_PostCredits );
	void AddToDepartmentData ( struct FString LocalizedDepartmentTitle, struct FLocalizedNameData LocalizedNameInfo );
	void UnloadCredits ( );
	void MarkCreditsViewed ( );
	void LoadCredits ( );
};

UClass* UGFxData_Credits_TA::pClassPointer = NULL;

// Class TAGame.GFxData_GameEvent_TA
// 0x0084 (0x00D8 - 0x0054)
class UGFxData_GameEvent_TA : public UGFxDataSingleton_X
{
public:
	int                                                TimeRemaining;                                    		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                TimeToNextMatch;                                  		// 0x0058 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bOverTime : 1;                                    		// 0x005C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bOnline : 1;                                      		// 0x005C (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bUnfairTeams : 1;                                 		// 0x005C (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bForfeit : 1;                                     		// 0x005C (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bNoContest : 1;                                   		// 0x005C (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bServerTraveling : 1;                             		// 0x005C (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bRankedMatch : 1;                                 		// 0x005C (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bSolo : 1;                                        		// 0x005C (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bHasLeaveMatchPenalty : 1;                        		// 0x005C (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bCanVoteToForfeit : 1;                            		// 0x005C (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bViewingEndGameReplay : 1;                        		// 0x005C (0x0004) [0x0000000040000000] [0x00000400] ( CPF_EditInlineNotify )
	struct FString                                     MatchState;                                       		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FName                                       GameState;                                        		// 0x006C (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       MatchType;                                        		// 0x0074 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       EventType;                                        		// 0x007C (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ReplayScoredBy;                                   		// 0x0084 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ReplayAssistedBy;                                 		// 0x0088 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              ReplaySpeed;                                      		// 0x008C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              ReplayTime;                                       		// 0x0090 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                WinningTeam;                                      		// 0x0094 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                MaxPlayers;                                       		// 0x0098 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PlaylistName;                                     		// 0x009C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FName                                       PlaylistId;                                       		// 0x00A8 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ServerName;                                       		// 0x00B0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PartyPlaylistName;                                		// 0x00BC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     MutatorsString;                                   		// 0x00C8 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                SeriesGames;                                      		// 0x00D4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69888 ];

		return pClassPointer;
	};

	void SetIsViewingEndgameReplay ( unsigned long Value );
	void OnSkipScoreIntro ( );
	void OnCloseScoreboard ( );
	void OnOpenScoreboard ( );
	void OnCloseMidgameMenu ( );
	void OnOpenMidgameMenu ( );
	void OnTickerEvent ( struct FString EventName, class UTexture* Texture, int ReceiverIndex, int VictimIndex );
	void OnGameMessage ( struct FName Type, struct FString Message );
	void OnStatEvent ( struct FString EventName, int Points, class UTexture* Texture, struct FName Sound );
	void ForceStartPlay ( );
	void SetReadyToPlay ( unsigned long bReady, unsigned long bReadyAllLocalPlayers );
};

UClass* UGFxData_GameEvent_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Garage_TA
// 0x0184 (0x01D8 - 0x0054)
class UGFxData_Garage_TA : public UGFxDataSingleton_X
{
public:
	TArray< class UProductSlot_TA* >                   LoadoutSlots;                                     		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ACarPreviewActor_TA*                         PreviewActor;                                     		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UGFxData_GarageProductSlot_TA* >     GarageProductSlots;                               		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGarageTeam >                       Teams;                                            		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                PaintFinishSlotIndex;                             		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                PreviewTeam;                                      		// 0x0080 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     CustomColors;                                     		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     Team0Colors;                                      		// 0x0090 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     Team1Colors;                                      		// 0x009C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bTeam0FinishDisabled : 1;                         		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bTeam1FinishDisabled : 1;                         		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bCustom0FinishDisabled : 1;                       		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bCustom1FinishDisabled : 1;                       		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bTeam0ColorForced : 1;                            		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bTeam1ColorForced : 1;                            		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bCustom0ColorForced : 1;                          		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bCustom1ColorForced : 1;                          		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bTrial : 1;                                       		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	struct FString                                     ForcedTeam0FinishName;                            		// 0x00AC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ForcedTeam1FinishName;                            		// 0x00B8 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                ForcedTeam0Color;                                 		// 0x00C4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ForcedTeam1Color;                                 		// 0x00C8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ForcedCustom0Color;                               		// 0x00CC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ForcedCustom1Color;                               		// 0x00D0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       PlayerTitle;                                      		// 0x00D4 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FPlayerTitleData >                  PlayerTitles;                                     		// 0x00DC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProfile_TA*                                 Profile;                                          		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLoadoutData                                Loadouts[ 0x2 ];                                  		// 0x00EC (0x0068) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FLoadoutData                                LastNonLicensedLoadout[ 0x2 ];                    		// 0x0154 (0x0068) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ULoadoutSet_TA*                              LoadoutSet;                                       		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x01C0 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Garage_TA.PreviewOnlineID
	int                                                PreviewProductSlot;                               		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCarPreviewSet_TA*                           CarPreviewSet;                                    		// 0x01D0 (0x0004) [0x0000000000000000]              
	class UExplosionPreviewer_TA*                      ExplosionPreview;                                 		// 0x01D4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69945 ];

		return pClassPointer;
	};

	void __GFxData_Garage_TA__InitProductSlots ( class UGFxData_GarageProductSlot_TA* S );
	bool __GFxData_Garage_TA__UpdateProductSlotNewItems ( class UProduct_TA* Product );
	void SetPreviewLoadout ( struct FLoadoutData* InLoadout );
	bool HasNewProducts ( );
	void SetPlayerTitle ( struct FName Title );
	void UpdateColorSettings ( );
	struct FString GetForcedFinishLabel ( unsigned long bFinishDisabled, class UProductAsset_Body_TA* BodyAsset, class UProductAsset_Skin_TA* SkinAsset, int TeamID );
	void OnProductsChanged ( );
	void HandleDLCChange ( class USaveData_TA* SaveData );
	void RemoveNewProduct ( );
	void HandleLoadoutChanged ( class ULoadoutSet_TA* InLoadoutSet, class ULoadout_TA* InLoadout );
	void CommitLoadout ( );
	void SetPreviewTeam ( int Team );
	void SetCustomFinish ( int Team );
	bool IsCustomFinishDisabled ( int Team );
	void SetPreviewCustomFinish ( );
	void SetTeamFinish ( int Team );
	bool IsTeamFinishDisabled ( int Team );
	void SetPreviewTeamFinish ( int Team );
	void SetCustomColor ( int Team, int ColorID );
	bool IsCustomColorDisabled ( int Team );
	void SetPreviewCustomColor ( int ColorID );
	void SetTeamColor ( int Team, int ColorID );
	bool IsTeamColorDisabled ( int Team );
	void SetPreviewTeamColor ( int Team, int ColorID );
	void ClearPreviewPaint ( int Team );
	bool ProductSlotIsEnabled ( class UGFxData_ProductSlot_TA* ProductSlot );
	void RefreshEnabledProductSlots ( );
	void EquipProduct ( int SlotIndex, unsigned char EquipAction );
	class UProduct_TA* GetProduct ( );
	void HandleLicensedLoadouts ( );
	void ClearPreviewLoadout ( int PendingPreviewProductID );
	void ClearPreviewProduct ( );
	void SetPreviewProduct ( int SlotIndex );
	void SetSlot ( int SlotIndex );
	void InitColors ( );
	void UpdateProductSlotNewItems ( TArray< class UProduct_TA* >* FilterLocal_BFCBAE844CC953D4A8826EB963C104A0 );
	void InitProductSlots ( );
	void InitTeams ( );
	void InitLoadouts ( class ULoadoutSet_TA* NewLoadoutSet, int TeamIndex );
	void LoadUserLoadout ( );
	void HandlePreviewActorsChanged ( class UCarPreviewSet_TA* G );
	void LoadTitles ( );
	void HandleTrialStatusChanged ( class UOnlineGameTrial_X* InTrial );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Garage_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductSlot_TA
// 0x0038 (0x008C - 0x0054)
class UGFxData_ProductSlot_TA : public UGFxDataRow_X
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0054 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bCanUnequip : 1;                                  		// 0x0054 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bHasNewItems : 1;                                 		// 0x0054 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	struct FName                                       SlotName;                                         		// 0x0058 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     Label;                                            		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    Icon;                                             		// 0x006C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SlotIndex;                                        		// 0x0070 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0074 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductSlot_TA.EquippedProduct0
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x007C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductSlot_TA.EquippedProduct1
	int                                                EquippedPack;                                     		// 0x0084 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                DefaultProductID;                                 		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70007 ];

		return pClassPointer;
	};

	void SetupProductSlot ( class UProductSlot_TA* Slot );
};

UClass* UGFxData_ProductSlot_TA::pClassPointer = NULL;

// Class TAGame.GFxData_GarageProductSlot_TA
// 0x0000 (0x008C - 0x008C)
class UGFxData_GarageProductSlot_TA : public UGFxData_ProductSlot_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70006 ];

		return pClassPointer;
	};

	void SetupGarageProductSlot ( class UProductSlot_TA* Slot, class ULoadoutSet_TA* LoadoutSet, int PreviewTeam );
};

UClass* UGFxData_GarageProductSlot_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_Garage_TA__UpdateProductSlotNewItems
// 0x0004 (0x0040 - 0x003C)
class U__GFxData_Garage_TA__UpdateProductSlotNewItems : public UObject
{
public:
	int                                                UISlotIdx;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70013 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UProduct_TA* Product );
};

UClass* U__GFxData_Garage_TA__UpdateProductSlotNewItems::pClassPointer = NULL;

// Class TAGame.__GFxData_Garage_TA__EquipProduct
// 0x0004 (0x0040 - 0x003C)
class U__GFxData_Garage_TA__EquipProduct : public UObject
{
public:
	int                                                SlotIndex;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70045 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UGFxData_GarageProductSlot_TA* S );
};

UClass* U__GFxData_Garage_TA__EquipProduct::pClassPointer = NULL;

// Class TAGame.GFxData_Products_TA
// 0x00D0 (0x0124 - 0x0054)
class UGFxData_Products_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FLoadingProduct >                   LoadingProducts;                                  		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ProductLabel;                                     		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ProductLongLabel;                                 		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    ProductIcon;                                      		// 0x0078 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ProductDescription;                               		// 0x007C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ProductStatLabel;                                 		// 0x0088 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ProductStatDescription;                           		// 0x0094 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ProductStatValue;                                 		// 0x00A0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     CertifiedStatLabel;                               		// 0x00AC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00B8 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Products_TA.ProductID
	int                                                BaseProductID;                                    		// 0x00C0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SchematicPointerID;                               		// 0x00C4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ProductSlot;                                      		// 0x00C8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ProductSlotLabel;                                 		// 0x00CC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bProductEquipped : 1;                             		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bProductEquipped01 : 1;                           		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bProductUnlocked : 1;                             		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bProductIsPack : 1;                               		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bProductIsNew : 1;                                		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bProductHasNewSkin : 1;                           		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bProductCanBeTradedIn : 1;                        		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bProductCanBePlayerTraded : 1;                    		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bProductIsContainer : 1;                          		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bProductIsContainerKey : 1;                       		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bProductIsSchematic : 1;                          		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000400] ( CPF_EditInlineNotify )
	unsigned long                                      bProductUpgradable : 1;                           		// 0x00D8 (0x0004) [0x0000000040000000] [0x00000800] ( CPF_EditInlineNotify )
	unsigned long                                      bDebugLoadingProducts : 1;                        		// 0x00D8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	int                                                ProductPaintColor;                                		// 0x00DC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ProductPaintColorName;                            		// 0x00E0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      ProductQuality;                                   		// 0x00EC (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ProductQuantity;                                  		// 0x00F0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                TradeHold;                                        		// 0x00F4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SeriesID;                                         		// 0x00F8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     SeriesDescription;                                		// 0x00FC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                SchematicResources;                               		// 0x0108 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UGFxProductAttributeMap_TA*                  AttributeMap;                                     		// 0x010C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     AttributeTables;                                  		// 0x0110 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70096 ];

		return pClassPointer;
	};

	void __GFxData_Products_TA__ClearAttributes ( class UClass* GFxClass );
	class UGFxData_ProductAttribute_TA* __GFxData_Products_TA__InstanceAttributes ( class UClass* GFxClass );
	class UClass* __GFxData_Products_TA__InstanceAttributes ( class UProductAttribute_TA* Attribute );
	struct FName __GFxData_Products_TA__BuildAttributeTableStr ( class UGFxData_ProductAttribute_TA* GFxAttribute );
	bool __GFxData_Products_TA__FolderContainsNewProducts ( class UProduct_TA* P );
	class ACarPreviewActor_TA* GetCarPreview ( );
	int GetEditTeamIndex ( class UProfile_TA* Profile );
	class ULoadoutSet_TA* GetEditLoadoutSet ( class UProfile_TA* Profile );
	class ULoadout_TA* GetEditLoadout ( class UProfile_TA* Profile, int TeamIndex );
	void OnSchematicResourcesChanged ( );
	void HandleSchematicResourcesChanged ( class USaveData_TA* SaveData );
	void RefreshSchematicResources ( );
	void HandleNewOnlineProduct ( class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct );
	void OnProductsRefreshed ( );
	void HandleOnlineProductsSynced ( class USaveData_TA* SaveData );
	void TimerRefreshProducts ( );
	void RefreshProducts ( );
	void GetFirstInstanceIdForProduct ( int InProductID );
	int GetCountByProductID ( int InProductID );
	int GetTimeHoldRemaining ( );
	void UpdateTeamProductData ( );
	void UpdateAllProductData ( );
	bool SlotContainsNewProducts ( int SlotIndex, TArray< class UProduct_TA* >* ArrayResultLocal_8288EEF647F855E5D20924AEAEE596E4 );
	bool FolderContainsNewProducts ( TArray< class UProduct_TA* >* ArrayResultLocal_D87FF1A2440CCC88AD43359C362D2F31 );
	bool HasNewOnlineProducts ( );
	int GetBaseProductID ( );
	struct FString GetProductLongLabel ( int InProductID );
	unsigned char GetProductQuality ( int InProductID );
	struct FString GetProductTrademarkLabel ( int InProductID );
	struct FString GetProductLabel ( int InProductID );
	void OnProductLoaded ( int ThumbnailSize );
	struct FString BuildAttributeTableStr ( TArray< class UGFxData_ProductAttribute_TA* >* Attributes, TArray< struct FName >* MapLocal_ECE37711400011C53F554A93DBB32DBB );
	TArray< class UGFxData_ProductAttribute_TA* > InstanceAttributes ( class UIProductAttributeProvider_TA* AttributeProvider, TArray< class UClass* >* MapLocal_0E7E19C4412212F239BB559812498FD6, TArray< class UGFxData_ProductAttribute_TA* >* MapLocal_8D7A17ED4B2FF1431E353A8A402F14A4 );
	void ClearAttributes ( );
	void UpdateProductData ( struct FLoadingProduct ProductData, TArray< class UProduct_TA* >* ArrayResultLocal_920A749642DDC92915104BB63C005253 );
	bool CanBePlayerTraded ( class UProduct_TA* Product );
	bool CanBeTradedIn ( );
	void HandleRenderTargetUpdate ( class UTextureRenderTarget2D* Texture );
	void HandleProductThumbnailRendered ( struct FProductThumbnailResult Result );
	void RenderProductThumbnail ( struct FLoadingProduct ProductData );
	void HandleProductLoaded ( struct FAssetLoadResult Result );
	class UProduct_TA* GetProduct ( );
	void LoadProduct ( unsigned char ThumbnailSize, int ViewId );
	void OnClearViewedProduct ( unsigned char ThumbnailSize );
	void CancelLoadingThumbnail ( int LoadingIndex );
	bool IsProductIDReferenced ( int InProductID );
	void ClearProductView ( int LoadingIndex, int ViewId );
	void ClearReferencedProducts ( int ViewId );
	void SetViewProducts ( int ViewId, unsigned char ThumbnailSize );
	void GetSortedProductIDsForSlotAndPack ( int SlotIndex, int PackID );
	void GetSortedProductIDsForPack ( int PackID );
	void GetDLCProductIDs ( int SlotIndex );
	void GetSortedProductIDs ( int SlotIndex );
	void SortProductIDs ( );
	void GetVisibleProductIDs ( int SlotIndex, int PackID, unsigned long bUnlockedOnly );
	void GetVisibleDLCProductIDs ( int SlotIndex );
	void GetUnlockedProductIDs ( int SlotIndex );
	bool ShouldShowProduct ( class ULoadout_TA* Loadout, class UProduct_TA* Product, int PackID );
	class UProfile_TA* GetProfile ( );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Products_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ItemDrops_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_ItemDrops_TA : public UGFxDataSingleton_X
{
public:
	int                                                CurrencyDropID;                                   		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                CurrencyDropAmount;                               		// 0x0058 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x005C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ItemDrops_TA.DropID
	unsigned long                                      bCanEquipNow : 1;                                 		// 0x0064 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	int                                                DropsRemaining;                                   		// 0x0068 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      UnknownData01[ 0xC ];                             		// 0x006C (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.GFxData_ItemDrops_TA.PendingDrops
	TArray< struct FCurrencyDrop >                     PendingCurrencyDrops;                             		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70205 ];

		return pClassPointer;
	};

	void GetUnseenContainerDrops ( );
	void RemoveContainerDrop ( );
	void ClearContainerDrops ( );
	void OnAllItemDropsHandled ( );
	bool AnyPlayerHasUnlocks ( );
	void OnDropsHandled ( );
	void CheckAllDropsHandled ( );
	void OnCurrencyDropHandled ( int InCurrencyDropId );
	void OnDropHandled ( );
	void PlayerAllDropsHandled ( );
	void EquipNow ( );
	bool CanEquipNow ( );
	void AddCurrencyDrop ( struct FCurrencyDrop Drop );
	void HandleNewOnlineItem ( class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct );
	void HandleRewardUnlocked ( class USaveData_TA* Data, int ProductID );
	void ClearDropData ( );
	void SetDropData ( );
	void AddDrop ( );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error );
	void eventOnShellSet ( );
};

UClass* UGFxData_ItemDrops_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Leaderboards_TA
// 0x0034 (0x0088 - 0x0054)
class UGFxData_Leaderboards_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FLeaderboardData >                  LeaderboardDataSet;                               		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                PlayerLeaderboardValue;                           		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                PlayerLeaderboardDivision;                        		// 0x0064 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              PlayerLeaderboardMMR;                             		// 0x0068 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PlayerLeaderboardName;                            		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bShowGlobalLeaderboards : 1;                      		// 0x0078 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bWordFilterError : 1;                             		// 0x0078 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UOnlineGameLeaderboards_X*                   Leaderboards;                                     		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PendingLeaderboardRequestID;                      		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70292 ];

		return pClassPointer;
	};

	void ViewProfile ( int RowIndex );
	void HandleSanitizeError ( struct FString OriginalPhrase, class UError* Error );
	void HandlePlayerNameSanitized ( struct FString Original, struct FString Sanitized );
	void SanitizePlayerNames ( TArray< struct FLeaderboardData >* Table );
	void GetLeaderboardFriends ( struct FName LeaderboardId );
	void HandlePlayerFriendLeaderboardRecieved ( class UOnlineGameLeaderboards_X* LeaderboardsRef, struct FName LeaderboardId, class UError* Error, struct FLeaderboardData* PlayerLeaderboardData );
	void HandlePlayerLeaderboardRecieved ( class UOnlineGameLeaderboards_X* LeaderboardsRef, struct FName LeaderboardId, class UError* Error, struct FLeaderboardData* PlayerLeaderboardData );
	void HandleLeaderboardAvatarReceived ( class UTexture* Avatar, struct FUniqueNetId* PlayerID );
	void RequestPlayerAvatar ( int LeaderboardIndex );
	void HandleLeaderboardReceived ( struct FName NewLeaderboardID, TArray< struct FLeaderboardData >* NewLeaderboardData );
	void OnLeaderboardError ( struct FString LeaderboardError );
	void OnLeaderboardLoaded ( );
	void HandleLeaderboardError ( class UError* Error );
	void GetLeaderboard ( struct FName LeaderboardName );
	void SetShowGlobalLeaderboards ( unsigned long bGlobal );
	void InitShowGlobalLeaderboards ( );
	void GetPlayerLeaderboardValue ( struct FName LeaderboardName, struct FScriptDelegate NewDelegate );
	void BeginGetLeaderboard ( struct FName LeaderboardName );
	void eventOnShellSet ( );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxData_Leaderboards_TA::pClassPointer = NULL;

// Class TAGame.GFxData_LocalCar_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_LocalCar_TA : public UGFxDataSingleton_X
{
public:
	int                                                Boost;                                            		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bOnBack : 1;                                      		// 0x0058 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bViewingCarCam : 1;                               		// 0x0058 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bShowItemsDisplay : 1;                            		// 0x0058 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bItemActive : 1;                                  		// 0x0058 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	int                                                TimeTillItem;                                     		// 0x005C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                MaxTimeTillItem;                                  		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ItemName;                                         		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	float                                              ItemTimeRemaining;                                		// 0x0070 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ItemTargetID;                                     		// 0x0074 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70363 ];

		return pClassPointer;
	};

	void SetItemTargetScreenPosition ( float ScreenX, float ScreenY, unsigned long bOffScreen );
	void SetOnBack ( unsigned long bIsOnBack );
	void HandleCameraTargetChanged ( class ACamera_TA* Camera, class AActor* Target );
	void HandleCameraChanged ( class APlayerController_X* PlayerController );
	void eventOnShellSet ( );
};

UClass* UGFxData_LocalCar_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MainMenu_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_MainMenu_TA : public UGFxDataSingleton_X
{
public:
	float                                              PreviewCameraRotationScale;                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RequestedDLCName;                                 		// 0x0058 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                RequestedSubIdx;                                  		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       QueuedName;                                       		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                QueuedSubIdx;                                     		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkillDecayMessageHandler_TA*                SkillDecayMessageHandler;                         		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70554 ];

		return pClassPointer;
	};

	class UShowroomMetrics_TA* GetShowroomMetrics ( );
	void SetLockPreviewActor ( unsigned long bLock );
	bool SetPreviewProduct ( int SlotIndex, unsigned long bUseBaseLoadout );
	void SetPreviewBaseLoadout ( );
	void OnRotatePreviewFinished ( );
	void RotatePreviewCamera ( float X, float Y );
	void OnPremiumCarFinished ( );
	void SetPremiumCarFromBundle ( struct FName PackID, int SubIdx );
	void SetPremiumDLCPack ( struct FName PackID, int SubIdx );
	void eventOnShellSet ( );
};

UClass* UGFxData_MainMenu_TA::pClassPointer = NULL;

// Class TAGame.GFxData_TeamInfo_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_TeamInfo_TA : public UGFxDataRow_X
{
public:
	struct FString                                     TeamName;                                         		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                TeamColor;                                        		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Score;                                            		// 0x0064 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UTexture*                                    TeamLogo;                                         		// 0x0068 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SeriesScore;                                      		// 0x006C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class ATeam_TA*                                    Team;                                             		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70558 ];

		return pClassPointer;
	};

	void HandleGameScoreUpdated ( class ATeam_Soccar_TA* InTeam );
	void HandleScoreUpdated ( class ATeam_TA* InTeam );
	void HandleColorsChanged ( class ATeam_TA* InTeam );
	void HandleLogoChanged ( class ATeam_TA* InTeam );
	void HandleNameChanged ( class ATeam_TA* InTeam );
	void SetTeam ( class ATeam_TA* InTeam );
};

UClass* UGFxData_TeamInfo_TA::pClassPointer = NULL;

// Class TAGame.SkillDecayMessageHandler_TA
// 0x002C (0x0068 - 0x003C)
class USkillDecayMessageHandler_TA : public UObject
{
public:
	class USaveData_TA*                                SaveData;                                         		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxShell_TA*                                GFxShell;                                         		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SkillDecayTitle;                                  		// 0x0044 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SkillDecayMessage;                                		// 0x0050 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FPlayersShownPlaylists >            ShownPlaylists;                                   		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70560 ];

		return pClassPointer;
	};

	struct FString __SkillDecayMessageHandler_TA__GetDecayedPlaylistsString ( class UGameSettingPlaylist_X* DecayedPlaylist );
	struct FString GetDecayedPlaylistsString ( TArray< class UGameSettingPlaylist_X* > DecayedPlaylists, TArray< struct FString >* MapLocal_B77B98404130A38982D4419D396B16F4 );
	void HandleSkillDecayed ( class USaveData_TA* InSaveData, TArray< class UGameSettingPlaylist_X* > DecayedPlaylists, TArray< class UGameSettingPlaylist_X* >* FilterLocal_35E77CEE4C8003D30C9747950D7C07E4 );
	void Init ( class USaveData_TA* InSaveData, class UGFxShell_TA* InGFxShell );
};

UClass* USkillDecayMessageHandler_TA::pClassPointer = NULL;

// Class TAGame.ShowroomMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UShowroomMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70570 ];

		return pClassPointer;
	};

	void PurchaseItemInShowRoom ( struct FName ItemName, int ItemIndex );
	void ViewItemInStore ( struct FName ItemName, int ItemIndex );
	void ViewItemInShowroom ( struct FName ItemName, int ItemIndex, int SubItemIndex );
	void ShowroomExit ( );
	void ShowroomEnter ( );
};

UClass* UShowroomMetrics_TA::pClassPointer = NULL;

// Class TAGame.GFxData_DLC_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_DLC_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxDLCData >                       Packs;                                            		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bReturningFromStore : 1;                          		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRequestingAuthCode : 1;                          		// 0x0060 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UOnlineGameDLC_TA*                           OnlineDLC;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70592 ];

		return pClassPointer;
	};

	class UShowroomMetrics_TA* GetShowroomMetrics ( );
	void OnClaimedEntitlements ( );
	void HandleClaimEntitlements ( class URPC_MicroTransactions_ClaimEntitlements_TA* RPC );
	void HandleNewMTXAuthCode ( unsigned long bSuccess, struct FString NewAuthCode );
	void RetryClaimEntitlements ( class UGFxModal_X* Modal );
	void HandlePsyNetLoginChange ( class UOnlinePlayerAuthentication_X* Auth );
	void ClaimEntitlements ( );
	void OnExternalUIChange ( unsigned long bIsOpening );
	void CheckNewPurchases ( );
	void OpenStoreForDLC ( struct FName Id );
	void HandleUnlockedDLCChanged ( );
	void HandleGetAppPriceInfoComplete ( struct FName AppName, struct FString Price, struct FString DiscountPrice, int DiscountPercentage );
	void UpdateAppPrices ( );
	void HandleDLCReleased ( class UOnlineGameDLC_X* OnlineDLCX );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_DLC_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Map_TA
// 0x0040 (0x0094 - 0x0054)
class UGFxData_Map_TA : public UGFxDataSingleton_X
{
public:
	struct FGFxMapData                                 RandomMapData;                                    		// 0x0054 (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FGFxMapData >                       Data;                                             		// 0x0074 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                ActiveMapIndex;                                   		// 0x0080 (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	struct FScriptDelegate                             __EventMapListChanged__Delegate;                  		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70600 ];

		return pClassPointer;
	};

	void OnLargeMapImageFailed ( struct FName MapName );
	void OnLargeMapImageLoaded ( class UTexture2D* Image, struct FName MapName );
	void HandleLargeMapImageLoaded ( struct FMapImageLoadResult Result );
	void LoadLargeMapImage ( struct FName MapName );
	int GetMapIndex ( struct FName MapName );
	void AddMapData ( class UMapData_TA* Map );
	void UpdateMapList ( int GameModeIndex, unsigned long AddRandomOption );
	void eventOnShellSet ( );
	void EventMapListChanged ( class UGFxData_Map_TA* Maps );
};

UClass* UGFxData_Map_TA::pClassPointer = NULL;

// Class TAGame.GFxData_OnlineMatch_TA
// 0x0060 (0x00B4 - 0x0054)
class UGFxData_OnlineMatch_TA : public UGFxDataSingleton_X
{
public:
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     NoRegionsMessage;                                 		// 0x005C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotLoggedInPsynetMessage;                         		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoServersMessage;                                 		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BannedMessage;                                    		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotPartyLeaderMsg;                                		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CountdownSeconds;                                 		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGameParty_X*                          OnlineParty;                                      		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     OnlineStatusError;                                		// 0x00A0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UGFxData_OnlineMatchStatus_TA*               SearchStatusData;                                 		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSearching : 1;                                   		// 0x00B0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAllowPartyMemberMatchmaking : 1;                 		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70644 ];

		return pClassPointer;
	};

	unsigned char GetStatusOwnerValue ( );
	bool IsStatusOwner ( );
	void ShowMatchmakingCanceledOnPartySizeChangedError ( );
	void HandleMatchmakingCanceledOnPartySizeChanged ( class UOnlineGameMatchmaking_X* InMatchMaking );
	void HandlePartySizeChanged ( class UOnlineGameParty_X* Party, int NewSize, int OldSize );
	void HandlePartyChanged ( class UOnlineGameParty_X* Party );
	void HandleRegionsSynced ( class UGFxData_Regions_TA* RegionsData );
	void SetError ( struct FString msg );
	void SetOnlineStatusError ( struct FString NewStatusError );
	void UpdateOnlineStatus ( );
	struct FString GetOnlineStatusError ( );
	void ClearUpdateOnlineStatusTimer ( );
	void SetUpdateOnlineStatusTimer ( float StartDelay );
	class UOnlineGame_TA* GetOnlineGame ( );
	void OnProfileSet ( );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
	void CancelSearch ( );
};

UClass* UGFxData_OnlineMatch_TA::pClassPointer = NULL;

// Class TAGame.GFxData_OnlineMatchStatus_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_OnlineMatchStatus_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bSearching : 1;                                   		// 0x0054 (0x0004) [0x0000000040002000] [0x00000001] ( CPF_Transient | CPF_EditInlineNotify )
	struct FName                                       SearchState;                                      		// 0x0058 (0x0008) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned char                                      StatusOwner;                                      		// 0x0060 (0x0001) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	class UOnlineGameParty_X*                          OnlineParty;                                      		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PartyLeaderSearchingMessage;                      		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70648 ];

		return pClassPointer;
	};

	void SetWarning ( struct FString msg );
	void OnCountdownEnded ( );
	void OnCountdownStarted ( int SecondsRemaining );
	void OnClearMessages ( );
	void OnSearchError ( struct FString Message );
	void OnSearchMessage ( struct FString Message, unsigned char MessageType );
	void OnFindGameComplete ( );
	class UOnlineGame_X* GetOnlineGame ( );
	void HandleCountdownEnded ( );
	void HandleCountdownStarted ( );
	void HandlePartyJoinGameError ( class UOnlineGameParty_X* Party, struct FString LocalizedErrorString );
	void HandleFindGameWarning ( struct FString Message );
	void SetError ( struct FString msg );
	void SetStatus ( struct FString msg );
	void HandeFindGameComplete ( unsigned long bCancelled );
	void HandleFindGameStatusChanged ( struct FString NewStatus );
	void SetSearching ( unsigned long bNewSearching, unsigned char NewOwner );
	void SetSearchState ( struct FName NewState );
	void SetPartyLeaderSearchingMessage ( );
	void HandlePartySizeChanged ( class UOnlineGameParty_X* Party, int NewSize, int OldSize );
	void HandlePartySearchStatus ( class UOnlineGameParty_X* Party, class UPartyMessage_SearchStatus_X* StatusMessage );
	void SetStatusOwner ( unsigned char NewOwner );
	void eventOnShellSet ( );
};

UClass* UGFxData_OnlineMatchStatus_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Regions_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_Regions_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxRegion >                        Regions;                                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventRegionsSynced__Delegate;                   		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70661 ];

		return pClassPointer;
	};

	TArray< struct FGFxRegion > SelectRegions ( TArray< struct FString > SelectedRegions );
	void NotifyWhenSynced ( struct FScriptDelegate Callback );
	void HandleRegionsSynced ( class UOnlineGameRegions_X* RegionsObj );
	void eventOnShellSet ( );
	void EventRegionsSynced ( class UGFxData_Regions_TA* RegionsData );
};

UClass* UGFxData_Regions_TA::pClassPointer = NULL;

// Class TAGame.OnlineGame_TA
// 0x000C (0x017C - 0x0170)
class UOnlineGame_TA : public UOnlineGame_X
{
public:
	class UESportEvents_TA*                            ESportEvents;                                     		// 0x0170 (0x0004) [0x0000000000000000]              
	class UUpsell_TA*                                  Upsell;                                           		// 0x0174 (0x0004) [0x0000000000000000]              
	class UOnlineGamePlayTogether_TA*                  PlayTogether;                                     		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70665 ];

		return pClassPointer;
	};

	void InitializeTrophyAPI ( );
	void HandleTrialStatusChanged ( class UOnlineGameTrial_X* Trial );
	void OnMainMenuOpened ( );
	void OnInit ( );
};

UClass* UOnlineGame_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Matchmaking_TA
// 0x008C (0x0140 - 0x00B4)
class UGFxData_Matchmaking_TA : public UGFxData_OnlineMatch_TA
{
public:
	struct FString                                     NoPlaylistSelectedMessage;                        		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoRegionSelectedMessage;                          		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyTooBigMessage;                               		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeavePenaltyMessage;                              		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartySkillTooDistant;                             		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyMemberNotOriginalAppOwner;                   		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PartyMemberNotLoggedIn;                           		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FGFxRegion >                        Regions;                                          		// 0x0108 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                TotalPopulation;                                  		// 0x0114 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      MatchmakingViewTab;                               		// 0x0118 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bRankedPlaylistsEnabled : 1;                      		// 0x011C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	int                                                SeasonEndDays;                                    		// 0x0120 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SeasonEndHours;                                   		// 0x0124 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SeasonEndMinutes;                                 		// 0x0128 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FMessageUpdate >                    MessageUpdates;                                   		// 0x012C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentMessageUpdateIndex;                        		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URankedConfig_X*                             RankedConfig;                                     		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70695 ];

		return pClassPointer;
	};

	bool __GFxData_Matchmaking_TA__GetAccessiblePlaylists ( struct FName AccessiblePlaylist );
	void UpdateSeasonTimeRemaining ( );
	void HandleDisableCrossPlayChange ( class UOnlineGameParty_X* PartyObject );
	unsigned char GetStatusOwnerValue ( );
	void CancelSearch ( );
	void CancelNextDisplayMessage ( );
	void DisplayNextMessage ( );
	void AddMessageUpdate ( int DelayFromStart, struct FString MessageKey );
	void PopulateMessageUpdates ( );
	TArray< struct FName > GetAccessiblePlaylists ( TArray< struct FName >* FilterLocal_0E7926EA4E6BC8E81BEB6EB3DCAD1D3E, TArray< struct FName >* FilterLocal_26D60ECB418D291181DF8B98454470B2 );
	void StartMatchmaking ( );
	void SetMatchmakingViewTab ( unsigned char InMatchmakingViewTab );
	void SetRegionSelection ( int Row, unsigned long bSelected );
	void DeselectAllRegions ( );
	void HandleRegionsSynced ( class UGFxData_Regions_TA* RegionsData );
	void SetPlaylistSelection ( int Row, unsigned long bSelected );
	void DeselectAllRankedPlaylists ( );
	void HandleRankedConfigChanged ( );
	void InitPlaylists ( );
	void HandleGetPlaylistPopulations ( class UOnlineGamePopulation_X* Population );
	void UpdatePopulation ( );
	void SetViewingMatchmaking ( unsigned long bViewingMatchmaking );
	int GetMaxTeamSize ( );
	bool GetCompetitivePartySkillRestrictionError ( struct FString* OutError );
	bool GetNotLoggedInPartyRestrictionError ( struct FString* OutError );
	bool GetCompetitivePartyRestrictionError ( struct FString* OutError );
	struct FString GetOnlineStatusError ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Matchmaking_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Playlist_TA
// 0x003C (0x0090 - 0x0054)
class UGFxData_Playlist_TA : public UGFxDataRow_X
{
public:
	class UGameSettingPlaylist_X*                      Playlist;                                         		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Id;                                               		// 0x0058 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     FriendlyName;                                     		// 0x005C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Description;                                      		// 0x0068 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                TeamSize;                                         		// 0x0074 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bStandardMatch : 1;                               		// 0x0078 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bRanked : 1;                                      		// 0x0078 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bSolo : 1;                                        		// 0x0078 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bSelected : 1;                                    		// 0x0078 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bEnabled : 1;                                     		// 0x0078 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bRestricted : 1;                                  		// 0x0078 (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bNew : 1;                                         		// 0x0078 (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	int                                                PlayerCount;                                      		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SkillTier;                                        		// 0x0080 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SkillDivision;                                    		// 0x0084 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SkillMatchesPlayed;                               		// 0x0088 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              SkillMMR;                                         		// 0x008C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70726 ];

		return pClassPointer;
	};

	void UpdateSkillData ( );
	void SetPlayerCount ( int Count );
	void SetPlaylist ( class UGameSettingPlaylist_X* InPlaylist );
	class UOnlineGameParty_X* GetOnlineGameParty ( );
	class UOnlineGameSkill_X* GetOnlineGameSkill ( );
};

UClass* UGFxData_Playlist_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MusicPlayer_TA
// 0x0070 (0x00C4 - 0x0054)
class UGFxData_MusicPlayer_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bDebugMusicPlayer : 1;                            		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlaylistsEnabled : 1;                            		// 0x0054 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	TArray< struct FGFxMusicPlaylist >                 Playlists;                                        		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     TrackTitle;                                       		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     TrackArtist;                                      		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    TrackIcon;                                        		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                CurrentTrackPlayingID;                            		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkSoundCue*                                 CurrentTrack;                                     		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAkSoundCue* >                       MasterTracklist;                                  		// 0x0088 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAkSoundCue* >                       ActiveTracklist;                                  		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGameVersionMusicTheme                      VersionTheme;                                     		// 0x00A0 (0x0020) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMusicPlayerSave_TA*                         MusicSave;                                        		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70819 ];

		return pClassPointer;
	};

	struct FGFxMusicPlaylist __GFxData_MusicPlayer_TA__OnShellSet ( class UMusicPlaylist_TA* P );
	bool __GFxData_MusicPlayer_TA__OnShellSet ( struct FGameVersionMusicTheme Theme );
	int __GFxData_MusicPlayer_TA__OnShellSet ( struct FGameVersionMusicTheme Left, struct FGameVersionMusicTheme Right );
	bool __GFxData_MusicPlayer_TA__HandleSaveDataLoaded ( struct FGFxMusicPlaylist P );
	void __GFxData_MusicPlayer_TA__HandleSaveDataLoaded ( struct FPlaylistState P );
	bool __GFxData_MusicPlayer_TA__HandleTrackStart ( struct FGFxMusicPlaylist P );
	bool __GFxData_MusicPlayer_TA__BuildTracklist ( struct FGFxMusicPlaylist P );
	void HandlePlaylistsToggled ( class UPlayerInput_X* PlayerInput, struct FName ActionName, unsigned long bEnabled );
	struct FString PrintPlaylist ( TArray< class UAkSoundCue* >* Tracks );
	TArray< class UAkSoundCue* > AppendTracks ( TArray< class UAkSoundCue* > Tracks, struct FGFxMusicPlaylist GFxPlaylist, TArray< class UAkSoundCue* >* ConcatLocal_1C24B7BA40E20CF20AB034835929BD3D );
	TArray< class UAkSoundCue* > BuildTracklist ( TArray< struct FGFxMusicPlaylist >* InGFxPlaylists, TArray< struct FGFxMusicPlaylist >* FilterLocal_CFABB6144C815979AB2506B2E89C3F71, TArray< class UAkSoundCue* >* ReduceLocal_CB644365421B8D43338ABB9C998E570A, TArray< class UAkSoundCue* >* DistinctLocal_2B5741534617AC2A5615078F1E585CD9 );
	void ValidateCurrentTrack ( );
	void SetPlaylistSelected ( int Row, unsigned long bSelected );
	class UMusicMetrics_TA* GetMetrics ( );
	void HandleTrackEnd ( int PlayingID );
	void HandleTrackStart ( int PlayingID, struct FString FileMarker );
	void PlayKonamiTheme ( TArray< class UAkSoundCue* >* ArrayInitializer_B67891AA42C6B4324257B3AA2C9413FB );
	void PlayTrack ( class UAkSoundCue* Track );
	void StopCurrentTrack ( );
	void OnTogglePlaylistSelection ( );
	void TogglePlaylistSelection ( );
	void NextTrack ( );
	void PlayCreditsTheme ( );
	void SetPlaylistSelectedByName ( struct FName PlaylistName, unsigned long bSelected );
	void HandleSaveDataLoaded ( class UMusicPlayerSave_TA* InMusicSave );
	struct FGFxMusicPlaylist PlaylistToGFxData ( class UMusicPlaylist_TA* P, struct FGFxMusicPlaylist* StructInitializer_B8EDF08D405AEB3235F59A90D0293EDE );
	void eventOnRemoved ( );
	void eventOnShellSet ( TArray< struct FGameVersionMusicTheme >* SortLocal_330D9DC2485E6FCF506454993D2D84F1, TArray< struct FGFxMusicPlaylist >* MapLocal_F17E1F3E4AF0CA7451F1F7B50540F3BE, TArray< class UAkSoundCue* >* ArrayInitializer_AF0560104DCB8025321C2BA59F94889B );
};

UClass* UGFxData_MusicPlayer_TA::pClassPointer = NULL;

// Class TAGame.SaveObject_TA
// 0x0030 (0x006C - 0x003C)
class USaveObject_TA : public UObject
{
public:
	struct FScriptDelegate                             __EventDirtied__Delegate;                         		// 0x003C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLoaded__Delegate;                          		// 0x004C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUnloaded__Delegate;                        		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70844 ];

		return pClassPointer;
	};

	class USaveObject_TA* Reconcile ( class USaveObject_TA* Remote );
	void SetDirty ( );
	void OnUnload ( );
	void Unload ( );
	void OnLoad ( );
	void Load ( );
	void EventUnloaded ( class USaveObject_TA* SaveObject );
	void EventLoaded ( class USaveObject_TA* SaveObject );
	void EventDirtied ( class USaveObject_TA* SaveObject );
};

UClass* USaveObject_TA::pClassPointer = NULL;

// Class TAGame.MusicPlayerSave_TA
// 0x000C (0x0078 - 0x006C)
class UMusicPlayerSave_TA : public USaveObject_TA
{
public:
	TArray< struct FPlaylistState >                    Playlists;                                        		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70843 ];

		return pClassPointer;
	};

	void SetSelected ( struct FName Playlist, unsigned long bEnabled );
};

UClass* UMusicPlayerSave_TA::pClassPointer = NULL;

// Class TAGame.MusicPlaylist_TA
// 0x0014 (0x0050 - 0x003C)
class UMusicPlaylist_TA : public UObject
{
public:
	TArray< class UAkSoundCue* >                       Tracks;                                           		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture*                                    Icon;                                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDefault : 1;                                     		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70846 ];

		return pClassPointer;
	};

	struct FString GetTitle ( );
};

UClass* UMusicPlaylist_TA::pClassPointer = NULL;

// Class TAGame.MusicMetrics_TA
// 0x0014 (0x0068 - 0x0054)
class UMusicMetrics_TA : public UMetricsGroup_X
{
public:
	struct FName                                       TrackName;                                        		// 0x0054 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              TrackStartTime;                                   		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TrackSequence;                                    		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PendingMusicVolume;                               		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70866 ];

		return pClassPointer;
	};

	float GetMusicVolume ( );
	void PlaylistSelected ( struct FName Playlist, unsigned long bSelected );
	void RecordPlaylistSelected ( class UMusicPlaylist_TA* Playlist, unsigned long bSelected );
	void TrackSkip ( struct FName Track, int Sequence, float Duration, float Volume );
	void RecordTrackSkip ( );
	void TrackEnd ( struct FName Track, int Sequence, float Volume );
	void RecordTrackEnd ( );
	void TrackStart ( struct FName Track, int Sequence, float Volume );
	void RecordTrackStart ( class UAkSoundCue* Cue );
};

UClass* UMusicMetrics_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_MusicPlayer_TA__SetPlaylistSelectedByName
// 0x0008 (0x0044 - 0x003C)
class U__GFxData_MusicPlayer_TA__SetPlaylistSelectedByName : public UObject
{
public:
	struct FName                                       PlaylistName;                                     		// 0x003C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70952 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FGFxMusicPlaylist P );
};

UClass* U__GFxData_MusicPlayer_TA__SetPlaylistSelectedByName::pClassPointer = NULL;

// Class TAGame.GFxData_Nameplate_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_Nameplate_TA : public UGFxDataRow_X
{
public:
	float                                              HideFullNameplateDistance;                        		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PlayerName;                                       		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                Team;                                             		// 0x0064 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bHideFullNameplate : 1;                           		// 0x0068 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bBusy : 1;                                        		// 0x0068 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x0068 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	class UNameplateComponent_TA*                      NameplateComponent;                               		// 0x006C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UProfile_TA*                                 Profile;                                          		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70969 ];

		return pClassPointer;
	};

	void Tick ( );
	void HandlePlayerNameSanitized ( struct FString Original, struct FString Sanitized );
	void SetPlayerName ( class APRI_TA* InPRI );
	class UOnlineGame_X* GetOnlineGame ( );
	void SetNameplateComponent ( class UNameplateComponent_TA* InNameplateComponent );
	void eventOnShellSet ( );
};

UClass* UGFxData_Nameplate_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Party_TA
// 0x0035 (0x0089 - 0x0054)
class UGFxData_Party_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxPartyMember >                   Members;                                          		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                MaxPartySize;                                     		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       Processing;                                       		// 0x0064 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UOnlineGameParty_X*                          OnlineParty;                                      		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueLobbyId                              PendingPartyId;                                   		// 0x0070 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UPersonas_TA*                                PersonasData;                                     		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UError*                                      PendingPartyError;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PsyNetPartyStatus;                                		// 0x0088 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71042 ];

		return pClassPointer;
	};

	void __GFxData_Party_TA__OnShellSet ( class AGameEvent_TA* _ );
	void __GFxData_Party_TA__OnShellSet ( class AGameInfo_X* _ );
	void __GFxData_Party_TA__OnShellSet ( class AGFxHUD_TA* _ );
	void HandleFollowTheLeaderToMainMenu ( class UGFxModal_X* Modal );
	void HandleLeaderLeftOnlineGame ( class UOnlineGameParty_X* PartyObject );
	void ClearPartyJoinGameDelegates ( );
	void HandlePartyJoinGameSuccess ( class UOnlineGameParty_X* PartyObject );
	void HandlePartyJoinGameError ( class UOnlineGameParty_X* PartyObject, struct FString LocalizedString );
	void HandlePartyJoinGameConfirmed ( class UGFxModal_X* Modal );
	void HandlePartyJoinGameConfirmation ( class UOnlineGameParty_X* PartyObject );
	void ShowPartyError ( unsigned long bForce );
	bool CanShowPartyError ( );
	void HandlePartyError ( class UOnlineGameParty_X* PartyObject, class UError* Error );
	void HandleReceivedPartyPersonaInfo ( class URPC_GetPartyMembersPersonaInfo_TA* RPC );
	int SortMembersCallback ( struct FGFxPartyMember A, struct FGFxPartyMember B );
	void RebuildPartyData ( );
	void OnPartyChanged ( class UOnlineGameParty_X* PartyObject );
	void JoinParty ( int ControllerId, struct FUniqueLobbyId* PartyID );
	void OnConfirmedLeaveCurrentPartyForAnotherPartyThatIsProbablyMuchBetterAnyways ( class UGFxModal_X* Modal );
	void OnPlayerInvited ( class UOnlineGameParty_X* Party, struct FUniqueLobbyId* PartyID, struct FUniqueNetId* FriendId );
	void HandleGetAvatar ( struct FUniqueNetId InPlayerId, class UTexture* Avatar, struct FString OnlinePlayerName );
	void SetLeader ( int Index );
	void OnPlayerTradeEnded ( );
	void HandleCloseInviteToTrade ( class UOnlineGameParty_X* PartyObject, unsigned long bWasCanceled );
	void OnPlayerTradeStarted ( );
	void HandleAcceptedInviteToTrade ( class UOnlineGameParty_X* PartyObject );
	void HandleCancelInviteToTrade ( class UGFxModal_X* Modal );
	void HandleAcceptInviteToTrade ( class UGFxModal_X* Modal );
	void OnAnotherInviteToTrade ( int MemberIdx );
	void HandleAnotherInviteToTrade ( class UOnlineGameParty_X* PartyObject, struct FUniqueNetId InMemberId );
	void HandleInviteToTrade ( class UOnlineGameParty_X* PartyObject, struct FUniqueNetId InMemberId );
	void JoinFriend ( int PartyMemberIdx );
	void InvitePlayerToTrade ( int Index );
	void HandlePlayerInMatchChanged ( class UOnlineGameParty_X* PartyObject, struct FUniqueNetId InMemberId );
	void HandlePlayerIsCurrentlyTrading ( class UOnlineGameParty_X* PartyObject, struct FUniqueNetId InMemberId );
	void HandlePlayerTradingChanged ( class UOnlineGameParty_X* PartyObject, struct FUniqueNetId InMemberId, unsigned long bIsPlayerTrading );
	void KickPlayer ( int Index );
	void ShowInviteUI ( );
	void OnConfirmLeaveParty ( class UGFxModal_X* Modal );
	void LeaveParty ( );
	void OnPartyCreated ( class UOnlineGameParty_X* Party, unsigned long bWasSuccessful );
	void CreateParty ( );
	bool IsProcessing ( );
	void HandleProcessingStateChanged ( class UOnlineGameParty_X* P );
	void HandleProfileSet ( class ULocalPlayer_TA* LocalPlayer );
	void eventOnRemoved ( );
	unsigned char GetPsyNetPartyStatus ( );
	void UpdatePsyNetPartyStatus ( );
	void HandlePerConChanged ( class UPerCon_X* PerCon );
	void HandleConnectionChanged ( class UPsyNetConnection_X* Connection );
	void HandlePrimaryPlayerChanged ( class UOnlineGameAccount_X* InAccount, struct FUniqueNetId PlayerID );
	void HandlePsyNetConfigChanged ( class UPsyNetConfig_X* Config );
	void eventOnShellSet ( );
};

UClass* UGFxData_Party_TA::pClassPointer = NULL;

// Class TAGame.RPC_GetPartyMembersPersonaInfo_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_GetPartyMembersPersonaInfo_TA : public URPC_X
{
public:
	TArray< struct FUniqueNetId >                      PartyMemberIds;                                   		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineFriend >                     PartyMembers;                                     		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71150 ];

		return pClassPointer;
	};

	class URPC_GetPartyMembersPersonaInfo_TA* SetPartyMembers ( TArray< struct FUniqueNetId > InPartyMemberIds );
};

UClass* URPC_GetPartyMembersPersonaInfo_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Persona_TA
// 0x0008 (0x005C - 0x0054)
class UGFxData_Persona_TA : public UGFxDataRow_X
{
public:
	class UPersona_TA*                                 Persona;                                          		// 0x0054 (0x0004) [0x0000000000000000]              
	class UTexture*                                    PlayerAvatar;                                     		// 0x0058 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71157 ];

		return pClassPointer;
	};

	void HandleGetAvatar ( struct FUniqueNetId InPlayerId, class UTexture* Avatar, struct FString OnlinePlayerName );
	void UpdatePlayerAvatar ( );
	void RemoveFromDataStore ( );
	void UpdateFromOnlineFriend ( struct FOnlineFriend OnlineInfo );
	void SetPersonaProxy ( class UPersona_TA* InPersona );
	class UGFxData_Persona_TA* Create ( class UGFxShell_X* InShell );
};

UClass* UGFxData_Persona_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PlayerRecord_TA
// 0x0074 (0x00C8 - 0x0054)
class UGFxData_PlayerRecord_TA : public UGFxDataRow_X
{
public:
	struct FString                                     PlayerIDString;                                   		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bReported : 1;                                    		// 0x0060 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	struct FString                                     SanitizedPlayerName;                              		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PlayerName;                                       		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APRI_TA*                                     PRI;                                              		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                PlayerID;                                         		// 0x0080 (0x0048) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71216 ];

		return pClassPointer;
	};

	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void Report ( unsigned char Reason );
	void HandleUniqueIdChanged ( class APRI_X* InPRI );
	void HandlePlayerNameSanitized ( struct FString Original, struct FString Sanitized );
	void HandlePlayerNameChanged ( class APRI_X* InPRI );
	void eventOnRemoved ( );
	void SetPRI ( class APRI_TA* InPRI );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxData_PlayerRecord_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PRI_TA
// 0x010C (0x0160 - 0x0054)
class UGFxData_PRI_TA : public UGFxDataRow_X
{
public:
	struct FString                                     PlayerName;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PlayerIDString;                                   		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Platform;                                         		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    Avatar;                                           		// 0x0078 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Team;                                             		// 0x007C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Score;                                            		// 0x0080 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Goals;                                            		// 0x0084 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Assists;                                          		// 0x0088 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Saves;                                            		// 0x008C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Shots;                                            		// 0x0090 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Ping;                                             		// 0x0094 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                BreakoutDamage;                                   		// 0x0098 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bMVP : 1;                                         		// 0x009C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bSpeaking : 1;                                    		// 0x009C (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bMuted : 1;                                       		// 0x009C (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bReady : 1;                                       		// 0x009C (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bBotPlayer : 1;                                   		// 0x009C (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x009C (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bDisconnected : 1;                                		// 0x009C (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bSpectator : 1;                                   		// 0x009C (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bGameEnded : 1;                                   		// 0x009C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bOnPodium : 1;                                    		// 0x009C (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	struct FString                                     ConnectionStatus;                                 		// 0x00A0 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PartyID;                                          		// 0x00AC (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     XPTitle;                                          		// 0x00B8 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      TitleType;                                        		// 0x00C4 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SkillTier;                                        		// 0x00C8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Boost;                                            		// 0x00CC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class APRI_TA*                                     PRI;                                              		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                PlayerID;                                         		// 0x00D4 (0x0048) [0x0000000000002000]              ( CPF_Transient )
	float                                              PodiumSpotlightScreenPosX;                        		// 0x011C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              PodiumSpotlightScreenPosY;                        		// 0x0120 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     PrimaryTitle;                                     		// 0x0124 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SecondaryTitle;                                   		// 0x0130 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PrimaryTitleStat;                                 		// 0x013C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SecondaryTitleStat;                               		// 0x0148 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                PrimaryStat;                                      		// 0x0154 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SecondaryStat;                                    		// 0x0158 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UGFxData_PlayerBanner_TA*                    GFxPlayerBanner;                                  		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71265 ];

		return pClassPointer;
	};

	void HandleReceivedCurrencyDrop ( class APRI_TA* InPRI, struct FCurrencyDrop Drop );
	void UpdatePlayerBanner ( );
	void UpdateScreenPosition ( class UCanvas* MyCanvas, struct FVector WorldPosition );
	void PrintDebugInfo ( class UDebugDrawer* Drawer );
	void HandleTitleData ( class UOnlineGamePlayerTitles_X* Titles, struct FName TitleId );
	void SetXPLevelTitle ( );
	void HandleTitleChanged ( class APRI_TA* InPRI );
	void HandleReplacingBotChanged ( class APRI_TA* InPRI );
	void InitStatTitle ( struct FMemberTitleStat Stat, struct FString TitleLocalizationString, struct FString* StatTitle, int* StatValue, struct FString* StatPostfix );
	void HandleStatTitlesSet ( class APRI_TA* InPRI );
	void HandleWonMVP ( class APRI_TA* InPRI );
	void HandleSkillTierChanged ( class APRI_TA* InPRI );
	void HandlePawnTypeChanged ( class APRI_TA* InPRI );
	void HandlePartyLeaderChanged ( class APRI_TA* InPRI );
	void SetDisconnected ( );
	void SetMuted ( unsigned long bNewMuted );
	void UpdateMuted ( );
	void HandleMuteChanged ( class APlayerController_TA* PC, struct FUniqueNetId InPlayerId, unsigned long bMute );
	void UpdatePRIData ( );
	void HandlePlayerTalking ( class UOnlineGameVoice_X* SelfRef, struct FUniqueNetId InPlayerId, unsigned long bTalking );
	void HandleReadyChanged ( class APRI_TA* InPRI );
	void HandleTeamChanged ( class APRI_X* InPRI );
	void HandleGetAvatar ( struct FUniqueNetId InPlayerId, class UTexture* InAvatar, struct FString OnlinePlayerName );
	void UpdateAvatar ( );
	void HandleFriendsChange ( );
	void HandleUniqueIdChanged ( class APRI_X* InPRI );
	void HandleReceivedLocalPRI ( class APlayerController_X* P );
	void HandlePlayerNameSanitized ( struct FString Original, struct FString Sanitized );
	void SanitizePlayerName ( struct FString InPlayerName, struct FUniqueNetId InPlayerId );
	void HandlePlayerNameChanged ( class APRI_X* InPRI );
	void eventOnRemoved ( );
	void SetPRI ( class APRI_TA* InPRI );
	struct FString GetReservationStatusString ( unsigned char Status );
	void SetReservation ( struct FReplicatedReservationData Reservation );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxData_PRI_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PlayerBanner_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_PlayerBanner_TA : public UGFxDataRow_X
{
public:
	class UPlayerBanner_TA*                            PlayerBanner;                                     		// 0x0054 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class APRI_TA*                                     PRI;                                              		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71387 ];

		return pClassPointer;
	};

	void EquipColor ( int InColorID );
	void EquipProduct ( );
	struct FUniqueNetId GetPlayerID ( );
	void SetBanner ( class UPlayerBanner_TA* InBanner );
	void SetProfile ( class UProfile_TA* InProfile );
	void SetPRI ( class APRI_TA* InPRI );
	class UGFxData_PlayerBanner_TA* Create ( class UGFxShell_X* InShell, class UPlayerBanner_TA* InBanner, struct FUniqueNetId InPlayerId );
};

UClass* UGFxData_PlayerBanner_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PrivateMatch_TA
// 0x00AA (0x015E - 0x00B4)
class UGFxData_PrivateMatch_TA : public UGFxData_OnlineMatch_TA
{
public:
	TArray< struct FGFxRegion >                        Regions;                                          		// 0x00B4 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ServerName;                                       		// 0x00C0 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Password;                                         		// 0x00CC (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                SelectedMaxPlayerCount;                           		// 0x00D8 (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	unsigned long                                      bPublicMatch : 1;                                 		// 0x00DC (0x0004) [0x0000000040000001] [0x00000001] ( CPF_Edit | CPF_EditInlineNotify )
	unsigned long                                      bHasNoPartyMemberError : 1;                       		// 0x00DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                MinServerNameLength;                              		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     NoPartyMembersErrorMessage;                       		// 0x00E4 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreatePartyTitle;                                 		// 0x00F0 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreatePartyConfirm;                               		// 0x00FC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PrivateMatchErrorTitle;                           		// 0x0108 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AlreadySearchingMessage;                          		// 0x0114 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddPartyMemberTitle;                              		// 0x0120 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteConfirm;                                    		// 0x012C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AlreadySearchingForPublicMessage;                 		// 0x0138 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ServerNameLengthError;                            		// 0x0144 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DuplicateLanServerMessage;                        		// 0x0150 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      SearchStatusOwner;                                		// 0x015C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SettingsType;                                     		// 0x015D (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71430 ];

		return pClassPointer;
	};

	void SetError ( struct FString msg );
	unsigned char GetStatusOwnerValue ( );
	void HandleInviteFriends ( class UGFxModal_X* Modal );
	void HandleCreateParty ( class UGFxModal_X* Modal );
	void HandleLanSearchComplete ( unsigned long bCancelled );
	void HandleLanResponse ( struct FServerResult* HostResponse );
	void UpdateOnlineStatus ( );
	void StartLanSearch ( );
	void UpdateCustomMatchSettings ( );
	void StartSearch ( );
	void CancelSearch ( );
	void SetRegionSelection ( int Row, unsigned long bSelected );
	void HandleRegionsSynced ( class UGFxData_Regions_TA* RegionsData, TArray< struct FString >* ArrayInitializer_FE00813E45C82B7EA91EFABBFC839F0A, struct FGFxRegion* StructInitializer_70957A6D47CB8A17EBB1E88B01849B85 );
	void SetPublic ( unsigned long bValue );
	void SetPassword ( struct FString InPassword );
	void SetServerName ( struct FString InServerName );
	void SetSelectedMaxPlayerCount ( int MaxPlayerCount );
	bool HasNoPartyMemberError ( );
	struct FString GetOnlineStatusError ( );
	void SetCustomMatchSettings ( struct FCustomMatchSettings* InSettings );
	struct FCustomMatchSettings GetCustomMatchSettings ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_PrivateMatch_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Privileges_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_Privileges_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bCheckingPrivileges : 1;                          		// 0x0054 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71511 ];

		return pClassPointer;
	};

	void HandlePrivilegeCheck ( class UPrivilegeCheck_X* PrivilegeCheck );
	void PrivilegeCheckFail ( );
	void PrivilegeCheckSuccess ( );
	void TryToUseUGC ( );
	void TryToUsePsyNet ( );
	void TryToPlayOnline ( );
	void TryToViewLeaderboards ( );
	void TryToBrowseInternet ( );
	void UpdateCheckingPrivileges ( );
	void HandlePrivilegesCheck ( class UOnlineGamePrivileges_X* Privileges );
	void eventOnShellSet ( );
};

UClass* UGFxData_Privileges_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_ProductAttribute_TA : public UGFxDataSingleton_X
{
public:
	class UClass*                                      AttributeClass;                                   		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UIProductAttributeProvider_TA*               AttributeProvider;                                		// 0x0058 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x005C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71621 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_TA* Attribute );
	void Init ( class UIProductAttributeProvider_TA* InProvider );
};

UClass* UGFxData_ProductAttribute_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_Products_TA__SlotContainsNewProducts
// 0x0004 (0x0040 - 0x003C)
class U__GFxData_Products_TA__SlotContainsNewProducts : public UObject
{
public:
	int                                                SlotIndex;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71692 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UProduct_TA* P );
};

UClass* U__GFxData_Products_TA__SlotContainsNewProducts::pClassPointer = NULL;

// Class TAGame.__GFxData_Products_TA__HasNewOnlineProducts
// 0x0004 (0x0040 - 0x003C)
class U__GFxData_Products_TA__HasNewOnlineProducts : public UObject
{
public:
	class USaveData_TA*                                SaveData;                                         		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71700 ];

		return pClassPointer;
	};

	bool LambdaCallback ( );
};

UClass* U__GFxData_Products_TA__HasNewOnlineProducts::pClassPointer = NULL;

// Class TAGame.__GFxData_Products_TA__InstanceAttributes
// 0x0008 (0x0044 - 0x003C)
class U__GFxData_Products_TA__InstanceAttributes : public UObject
{
public:
	class UIProductAttributeProvider_TA*               AttributeProvider;                                		// 0x003C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71731 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UGFxData_ProductAttribute_TA* GFxAttribute );
};

UClass* U__GFxData_Products_TA__InstanceAttributes::pClassPointer = NULL;

// Class TAGame.IProductAttributeProvider_TA
// 0x0000 (0x003C - 0x003C)
class UIProductAttributeProvider_TA : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71734 ];

		return pClassPointer;
	};

	class UProductAttribute_TA* GetAttribute ( class UClass* AttributeClass );
	TArray< class UProductAttribute_TA* > GetAttributes ( );
};

UClass* UIProductAttributeProvider_TA::pClassPointer = NULL;

// Class TAGame.GFxProductAttributeMap_TA
// 0x000C (0x0048 - 0x003C)
class UGFxProductAttributeMap_TA : public UObject
{
public:
	TArray< class UClass* >                            GFxClasses;                                       		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71741 ];

		return pClassPointer;
	};

	bool __GFxProductAttributeMap_TA__MapAttributes ( class UClass* GFxAttribute );
	class UClass* __GFxProductAttributeMap_TA__MapAttributes1 ( class UClass* Attribute );
	class UClass* MapAttribute ( class UClass* AttributeClass );
	TArray< class UClass* > MapAttributes ( TArray< class UClass* >* Attributes, TArray< class UClass* >* MapLocal_AD1EF501472CFE2DB7F98F8D1A550255, TArray< class UClass* >* FilterLocal_318CAD934086AB0C02B209BECEB1141B );
};

UClass* UGFxProductAttributeMap_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_Products_TA__UpdateProductData
// 0x0004 (0x0040 - 0x003C)
class U__GFxData_Products_TA__UpdateProductData : public UObject
{
public:
	class UProduct_TA*                                 Product;                                          		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71759 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UProduct_TA* P );
};

UClass* U__GFxData_Products_TA__UpdateProductData::pClassPointer = NULL;

// Class TAGame.ProductAttribute_LevelSettings_TA
// 0x000C (0x0060 - 0x0054)
class UProductAttribute_LevelSettings_TA : public UProductAttribute_TA
{
public:
	TArray< struct FProductLevelData >                 Levels;                                           		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71790 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_LevelSettings_TA::pClassPointer = NULL;

// Class TAGame.MtxConfig_TA
// 0x0004 (0x0050 - 0x004C)
class UMtxConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bAllowMicroTransactions : 1;                      		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowKeyTrades : 1;                              		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71811 ];

		return pClassPointer;
	};

};

UClass* UMtxConfig_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_TA
// 0x0030 (0x006C - 0x003C)
class UProductStat_TA : public UObject
{
public:
	struct FString                                     Label;                                            		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class APRI_TA*                                     PRI;                                              		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ProductID;                                        		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     Car;                                              		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Value;                                            		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71814 ];

		return pClassPointer;
	};

	struct FString GetDistanceString ( class APlayerControllerBase_TA* ForPC, int Meters );
	struct FString GetTimeString ( int Seconds );
	struct FString GetDisplayValue ( class APlayerControllerBase_TA* ForPC, int StatValue );
	struct FString GetDescription ( );
	struct FString GetLabel ( );
	void AddStatValue ( int Amount );
	void SetCar ( class ACar_TA* InCar );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	void HandleCarDestroyed ( class APawn_X* P );
	void HandleCarRefSet ( class APRI_TA* InPRI );
	void HandleGameEventChanged ( class APRI_TA* InPRI );
	void ShutDown ( );
	void OnInit ( );
	void Init ( class APRI_TA* InPRI, int InProductID );
};

UClass* UProductStat_TA::pClassPointer = NULL;

// Class TAGame.__GFxProductAttributeMap_TA__MapAttribute
// 0x0004 (0x0040 - 0x003C)
class U__GFxProductAttributeMap_TA__MapAttribute : public UObject
{
public:
	class UClass*                                      AttributeClass;                                   		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71917 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UClass* GFxClass );
};

UClass* U__GFxProductAttributeMap_TA__MapAttribute::pClassPointer = NULL;

// Class TAGame.GFxData_Replay_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_Replay_TA : public UGFxDataRow_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71932 ];

		return pClassPointer;
	};

	void SetReplay ( class UReplay_TA* InReplay );
};

UClass* UGFxData_Replay_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ReplayManager_TA
// 0x0034 (0x0088 - 0x0054)
class UGFxData_ReplayManager_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     ReplaySaveID;                                     		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ReplaySaveError;                                  		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< class UGFxData_Replay_TA* >                ReplayData;                                       		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PendingSaveName;                                  		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71936 ];

		return pClassPointer;
	};

	void PrintReplays ( );
	void HandleReplayImported ( class UReplayManager_TA* Manager, class UReplay_TA* InReplay, class UError* Error );
	void RenameReplay ( struct FString Id, struct FString NewReplayName );
	void DeleteReplay ( struct FString Id );
	void StartReplay ( struct FString Map, struct FString Filename );
	void HandleReplayHeaderLoaded ( class UReplayManager_TA* Manager, class UReplay_TA* Replay, class UError* Error );
	void StartReplayID ( struct FString Id );
	int GetReplayIndexFromID ( struct FString Id );
	void StartReplayIndex ( int Index );
	void OnReplaysLoaded ( );
	void HandleHeadersLoaded ( class UReplayManager_TA* Manager, TArray< struct FReplayHeaderLoadResult > Headers );
	void MarkReplayEditorOpened ( );
	void LoadReplays ( );
	void HandleReplayExported ( class UReplayManager_TA* Manager, struct FString Id, class UError* Error );
	class AReplayDirector_TA* GetReplayDirector ( );
	bool CanSaveReplay ( class UReplay_TA* Replay );
	void SaveReplay ( struct FString SaveName );
	bool ShouldAutoSaveReplay ( );
};

UClass* UGFxData_ReplayManager_TA::pClassPointer = NULL;

// Class TAGame.GFxModal_Processing_TA
// 0x0000 (0x0084 - 0x0084)
class UGFxModal_Processing_TA : public UGFxModal_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71954 ];

		return pClassPointer;
	};

	class UGFxModal_X* CreateAndBind ( class UGFxShell_TA* Shell, class UAsyncTask* Task );
	class UGFxModal_X* CreateAndBindNoCancel ( class UGFxShell_TA* Shell, class UAsyncTask* Task );
};

UClass* UGFxModal_Processing_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ReplayViewer_TA
// 0x0064 (0x00B8 - 0x0054)
class UGFxData_ReplayViewer_TA : public UGFxDataSingleton_X
{
public:
	int                                                CurrentFrame;                                     		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FLocalizedCameraMode >              CameraModes;                                      		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FName                                       DefaultCameraMode;                                		// 0x0064 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       CameraMode;                                       		// 0x006C (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     FocusActorString;                                 		// 0x0074 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     LastFocusActorString;                             		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              Slomo;                                            		// 0x008C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              FOV;                                              		// 0x0090 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bShowReplayHUD : 1;                               		// 0x0094 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bShowMatchInfoHUD : 1;                            		// 0x0094 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bShowPlayerNames : 1;                             		// 0x0094 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bPausedForScrub : 1;                              		// 0x0094 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bChangesMade : 1;                                 		// 0x0094 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	int                                                ViewRoll;                                         		// 0x0098 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UReplay_TA*                                  Replay;                                           		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingSkipToFrame;                               		// 0x00A0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventHudVisibilityUpdated__Delegate;            		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72018 ];

		return pClassPointer;
	};

	void HandleCameraTargetChanged ( class ACamera_TA* InCamera, class AActor* InTarget );
	void HandleReplayExported ( class UReplayManager_TA* Manager, struct FString Id, class UError* Error );
	void SaveReplayAndExit ( );
	void OnToggleControls ( );
	void SetPausedForScrub ( unsigned long bPaused );
	void OnTimelineScrub ( );
	void OpenHUDMenu ( int KeyCode, int MouseButton );
	void OpenTimelineMenu ( int KeyCode, int MouseButton );
	void OpenCameraMenu ( int KeyCode, int MouseButton );
	void OpenFocusMenu ( int KeyCode, int MouseButton );
	void OpenSpeedMenu ( int KeyCode, int MouseButton );
	void RemoveKeyframe ( int KeyframeIndex );
	void AddKeyframe ( struct FName Type );
	void SetFOV ( float InFOV );
	void SetShowPlayerNames ( unsigned long bVisible );
	void SetShowMatchInfoHUD ( unsigned long bVisible );
	void SetShowReplayHUD ( unsigned long bVisible );
	void SetSlomo ( float NewSlomo );
	void TimerSkipToFrame ( );
	void AdvanceTime ( float DeltaTime );
	void AdvanceToFrame ( int frame );
	void SetCameraMode ( struct FName Mode );
	void SetFocusActorString ( struct FString InFocusActorString );
	void RefreshDisabledModes ( );
	void InitCameraModes ( );
	void UpdateReplayData ( );
	void SetReplay ( class UReplay_TA* InReplay );
	void EventHudVisibilityUpdated ( );
};

UClass* UGFxData_ReplayViewer_TA::pClassPointer = NULL;

// Class TAGame.GFxData_SaveData_TA
// 0x0018 (0x006C - 0x0054)
class UGFxData_SaveData_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FUISavedKeyValue >                  GlobalValues;                                     		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FUISavedKeyValue >                  ProfileValues;                                    		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72110 ];

		return pClassPointer;
	};

	void SaveProfileValue ( struct FName Key, struct FString Value );
	bool HasProfileValue ( struct FName Key );
	struct FString GetProfileValue ( struct FName Key );
	void SaveGlobalValue ( struct FName Key, struct FString Value );
	bool HasGlobalValue ( struct FName Key );
	struct FString GetGlobalValue ( struct FName Key );
	void OnShellSet ( );
};

UClass* UGFxData_SaveData_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Season_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_Season_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FSeasonTeamRank >                   TeamRankings;                                     		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FSeasonMatch >                      WeekMatches;                                      		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FSeasonWeek >                       Weeks;                                            		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProfile_TA*                                 Profile;                                          		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USeason_TA*                                  Season;                                           		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72143 ];

		return pClassPointer;
	};

	int SortWeekMatch ( struct FSeasonMatch A, struct FSeasonMatch B );
	void SetDifficulty ( int NewDifficulty );
	void SetBots ( struct FString BotID0, struct FString BotName0, struct FString BotID1, struct FString BotName1, struct FString BotID2, struct FString BotName2 );
	void LoadWeekMatches ( int Week, TArray< struct FSeasonMatch >* SortLocal_098BDB674DC218681417C4A4D882B840 );
	void CalcCurrentWeekRankings ( );
	void UpdateSeasonWeeks ( );
	void HandleWeekSimulated ( class USeason_TA* InSeason );
	void SetSeason ( class USeason_TA* InSeason );
	void LoadLatestSeason ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Season_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_DisplayLabelSlot_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_DisplayLabelSlot_TA : public UProductAttribute_TA
{
public:
	class UProductSlot_TA*                             DisplayLabelSlot;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72219 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_DisplayLabelSlot_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Schematic_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Schematic_TA : public UProductAttribute_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72223 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_Schematic_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Key_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_Key_TA : public UProductAttribute_TA
{
public:
	unsigned long                                      bMagicKey : 1;                                    		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72225 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_Key_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Container_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_Container_TA : public UProductAttribute_TA
{
public:
	unsigned long                                      bUnlocked : 1;                                    		// 0x0054 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72227 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_Container_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_Trademark_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_Trademark_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      Glyph;                                            		// 0x0054 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72235 ];

		return pClassPointer;
	};

	struct FString GetGlyph ( );
};

UClass* UProductAttribute_Trademark_TA::pClassPointer = NULL;

// Class TAGame.GFxData_SeasonMode_TA
// 0x003C (0x0090 - 0x0054)
class UGFxData_SeasonMode_TA : public UGFxDataSingleton_X
{
public:
	TArray< class UProduct_TA* >                       PlayerBots;                                       		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumSeasons;                                       		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FGFxLogoData >                      Logos;                                            		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxBotData >                       Bots;                                             		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProductAsset_Logo_TA*                       TeamLogo;                                         		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCarPreviewSet_TA*                           PreviewSet;                                       		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseSeasonColors : 1;                             		// 0x0088 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                CurrentTeamSize;                                  		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72240 ];

		return pClassPointer;
	};

	bool InMainMenu ( );
	void Save ( );
	void DeleteSeason ( );
	void CreateSeason ( int TeamSize, int Difficulty, int NumRegularWeeks, int NumPlayoffsTeams, struct FString TeamName, struct FName TeamLogoAsset, struct FString BotID0, struct FString BotID1, struct FString BotID2 );
	void ClearBotPreviewActors ( );
	void TeamSizeChanged ( int TeamSize );
	void SetBot ( int BotIndex, struct FString BotID );
	void UpdateColors ( class ACarPreviewActor_TA* PreviewActor );
	void RestoreStadiumColors ( );
	void SetLogo ( struct FName LogoAsset );
	struct FString GetBotNameFromID ( struct FString Id );
	void BuildBotData ( );
	void BuildLogoData ( );
	void HandlePreviewActorsChanged ( class UCarPreviewSet_TA* G );
	void HandleSetProfile ( class ACarPreviewActor_TA* Car );
	void eventOnShellSet ( );
};

UClass* UGFxData_SeasonMode_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ServerBrowser_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_ServerBrowser_TA : public UGFxDataSingleton_X
{
public:
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ServerName;                                       		// 0x0058 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Password;                                         		// 0x0064 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FServerResult >                     Results;                                          		// 0x0070 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UGFxModal_X*                                 ProcessingModal;                                  		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                JoiningIndex;                                     		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72332 ];

		return pClassPointer;
	};

	void JoinServer ( int Index, struct FJoinMatchSettings JoinSettings );
	void HandleLanSearchComplete ( unsigned long bCancelled );
	void HandleLanResponse ( struct FServerResult* HostResponse );
	void HandleSearchComplete ( TArray< struct FServerResult >* InResults );
	void HandleSearchError ( struct FString msg );
	void CancelJoin ( );
	void CancelSearch ( );
	void StartLanSearch ( );
	void StartSearch ( );
	void SetPassword ( struct FString InPassword );
	void SetServerName ( struct FString InServerName );
	void eventOnShellSet ( );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxData_ServerBrowser_TA::pClassPointer = NULL;

// Class TAGame.GFxData_UserSetting_TA
// 0x00D8 (0x012C - 0x0054)
class UGFxData_UserSetting_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      Type;                                             		// 0x0054 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       Group;                                            		// 0x0058 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FName                                       Id;                                               		// 0x0060 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     Label;                                            		// 0x0068 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Description;                                      		// 0x0074 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Values;                                           		// 0x0080 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FString >                           ValuesArray;                                      		// 0x008C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     Labels;                                           		// 0x0098 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Value;                                            		// 0x00A4 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bUserSetting : 1;                                 		// 0x00B0 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bEnabled : 1;                                     		// 0x00B0 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	struct FString                                     DefaultValue;                                     		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FProfileSliderLimits                        Limits;                                           		// 0x00C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnListValueGet__Delegate;                       		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnListValueSet__Delegate;                       		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnBooleanValueGet__Delegate;                    		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnBooleanValueSet__Delegate;                    		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0100 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnScalarValueGet__Delegate;                     		// 0x010C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0110 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnScalarValueSet__Delegate;                     		// 0x011C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x0120 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72386 ];

		return pClassPointer;
	};

	void Clear ( );
	void SetScalarValue ( struct FString InValue );
	void SetBooleanValue ( struct FString InValue );
	void SetListValue ( struct FString InValue );
	void SetValue ( struct FString InValue );
	class UGFxData_UserSetting_TA* AddEnumValue ( int InValue, struct FString InLabel );
	class UGFxData_UserSetting_TA* AddLocalizedValue ( struct FString InValue, struct FString InLabel );
	class UGFxData_UserSetting_TA* AddValue ( struct FString InValue, struct FString Key );
	void SetScalarLimits ( struct FProfileSliderLimits InLimits );
	void Init ( unsigned char inType, struct FName InGroup, struct FName InID, struct FString InDefaultValue, unsigned long bInUserSetting, unsigned long bInEnabled );
	void OnScalarValueSet ( class UGFxData_UserSetting_TA* Setting, float InValue );
	float OnScalarValueGet ( class UGFxData_UserSetting_TA* Setting );
	void OnBooleanValueSet ( class UGFxData_UserSetting_TA* Setting, unsigned long InValue );
	bool OnBooleanValueGet ( class UGFxData_UserSetting_TA* Setting );
	void OnListValueSet ( class UGFxData_UserSetting_TA* Setting, struct FString InValue );
	struct FString OnListValueGet ( class UGFxData_UserSetting_TA* Setting );
};

UClass* UGFxData_UserSetting_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Settings_TA
// 0x00AC (0x0100 - 0x0054)
class UGFxData_Settings_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FIntPoint >                         SupportedResolutions;                             		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FProfileSliderLimits                        MouseSensitivityLimits;                           		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        ControllerDeadzoneLimits;                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        MouseDeadZoneLimits;                              		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        KeyboardAxisBlendLimits;                          		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        SteeringSensitivityLimits;                        		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        AirControlSensitivityLimits;                      		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FProfileSliderLimits                        DodgeInputThresholdLimits;                        		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LoadingString;                                    		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class UGFxData_UserSetting_TA* >           UserSettings;                                     		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     OldResolution;                                    		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     OldWindowMode;                                    		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      OldVSync : 1;                                     		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSettingRenderDetail : 1;                         		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USaveData_TA*                                SaveData;                                         		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGameViewportClient_X*                       Viewport;                                         		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UUserSettingObserver_TA*                     SettingObserver;                                  		// 0x00F4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundSettingsSave_TA*                       SoundSave;                                        		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundSettingsControllerSave_TA*             SoundSaveController;                              		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72459 ];

		return pClassPointer;
	};

	void TriggerSettingChangedEvent ( struct FName SettingName );
	void SetMouseXDeadZoneAir ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMouseXDeadZoneAir ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMouseYDeadZoneAir ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMouseYDeadZoneAir ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMouseXDeadZone ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMouseXDeadZone ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMouseYDeadZone ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMouseYDeadZone ( class UGFxData_UserSetting_TA* UserSetting );
	void SetDodgeInputThreshold ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetDodgeInputThreshold ( class UGFxData_UserSetting_TA* UserSetting );
	void SetKeyboardAxisBlendTime ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetKeyboardAxisBlendTime ( class UGFxData_UserSetting_TA* UserSetting );
	void SetControllerDeadzone ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetControllerDeadzone ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMouseSensitivity ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMouseSensitivity ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAirControlSensitivity ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAirControlSensitivity ( class UGFxData_UserSetting_TA* UserSetting );
	void SetSteeringSensitivity ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetSteeringSensitivity ( class UGFxData_UserSetting_TA* UserSetting );
	void SetForceFeedback ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetForceFeedback ( class UGFxData_UserSetting_TA* UserSetting );
	void SetBallTrajectoryEnabled ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetBallTrajectoryEnabled ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAimAssistEnabled ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetAimAssistEnabled ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAimAssistLevelOverride ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetAimAssistLevelOverride ( class UGFxData_UserSetting_TA* UserSetting );
	void SetControlPreset ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetControlPreset ( class UGFxData_UserSetting_TA* UserSetting );
	void AddToControlPresets ( struct FName PresetName, TArray< struct FBindingPreset >* Presets );
	TArray< struct FBindingPreset > GetControlPresets ( );
	void InitControlsSettings ( );
	bool IsAutoCamSpectator ( );
	bool IsSpectator ( );
	void SetDefaults ( struct FName Group );
	void SetCrossPlay ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetCrossPlay ( class UGFxData_UserSetting_TA* UserSetting );
	void SetDisableContainerNotifactions ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetDisableContainerNotifications ( class UGFxData_UserSetting_TA* UserSetting );
	void SetDisableDivisionsEvent ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetDisableDivisionsEvent ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMuteStatEvents ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetMuteStatEvents ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMetric ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetMetric ( class UGFxData_UserSetting_TA* UserSetting );
	void SetTimeFormat ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetTimeFormat ( class UGFxData_UserSetting_TA* UserSetting );
	void SetBallIndicator ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetBallIndicator ( class UGFxData_UserSetting_TA* UserSetting );
	void UpdateEnableSavingValue ( );
	void HandleSaveDataPostEnableComplete ( class USaveGameManager_TA* SaveManager, class USaveData_TA* ForSaveData, class UError* Error );
	void SetEnableSaving ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetEnableSaving ( class UGFxData_UserSetting_TA* UserSetting );
	void SetHorizontalSplitscreen ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetHorizontalSplitscreen ( class UGFxData_UserSetting_TA* UserSetting );
	void SetKeySelection ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetKeySelection ( class UGFxData_UserSetting_TA* UserSetting );
	void SetChatFilter ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetChatFilter ( class UGFxData_UserSetting_TA* UserSetting );
	void SetVoiceFilter ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetVoiceFilter ( class UGFxData_UserSetting_TA* UserSetting );
	void InitGameplaySettings ( );
	bool ShowVoiceChat ( );
	bool GetFocusOnGoals ( class UGFxData_UserSetting_TA* UserSetting );
	void SetFocusOnGoals ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetUseReplayCamera ( class UGFxData_UserSetting_TA* UserSetting );
	void SetUseReplayCamera ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	float GetAutoCamAerialPrediction ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamAerialPrediction ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamPlayerFocusBlendSpeed ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamPlayerFocusBlendSpeed ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamAerialDistance ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamAerialDistance ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamRotateSpeed ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamRotateSpeed ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamMoveSpeedZ ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamMoveSpeedZ ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamMoveSpeed ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamMoveSpeed ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamZ ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamZ ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamDistance ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAutoCamDistance ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	void SetAutoCamFOV ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAutoCamFOV ( class UGFxData_UserSetting_TA* UserSetting );
	void SetBallcamHold ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetBallcamHold ( class UGFxData_UserSetting_TA* UserSetting );
	void SetBallcamIndicator ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetBallcamIndicator ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraType ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetCameraType ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraTransitionSpeed ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraTransitionSpeed ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraSwivelSpeed ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraSwivelSpeed ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraStiffness ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraStiffness ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraDistance ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraDistance ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraAngle ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraAngle ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraHeight ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraHeight ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraFOV ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetCameraFOV ( class UGFxData_UserSetting_TA* UserSetting );
	void SetCameraShake ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetCameraShake ( class UGFxData_UserSetting_TA* UserSetting );
	void SetLockSpectatorBallCam ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetLockSpectatorBallCam ( class UGFxData_UserSetting_TA* UserSetting );
	void SetInvertSpectatorPitch ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetInvertSpectatorPitch ( class UGFxData_UserSetting_TA* UserSetting );
	void SetInvertSwivelPitch ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetInvertSwivelPitch ( class UGFxData_UserSetting_TA* UserSetting );
	void InitCameraSettings ( );
	void SetPushToTalk ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetPushToTalk ( class UGFxData_UserSetting_TA* UserSetting );
	void SetOutputType ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetOutputType ( class UGFxData_UserSetting_TA* UserSetting );
	void SetControllerSoundMode ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetControllerSoundMode ( class UGFxData_UserSetting_TA* UserSetting );
	void SetControllerVolume ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetControllerVolume ( class UGFxData_UserSetting_TA* UserSetting );
	void SetVoiceVolume ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetVoiceVolume ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAmbientVolume ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetAmbientVolume ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMusicVolume ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMusicVolume ( class UGFxData_UserSetting_TA* UserSetting );
	void SetGameVolume ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetGameVolume ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMasterVolume ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMasterVolume ( class UGFxData_UserSetting_TA* UserSetting );
	void InitAudioSettings ( );
	void SetUseTranslucentArenaShadersAdvancedOption ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	void SetUseTranslucentArenaShaders ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetUseTranslucentArenaShaders ( class UGFxData_UserSetting_TA* UserSetting );
	void SetUIScale ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetUIScale ( class UGFxData_UserSetting_TA* UserSetting );
	void SetSafeZone ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetSafeZone ( class UGFxData_UserSetting_TA* UserSetting );
	void SetMotionBlur ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetMotionBlur ( class UGFxData_UserSetting_TA* UserSetting );
	void SetDynamicShadows ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetDynamicShadows ( class UGFxData_UserSetting_TA* UserSetting );
	void SetLensFlares ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetLensFlares ( class UGFxData_UserSetting_TA* UserSetting );
	void SetLightShaftsAdvancedOption ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	void SetLightShafts ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetLightShafts ( class UGFxData_UserSetting_TA* UserSetting );
	void SetBloom ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetBloom ( class UGFxData_UserSetting_TA* UserSetting );
	void SetDepthOfField ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetDepthOfField ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAmbientOcclusion ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetAmbientOcclusion ( class UGFxData_UserSetting_TA* UserSetting );
	void SetHighQualityShaders ( class UGFxData_UserSetting_TA* UserSetting, unsigned long Value );
	bool GetHighQualityShaders ( class UGFxData_UserSetting_TA* UserSetting );
	void SetWorldDetail ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetWorldDetail ( class UGFxData_UserSetting_TA* UserSetting );
	void SetTextureDetail ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	void SetRenderDetail ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	void SaveVideoValueString ( class UGFxData_UserSetting_TA* UserSetting );
	struct FString GetSavedVideoValueString ( class UGFxData_UserSetting_TA* UserSetting );
	void SetRenderQuality ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetRenderQuality ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAntiAlias ( class UGFxData_UserSetting_TA* UserSetting, struct FString Value );
	struct FString GetAntiAlias ( class UGFxData_UserSetting_TA* UserSetting );
	void OnAdvancedVideoOptionChanged ( );
	void InitVideoSettings ( );
	void SaveViewportSettings ( );
	void RevertViewportSettings ( );
	void SetViewportSettings ( struct FString ResolutionValue, struct FString WindowModeValue, unsigned long VSyncValue );
	void ApplyViewportSettings ( struct FString ResolutionValue, struct FString WindowModeValue, unsigned long VSyncValue );
	void SetMaxFPS ( class UGFxData_UserSetting_TA* UserSetting, float Value );
	float GetMaxFPS ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAlwaysShowNameplates ( class UGFxData_UserSetting_TA* UserSetting, unsigned long bValue );
	bool GetAlwaysShowNameplates ( class UGFxData_UserSetting_TA* UserSetting );
	void SetAlternateNameplates ( class UGFxData_UserSetting_TA* UserSetting, unsigned long bValue );
	bool GetAlternateNameplates ( class UGFxData_UserSetting_TA* UserSetting );
	void SetColorBlind ( class UGFxData_UserSetting_TA* UserSetting, unsigned long bValue );
	bool GetColorBlind ( class UGFxData_UserSetting_TA* UserSetting );
	void SetWeatherFX ( class UGFxData_UserSetting_TA* UserSetting, unsigned long bValue );
	bool GetWeatherFX ( class UGFxData_UserSetting_TA* UserSetting );
	void SetVSync ( class UGFxData_UserSetting_TA* UserSetting, unsigned long bValue );
	bool GetVSync ( class UGFxData_UserSetting_TA* UserSetting );
	struct FString GetWindowMode ( class UGFxData_UserSetting_TA* UserSetting );
	struct FString GetResolution ( class UGFxData_UserSetting_TA* UserSetting );
	void InitViewportSettings ( );
	int SortResolutions ( struct FIntPoint A, struct FIntPoint B );
	int GetGreatestCommonDenominator ( int X, int Y );
	void SetScalarValue ( struct FName Id, float Value );
	void SetBooleanValue ( struct FName Id, unsigned long Value );
	void SetListValue ( struct FName Id, struct FString Value );
	struct FString EnumToString ( int Value );
	struct FString BoolToString ( unsigned long Value );
	bool StringToBool ( struct FString Value );
	void DoSave ( );
	void Save ( );
	class UGFxData_UserSetting_TA* CreateScalarUserSetting ( struct FName Group, struct FName Id, float DefaultValue, struct FScriptDelegate GetFunc, struct FScriptDelegate SetFunc, struct FProfileSliderLimits Limits, unsigned long bUserSetting, unsigned long bEnabled );
	class UGFxData_UserSetting_TA* CreateBooleanUserSetting ( struct FName Group, struct FName Id, unsigned long DefaultValue, struct FScriptDelegate GetFunc, struct FScriptDelegate SetFunc, unsigned long bUserSetting, unsigned long bEnabled );
	class UGFxData_UserSetting_TA* CreateListUserSetting ( struct FName Group, struct FName Id, struct FString DefaultValue, struct FScriptDelegate GetFunc, struct FScriptDelegate SetFunc, unsigned long bUserSetting, unsigned long bEnabled );
	class UGFxData_UserSetting_TA* GetUserSetting ( struct FName Id );
	int GetUserSettingIndex ( struct FName Id );
	void LoadUserSettings ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Settings_TA::pClassPointer = NULL;

// Class TAGame.UserSettingObserver_TA
// 0x0008 (0x0050 - 0x0048)
class UUserSettingObserver_TA : public UComponent
{
public:
	class UUserSettingObserverEventCache_TA*           Cache;                                            		// 0x0048 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUserSettingMetrics_TA*                      Metrics;                                          		// 0x004C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72476 ];

		return pClassPointer;
	};

	void __UserSettingObserver_TA__HandleCacheTimeout ( struct FSettingEvent E );
	void HandleScalarValueSet ( class UGFxData_UserSetting_TA* Setting, float Value );
	void HandleBooleanValueSet ( class UGFxData_UserSetting_TA* Setting, unsigned long Value );
	void HandleListValueSet ( class UGFxData_UserSetting_TA* Setting, struct FString Value );
	void HandleCacheTimeout ( class UUserSettingObserverEventCache_TA* InCache );
	void RecordSetting ( class UGFxData_UserSetting_TA* Setting );
	void AddListener ( class UGFxData_UserSetting_TA* Setting );
	void AddListeners ( TArray< class UGFxData_UserSetting_TA* >* UserSettings );
	void Init ( );
};

UClass* UUserSettingObserver_TA::pClassPointer = NULL;

// Class TAGame.SoundSettingsSave_TA
// 0x0078 (0x00E4 - 0x006C)
class USoundSettingsSave_TA : public USaveObject_TA
{
public:
	float                                              MasterVolume;                                     		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              SoundVolume;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              MusicVolume;                                      		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              AmbientVolume;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              VoiceVolume;                                      		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned char                                      OutputType;                                       		// 0x0080 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __MasterVolume__ChangeNotify;                     		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SoundVolume__ChangeNotify;                      		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0098 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __MusicVolume__ChangeNotify;                      		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00A8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __AmbientVolume__ChangeNotify;                    		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __VoiceVolume__ChangeNotify;                      		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x00C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OutputType__ChangeNotify;                       		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x00D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72481 ];

		return pClassPointer;
	};

	void __OutputType__ChangeNotifyFunc ( );
	void __VoiceVolume__ChangeNotifyFunc ( );
	void __AmbientVolume__ChangeNotifyFunc ( );
	void __MusicVolume__ChangeNotifyFunc ( );
	void __SoundVolume__ChangeNotifyFunc ( );
	void __MasterVolume__ChangeNotifyFunc ( );
	void OnLoad ( );
};

UClass* USoundSettingsSave_TA::pClassPointer = NULL;

// Class TAGame.SoundSettingsControllerSave_TA
// 0x0028 (0x0094 - 0x006C)
class USoundSettingsControllerSave_TA : public USaveObject_TA
{
public:
	float                                              Volume;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      SoundMode;                                        		// 0x0070 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __Volume__ChangeNotify;                           		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0078 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SoundMode__ChangeNotify;                        		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72483 ];

		return pClassPointer;
	};

	void __SoundMode__ChangeNotifyFunc ( );
	void __Volume__ChangeNotifyFunc ( );
	void OnLoad ( );
};

UClass* USoundSettingsControllerSave_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_WeatherToggled_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_WeatherToggled_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72592 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_WeatherToggled_TA::pClassPointer = NULL;

// Class TAGame.PostProcessManager_TA
// 0x0005 (0x0095 - 0x0090)
class UPostProcessManager_TA : public UPostProcessManager_X
{
public:
	float                                              BumpCarFXDuration;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PostProcessAAType;                                		// 0x0094 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72618 ];

		return pClassPointer;
	};

	void ClearBumpedCarFX ( );
	void HandleBumpedCar ( class ACar_TA* InCar, class ACar_TA* HitCar );
	void OnCarChanged ( class ACar_TA* OldCar, class ACar_TA* NewCar );
	void HandlePawnChange ( class APlayerController_X* PC, class APawn* OldPawn, class APawn* NewPawn );
	void ApplyPostProcessTypeOverride ( );
	void SetAAType ( unsigned char NewType );
	void Init ( class APlayerController_X* NewOwner );
};

UClass* UPostProcessManager_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_UserSettingChanged_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_UserSettingChanged_TA : public USequenceEvent
{
public:
	struct FName                                       SettingName;                                      		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73007 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_UserSettingChanged_TA::pClassPointer = NULL;

// Class TAGame.UserSettingMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UUserSettingMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73215 ];

		return pClassPointer;
	};

	void Changed ( struct FUniqueNetId PlayerID, struct FName Id, struct FString Value );
};

UClass* UUserSettingMetrics_TA::pClassPointer = NULL;

// Class TAGame.UserSettingObserverEventCache_TA
// 0x0020 (0x0068 - 0x0048)
class UUserSettingObserverEventCache_TA : public UComponent
{
public:
	float                                              CacheTimeout;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSettingEvent >                     Events;                                           		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventCacheTimeout__Delegate;                    		// 0x0058 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x005C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73217 ];

		return pClassPointer;
	};

	void __UserSettingObserverEventCache_TA__RecordSetting ( );
	void Reset ( );
	void RecordSetting ( struct FUniqueNetId PlayerID, struct FName Id, struct FString Value );
	void EventCacheTimeout ( class UUserSettingObserverEventCache_TA* Cache );
};

UClass* UUserSettingObserverEventCache_TA::pClassPointer = NULL;

// Class TAGame.__UserSettingObserverEventCache_TA__RecordSetting
// 0x0050 (0x008C - 0x003C)
class U__UserSettingObserverEventCache_TA__RecordSetting : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x003C (0x0048) [0x0000000000000000]              
	struct FName                                       Id;                                               		// 0x0084 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73247 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FSettingEvent E );
};

UClass* U__UserSettingObserverEventCache_TA__RecordSetting::pClassPointer = NULL;

// Class TAGame.GFxData_SplitscreenMatch_TA
// 0x0002 (0x0160 - 0x015E)
class UGFxData_SplitscreenMatch_TA : public UGFxData_PrivateMatch_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73261 ];

		return pClassPointer;
	};

	void StartSearch ( );
};

UClass* UGFxData_SplitscreenMatch_TA::pClassPointer = NULL;

// Class TAGame.GFxData_StartMenu_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_StartMenu_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SigningInText;                                    		// 0x005C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxModal_X*                                 SignInModal;                                      		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ClickedControllerIndex;                           		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventTitleScreenClicked__Delegate;              		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73265 ];

		return pClassPointer;
	};

	void OnRequiresLicenseAgreement ( int ControllerIndex );
	void HandleTrialUpdated ( class UOnlineGameTrial_X* InTrial );
	void SignInTimeout ( );
	void ShowWaitingForSignInModal ( );
	void ShowSignInRequiredModal ( );
	bool NeedsLoginForTrial ( class ULocalPlayer_TA* LocalPlayer, class USaveData_TA* SaveData );
	bool MainMenuDisabled ( );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error );
	void OnPrimaryPlayerSet ( int ControllerIndex );
	class ULocalPlayer_TA* GetPrimaryLocalPlayer ( );
	void OnContinueWithNoUser ( class UGFxModal_X* Modal );
	void OnShowAccountPicker ( class UGFxModal_X* Modal );
	void HandleLoginCancelled ( );
	void HandlePrimaryPlayerLoginFailed ( unsigned char PlayerNum, unsigned char ErrorCode );
	void HandlePrimaryPlayerLoginChange ( unsigned char PlayerNum );
	void ClearPrimaryPlayerLoginDelegates ( unsigned char PlayerNum );
	void ProgressToMainMenu ( int ControllerIndex );
	void OnChoosePlayerName ( );
	void TitleScreenClicked ( int ControllerIndex );
	void OnKonamiCode ( );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
	void EventTitleScreenClicked ( class UGFxData_StartMenu_TA* StartMenu );
};

UClass* UGFxData_StartMenu_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Stats_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_Stats_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxStatData >                      Events;                                           		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProfile_TA*                                 Profile;                                          		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UStatEvent_TA* >                     StatEvents;                                       		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73357 ];

		return pClassPointer;
	};

	void SetGFxStatData ( TArray< struct FStatValue > InStatValues );
	void HandleXPUpdated ( class UProfile_TA* P );
	void BuildStatList ( );
	void LoadSavedStats ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Stats_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Training_TA
// 0x0048 (0x009C - 0x0054)
class UGFxData_Training_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       TrainingType;                                     		// 0x0054 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                CurrentScore;                                     		// 0x005C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                CurrentRound;                                     		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                TotalRounds;                                      		// 0x0064 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     Difficulty;                                       		// 0x0068 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SelectedFreeplayMap;                              		// 0x0074 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bShowBoostMeter : 1;                              		// 0x0080 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	TArray< struct FUseAction >                        UseActions;                                       		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     TutorialTip;                                      		// 0x0090 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73479 ];

		return pClassPointer;
	};

	void SetCurrentPlaylist ( struct FName Playlist );
	void StartTutorialV2 ( struct FString MapName, unsigned long bAutoEntered );
	void PlayV2Tutorial ( unsigned char Type, unsigned long bAutoEntered );
	void PlayTutorial ( unsigned long bAdvanced );
	void PlayFreeplayMap ( struct FString Map );
	void PlayTraining ( struct FString Type, struct FString TrainingDifficulty );
	void HandleBoostMeterChanged ( class AGameEvent_Tutorial_TA* GameEvent );
	struct FString ParseDifficulty ( unsigned char InDifficulty );
	void HandleEditorDataChanged ( class AGameEvent_TrainingEditor_TA* GameEvent );
	void HandleDifficultyUpdated ( class AGameEvent_Tutorial_TA* GameEvent );
	void HandleScoreUpdated ( class AGameEvent_Tutorial_TA* GameEvent );
	void SetTrainingEditorGameEvent ( class AGameEvent_TrainingEditor_TA* InGameEvent );
	void SetTrainingGameEvent ( class AGameEvent_Tutorial_TA* InGameEvent );
	void HandleSaveDataLoaded ( class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error );
	void HandleTutorialTipChanged ( class AGameEvent_Tutorial_TA* GameEvent, struct FString NewTip );
	void HandleUseActionsChanged ( class AGameEvent_Tutorial_TA* GameEvent );
	void HandleTutorialEnded ( class UTutorial_TA* Tutorial );
	void eventOnShellSet ( );
};

UClass* UGFxData_Training_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_GameEditor_TA
// 0x0048 (0x0810 - 0x07C8)
class AGameEvent_GameEditor_TA : public AGameEvent_Soccar_TA
{
public:
	class UClass*                                      SaveDataClass;                                    		// 0x07C8 (0x0004) [0x0000000000000000]              
	class USaveData_GameEditor_TA*                     SaveData;                                         		// 0x07CC (0x0004) [0x0000000000000000]              
	int                                                ActiveRoundNumber;                                		// 0x07D0 (0x0004) [0x0000000000000000]              
	TArray< struct FSpawnArchetypeData >               SpawnableArchetypes;                              		// 0x07D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ADynamicSpawnPointMesh_TA* >         CarSpawnPoints;                                   		// 0x07E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameEditor_Pawn_TA*                         EditorPawnArchetype;                              		// 0x07EC (0x0004) [0x0000000000000000]              
	int                                                MaxRounds;                                        		// 0x07F0 (0x0004) [0x0000000000000000]              
	TArray< struct U_Types_TA_FActorHistory >          UndoHistory;                                      		// 0x07F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                HistoryPosition;                                  		// 0x0800 (0x0004) [0x0000000000000000]              
	int                                                MaxUndoHistory;                                   		// 0x0804 (0x0004) [0x0000000000000000]              
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x0808 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  FXActor;                                          		// 0x080C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73531 ];

		return pClassPointer;
	};

	void HandleTriggerTouched ( class AGameEditor_Trigger_TA* Trigger, class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void RotateActor ( class APlayerController_TA* PC, unsigned long bSnapOrientation );
	void OnPlayerAdded ( class AController* NewPlayer );
	void PrevRound ( );
	void NextRound ( );
	void DecreaseTime ( );
	void IncreaseTime ( );
	void StopEditing ( class APlayerController_TA* PC );
	void StartEditing ( );
	void CycleActor ( class APlayerController_TA* PC );
	void ReleaseGrabbedActor ( class APlayerController_TA* PC );
	void ReleaseRotateActor ( class APlayerController_TA* PC );
	void ToggleRotateActor ( class APlayerController_TA* PC );
	void SetSaveData ( class USaveData_GameEditor_TA* Data );
	void ToggleGrabActor ( class APlayerController_TA* PC );
	void ToggleReleaseActor ( class APlayerController_TA* PC );
	void ReleaseActor ( class APlayerController_TA* PC );
	void GrabActor ( class APlayerController_TA* PC );
	bool CanQueSaveReplay ( );
	bool ShouldUpdateCrosshair ( );
	int GetPlayerTeamNumber ( );
	bool CanAddHistory ( );
	void ToggleEditorRound ( );
	void CommitRedoRound ( );
	void ResetRound ( );
	void Save ( );
	void Redo ( class APlayerController_TA* PC );
	void Undo ( class APlayerController_TA* PC );
	class AActor* FindActorByName ( struct FName actorName );
	bool RestoreFromHistory ( class APlayerController_TA* PC, unsigned char HistoryType, struct U_Types_TA_FActorHistory RestoreHistory );
	unsigned char GetOtherHistoryType ( unsigned char HistoryType );
	void ClampUndoHistory ( );
	bool AddToHistoryArray ( class UInterface_GameEditor_TA* EditorActor, struct U_Types_TA_FActorHistory NewHistory );
	bool HistoriesAreEqual ( class UInterface_GameEditor_TA* EditorActor, struct U_Types_TA_FActorHistory H0, struct U_Types_TA_FActorHistory H1 );
	bool AddUndoHistory ( class UInterface_GameEditor_TA* EditorActor, unsigned char HistoryEditType, unsigned long bClearRedoHistory );
	bool AddHistory ( unsigned char HistoryType, class UInterface_GameEditor_TA* EditorActor, unsigned char HistoryEditType, unsigned long bClearRedoHistory );
	struct U_Types_TA_FActorHistory MakeHistory ( class UInterface_GameEditor_TA* EditorActor, unsigned char HistoryEditType );
	void ClearRedoHistory ( );
	void ClearAllHistory ( );
	class AActor* DeserializeAndSpawn ( struct FString SerializedData, class UClass* ClassType, unsigned char HistoryType );
	bool DestroyActor ( class AActor* A, unsigned char HistoryType );
	bool IsInEditorMode ( );
	void RemoveAllPointsFromScore ( int TeamIndex );
	void RemovePointsFromScore ( int PointsToRemove, int TeamIndex );
	struct FName GetDesiredSoundState ( );
	void DeleteAllExistingActorsBasedOffSpawnList ( );
	int GetSpawnedActorCount ( struct FSpawnArchetypeData ArchetypeData );
	bool RoundContainsASwitch ( );
	void EnableTriggers ( unsigned long bEnable );
	void HideCarSpawnPoints ( unsigned long bHide );
	void ResetSpawnLocations ( );
	void OnSpawnedArchetype ( class AActor* SpawnedActor, unsigned char HistoryType );
	void SpawnArchetype ( class APlayerController_TA* Controller, int ArchetypeIndex );
	struct FSpawnArchetypeData GetSelectedSpawnArchetype ( int Index );
	void IncrementSelectedSpawnArchetypeIndex ( int Direction, int* Index );
	bool CanChangeTeam ( );
	void ResetBallsToDefaultPosition ( );
	void FireBalls ( );
	void Interact ( );
	bool ShouldResetBalls ( );
	void OnVehicleSetup ( class ACar_TA* Car );
	void HandleVehicleSetup ( class ACar_TA* Car );
	void OnPlayerRestarted ( class ACar_TA* PlayerCar );
	void GetSpawnLocationAndRotation ( class AController* Player, struct FVector* SpawnLocation, struct FRotator* SpawnRotation );
	bool RestartPlayer ( class AController* NewPlayer );
	class AGameEditor_Pawn_TA* SpawnEditorPawn ( class AController* NewPlayer, struct FVector SpawnLoc, struct FRotator SpawnRot );
	void SetupInitialPawnOrientation ( class APlayerController* NewPlayer );
	bool ChooseTeam ( int TeamIndex, class APlayerController_TA* Player );
	void InitFX ( );
	void eventPostBeginPlay ( );
};

UClass* AGameEvent_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_TrainingEditor_TA
// 0x00A0 (0x08B0 - 0x0810)
class AGameEvent_TrainingEditor_TA : public AGameEvent_GameEditor_TA
{
public:
	float                                              MinRoundTime;                                     		// 0x0810 (0x0004) [0x0000000000000000]              
	float                                              MaxRoundTime;                                     		// 0x0814 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoEditor : 1;                                    		// 0x0818 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDisplayedRedoPenaltyMessage : 1;                 		// 0x0818 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUnsavedChanges : 1;                              		// 0x0818 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                PointsScoredThisRound;                            		// 0x081C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxModal_X*                                 ResetModal;                                       		// 0x0820 (0x0004) [0x0000000000000000]              
	int                                                ShotAttempt;                                      		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GoalieScore;                                      		// 0x0828 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PlayTestType;                                     		// 0x082C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            GoalMeshBlockers;                                 		// 0x0830 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class AActor*                                      GoalMeshBlockerArchetype;                         		// 0x083C (0x0004) [0x0000000000000000]              
	class USaveData_GameEditor_Training_TA*            TrainingData;                                     		// 0x0840 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PrePlaytestState;                                 		// 0x0844 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              SaveDelayTime;                                    		// 0x084C (0x0004) [0x0000000000000000]              
	float                                              SaveCooldown;                                     		// 0x0850 (0x0004) [0x0000000000000000]              
	struct FString                                     TrainingFileName;                                 		// 0x0854 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventRoundTimeChanged__Delegate;                		// 0x0860 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0864 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRoundChanged__Delegate;                    		// 0x0870 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0874 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlaytestStarted__Delegate;                 		// 0x0880 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0884 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUnsavedChanges__Delegate;                  		// 0x0890 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0894 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSaveResult__Delegate;                      		// 0x08A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x08A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73530 ];

		return pClassPointer;
	};

	void BroadcastGoMessage ( );
	int GetTotalRounds ( );
	unsigned char GetDifficulty ( );
	unsigned char GetTrainingType ( );
	void Save ( );
	void HandleSaveResult ( struct FSaveObjectResult Result );
	void SaveInternal ( struct FSaveObjectResult* StructInitializer_1C88BA2D44B96B9BA78E5A9CA7A84B38 );
	void OnTrainingModeLoaded ( );
	void DuplicateRound ( int Index );
	void SetMetaData ( struct FString NewName, unsigned char NewType, unsigned char NewDifficulty, TArray< int > NewTags );
	void ReorderRound ( int FromIndex, int ToIndex );
	void SetRoundTimeLimit ( float NewRoundTime );
	bool HandleNextGame ( );
	void ResetBalls ( );
	class UTrainingEditorMetrics_TA* GetTrainingMetrics ( );
	void Load ( struct FString SaveName, class APlayerController_TA* PC );
	class AActor* GetFirstFoundArchetype ( struct FName ArchetypeName );
	void DestroyGoalMeshBlockers ( );
	void UpdateGoalMeshBlocker ( );
	int GetScore ( );
	bool CanAwardAchievements ( );
	void RemovePointsFromScore ( int PointsToRemove, int TeamIndex );
	bool ShowScorerGoalMessage ( );
	void OnResetRoundCancel ( class UGFxModal_X* Modal );
	void OnResetRoundConfirm ( class UGFxModal_X* Modal );
	void ShowResetRoundMessage ( );
	bool ShowPenaltyMessage ( );
	int GetPlayerTeamNumber ( );
	int GetBallGoalScoreNumber ( );
	void RemoveAllPointsFromScore ( int TeamIndex );
	bool IncrementRound ( unsigned long bLoop );
	int GetStoredArchetypeCount ( int RoundNumber, class UClass* ClassType );
	void SetupInitialPawnOrientation ( class APlayerController* NewPlayer );
	void LoadRoundData ( struct FEditorRoundData Round, class UClass* ClassType );
	void LoadRound ( struct FEditorRoundData Round );
	struct FVector AdjustToFloorLocation ( struct FVector TraceStart, struct FVector CollsionExtent );
	class AActor* SpawnArchetypeAtAndAdjustToFloor ( class AActor* Archetype, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void SpawnBallAndStartPointAt ( struct FVector BallSpawnLocation, struct FRotator BallSpawnRotation, struct FVector StartPointSpawnLocation, struct FRotator StartPointSpawnRotation );
	void SetupDefaultRound ( );
	void SwitchToRoundNumber ( int RoundNumber, unsigned long BackupCurrentRound );
	void SetRoundByNumber ( int RoundNumber, struct FEditorRoundData RoundData );
	void DeleteRound ( int RoundToDelete );
	struct FEditorRoundData GetCurrentRoundData ( );
	bool CanPlayTestRound ( struct FEditorRoundData Round );
	void RestartPlayTest ( );
	void EndPlayTest ( );
	void StartPlayTest ( unsigned char InPlayTestType );
	bool CanPlayTestRoundNumber ( int RoundNumber );
	void SetUnsavedChanges ( unsigned long bInUnsavedChanges );
	void UpdateActiveRoundData ( );
	void StartNewRound ( );
	bool IsValidRoundIndex ( int ArrayIndex );
	void AddLocalPlayer ( class APlayerController_TA* Player );
	struct FName GetMatchTypeName ( );
	void OnInit ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void EventSaveResult ( unsigned long bSuccess );
	void EventUnsavedChanges ( unsigned long bOutUnsavedChanges );
	void EventPlaytestStarted ( class AGameEvent_TrainingEditor_TA* GamEvent );
	void EventRoundChanged ( class AGameEvent_TrainingEditor_TA* GamEvent );
	void EventRoundTimeChanged ( class AGameEvent_TrainingEditor_TA* GameEvent );
};

UClass* AGameEvent_TrainingEditor_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Vote_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_Vote_TA : public UGFxDataRow_X
{
public:
	struct FString                                     Subject;                                          		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                YesVotes;                                         		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NoVotes;                                          		// 0x0064 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                RequiredVotes;                                    		// 0x0068 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                TimeRemaining;                                    		// 0x006C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      VoteStatus;                                       		// 0x0070 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      LocalVoteStatus;                                  		// 0x0071 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class AVoteActor_TA*                               VoteActor;                                        		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73566 ];

		return pClassPointer;
	};

	void SetVoteStatus ( unsigned char Status );
	void ClearVote ( );
	void VoteNo ( );
	void VoteYes ( );
	void HandleDestroyed ( class AVoteActor_TA* InVoteActor );
	void HandleFinished ( class AVoteActor_TA* InVoteActor );
	void UpdateData ( class AVoteActor_TA* InVoteActor );
	void eventOnRemoved ( );
	void SetVoteActor ( class AVoteActor_TA* InVoteActor );
};

UClass* UGFxData_Vote_TA::pClassPointer = NULL;

// Class TAGame.LoadingScreen_TA
// 0x00A0 (0x00DC - 0x003C)
class ULoadingScreen_TA : public UObject
{
public:
	TArray< struct FString >                           ProtipMessages;                                   		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ProtipMessagesQueue;                              		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MaximumPlayerCounts;                              		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxEngine_TA*                               GFxEngineRef;                                     		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLoadingMovieMapInfo                        LoadingScreenInfo;                                		// 0x0068 (0x0070) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bUnfairTeams : 1;                                 		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73645 ];

		return pClassPointer;
	};

	void HandlePreLoadMap ( struct FString MapName );
	struct FString GetProtipMessageWithIcons ( struct FString ProtipMessage, struct FString OpenDelimiter, struct FString CloseDelimiter, unsigned char InputType );
	unsigned char GetProtipInputType ( );
	void OnLargeImageMapLoaded ( struct FMapImageLoadResult LoadResult );
	void HandleCurrentPlaylistSet ( class UOnlineGameAccount_X* InAccount, class UGameSettingPlaylist_X* NewPlaylist );
	void HandleMaxPlayersChanged ( class UOnlineGameJoinGame_X* OnlineGameJoinGame, int MaxPlayers );
	void HandleJoiningGame ( class UOnlineGameJoinGame_X* OnlineGameJoinGame );
	void HandleOnlineGameInitialized ( );
	void HandlePostLoadMap ( );
	void HandleLoadingUnfairMatch ( class APlayerControllerBase_TA* PlayerControllerBase );
	struct FString GetLocalizedMaximumPlayerCounts ( int MaxPlayers );
	void HandleMatchSettingsChanged ( class AGameEvent_TA* GameEvent, struct FCustomMatchSettings NewMatchSettings );
	void Init ( class UGFxEngine_TA* NewGFxEngine );
};

UClass* ULoadingScreen_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_Spectator_TA
// 0x002C (0x05D0 - 0x05A4)
class AGFxHUD_Spectator_TA : public AGFxHUD_TA
{
public:
	class UGFxData_ReplayViewer_TA*                    ViewerData;                                       		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomSpeed;                                        		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomClickTime;                                    		// 0x05AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGFxHUD_TA*                                  GameHUD;                                          		// 0x05B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bZoomIn : 1;                                      		// 0x05B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bZoomOut : 1;                                     		// 0x05B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              ZoomInTime;                                       		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZoomOutTime;                                      		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OpenMenuWithKeycodeDelegate__Delegate;          		// 0x05C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x05C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73772 ];

		return pClassPointer;
	};

	class ACar_TA* GetFocusCar ( );
	class APRI_TA* GetPRIFromPlayerIDString ( struct FString PlayerIDString );
	void HandleViewedPlayerTeamChanged ( class APRI_X* InPRI );
	void ViewCycle ( int Direction );
	void ViewPrev ( );
	void ViewNext ( );
	void GetViewableActors ( TArray< struct FString >* Actors, int* CurrentIndex );
	void AddViewableActor ( struct FString actorName, TArray< struct FString >* Actors, int* CurrentIndex );
	void ViewFly ( );
	void ViewDefault ( );
	void OnViewedPlayerChanged ( struct FString PreviousPlayerIDString, class APRI_TA* NewPlayerPRI );
	void ViewPlayer ( int Team, int Player );
	void ToggleControls ( );
	void OpenHUDMenu ( );
	void OpenCameraMenu ( );
	void CycleCamera ( );
	void OpenFocusMenu ( );
	void CycleFocus ( );
	TArray< struct FString > GetFocusPlayerNames ( );
	void OpenMenuWithKeycode ( struct FScriptDelegate Callback );
	void OpenMenuWithKeycodeDelegate ( int KeyCode, int MouseButton );
	void UpdateHudVisibility ( );
	void CycleHUD ( );
	bool ProcessZoomPress ( unsigned long bPressed, int DeltaFOV, float* Time );
	void ZoomOut ( unsigned long bPressed );
	void ZoomIn ( unsigned long bPressed );
	void AdjustZoom ( float DeltaFOV );
	void TickZoom ( float DeltaTime, unsigned long bZoom, float Speed, float* Time );
	void eventTick ( float DeltaTime );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	class UGFxData_PRI_TA* CreateGFxPRIData ( );
	void HandleReservationsUpdated ( class AGRI_X* GRI );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* AGFxHUD_Spectator_TA::pClassPointer = NULL;

// Class TAGame.MutatorGameSettingPreset_TA
// 0x0004 (0x0040 - 0x003C)
class UMutatorGameSettingPreset_TA : public UGameSetting_X
{
public:
	class UPresetMutators_X*                           Presets;                                          		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73800 ];

		return pClassPointer;
	};

};

UClass* UMutatorGameSettingPreset_TA::pClassPointer = NULL;

// Class TAGame.GFxNameplatesManager_TA
// 0x0044 (0x008C - 0x0048)
class UGFxNameplatesManager_TA : public UComponent
{
public:
	class UGFxMoviePlayer_X*                           MovieArchetype;                                   		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UNameplateMeshComponent_TA*                  NameplateMeshArchetype;                           		// 0x004C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UGFxShell_X*                                 Shell;                                            		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxMoviePlayer_X*                           Movie;                                            		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHidden : 1;                                      		// 0x0058 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDebug : 1;                                       		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class UNameplateComponent_TA* >            ComponentSlots;                                   		// 0x005C (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UNameplateComponent_TA* >            PendingComponents;                                		// 0x0068 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UGFxData_Nameplate_TA* >             NameplateRows;                                    		// 0x0074 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UNameplateMeshComponent_TA* >        Nameplates;                                       		// 0x0080 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73895 ];

		return pClassPointer;
	};

	void DrawDebug ( class UNameplateMeshComponent_TA* Nameplate );
	void Tick ( );
	void UpdateNameplatesVisibility ( );
	void SetHidden ( unsigned long bHide );
	class UNameplateMeshComponent_TA* GetNameplate ( class UNameplateComponent_TA* InComponent );
	class UNameplateMeshComponent_TA* SetNameplate ( int Index, class UNameplateComponent_TA* InComponent );
	void SetPlayerData ( int Index, class UNameplateComponent_TA* InComponent );
	void Update ( );
	class UGameShare_TA* GetGameShare ( );
	void QueUpdate ( );
	void HandlePRIXChanged ( class APRI_X* P );
	void HandleVehicleChanged ( class AVehicle_TA* Vehicle );
	void HandleCarChanged ( class ACar_TA* Car );
	void UpdatePendingComponents ( );
	void HandleNameplateRemoved ( class UGameShare_TA* G, class UNameplateComponent_TA* InComponent );
	void HandleNameplateAdded ( class UGameShare_TA* G, class UNameplateComponent_TA* InComponent );
	void Destroyed ( );
	void Init ( class UGFxShell_X* InShell );
};

UClass* UGFxNameplatesManager_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_Replay_TA
// 0x0018 (0x05E8 - 0x05D0)
class AGFxHUD_Replay_TA : public AGFxHUD_Spectator_TA
{
public:
	class AGameInfo_Replay_TA*                         Game;                                             		// 0x05D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevKeyframeBufferTime;                           		// 0x05D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUserPaused : 1;                                  		// 0x05D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPausedForEndOfReplay : 1;                        		// 0x05D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< class UProductAsset_TA* >                  ReferencedProducts;                               		// 0x05DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74112 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void ReplayPause ( );
	void ScrubTimeline ( float DeltaTime );
	void OpenTimelineMenu ( );
	void OpenSpeedMenu ( );
	void PrevKeyframe ( );
	void NextKeyframe ( );
	void RemoveKeyframe ( );
	void AddKeyframe ( );
	void DrawLogs ( );
	void DrawHUD ( );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	void HandleGameEventSet ( class AGameInfo_Replay_TA* InGame );
	void SetPausedForEndOfReplay ( unsigned long bPaused );
	void HandlePostTimeSkip ( class UReplay_TA* Replay );
	void HandlePreTimeSkip ( class UReplay_TA* Replay );
	void HandlePlaybackStopped ( class UReplay_TA* Replay );
	void HandleReplayStarted ( class AGameInfo_Replay_TA* InGame );
	void eventPostBeginPlay ( );
};

UClass* AGFxHUD_Replay_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_Soccar_TA
// 0x0004 (0x05A8 - 0x05A4)
class AGFxHUD_Soccar_TA : public AGFxHUD_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74175 ];

		return pClassPointer;
	};

	void HandleLobbyHover ( class ULocalPlayer_TA* LocalPlayer, class AActor* SelectedActor );
	void UpdateCarData ( );
	void HandleMatchWinnerSet ( class AGameEvent_Soccar_TA* G );
	void HandlePlayerRemoved ( class AGameEvent_TA* G, class APRI_TA* InPRI );
	void HandlePlayerAdded ( class AGameEvent_TA* G, class APRI_TA* InPRI );
	void UpdateReplayData ( );
	void HandleScoreDataChanged ( class AReplayDirector_TA* ReplayDirector );
	void HandleReplayDirectorSet ( class AGameEvent_Soccar_TA* G );
	void HandleNextMatchTimeUpdated ( class AGameEvent_TA* InGameEvent );
	void HandleOvertimeUpdated ( class AGameEvent_Soccar_TA* InGameEvent );
	void HandleGameTimeUpdated ( class AGameEvent_Soccar_TA* InGameEvent );
	void OnAllTeamsCreated ( );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	void eventDestroyed ( );
};

UClass* AGFxHUD_Soccar_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_Season_TA
// 0x0000 (0x05A8 - 0x05A8)
class AGFxHUD_Season_TA : public AGFxHUD_Soccar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74218 ];

		return pClassPointer;
	};

};

UClass* AGFxHUD_Season_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_Training_TA
// 0x0004 (0x05AC - 0x05A8)
class AGFxHUD_Training_TA : public AGFxHUD_Soccar_TA
{
public:
	class UGFxData_Training_TA*                        TrainingData;                                     		// 0x05A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74220 ];

		return pClassPointer;
	};

	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
};

UClass* AGFxHUD_Training_TA::pClassPointer = NULL;

// Class TAGame.GFxModal_FriendJoin_TA
// 0x0024 (0x00A8 - 0x0084)
class UGFxModal_FriendJoin_TA : public UGFxModal_X
{
public:
	struct FString                                     ConnectingTitleString;                            		// 0x0084 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectingBodyString;                             		// 0x0090 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     JoiningGameFailedString;                          		// 0x009C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74227 ];

		return pClassPointer;
	};

	void HandlePasswordRequired ( );
	void HandleGameInviteComplete ( unsigned long bSuccess, struct FString FailReason );
	void SetGFxObject ( class UGFxObject* Obj );
	void Close ( );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxModal_FriendJoin_TA::pClassPointer = NULL;

// Class TAGame.__GFxModal_Processing_TA__CreateAndBind
// 0x0004 (0x0040 - 0x003C)
class U__GFxModal_Processing_TA__CreateAndBind : public UObject
{
public:
	class UAsyncTask*                                  Task;                                             		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74245 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UGFxModal_X* M );
};

UClass* U__GFxModal_Processing_TA__CreateAndBind::pClassPointer = NULL;

// Class TAGame.__GFxModal_Processing_TA__CreateAndBindNoCancel
// 0x0004 (0x0040 - 0x003C)
class U__GFxModal_Processing_TA__CreateAndBindNoCancel : public UObject
{
public:
	class UGFxModal_X*                                 Modal;                                            		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74251 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UError* Error );
};

UClass* U__GFxModal_Processing_TA__CreateAndBindNoCancel::pClassPointer = NULL;

// Class TAGame.GFxModal_RankedReconnect_TA
// 0x0018 (0x009C - 0x0084)
class UGFxModal_RankedReconnect_TA : public UGFxModal_X
{
public:
	struct FString                                     ConnectingTitleString;                            		// 0x0084 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectingBodyString;                             		// 0x0090 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74256 ];

		return pClassPointer;
	};

	void HandleJoin ( unsigned long bSuccess, struct FString FailReason );
	void SetGFxObject ( class UGFxObject* Obj );
	void Close ( );
	class UOnlineGame_X* GetOnlineGame ( );
};

UClass* UGFxModal_RankedReconnect_TA::pClassPointer = NULL;

// Class TAGame.GFxModal_TextInput_TA
// 0x0010 (0x0094 - 0x0084)
class UGFxModal_TextInput_TA : public UGFxModal_X
{
public:
	struct FScriptDelegate                             Callback;                                         		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0088 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74268 ];

		return pClassPointer;
	};

	void HandleInputComplete ( struct FString InputText, unsigned long bCanceled );
	void SetData ( class UGFxObject* Data );
	class UGFxModal_TextInput_TA* SetTextInputData ( struct FScriptDelegate InCallback, unsigned long bDisplayAsPassword, struct FString DefaultText, int MaxLength );
};

UClass* UGFxModal_TextInput_TA::pClassPointer = NULL;

// Class TAGame.GFxModal_Tutorial_TA
// 0x0000 (0x0084 - 0x0084)
class UGFxModal_Tutorial_TA : public UGFxModal_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74283 ];

		return pClassPointer;
	};

	void HandleButtonClicked ( int Index );
};

UClass* UGFxModal_Tutorial_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Features_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_Features_TA : public UGFxDataSingleton_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74317 ];

		return pClassPointer;
	};

	void eventOnShellSet ( );
};

UClass* UGFxData_Features_TA::pClassPointer = NULL;

// Class TAGame.GFxModal_Error_TA
// 0x0000 (0x0084 - 0x0084)
class UGFxModal_Error_TA : public UGFxModal_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74436 ];

		return pClassPointer;
	};

};

UClass* UGFxModal_Error_TA::pClassPointer = NULL;

// Class TAGame.TrialMetrics_TA
// 0x001C (0x0070 - 0x0054)
class UTrialMetrics_TA : public UMetricsGroup_X
{
public:
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       UpsellGuid;                                       		// 0x005C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPendingPurchase : 1;                             		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74452 ];

		return pClassPointer;
	};

	void CheckPendingPurchase ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void PurchaseCancel ( struct FGuid Id );
	void PurchaseSuccess ( struct FGuid Id );
	void PurchaseOpen ( struct FGuid Id );
	void RecordPurchaseOpen ( );
	void UpsellClose ( struct FGuid Id );
	void RecordUpsellClose ( );
	void UpsellOpen ( struct FGuid Id, struct FString Context );
	void RecordUpsellOpen ( struct FString Context );
};

UClass* UTrialMetrics_TA::pClassPointer = NULL;

// Class TAGame.GoalVolume_TA
// 0x0004 (0x022C - 0x0228)
class AGoalVolume_TA : public AVolume
{
public:
	class UGoal_TA*                                    Goal;                                             		// 0x0228 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74592 ];

		return pClassPointer;
	};

};

UClass* AGoalVolume_TA::pClassPointer = NULL;

// Class TAGame.LightBarComponent_TA
// 0x0027 (0x008C - 0x0065)
class ULightBarComponent_TA : public UActorComponent
{
public:
	class ATeam_TA*                                    Team;                                             		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bStrobeActive : 1;                                		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRandStrobeColor : 1;                             		// 0x006C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                StrobeCount;                                      		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxStrobeCount;                                   		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StrobeTime;                                       		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FColor >                            StrobeColorList;                                  		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                StrobeColorIndex;                                 		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74690 ];

		return pClassPointer;
	};

	void HandleBoostAmountChanged ( class ACarComponent_Boost_TA* Boost );
	void HandleTeamChanged ( class APRI_X* PRI );
	void Strobe_MVP ( class ATeam_TA* InTeam );
	void Strobe_GoalScored ( int ScoredOnTeam );
	void StrobeColor ( );
	void StartStrobeColor ( float Duration, float InStrobeCount, unsigned long bRandColor );
	void ResetColor ( );
	void SetColor ( struct FColor NewColor );
};

UClass* ULightBarComponent_TA::pClassPointer = NULL;

// Class TAGame.LightEnvironment_TA
// 0x0000 (0x013C - 0x013C)
class ULightEnvironment_TA : public UParticleLightEnvironmentComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74722 ];

		return pClassPointer;
	};

};

UClass* ULightEnvironment_TA::pClassPointer = NULL;

// Class TAGame.__Loadout_TA__ValidateForcedProducts
// 0x0008 (0x0044 - 0x003C)
class U__Loadout_TA__ValidateForcedProducts : public UObject
{
public:
	class UProductAttribute_TeamForcedProduct_TA*      TeamForcedProducts;                               		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                TeamIndex;                                        		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74779 ];

		return pClassPointer;
	};

	int LambdaCallback ( int PID );
};

UClass* U__Loadout_TA__ValidateForcedProducts::pClassPointer = NULL;

// Class TAGame.LoadoutRenderer_TA
// 0x001C (0x0058 - 0x003C)
class ULoadoutRenderer_TA : public UObject
{
public:
	class UThumbnailRenderer_TA*                       ThumbnailRenderer;                                		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductLoader_TA*                           Loader;                                           		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ATeam_TA*                                    TeamArchetype;                                    		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventLoadoutRendered__Delegate;                 		// 0x0048 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74808 ];

		return pClassPointer;
	};

	void HandleAllProductsLoaded ( class UProductLoader_TA* InLoader );
	void RenderLoadout ( struct FClientLoadoutData Loadout, class ATeam_TA* InTeamArchetype, struct FScriptDelegate Callback );
	void EventLoadoutRendered ( class ULoadoutRenderer_TA* Renderer, class UTexture2D* Tex );
};

UClass* ULoadoutRenderer_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetPlayerCar_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_GetPlayerCar_TA : public USequenceAction
{
public:
	struct FString                                     PlayerName;                                       		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      FoundActor;                                       		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74937 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetPlayerCar_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetStadiumTeamColors_TA
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetStadiumTeamColors_TA : public USequenceAction
{
public:
	TArray< struct FLinearColor >                      BlueColors;                                       		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      OrangeColors;                                     		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74943 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetStadiumTeamColors_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetReplayCamera_TA
// 0x0028 (0x0124 - 0x00FC)
class USeqAct_SetReplayCamera_TA : public USequenceAction
{
public:
	struct FString                                     FocusActor;                                       		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LocationOffset;                                   		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOV;                                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74963 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetReplayCamera_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Ball_TA
// 0x0030 (0x006C - 0x003C)
class UMutator_Ball_TA : public UMutator_TA
{
public:
	float                                              BallScale;                                        		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              BallBounciness;                                   		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              BallCarBounciness;                                		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                TotalGameBalls;                                   		// 0x0048 (0x0004) [0x0000000000000000]              
	class ABall_TA*                                    BallArchetype;                                    		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              BallGravityScale;                                 		// 0x0050 (0x0004) [0x0000000000000000]              
	float                                              BallSloMoDuration;                                		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              BallSloMoDilation;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              BallSloMoCooldown;                                		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              BallSloMoRadius;                                  		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              BallSloMoDiffSpeed;                               		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              BallMaxLinearSpeedScale;                          		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74988 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_Ball_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Booster_TA
// 0x0018 (0x0054 - 0x003C)
class UMutator_Booster_TA : public UMutator_TA
{
public:
	unsigned long                                      bNoBooster : 1;                                   		// 0x003C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUnlimitedBoost : 1;                              		// 0x003C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideStartBoost : 1;                          		// 0x003C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BoostStrength;                                    		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostRechargeRate;                                		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostRechargeDelay;                               		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostStartAmount;                                 		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UVehiclePickup_BoostModifier_TA*             BoostModifier;                                    		// 0x0050 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75008 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
};

UClass* UMutator_Booster_TA::pClassPointer = NULL;

// Class TAGame.VehiclePickup_BoostModifier_TA
// 0x0000 (0x0048 - 0x0048)
class UVehiclePickup_BoostModifier_TA : public UComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75010 ];

		return pClassPointer;
	};

	void PickupEffect ( class ACar_TA* Car );
	bool CanPickup ( class ACar_TA* Car );
	void InitModifier ( );
};

UClass* UVehiclePickup_BoostModifier_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Car_TA
// 0x0014 (0x0050 - 0x003C)
class UMutator_Car_TA : public UMutator_TA
{
public:
	float                                              CarScale;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ControlScale;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpScale;                                        		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDemolishOnOpposingGround : 1;                    		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDemolishOnGoalZone : 1;                          		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UMessage_TA*                                 DemolishWarningMessage;                           		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75023 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_Car_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Demolish_TA
// 0x0008 (0x0044 - 0x003C)
class UMutator_Demolish_TA : public UMutator_TA
{
public:
	unsigned char                                      DemolishTarget;                                   		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DemolishSpeed;                                    		// 0x003D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBallDemolish : 1;                                		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75037 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
};

UClass* UMutator_Demolish_TA::pClassPointer = NULL;

// Class TAGame.Mutator_GameSpeed_TA
// 0x0004 (0x0040 - 0x003C)
class UMutator_GameSpeed_TA : public UMutator_TA
{
public:
	float                                              GameSpeed;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75046 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_GameSpeed_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Gravity_TA
// 0x0004 (0x0040 - 0x003C)
class UMutator_Gravity_TA : public UMutator_TA
{
public:
	float                                              Gravity;                                          		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75053 ];

		return pClassPointer;
	};

	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_Gravity_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Handicap_TA
// 0x0004 (0x0040 - 0x003C)
class UMutator_Handicap_TA : public UMutator_TA
{
public:
	int                                                AutoBalanceDifference;                            		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75058 ];

		return pClassPointer;
	};

	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_Handicap_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Match_TA
// 0x0018 (0x0054 - 0x003C)
class UMutator_Match_TA : public UMutator_TA
{
public:
	int                                                MatchGames;                                       		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GameTime;                                         		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GameScore;                                        		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMessage_TA*                                 PickupMessage;                                    		// 0x0048 (0x0004) [0x0000000000000000]              
	class UGameEvent_Soccar_SubRules_TA*               SubRules;                                         		// 0x004C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUnlimitedTime : 1;                               		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75064 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_Match_TA::pClassPointer = NULL;

// Class TAGame.Mutator_RespawnTime_TA
// 0x0008 (0x0044 - 0x003C)
class UMutator_RespawnTime_TA : public UMutator_TA
{
public:
	int                                                RespawnTime;                                      		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned long                                      bDisableGoalDelay : 1;                            		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75080 ];

		return pClassPointer;
	};

	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_RespawnTime_TA::pClassPointer = NULL;

// Class TAGame.NameplateRenderTarget_TA
// 0x0014 (0x0154 - 0x0140)
class UNameplateRenderTarget_TA : public UScriptedTexture
{
public:
	class UGFxMoviePlayer_X*                           NameplatesMovie;                                  		// 0x0140 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __Render__Delegate;                               		// 0x0144 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0148 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75086 ];

		return pClassPointer;
	};

	void Render ( class UCanvas* C );
};

UClass* UNameplateRenderTarget_TA::pClassPointer = NULL;

// Class TAGame.CDNObject_TA
// 0x0020 (0x005C - 0x003C)
class UCDNObject_TA : public UObject
{
public:
	class UCacheTimer_X*                               CacheTimer;                                       		// 0x003C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UOnlineResource_X*                           OnlineResource;                                   		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     CDNPath;                                          		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CDNFileName;                                      		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75121 ];

		return pClassPointer;
	};

	void HandleDataChanged ( class UOnlineResource_X* Resource );
	void DownloadImage ( struct FString ImageURL, struct FScriptDelegate Callback );
	void HandleCacheExpired ( class UCacheTimer_X* Timer );
	struct FString GetCDNURL ( );
	void Init ( );
};

UClass* UCDNObject_TA::pClassPointer = NULL;

// Class TAGame.ESportEvents_TA
// 0x0030 (0x008C - 0x005C)
class UESportEvents_TA : public UCDNObject_TA
{
public:
	TArray< struct FEsportEventData >                  Events;                                           		// 0x005C (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FString >                           ImageRequests;                                    		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0074 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ESportEvents_TA.SoonInSeconds
	struct FScriptDelegate                             __EventESportsEventsChanged__Delegate;            		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0080 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75120 ];

		return pClassPointer;
	};

	void UpdateSoonLiveEvents ( );
	void HandleImageDownloaded ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	void DownloadEventImage ( struct FString URL );
	void HandleDataChanged ( class UOnlineResource_X* Resource );
	void EventESportsEventsChanged ( class UESportEvents_TA* NewObject );
};

UClass* UESportEvents_TA::pClassPointer = NULL;

// Class TAGame.Upsell_TA
// 0x000C (0x0068 - 0x005C)
class UUpsell_TA : public UCDNObject_TA
{
public:
	TArray< struct FUpsellData >                       UpsellList;                                       		// 0x005C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75122 ];

		return pClassPointer;
	};

	void HandleTextureDownloaded ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	void HandleDataChanged ( class UOnlineResource_X* Resource );
	void HandleGameInfoChanged ( class AGameInfo_X* Game );
	void Init ( );
};

UClass* UUpsell_TA::pClassPointer = NULL;

// Class TAGame.OnlineGamePlayTogether_TA
// 0x0004 (0x0064 - 0x0060)
class UOnlineGamePlayTogether_TA : public UOnline_X
{
public:
	int                                                PlayTogetherHostIndex;                            		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75123 ];

		return pClassPointer;
	};

	void FinishHostStartPlayTogether ( );
	void OnCreatePlayTogetherParty ( class UOnlineGameParty_X* InParty, unsigned long bWasSuccessful );
	void UpdatePlayTogether ( );
	void HandlePlayTogetherLoginChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void OnTitleScreenClicked ( class UGFxData_StartMenu_TA* StartMenu );
	void HandleHostStartPlayTogether ( unsigned char LocalUserNum );
	void OnInit ( );
};

UClass* UOnlineGamePlayTogether_TA::pClassPointer = NULL;

// Class TAGame.ProductAssetCache_TA
// 0x0028 (0x0070 - 0x0048)
class UProductAssetCache_TA : public UComponent
{
public:
	unsigned long                                      bDebug : 1;                                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< int >                                      NewProductIDs;                                    		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      LoadedProductIDs;                                 		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UProductAsset_TA* >                  Assets;                                           		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75216 ];

		return pClassPointer;
	};

	struct FString GetDebugName ( );
	void HandleProductLoaded ( struct FAssetLoadResult Result );
	void FinishedAddingProducts ( );
	void AddProducts ( TArray< int > InProductIDs );
	void Clear ( );
};

UClass* UProductAssetCache_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameJoinGame_TA
// 0x0004 (0x0298 - 0x0294)
class UOnlineGameJoinGame_TA : public UOnlineGameJoinGame_X
{
public:
	class UProductAssetCache_TA*                       AssetCache;                                       		// 0x0294 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75238 ];

		return pClassPointer;
	};

	TArray< int > GetLoadout ( struct FUniqueNetId PlayerID );
	class UAddReservationMessage_X* AddLoadoutsToMessage ( class UAddReservationMessage_X* Message );
	void ClearAssetCache ( );
	void HandlePreLoadMap ( struct FString MapName );
	void OnInit ( );
};

UClass* UOnlineGameJoinGame_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameLanServer_TA
// 0x000C (0x01A0 - 0x0194)
class UOnlineGameLanServer_TA : public UOnlineGameLanServer_X
{
public:
	TArray< class UObject* >                           AllRelevantProducts;                              		// 0x0194 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75276 ];

		return pClassPointer;
	};

	void HandleGameEventEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void StartMatch ( );
	class AGameEvent_TA* GetCurrentGameEvent ( );
	struct FName GetRandomMapName ( int GameMode );
	void GoToNextMap ( );
	void LoadAllRelevantProducts ( );
	void OnInit ( );
};

UClass* UOnlineGameLanServer_TA::pClassPointer = NULL;

// Class TAGame.PartyMessage_Loadout_TA
// 0x0094 (0x0118 - 0x0084)
class UPartyMessage_Loadout_TA : public UPartyMessage_X
{
public:
	struct FPartyMemberLoadout                         MemberLoadout;                                    		// 0x0084 (0x0094) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75309 ];

		return pClassPointer;
	};

	class UPartyMessage_Loadout_TA* SetLoadout ( struct FPartyMemberLoadout* InMemberLoadout );
};

UClass* UPartyMessage_Loadout_TA::pClassPointer = NULL;

// Class TAGame.PartyMessage_Chat_TA
// 0x000C (0x0090 - 0x0084)
class UPartyMessage_Chat_TA : public UPartyMessage_X
{
public:
	struct FString                                     Text;                                             		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75310 ];

		return pClassPointer;
	};

	class UPartyMessage_Chat_TA* SetSender ( struct FUniqueNetId InSender );
	class UPartyMessage_Chat_TA* SetText ( struct FString InText );
};

UClass* UPartyMessage_Chat_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsTradePlayer_TA
// 0x00B8 (0x0154 - 0x009C)
class URPC_ProductsTradePlayer_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	struct FUniqueNetId                                OtherPlayerID;                                    		// 0x00E4 (0x0048) [0x0000000000000000]              
	struct FGuid                                       TradeId;                                          		// 0x012C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x013C (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradePlayer_TA.InstancesToGive
	unsigned char                                      UnknownData01[ 0xC ];                             		// 0x0148 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradePlayer_TA.InstancesToGet

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75403 ];

		return pClassPointer;
	};

	class URPC_ProductsTradePlayer_TA* SetRemoteProducts ( );
	class URPC_ProductsTradePlayer_TA* SetLocalProducts ( );
	class URPC_ProductsTradePlayer_TA* SetTradeId ( struct FGuid InTradeId );
	class URPC_ProductsTradePlayer_TA* SetRemotePlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_ProductsTradePlayer_TA* SetLocalPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsTradePlayer_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsLoadoutGet_TA
// 0x0078 (0x0114 - 0x009C)
class URPC_ProductsLoadoutGet_TA : public URPC_X
{
public:
	TArray< struct FInstanceToSlotRow >                InstanceToSlotTable;                              		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A8 (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x00F0 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsLoadoutGet_TA.Loadout
	TArray< struct FOnlineProductData >                ProductData;                                      		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75426 ];

		return pClassPointer;
	};

	void GetProducts ( int TeamIndex, TArray< class UOnlineProduct_TA* >* InLoadout );
	void eventOnSuccess ( );
	class URPC_ProductsLoadoutGet_TA* AddLoadout ( int TeamIndex );
	class URPC_ProductsLoadoutGet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsLoadoutGet_TA::pClassPointer = NULL;

// Class TAGame.PartyMessage_TradeProductUpdate_TA
// 0x006C (0x00F0 - 0x0084)
class UPartyMessage_TradeProductUpdate_TA : public UPartyMessage_X
{
public:
	struct FUniqueNetId                                TradingMemberId;                                  		// 0x0084 (0x0048) [0x0000000000000000]              
	struct FOnlineProductData                          ProductData;                                      		// 0x00CC (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAddProduct : 1;                                  		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75443 ];

		return pClassPointer;
	};

	class UPartyMessage_TradeProductUpdate_TA* SetAddProduct ( unsigned long InAddProduct );
	class UPartyMessage_TradeProductUpdate_TA* SetProductData ( struct FOnlineProductData InProductData );
	class UPartyMessage_TradeProductUpdate_TA* SetTradingMemberId ( struct FUniqueNetId InTradingMemberId );
};

UClass* UPartyMessage_TradeProductUpdate_TA::pClassPointer = NULL;

// Class TAGame.GFxData_TradeLobby_TA
// 0x0078 (0x00CC - 0x0054)
class UGFxData_TradeLobby_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameParty_TA*                         OnlineParty;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UOnlineProduct_TA* >                 LocalOfferings;                                   		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 RemoteOfferings;                                  		// 0x0068 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsProcessingTrade : 1;                           		// 0x0078 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bVerifyingTrade : 1;                              		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FUniqueNetId                                TradingPlayerID;                                  		// 0x007C (0x0048) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineProductStoreSet_TA*                   OnlineProductSet;                                 		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CountdownSecondsToTrade;                          		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75468 ];

		return pClassPointer;
	};

	void __GFxData_TradeLobby_TA__GetLocalProductOfferings ( class UOnlineProduct_TA* Offering );
	void __GFxData_TradeLobby_TA__GetRemoteProductOfferings ( class UOnlineProduct_TA* Offering );
	struct FString GetRemotePlayerName ( );
	TArray< class UOnlineProduct_TA* > GetRemoteKeyOfferings ( );
	TArray< class UOnlineProduct_TA* > GetLocalKeyOfferings ( );
	TArray< class UOnlineProduct_TA* > GetProductOfferings ( TArray< class UOnlineProduct_TA* >* Offerings, TArray< class UOnlineProduct_TA* >* FilterLocal_52ADD288414C2B265D91548923331104 );
	TArray< class UOnlineProduct_TA* > GetKeyOfferings ( TArray< class UOnlineProduct_TA* >* Offerings, TArray< class UOnlineProduct_TA* >* FilterLocal_FC55BEA54832B9ED94F50A8B88EA8D0F );
	bool IsNotKeyProduct ( class UOnlineProduct_TA* OnlineProduct );
	bool IsKeyProduct ( class UOnlineProduct_TA* OnlineProduct );
	int GetRemoteKeyOfferingCount ( );
	int GetLocalKeyOfferingCount ( );
	struct FString GetRemoteProductOfferings ( );
	struct FString GetLocalProductOfferings ( );
	void OnTradePlayerComplete ( );
	void HandleTradePlayerComplete ( class UOnlineGameParty_TA* PartyObject, class URPC_ProductsTradePlayerStatus_TA* RPC );
	void RefreshProducts ( );
	void HandleTradePlayerError ( class UOnlineGameParty_TA* PartyObject, class URPC_X* RPC );
	void SendTradeToBackEnd ( );
	bool TradeCompareAttributes ( TArray< class UProductAttribute_TA* >* Left, TArray< class UProductAttribute_TA* >* Right );
	bool TradeCompare ( class UOnlineProduct_TA* A, class UOnlineProduct_TA* B );
	bool VerifyRemoteOffering ( class UOnlineProduct_TA* OnlineProduct );
	void HandleVerifyTradeTimeOut ( class UOnlineGameParty_X* PartyObject );
	void HandleVerifyTrade ( class UOnlineGameParty_X* PartyObject, TArray< class UOnlineProduct_TA* > Products );
	void SendVerifyTradeToBackEnd ( );
	bool IsProcessingTrade ( );
	void StartCountdownToTrade ( int CountdownTime );
	void HandleSendVerifyTradeToBackEnd ( class UOnlineGameParty_X* PartyObject );
	void HandleNotReadyToTrade ( class UOnlineGameParty_X* PartyObject );
	void HandleReadyToTrade ( class UOnlineGameParty_X* PartyObject );
	void SetRemotePlayerReadyToTrade ( unsigned long bReadyToTrade );
	void SetLocalPlayerReadyToTrade ( unsigned long bReadyToTrade );
	void SetReadyToTrade ( unsigned long bReadyToTrade );
	void UpdateOfferings ( unsigned long bLocal );
	void StartUpdateOfferings ( unsigned long bLocal );
	void RemoveRemoteOffering ( );
	void RemoveLocalOffering ( );
	void AddRemoteOffering ( class UOnlineProduct_TA* InOnlineProduct );
	void HandleTradeProductUpdate ( class UOnlineGameParty_TA* PartyObject, struct FOnlineProductData ProductData, unsigned long bAddProduct );
	void AddLocalOffering ( );
	void CloseTradingWindow ( unsigned long bWasCanceled, unsigned long bNoReceivedProducts );
	void CancelTrading ( );
	void HandleCloseInviteToTrade ( class UOnlineGameParty_X* PartyObject, unsigned long bWasCanceled );
	void CloseTradeLobby ( );
	void HandleAcceptedInviteToTrade ( class UOnlineGameParty_X* PartyObject );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_TradeLobby_TA::pClassPointer = NULL;

// Class TAGame.OnlineGamePlaylists_TA
// 0x0000 (0x0084 - 0x0084)
class UOnlineGamePlaylists_TA : public UOnlineGamePlaylists_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75561 ];

		return pClassPointer;
	};

};

UClass* UOnlineGamePlaylists_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameRegions_TA
// 0x0004 (0x00D0 - 0x00CC)
class UOnlineGameRegions_TA : public UOnlineGameRegions_X
{
public:
	class URegionPingCache_TA*                         RegionPingCache;                                  		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75563 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* UOnlineGameRegions_TA::pClassPointer = NULL;

// Class TAGame.RegionPingCache_TA
// 0x0010 (0x004C - 0x003C)
class URegionPingCache_TA : public UObject
{
public:
	TArray< struct FCachedRegionPing >                 CachedRegionPings;                                		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineGameRegions_TA*                       OnlineGameRegionsRef;                             		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75566 ];

		return pClassPointer;
	};

	struct FString GetSaveFilename ( );
	void HandleRegionsPinged ( class UOnlineGameRegions_X* RegionsObj );
	void HandleImportFinished ( class ULocalCache_X* Cache, class URegionPingCache_TA* CacheObject, class UError* Error );
	void Init ( class UOnlineGameRegions_TA* OnlineGameRegions );
};

UClass* URegionPingCache_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameReservations_TA
// 0x000C (0x00C8 - 0x00BC)
class UOnlineGameReservations_TA : public UOnlineGameReservations_X
{
public:
	TArray< struct FReservationLoadout >               Loadouts;                                         		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75570 ];

		return pClassPointer;
	};

	bool CanAcceptReservations ( class UAddReservationMessagePublic_X* Message );
	TArray< int > GetPrecacheProductIDs ( );
	class UReservationsReadyMessage_X* CreateReadyMessage ( );
	void ClearReservations ( );
	void AddLoadout ( struct FUniqueNetId PlayerID, TArray< int > ProductIDs );
	TArray< struct FReservationData > AddPlayersFromReservationMessage ( class UAddReservationMessage_X* ReservationMessage, class UTcpConnection* Connection );
};

UClass* UOnlineGameReservations_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameSkill_TA
// 0x0000 (0x00A0 - 0x00A0)
class UOnlineGameSkill_TA : public UOnlineGameSkill_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75607 ];

		return pClassPointer;
	};

	void ClientSetSkill ( struct FPlayerSkillRating Rating, int Playlist );
	void ReplicatePlayerSkillRating ( struct FUniqueNetId PlayerID, int Playlist );
	void ReplicateSkillUpdate ( class UMatchRecorder_X* MatchRecorder );
	void HandleSkillsUpdateFailed ( class URPC_X* RPCObject );
	void HandleSkillsUpdated ( class URPC_X* RPCObject );
};

UClass* UOnlineGameSkill_TA::pClassPointer = NULL;

// Class TAGame.PlayerProgressionManager_TA
// 0x0000 (0x003C - 0x003C)
class UPlayerProgressionManager_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75643 ];

		return pClassPointer;
	};

	void Init ( class APlayerController* PlayerCon );
};

UClass* UPlayerProgressionManager_TA::pClassPointer = NULL;

// Class TAGame.OnlinePlayerFriends_TA
// 0x0000 (0x00FC - 0x00FC)
class UOnlinePlayerFriends_TA : public UOnlinePlayerFriends_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75645 ];

		return pClassPointer;
	};

	struct FString GetFriendPresence ( struct FOnlineFriend Friend );
};

UClass* UOnlinePlayerFriends_TA::pClassPointer = NULL;

// Class TAGame.__OnlineProduct_TA__RemoveAttributes
// 0x0004 (0x0040 - 0x003C)
class U__OnlineProduct_TA__RemoveAttributes : public UObject
{
public:
	class UClass*                                      AttributeClass;                                   		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75689 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UProductAttribute_TA* A );
};

UClass* U__OnlineProduct_TA__RemoveAttributes::pClassPointer = NULL;

// Class TAGame.OnlineProfile_TA
// 0x0014 (0x0050 - 0x003C)
class UOnlineProfile_TA : public UObject
{
public:
	int                                                LocalID;                                          		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< struct FProductStat >                      ProductStats;                                     		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FProfileAddProperties                       AddProperties;                                    		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75734 ];

		return pClassPointer;
	};

	bool NeedsUpload ( );
	void AddProductStatValue ( int ProductID, int Delta );
	void GiveXP ( float Amount );
	void Reconcile ( class UProfile_TA* Profile );
	void Init ( int InLocalID );
};

UClass* UOnlineProfile_TA::pClassPointer = NULL;

// Class TAGame.SaveDataMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class USaveDataMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75756 ];

		return pClassPointer;
	};

	void ReconcileXP ( int OnlineXP, int LocalXP );
	void RecordReconcileXP ( int OnlineXP, int LocalXP );
};

UClass* USaveDataMetrics_TA::pClassPointer = NULL;

// Class TAGame.SpectatorVolume_TA
// 0x0000 (0x0228 - 0x0228)
class ASpectatorVolume_TA : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75969 ];

		return pClassPointer;
	};

};

UClass* ASpectatorVolume_TA::pClassPointer = NULL;

// Class TAGame.PlayerBanner_TA
// 0x0048 (0x0090 - 0x0048)
class UPlayerBanner_TA : public UComponent
{
public:
	class UProductAsset_PlayerBanner_TA*               Asset;                                            		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     MovieReference;                                   		// 0x004C (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture2D*                                  TopLayer;                                         		// 0x0058 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	class UTexture2D*                                  PaintableLayer;                                   		// 0x005C (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	class UTexture2D*                                  TintableLayer;                                    		// 0x0060 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bColorable : 1;                                   		// 0x0064 (0x0004) [0x0000000040002000] [0x00000001] ( CPF_Transient | CPF_EditInlineNotify )
	int                                                ColorID;                                          		// 0x0068 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	int                                                ColorValue;                                       		// 0x006C (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	int                                                DefaultColorValue;                                		// 0x0070 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	int                                                PaintColor;                                       		// 0x0074 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0078 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PlayerBanner_TA.InstanceID
	TArray< class UProductAttribute_TA* >              Attributes;                                       		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UProfile_TA*                                 Profile;                                          		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75971 ];

		return pClassPointer;
	};

	void ClearBanner ( );
	struct FLinearColor GammaCorrectColor ( struct FLinearColor InColor, float Gamma );
	void ApplyColorID ( int InColorID );
	void UpdateBanner ( );
	void HandleLoaded ( struct FAssetLoadResult Result );
	void InitWithProductID ( int InProductID, TArray< class UProductAttribute_TA* > InAttributes );
	void HandleProfileDataChanged ( class UPlayerBannerSave_TA* InData );
	void Init ( class UProfile_TA* InProfile );
};

UClass* UPlayerBanner_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_UserColorable_TA
// 0x0010 (0x0064 - 0x0054)
class UProductAttribute_UserColorable_TA : public UProductAttribute_TA
{
public:
	struct FLinearColor                                DefaultColor;                                     		// 0x0054 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 75995 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_UserColorable_TA::pClassPointer = NULL;

// Class TAGame.PlayerBannerSave_TA
// 0x002C (0x0068 - 0x003C)
class UPlayerBannerSave_TA : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x003C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PlayerBannerSave_TA.InstanceID
	int                                                SelectedColorID;                                  		// 0x0044 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventBannerInstanceChanged__Delegate;           		// 0x0048 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x004C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBannerColorChanged__Delegate;              		// 0x0058 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x005C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76011 ];

		return pClassPointer;
	};

	TArray< class UProductAttribute_TA* > GetAttributes ( TArray< class UProductAttribute_TA* >* ArrayInitializer_03CB97B842EE82383DE87F8DAF4890DF );
	void Validate ( class UProfile_TA* ForProfile );
	void SetSelectedColor ( int InColorID );
	void SetInstanceID ( );
	void EventBannerColorChanged ( class UPlayerBannerSave_TA* BannerSave );
	void EventBannerInstanceChanged ( class UPlayerBannerSave_TA* BannerSave );
};

UClass* UPlayerBannerSave_TA::pClassPointer = NULL;

// Class TAGame.PlayerInputSequence_TA
// 0x003C (0x00C4 - 0x0088)
class UPlayerInputSequence_TA : public UInteraction
{
public:
	TArray< struct FName >                             Sequence;                                         		// 0x0088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ConsoleCommand;                                   		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Timeout;                                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOrderMatters : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheat : 1;                                       		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRemoveOnComplete : 1;                            		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRemoveAfterSplashScreen : 1;                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCaptureInput : 1;                                		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bConfirm : 1;                                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPrimaryPlayerOnly : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FString                                     Message;                                          		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTickComponent_X*                            Timer;                                            		// 0x00B4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FName >                             CurrentSequence;                                  		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76025 ];

		return pClassPointer;
	};

	void OnCommandConfirmed ( class UGFxModal_X* Modal );
	void RemoveSequence ( );
	void OnSequenceCompleted ( );
	void ResetSequence ( );
	bool HandleFinalInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void SwapIndexes ( struct FName A, struct FName B );
	void Initialize ( );
	bool ShouldInstance ( class APlayerController* ForPC );
};

UClass* UPlayerInputSequence_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_Menu_TA
// 0x000C (0x035C - 0x0350)
class UPlayerInput_Menu_TA : public UPlayerInput_TA
{
public:
	TArray< struct FName >                             AllowedActions;                                   		// 0x0350 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76068 ];

		return pClassPointer;
	};

	void RemoveAllActionsBut ( TArray< struct FName >* KeepActions, TArray< struct FPlayerBinding >* OutBindings );
	void HandleActiveBindingsChanged ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_Menu_TA::pClassPointer = NULL;

// Class TAGame.PlayerController_Replay_TA
// 0x0004 (0x067C - 0x0678)
class APlayerController_Replay_TA : public APlayerControllerBase_TA
{
public:
	class AHUD*                                        SplitscreenHUDArchetype;                          		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76069 ];

		return pClassPointer;
	};

	void eventReceivedPlayer ( );
};

UClass* APlayerController_Replay_TA::pClassPointer = NULL;

// Class TAGame.PlatformMetrics_TA
// 0x0004 (0x0058 - 0x0054)
class UPlatformMetrics_TA : public UMetricsGroup_X
{
public:
	unsigned long                                      bDroveWithGP : 1;                                 		// 0x0054 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDroveWithKBM : 1;                                		// 0x0054 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76135 ];

		return pClassPointer;
	};

	void DriveWithKBM ( );
	void DriveWithGP ( );
	void RecordDriveInput ( class UPlayerInput_TA* PlayerInput );
	void RecordInput ( class UPlayerInput_TA* PlayerInput );
};

UClass* UPlatformMetrics_TA::pClassPointer = NULL;

// Class TAGame.NetworkJitterSettings_TA
// 0x0014 (0x0050 - 0x003C)
class UNetworkJitterSettings_TA : public UObject
{
public:
	float                                              MinTimeBetweenPackets;                            		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTimeBetweenPackets;                            		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BufferStdDeviations;                              		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBufferTime;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateRate;                                       		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76136 ];

		return pClassPointer;
	};

};

UClass* UNetworkJitterSettings_TA::pClassPointer = NULL;

// Class TAGame.ProductMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UProductMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76186 ];

		return pClassPointer;
	};

	struct FPaintMetricsData GetPaintMetricsData ( struct FLoadoutTeamPaint Paint );
	void PlayWithLoadout ( struct FUniqueNetId PlayerID, unsigned long bPrimaryPlayer, int Team, TArray< int > Products, struct FPaintMetricsData Paint );
	void RecordLoadout ( class ULocalPlayer* Player, int Team, class ULoadout_TA* Loadout, int PlayerBannerID );
	void RecordLoadoutSet ( class ULocalPlayer* Player, class UProfile_TA* Profile );
};

UClass* UProductMetrics_TA::pClassPointer = NULL;

// Class TAGame.Interface_GameEditor_TA
// 0x0000 (0x003C - 0x003C)
class UInterface_GameEditor_TA : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76485 ];

		return pClassPointer;
	};

	void EditingEnd ( );
	void EditingBegin ( );
	void NotifyOnSelectionChange ( struct FScriptDelegate Callback );
	bool SerializedDataIsEqual ( struct FString S0, struct FString S1 );
	void Deserialize ( class UJsonObject* Data );
	struct FString Serialize ( );
	struct FVector CollisionExtent ( );
	struct FVector GetCameraPositionOffset ( );
	struct FVector GetGrabRotationOffset ( struct FRotator CurrentRotation );
	void ModfiyBlendedRotation ( struct FRotator ControllerRot, struct FRotator DeltaRot, struct FRotator* out_Rotation );
	struct FRotator GetDesiredRotation ( );
	struct FVector EditorGetLocation ( );
	bool EditorSetLocation ( struct FVector NewLocation );
	bool EditorMoveToLocation ( struct FVector NewLocation );
	bool CanEdit ( );
	struct FRotator EditorGetRotation ( );
	void EditorSetRotation ( struct FRotator NewRotation );
	void EditorSetRotationFromInput ( float Forward, float Strafe );
	void EventSelectionChange ( class UInterface_GameEditor_TA* Object, unsigned long bSelected );
};

UClass* UInterface_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.Ball_GameEditor_TA
// 0x0098 (0x08A8 - 0x0810)
class ABall_GameEditor_TA : public ABall_TA
{
public:
	struct FVector                                     StartLocation;                                    		// 0x0810 (0x000C) [0x0000000000000000]              
	float                                              VelocityStartSpeed;                               		// 0x081C (0x0004) [0x0000000000000000]              
	struct FRotator                                    VelocityStartRotation;                            		// 0x0820 (0x000C) [0x0000000000000000]              
	float                                              BallResetTime;                                    		// 0x082C (0x0004) [0x0000000000000000]              
	float                                              FirstHitTime;                                     		// 0x0830 (0x0004) [0x0000000000000000]              
	struct FVector                                     CameraPositionOffset;                             		// 0x0834 (0x000C) [0x0000000000000000]              
	class AFXActor_X*                                  EditingFXActorArchetype;                          		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  EditingFXActor;                                   		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUpdateTrajectory : 1;                            		// 0x0848 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FVector                                     ToLocation;                                       		// 0x084C (0x000C) [0x0000000000000000]              
	struct FScriptDelegate                             __EventBallWentThruRing__Delegate;                		// 0x0858 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x085C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventVelocityStartSpeedChanged__Delegate;       		// 0x0868 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x086C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFire__Delegate;                            		// 0x0878 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x087C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReset__Delegate;                           		// 0x0888 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x088C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                 		// 0x0898 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x089C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76491 ];

		return pClassPointer;
	};

	void EditingEnd ( );
	void EditingBegin ( );
	void NotifyOnSelectionChange ( struct FScriptDelegate Callback );
	struct FVector GetCameraPositionOffset ( );
	struct FVector CollisionExtent ( );
	void ModfiyBlendedRotation ( struct FRotator ControllerRot, struct FRotator DeltaRot, struct FRotator* out_Rotation );
	bool CanEdit ( );
	struct FRotator EditorGetRotation ( );
	struct FVector EditorGetLocation ( );
	bool SerializedDataIsEqual ( struct FString S0, struct FString S1 );
	void Deserialize ( class UJsonObject* Data );
	struct FString Serialize ( );
	struct FVector GetGrabRotationOffset ( struct FRotator CurrentRotation );
	void eventTick ( float DeltaTime );
	struct FRotator GetDesiredRotation ( );
	void EditorSetRotationFromInput ( float Forward, float Strafe );
	void EditorSetRotation ( struct FRotator NewRotation );
	bool EditorSetLocation ( struct FVector NewLocation );
	bool EditorMoveToLocation ( struct FVector Loc );
	void WentThruRing ( );
	void OnWentThruRing ( );
	void NotifyIfWentThruRing ( );
	bool IsRoundActive ( );
	void OnCarTouch ( class ACar_TA* HitCar, unsigned char HitType );
	void OnHitWorld ( struct FVector HitLoc, struct FVector HitNormal, class UPhysicalMaterial* PhysMat );
	void eventReset ( );
	void Fire ( );
	struct FVector GetBallFireVelocity ( );
	void AddVelocityStartSpeed ( float Amount );
	bool TakeDamage_X ( class UDamageComponent_X* Damage );
	void AddVelocityStartRotation ( struct FRotator Amount, float MaxDegrees );
	void RecordCarHit ( class ACar_TA* HitCar, struct FVector HitLocation, struct FVector HitNormal, unsigned char HitType );
	bool ShouldDrawTrajectory ( );
	struct FVector GetTrajectoryStartVelocity ( );
	struct FVector GetTrajectoryStartLocation ( );
	bool CanEverShowTrajectory ( );
	void InitFX ( );
	void eventPostBeginPlay ( );
	void EventSelectionChange ( class UInterface_GameEditor_TA* Object, unsigned long bSelected );
	void EventReset ( class ABall_GameEditor_TA* Ball );
	void EventFire ( class ABall_GameEditor_TA* Ball );
	void EventVelocityStartSpeedChanged ( class ABall_GameEditor_TA* Ball );
	void EventBallWentThruRing ( class ABall_GameEditor_TA* Ball );
};

UClass* ABall_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.GameEditor_Actor_TA
// 0x0034 (0x0230 - 0x01FC)
class AGameEditor_Actor_TA : public AActor
{
public:
	class UPrimitiveComponent*                         Mesh;                                             		// 0x01FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     RotateCameraOffset;                               		// 0x0200 (0x000C) [0x0000000000000000]              
	float                                              MaxRotatePitch;                                   		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              MaxInputRotatePitch;                              		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      bModifiyPitchOnEditorSetRotation : 1;             		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_X*                                  FXActor;                                          		// 0x021C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                 		// 0x0220 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0224 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76552 ];

		return pClassPointer;
	};

	void EditingEnd ( );
	void EditingBegin ( );
	void NotifyOnSelectionChange ( struct FScriptDelegate Callback );
	struct FVector EditorGetLocation ( );
	struct FRotator EditorGetRotation ( );
	bool CanEdit ( );
	bool SerializedDataIsEqual ( struct FString S0, struct FString S1 );
	void Deserialize ( class UJsonObject* Data );
	struct FString Serialize ( );
	struct FVector GetCameraPositionOffset ( );
	struct FVector CollisionExtent ( );
	void ModfiyBlendedRotation ( struct FRotator ControllerRot, struct FRotator DeltaRot, struct FRotator* out_Rotation );
	struct FVector GetGrabRotationOffset ( struct FRotator CurrentRotation );
	struct FRotator GetDesiredRotation ( );
	void ReInitPhysics ( );
	void ReInitPhysicsDelayed ( );
	bool EditorSetLocation ( struct FVector NewLocation );
	bool EditorMoveToLocation ( struct FVector NewLocation );
	void AddToRotation ( struct FRotator Rot, float MaxDegrees );
	void EditorSetRotationFromInput ( float Forward, float Strafe );
	void EditorSetRotation ( struct FRotator NewRotation );
	void InitFX ( );
	void eventPostBeginPlay ( );
	void EventSelectionChange ( class UInterface_GameEditor_TA* Object, unsigned long bSelected );
};

UClass* AGameEditor_Actor_TA::pClassPointer = NULL;

// Class TAGame.GameEditor_Trigger_TA
// 0x0014 (0x0244 - 0x0230)
class AGameEditor_Trigger_TA : public AGameEditor_Actor_TA
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __OnTriggerTouched__Delegate;                     		// 0x0234 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0238 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76551 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void EnableTrigger ( unsigned long bEnable );
	void OnTriggerTouched ( class AGameEditor_Trigger_TA* Trigger, class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* AGameEditor_Trigger_TA::pClassPointer = NULL;

// Class TAGame.GameEditor_Ring_TA
// 0x0024 (0x0268 - 0x0244)
class AGameEditor_Ring_TA : public AGameEditor_Trigger_TA
{
public:
	TArray< struct FActorTouchRecordData >             ActorTouchRecords;                                		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxRadius;                                        		// 0x0250 (0x0004) [0x0000000000000000]              
	unsigned char                                      DetectionType;                                    		// 0x0254 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnRingScored__Delegate;                         		// 0x0258 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x025C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76550 ];

		return pClassPointer;
	};

	void ModfiyBlendedRotation ( struct FRotator ControllerRot, struct FRotator DeltaRot, struct FRotator* out_Rotation );
	void EnableTrigger ( unsigned long bEnable );
	struct FRotator GetDesiredRotation ( );
	void Tick ( float DeltaTime );
	struct FVector GetTouchDirection ( class AActor* A );
	void OnActorWentThruRing ( int RecordIndex );
	bool ActorWentThruRing ( struct FActorTouchRecordData TouchRecord );
	void eventUnTouch ( class AActor* Other );
	bool AddToBallTouchRecords ( struct FActorTouchRecordData NewTouchRecord );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool IsTouchableActor ( class AActor* A );
	void eventPostBeginPlay ( );
	void OnRingScored ( class AGameEditor_Ring_TA* Ring, class AActor* Other );
};

UClass* AGameEditor_Ring_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameSkillGroups_TA
// 0x0000 (0x00A0 - 0x00A0)
class UOnlineGameSkillGroups_TA : public UOnlineGameSkillGroups_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76646 ];

		return pClassPointer;
	};

	void ClientSetSkill ( TArray< struct FUniqueNetId > PlayerIDs, int Playlist, struct FTierSkillRating Rating );
	void ReplicateGroupSkillRating ( int Playlist, TArray< struct FUniqueNetId >* Party );
	void ReplicateSkillUpdate ( class UMatchRecorder_X* MatchRecorder );
	void HandleSkillsUpdateFailed ( class URPC_X* RPCObject );
	void HandleSkillsUpdated ( class URPC_X* RPCObject );
};

UClass* UOnlineGameSkillGroups_TA::pClassPointer = NULL;

// Class TAGame.GameMusicComponent_TA
// 0x0000 (0x006C - 0x006C)
class UGameMusicComponent_TA : public UTickComponent_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76756 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void Init ( );
};

UClass* UGameMusicComponent_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_Game_TA
// 0x0000 (0x0350 - 0x0350)
class UPlayerInput_Game_TA : public UPlayerInput_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76763 ];

		return pClassPointer;
	};

	void HandleActiveBindingsChanged ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_Game_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_Replay_TA
// 0x0000 (0x0350 - 0x0350)
class UPlayerInput_Replay_TA : public UPlayerInput_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76923 ];

		return pClassPointer;
	};

	void HandleActiveBindingsChanged ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_Replay_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_Spectator_TA
// 0x0000 (0x0350 - 0x0350)
class UPlayerInput_Spectator_TA : public UPlayerInput_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76927 ];

		return pClassPointer;
	};

	void HandleActiveBindingsChanged ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_Spectator_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_InputSequence_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_InputSequence_TA : public USequenceEvent
{
public:
	struct FName                                       SequenceName;                                     		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76970 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_InputSequence_TA::pClassPointer = NULL;

// Class TAGame.PointInSpace_TA
// 0x0008 (0x0204 - 0x01FC)
class APointInSpace_TA : public AActor
{
public:
	class USpriteComponent*                            Sprite;                                           		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UArrowComponent*                             Arrow;                                            		// 0x0200 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76977 ];

		return pClassPointer;
	};

};

UClass* APointInSpace_TA::pClassPointer = NULL;

// Class TAGame.CameraSettingsActorCopy_TA
// 0x0000 (0x0238 - 0x0238)
class ACameraSettingsActorCopy_TA : public ACameraSettingsActor_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77087 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* ACameraSettingsActorCopy_TA::pClassPointer = NULL;

// Class TAGame.__PRI_TA__ValidateOnlineLoadout
// 0x0008 (0x0044 - 0x003C)
class U__PRI_TA__ValidateOnlineLoadout : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x003C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__PRI_TA__ValidateOnlineLoadout.InstanceID

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77438 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FOnlineProductStat S );
};

UClass* U__PRI_TA__ValidateOnlineLoadout::pClassPointer = NULL;

// Class TAGame.ProductAttribute_PreviewOnly_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_PreviewOnly_TA : public UProductAttribute_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77468 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_PreviewOnly_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_AntennaPack_TA
// 0x0000 (0x007C - 0x007C)
class UProductAsset_AntennaPack_TA : public UProductAsset_Pack_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77544 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_AntennaPack_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_CountryFlags_TA
// 0x0000 (0x007C - 0x007C)
class UProductAsset_CountryFlags_TA : public UProductAsset_Pack_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77618 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_CountryFlags_TA::pClassPointer = NULL;

// Class TAGame.ProductAsset_UnderGlow_TA
// 0x0000 (0x0090 - 0x0090)
class UProductAsset_UnderGlow_TA : public UProductAsset_Attachment_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77667 ];

		return pClassPointer;
	};

};

UClass* UProductAsset_UnderGlow_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_BoostTime_TA
// 0x000C (0x0078 - 0x006C)
class UProductStat_BoostTime_TA : public UProductStat_TA
{
public:
	class ACarComponent_Boost_TA*                      BoostComponent;                                   		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BoostStartTime;                                   		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LeftoverTime;                                     		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77809 ];

		return pClassPointer;
	};

	struct FString GetDisplayValue ( class APlayerControllerBase_TA* ForPC, int StatValue );
	void FinalizeTime ( );
	void HandleActivationChanged ( class ACarComponent_TA* InComponent );
	void HandleBoostAdded ( class UObject* BoostObject );
	void SetCar ( class ACar_TA* InCar );
};

UClass* UProductStat_BoostTime_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_SoccarEventBase_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_SoccarEventBase_TA : public UProductStat_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77827 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
	void HandleStatEvent ( class APRI_TA* InPRI, class UStatEvent_TA* StatEvent, int Count );
	void ShutDown ( );
	void OnInit ( );
};

UClass* UProductStat_SoccarEventBase_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Demolishes_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Demolishes_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77837 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Demolishes_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_DistanceDriven_TA
// 0x000C (0x0078 - 0x006C)
class UProductStat_DistanceDriven_TA : public UProductStat_TA
{
public:
	struct FVector                                     OldLocation;                                      		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77842 ];

		return pClassPointer;
	};

	struct FString GetDisplayValue ( class APlayerControllerBase_TA* ForPC, int StatValue );
	void UpdateDistance ( );
	void SetCar ( class ACar_TA* InCar );
};

UClass* UProductStat_DistanceDriven_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_GamesPlayed_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_GamesPlayed_TA : public UProductStat_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77853 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* UProductStat_GamesPlayed_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Goals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Goals_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77856 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Goals_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Saves_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Saves_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77861 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Saves_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_TimePlayed_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_TimePlayed_TA : public UProductStat_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77866 ];

		return pClassPointer;
	};

	struct FString GetDisplayValue ( class APlayerControllerBase_TA* ForPC, int StatValue );
	void UpdateTime ( );
	void SetCar ( class ACar_TA* InCar );
};

UClass* UProductStat_TimePlayed_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Wins_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Wins_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77875 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Wins_TA::pClassPointer = NULL;

// Class TAGame.PlayerBindingUtils_TA
// 0x0000 (0x003C - 0x003C)
class UPlayerBindingUtils_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77917 ];

		return pClassPointer;
	};

	void RemoveDuplicateBindings ( TArray< struct FPlayerBinding >* Bindings );
	void SetDefaultRemappable ( struct FName Action, TArray< struct FPlayerBinding >* DefaultBindings, TArray< struct FPlayerBinding >* Bindings );
	void SetDefaultPressType ( struct FName Action, TArray< struct FPlayerBinding >* DefaultBindings, TArray< struct FPlayerBinding >* Bindings );
	void RemoveBinding ( struct FName Action, TArray< struct FPlayerBinding >* Bindings );
	void ResetBinding ( struct FName Action, TArray< struct FPlayerBinding >* DefaultBindings, TArray< struct FPlayerBinding >* Bindings );
};

UClass* UPlayerBindingUtils_TA::pClassPointer = NULL;

// Class TAGame.ProfileVersions_TA
// 0x0000 (0x003C - 0x003C)
class UProfileVersions_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77919 ];

		return pClassPointer;
	};

	void ResetAccountSelectNNX ( class UProfile_TA* Profile );
	void MusicPlaylistSelector ( class UProfile_TA* Profile );
	void PaintFinishInLoadouts ( class UProfile_TA* Profile );
	void ChatGamepadBindingConsoleOnly ( class UProfile_TA* Profile );
	void CarColors ( class UProfile_TA* Profile );
	void TeamLoadouts ( class UProfile_TA* Profile );
	void ChatSettings ( class UProfile_TA* Profile );
	void CustomMatchSettings ( class UProfile_TA* Profile );
	void DingoChatFix ( class UProfile_TA* Profile );
	void ChatRebind ( class UProfile_TA* Profile );
	void SaveReplayInput ( class UProfile_TA* Profile );
	void LoadoutPlayerTitle ( class UProfile_TA* Profile );
	void Update ( class UProfile_TA* Profile );
};

UClass* UProfileVersions_TA::pClassPointer = NULL;

// Class TAGame.GameTags_TA
// 0x000C (0x0048 - 0x003C)
class UGameTags_TA : public UObject
{
public:
	TArray< struct FKeyValuePair >                     Tags;                                             		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77980 ];

		return pClassPointer;
	};

	void InitFromExisting ( TArray< struct FKeyValuePair >* InTags );
	void RemoveValue ( struct FString Value );
	struct FString CreateGameTagsStr ( );
	void SetValue ( struct FString Key, struct FString Value );
	struct FString GetValue ( struct FString Key );
	void ResetTags ( );
	void InitTags ( struct FString AllTags );
};

UClass* UGameTags_TA::pClassPointer = NULL;

// Class TAGame.MapPrefsMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UMapPrefsMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78031 ];

		return pClassPointer;
	};

	void MapPrefs ( TArray< struct FMapPrefsMetric > Playlists );
	struct FMapPrefsMetric GetMetric ( struct FPlaylistMapPrefs* InPrefs );
	TArray< struct FMapPrefsMetric > GetAllMetrics ( TArray< struct FPlaylistMapPrefs >* InMapPrefs );
	void RecordMapPrefs ( TArray< struct FPlaylistMapPrefs >* InMapPrefs );
};

UClass* UMapPrefsMetrics_TA::pClassPointer = NULL;

// Class TAGame.__Profile_TA__ValidateLoadoutsWithProduct
// 0x0008 (0x0044 - 0x003C)
class U__Profile_TA__ValidateLoadoutsWithProduct : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x003C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__Profile_TA__ValidateLoadoutsWithProduct.OnlineID

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78129 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class ULoadoutSet_TA* L );
};

UClass* U__Profile_TA__ValidateLoadoutsWithProduct::pClassPointer = NULL;

// Class TAGame.VehiclePartSkeletalMeshComponent_TA
// 0x0000 (0x064C - 0x064C)
class UVehiclePartSkeletalMeshComponent_TA : public USkeletalMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78246 ];

		return pClassPointer;
	};

};

UClass* UVehiclePartSkeletalMeshComponent_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsPlayerClear_TA
// 0x0048 (0x00E4 - 0x009C)
class URPC_ProductsPlayerClear_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78712 ];

		return pClassPointer;
	};

	class URPC_ProductsPlayerClear_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsPlayerClear_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsPlayerGet_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_ProductsPlayerGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                ProductData;                                      		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78718 ];

		return pClassPointer;
	};

	void eventOnSuccess ( );
	class URPC_ProductsPlayerGet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsPlayerGet_TA::pClassPointer = NULL;

// Class TAGame.RPC_SaveDataClear_TA
// 0x0048 (0x00E4 - 0x009C)
class URPC_SaveDataClear_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78736 ];

		return pClassPointer;
	};

	class URPC_SaveDataClear_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_SaveDataClear_TA::pClassPointer = NULL;

// Class TAGame.RPC_SaveDataGet_TA
// 0x0058 (0x00F4 - 0x009C)
class URPC_SaveDataGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	class UOnlineSaveData_TA*                          SaveData;                                         		// 0x00E4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UOnlineProfile_TA* >                 Profiles;                                         		// 0x00E8 (0x000C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78742 ];

		return pClassPointer;
	};

	class URPC_SaveDataGet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_SaveDataGet_TA::pClassPointer = NULL;

// Class TAGame.RPC_SaveDataUpdate_TA
// 0x0058 (0x00F4 - 0x009C)
class URPC_SaveDataUpdate_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	class UOnlineSaveData_TA*                          SaveData;                                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< class UOnlineProfile_TA* >                 Profiles;                                         		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78751 ];

		return pClassPointer;
	};

	class URPC_SaveDataUpdate_TA* AddProfile ( class UOnlineProfile_TA* Profile );
	class URPC_SaveDataUpdate_TA* SetSaveData ( class UOnlineSaveData_TA* InSaveData );
	class URPC_SaveDataUpdate_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_SaveDataUpdate_TA::pClassPointer = NULL;

// Class TAGame.InitialUserSettingsSender_TA
// 0x000C (0x0048 - 0x003C)
class UInitialUserSettingsSender_TA : public UObject
{
public:
	unsigned long                                      bSent : 1;                                        		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	class ULocalPlayer_TA*                             Player;                                           		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxShell_X*                                 Shell;                                            		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78819 ];

		return pClassPointer;
	};

	bool __InitialUserSettingsSender_TA__TryToSendInitialSettings ( class UGFxData_UserSetting_TA* S );
	void TryToSendInitialSettings ( TArray< class UGFxData_UserSetting_TA* >* FilterLocal_60479F674C20D0638EA7BB8D54AFF663 );
	void HandlePsyNetLoginChange ( class UOnlinePlayerAuthentication_X* Auth );
	void HandleGFxShellCreated ( class UGFxEngine_X* Engine, class UGFxShell_X* InShell );
	void Init ( class ULocalPlayer_TA* InPlayer );
};

UClass* UInitialUserSettingsSender_TA::pClassPointer = NULL;

// Class TAGame.SaveDataVersions_TA
// 0x0000 (0x003C - 0x003C)
class USaveDataVersions_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78825 ];

		return pClassPointer;
	};

	void __SaveDataVersions_TA__UpdateNewOnlineProductsRemoved ( int Id );
	void UpdateSoundSettings ( class USaveData_TA* SaveData );
	void UpdateInvisitek ( class USaveData_TA* SaveData );
	void UpdateNewOnlineProductsRemoved ( class USaveData_TA* SaveData );
	void UpdateLightShafts ( class USaveData_TA* SaveData );
	void Update ( class USaveData_TA* SaveData );
};

UClass* USaveDataVersions_TA::pClassPointer = NULL;

// Class TAGame.EngineAudioUnlocker_TA
// 0x0000 (0x003C - 0x003C)
class UEngineAudioUnlocker_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78850 ];

		return pClassPointer;
	};

	class UProduct_TA* __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio ( struct FBodyToEngineAudioPair Pair );
	bool __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio ( class UProduct_TA* Product );
	bool __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio1 ( class UProduct_TA* Product );
	bool __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio2 ( class UProduct_TA* Product );
	class UProduct_TA* __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio3 ( int Id );
	int __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio4 ( class UOnlineProduct_TA* Product );
	class UProduct_TA* __EngineAudioUnlocker_TA__UnlockEnginesForBody ( struct FBodyToEngineAudioPair Pair );
	void UnlockEnginesForBody ( class USaveData_TA* SaveData, class UProduct_TA* Body, TArray< struct FBodyToEngineAudioPair >* FilterLocal_DA3EBAB145CD3865663E46B4A76073B7, TArray< class UProduct_TA* >* MapLocal_9DA492BE4870A11631A727BF0331B25B, TArray< class UProduct_TA* >* DistinctLocal_3D6A8692412D16A49E5515B22CC69311 );
	void FixupUnlockedEngineAudio ( class USaveData_TA* SaveData, TArray< int >* MapLocal_FADCFBDD4FEB1B0D684805AD58F2218F, TArray< class UProduct_TA* >* MapLocal_5ABEDDDC4356ED9A10F630918988CD01, TArray< class UProduct_TA* >* FilterLocal_7C6CDD4E468B93C1A6A651A8EE56F319, TArray< class UProduct_TA* >* DistinctLocal_0D50B11840658D244512A08C1BA995E7, TArray< class UProduct_TA* >* FilterLocal_E4339413451D05EE0F885AA6E7DC0724, TArray< class UProduct_TA* >* FilterLocal_C8B93DC448419F02EB6E1B854991CB97, TArray< struct FBodyToEngineAudioPair >* FilterLocal_BAF3726E458AAD0E004381B075A2AC34, TArray< class UProduct_TA* >* MapLocal_9567F61A4E92BA47805D2885B978DC05, TArray< class UProduct_TA* >* DistinctLocal_DA2F20FF4CD1321D7A5A30A2514305FD, TArray< class UProduct_TA* >* FilterLocal_59966CA64A1B6496AF4132AACF95807E );
};

UClass* UEngineAudioUnlocker_TA::pClassPointer = NULL;

// Class TAGame.RPC_SchematicResourcesGet_TA
// 0x004C (0x00E8 - 0x009C)
class URPC_SchematicResourcesGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                TotalSchematicResources;                          		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79098 ];

		return pClassPointer;
	};

	class URPC_SchematicResourcesGet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_SchematicResourcesGet_TA::pClassPointer = NULL;

// Class TAGame.__SaveData_TA__ValidateLoadoutsWithProduct
// 0x0008 (0x0044 - 0x003C)
class U__SaveData_TA__ValidateLoadoutsWithProduct : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x003C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__SaveData_TA__ValidateLoadoutsWithProduct.OnlineID

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79150 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UProfile_TA* P );
};

UClass* U__SaveData_TA__ValidateLoadoutsWithProduct::pClassPointer = NULL;

// Class TAGame.Scout_TA
// 0x0000 (0x050C - 0x050C)
class AScout_TA : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79262 ];

		return pClassPointer;
	};

};

UClass* AScout_TA::pClassPointer = NULL;

// Class TAGame.ScriptedTextureComponent_TA
// 0x0020 (0x008C - 0x006C)
class UScriptedTextureComponent_TA : public UActorComponent_X
{
public:
	struct FVector                                     Resolution;                                       		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFaceCamera : 1;                                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UStaticMeshComponent*                        Mesh;                                             		// 0x0080 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UScriptedTexture*                            TextureTarget;                                    		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerController*                           Viewer;                                           		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79294 ];

		return pClassPointer;
	};

	void FaceViewer ( );
	void eventTick ( float DeltaTime );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UScriptedTextureComponent_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_AddGameBall_TA
// 0x0020 (0x011C - 0x00FC)
class USeqAct_AddGameBall_TA : public USequenceAction
{
public:
	class ABall_TA*                                    SpawnedBall;                                      		// 0x00FC (0x0004) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	class AActor*                                      SpawnTransform;                                   		// 0x0104 (0x0004) [0x0000000000000000]              
	class AActor*                                      PlacedBall;                                       		// 0x0108 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWake : 1;                                        		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     BallArchetype;                                    		// 0x0110 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79419 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_AddGameBall_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_ApplyCarProducts_TA
// 0x0038 (0x0134 - 0x00FC)
class USeqAct_ApplyCarProducts_TA : public USequenceAction
{
public:
	TArray< class UProductAsset_TA* >                  Assets;                                           		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                TeamColor;                                        		// 0x0108 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AccentColor;                                      		// 0x0118 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_PaintFinish_TA*                CustomFinish;                                     		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACarPreviewActor_TA*                         CarPreviewActor;                                  		// 0x0130 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79430 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ApplyCarProducts_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_ControlCarMovement_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ControlCarMovement_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79445 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ControlCarMovement_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_DisplayMessage_TA
// 0x0038 (0x0134 - 0x00FC)
class USeqAct_DisplayMessage_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FString                                     Title;                                            		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Body;                                             		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShowButtonOne : 1;                               		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowButtonTwo : 1;                               		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FString                                     ButtonOneTitle;                                   		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ButtonTwoTitle;                                   		// 0x0128 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79451 ];

		return pClassPointer;
	};

	void HandleButtonTwoClick ( class UGFxModal_X* Modal );
	void HandleButtonOneClick ( class UGFxModal_X* Modal );
	void DisplayMessage ( class APlayerController_TA* PC );
	void eventActivated ( );
};

UClass* USeqAct_DisplayMessage_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_DriveSpline_TA
// 0x001C (0x012C - 0x0110)
class USeqAct_DriveSpline_TA : public USeqAct_Latent
{
public:
	float                                              ForwardOffset;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASplineActor*                                Spline;                                           		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Throttle;                                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FCarSplineData >                    Cars;                                             		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79470 ];

		return pClassPointer;
	};

	float GetSteer ( class ACar_TA* Car, struct FVector Destination );
	struct FCarSplineData DriveSpline ( struct FCarSplineData CarData, float DeltaTime );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* USeqAct_DriveSpline_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_EndTutorial_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_EndTutorial_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79506 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_EndTutorial_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_ExplodeGameBall_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ExplodeGameBall_TA : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79512 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ExplodeGameBall_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_ExportMatinee_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ExportMatinee_TA : public USequenceAction
{
public:
	struct FString                                     Filename;                                         		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                RecordTime;                                       		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79519 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ExportMatinee_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetDetailMode_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_GetDetailMode_TA : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79525 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetDetailMode_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetSaveData_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_GetSaveData_TA : public USequenceAction
{
public:
	class USaveData_TA*                                SaveData;                                         		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79528 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetSaveData_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetTutorialType_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_GetTutorialType_TA : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79533 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetTutorialType_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetWeatherEnabled_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_GetWeatherEnabled_TA : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79537 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetWeatherEnabled_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GiveBoost_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_GiveBoost_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              BoostAmount;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79543 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GiveBoost_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_IsActionPressed_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_IsActionPressed_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FName                                       ActionName;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79550 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_IsActionPressed_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_IsHumanPlayer_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_IsHumanPlayer_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79558 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_IsHumanPlayer_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_NotifyEventOnTutorial_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_NotifyEventOnTutorial_TA : public USequenceAction
{
public:
	struct FString                                     EventName;                                        		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Instigator;                                       		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79564 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_NotifyEventOnTutorial_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_ScreenFade
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ScreenFade : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79571 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ScreenFade::pClassPointer = NULL;

// Class TAGame.SeqAct_ScreenFade_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ScreenFade_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79579 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ScreenFade_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetBallCamTarget_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetBallCamTarget_TA : public USequenceAction
{
public:
	class AActor*                                      Target;                                           		// 0x00FC (0x0004) [0x0000000000000000]              
	class APlayerController_TA*                        Instigator;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceBallCamTarget : 1;                          		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79587 ];

		return pClassPointer;
	};

	void SetBallCamTarget ( unsigned long bEnable );
	void eventActivated ( );
};

UClass* USeqAct_SetBallCamTarget_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetBallMaterial_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetBallMaterial_TA : public USequenceAction
{
public:
	class ABall_TA*                                    Ball;                                             		// 0x00FC (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          Material;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialID;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79598 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetBallMaterial_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetCarTransform_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetCarTransform_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	class AActor*                                      Transform;                                        		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79604 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetCarTransform_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetMatInstParam_Vector
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetMatInstParam_Vector : public USequenceAction
{
public:
	struct FName                                       ParamName;                                        		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AMaterialInstanceActor*                      MatInstActor;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VectorValue;                                      		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79632 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetMatInstParam_Vector::pClassPointer = NULL;

// Class TAGame.SeqAct_SetTutorialGameEvent_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetTutorialGameEvent_TA : public USequenceAction
{
public:
	struct FString                                     TutorialType;                                     		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79645 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetTutorialGameEvent_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetVehicleInput_TA
// 0x0020 (0x011C - 0x00FC)
class USeqAct_SetVehicleInput_TA : public USequenceAction
{
public:
	struct FVehicleInputs                              Input;                                            		// 0x00FC (0x0020) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79651 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetVehicleInput_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SpawnBot_TA
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_SpawnBot_TA : public USequenceAction
{
public:
	class ACar_TA*                                     SpawnedBot;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	class AActor*                                      SpawnTransform;                                   		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              SkillLevel;                                       		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableAllLogic : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCollideWithBall : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                TeamIndex;                                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79657 ];

		return pClassPointer;
	};

	void ChooseTeam ( class AAIController_TA* AIC );
	void eventActivated ( );
};

UClass* USeqAct_SpawnBot_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SpawnCarColors_TA
// 0x0054 (0x0150 - 0x00FC)
class USeqAct_SpawnCarColors_TA : public USequenceAction
{
public:
	struct FSpawnCarColorSet                           AccentColors;                                     		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AccentTeamColor;                                  		// 0x0104 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FSpawnCarColorSet                           BlueTeamColors;                                   		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FSpawnCarColorSet                           OrangeTeamColors;                                 		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TeamAccentColor;                                  		// 0x0124 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Body_TA*                       Body;                                             		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UProductAsset_Skin_TA*                       Skin;                                             		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CarYaw;                                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarOffsetX;                                       		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarOffsetY;                                       		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SetOffsetY;                                       		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseOffsetY;                                      		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79672 ];

		return pClassPointer;
	};

	class ACarPreviewActor_TA* SpawnCar ( struct FLinearColor TeamColor, struct FLinearColor AccentColor, float OffsetX, float OffsetY );
	struct FLinearColor GetRGBFromColorSet ( struct FLinearColor Hue, struct FLinearColor SV );
	void SpawnTeamCars ( class UCarColorSet_TA* TeamColorSet, struct FLinearColor AccentColor );
	void SpawnAccentCars ( class UCarColorSet_TA* AccentColorSet, struct FLinearColor TeamColor );
	class UProductAsset_Body_TA* GetOctaneBody ( );
	void eventActivated ( );
};

UClass* USeqAct_SpawnCarColors_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_StartTutorial_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_StartTutorial_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FString                                     TutorialName;                                     		// 0x0100 (0x000C) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79724 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_StartTutorial_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_UpdateAd_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_UpdateAd_TA : public USequenceAction
{
public:
	class AStaticMeshActor*                            MeshActor;                                        		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79731 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_UpdateAd_TA::pClassPointer = NULL;

// Class TAGame.SkyLightVolume_TA
// 0x0006 (0x022E - 0x0228)
class ASkyLightVolume_TA : public AVolume
{
public:
	class USkyLightVolumeComponent_TA*                 SkyLight;                                         		// 0x0228 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      UpperPaintTeam;                                   		// 0x022C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LowerPaintTeam;                                   		// 0x022D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79777 ];

		return pClassPointer;
	};

	void HandleTeamColorsChanged ( class ATeam_TA* Team );
	void HandleAllTeamsCreated ( class AGameEvent_Team_TA* TeamGameEvent );
	void HandleGameEventAdded ( class UObject* GameEventObj );
	void SetTeamColorListeners ( );
	void eventPostBeginPlay ( );
};

UClass* ASkyLightVolume_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_TutorialStarted_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_TutorialStarted_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80348 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_TutorialStarted_TA::pClassPointer = NULL;

// Class TAGame.Tutorial_Boost_TA
// 0x0000 (0x0198 - 0x0198)
class UTutorial_Boost_TA : public UTutorial_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80392 ];

		return pClassPointer;
	};

	void OnActionNameToDetectReleased ( );
};

UClass* UTutorial_Boost_TA::pClassPointer = NULL;

// Class TAGame.Tutorial_Dodge_TA
// 0x000C (0x01A4 - 0x0198)
class UTutorial_Dodge_TA : public UTutorial_TA
{
public:
	unsigned long                                      bDidDodge : 1;                                    		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBallHitGoal : 1;                                 		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckFailOnLand : 1;                             		// 0x0198 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                Dodges;                                           		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                MaxDodges;                                        		// 0x01A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80395 ];

		return pClassPointer;
	};

	void CheckBallHitGoal ( );
	void HandleHitGoal ( class ABall_TA* Ball, class UGoal_TA* Goal );
	void HandleCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void HandleCarLanded ( class ACar_TA* Car );
	void OnDodged ( );
	void HandleDodgeActivationChanged ( class ACarComponent_TA* CarComponent );
	void HandleVehicleSetup ( class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car );
};

UClass* UTutorial_Dodge_TA::pClassPointer = NULL;

// Class TAGame.Tutorial_HandBrake_TA
// 0x0018 (0x01B0 - 0x0198)
class UTutorial_HandBrake_TA : public UTutorial_TA
{
public:
	unsigned long                                      bCheckHandbrakeDir : 1;                           		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTriggerTouched : 1;                              		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FVector                                     HandbrakeStartDir;                                		// 0x019C (0x000C) [0x0000000000000000]              
	float                                              MinHandbrakeDotAngleForStart;                     		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              MinHandbrakeDotAngleForComplete;                  		// 0x01AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80418 ];

		return pClassPointer;
	};

	bool HasGoodStartRotation ( );
	void OnActionNameToDetectReleased ( );
	void OnActionNameToDetectPressed ( );
	void CheckActionNameToDetect ( );
	void NotifyEventOnTutorial ( struct FString EventName );
};

UClass* UTutorial_HandBrake_TA::pClassPointer = NULL;

// Class TAGame.VehiclePickup_BoostModifier_LaunchPad_TA
// 0x0004 (0x004C - 0x0048)
class UVehiclePickup_BoostModifier_LaunchPad_TA : public UVehiclePickup_BoostModifier_TA
{
public:
	float                                              LaunchImpulse;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80533 ];

		return pClassPointer;
	};

	void PickupEffect ( class ACar_TA* Car );
	bool CanPickup ( class ACar_TA* Car );
};

UClass* UVehiclePickup_BoostModifier_LaunchPad_TA::pClassPointer = NULL;

// Class TAGame.VehiclePickup_BoostModifier_Mine_TA
// 0x0008 (0x0050 - 0x0048)
class UVehiclePickup_BoostModifier_Mine_TA : public UVehiclePickup_BoostModifier_TA
{
public:
	unsigned long                                      bPickupEffectIfFull : 1;                          		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPickupEffectIfEmpty : 1;                         		// 0x0048 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrain : 1;                                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPickupEffectIfOpposingHalf : 1;                  		// 0x0048 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                PickupEffectIfWinningBy;                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80542 ];

		return pClassPointer;
	};

	void PickupEffect ( class ACar_TA* Car );
	bool CarOnOpposingHalf ( class ACar_TA* Car );
	bool CanPickup ( class ACar_TA* Car );
};

UClass* UVehiclePickup_BoostModifier_Mine_TA::pClassPointer = NULL;

// Class TAGame.VehiclePickup_BoostModifier_Teleporter_TA
// 0x0000 (0x0048 - 0x0048)
class UVehiclePickup_BoostModifier_Teleporter_TA : public UVehiclePickup_BoostModifier_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80558 ];

		return pClassPointer;
	};

	void PickupEffect ( class ACar_TA* Car );
	void TeleportCar ( class ACar_TA* Car );
	bool CanPickup ( class ACar_TA* Car );
};

UClass* UVehiclePickup_BoostModifier_Teleporter_TA::pClassPointer = NULL;

// Class TAGame.SplineLoftActorSpawnable_TA
// 0x0000 (0x0294 - 0x0294)
class ASplineLoftActorSpawnable_TA : public ASplineLoftActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81275 ];

		return pClassPointer;
	};

};

UClass* ASplineLoftActorSpawnable_TA::pClassPointer = NULL;

// Class TAGame.__ProductAttribute_Painted_TA__ApplyToSetParameter
// 0x0010 (0x004C - 0x003C)
class U__ProductAttribute_Painted_TA__ApplyToSetParameter : public UObject
{
public:
	class UISetParameter*                              Target;                                           		// 0x003C (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UProductAttribute_PaintSettings_TA*          PaintSettings;                                    		// 0x0044 (0x0004) [0x0000000000000000]              
	class UProductPaint_TA*                            Paint;                                            		// 0x0048 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82354 ];

		return pClassPointer;
	};

	void LambdaCallback ( struct FPaintAttributeParameter PaintParam );
};

UClass* U__ProductAttribute_Painted_TA__ApplyToSetParameter::pClassPointer = NULL;

// Class TAGame.WheelSkelMeshMAT_TA
// 0x0000 (0x064C - 0x064C)
class UWheelSkelMeshMAT_TA : public USkeletalMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82903 ];

		return pClassPointer;
	};

};

UClass* UWheelSkelMeshMAT_TA::pClassPointer = NULL;

// Class TAGame.WheelStaticMeshMAT_TA
// 0x0000 (0x0278 - 0x0278)
class UWheelStaticMeshMAT_TA : public UStaticMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 82909 ];

		return pClassPointer;
	};

};

UClass* UWheelStaticMeshMAT_TA::pClassPointer = NULL;

// Class TAGame.__EngineAudioUnlocker_TA__FixupUnlockedEngineAudio
// 0x000C (0x0048 - 0x003C)
class U__EngineAudioUnlocker_TA__FixupUnlockedEngineAudio : public UObject
{
public:
	TArray< class UProduct_TA* >                       UnlockedBodies;                                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83027 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FBodyToEngineAudioPair Pair );
	bool LambdaCallback(class UProduct_TA* Product);//class UProduct_TA* Product 
};

UClass* U__EngineAudioUnlocker_TA__FixupUnlockedEngineAudio::pClassPointer = NULL;

// Class TAGame.__EngineAudioUnlocker_TA__UnlockEnginesForBody
// 0x0004 (0x0040 - 0x003C)
class U__EngineAudioUnlocker_TA__UnlockEnginesForBody : public UObject
{
public:
	class UProduct_TA*                                 Body;                                             		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83068 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FBodyToEngineAudioPair Pair );
	bool LambdaCallback(class UProduct_TA* Product);
	//bool LambdaCallback(class UProduct_TA* Product);
	//class UProduct_TA* Product
};

UClass* U__EngineAudioUnlocker_TA__UnlockEnginesForBody::pClassPointer = NULL;

// Class TAGame.VersionHelper_TA
// 0x0020 (0x005C - 0x003C)
class UVersionHelper_TA : public UObject
{
public:
	struct FScriptDelegate                             __VersionDelegate__Delegate;                      		// 0x003C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0040 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __VersionChangedDelegate__Delegate;               		// 0x004C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83253 ];

		return pClassPointer;
	};

	void Update ( class UObject* VersionObject, struct FScriptDelegate VersionChangedCallback, TArray< struct FScriptDelegate >* VersionDelegates, int* Version );
	void VersionChangedDelegate ( );
	void VersionDelegate ( class UObject* VersionObject );
};

UClass* UVersionHelper_TA::pClassPointer = NULL;

// Class TAGame.__GameObserver_TA__GetOffensiveGoal
// 0x0004 (0x0040 - 0x003C)
class U__GameObserver_TA__GetOffensiveGoal : public UObject
{
public:
	class ACar_TA*                                     ForCar;                                           		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83510 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FGoalData G );
};

UClass* U__GameObserver_TA__GetOffensiveGoal::pClassPointer = NULL;

// Class TAGame.__GameObserver_TA__GetDefensiveGoal
// 0x0004 (0x0040 - 0x003C)
class U__GameObserver_TA__GetDefensiveGoal : public UObject
{
public:
	class ACar_TA*                                     ForCar;                                           		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83517 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FGoalData G );
};

UClass* U__GameObserver_TA__GetDefensiveGoal::pClassPointer = NULL;

// Class TAGame.__GameObserver_TA__GetCarDataForPRI
// 0x0004 (0x0040 - 0x003C)
class U__GameObserver_TA__GetCarDataForPRI : public UObject
{
public:
	class APRI_TA*                                     PRI;                                              		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83554 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FCarData C );
};

UClass* U__GameObserver_TA__GetCarDataForPRI::pClassPointer = NULL;

// Class TAGame.__GameObserver_TA__GetCarData
// 0x0004 (0x0040 - 0x003C)
class U__GameObserver_TA__GetCarData : public UObject
{
public:
	class ACar_TA*                                     ForCar;                                           		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83561 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FCarData C );
};

UClass* U__GameObserver_TA__GetCarData::pClassPointer = NULL;

// Class TAGame.LanServerMetaData_TA
// 0x0078 (0x00B4 - 0x003C)
class ULanServerMetaData_TA : public UObject
{
public:
	struct FUniqueNetId                                OwnerId;                                          		// 0x003C (0x0048) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     OwnerName;                                        		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ServerName;                                       		// 0x0090 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FName                                       ServerMap;                                        		// 0x009C (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                ServerGameMode;                                   		// 0x00A4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bPassword : 1;                                    		// 0x00A8 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	int                                                NumPlayers;                                       		// 0x00AC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                MaxPlayers;                                       		// 0x00B0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83683 ];

		return pClassPointer;
	};

};

UClass* ULanServerMetaData_TA::pClassPointer = NULL;

// Class TAGame.RPC_RecordMatchStats_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_RecordMatchStats_TA : public URPC_X
{
public:
	TArray< struct FString >                           Events;                                           		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83827 ];

		return pClassPointer;
	};

	void Append ( struct FString Text );
};

UClass* URPC_RecordMatchStats_TA::pClassPointer = NULL;

// Class TAGame.__MatchSeries_TA__GetSeriesWinner
// 0x0004 (0x0040 - 0x003C)
class U__MatchSeries_TA__GetSeriesWinner : public UObject
{
public:
	int                                                HalfMatchGames;                                   		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83872 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FSeriesTeam T );
};

UClass* U__MatchSeries_TA__GetSeriesWinner::pClassPointer = NULL;

// Class TAGame.LoadoutUtils_TA
// 0x0000 (0x003C - 0x003C)
class ULoadoutUtils_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84168 ];

		return pClassPointer;
	};

	void FixupDeprecatedTeamPaint ( class ULoadout_TA* Loadout );
	void ConvertFromOldTeamPaint ( class ULoadout_TA* Loadout, class UCarColorSet_TA* OldSet, class UCarColorSet_TA* NewSet );
	void ConvertFromOldLoadout ( class ULoadout_TA* OldLoadout, class ULoadout_TA* NewLoadout, int TeamIndex );
};

UClass* ULoadoutUtils_TA::pClassPointer = NULL;

// Class TAGame.SpawnPointGroup_TA
// 0x0034 (0x0070 - 0x003C)
class USpawnPointGroup_TA : public UObject
{
public:
	TArray< struct FVector >                           SpawnOffset;                                      		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FRotator >                          SpawnFacing;                                      		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APRI_TA* >                           SpotPRI;                                          		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxSpots;                                         		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84230 ];

		return pClassPointer;
	};

	void RemoveFromSpawnPoints ( class AController* ForPlayer );
	bool GetSpawnOrientation ( class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation );
	bool IsPointAvailable ( int PointIdx );
	int GetPointId ( class AActor* Point );
	bool TryAddToGroupAtPoint ( class AController* Car, int PointIdx );
	bool TryAddToGroup ( class AController* Car );
	void SetupPoints ( class AGameEvent_TA* GameEvent, struct FVector* Center, struct FRotator* Orientation );
};

UClass* USpawnPointGroup_TA::pClassPointer = NULL;

// Class TAGame.MapGroups_TA
// 0x0000 (0x003C - 0x003C)
class UMapGroups_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84360 ];

		return pClassPointer;
	};

	TArray< class UMapData_TA* > __MapGroups_TA__BuildMaps ( TArray< class UMapData_TA* > Sum, struct FMapGroup Group, TArray< class UMapData_TA* >* ConcatLocal_547A3BC64DE74B15E26CF59C5BC49591 );
	TArray< class UMapData_TA* > BuildMaps ( TArray< struct FMapGroup >* Groups, TArray< class UMapData_TA* >* ReduceLocal_04B609C84B468F02DD5BA48244EF42DE, TArray< class UMapData_TA* >* DistinctLocal_A242B36E41A8C3769B3792B674820C19 );
	TArray< struct FMapGroup > BuildGroups ( TArray< class UMapData_TA* >* AvailableMaps, TArray< struct FMapGroup >* SourceGroups, TArray< class UMapData_TA* >* FilterLocal_CCE497F842EA8EF20E0C3CA9C8C490DA );
};

UClass* UMapGroups_TA::pClassPointer = NULL;

// Class TAGame.CameraStateSelector_TA
// 0x0010 (0x0058 - 0x0048)
class UCameraStateSelector_TA : public UComponent
{
public:
	TArray< class UCameraState_X* >                    States;                                           		// 0x0048 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ACamera_X*                                   Camera;                                           		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84548 ];

		return pClassPointer;
	};

	class UCameraState_X* SelectState ( class UCameraState_X* InCurrentState );
	void SetActive ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraStateSelector_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorProxy_TA
// 0x0078 (0x00F4 - 0x007C)
class UCameraState_DirectorProxy_TA : public UCameraState_Replay_TA
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameObserver_TA*                            GameObserver;                                     		// 0x0080 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MinimumStateTime;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           DistToBallWeight;                                 		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           PlayersInViewWeight;                              		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           ViewPitchWeight;                                  		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              GoalInViewWeight;                                 		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CanSeeNewViewContinuity;                          		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           SimilarOrientationContinuity;                     		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     FieldForward;                                     		// 0x00D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FieldSide;                                        		// 0x00DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              StateStartTime;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bActive : 1;                                      		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	class UCameraState_Director_TA*                    Director;                                         		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84556 ];

		return pClassPointer;
	};

	class AActor* GetFocusActor ( );
	float GetContinuityRating ( struct FVector ViewStart, struct FRotator ViewRotation, float FOV );
	float GetViewRating ( struct FVector ViewStart, struct FRotator ViewRotation, float FOV );
	float GetAspectRatio ( );
	bool AllowSwivel ( );
	bool ShouldKeepExecuting ( );
	float GetActiveTime ( );
	void Init ( class ACamera_X* InCamera );
	void OnSetGameObserver ( );
	void EndCameraState ( );
	void BeginCameraState ( );
};

UClass* UCameraState_DirectorProxy_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsTradeIn_TA
// 0x0070 (0x010C - 0x009C)
class URPC_ProductsTradeIn_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x00E4 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradeIn_TA.ProductInstances
	unsigned char                                      GameVersion;                                      		// 0x00F0 (0x0001) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84643 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	class URPC_ProductsTradeIn_TA* SetGameVersion ( unsigned char InGameVersion );
	class URPC_ProductsTradeIn_TA* SetProducts ( );
	class URPC_ProductsTradeIn_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsTradeIn_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Baskets_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Baskets_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84704 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Baskets_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_EpicSaves_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_EpicSaves_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84705 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_EpicSaves_TA::pClassPointer = NULL;

// Class TAGame.Save_TA
// 0x0030 (0x006C - 0x003C)
class USave_TA : public UObject
{
public:
	class USaveObjectManager_TA*                       SaveObjectManager;                                		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Version;                                          		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     DirectoryPath;                                    		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SaveType;                                         		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SaveExt;                                          		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bExactFileMatch : 1;                              		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84943 ];

		return pClassPointer;
	};

	void CancelGetHeaders ( struct FScriptDelegate Callback );
	void GetHeaders ( class ULocalPlayer_TA* Player, struct FString FolderPath, struct FString Pattern, struct FScriptDelegate Callback );
	struct FString GetFullSavePath ( class ULocalPlayer_TA* Player, struct FString SaveName );
	struct FString GetFullSaveDirectory ( class ULocalPlayer_TA* Player );
	bool Delete ( class ULocalPlayer_TA* Player, struct FString SavePath );
	void Save ( class ULocalPlayer_TA* Player, struct FString SaveName );
	void LoadAsync ( class ULocalPlayer_TA* Player, struct FString SaveFileName, struct FScriptDelegate Callback );
	bool Load ( class ULocalPlayer_TA* Player, struct FString SaveFileName );
	struct FString GetUniqueSaveKey ( class ULocalPlayer_TA* Player );
	void Init ( );
};

UClass* USave_TA::pClassPointer = NULL;

// Class TAGame.SaveData_GameEditor_TA
// 0x0000 (0x006C - 0x006C)
class USaveData_GameEditor_TA : public USave_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84942 ];

		return pClassPointer;
	};

};

UClass* USaveData_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.GameEditor_Switch_TA
// 0x0000 (0x0244 - 0x0244)
class AGameEditor_Switch_TA : public AGameEditor_Trigger_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85068 ];

		return pClassPointer;
	};

};

UClass* AGameEditor_Switch_TA::pClassPointer = NULL;

// Class TAGame.DynamicSpawnPointMesh_TA
// 0x0000 (0x0230 - 0x0230)
class ADynamicSpawnPointMesh_TA : public AGameEditor_Actor_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85075 ];

		return pClassPointer;
	};

};

UClass* ADynamicSpawnPointMesh_TA::pClassPointer = NULL;

// Class TAGame.GameEditor_Pawn_TA
// 0x0000 (0x04DC - 0x04DC)
class AGameEditor_Pawn_TA : public APawn_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85134 ];

		return pClassPointer;
	};

};

UClass* AGameEditor_Pawn_TA::pClassPointer = NULL;

// Class TAGame.SaveData_GameEditor_Training_TA
// 0x0040 (0x00AC - 0x006C)
class USaveData_GameEditor_Training_TA : public USaveData_GameEditor_TA
{
public:
	struct FString                                     LoadedSaveName;                                   		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                PlayerTeamNumber;                                 		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUnowned : 1;                                     		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                ShotsCompleted;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FString                                     FavoritesFolderPath;                              		// 0x0088 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     MyTrainingFolderPath;                             		// 0x0094 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     DownloadedFolderPath;                             		// 0x00A0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85160 ];

		return pClassPointer;
	};

	struct FString GetTrainingFullPath ( class ULocalPlayer_TA* Player, unsigned char InSaveType );
	struct FString GetTrainingPath ( unsigned char InSaveType );
	struct FString GetTrainingFolder ( unsigned char InSaveType );
	unsigned char GetTrainingSaveType ( unsigned long bOwned, unsigned long bFavorited );
	struct FString GetFullSavePath ( class ULocalPlayer_TA* Player, struct FString SaveName );
	struct FString GetFullSaveDirectory ( class ULocalPlayer_TA* Player );
	void Init ( );
};

UClass* USaveData_GameEditor_Training_TA::pClassPointer = NULL;

// Class TAGame.TrainingEditorData_TA
// 0x00C0 (0x00FC - 0x003C)
class UTrainingEditorData_TA : public UObject
{
public:
	struct FGuid                                       TM_Guid;                                          		// 0x003C (0x0010) [0x0000000000000000]              
	struct FString                                     Code;                                             		// 0x004C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     TM_Name;                                          		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      Type;                                             		// 0x0064 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      Difficulty;                                       		// 0x0065 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     CreatorName;                                      		// 0x0068 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Description;                                      		// 0x0074 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< int >                                      Tags;                                             		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       MapName;                                          		// 0x008C (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumRounds;                                        		// 0x0094 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0098 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TrainingEditorData_TA.CreatedAt
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x00A0 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TrainingEditorData_TA.UpdatedAt
	struct FUniqueNetId                                CreatorPlayerID;                                  		// 0x00A8 (0x0048) [0x0000000000000000]              
	TArray< struct FEditorRoundData >                  Rounds;                                           		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85162 ];

		return pClassPointer;
	};

	void Init ( );
};

UClass* UTrainingEditorData_TA::pClassPointer = NULL;

// Class TAGame.TrainingEditorMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UTrainingEditorMetrics_TA : public UMetricsGroup_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85177 ];

		return pClassPointer;
	};

	void TrainingShotComplete ( struct FGuid Id, int Index, unsigned long bSuccess, int ShotAttempt );
	void TrainingShotAttempt ( struct FGuid Id, int Index, int ShotAttempt );
	void TrainingSetComplete ( struct FGuid Id );
	void TrainingSetExit ( struct FGuid Id );
	void TrainingSetEnter ( struct FGuid Id );
	void TrainingSetDelete ( struct FGuid Id );
	void TrainingSetDownload ( struct FGuid Id );
	void TrainingEditorExit ( struct FGuid Id );
	void TrainingEditorEnter ( struct FGuid Id );
	void TrainingSetSubmitted ( struct FGuid Id, struct FString TrainingType, int Difficulty, int TotalRounds, struct FString UserTags );
	void TrainingSetCreate ( struct FGuid Id, struct FString TrainingType, int Difficulty, struct FString UserTags );
};

UClass* UTrainingEditorMetrics_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_AerialGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_AerialGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85547 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_AerialGoals_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Assists_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Assists_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85548 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Assists_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_BackwardsGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_BackwardsGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85549 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_BackwardsGoals_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_BicycleGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_BicycleGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85550 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_BicycleGoals_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Centers_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Centers_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85551 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Centers_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Clears_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Clears_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85552 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Clears_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_Juggles_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Juggles_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85553 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_Juggles_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_LongGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_LongGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85554 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_LongGoals_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_MVPs_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_MVPs_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85555 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_MVPs_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_ShotsOnGoal_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_ShotsOnGoal_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85556 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_ShotsOnGoal_TA::pClassPointer = NULL;

// Class TAGame.ProductStat_TurtleGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_TurtleGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85557 ];

		return pClassPointer;
	};

	void OnStatEvent ( class UStatEvent_TA* StatEvent );
};

UClass* UProductStat_TurtleGoals_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_TradeLobby_TA__VerifyRemoteOffering
// 0x0004 (0x0040 - 0x003C)
class U__GFxData_TradeLobby_TA__VerifyRemoteOffering : public UObject
{
public:
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85700 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UOnlineProduct_TA* O );
};

UClass* U__GFxData_TradeLobby_TA__VerifyRemoteOffering::pClassPointer = NULL;

// Class TAGame.__MapGroups_TA__BuildGroups
// 0x000C (0x0048 - 0x003C)
class U__MapGroups_TA__BuildGroups : public UObject
{
public:
	TArray< class UMapData_TA* >                       AvailableMaps;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85871 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UMapData_TA* M );
};

UClass* U__MapGroups_TA__BuildGroups::pClassPointer = NULL;

// Class TAGame.SeqEvent_PreviewGoalExplosion_TA
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_PreviewGoalExplosion_TA : public USequenceEvent
{
public:
	class AActor*                                      FXObject;                                         		// 0x0114 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86121 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_PreviewGoalExplosion_TA::pClassPointer = NULL;

// Class TAGame.MenuSequence_TA
// 0x0030 (0x006C - 0x003C)
class UMenuSequence_TA : public UObject
{
public:
	struct FName                                       CameraState;                                      		// 0x003C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRemotePlayersHidden : 1;                         		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockPreviewActor : 1;                            		// 0x0044 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bImmediate : 1;                                   		// 0x0044 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UMenuSequencer_TA*                           MenuSequenceComp;                                 		// 0x0048 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __EventEnteredSequence__Delegate;                 		// 0x004C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0050 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLeftSequence__Delegate;                    		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86307 ];

		return pClassPointer;
	};

	class ACamera_MainMenu_TA* GetCamera ( );
	void SetLockPreviewActor ( );
	void SetRemotePlayersHidden ( );
	void SetCameraState ( );
	void TickSequence ( float DeltaTime );
	void LeaveSequence ( class UMenuSequence_TA* NextSequence );
	void EnterSequence ( class UMenuSequence_TA* PrevSequence );
	void Init ( class UMenuSequencer_TA* InComp );
	void EventLeftSequence ( class UMenuSequence_TA* InSequence );
	void EventEnteredSequence ( class UMenuSequence_TA* InSequence );
};

UClass* UMenuSequence_TA::pClassPointer = NULL;

// Class TAGame.__MenuSequencer_TA__SetSequence
// 0x0004 (0x0040 - 0x003C)
class U__MenuSequencer_TA__SetSequence : public UObject
{
public:
	class UMenuSequence_TA*                            NewSequence;                                      		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86371 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UMenuSequence_TA* S );
};

UClass* U__MenuSequencer_TA__SetSequence::pClassPointer = NULL;

// Class TAGame.__MenuSequencer_TA__GetSequence
// 0x0008 (0x0044 - 0x003C)
class U__MenuSequencer_TA__GetSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                     		// 0x003C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86377 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UMenuSequence_TA* S );
};

UClass* U__MenuSequencer_TA__GetSequence::pClassPointer = NULL;

// Class TAGame.SeqEvent_MTXGarageReveal_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_MTXGarageReveal_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86402 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_MTXGarageReveal_TA::pClassPointer = NULL;

// Class TAGame.RotateComponent_TA
// 0x0090 (0x00FC - 0x006C)
class URotateComponent_TA : public UActorComponent_X
{
public:
	float                                              Momentum;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              LastMomentum;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              RotationSpeed;                                    		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FRotator                                    CurrentRotation;                                  		// 0x0078 (0x000C) [0x0000000000000000]              
	float                                              TurntableDirection;                               		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAkSoundCue*                                 SFX_Rotating;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 SFX_Reversing;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           FallOffCurve;                                     		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           YawSpeedCurveMouse;                               		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           YawSpeedCurveGamepad;                             		// 0x00B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bGrabbed : 1;                                     		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDeterminedSnapRotation : 1;                      		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FRotator                                    SnapRotation;                                     		// 0x00C4 (0x000C) [0x0000000000000000]              
	float                                              SnapAngle;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                TotalSnaps;                                       		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FRotator                                    SnapStartRotation;                                		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              MinStopMomentum;                                  		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              SnapBlendSpeed;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __EventRotationChanged__Delegate;                 		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00F0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86636 ];

		return pClassPointer;
	};

	void DontStartSound ( );
	void DontPlayReverse ( );
	bool IsTimerActive ( struct FName FuncName );
	void SetTimer ( float Time, unsigned long bLoop, struct FName FuncName );
	void ClearTimer ( struct FName FuncName );
	float CalculateMomentumFalloff ( float DeltaTime );
	void SetGrabbed ( unsigned long bGrab );
	float DetermineTurnSpeed ( float DeltaTime, float YawInput, unsigned long bGamepad );
	void DetermineSnapRotation ( int MoveDirection );
	void UpdateSpin ( float DeltaTime, float YawInput, unsigned long bGamepad );
	int IncrementSlotIndex ( int InTotalSnaps, int CurrentIndex, int AddAmount );
	struct FRotator GetSlotRotation ( int SlotIndex );
	int GetClosestSlotInRotation ( struct FVector WorldDirection, struct FRotator InRotation, int InTotalSnaps, float InSnapAngle );
	void SetSnap ( struct FRotator InSnapStartRotation, int InTotalSnaps, float InSnapAngle, float InMinStopMomentum );
	void StopMovement ( );
	void StopRotatingSound ( );
	void SetComponentRotation ( float InDirectionMag, float DeltaTime );
	void SetCurrentRotation ( struct FRotator NewRotation );
	void eventTick ( float DeltaTime );
	void eventBeginPlay ( );
	void EventRotationChanged ( class URotateComponent_TA* RotateComponent, struct FRotator NewRotation );
};

UClass* URotateComponent_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_ContainerKey_TA
// 0x0004 (0x0064 - 0x0060)
class UGFxData_ProductAttribute_ContainerKey_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bMagicKey : 1;                                    		// 0x0060 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86950 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_Key_TA* Attribute );
};

UClass* UGFxData_ProductAttribute_ContainerKey_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_Container_TA
// 0x0004 (0x0064 - 0x0060)
class UGFxData_ProductAttribute_Container_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bUnlocked : 1;                                    		// 0x0060 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86951 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_Container_TA* Attribute );
};

UClass* UGFxData_ProductAttribute_Container_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_Painted_TA
// 0x0010 (0x0070 - 0x0060)
class UGFxData_ProductAttribute_Painted_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                ProductPaintColor;                                		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ProductPaintColorName;                            		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86952 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_Painted_TA* Attribute );
};

UClass* UGFxData_ProductAttribute_Painted_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_Level_TA
// 0x0004 (0x0064 - 0x0060)
class UGFxData_ProductAttribute_Level_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bProductUpgradable : 1;                           		// 0x0060 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86953 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_Level_TA* Attribute );
};

UClass* UGFxData_ProductAttribute_Level_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_Schematic_TA
// 0x0000 (0x0060 - 0x0060)
class UGFxData_ProductAttribute_Schematic_TA : public UGFxData_ProductAttribute_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86954 ];

		return pClassPointer;
	};

};

UClass* UGFxData_ProductAttribute_Schematic_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_Certified_TA
// 0x000C (0x006C - 0x0060)
class UGFxData_ProductAttribute_Certified_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FString                                     CertifiedStatLabel;                               		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86955 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_Certified_TA* Attribute );
};

UClass* UGFxData_ProductAttribute_Certified_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductAttribute_ProductLink_TA
// 0x0004 (0x0064 - 0x0060)
class UGFxData_ProductAttribute_ProductLink_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                ProductID;                                        		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86956 ];

		return pClassPointer;
	};

	void OnReceivedAttribute ( class UProductAttribute_ProductLink_TA* Attribute );
};

UClass* UGFxData_ProductAttribute_ProductLink_TA::pClassPointer = NULL;

// Class TAGame.RPC_MicroTransactions_ClaimEntitlements_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_MicroTransactions_ClaimEntitlements_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	struct FString                                     AuthCode;                                         		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProductData >                Products;                                         		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87011 ];

		return pClassPointer;
	};

	class URPC_MicroTransactions_ClaimEntitlements_TA* SetAuthCode ( struct FString InAuthCode );
	class URPC_MicroTransactions_ClaimEntitlements_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_MicroTransactions_ClaimEntitlements_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MTXGarage_TA
// 0x0060 (0x00B4 - 0x0054)
class UGFxData_MTXGarage_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FMTXPurchaseInfo >                  CatalogItems;                                     		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FMTCatalogInfo >                    CatalogProducts;                                  		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCartInfo >                         CartItems;                                        		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     CartTotal;                                        		// 0x0078 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Currency;                                         		// 0x0084 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      TransactionInProgress : 1;                        		// 0x0090 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCatalogReady : 1;                                		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BlackMarketSkinProductID;                         		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              CatalogExpirationTime;                            		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CatalogCacheDuration;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned char                                      CatalogCategory;                                  		// 0x00A4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              PurchaseTimeoutTime;                              		// 0x00A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              GetPriceTimeoutTime;                              		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87016 ];

		return pClassPointer;
	};

	void HandleMTXError ( class UError* Error );
	void ProductRevealExit ( );
	void OnRevealFinished ( int SlotIndex );
	void ProductReveal ( );
	void OnKeyPurchase ( );
	void HandlePsynetConfirmPurchase ( class URPC_MicroTransactions_FinalizePurchase_TA* RPC );
	void OnPlayerConfirmPurchase ( unsigned long bAuthorized );
	void HandleStartPurchase ( class URPC_MicroTransactions_StartPurchase_TA* RPC );
	void MTXPurchaseEnd ( );
	void PurchaseTimeout ( );
	bool IsUserAbleToPurchase ( );
	void CheckOut ( );
	void CheckoutCompleteFlashNNX ( );
	void CheckoutCompleteNNX ( );
	TArray< struct FMTCartItem > MapCartToCatalog ( );
	void UpdateCartTotal ( );
	void AddToCart ( int CatalogID, int Count );
	void RemoveFromCart ( int CatalogID, int Count );
	void ClearCart ( );
	void OnGetCatalog ( unsigned long bSuccess );
	void HandleGetPriceInfoComplete ( struct FName ProductName, struct FString Price, struct FString DiscountPrice, int DiscountPercentage );
	void HandleGetPriceTimeout ( );
	void UpdatePriceInfo ( TArray< struct FMTCatalogInfo > PriceRequests );
	void HandleGetCatalogResponse ( class URPC_MicroTransactions_GetCatalog_TA* RPC );
	void GetCatalogCategory ( unsigned char InCategory );
	void GetCatalog ( );
	void OnUnlockContainer ( int ProductID );
	void RevealContainerUnlocks ( TArray< struct FOnlineProductData >* Drops );
	void HandleUnlockContainerResponse ( class URPC_MicroTransactions_UnlockContainer_TA* RPC );
	void UnlockContainer ( );
	void GetKeyInstanceId ( int KeyProductID );
	void GetTradeHoldSortedProductsByID ( int BaseProductID, unsigned long bIsAscending );
	TArray< int > GetUniqueKeyList ( int ProductID );
	void OnKeyListUpdated ( );
	bool CanUnlockContainer ( int KeyProductID );
	bool CanKeyUnlockContainer ( int KeyProductID );
	bool CanStartTransaction ( );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_MTXGarage_TA::pClassPointer = NULL;

// Class TAGame.OnlinePlayerAuthentication_TA
// 0x0014 (0x0188 - 0x0174)
class UOnlinePlayerAuthentication_TA : public UOnlinePlayerAuthentication_X
{
public:
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventMTXAuthCodeResponse__Delegate;             		// 0x0178 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x017C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87022 ];

		return pClassPointer;
	};

	void ReceiveAuthenticatedName ( struct FString ReceivedName );
	void HandleReceivedMTXAuthorizationCode ( unsigned long bSuccess, struct FString AuthorizationCode, struct FString EncryptedTicket, int IssuerID );
	bool RequestMTXAuthCode ( );
	bool RequiresMTXAuthorizationCode ( );
	struct FString GetBuildRegion ( );
	void EventMTXAuthCodeResponse ( unsigned long bSuccess, struct FString OutAuthCode );
};

UClass* UOnlinePlayerAuthentication_TA::pClassPointer = NULL;

// Class TAGame.OnlineGameDLC_TA
// 0x0014 (0x00A4 - 0x0090)
class UOnlineGameDLC_TA : public UOnlineGameDLC_X
{
public:
	class URPC_GetDLC_TA*                              LatestDLC;                                        		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventUpdated__Delegate;                         		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0098 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87075 ];

		return pClassPointer;
	};

	bool GetDLCIsNew ( int I );
	struct FName GetDLCName ( int I );
	int GetNumDLC ( );
	void HandleDLCReceived ( class URPC_GetDLC_TA* InDLC );
	void Sync ( );
	void NotifyWhenReleased ( struct FScriptDelegate Callback );
	void OnInit ( );
	void EventUpdated ( class UOnlineGameDLC_X* DLC );
};

UClass* UOnlineGameDLC_TA::pClassPointer = NULL;

// Class TAGame.__SkillDecayMessageHandler_TA__HandleSkillDecayed
// 0x0004 (0x0040 - 0x003C)
class U__SkillDecayMessageHandler_TA__HandleSkillDecayed : public UObject
{
public:
	int                                                ShownPlaylistsIdx;                                		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87148 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class UGameSettingPlaylist_X* Playlist );
};

UClass* U__SkillDecayMessageHandler_TA__HandleSkillDecayed::pClassPointer = NULL;

// Class TAGame.RPC_MicroTransactions_FinalizePurchase_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_MicroTransactions_FinalizePurchase_TA : public URPC_X
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x009C (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_FinalizePurchase_TA.OrderId
	unsigned long                                      Authorized : 1;                                   		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A8 (0x0048) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Products;                                         		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87187 ];

		return pClassPointer;
	};

	class URPC_MicroTransactions_FinalizePurchase_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_MicroTransactions_FinalizePurchase_TA* SetAuthorized ( unsigned long bAuthorized );
	class URPC_MicroTransactions_FinalizePurchase_TA* SetOrderID ( );
};

UClass* URPC_MicroTransactions_FinalizePurchase_TA::pClassPointer = NULL;

// Class TAGame.RPC_MicroTransactions_StartPurchase_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_MicroTransactions_StartPurchase_TA : public URPC_X
{
public:
	struct FString                                     Language;                                         		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A8 (0x0048) [0x0000000000000000]              
	TArray< struct FMTCartItem >                       CartItems;                                        		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87202 ];

		return pClassPointer;
	};

	class URPC_MicroTransactions_StartPurchase_TA* SetLanguage ( struct FString InLanguage );
	class URPC_MicroTransactions_StartPurchase_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_MicroTransactions_StartPurchase_TA* SetCartItems ( TArray< struct FMTCartItem > InCartItems );
};

UClass* URPC_MicroTransactions_StartPurchase_TA::pClassPointer = NULL;

// Class TAGame.RPC_MicroTransactions_GetCatalog_TA
// 0x0068 (0x0104 - 0x009C)
class URPC_MicroTransactions_GetCatalog_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	struct FName                                       Category;                                         		// 0x00E4 (0x0008) [0x0000000000000000]              
	TArray< struct FMTCatalogInfo >                    MTXProducts;                                      		// 0x00EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     Currency;                                         		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87227 ];

		return pClassPointer;
	};

	struct FName CategoryToName ( unsigned char InCategory );
	class URPC_MicroTransactions_GetCatalog_TA* SetCategory ( unsigned char InCategory );
	class URPC_MicroTransactions_GetCatalog_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_MicroTransactions_GetCatalog_TA::pClassPointer = NULL;

// Class TAGame.RPC_MicroTransactions_UnlockContainer_TA
// 0x0068 (0x0104 - 0x009C)
class URPC_MicroTransactions_UnlockContainer_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00E4 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_UnlockContainer_TA.InstanceID
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x00EC (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_UnlockContainer_TA.KeyInstanceID
	int                                                GameVersion;                                      		// 0x00F4 (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87329 ];

		return pClassPointer;
	};

	class URPC_MicroTransactions_UnlockContainer_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_MicroTransactions_UnlockContainer_TA* SetGameVersion ( int InGameVersion );
	class URPC_MicroTransactions_UnlockContainer_TA* SetKeyID ( );
	class URPC_MicroTransactions_UnlockContainer_TA* SetContainerID ( );
};

UClass* URPC_MicroTransactions_UnlockContainer_TA::pClassPointer = NULL;

// Class TAGame.RPC_GetDLC_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_GetDLC_TA : public URPC_X
{
public:
	TArray< struct FDLCInfo >                          DLC;                                              		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87391 ];

		return pClassPointer;
	};

};

UClass* URPC_GetDLC_TA::pClassPointer = NULL;

// Class TAGame.IntroCarTemplates_TA
// 0x000C (0x0048 - 0x003C)
class UIntroCarTemplates_TA : public UObject
{
public:
	TArray< struct FEditorIntroCar >                   IntroCars;                                        		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87465 ];

		return pClassPointer;
	};

};

UClass* UIntroCarTemplates_TA::pClassPointer = NULL;

// Class TAGame.RPC_UploadIntroCars_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_UploadIntroCars_TA : public URPC_X
{
public:
	TArray< struct FRPCIntroCar >                      LoadoutTemplates;                                 		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87466 ];

		return pClassPointer;
	};

	void AddIntroCar ( struct FString InTemplateName, struct FString InTemplateDescription, int InTemplateIndex, TArray< int > InProductsList );
};

UClass* URPC_UploadIntroCars_TA::pClassPointer = NULL;

// Class TAGame.__CameraState_Countdown_TA____CameraState_Countdown_TA__FindNextCar
// 0x004C (0x0088 - 0x003C)
class U__CameraState_Countdown_TA____CameraState_Countdown_TA__FindNextCar : public UObject
{
public:
	struct FCarData                                    D;                                                		// 0x003C (0x004C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87490 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class ACar_TA* C );
};

UClass* U__CameraState_Countdown_TA____CameraState_Countdown_TA__FindNextCar::pClassPointer = NULL;

// Class TAGame.CameraState_Countdown_TA
// 0x0028 (0x011C - 0x00F4)
class UCameraState_Countdown_TA : public UCameraState_DirectorProxy_TA
{
public:
	int                                                MaxCarsShown;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimePerCar;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSwitchTeamsEveryCar : 1;                         		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class ACar_TA* >                           ShownCars;                                        		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ACar_TA*                                     CurrentCar;                                       		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     NextCar;                                          		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastTeam;                                         		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastChangeCarTime;                                		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87495 ];

		return pClassPointer;
	};

	bool __CameraState_Countdown_TA__FindNextCar ( struct FCarData D );
	void UpdateTextureStreaming ( );
	void UpdateNextCar ( );
	class ACar_TA* FindNextCar ( TArray< struct FCarData >* FilterLocal_CDD9ADA5406FE0F10146A5B8DC3B4972 );
	bool ShouldKeepExecuting ( );
	bool ShouldExecute ( );
	void EndCameraState ( );
	void BeginCameraState ( );
};

UClass* UCameraState_Countdown_TA::pClassPointer = NULL;

// Class TAGame.CameraStateSelector_Priority_TA
// 0x0010 (0x0068 - 0x0058)
class UCameraStateSelector_Priority_TA : public UCameraStateSelector_TA
{
public:
	TArray< struct FStateParams >                      PriorityStates;                                   		// 0x0058 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bSelectFirst : 1;                                 		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87497 ];

		return pClassPointer;
	};

	class UCameraState_X* SelectState ( class UCameraState_X* InCurrentState );
	void SetActive ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraStateSelector_Priority_TA::pClassPointer = NULL;

// Class TAGame.__CameraStateSelector_Priority_TA__SelectState
// 0x0004 (0x0040 - 0x003C)
class U__CameraStateSelector_Priority_TA__SelectState : public UObject
{
public:
	class UCameraState_X*                              TestState;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87512 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FStateParams S );
};

UClass* U__CameraStateSelector_Priority_TA__SelectState::pClassPointer = NULL;

// Class TAGame.__GFxData_Friends_TA__InviteToFriends
// 0x0048 (0x0084 - 0x003C)
class U__GFxData_Friends_TA__InviteToFriends : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x003C (0x0048) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87535 ];

		return pClassPointer;
	};

	void LambdaCallback ( class UError* Err );
};

UClass* U__GFxData_Friends_TA__InviteToFriends::pClassPointer = NULL;

// Class TAGame.GFxData_Friends_TA
// 0x0038 (0x008C - 0x0054)
class UGFxData_Friends_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FPersonaDataId >                    Friends;                                          		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FPersonaDataId >                    Recent;                                           		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FPersonaDataId >                    Pending;                                          		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UPersonas_TA*                                PersonasData;                                     		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     NoResultsFound;                                   		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87539 ];

		return pClassPointer;
	};

	void __GFxData_Friends_TA__DeleteFriendGroup ( class UPersona_TA* P );
	int SortPersonaList ( struct FPersonaDataId A, struct FPersonaDataId B );
	bool IsFriendInParty ( struct FUniqueNetId UniqueId );
	void HandleFriendsListChanged ( class UOnlinePlayerFriends_X* FriendsRef, class UError* Error );
	void DownloadFriendsList ( );
	class UPersona_TA* GetOrCreatePersona ( struct FOnlineFriend PersonaData );
	int GenerateGroupId ( );
	class UGFxData_PersonaGroup_TA* GetGroup ( int GroupIdx );
	class UGFxData_PersonaGroup_TA* FindGroup ( int GroupDataId );
	void ReportRecentPlayer ( struct FString OffenseReason, struct FUniqueNetId PlayerID );
	void HandleFriendStatusUpdate ( struct FOnlineFriend FriendData );
	void AddFriendNote ( struct FUniqueNetId PlayerID, struct FString msg );
	void HandleReceivedUnfriendNotice ( struct FUniqueNetId PlayerID );
	void RemoveFriendInternal ( struct FUniqueNetId PlayerID );
	void RemoveFriend ( struct FUniqueNetId PlayerID );
	void SwapFriendToGroup ( int NewIdx, struct FUniqueNetId PlayerID );
	void ChangeGroupName ( int GroupIdx, struct FString NewName );
	void DeleteFriendGroup ( int GroupIdx );
	void CreateNewFriendGroup ( struct FString GroupName );
	void DeclineFriendRequestInternal ( struct FUniqueNetId PlayerID );
	void DeclineFriendRequest ( struct FUniqueNetId PlayerID );
	void AcceptFriendRequest ( struct FUniqueNetId PlayerID );
	void OnReceivedFriendRequest ( struct FUniqueNetId PlayerID );
	void HandleReceivedFriendRequest ( struct FOnlineFriend InFriend );
	void OnFriendAcceptedInvite ( struct FUniqueNetId PlayerID );
	void HandleFriendAcceptedInvite ( struct FOnlineFriend InFriend );
	void OnInviteToFriendsSentFail ( struct FString PlayerName, struct FString FailReason );
	void OnInviteToFriendsSentSuccess ( struct FString PlayerName );
	void HandlePlayerSearchSuccess ( TArray< struct FOnlineFriend > FriendsData, struct FString SearchString );
	void InviteToFriendsByName ( struct FString PlayerName );
	void HandleFriendInviteSentFail ( struct FUniqueNetId FriendId, class UError* ErrorMsg );
	void HandleFriendInviteSentSuccess ( struct FUniqueNetId FriendId );
	void InviteToFriends ( struct FUniqueNetId PlayerID );
	void HandleUpdatePendingFriendRequests ( TArray< struct FOnlineFriend > Requests );
	void DownloadFriendRequests ( );
	void InviteToMatch ( struct FUniqueNetId PlayerID );
	void UnBlockPlayer ( struct FUniqueNetId PlayerID );
	void BlockPlayer ( struct FUniqueNetId PlayerID );
	bool AddPendingPlayerData ( class UPersona_TA* Persona );
	bool AddRecentPlayerData ( class UPersona_TA* Persona );
	bool AddFriendData ( class UPersona_TA* Persona );
	void HandlePsyNetLogin ( class UPsyNetConnection_X* C );
	void DebugInit ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_Friends_TA::pClassPointer = NULL;

// Class TAGame.__GFxData_Friends_TA__IsFriendInParty
// 0x0048 (0x0084 - 0x003C)
class U__GFxData_Friends_TA__IsFriendInParty : public UObject
{
public:
	struct FUniqueNetId                                UniqueId;                                         		// 0x003C (0x0048) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87542 ];

		return pClassPointer;
	};

	bool LambdaCallback ( struct FPartyMember Pm );
};

UClass* U__GFxData_Friends_TA__IsFriendInParty::pClassPointer = NULL;

// Class TAGame.__LoadoutCollection_TA__FindPair
// 0x000C (0x0048 - 0x003C)
class U__LoadoutCollection_TA__FindPair : public UObject
{
public:
	struct FString                                     PairName;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87557 ];

		return pClassPointer;
	};

	bool LambdaCallback ( class ULoadoutPair_TA* ComPair );
};

UClass* U__LoadoutCollection_TA__FindPair::pClassPointer = NULL;

// Class TAGame.LoadoutPair_TA
// 0x0018 (0x0054 - 0x003C)
class ULoadoutPair_TA : public UObject
{
public:
	struct FString                                     PairName;                                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ULoadoutTeam_TA* >                   Loadouts;                                         		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87562 ];

		return pClassPointer;
	};

	class ULoadoutPair_TA* CreatePair ( struct FString InPairName, TArray< class ULoadoutTeam_TA* >* ArrayInitializer_69A78C1541CA8290C003C69E94B897F7 );
};

UClass* ULoadoutPair_TA::pClassPointer = NULL;

// Class TAGame.LoadoutCollection_TA
// 0x000C (0x0048 - 0x003C)
class ULoadoutCollection_TA : public UObject
{
public:
	TArray< class ULoadoutPair_TA* >                   Pairs;                                            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87564 ];

		return pClassPointer;
	};

	class ULoadoutPair_TA* FindPair ( struct FString PairName );
	void AddPair ( class ULoadoutPair_TA* Pair );
};

UClass* ULoadoutCollection_TA::pClassPointer = NULL;

// Class TAGame.__LoadoutConverter_TA__SetsToCollection
// 0x0004 (0x0040 - 0x003C)
class U__LoadoutConverter_TA__SetsToCollection : public UObject
{
public:
	class ULoadoutCollection_TA*                       Collection;                                       		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87566 ];

		return pClassPointer;
	};

	void LambdaCallback ( class ULoadoutSet_TA* Set );
};

UClass* U__LoadoutConverter_TA__SetsToCollection::pClassPointer = NULL;

// Class TAGame.LoadoutConverter_TA
// 0x0000 (0x003C - 0x003C)
class ULoadoutConverter_TA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87570 ];

		return pClassPointer;
	};

	class ULoadoutSave_TA* SetsToSave ( class ULoadoutSet_TA* Equipped, TArray< class ULoadoutSet_TA* >* LoadoutSets );
	class ULoadoutEquipper_TA* EquippedToEquipper ( class ULoadoutSet_TA* Equipped, class ULoadoutCollection_TA* Collection );
	class ULoadoutCollection_TA* SetsToCollection ( TArray< class ULoadoutSet_TA* >* LoadoutSets );
	class ULoadoutPair_TA* SetToPair ( class ULoadoutSet_TA* Set );
	class ULoadoutTeam_TA* Loadout1ToTeam ( class ULoadout_TA** Loadout );
	struct FLoadoutTeam LoadoutDataToTeam ( struct FLoadoutData Loadout );
	struct FLoadoutTeamColor PaintToColor ( struct FLoadoutTeamPaint* Paint, struct FLoadoutTeamColor* StructInitializer_389F75304AD5FA3ECCF11DBD7BAA4EC1 );
};

UClass* ULoadoutConverter_TA::pClassPointer = NULL;

// Class TAGame.AchievementData_TA
// 0x0048 (0x0084 - 0x003C)
class UAchievementData_TA : public UObject
{
public:
	int                                                Id;                                               		// 0x003C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     DisplayName;                                      		// 0x0040 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Description;                                      		// 0x004C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                XP;                                               		// 0x0058 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Points;                                           		// 0x005C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class UTexture*                                    Icon;                                             		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bUnlocked : 1;                                    		// 0x0064 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	struct FString                                     UnlockTime;                                       		// 0x0068 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	float                                              UnlockProgress;                                   		// 0x0074 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     ProductRewards;                                   		// 0x0078 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87574 ];

		return pClassPointer;
	};

};

UClass* UAchievementData_TA::pClassPointer = NULL;

// Class TAGame.ActorFactorySkeletalMeshactorMat_Products_TA
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshactorMat_Products_TA : public UActorFactorySkeletalMeshMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87586 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySkeletalMeshactorMat_Products_TA::pClassPointer = NULL;

// Class TAGame.AIController_Breakout_TA
// 0x0010 (0x05D8 - 0x05C8)
class AAIController_Breakout_TA : public AAIController_Soccar_TA
{
public:
	struct FVector                                     ClosestEnemyGoalLocation;                         		// 0x05C8 (0x000C) [0x0000000000000000]              
	int                                                DefaultSoccarSize;                                		// 0x05D4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87588 ];

		return pClassPointer;
	};

	void GetGoalProxy ( class UBTProxyType* Type, struct FAICachedGoalInfo GoalInfo, struct FBTProxyData* OutData );
	void GetBallProxy ( struct FBTProxyData* OutData );
	void Init ( class AGameEvent_TA* InGameEvent );
};

UClass* AAIController_Breakout_TA::pClassPointer = NULL;

// Class TAGame.AimControl_TA
// 0x0274 (0x02B0 - 0x003C)
class UAimControl_TA : public UObject
{
public:
	int                                                LevelCap;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	struct FAimAssistSettings                          GroundBoost;                                      		// 0x0040 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          BoostSteer;                                       		// 0x0074 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          Throttle;                                         		// 0x00A8 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          Steer;                                            		// 0x00DC (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          Jump;                                             		// 0x0110 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          Dodge;                                            		// 0x0144 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          AirTilt;                                          		// 0x0178 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          Handbrake;                                        		// 0x01AC (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          Aerial;                                           		// 0x01E0 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          AerialJump;                                       		// 0x0214 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          AerialBoost;                                      		// 0x0248 (0x0034) [0x0000000000000000]              
	struct FAimAssistSettings                          FlipOver;                                         		// 0x027C (0x0034) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87604 ];

		return pClassPointer;
	};

};

UClass* UAimControl_TA::pClassPointer = NULL;

// Class TAGame.AnimNotify_PlayAKSound_TA
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_PlayAKSound_TA : public UAnimNotify_Scripted
{
public:
	class UAkSoundCue*                                 SFX_SoundCue;                                     		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayInReverse : 1;                               		// 0x0044 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87619 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_PlayAKSound_TA::pClassPointer = NULL;

// Class TAGame.AnimNotify_TriggerTurntableEvent_TA
// 0x000C (0x004C - 0x0040)
class UAnimNotify_TriggerTurntableEvent_TA : public UAnimNotify_Scripted
{
public:
	struct FName                                       TurntableEventName;                               		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayInReverse : 1;                               		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87627 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

UClass* UAnimNotify_TriggerTurntableEvent_TA::pClassPointer = NULL;

// Class TAGame.BeamTraceComponent_TA
// 0x0028 (0x0094 - 0x006C)
class UBeamTraceComponent_TA : public UActorComponent_X
{
public:
	TArray< class UParticleSystemComponent* >          BeamSystems;                                      		// 0x006C (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TraceDistance;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRetraceRate;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxRetraceRate;                                   		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBeamTraceProps >                   Beams;                                            		// 0x0084 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class AFXActor_X*                                  FXOwner;                                          		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87635 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventDetached ( );
	void eventAttached ( );
};

UClass* UBeamTraceComponent_TA::pClassPointer = NULL;

// Class TAGame.BreakoutFloor_TA
// 0x0000 (0x0214 - 0x0214)
class ABreakoutFloor_TA : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87661 ];

		return pClassPointer;
	};

};

UClass* ABreakoutFloor_TA::pClassPointer = NULL;

// Class TAGame.BTC_GameInfoType
// 0x0010 (0x006C - 0x005C)
class UBTC_GameInfoType : public UBTCondition
{
public:
	TArray< class UClass* >                            ValidGameInfoClasses;                             		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AGameInfo_TA*                                CurrentGameInfo;                                  		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87664 ];

		return pClassPointer;
	};

	bool eventGetResult ( );
	void eventOnInit ( );
};

UClass* UBTC_GameInfoType::pClassPointer = NULL;

// Class TAGame.Camera_Edit_TA
// 0x000C (0x0684 - 0x0678)
class ACamera_Edit_TA : public ACamera_TA
{
public:
	struct FName                                       CameraMode;                                       		// 0x0678 (0x0008) [0x0000000000000000]              
	class UCameraState_Edit_TA*                        CurrentCameraState;                               		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87673 ];

		return pClassPointer;
	};

	void UpdateCameraState ( );
	void eventUpdateCamera ( float DeltaTime );
	void InstanceCameraStates ( );
};

UClass* ACamera_Edit_TA::pClassPointer = NULL;

// Class TAGame.CameraState_Edit_TA
// 0x0004 (0x006C - 0x0068)
class UCameraState_Edit_TA : public UCameraState_TA
{
public:
	unsigned long                                      bLocalMovement : 1;                               		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87681 ];

		return pClassPointer;
	};

	void UpdateFlyPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
	class UCameraState_X* GetProxyCameraState ( );
	bool AllowSwivel ( );
};

UClass* UCameraState_Edit_TA::pClassPointer = NULL;

// Class TAGame.Camera_GameEditor_TA
// 0x000C (0x0684 - 0x0678)
class ACamera_GameEditor_TA : public ACamera_TA
{
public:
	struct FName                                       CameraMode;                                       		// 0x0678 (0x0008) [0x0000000000000000]              
	class UCameraState_GameEditor_TA*                  CurrentCameraState;                               		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87686 ];

		return pClassPointer;
	};

	void UpdateCameraState ( );
	void eventUpdateCamera ( float DeltaTime );
	void InstanceCameraStates ( );
};

UClass* ACamera_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.CameraState_GameEditor_TA
// 0x0000 (0x0068 - 0x0068)
class UCameraState_GameEditor_TA : public UCameraState_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87694 ];

		return pClassPointer;
	};

	void UpdateFlyPOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
	class UCameraState_X* GetProxyCameraState ( );
	bool AllowSwivel ( );
};

UClass* UCameraState_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.CameraState_BreakoutLiveReplay_TA
// 0x0004 (0x00D8 - 0x00D4)
class UCameraState_BreakoutLiveReplay_TA : public UCameraState_LiveReplay_TA
{
public:
	float                                              GoalVerticalOffset;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87699 ];

		return pClassPointer;
	};

	struct FVector GetCameraBaseLocation ( struct FVector CameraFocus );
};

UClass* UCameraState_BreakoutLiveReplay_TA::pClassPointer = NULL;

// Class TAGame.CameraState_CustomFocus_TA
// 0x0018 (0x0158 - 0x0140)
class UCameraState_CustomFocus_TA : public UCameraState_Car_TA
{
public:
	float                                              RotationRate;                                     		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchScale;                                       		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchFocusZFactor;                                		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchExtentMin;                                   		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchExtentMax;                                   		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACustomFocusTarget_TA*                       FocusTarget;                                      		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87737 ];

		return pClassPointer;
	};

	void UpdateFocus ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateFocusWorldOffset ( float DeltaTime );
	void UpdateAirAndGroundCamera ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void UpdateRotationModifiers ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldExecute ( );
	void Init ( class ACamera_X* InCam );
};

UClass* UCameraState_CustomFocus_TA::pClassPointer = NULL;

// Class TAGame.CustomFocusTarget_TA
// 0x0000 (0x01FC - 0x01FC)
class ACustomFocusTarget_TA : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87763 ];

		return pClassPointer;
	};

	struct FVector GetFocusLocation ( class ACar_TA* ForCar );
};

UClass* ACustomFocusTarget_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorBallCam_TA
// 0x001C (0x01C8 - 0x01AC)
class UCameraState_DirectorBallCam_TA : public UCameraState_BallCam_TA
{
public:
	struct FProfileCameraSettings                      ForcedCameraSettings;                             		// 0x01AC (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87767 ];

		return pClassPointer;
	};

	struct FProfileCameraSettings GetProfileCameraSettings ( );
};

UClass* UCameraState_DirectorBallCam_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorCountdownRotate_TA
// 0x0020 (0x013C - 0x011C)
class UCameraState_DirectorCountdownRotate_TA : public UCameraState_Countdown_TA
{
public:
	float                                              FOV;                                              		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    InitialRotation;                                  		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationSpeed;                                    		// 0x0130 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87772 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
};

UClass* UCameraState_DirectorCountdownRotate_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorCountdownTailPass_TA
// 0x0020 (0x013C - 0x011C)
class UCameraState_DirectorCountdownTailPass_TA : public UCameraState_Countdown_TA
{
public:
	float                                              DistanceFromCar;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    InitialRotation;                                  		// 0x0120 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationSpeed;                                    		// 0x012C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOV;                                              		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87782 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
};

UClass* UCameraState_DirectorCountdownTailPass_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorGoalScorer_TA
// 0x000C (0x0100 - 0x00F4)
class UCameraState_DirectorGoalScorer_TA : public UCameraState_DirectorProxy_TA
{
public:
	float                                              Distance;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOV;                                              		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACar_TA*                                     FocusCar;                                         		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87792 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldKeepExecuting ( );
	bool ShouldExecute ( );
	void HandlePlayerScored ( class AGameEvent_Soccar_TA* InGameEvent, class APRI_TA* Scorer );
	void EndCameraState ( );
	void BeginCameraState ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_DirectorGoalScorer_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorKickoff_TA
// 0x0024 (0x0118 - 0x00F4)
class UCameraState_DirectorKickoff_TA : public UCameraState_DirectorProxy_TA
{
public:
	float                                              Distance;                                         		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationOffset;                                   		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOV;                                              		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FViewTargetTransitionParams                 BlendToParams;                                    		// 0x0108 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87811 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	struct FViewTargetTransitionParams GetEndBlendParams ( class UCameraState_X* NewState );
	bool ShouldKeepExecuting ( );
};

UClass* UCameraState_DirectorKickoff_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorMoving_TA
// 0x0064 (0x0158 - 0x00F4)
class UCameraState_DirectorMoving_TA : public UCameraState_DirectorProxy_TA
{
public:
	struct FVector                                     StartOffset;                                      		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    StartRotation;                                    		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    EndRotation;                                      		// 0x0118 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FViewTargetTransitionParams                 PanBlend;                                         		// 0x0124 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartFOV;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndFOV;                                           		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LoopType;                                         		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CachedStart;                                      		// 0x0140 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CachedEnd;                                        		// 0x014C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87825 ];

		return pClassPointer;
	};

	float GetRawPercent ( float inTime );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_DirectorMoving_TA::pClassPointer = NULL;

// Class TAGame.CameraState_DirectorPlayerView_TA
// 0x009C (0x0190 - 0x00F4)
class UCameraState_DirectorPlayerView_TA : public UCameraState_DirectorProxy_TA
{
public:
	class UCameraState_TA*                             BallCameraState;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumHit;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumHitSeparation;                             		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaleDistance;                                    		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumTimeToBall;                                		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumOpposingTeamChangeTime;                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimumSameTeamChangeTime;                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarChangeTimePadding;                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FViewTargetTransitionParams                 CarChangeBlendParams;                             		// 0x0114 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           CarChangeBlendTimeForDistance;                    		// 0x0124 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinBlendContinuity;                               		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaintainCurrentDistance;                          		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaintainCurrentHitBias;                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           ContinuityBias;                                   		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinimumViewRating;                                		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACar_TA*                                     FocusCar;                                         		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCarChangeTime;                                		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsRelevant : 1;                                  		// 0x015C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bBlending : 1;                                    		// 0x015C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FCameraOrientation                          SnapshotPOV;                                      		// 0x0164 (0x002C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87849 ];

		return pClassPointer;
	};

	void HandleFocusCarDemolished ( class ACar_TA* Victim, struct FDemolishData Data );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldKeepExecuting ( );
	bool ShouldExecute ( );
	float TimeSinceChange ( );
	bool CanConsiderCar ( struct FCarData Data );
	void FindFocusCar ( );
	void SetFocusCar ( class ACar_TA* InCar );
	void EndCameraState ( );
	void BeginCameraState ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_DirectorPlayerView_TA::pClassPointer = NULL;

// Class TAGame.CameraState_IntroMenu_TA
// 0x0034 (0x0090 - 0x005C)
class UCameraState_IntroMenu_TA : public UCameraState_X
{
public:
	float                                              FOV;                                              		// 0x005C (0x0004) [0x0000000000000000]              
	struct FVector                                     Offset;                                           		// 0x0060 (0x000C) [0x0000000000000000]              
	float                                              BlendRate;                                        		// 0x006C (0x0004) [0x0000000000000000]              
	class ASkeletalMeshActorMAT_IntroCar_TA*           Focus;                                            		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASkeletalMeshActorMAT_IntroCar_TA* > FocusActors;                                      		// 0x0074 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventFocusChanged__Delegate;                    		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87928 ];

		return pClassPointer;
	};

	int FocusActorSort ( class ASkeletalMeshActorMAT_IntroCar_TA* A, class ASkeletalMeshActorMAT_IntroCar_TA* B );
	class ASkeletalMeshActorMAT_IntroCar_TA* GetInitialCarFocus ( );
	void SetupFocusActors ( );
	void SetFocus ( class ASkeletalMeshActorMAT_IntroCar_TA* NewFocus );
	void ShiftFocus ( int Direction );
	void ShiftLeftFocus ( );
	void ShiftRightFocus ( );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
	void EventFocusChanged ( class UCameraState_IntroMenu_TA* CameraState );
};

UClass* UCameraState_IntroMenu_TA::pClassPointer = NULL;

// Class TAGame.SkeletalMeshActorMAT_IntroCar_TA
// 0x0014 (0x02D8 - 0x02C4)
class ASkeletalMeshActorMAT_IntroCar_TA : public ASkeletalMeshActorMAT_Products_TA
{
public:
	int                                                ViewIndex;                                        		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    AngleOffset;                                      		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UIntroCarTemplates_TA*                       IntroCarsTemplates;                               		// 0x02D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87958 ];

		return pClassPointer;
	};

	bool __SkeletalMeshActorMAT_IntroCar_TA__PostBeginPlay ( struct FEditorIntroCar IntroCar );
	void eventPostBeginPlay ( );
};

UClass* ASkeletalMeshActorMAT_IntroCar_TA::pClassPointer = NULL;

// Class TAGame.CameraState_MenuCamActor_TA
// 0x0008 (0x01C0 - 0x01B8)
class UCameraState_MenuCamActor_TA : public UCameraState_CamActor_X
{
public:
	struct FName                                       CameraTag;                                        		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87962 ];

		return pClassPointer;
	};

	bool ShouldExecute ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_MenuCamActor_TA::pClassPointer = NULL;

// Class TAGame.CameraState_PodiumSpotlight_TA
// 0x0030 (0x008C - 0x005C)
class UCameraState_PodiumSpotlight_TA : public UCameraState_X
{
public:
	float                                              ArcT;                                             		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              CameraDistance;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              CameraOffsetYaw;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              CameraOffsetPitch;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              XOffsetDistanceStart;                             		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              XOffsetDistanceEnd;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              XOffsetDollySpeed;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              FadeInDuration;                                   		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< struct FCachedPodiumCar >                  Cars;                                             		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 87970 ];

		return pClassPointer;
	};

	void UpdateCarLocations ( class AGameEvent_TA* GameEvent );
	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void BeginCameraState ( );
	bool ShouldExecute ( );
};

UClass* UCameraState_PodiumSpotlight_TA::pClassPointer = NULL;

// Class TAGame.CameraState_PrePodiumSpotlight_TA
// 0x0010 (0x006C - 0x005C)
class UCameraState_PrePodiumSpotlight_TA : public UCameraState_X
{
public:
	float                                              ElapsedTime;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	unsigned long                                      bFadeOut : 1;                                     		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              FadeOutDelay;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              FadeOutDuration;                                  		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88001 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	bool ShouldExecute ( );
};

UClass* UCameraState_PrePodiumSpotlight_TA::pClassPointer = NULL;

// Class TAGame.CameraState_StadiumSide_TA
// 0x0104 (0x01F8 - 0x00F4)
class UCameraState_StadiumSide_TA : public UCameraState_DirectorProxy_TA
{
public:
	struct FVector                                     TrackOffset;                                      		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TrackSize;                                        		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           TrackProximityOffsetSide;                         		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TrackProximityOffsetLerp;                         		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           FocusLerp;                                        		// 0x0120 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           TrackLerpSide;                                    		// 0x0130 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           TrackLerpForward;                                 		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           CarDistWeight;                                    		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           GoalDistWeight;                                   		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BallPredictionTime;                               		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFOV;                                           		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFOV;                                           		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SmoothFOVLerp;                                    		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TrackCenter;                                      		// 0x0180 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TrackRight;                                       		// 0x018C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TrackForward;                                     		// 0x0198 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TrackStart;                                       		// 0x01A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     TrackEnd;                                         		// 0x01B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FieldStart;                                       		// 0x01BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FieldEnd;                                         		// 0x01C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SmoothedFocus;                                    		// 0x01D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     SmoothedFieldPct;                                 		// 0x01E0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              SmoothedFOV;                                      		// 0x01EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SmoothedProximityOffsetSide;                      		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCut : 1;                                         		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88012 ];

		return pClassPointer;
	};

	void UpdatePOV ( float DeltaTime, struct FCameraOrientation* OutPOV );
	void InitFieldTrackValues ( );
	void BeginCameraState ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraState_StadiumSide_TA::pClassPointer = NULL;

// Class TAGame.CameraStateSelector_Sequence_TA
// 0x0008 (0x0060 - 0x0058)
class UCameraStateSelector_Sequence_TA : public UCameraStateSelector_TA
{
public:
	unsigned long                                      bResetIndexOnActive : 1;                          		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                StateIdx;                                         		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88070 ];

		return pClassPointer;
	};

	int GetNextStateIndex ( );
	class UCameraState_X* SelectState ( class UCameraState_X* InCurrentState );
	void SetActive ( );
};

UClass* UCameraStateSelector_Sequence_TA::pClassPointer = NULL;

// Class TAGame.CameraStateSelector_RandomSequence_TA
// 0x0004 (0x0064 - 0x0060)
class UCameraStateSelector_RandomSequence_TA : public UCameraStateSelector_Sequence_TA
{
public:
	unsigned long                                      bReshuffleOnActive : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88080 ];

		return pClassPointer;
	};

	void Reshuffle ( );
	void SetActive ( );
	void Init ( class ACamera_X* InCamera );
};

UClass* UCameraStateSelector_RandomSequence_TA::pClassPointer = NULL;

// Class TAGame.Car_Freeplay_TA
// 0x000C (0x08F8 - 0x08EC)
class ACar_Freeplay_TA : public ACar_TA
{
public:
	TArray< struct FLinearColor >                      CarColors;                                        		// 0x08EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88090 ];

		return pClassPointer;
	};

	void SetCarColor ( class UCarMeshComponentBase_TA* InMesh );
	int GetLoadoutTeamIndex ( );
	bool HasTeam ( );
	void InitCarFX ( );
};

UClass* ACar_Freeplay_TA::pClassPointer = NULL;

// Class TAGame.CarJointSpinner_TA
// 0x002C (0x0098 - 0x006C)
class UCarJointSpinner_TA : public UActorComponent_X
{
public:
	struct FName                                       ControlName;                                      		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              IdleSpeed;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DrivingSpeed;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BoostSpeed;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RotationAxis;                                     		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ACar_TA*                                     Car;                                              		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      Control;                                          		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Speed;                                            		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88116 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	void eventAttached ( );
};

UClass* UCarJointSpinner_TA::pClassPointer = NULL;

// Class TAGame.CarMeshComponent_GarageComplex_TA
// 0x0000 (0x0758 - 0x0758)
class UCarMeshComponent_GarageComplex_TA : public UCarMeshComponent_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88132 ];

		return pClassPointer;
	};

};

UClass* UCarMeshComponent_GarageComplex_TA::pClassPointer = NULL;

// Class TAGame.CollisionTestTrack_TA
// 0x0004 (0x0200 - 0x01FC)
class ACollisionTestTrack_TA : public AActor
{
public:
	class UCollisionTestComponent_TA*                  CollisionTestComponent;                           		// 0x01FC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88134 ];

		return pClassPointer;
	};

};

UClass* ACollisionTestTrack_TA::pClassPointer = NULL;

// Class TAGame.FXActor_GarageComplexRow_TA
// 0x0000 (0x026C - 0x026C)
class AFXActor_GarageComplexRow_TA : public AFXActor_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88140 ];

		return pClassPointer;
	};

};

UClass* AFXActor_GarageComplexRow_TA::pClassPointer = NULL;

// Class TAGame.FXActor_TrainingEditor_TA
// 0x0020 (0x0278 - 0x0258)
class AFXActor_TrainingEditor_TA : public AFXActor_X
{
public:
	float                                              AdjustSpeedStateRemoveDelay;                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 AkBallSpeedDirectionChange;                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFXActorEvent_X*                             SimulatingBallState;                              		// 0x0260 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             AdjustingSpeedState;                              		// 0x0264 (0x0004) [0x0000000000000000]              
	class UFXActorEvent_X*                             PlaytestingState;                                 		// 0x0268 (0x0004) [0x0000000000000000]              
	class AGameEvent_TrainingEditor_TA*                GameEvent;                                        		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevLaunchSpeed;                                  		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevLaunchSpeedSign;                              		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88143 ];

		return pClassPointer;
	};

	void AdjustSpeedStateEnd ( );
	void HandleLaunchVelocityChange ( class ABall_GameEditor_TA* InBall );
	void HandleBallReset ( class ABall_GameEditor_TA* InBall );
	void HandleBallFire ( class ABall_GameEditor_TA* InBall );
	void HandlePlaytestStarted ( class AGameEvent_TrainingEditor_TA* InGameEvent );
	void HandleGameStateChange ( class AGameEvent_TA* InGameEvent );
	void HandleBallRemoved ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball );
	void HandleBallAdded ( class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball );
	void PostBeginPlay ( );
};

UClass* AFXActor_TrainingEditor_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_500_TA
// 0x003C (0x0078 - 0x003C)
class UGameEvent_Soccar_SubRules_500_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	TArray< struct FBallScoreData >                    BallScoreDistribution;                            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RespawnDelay;                                     		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              MinLaunchSpeed;                                   		// 0x004C (0x0004) [0x0000000000000000]              
	float                                              MaxLaunchSpeed;                                   		// 0x0050 (0x0004) [0x0000000000000000]              
	int                                                PreviousTime;                                     		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMessage_TA*                                 BallSpawningMessage;                              		// 0x0058 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 PlayerScoredMessage;                              		// 0x005C (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 WinnersMessage;                                   		// 0x0060 (0x0004) [0x0000000000000000]              
	class ACannon_TA*                                  CannonArchetype;                                  		// 0x0064 (0x0004) [0x0000000000000000]              
	class ACannon_TA*                                  FiringCannon;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	TArray< struct FCannonFacingInfo >                 CannonData;                                       		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88175 ];

		return pClassPointer;
	};

	class ATeam_TA* OnGetWinningTeam ( );
	void OnTick ( float DeltaTime );
	void Handle500CarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void Handle500GroundTouch ( class ABall_TA* Ball, struct FVector HitLoc, struct FVector HitNormal );
	void SpawnWarning ( );
	void SetBallListeners ( class ABall_TA* Ball, unsigned long bListen );
	bool ShouldDisableStatXP ( );
	bool ShouldSpawnBall ( );
	void OnGetBallSpawnPosition ( struct FVector* BallPosition );
	void OnAddGameBall ( class ABall_TA* Ball );
	void OnMatchEnd ( );
	void OnNewRound ( );
	void Init ( );
};

UClass* UGameEvent_Soccar_SubRules_500_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_Football_TA
// 0x0008 (0x0044 - 0x003C)
class UGameEvent_Soccar_SubRules_Football_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                BallCarryingScore;                                		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                DefaultScore;                                     		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88245 ];

		return pClassPointer;
	};

	void HandleCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void SetBallListeners ( class ABall_TA* Ball, unsigned long bListen );
	void OnGetBallModifiedScore ( class ABall_TA* Ball, int ScoreIndex, int* BallScore );
};

UClass* UGameEvent_Soccar_SubRules_Football_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_Items_TA
// 0x001C (0x0058 - 0x003C)
class UGameEvent_Soccar_SubRules_Items_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	class UPlayerItemDispenser_TA*                     DispenserArchetype;                               		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaggerTime;                                      		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentStaggerByTeam[ 0x2 ];                      		// 0x0044 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UPlayerItemDispenser_TA* >           ItemDispensers;                                   		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88260 ];

		return pClassPointer;
	};

	void RandomizeDispenserOrder ( );
	void CheckPlayers ( );
	void OnMatchEnd ( );
	void HandleGoalScored ( class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx );
	void HandleCarSpawned ( class AGameEvent_TA* GameEvent, class ACar_TA* Car );
	void HandleStartNewRound ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleTeamsCreated ( class AGameEvent_Team_TA* GameEvent );
	void HandlePRIRemoved ( class AGameEvent_TA* GameEvent, class APRI_TA* PRI );
	void HandlePRIAdded ( class AGameEvent_TA* GameEvent, class APRI_TA* PRI );
	void OnNewRound ( );
	void Init ( );
};

UClass* UGameEvent_Soccar_SubRules_Items_TA::pClassPointer = NULL;

// Class TAGame.PlayerItemDispenser_TA
// 0x0034 (0x0070 - 0x003C)
class UPlayerItemDispenser_TA : public UObject
{
public:
	float                                              ItemGiveRate;                                     		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRandomWeight >                     Items;                                            		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PickWeightMultiplier;                             		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bResetWeightsOnGoal : 1;                          		// 0x0050 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bResetTimerOnDemolish : 1;                        		// 0x0050 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseItemPool : 1;                                 		// 0x0050 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bWaitingForNextRound : 1;                         		// 0x0050 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bGiven : 1;                                       		// 0x0050 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              NextItemTime;                                     		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APRI_TA*                                     PRI;                                              		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASpecialPickup_TA* >                 ItemPool;                                         		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ASpecialPickup_TA*                           DemolishedItem;                                   		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASpecialPickup_TA*                           LastPickup;                                       		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88300 ];

		return pClassPointer;
	};

	void RefillPool ( );
	void HandleItemCarDestroyed ( class APawn_X* Car );
	void HandleItemCarDemolished ( class ACar_TA* Car, struct FDemolishData Data );
	void GiveItem ( class ASpecialPickup_TA* OverrideItem );
	void OnGoalScored ( );
	void OnMatchEnd ( );
	void OnNewRound ( float InStaggerTime, float InGameTimeRemaining );
	void Update ( );
	float GetTotalGameTimePlayed ( );
	void Init ( class APRI_TA* InPRI, float InStaggerTime );
};

UClass* UPlayerItemDispenser_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_RedGreen_TA
// 0x0018 (0x0054 - 0x003C)
class UGameEvent_Soccar_SubRules_RedGreen_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                MaxRedDuration;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                MinRedDuration;                                   		// 0x0040 (0x0004) [0x0000000000000000]              
	int                                                MaxGreenDuration;                                 		// 0x0044 (0x0004) [0x0000000000000000]              
	int                                                MinGreenDuration;                                 		// 0x0048 (0x0004) [0x0000000000000000]              
	int                                                CurrentTime;                                      		// 0x004C (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 StopMessage;                                      		// 0x0050 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88303 ];

		return pClassPointer;
	};

	void OnTick ( float DeltaTime );
	void OnRemoveGameBall ( );
	void RedBallActivate ( );
	void GreenBallActivate ( );
	void OnMatchEnd ( );
	void OnFirstBallHit ( );
};

UClass* UGameEvent_Soccar_SubRules_RedGreen_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_TreasureHunt_TA
// 0x0028 (0x0064 - 0x003C)
class UGameEvent_Soccar_SubRules_TreasureHunt_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	float                                              RespawnDelay;                                     		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                PreviousTime;                                     		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMessage_TA*                                 BallFoundMessage;                                 		// 0x0044 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 BallSpawningMessage;                              		// 0x0048 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 BallSpawnedMessage;                               		// 0x004C (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 BallDistanceMessage;                              		// 0x0050 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 BallNearbyMessage;                                		// 0x0054 (0x0004) [0x0000000000000000]              
	TArray< int >                                      PreviousDistances;                                		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88321 ];

		return pClassPointer;
	};

	class ATeam_TA* OnGetWinningTeam ( );
	void OnTick ( float DeltaTime );
	void UpdateDistances ( );
	void HandleTreasureHuntCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void PrepNewBall ( );
	void SetBallListeners ( class ABall_TA* Ball, unsigned long bListen );
	void DummyTimer ( );
	bool OnCanUseBallCam ( );
	bool ShouldDisableStatXP ( );
	bool ShouldSpawnBall ( );
	void OnGetBallSpawnPosition ( struct FVector* BallPosition );
	void OnAddGameBall ( class ABall_TA* Ball );
	void OnMatchEnd ( );
	void OnNewRound ( );
};

UClass* UGameEvent_Soccar_SubRules_TreasureHunt_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Soccar_SubRules_TurnBased_TA
// 0x000C (0x0048 - 0x003C)
class UGameEvent_Soccar_SubRules_TurnBased_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	unsigned char                                      AllowTeamMove;                                    		// 0x003C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DisabledTeamMove;                                 		// 0x003D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              TurnBasedDuration;                                		// 0x0040 (0x0004) [0x0000000000000000]              
	class UMessage_TA*                                 StopMessage;                                      		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88370 ];

		return pClassPointer;
	};

	void OnRemoveGameBall ( );
	void OnRestartPlayer ( class AController* NewPlayer );
	void OnCarDemolished ( class ACar_TA* Car, struct FDemolishData Data );
	void EnableNewTurnBall ( );
	void SetTeamCanMove ( unsigned char TeamNum, unsigned long bCanMove );
	void SwitchTurns ( );
	void DisableOldTurnBall ( );
	void HandleTurnBasedGroundTouch ( class ABall_TA* Ball, struct FVector HitLoc, struct FVector HitNormal );
	void HandleTurnBasedCarTouch ( class ABall_TA* Ball, class ACar_TA* HitCar, unsigned char HitType );
	void SetBallListeners ( class ABall_TA* Ball, unsigned long bListen );
	void OnMatchEnd ( );
	void OnNewRound ( );
};

UClass* UGameEvent_Soccar_SubRules_TurnBased_TA::pClassPointer = NULL;

// Class TAGame.GameEvent_Track_TA
// 0x0000 (0x050C - 0x050C)
class AGameEvent_Track_TA : public AGameEvent_Team_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88402 ];

		return pClassPointer;
	};

	void OnInit ( );
	void GatherSpawns ( );
	void eventPostBeginPlay ( );
};

UClass* AGameEvent_Track_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_CollisionTest_TA
// 0x001C (0x043C - 0x0420)
class AGameInfo_CollisionTest_TA : public AGameInfoBase_TA
{
public:
	TArray< class UCollisionTestComponent_TA* >        TestComponents;                                   		// 0x0420 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UCollisionTestComponent_TA*                  CurrentTest;                                      		// 0x042C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                CurrentIndex;                                     		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CurrentActor;                                     		// 0x0434 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRepeat : 1;                                      		// 0x0438 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88413 ];

		return pClassPointer;
	};

	class AActor* SpawnActor ( class UCollisionTestComponent_TA* Test, float Alpha );
	class AActor* SpawnActorFromTest ( class UCollisionTestComponent_TA* Test );
	void SkipTest ( );
	void Repeat ( int Index );
	void SkipTo ( int Index );
	void Skip ( int Steps );
	void FireNext ( );
	void StartNextTest ( );
	void FindTestActors ( );
	void SetStadiumColors ( );
	void GenericPlayerInitialization ( class AController* C );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void InitGame ( struct FString Options, struct FString* ErrorMessage );
};

UClass* AGameInfo_CollisionTest_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_GameEditor_TA
// 0x0000 (0x0444 - 0x0444)
class AGameInfo_GameEditor_TA : public AGameInfo_Soccar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88459 ];

		return pClassPointer;
	};

	void RestartGameEvent ( );
	void ResetTraining ( );
	void SetupPlayer ( class APlayerController* NewPlayer );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void eventPostBeginPlay ( );
};

UClass* AGameInfo_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Hockey_TA
// 0x0000 (0x0444 - 0x0444)
class AGameInfo_Hockey_TA : public AGameInfo_Soccar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88469 ];

		return pClassPointer;
	};

};

UClass* AGameInfo_Hockey_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Items_TA
// 0x0000 (0x0444 - 0x0444)
class AGameInfo_Items_TA : public AGameInfo_Soccar_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88471 ];

		return pClassPointer;
	};

};

UClass* AGameInfo_Items_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Track_TA
// 0x0004 (0x043C - 0x0438)
class AGameInfo_Track_TA : public AGameInfo_TA
{
public:
	class AGameEvent_TA*                               GameEventArchetype;                               		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88473 ];

		return pClassPointer;
	};

	void RestartLevel ( );
	void RestartPlayer ( class AController* aPlayer );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void eventPostBeginPlay ( );
};

UClass* AGameInfo_Track_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_TrainingEditor_TA
// 0x0000 (0x0444 - 0x0444)
class AGameInfo_TrainingEditor_TA : public AGameInfo_GameEditor_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88485 ];

		return pClassPointer;
	};

	void SetupPlayer ( class APlayerController* NewPlayer );
	void OnCreateCurrentGame ( );
};

UClass* AGameInfo_TrainingEditor_TA::pClassPointer = NULL;

// Class TAGame.GameInfo_Transition_TA
// 0x0000 (0x0420 - 0x0420)
class AGameInfo_Transition_TA : public AGameInfoBase_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88490 ];

		return pClassPointer;
	};

};

UClass* AGameInfo_Transition_TA::pClassPointer = NULL;

// Class TAGame.GFxClubAction_TA
// 0x0050 (0x008C - 0x003C)
class UGFxClubAction_TA : public UObject
{
public:
	struct FName                                       ActionName;                                       		// 0x003C (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             Callback;                                         		// 0x0044 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0048 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UAsyncTask*                                  Task;                                             		// 0x0054 (0x0004) [0x0000000000000000]              
	class UError*                                      Error;                                            		// 0x0058 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __ClubActionCompleteHandler__Delegate;            		// 0x005C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0060 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __StartTaskDelegate__Delegate;                    		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0070 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnComplete__Delegate;                           		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0080 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88492 ];

		return pClassPointer;
	};

	void eventDispose ( );
	void Complete ( struct FString ErrMsg );
	void HandleTaskComplete ( class UError* TaskError );
	class UGFxClubAction_TA* Start ( struct FScriptDelegate Action );
	class UGFxClubAction_TA* SetError ( class UError* InError, struct FString DebugMsg );
	class UGFxClubAction_TA* Assert ( unsigned long expr, struct FString DebugMsg );
	class UGFxClubAction_TA* Create ( struct FName InName, struct FScriptDelegate InCallback );
	void OnComplete ( class UGFxClubAction_TA* Action );
	class UAsyncTask* StartTaskDelegate ( );
	void ClubActionCompleteHandler ( struct FString InError );
};

UClass* UGFxClubAction_TA::pClassPointer = NULL;

// Class TAGame.GFxData_AdHoc_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_AdHoc_TA : public UGFxDataSingleton_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88528 ];

		return pClassPointer;
	};

	void HandleDisabledFail ( class UError* Error );
	void DisableAdHoc ( );
	void OnEnabledError ( );
	void OnEnabled ( );
	void HandleEnabledFail ( class UError* Error );
	void HandleEnabledSuccess ( );
	void EnableAdHoc ( );
};

UClass* UGFxData_AdHoc_TA::pClassPointer = NULL;

// Class TAGame.GFxData_AuthenticatedName_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_AuthenticatedName_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     PlayerName;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88539 ];

		return pClassPointer;
	};

	void LoginSuccess ( );
	void LoginFailed ( );
	void HandleAuthenticatedNameChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void HandleLoginChanged ( class UOnlinePlayerAuthentication_X* Auth );
	void Login ( );
	void NameRequestFailed ( struct FString Error );
	void NameRequestSuccess ( );
	void HandleAuthenticatedNameAvailableComplete ( class URPC_AuthenticatedNameAvailable_TA* RPC );
	void IsPlayerNameAvailable ( );
	void SetPlayerName ( struct FString NewName );
};

UClass* UGFxData_AuthenticatedName_TA::pClassPointer = NULL;

// Class TAGame.RPC_AuthenticatedNameAvailable_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_AuthenticatedNameAvailable_TA : public URPC_X
{
public:
	struct FString                                     Platform;                                         		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerName;                                       		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88557 ];

		return pClassPointer;
	};

	class URPC_AuthenticatedNameAvailable_TA* SetRequestedName ( struct FString RequestName );
	class URPC_AuthenticatedNameAvailable_TA* SetPlatform ( struct FString InPlatform );
};

UClass* URPC_AuthenticatedNameAvailable_TA::pClassPointer = NULL;

// Class TAGame.GFxData_CarColors_TA
// 0x003C (0x0090 - 0x0054)
class UGFxData_CarColors_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxTeamColor >                     Custom;                                           		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     Team0;                                            		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     Team1;                                            		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     Clubs;                                            		// 0x0078 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     PlayerBanners;                                    		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88578 ];

		return pClassPointer;
	};

	void eventOnShellSet ( );
};

UClass* UGFxData_CarColors_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ContainerDrops_TA
// 0x0018 (0x006C - 0x0054)
class UGFxData_ContainerDrops_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FContainerInfo >                    ContainerDropList;                                		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FRPCContainerDropTable >            RPCContainerDropList;                             		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88591 ];

		return pClassPointer;
	};

	struct FString GetPossibleContainerDrops ( int ProductID );
	TArray< struct FString > GetMatchingProductSeries ( int SeriesID );
	void OnContainersUpdated ( );
	void HandleGetContainerDropTableResponse ( class URPC_MicroTransactions_GetContainerDropTable_TA* RPC );
	void GetContentDrops ( );
	void HandlePsyNetLoginChange ( class UOnlinePlayerAuthentication_X* Auth );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_ContainerDrops_TA::pClassPointer = NULL;

// Class TAGame.RPC_MicroTransactions_GetContainerDropTable_TA
// 0x0010 (0x00AC - 0x009C)
class URPC_MicroTransactions_GetContainerDropTable_TA : public URPC_X
{
public:
	int                                                GameVersion;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< struct FRPCContainerDropTable >            ContainerDrops;                                   		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88607 ];

		return pClassPointer;
	};

	class URPC_MicroTransactions_GetContainerDropTable_TA* SetGameVersion ( int InGameVersion );
};

UClass* URPC_MicroTransactions_GetContainerDropTable_TA::pClassPointer = NULL;

// Class TAGame.GFxData_CustomTeams_TA
// 0x0044 (0x0098 - 0x0054)
class UGFxData_CustomTeams_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxCustomTeamSettings >            Settings;                                         		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      SettingsType;                                     		// 0x0060 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     TeamColors;                                       		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxTeamColor >                     CustomColors;                                     		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviewTeam;                                      		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UCarPreviewSet_TA*                           PreviewSet;                                       		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FClubColorSet                               PreviewColors[ 0x2 ];                             		// 0x0088 (0x0010) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88648 ];

		return pClassPointer;
	};

	bool InMainMenu ( );
	void UpdateCarColors ( class ACarPreviewActor_TA* PreviewActor, unsigned long bClubColors );
	void HandleSetProfile ( class ACarPreviewActor_TA* Car );
	void RestoreStadiumColors ( );
	void InitStadiumColors ( );
	void ResetPreviewColors ( );
	void SetCustomColorID ( int Team, int ColorID );
	void PreviewCustomColorID ( int Team, int ColorID );
	void SetTeamColorID ( int Team, int ColorID );
	void PreviewTeamColorID ( int Team, int ColorID );
	void ClearTeamName ( int Team );
	void SetTeamName ( int Team, struct FString TeamName );
	void SetSettingsType ( unsigned char Type );
	void SaveColors ( int Team );
	void InitPreviewColors ( );
	void InitColorTables ( );
	struct FGFxCustomTeamSettings CreateTeamSettings ( int TeamIdx );
	void InitTeamSettings ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_CustomTeams_TA::pClassPointer = NULL;

// Class TAGame.GFxData_DateTime_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_DateTime_TA : public UGFxDataSingleton_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88715 ];

		return pClassPointer;
	};

	struct FDateTimeStruct AddSeconds ( struct FDateTimeStruct DateTime, int Amount );
	struct FDateTimeStruct AddMinutes ( struct FDateTimeStruct DateTime, int Amount );
	struct FDateTimeStruct AddHours ( struct FDateTimeStruct DateTime, int Amount );
	struct FDateTimeStruct AddDays ( struct FDateTimeStruct DateTime, int Amount );
	struct FDateTimeStruct AddMonths ( struct FDateTimeStruct DateTime, int Amount );
	struct FDateTimeStruct AddYears ( struct FDateTimeStruct DateTime, int Amount );
	struct FDateTimeStruct UtcToLocalTime ( );
	struct FDateTimeStruct UtcNow ( );
	struct FDateTimeStruct Now ( );
};

UClass* UGFxData_DateTime_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ESportEvents_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_ESportEvents_TA : public UGFxDataSingleton_X
{
public:
	class UESportEvents_TA*                            ESportEvents;                                     		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88748 ];

		return pClassPointer;
	};

	void DownloadImage ( struct FString URL );
	void eventOnShellSet ( );
};

UClass* UGFxData_ESportEvents_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PersonaGroup_TA
// 0x0010 (0x0064 - 0x0054)
class UGFxData_PersonaGroup_TA : public UGFxDataRow_X
{
public:
	struct FString                                     GroupTitle;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                GroupId;                                          		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88910 ];

		return pClassPointer;
	};

};

UClass* UGFxData_PersonaGroup_TA::pClassPointer = NULL;

// Class TAGame.GFxData_IntroMenu_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_IntroMenu_TA : public UGFxDataSingleton_X
{
public:
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     CarBodyName;                                      		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FScriptDelegate                             __EventIntroCarSelected__Delegate;                		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0068 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88929 ];

		return pClassPointer;
	};

	class UProfile_TA* GetProfile ( );
	void CarSelected ( );
	void CarsInPosition ( );
	void HandleRecieveSelectedCar ( class URPC_SelectIntroCar_TA* RPC );
	void SelectCar ( );
	void HandleFocusChanged ( class UCameraState_IntroMenu_TA* CameraState );
	void ShiftFocusLeft ( );
	void ShiftFocusRight ( );
	class UCameraState_IntroMenu_TA* GetCameraState ( );
	void SetCameraState ( struct FName StateName );
	void HandleIntroCarsInPosition ( class AGameInfo_GFxMenu_TA* GameInfoMenu );
	void ShowIntroLevel ( unsigned long bEnable );
	void eventOnShellSet ( );
	void EventIntroCarSelected ( );
};

UClass* UGFxData_IntroMenu_TA::pClassPointer = NULL;

// Class TAGame.RPC_SelectIntroCar_TA
// 0x0064 (0x0100 - 0x009C)
class URPC_SelectIntroCar_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                TemplateIndex;                                    		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                ProductData;                                      		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 ProcessedProducts;                                		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88959 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	class URPC_SelectIntroCar_TA* SetSelectedIndex ( int InTemplateIndex );
	class URPC_SelectIntroCar_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_SelectIntroCar_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_IntroMenu_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_IntroMenu_TA : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88965 ];

		return pClassPointer;
	};

};

UClass* USeqEvent_IntroMenu_TA::pClassPointer = NULL;

// Class TAGame.GFxData_LanBrowser_TA
// 0x0008 (0x005C - 0x0054)
class UGFxData_LanBrowser_TA : public UGFxDataSingleton_X
{
public:
	class ULanBrowser_X*                               LanBrowser;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	class UAsyncTask*                                  GetServerListTask;                                		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88967 ];

		return pClassPointer;
	};

	void __GFxData_LanBrowser_TA__Refresh ( class UError* _ );
	void __GFxData_LanBrowser_TA__Refresh1 ( class UError* Error );
	void CreateServerGFxData ( class ULanServerRecord_X* Server );
	void OnRefreshed ( );
	void OnRefreshError ( );
	void HandleServers ( TArray< class ULanServerRecord_X* > Records );
	void Refresh ( );
};

UClass* UGFxData_LanBrowser_TA::pClassPointer = NULL;

// Class TAGame.GFxData_LanServer_TA
// 0x0050 (0x00A4 - 0x0054)
class UGFxData_LanServer_TA : public UGFxDataRow_X
{
public:
	struct FString                                     SanitizedOwnerName;                               		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    OwnerAvatar;                                      		// 0x0060 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FString                                     OwnerPlatform;                                    		// 0x0064 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     LocalizedMapName;                                 		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SanitizedServerName;                              		// 0x007C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ServerID;                                         		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0094 (0x0004) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x0098 (0x0004) [0x0000000000000000]              
	class UOnlineGameWordFilter_X*                     WorldFilter;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	class ULanBrowser_X*                               LanBrowser;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88983 ];

		return pClassPointer;
	};

	void __GFxData_LanServer_TA__Connect ( class UError* Error );
	void OnJoinError ( );
	void Connect ( struct FString Password );
	struct FString GetJoinOptions ( struct FString Password );
	void HandleGetAvatar ( struct FUniqueNetId InPlayerId, class UTexture* InAvatar, struct FString OnlinePlayerName );
	void LoadAvatar ( struct FUniqueNetId PlayerID );
	void HandleServerNameSanitized ( struct FString Original, struct FString Sanitized );
	void SanitizeServerName ( struct FString InServerName );
	void HandlePlayerNameSanitized ( struct FString Original, struct FString Sanitized );
	void SanitizeOwnerName ( struct FUniqueNetId InPlayerId, struct FString InPlayerName );
	struct FString GetLocalizedMapName ( struct FName MapID );
	void SetData ( class ULanServerRecord_X* Server );
};

UClass* UGFxData_LanServer_TA::pClassPointer = NULL;

// Class TAGame.GFxData_LanMatch_TA
// 0x001D (0x0071 - 0x0054)
class UGFxData_LanMatch_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     ServerName;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Password;                                         		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                SelectedMaxPlayerCount;                           		// 0x006C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      SettingsType;                                     		// 0x0070 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88986 ];

		return pClassPointer;
	};

	void CreateMatch ( );
	void UpdateCustomMatchSettings ( );
	void SetPassword ( struct FString InPassword );
	void HandleSanitizedServerName ( struct FString Original, struct FString Sanitized );
	void SetServerName ( struct FString InServerName );
	void SetSelectedMaxPlayerCount ( int MaxPlayerCount );
	class UProfile_TA* GetProfile ( );
	void SetCustomMatchSettings ( struct FCustomMatchSettings* InSettings );
	struct FCustomMatchSettings GetCustomMatchSettings ( );
	void eventOnShellSet ( );
	class UOnlineGame_TA* GetOnlineGame ( );
};

UClass* UGFxData_LanMatch_TA::pClassPointer = NULL;

// Class TAGame.GFxData_LoadoutSets_TA
// 0x0090 (0x00E4 - 0x0054)
class UGFxData_LoadoutSets_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxLoadoutSet >                    LoadoutSets;                                      		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProfile_TA*                                 Profile;                                          		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLoadoutData                                RandomLoadouts[ 0x2 ];                            		// 0x0064 (0x0068) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UProductLoader_TA*                           RandomLoadoutLoader;                              		// 0x00CC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UProductLoader_TA*                           PreviousLoadoutSetLoader;                         		// 0x00D0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UProductLoader_TA*                           NextLoadoutSetLoader;                             		// 0x00D4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULoadoutSequencer_TA*                        LoadoutSequencer;                                 		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousBodyProductID;                            		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DesiredLoadoutIndex;                              		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89059 ];

		return pClassPointer;
	};

	class ACarPreviewActor_TA* GetCarPreview ( );
	void FinishRandomization ( );
	void UpdatePreviewLoadout ( );
	int GetPreviewTeam ( );
	void SetPreviewTeam ( int Team );
	void SetEditingLoadoutSet ( int Index );
	void RandomizePreset ( int Index );
	void SetupNextRandomLoadout ( struct FLoadoutData* Loadouts, struct FLoadoutData* StructInitializer_4EA42B60417ED4C772A2C29516C1E958 );
	bool HasPresetNamed ( struct FString NewName );
	void RenamePreset ( int Index, struct FString NewName );
	void DeletePreset ( int Index );
	void CreatePreset ( );
	bool CanCreatePreset ( );
	void EquipPreset ( int Index );
	void UpdateLoadout ( );
	void HandleLoadoutSetsChanged ( class UProfile_TA* InProfile );
	void ClearLoaderCache ( class UProductLoader_TA* Loader );
	void HandleLoadoutLoaded ( class UProductLoader_TA* Loader );
	void PreloadLoadout ( struct FLoadoutData Loadout, class UProductLoader_TA* Loader );
	void PreloadNextPrevLoadoutSets ( int Index );
	void InitLoadoutSets ( );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_LoadoutSets_TA::pClassPointer = NULL;

// Class TAGame.LoadoutSequencer_TA
// 0x008C (0x00C8 - 0x003C)
class ULoadoutSequencer_TA : public UObject
{
public:
	TArray< struct FSequenceData >                     SlotSequence;                                     		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bDebug : 1;                                       		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class ACarPreviewActor_TA*                         PreviewActor;                                     		// 0x004C (0x0004) [0x0000000000000000]              
	struct FLoadoutData                                FinalLoadout;                                     		// 0x0050 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLoadoutData                                CurrentLoadout;                                   		// 0x0084 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventSequenceComplete__Delegate;                		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89129 ];

		return pClassPointer;
	};

	void Finish ( );
	class AActor* GetTimerObject ( );
	void QueueNextSlot ( float Delay );
	void EquipNextSlot ( );
	void OnSequenceComplete ( );
	void HandleProductLoaded ( struct FAssetLoadResult Result );
	void QueueSlot ( class UProductSlot_TA* Slot, float AnimDelay );
	void Start ( class ACarPreviewActor_TA* InPreviewActor, struct FScriptDelegate Callback, struct FLoadoutData* InLoadout );
	void SequencerLog ( struct FString LogStr );
	void EventSequenceComplete ( class ULoadoutSequencer_TA* Sequencer );
};

UClass* ULoadoutSequencer_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MapPrefs_TA
// 0x0034 (0x0088 - 0x0054)
class UGFxData_MapPrefs_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxPlaylistType >                  PlaylistTypes;                                    		// 0x0054 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxMapType >                       MapTypes;                                         		// 0x0060 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxMapPlaylist >                   Playlists;                                        		// 0x006C (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FGFxMapPreference >                 Maps;                                             		// 0x0078 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UMapPrefsConfig_X*                           MapPrefsConfig;                                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89136 ];

		return pClassPointer;
	};

	class UProfile_TA* GetProfile ( );
	TArray< class UMapData_TA* > FilterAndSortMaps ( TArray< class UMapData_TA* > UnsortedMaps );
	void SavePrefs ( struct FPlaylistMapPrefs Prefs );
	void SetMapPreference ( struct FName PlaylistId, struct FName MapID, unsigned char Preference );
	void SetPlaylistOverrideGlobal ( struct FName PlaylistId, unsigned long bOverride );
	struct FName GetMapType ( class UMapData_TA* Map );
	void AddPlaylistMapPrefs ( struct FName PlaylistId, TArray< class UMapData_TA* > PlaylistMaps );
	void AddPlaylistData ( struct FName PlaylistId, struct FName PlaylistTypeID, struct FString PlaylistLabel, TArray< class UMapData_TA* > PlaylistMaps );
	TArray< class UMapData_TA* > GetGlobalMaps ( );
	struct FString GetGlobalLabel ( );
	void InitMapPrefs ( );
	void InitMapTypes ( );
	void InitPlaylistTypes ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_MapPrefs_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MapSelection_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_MapSelection_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxMapSelectionData >              Selections;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FScriptDelegate                             __EventMapListChange__Delegate;                   		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89226 ];

		return pClassPointer;
	};

	struct FGFxMapSelectionData __GFxData_MapSelection_TA__HandleMapListChanged ( struct FGFxMapData M, struct FGFxMapSelectionData* StructInitializer_C8043AFC4517FB6F57241F9A5CB82BB1 );
	struct FName __GFxData_MapSelection_TA__GetDisabledMaps ( struct FGFxMapSelectionData MapItem );
	bool __GFxData_MapSelection_TA__GetDisabledMaps1 ( struct FGFxMapSelectionData MapItem );
	void SetSelected ( int Row, unsigned long bSelected );
	void SetDisabledMaps ( TArray< struct FName >* MapNames );
	TArray< struct FName > GetDisabledMaps ( TArray< struct FGFxMapSelectionData >* FilterLocal_A94613AD4385E6A04B7572BA1A6C25BA, TArray< struct FName >* MapLocal_139646944D2EB107C4C79C8A392146D7 );
	void HandleMapListChanged ( class UGFxData_Map_TA* GFxMaps, TArray< struct FGFxMapSelectionData >* MapLocal_6F28C1D34E0F53D67944EE9A86738BAE );
	void eventOnShellSet ( );
	void EventSelectionChange ( class UGFxData_MapSelection_TA* GFxMapSelection, struct FName MapName, unsigned long bSelected );
	void EventMapListChange ( class UGFxData_MapSelection_TA* GFxMapSelection );
};

UClass* UGFxData_MapSelection_TA::pClassPointer = NULL;

// Class TAGame.GFxData_MatchAdmin_TA
// 0x0008 (0x005C - 0x0054)
class UGFxData_MatchAdmin_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bMatchAdmin : 1;                                  		// 0x0054 (0x0004) [0x0000000040002000] [0x00000001] ( CPF_Transient | CPF_EditInlineNotify )
	class APRI_TA*                                     PlayerPRI;                                        		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89273 ];

		return pClassPointer;
	};

	void SetPaused ( unsigned long bNewPause );
	void SetScoreAndTime ( int NewScoreTeam0, int NewScoreTeam1, int SecondsRemaining, unsigned long bOverTime, unsigned long bRestartRound );
	void HandleMatchAdmin ( class APRI_TA* PRI );
	void HandlePRIReceived ( class APlayerController_X* PC_X );
	class APlayerController_TA* GetPlayerController ( );
	void eventOnRemoved ( );
	void OnShellSet ( );
};

UClass* UGFxData_MatchAdmin_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Mutators_TA
// 0x004C (0x00A0 - 0x0054)
class UGFxData_Mutators_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       SelectedMapName;                                  		// 0x0054 (0x0008) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	int                                                SelectedGameMode;                                 		// 0x005C (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	int                                                SelectedBotDifficulty;                            		// 0x0060 (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	TArray< struct FGameModeData >                     GameModes;                                        		// 0x0064 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FCustomGameSetting >                CustomGameSettings;                               		// 0x0070 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                PresetCategoryIndex;                              		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< struct FModeMapPair >                      ModeMaps;                                         		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      SettingsType;                                     		// 0x008C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UProfile_TA*                                 Profile;                                          		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGameMode_TA*                                GameModeObj;                                      		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGameTags_TA*                                GameTags;                                         		// 0x0098 (0x0004) [0x0000000000000000]              
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89294 ];

		return pClassPointer;
	};

	void SetCustomGameSetting ( int MutatorCategoryIndex, int MutatorSettingIndex );
	bool ResetInvalidSettings ( int MutatorCategoryIndex );
	bool IsValidSetting ( int MutatorCategoryIndex, int MutatorSettingIndex, unsigned long bCoerceMap );
	struct FString GetCustomGameSettingDescription ( int MutatorCategoryIndex, int MutatorSettingIndex );
	void ForceClearAllTags ( );
	void SetSelectedBotDifficulty ( int BotDifficulty );
	struct FString GetGameTagValueFromIndex ( struct FString GameTagCategory, int Index );
	int GetGameTagIndex ( struct FString GameTagCategory, struct FString Value );
	void SetSelectedGameMode ( int GameMode );
	void SetSelectedMapName ( struct FName MapName );
	void InitMutatorCustomGameSettings ( );
	void InitCustomGameSettings ( );
	void RefreshCustomGameSettings ( int MutatorCategoryIndex, int MutatorSettingIndex );
	void OnUpdatedSettings ( );
	void PopulateGameModes ( );
	void HandleTrialStatusChanged ( class UOnlineGameTrial_X* InTrial );
	void SetCustomMatchSettings ( struct FCustomMatchSettings* InSettings );
	struct FCustomMatchSettings GetCustomMatchSettings ( );
	void SetGameTag ( struct FString Key, struct FString Value );
	struct FString GetGameTag ( struct FString Key );
	void InitMutators ( unsigned char InSettingsType );
	void eventOnShellSet ( );
	class UOnlineGame_TA* GetOnlineGame ( );
};

UClass* UGFxData_Mutators_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PartyInvite_TA
// 0x0010 (0x0064 - 0x0054)
class UGFxData_PartyInvite_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FInvite >                           Invites;                                          		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UParties_X*                                  Party;                                            		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89425 ];

		return pClassPointer;
	};

	void EnsurePersonaExists ( struct FString PlayerName, struct FUniqueNetId* PlayerID );
	void HandlePlayerInvitePending ( struct FUniqueLobbyId InLobby, struct FUniqueNetId InFromUser, struct FString InFromName );
	void OnInvited ( );
	void RemoveAllInvites ( );
	void SetUserInvitedResponse ( int InviteIndex, unsigned long bAccepted );
	void InviteToParty ( struct FUniqueNetId PlayerID );
	void ShowInviteUI ( );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_PartyInvite_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PlayerBanners_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_PlayerBanners_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FGFxPlayerBannerRef >               Banners;                                          		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89470 ];

		return pClassPointer;
	};

	int GetPlayerBanner ( struct FUniqueNetId PlayerID );
	void DestroyPlayerBanner ( );
	int CreatePlayerBanner ( struct FGFxPlayerBannerRef* StructInitializer_2D390B76437C9C96E3EC8992450B36EF );
};

UClass* UGFxData_PlayerBanners_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PlayerTitles_TA
// 0x0014 (0x0068 - 0x0054)
class UGFxData_PlayerTitles_TA : public UGFxDataSingleton_X
{
public:
	int                                                SelectedTitle;                                    		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	TArray< struct FPlayerTitleData >                  PlayerTitles;                                     		// 0x0058 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UProfile_TA*                                 Profile;                                          		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89493 ];

		return pClassPointer;
	};

	void SetPlayerTitle ( struct FName Title );
	void UpdateSelectedTitle ( struct FName Title );
	void UpdateTitles ( class UOnlineGamePlayerTitles_X* OnlineTitles );
	void HandleProfileSet ( class ULocalPlayer_TA* P );
	void eventOnShellSet ( );
};

UClass* UGFxData_PlayerTitles_TA::pClassPointer = NULL;

// Class TAGame.GFxData_PremiumGarage_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_PremiumGarage_TA : public UGFxDataSingleton_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89513 ];

		return pClassPointer;
	};

	class UProfile_TA* GetProfile ( );
};

UClass* UGFxData_PremiumGarage_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductFilter_TA
// 0x0178 (0x01CC - 0x0054)
class UGFxData_ProductFilter_TA : public UGFxDataSingleton_X
{
public:
	TArray< class UClass* >                            UIAttributes;                                     		// 0x0054 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Label;                                            		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FFilterProductSlot >                Slots;                                            		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FFilterProductQuality >             Qualities;                                        		// 0x0078 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FFilterProductAttribute >           Attributes;                                       		// 0x0084 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FFilterProductSeries >              SeriesIDs;                                        		// 0x0090 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< unsigned char >                            FilterStack;                                      		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FProductFilter                              Filters[ 0x2 ];                                   		// 0x00A8 (0x0120) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89517 ];

		return pClassPointer;
	};

	void PopFilterType ( unsigned char Type );
	void PushFilterType ( unsigned char Type );
	void UpdateFromType ( unsigned char Type );
	void ApplyKeyTradeRestrictionOption ( unsigned char Type, struct FProductFilter* OutFilter );
	void ApplyContainerNotificationOption ( struct FProductFilter* OutFilter );
	void SetSeriesIDSelected ( int Row, unsigned long bSelected, unsigned char FilterType );
	void SetAttributeSelected ( int Row, unsigned long bSelected, unsigned char FilterType );
	void SetQualitySelected ( int Row, unsigned long bSelected, unsigned char FilterType );
	void SetSlotSelected ( int Row, unsigned long bSelected, unsigned char FilterType );
	void SetLabel ( struct FString NewLabel, unsigned char FilterType );
	void FilterProducts ( unsigned char FilterType );
	void UpdateProductSeriesIDs ( struct FProductFilter* InFilter );
	void UpdateProductAttributes ( struct FProductFilter* InFilter );
	void UpdateProductQualities ( struct FProductFilter* InFilter );
	void UpdateProductSlots ( struct FProductFilter* InFilter );
	int GetFilterQuantity ( struct FProductFilter* InFilter );
	void InitProductSeriesIDs ( );
	void InitProductAttributes ( );
	void InitProductQualities ( );
	void InitProductSlots ( );
	void eventOnShellSet ( );
	class UProfile_TA* GetProfile ( );
};

UClass* UGFxData_ProductFilter_TA::pClassPointer = NULL;

// Class TAGame.GFxData_ProductLevelUpgrade_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_ProductLevelUpgrade_TA : public UGFxDataSingleton_X
{
public:
	int                                                ProductLevel;                                     		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0058 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductLevelUpgrade_TA.ProductInstanceID
	TArray< struct FProductLevelData >                 Levels;                                           		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89633 ];

		return pClassPointer;
	};

	class UProfile_TA* GetProfile ( );
	void OnProductUpgradeFailed ( );
	void OnProductUpgradeComplete ( );
	void HandleLevelUpgradeComplete ( class URPC_ProductUpgradeLevel_TA* RPC );
	void UpgradeToLevel ( int DesiredLevel );
	void InitProductData ( );
};

UClass* UGFxData_ProductLevelUpgrade_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductUpgradeLevel_TA
// 0x006C (0x0108 - 0x009C)
class URPC_ProductUpgradeLevel_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00E4 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductUpgradeLevel_TA.InstanceID
	int                                                DesiredLevel;                                     		// 0x00EC (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                ReceivedProducts;                                 		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89654 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	class URPC_ProductUpgradeLevel_TA* SetDesiredLevel ( int Level );
	class URPC_ProductUpgradeLevel_TA* SetInstanceID ( );
	class URPC_ProductUpgradeLevel_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductUpgradeLevel_TA::pClassPointer = NULL;

// Class TAGame.GFxData_QuickChatBindings_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_QuickChatBindings_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FLocalizedQuickChat >               AllQuickChats;                                    		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FLocalizedQuickChatBinding >        Bindings;                                         		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FName >                             QuickChats;                                       		// 0x006C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             PostGameQuickChats;                               		// 0x0078 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89664 ];

		return pClassPointer;
	};

	int SortQuickChat ( struct FName Value1, struct FName Value2 );
	void GenerateBindings ( );
	void OnBindingsReset ( );
	void ResetBindings ( );
	void ChangeBinding ( int Index, struct FName Message );
	void OnShellSet ( );
};

UClass* UGFxData_QuickChatBindings_TA::pClassPointer = NULL;

// Class TAGame.GFxData_RedeemCodes_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_RedeemCodes_TA : public UGFxDataSingleton_X
{
public:
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     RedeemingTitleString;                             		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RedeemingBodyString;                              		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89703 ];

		return pClassPointer;
	};

	void HandleRedeemCode ( class URPC_RedeemCode_TA* RPC );
	void Redeem ( struct FString InCode );
};

UClass* UGFxData_RedeemCodes_TA::pClassPointer = NULL;

// Class TAGame.RPC_RedeemCode_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_RedeemCode_TA : public URPC_X
{
public:
	struct FString                                     Code;                                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A8 (0x0048) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89715 ];

		return pClassPointer;
	};

	class URPC_RedeemCode_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_RedeemCode_TA* SetCode ( struct FString InCode );
};

UClass* URPC_RedeemCode_TA::pClassPointer = NULL;

// Class TAGame.GFxData_SchematicTradeIn_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_SchematicTradeIn_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FSchematicResourceData >            Schematics;                                       		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     InvalidProductString;                             		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                MinResources;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MaxResources;                                     		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89723 ];

		return pClassPointer;
	};

	class UProfile_TA* GetProfile ( );
	int GetRemainingResources ( );
	bool IsProcessingTrade ( );
	void OnSchematicTradeInFailed ( );
	void OnSchematicTradeInComplete ( );
	void HandleTradeInComplete ( class URPC_SchematicsTradeIn_TA* RPC );
	void SetSchematicResource ( int Amount );
	void IncrementSchematicResource ( int Amount );
	void RemoveSchematic ( );
	bool AddSchematic ( );
	void TradeIn ( );
};

UClass* UGFxData_SchematicTradeIn_TA::pClassPointer = NULL;

// Class TAGame.RPC_SchematicsTradeIn_TA
// 0x008C (0x0128 - 0x009C)
class URPC_SchematicsTradeIn_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00E4 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_SchematicsTradeIn_TA.CrateID
	TArray< struct FSchematicResourceData >            Schematics;                                       		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOnlineProductData >                CrateDrops;                                       		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0xC ];                             		// 0x0110 (0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_SchematicsTradeIn_TA.ConsumedInstanceIDs
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89764 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	class URPC_SchematicsTradeIn_TA* SetSchematics ( TArray< struct FSchematicResourceData >* InSchematics );
	class URPC_SchematicsTradeIn_TA* SetCrateID ( );
	class URPC_SchematicsTradeIn_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_SchematicsTradeIn_TA::pClassPointer = NULL;

// Class TAGame.GFxData_SeasonReward_TA
// 0x0018 (0x006C - 0x0054)
class UGFxData_SeasonReward_TA : public UGFxDataSingleton_X
{
public:
	int                                                Level;                                            		// 0x0054 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                Wins;                                             		// 0x0058 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                WinsRequired;                                     		// 0x005C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bCanProgress : 1;                                 		// 0x0060 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	class URankedConfig_X*                             RankedConfig;                                     		// 0x0064 (0x0004) [0x0000000000000000]              
	class UOnlineGameSkill_X*                          Skill;                                            		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89776 ];

		return pClassPointer;
	};

	void UpdateData ( );
};

UClass* UGFxData_SeasonReward_TA::pClassPointer = NULL;

// Class TAGame.SpecialEventConfig_TA
// 0x00C4 (0x0110 - 0x004C)
class USpecialEventConfig_TA : public UOnlineConfig_X
{
public:
	int                                                EventID;                                          		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrencyID;                                       		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Title;                                            		// 0x0054 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Subtitle;                                         		// 0x0060 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     RedemptionTitle;                                  		// 0x006C (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Description;                                      		// 0x0078 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     RedemptionDescription;                            		// 0x0084 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     CurrencyName;                                     		// 0x0090 (0x000C) [0x0000000040400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     CurrencyImageURL;                                 		// 0x009C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     CurrencyImageLargeURL;                            		// 0x00A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     BackgroundImageURL;                               		// 0x00B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TitleColor;                                       		// 0x00C0 (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	int                                                BackgroundColor;                                  		// 0x00C4 (0x0004) [0x0000000040000001]              ( CPF_Edit | CPF_EditInlineNotify )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00C8 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SpecialEventConfig_TA.StartTime
	struct FString                                     StartTimeString;                                  		// 0x00D0 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x00DC (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SpecialEventConfig_TA.EndTime
	struct FString                                     EndTimeString;                                    		// 0x00E4 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      UnknownData02[ 0x8 ];                             		// 0x00F0 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SpecialEventConfig_TA.RedemptionEndTime
	struct FString                                     RedemptionEndTimeString;                          		// 0x00F8 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    BackgroundImage;                                  		// 0x0104 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	class UTexture*                                    CurrencyImage;                                    		// 0x0108 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	class UTexture*                                    CurrencyImageLarge;                               		// 0x010C (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89787 ];

		return pClassPointer;
	};

	void __SpecialEventConfig_TA__Apply ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	void __SpecialEventConfig_TA__Apply1 ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	void __SpecialEventConfig_TA__Apply2 ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	int GetSecondsRemaining ( );
	unsigned char GetState ( );
	void Apply ( );
};

UClass* USpecialEventConfig_TA::pClassPointer = NULL;

// Class TAGame.GFxData_SpecialEvents_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_SpecialEvents_TA : public UGFxDataSingleton_X
{
public:
	class USpecialEventConfig_TA*                      EventData;                                        		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      EventState;                                       		// 0x0058 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned long                                      bReady : 1;                                       		// 0x005C (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bRequestedCurrency : 1;                           		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bReceivedCurrency : 1;                            		// 0x005C (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FGFxSpecialEventReward >            Rewards;                                          		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                Currency;                                         		// 0x006C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                SecondsRemaining;                                 		// 0x0070 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89828 ];

		return pClassPointer;
	};

	void __GFxData_SpecialEvents_TA__GetRewards ( class URPC_GetSpecialEventCurrencyRewards_TA* RPC );
	void UpdateTimeRemaining ( );
	void OnPurchaseSuccess ( );
	void HandlePurchaseSuccess ( class URPC_PurchaseSpecialEventReward_TA* RPC );
	void OnPurchaseFail ( );
	void HandlePurchaseFail ( class URPC_X* RPC );
	void PurchaseReward ( int StoreProductID );
	struct FGFxSpecialEventReward CreateEventReward ( struct FSpecialEventReward InReward );
	void SetRewards ( TArray< struct FSpecialEventReward > InRewards, TArray< struct FGFxSpecialEventReward >* MapLocal_C83868984B347A24CCF5949E1296D4EB );
	void GetRewards ( );
	void SetCurrency ( struct FEventCurrencyData InCurrency );
	void OnReceivedCurrency ( class URPC_GetSpecialEventCurrency_TA* RPC );
	void GetCurrency ( );
	void UpdateEventStatus ( );
	void HandleEventConfigChanged ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_SpecialEvents_TA::pClassPointer = NULL;

// Class TAGame.RPC_SpecialEventBase_TA
// 0x0000 (0x009C - 0x009C)
class URPC_SpecialEventBase_TA : public URPC_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89850 ];

		return pClassPointer;
	};

};

UClass* URPC_SpecialEventBase_TA::pClassPointer = NULL;

// Class TAGame.RPC_GetSpecialEventCurrency_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_GetSpecialEventCurrency_TA : public URPC_SpecialEventBase_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                EventID;                                          		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FEventCurrencyData                          EventCurrency;                                    		// 0x00E8 (0x0014) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89849 ];

		return pClassPointer;
	};

	class URPC_GetSpecialEventCurrency_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_GetSpecialEventCurrency_TA* SetEventID ( int InEventID );
};

UClass* URPC_GetSpecialEventCurrency_TA::pClassPointer = NULL;

// Class TAGame.RPC_GetSpecialEventCurrencyRewards_TA
// 0x0058 (0x00F4 - 0x009C)
class URPC_GetSpecialEventCurrencyRewards_TA : public URPC_SpecialEventBase_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                EventID;                                          		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FSpecialEventReward >               EventStore;                                       		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89867 ];

		return pClassPointer;
	};

	class URPC_GetSpecialEventCurrencyRewards_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	class URPC_GetSpecialEventCurrencyRewards_TA* SetEventID ( int InEventID );
};

UClass* URPC_GetSpecialEventCurrencyRewards_TA::pClassPointer = NULL;

// Class TAGame.RPC_PurchaseSpecialEventReward_TA
// 0x0058 (0x00F4 - 0x009C)
class URPC_PurchaseSpecialEventReward_TA : public URPC_SpecialEventBase_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                StoreProductID;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89897 ];

		return pClassPointer;
	};

	class URPC_PurchaseSpecialEventReward_TA* SetStoreProductID ( int InProductID );
	class URPC_PurchaseSpecialEventReward_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_PurchaseSpecialEventReward_TA::pClassPointer = NULL;

// Class TAGame.GFxData_TrainingMode_TA
// 0x00F4 (0x0148 - 0x0054)
class UGFxData_TrainingMode_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      Status;                                           		// 0x0054 (0x0001) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	struct FString                                     SanitizedTrainingModeName;                        		// 0x0058 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     SanitizedCreatorName;                             		// 0x0064 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     Tags;                                             		// 0x0070 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned long                                      bOwned : 1;                                       		// 0x007C (0x0004) [0x0000000040002000] [0x00000001] ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bFavorited : 1;                                   		// 0x007C (0x0004) [0x0000000040002000] [0x00000002] ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bOutOfDate : 1;                                   		// 0x007C (0x0004) [0x0000000040002000] [0x00000004] ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bWordFilterError : 1;                             		// 0x007C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FString                                     PublishedTime;                                    		// 0x0080 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     UpdatedAtTime;                                    		// 0x008C (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                ShotsCompleted;                                   		// 0x0098 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	struct FString                                     CreatorPlatform;                                  		// 0x009C (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	class UTexture*                                    CreatorAvatar;                                    		// 0x00A8 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	struct FString                                     SaveDataFilename;                                 		// 0x00AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     SavingFilename;                                   		// 0x00B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     AutoplayName;                                     		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USaveData_GameEditor_Training_TA*            SaveData;                                         		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     OpenTrainingMapBaseCmd;                           		// 0x00D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     OutOfDateMessage;                                 		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DownloadingTrainingModeTitleMessage;              		// 0x00EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DownloadingTrainingModeBodyMessage;               		// 0x00F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventTrainingModeDownloadPlay__Delegate;        		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x010C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeFavorited__Delegate;           		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x011C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeLoaded__Delegate;              		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x012C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeSaved__Delegate;               		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x013C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 89912 ];

		return pClassPointer;
	};

	void __GFxData_TrainingMode_TA__HandleSaveError ( class UGFxModal_X* _ );
	void UpdateOutOfDate ( );
	void HandleUnpublish ( class URPC_TrainingEditor_DeleteTrainingData_TA* RPC );
	void OnDelete ( unsigned char CurrentTab );
	void ForceDelete ( struct FString FilePath );
	void AddToFavorites ( );
	void LoadFile ( struct FString Filename, struct FName inMapName, unsigned long bInPlaytest );
	void Play ( struct FName inMapName, unsigned long bInPlaytest );
	void HandleDownloadAndPlayResults ( class URPC_TrainingEditor_GetTrainingData_TA* RPC );
	void HandleDownload ( class URPC_TrainingEditor_GetTrainingData_TA* RPC );
	void HandleUpdateTrainingData ( class URPC_TrainingEditor_UpdateTrainingData_TA* RPC );
	void HandleAddTrainingData ( class URPC_TrainingEditor_AddTrainingData_TA* RPC );
	void HandleSubmit ( class UPrivilegeCheck_X* PrivilegeCheck );
	void Submit ( );
	void HandleCreatorNameSanitized ( struct FString DesiredName, struct FString SanitizedName );
	void HandleTrainingModeNameSanitized ( struct FString DesiredName, struct FString SanitizedName );
	void OnDataLoaded ( struct FLoadObjectResult Result );
	void HandleSanitizeError ( struct FString OriginalPhrase, class UError* Error );
	void SetTrainingModeFromSave ( struct FString Filename );
	void HandleGetAvatar ( struct FUniqueNetId InPlayerId, class UTexture* InAvatar, struct FString OnlinePlayerName );
	void SetTrainingMode ( class UTrainingEditorData_TA* InTrainingData );
	void UpdateUITimes ( );
	void SetTrainingModeFromRPC ( class UTrainingEditorData_TA* ResultData );
	void HandleAutoplay ( struct FSaveObjectResult Result );
	void HandleSaveResult ( struct FSaveObjectResult Result );
	void OnRetrySaveSaveData ( class UGFxModal_X* Modal );
	void HandleSaveError ( struct FSaveObjectResult Result );
	void SaveTrainingMode ( struct FString Filename, class UTrainingEditorData_TA* NewTrainingData, unsigned long bInOwned, unsigned long bAutoPlay );
	void DisplayError ( class UError* Error );
	class UTrainingEditorMetrics_TA* GetTrainingMetrics ( );
	void eventOnShellSet ( );
	void EventTrainingModeSaved ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bSuccess );
	void EventTrainingModeLoaded ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bSuccess );
	void EventTrainingModeFavorited ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bAdded );
	void EventTrainingModeDownloadPlay ( class UGFxData_TrainingMode_TA* OutTrainingMode, struct FString Code, struct FString Filename );
};

UClass* UGFxData_TrainingMode_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_DeleteTrainingData_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_TrainingEditor_DeleteTrainingData_TA : public URPC_X
{
public:
	struct FString                                     Code;                                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90030 ];

		return pClassPointer;
	};

	class URPC_TrainingEditor_DeleteTrainingData_TA* SetTrainingModeCode ( struct FString InCode );
};

UClass* URPC_TrainingEditor_DeleteTrainingData_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_GetTrainingData_TA
// 0x0010 (0x00AC - 0x009C)
class URPC_TrainingEditor_GetTrainingData_TA : public URPC_X
{
public:
	struct FString                                     Code;                                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90031 ];

		return pClassPointer;
	};

	class URPC_TrainingEditor_GetTrainingData_TA* SetTrainingModeID ( struct FString InTrainingModeCode );
};

UClass* URPC_TrainingEditor_GetTrainingData_TA::pClassPointer = NULL;

// Class TAGame.GFxData_TrainingModeConstants_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_TrainingModeConstants_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FTrainingModeDifficulty >           Difficulties;                                     		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FTrainingModeType >                 Types;                                            		// 0x0060 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FTrainingModeTag >                  Tags;                                             		// 0x006C (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FName                                       DefaultMap;                                       		// 0x0078 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90034 ];

		return pClassPointer;
	};

	struct FName GetValidatedMap ( struct FName MapName );
	void InitTags ( );
	void OnShellSet ( );
};

UClass* UGFxData_TrainingModeConstants_TA::pClassPointer = NULL;

// Class TAGame.GFxData_TrainingModeBrowser_TA
// 0x008C (0x00E0 - 0x0054)
class UGFxData_TrainingModeBrowser_TA : public UGFxDataSingleton_X
{
public:
	struct FSearchCacheData                            CachedOnlineSearchResults[ 0x2 ];                 		// 0x0054 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class URPC_X*                                      PendingRPC;                                       		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CachedSearchDuration;                             		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CachedFavoriteTimeoutTime;                        		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFavoritedFileMetaData >            FavoritedFilesMetaData;                           		// 0x0080 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bFavoritesLoaded : 1;                             		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              CachedFavoriteDuration;                           		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FCachedDownloadedFile >             CachedDownloadedFiles;                            		// 0x0094 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingFiles;                                     		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DownloadedFilename;                               		// 0x00AC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                MaxCachedDownloadedFiles;                         		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USaveData_GameEditor_Training_TA*            TrainingSaveData;                                 		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventFavoritesLoaded__Delegate;                 		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAllTrainingFilesLoaded__Delegate;          		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90037 ];

		return pClassPointer;
	};

	class UGFxData_TrainingMode_TA* DebugGetTrainingModeByIdx ( int Index );
	class UGFxData_TrainingMode_TA* DebugGetTrainingModeByName ( struct FString TM_Name );
	struct FString GetDownloadedFilename ( );
	void DeleteTrainingMode ( int RowIndex, unsigned char CurrentTab );
	void DeleteTrainingModeData ( class UGFxData_TrainingMode_TA* TrainingMode, unsigned char CurrentTab );
	void OnTrainingModesReady ( );
	void SetTrainingFiles ( TArray< struct FString > Files, unsigned long bLoadingFavorites );
	void HandleHeaders ( TArray< struct FString > Files, unsigned char Result );
	void HandleFavoritesLoaded ( class UGFxData_TrainingModeBrowser_TA* B );
	void GetLocalTrainingFiles ( unsigned long bLoadingFavorites );
	void HandleTrainingModeDownloadPlay ( class UGFxData_TrainingMode_TA* OutTrainingMode, struct FString InCode, struct FString Filename );
	void HandleTrainingModeFavorited ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bAdded, struct FFavoritedFileMetaData* StructInitializer_28631AB04EFF5E19FDD87391DD31B20B );
	bool IsFavorited ( struct FString InGuid );
	void HandleBrowseResults ( class URPC_TrainingEditor_BrowseTrainingData_TA* RPC );
	void HandleSearchByCode ( class URPC_TrainingEditor_GetTrainingData_TA* RPC );
	void OnSearchCodeResults ( unsigned long bSuccess );
	void HandleOnlineHeaders ( TArray< struct FString > LocalFiles, unsigned char Result, unsigned long bFeaturedOnly );
	void HandleLoadFeaturedHeaders ( TArray< struct FString > LocalFiles, unsigned char Result );
	void HandleLoadAllPublicHeaders ( TArray< struct FString > LocalFiles, unsigned char Result );
	bool LoadIfFavorited ( class UGFxData_TrainingMode_TA* GFxTrainingData, struct FGuid InGuid );
	void RepopulateFromCache ( unsigned long bFeaturedOnly );
	void GetSearchResults ( struct FString Code, unsigned long bForceRefresh, unsigned long bFeaturedOnly );
	class APlayerControllerBase_TA* GetPlayerController ( );
	void HandleAllFavoritesLoaded ( class UGFxData_TrainingModeBrowser_TA* TrainingModeBrowser );
	void ResetTrainingList ( );
	void HandleDownloadResults ( class URPC_TrainingEditor_GetTrainingData_TA* RPC );
	void HandleListPlayerTrainingData ( class URPC_TrainingEditor_ListPlayerTrainingData_TA* RPC );
	void SyncTrainingModes ( );
	void HandleListPlayerTrainingDataTimestamp ( class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA* RPC );
	void EvaluateUpdateAtTimes ( );
	void SetFavoriteUpdatedAtTime ( struct FString InCode );
	void SyncFavoritedModes ( struct FFavoritedFileMetaData* StructInitializer_F987212E487EC85D02835EBC8719D432 );
	void HandleLocalTrainingModeLoaded ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bSuccess );
	void HandleTrainingModeLoaded ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bSuccess );
	void HandleDownloadedTrainingModeSaved ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bSuccess );
	void HandleLocalTrainingModeSaved ( class UGFxData_TrainingMode_TA* OutTrainingMode, unsigned long bSuccess );
	void CreateNew ( struct FString NewName, unsigned char NewType, unsigned char NewDifficulty, struct FName MapName, TArray< int > Tags );
	void DisplayError ( class UError* Error );
	class UTrainingEditorMetrics_TA* GetTrainingMetrics ( );
	void NotifyWhenFavoritesLoaded ( struct FScriptDelegate Callback );
	void HandleFavorites ( TArray< struct FString > Files, unsigned char Result, struct FFavoritedFileMetaData* StructInitializer_29340AE14DB6F9DFB15DFE9AECA01736 );
	void HandlePsyNetLogin ( class UOnlinePlayer_X* OnlinePlayer );
	void OnShellSet ( );
	void EventAllTrainingFilesLoaded ( class UGFxData_TrainingModeBrowser_TA* Browser );
	void EventFavoritesLoaded ( class UGFxData_TrainingModeBrowser_TA* Browser );
};

UClass* UGFxData_TrainingModeBrowser_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_UpdateTrainingData_TA
// 0x0004 (0x00A0 - 0x009C)
class URPC_TrainingEditor_UpdateTrainingData_TA : public URPC_X
{
public:
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90042 ];

		return pClassPointer;
	};

	class URPC_TrainingEditor_UpdateTrainingData_TA* SetTrainingData ( class UTrainingEditorData_TA** InTrainingData );
};

UClass* URPC_TrainingEditor_UpdateTrainingData_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_AddTrainingData_TA
// 0x0010 (0x00AC - 0x009C)
class URPC_TrainingEditor_AddTrainingData_TA : public URPC_X
{
public:
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x009C (0x0004) [0x0000000000000000]              
	struct FString                                     Code;                                             		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90043 ];

		return pClassPointer;
	};

	class URPC_TrainingEditor_AddTrainingData_TA* SetTrainingData ( class UTrainingEditorData_TA** InTrainingData );
};

UClass* URPC_TrainingEditor_AddTrainingData_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA
// 0x0018 (0x00B4 - 0x009C)
class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA : public URPC_X
{
public:
	TArray< struct FString >                           Codes;                                            		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCodeTimePair >                     TrainingData;                                     		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90136 ];

		return pClassPointer;
	};

	class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA* SetCodes ( TArray< struct FString >* InCodes );
};

UClass* URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_BrowseTrainingData_TA
// 0x0010 (0x00AC - 0x009C)
class URPC_TrainingEditor_BrowseTrainingData_TA : public URPC_X
{
public:
	unsigned long                                      bFeaturedOnly : 1;                                		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UTrainingEditorData_TA* >            TrainingData;                                     		// 0x00A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90252 ];

		return pClassPointer;
	};

	class URPC_TrainingEditor_BrowseTrainingData_TA* SetFeaturedOnly ( unsigned long bInFeaturedOnly );
};

UClass* URPC_TrainingEditor_BrowseTrainingData_TA::pClassPointer = NULL;

// Class TAGame.RPC_TrainingEditor_ListPlayerTrainingData_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_TrainingEditor_ListPlayerTrainingData_TA : public URPC_X
{
public:
	TArray< struct FString >                           Codes;                                            		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90257 ];

		return pClassPointer;
	};

};

UClass* URPC_TrainingEditor_ListPlayerTrainingData_TA::pClassPointer = NULL;

// Class TAGame.GFxData_TrainingModeEditor_TA
// 0x0044 (0x0098 - 0x0054)
class UGFxData_TrainingModeEditor_TA : public UGFxDataSingleton_X
{
public:
	class AGameEvent_TrainingEditor_TA*                MyGameEvent;                                      		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SanitizedTrainingModeName;                        		// 0x0058 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FEditorRoundData >                  RoundData;                                        		// 0x0064 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                CurrentRound;                                     		// 0x0070 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	TArray< struct FTrainingModeTag >                  Tags;                                             		// 0x0074 (0x000C) [0x0000000040402000]              ( CPF_Transient | CPF_NeedCtorLink | CPF_EditInlineNotify )
	unsigned char                                      Editing;                                          		// 0x0080 (0x0001) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	float                                              BallStartSpeed;                                   		// 0x0084 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	float                                              BallScreenPosX;                                   		// 0x0088 (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	float                                              BallScreenPosY;                                   		// 0x008C (0x0004) [0x0000000040002000]              ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bOwned : 1;                                       		// 0x0090 (0x0004) [0x0000000040002000] [0x00000001] ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bNoEditor : 1;                                    		// 0x0090 (0x0004) [0x0000000040002000] [0x00000002] ( CPF_Transient | CPF_EditInlineNotify )
	unsigned long                                      bUnsavedChanges : 1;                              		// 0x0090 (0x0004) [0x0000000040002000] [0x00000004] ( CPF_Transient | CPF_EditInlineNotify )
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90283 ];

		return pClassPointer;
	};

	void OnToggleControls ( );
	void Save ( );
	void HandleSaveResult ( unsigned long bSuccess );
	void HandleUnsavedChanges ( unsigned long bInUnsavedChanges );
	void DuplicateRound ( int Index );
	void ReorderRound ( int FromIndex, int ToIndex );
	void StopEditingRound ( );
	void EditCurrentRound ( );
	void RestartSequence ( );
	void TestSequence ( );
	void TestCurrentRound ( );
	void CreateRound ( );
	void HandleRoundTimeChanged ( class AGameEvent_TrainingEditor_TA* InGameEvent );
	void HandleRoundChanged ( class AGameEvent_TrainingEditor_TA* InGameEvent );
	void SetGameEvent ( class AGameEvent_TrainingEditor_TA* InGameEvent );
	void HandleNameSanitized ( struct FString DesiredName, struct FString SanitizedName );
	void UpdateTrainingData ( );
	void SetRoundTimeLimit ( int Time );
	void DeleteRound ( int RoundToDelete );
	void SetActiveRound ( int NewRound );
	void SetMetaData ( struct FString NewName, unsigned char NewType, unsigned char NewDifficulty, TArray< int > NewTags );
	void HandlePRIReceived ( class APlayerController_X* PC_X );
	class APlayerController_TA* GetPlayerController ( );
	void OnShellSet ( );
};

UClass* UGFxData_TrainingModeEditor_TA::pClassPointer = NULL;

// Class TAGame.GFxData_UnlockNotification_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_UnlockNotification_TA : public UGFxDataSingleton_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90348 ];

		return pClassPointer;
	};

	struct FString GetUnlockTypeString ( unsigned char UnlockType );
	void NotifyUnlock ( struct FString UnlockType, int Id, int Points, struct FString DisplayName, struct FString Description, class UTexture* Icon );
	void HandleAchievementUnlocked ( class UAchievementManager_TA* Manager, int AchievementId, unsigned char AchievementType );
	void eventOnRemoved ( );
	void eventOnShellSet ( );
};

UClass* UGFxData_UnlockNotification_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Upsell_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_Upsell_TA : public UGFxDataSingleton_X
{
public:
	class UUpsell_TA*                                  Upsell;                                           		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90370 ];

		return pClassPointer;
	};

	void eventOnShellSet ( );
};

UClass* UGFxData_Upsell_TA::pClassPointer = NULL;

// Class TAGame.GFxData_Workshop_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_Workshop_TA : public UGFxDataSingleton_X
{
public:
	TArray< struct FDownloadedWorkshopData >           Items;                                            		// 0x0054 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	TArray< struct FUniqueNetId >                      RetrievedNetIds;                                  		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ItemRemoved;                                      		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90374 ];

		return pClassPointer;
	};

	void OnAvatarPersonaHandler ( struct FUniqueNetId PlayerNetId, class UTexture* Avatar, struct FString OnlinePlayerName );
	void OnEventImageDownloaded ( class UOnlineImageDownloaderWeb_X* Downloader, struct FDownloadedImage Image );
	void HandleWorkshopData ( unsigned long bSuccess, TArray< struct FDownloadedWorkshopData >* WorkshopItems );
	void LoadWorkshopMap ( struct FString* FullPath );
	void LoadAllWorkshopMapData ( );
};

UClass* UGFxData_Workshop_TA::pClassPointer = NULL;

// Class TAGame.GFxData_WorldSelection_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_WorldSelection_TA : public UGFxDataSingleton_X
{
public:
	class APlayerControllerBase_TA*                    Player;                                           		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90403 ];

		return pClassPointer;
	};

	void SetSelectionUpdate ( unsigned long bUpdate );
	void SetWorldSelection ( unsigned long bTurnOn );
	void eventOnShellSet ( );
};

UClass* UGFxData_WorldSelection_TA::pClassPointer = NULL;

// Class TAGame.GFxHUD_GameEditor_TA
// 0x0008 (0x05AC - 0x05A4)
class AGFxHUD_GameEditor_TA : public AGFxHUD_TA
{
public:
	class UGFxData_TrainingModeEditor_TA*              EditorData;                                       		// 0x05A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AGameEvent_TrainingEditor_TA*                TrainingGameEvent;                                		// 0x05A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90411 ];

		return pClassPointer;
	};

	void ToggleControls ( );
	void UpdateCarData ( );
	void SetGameEvent ( class AGameEvent_TA* InGameEvent );
	void InitGFx ( );
};

UClass* AGFxHUD_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.GFxModal_Warning_TA
// 0x0000 (0x0084 - 0x0084)
class UGFxModal_Warning_TA : public UGFxModal_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90423 ];

		return pClassPointer;
	};

};

UClass* UGFxModal_Warning_TA::pClassPointer = NULL;

// Class TAGame.InMapScoreboard_TA
// 0x007C (0x0278 - 0x01FC)
class AInMapScoreboard_TA : public AActor
{
public:
	class AStaticMeshActor*                            StaticMesh;                                       		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TeamIndex;                                        		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           GoalAnimation;                                    		// 0x020C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              GoDuration;                                       		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GoSwitch;                                         		// 0x0220 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GoalXPos;                                         		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CountdownSwitch;                                  		// 0x0230 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CountdownToggle;                                  		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScoreToggle;                                      		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScoreParam;                                       		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CountdownValueParam;                              		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastCountdownTime;                                		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReplayCountdownTime;                              		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasReplayCountdownTime : 1;                      		// 0x0260 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       LastState;                                        		// 0x0268 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GoalTime;                                         		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90425 ];

		return pClassPointer;
	};

	void HandleReplayGoalScored ( class AGameEvent_Soccar_TA* InEvent, unsigned char ScoredOnTeam );
	void HideGo ( );
	void ShowGo ( );
	void HideCountdown ( );
	void ShowCountdown ( );
	void HideScore ( );
	void ShowScore ( );
	void UpdateScore ( unsigned long bNoReplay );
	void DisableAllSwitches ( );
	void HandleCountDownTimeUpdated ( class AGameEvent_TA* InEvent, int Seconds );
	void HandleGameStateChanged ( class AGameEvent_TA* InEvent );
	void HandleScoreUpdated ( class ATeam_TA* Team );
	void HandleTeams ( class AGameEvent_Team_TA* G );
	void SetUpEvents ( );
	void HandleGameEvent ( class AGameEvent_TA* InGameEvent );
	void eventPostBeginPlay ( );
};

UClass* AInMapScoreboard_TA::pClassPointer = NULL;

// Class TAGame.LoadoutSave_TA
// 0x0008 (0x0044 - 0x003C)
class ULoadoutSave_TA : public UObject
{
public:
	class ULoadoutCollection_TA*                       Collection;                                       		// 0x003C (0x0004) [0x0000000000000000]              
	class ULoadoutEquipper_TA*                         Equipper;                                         		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90546 ];

		return pClassPointer;
	};

	class ULoadoutSave_TA* SetEquipper ( class ULoadoutEquipper_TA* InEquipper );
	class ULoadoutSave_TA* SetCollection ( class ULoadoutCollection_TA* InCollection );
};

UClass* ULoadoutSave_TA::pClassPointer = NULL;

// Class TAGame.LoadoutEquipper_TA
// 0x0004 (0x0040 - 0x003C)
class ULoadoutEquipper_TA : public UObject
{
public:
	class ULoadoutPair_TA*                             Equipped;                                         		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90552 ];

		return pClassPointer;
	};

	void Equip ( class ULoadoutPair_TA* Pair );
};

UClass* ULoadoutEquipper_TA::pClassPointer = NULL;

// Class TAGame.LoadoutTeam_TA
// 0x0014 (0x0050 - 0x003C)
class ULoadoutTeam_TA : public UObject
{
public:
	struct FLoadoutTeam                                Data;                                             		// 0x003C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90554 ];

		return pClassPointer;
	};

	void SetData ( struct FLoadoutTeam InData );
};

UClass* ULoadoutTeam_TA::pClassPointer = NULL;

// Class TAGame.MatchType_AdHoc_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_AdHoc_TA : public UMatchType_Private_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90609 ];

		return pClassPointer;
	};

	struct FName GetMatchTypeName ( );
};

UClass* UMatchType_AdHoc_TA::pClassPointer = NULL;

// Class TAGame.MenuSequence_PremiumGarage_TA
// 0x0008 (0x0074 - 0x006C)
class UMenuSequence_PremiumGarage_TA : public UMenuSequence_TA
{
public:
	float                                              FadeTime;                                         		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutDelay;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90613 ];

		return pClassPointer;
	};

	class UShowroomMetrics_TA* GetShowroomMetrics ( );
	void LeaveFadeOut ( );
	void HandleLeaveComplete ( );
	void EnterFadeOut ( );
	void HandleEnterComplete ( );
	void LeaveSequence ( class UMenuSequence_TA* NextSequence );
	void EnterSequence ( class UMenuSequence_TA* PrevSequence );
};

UClass* UMenuSequence_PremiumGarage_TA::pClassPointer = NULL;

// Class TAGame.MenuSequence_PremiumGarageReveal_TA
// 0x0008 (0x007C - 0x0074)
class UMenuSequence_PremiumGarageReveal_TA : public UMenuSequence_PremiumGarage_TA
{
public:
	struct FName                                       FinishCameraState;                                		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90627 ];

		return pClassPointer;
	};

	void FinishReveal ( );
	void LeaveSequence ( class UMenuSequence_TA* NextSequence );
	void EnterSequence ( class UMenuSequence_TA* PrevSequence );
};

UClass* UMenuSequence_PremiumGarageReveal_TA::pClassPointer = NULL;

// Class TAGame.MenuSequence_PremiumGarageSnap_TA
// 0x0000 (0x0074 - 0x0074)
class UMenuSequence_PremiumGarageSnap_TA : public UMenuSequence_PremiumGarage_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90635 ];

		return pClassPointer;
	};

	void LeaveSequence ( class UMenuSequence_TA* NextSequence );
	void EnterSequence ( class UMenuSequence_TA* PrevSequence );
};

UClass* UMenuSequence_PremiumGarageSnap_TA::pClassPointer = NULL;

// Class TAGame.Mutator_Bots_TA
// 0x0004 (0x0040 - 0x003C)
class UMutator_Bots_TA : public UMutator_TA
{
public:
	unsigned long                                      bRandomizedBotLoadouts : 1;                       		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90641 ];

		return pClassPointer;
	};

	void Init ( class AGameEvent_TA* GameEvent );
};

UClass* UMutator_Bots_TA::pClassPointer = NULL;

// Class TAGame.Mutator_ItemsMode_TA
// 0x0004 (0x0040 - 0x003C)
class UMutator_ItemsMode_TA : public UMutator_TA
{
public:
	class UVehiclePickup_BoostModifier_TA*             BoostModifier;                                    		// 0x003C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90646 ];

		return pClassPointer;
	};

	void MutateObject ( class UObject* O );
};

UClass* UMutator_ItemsMode_TA::pClassPointer = NULL;

// Class TAGame.PickupTimer_TA
// 0x0004 (0x0238 - 0x0234)
class APickupTimer_TA : public ACarComponent_TA
{
public:
	struct FColor                                      TextColor;                                        		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90652 ];

		return pClassPointer;
	};

};

UClass* APickupTimer_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_Edit_TA
// 0x0000 (0x0350 - 0x0350)
class UPlayerInput_Edit_TA : public UPlayerInput_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90663 ];

		return pClassPointer;
	};

	void InitFromProfile ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_Edit_TA::pClassPointer = NULL;

// Class TAGame.PlayerInput_GameEditor_TA
// 0x0000 (0x0350 - 0x0350)
class UPlayerInput_GameEditor_TA : public UPlayerInput_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90667 ];

		return pClassPointer;
	};

	void HandleActiveBindingsChanged ( class UProfile_TA* Profile );
};

UClass* UPlayerInput_GameEditor_TA::pClassPointer = NULL;

// Class TAGame.ProductAttribute_BonusCrate_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_BonusCrate_TA : public UProductAttribute_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90716 ];

		return pClassPointer;
	};

};

UClass* UProductAttribute_BonusCrate_TA::pClassPointer = NULL;

// Class TAGame.RPC_AchievementDataClear_TA
// 0x0048 (0x00E4 - 0x009C)
class URPC_AchievementDataClear_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90731 ];

		return pClassPointer;
	};

	class URPC_AchievementDataClear_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_AchievementDataClear_TA::pClassPointer = NULL;

// Class TAGame.RPC_AchievementDataGet_TA
// 0x004C (0x00E8 - 0x009C)
class URPC_AchievementDataGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	class UAchievementSave_TA*                         AchievementData;                                  		// 0x00E4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90737 ];

		return pClassPointer;
	};

	class URPC_AchievementDataGet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_AchievementDataGet_TA::pClassPointer = NULL;

// Class TAGame.RPC_AchievementDataSet_TA
// 0x004C (0x00E8 - 0x009C)
class URPC_AchievementDataSet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	class UAchievementSave_TA*                         AchievementData;                                  		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90744 ];

		return pClassPointer;
	};

	class URPC_AchievementDataSet_TA* SetAchievementData ( class UAchievementSave_TA* InAchievementData );
	class URPC_AchievementDataSet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_AchievementDataSet_TA::pClassPointer = NULL;

// Class TAGame.RPC_AchievementRewardsGet_TA
// 0x0048 (0x00E4 - 0x009C)
class URPC_AchievementRewardsGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90754 ];

		return pClassPointer;
	};

	class URPC_AchievementRewardsGet_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_AchievementRewardsGet_TA::pClassPointer = NULL;

// Class TAGame.RPC_BanSelf_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_BanSelf_TA : public URPC_X
{
public:
	int                                                DurationSeconds;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	struct FName                                       ReasonID;                                         		// 0x00A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90765 ];

		return pClassPointer;
	};

};

UClass* URPC_BanSelf_TA::pClassPointer = NULL;

// Class TAGame.RPC_Challenge_GetAll_TA
// 0x0060 (0x00FC - 0x009C)
class URPC_Challenge_GetAll_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	TArray< int >                                      UnlockedChallenges;                               		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      ActiveChallenges;                                 		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90769 ];

		return pClassPointer;
	};

	class URPC_Challenge_GetAll_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_Challenge_GetAll_TA::pClassPointer = NULL;

// Class TAGame.RPC_CheatSetTrialTime_TA
// 0x0004 (0x00A0 - 0x009C)
class URPC_CheatSetTrialTime_TA : public URPC_X
{
public:
	int                                                TrialTime;                                        		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90779 ];

		return pClassPointer;
	};

	class URPC_CheatSetTrialTime_TA* SetTrialTime ( int InTrialTime );
};

UClass* URPC_CheatSetTrialTime_TA::pClassPointer = NULL;

// Class TAGame.RPC_CheatTrialGiveExtraDay_TA
// 0x0000 (0x009C - 0x009C)
class URPC_CheatTrialGiveExtraDay_TA : public URPC_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90785 ];

		return pClassPointer;
	};

};

UClass* URPC_CheatTrialGiveExtraDay_TA::pClassPointer = NULL;

// Class TAGame.RPC_DecaySkill_TA
// 0x0000 (0x009C - 0x009C)
class URPC_DecaySkill_TA : public URPC_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90787 ];

		return pClassPointer;
	};

};

UClass* URPC_DecaySkill_TA::pClassPointer = NULL;

// Class TAGame.RPC_DeleteTrialData_TA
// 0x0000 (0x009C - 0x009C)
class URPC_DeleteTrialData_TA : public URPC_X
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90789 ];

		return pClassPointer;
	};

};

UClass* URPC_DeleteTrialData_TA::pClassPointer = NULL;

// Class TAGame.RPC_GetSpecialEvents_TA
// 0x000C (0x00A8 - 0x009C)
class URPC_GetSpecialEvents_TA : public URPC_SpecialEventBase_TA
{
public:
	TArray< struct FSpecialEventData >                 Events;                                           		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90809 ];

		return pClassPointer;
	};

};

UClass* URPC_GetSpecialEvents_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsDebugAddPainted_TA
// 0x0064 (0x0100 - 0x009C)
class URPC_ProductsDebugAddPainted_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      GameVersion;                                      		// 0x00E4 (0x0001) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90821 ];

		return pClassPointer;
	};

	void eventOnSuccess ( );
	class URPC_ProductsDebugAddPainted_TA* SetGameVersion ( unsigned char InGameVersion );
	class URPC_ProductsDebugAddPainted_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsDebugAddPainted_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsDebugAddProduct_TA
// 0x0074 (0x0110 - 0x009C)
class URPC_ProductsDebugAddProduct_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                ProductID;                                        		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                SeriesID;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FOnlineProductData                          Product;                                          		// 0x00EC (0x0020) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90836 ];

		return pClassPointer;
	};

	void eventOnSuccess ( );
	class URPC_ProductsDebugAddProduct_TA* SetSeriesID ( int InSeriesID );
	class URPC_ProductsDebugAddProduct_TA* SetProductID ( int InProductID );
	class URPC_ProductsDebugAddProduct_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsDebugAddProduct_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsDebugAddRandom_TA
// 0x006C (0x0108 - 0x009C)
class URPC_ProductsDebugAddRandom_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	int                                                Count;                                            		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                SeriesID;                                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned char                                      GameVersion;                                      		// 0x00EC (0x0001) [0x0000000000000000]              
	TArray< struct FOnlineProductData >                Drops;                                            		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UOnlineProduct_TA* >                 Products;                                         		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90853 ];

		return pClassPointer;
	};

	void eventOnSuccess ( );
	class URPC_ProductsDebugAddRandom_TA* SetGameVersion ( unsigned char InGameVersion );
	class URPC_ProductsDebugAddRandom_TA* SetSeriesID ( int InSeriesID );
	class URPC_ProductsDebugAddRandom_TA* SetCount ( int InCount );
	class URPC_ProductsDebugAddRandom_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_ProductsDebugAddRandom_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsDebugSetCertified_TA
// 0x008C (0x0128 - 0x009C)
class URPC_ProductsDebugSetCertified_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00E4 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetCertified_TA.InstanceID
	int                                                CertifiedStatID;                                  		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                CertifiedValue;                                   		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FOnlineProductData                          Product;                                          		// 0x00F4 (0x0020) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventCertifiedComplete__Delegate;               		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x011C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90876 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	class URPC_ProductsDebugSetCertified_TA* NotifyCertifiedComplete ( struct FScriptDelegate Callback );
	class URPC_ProductsDebugSetCertified_TA* SetCertifiedValue ( int InCertifiedValue );
	class URPC_ProductsDebugSetCertified_TA* SetCertifiedStatID ( int InCertifiedStatID );
	class URPC_ProductsDebugSetCertified_TA* SetInstanceID ( );
	class URPC_ProductsDebugSetCertified_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	void EventCertifiedComplete ( class UOnlineProduct_TA* NewProduct );
};

UClass* URPC_ProductsDebugSetCertified_TA::pClassPointer = NULL;

// Class TAGame.RPC_ProductsDebugSetPainted_TA
// 0x0088 (0x0124 - 0x009C)
class URPC_ProductsDebugSetPainted_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00E4 (0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetPainted_TA.InstanceID
	int                                                PaintID;                                          		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FOnlineProductData                          Product;                                          		// 0x00F0 (0x0020) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __EventPaintedComplete__Delegate;                 		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0118 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90903 ];

		return pClassPointer;
	};

	void eventOnComplete ( );
	class URPC_ProductsDebugSetPainted_TA* NotifyPaintedComplete ( struct FScriptDelegate Callback );
	class URPC_ProductsDebugSetPainted_TA* SetPaintID ( int InPaintID );
	class URPC_ProductsDebugSetPainted_TA* SetInstanceID ( );
	class URPC_ProductsDebugSetPainted_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
	void EventPaintedComplete ( class UOnlineProduct_TA* NewProduct );
};

UClass* URPC_ProductsDebugSetPainted_TA::pClassPointer = NULL;

// Class TAGame.RPC_UploadXP_TA
// 0x0050 (0x00EC - 0x009C)
class URPC_UploadXP_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x009C (0x0048) [0x0000000000000000]              
	float                                              XPTotal;                                          		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                XpLevel;                                          		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90992 ];

		return pClassPointer;
	};

	class URPC_UploadXP_TA* SetXPLevel ( int InXPLevel );
	class URPC_UploadXP_TA* SetXPTotal ( float InXPTotal );
	class URPC_UploadXP_TA* SetPlayerID ( struct FUniqueNetId InPlayerId );
};

UClass* URPC_UploadXP_TA::pClassPointer = NULL;

// Class TAGame.ScrollComponent_TA
// 0x0074 (0x00E0 - 0x006C)
class UScrollComponent_TA : public UActorComponent_X
{
public:
	unsigned long                                      bGrabbed : 1;                                     		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDeterminedSnapStopLocation : 1;                  		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              Momentum;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              MaxMomentum;                                      		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              MomentumScale;                                    		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              LastMomentum;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              MinStopMomentum;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FVector                                     ScrollDirection;                                  		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartPoint;                                       		// 0x0090 (0x000C) [0x0000000000000000]              
	float                                              TotalDistance;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              SnapDistance;                                     		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                TotalSnaps;                                       		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ActiveSnapIndex;                                  		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FVector                                     StopSnapLocation;                                 		// 0x00AC (0x000C) [0x0000000000000000]              
	float                                              SnapBlendSpeed;                                   		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              ShiftSnapBlendSpeed;                              		// 0x00BC (0x0004) [0x0000000000000000]              
	struct FInterpCurveFloat                           FallOffCurve;                                     		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __EventSnapIndexChanged__Delegate;                		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00D4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91006 ];

		return pClassPointer;
	};

	float CalculateMomentumFalloff ( );
	float DetermineMoveSpeed ( float Input, unsigned long bGamepad );
	bool MoveInDirection ( struct FVector MoveDirection );
	void SetSnapLocation ( int SnapIndex, float BlendSpeed );
	struct FVector GetSnapIndexLocation ( int SnapIndex );
	int CalculateSnapIndex ( );
	void DetermineSnapStopLocation ( );
	void SetActiveSnapIndex ( int NewIndex );
	int ClampSnapIndex ( int Index );
	void ShiftVerticalToSnap ( int Direction );
	bool FinishMovement ( float DeltaTime );
	void UpdateLocation ( float DeltaTime, float Input, unsigned long bGamepad );
	void SetGrabbed ( unsigned long bGrab );
	void StopMovement ( );
	void SetScrollPoints ( struct FVector InStartPoint, float InSnapDistance, int InTotalSnaps, float InTotalDistance );
	void eventTick ( float DeltaTime );
	void eventBeginPlay ( );
	void EventSnapIndexChanged ( class UScrollComponent_TA* ScrollComponent, int PreviousSnapIndex );
};

UClass* UScrollComponent_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_Counter_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_Counter_TA : public USequenceAction
{
public:
	int                                                MaxCount;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91079 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_Counter_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_CreateAttachComponent_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_CreateAttachComponent_TA : public USequenceAction
{
public:
	class AActor*                                      AttachTo;                                         		// 0x00FC (0x0004) [0x0000000000000000]              
	class UActorComponent_X*                           AttachingComponent;                               		// 0x0100 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91084 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_CreateAttachComponent_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GameURLHasOption_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_GameURLHasOption_TA : public USequenceAction
{
public:
	struct FString                                     Option;                                           		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91089 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GameURLHasOption_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetGameBall_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_GetGameBall_TA : public USequenceAction
{
public:
	class UObject*                                     Ball;                                             		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91093 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetGameBall_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_GetTeamScore_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_GetTeamScore_TA : public USequenceAction
{
public:
	int                                                TeamIndex;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                TeamScore;                                        		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91099 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_GetTeamScore_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_InstanceMaterial_TA
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_InstanceMaterial_TA : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASkeletalMeshActor*                          SK;                                               		// 0x0100 (0x0004) [0x0000000000000000]              
	class AStaticMeshActor*                            SM;                                               		// 0x0104 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   InstancedMaterial;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                MatIndex;                                         		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91106 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_InstanceMaterial_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_IntroMenuCarsInPosition_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_IntroMenuCarsInPosition_TA : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91114 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_IntroMenuCarsInPosition_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_IsTargetInPlayerCameraView
// 0x000C (0x011C - 0x0110)
class USeqAct_IsTargetInPlayerCameraView : public USeqAct_Latent
{
public:
	class AActor*                                      Instigator;                                       		// 0x0110 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              MaxConeAngle;                                     		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91118 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
};

UClass* USeqAct_IsTargetInPlayerCameraView::pClassPointer = NULL;

// Class TAGame.SeqAct_LoadMap_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_LoadMap_TA : public USequenceAction
{
public:
	struct FString                                     Map;                                              		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91129 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_LoadMap_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_LookAtActor_TA
// 0x0010 (0x0120 - 0x0110)
class USeqAct_LookAtActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                            		// 0x0110 (0x0004) [0x0000000000000000]              
	class AActor*                                      ActorToLookAt;                                    		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              InterpSpeed;                                      		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConstantInterpSpeed : 1;                         		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUpdating : 1;                                    		// 0x011C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91133 ];

		return pClassPointer;
	};

	void SetActorRotation ( struct FRotator NewRotation );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* USeqAct_LookAtActor_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_MoveActor_TA
// 0x0010 (0x0120 - 0x0110)
class USeqAct_MoveActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                            		// 0x0110 (0x0004) [0x0000000000000000]              
	class AActor*                                      MoveTransform;                                    		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              InterpSpeed;                                      		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConstantInterpSpeed : 1;                         		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bMove : 1;                                        		// 0x011C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91148 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* USeqAct_MoveActor_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_ReinitPhys_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ReinitPhys_TA : public USequenceAction
{
public:
	class AActor*                                      RBObj;                                            		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91160 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_ReinitPhys_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_RotateActor_TA
// 0x0014 (0x0124 - 0x0110)
class USeqAct_RotateActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                            		// 0x0110 (0x0004) [0x0000000000000000]              
	class AActor*                                      RotateTransform;                                  		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              InterpSpeed;                                      		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConstantInterpSpeed : 1;                         		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUpdating : 1;                                    		// 0x011C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              RotateTolerance;                                  		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91165 ];

		return pClassPointer;
	};

	void SetActorRotation ( struct FRotator NewRotation );
	bool eventUpdate ( float DeltaTime );
	void eventActivated ( );
};

UClass* USeqAct_RotateActor_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetBreakoutBallCharge_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetBreakoutBallCharge_TA : public USequenceAction
{
public:
	class AActor*                                      BallObj;                                          		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                Charge;                                           		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                Team;                                             		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91181 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetBreakoutBallCharge_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetBreakoutTileDamage_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetBreakoutTileDamage_TA : public USequenceAction
{
public:
	class AActor*                                      PlatformObj;                                      		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                Damage;                                           		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91188 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetBreakoutTileDamage_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetMatInstVectorParam_TA
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetMatInstVectorParam_TA : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VectorValue;                                      		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91194 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetMatInstVectorParam_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetMeshMaterialScalarParameter_TA
// 0x001C (0x0118 - 0x00FC)
class USeqAct_SetMeshMaterialScalarParameter_TA : public USequenceAction
{
public:
	TArray< class UObject* >                           MeshList;                                         		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ParamName;                                        		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ScalarValue;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91200 ];

		return pClassPointer;
	};

	void __SeqAct_SetMeshMaterialScalarParameter_TA__Activated ( class UObject* Mesh );
	void eventActivated ( );
};

UClass* USeqAct_SetMeshMaterialScalarParameter_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetPostProcess_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetPostProcess_TA : public USequenceAction
{
public:
	TArray< class UPostProcessChain* >                 Chains;                                           		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bReplaceCurrentChain : 1;                         		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91209 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetPostProcess_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetSkelMATLoadout_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetSkelMATLoadout_TA : public USequenceAction
{
public:
	class ASkeletalMeshActorMAT_Products_TA*           ActorMAT;                                         		// 0x00FC (0x0004) [0x0000000000000000]              
	class UObject*                                     ControllerOrPawn;                                 		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                LoadoutIndex;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91218 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SetSkelMATLoadout_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SetTutorialTip_TA
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetTutorialTip_TA : public USequenceAction
{
public:
	struct FString                                     Tip;                                              		// 0x00FC (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FName >                             ActionNames;                                      		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91227 ];

		return pClassPointer;
	};

	struct FString GetStringWithMergedActions ( );
	void eventActivated ( );
};

UClass* USeqAct_SetTutorialTip_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_SpawnActor_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SpawnActor_TA : public USequenceAction
{
public:
	class AActor*                                      ActorArchetype;                                   		// 0x00FC (0x0004) [0x0000000000000000]              
	class AActor*                                      Transform;                                        		// 0x0100 (0x0004) [0x0000000000000000]              
	class AActor*                                      SpawnedActor;                                     		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91241 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_SpawnActor_TA::pClassPointer = NULL;

// Class TAGame.SeqAct_TermPhys_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_TermPhys_TA : public USequenceAction
{
public:
	class AActor*                                      RBObj;                                            		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91247 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqAct_TermPhys_TA::pClassPointer = NULL;

// Class TAGame.SeqCond_CompareString_TA
// 0x001C (0x0100 - 0x00E4)
class USeqCond_CompareString_TA : public USequenceCondition
{
public:
	unsigned long                                      bIgnoreCase : 1;                                  		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     StringA;                                          		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StringB;                                          		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91252 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USeqCond_CompareString_TA::pClassPointer = NULL;

// Class TAGame.SeqEvent_CarSpawned_TA
// 0x000C (0x0120 - 0x0114)
class USeqEvent_CarSpawned_TA : public USequenceEvent
{
public:
	struct FString                                     PlayerName;                                       		// 0x0114 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91258 ];

		return pClassPointer;
	};

	void TriggerFor ( class ACar_TA* Car );
	void HandleVehicleSetup ( class ACar_TA* Car );
	void HandleCarSet ( class APRI_TA* PRI );
	void eventRegisterEvent ( );
};

UClass* USeqEvent_CarSpawned_TA::pClassPointer = NULL;

// Class TAGame.SpecialAttachment_TA
// 0x0028 (0x06C4 - 0x069C)
class ASpecialAttachment_TA : public ARBActor_TA
{
public:
	struct FVector                                     Offset;                                           		// 0x069C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x06A8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              BallHitMultiplier;                                		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarHitMultiplier;                                 		// 0x06B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarHitVerticalMultiplier;                         		// 0x06B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarHitTorque;                                     		// 0x06B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDemolishOnHit : 1;                               		// 0x06BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDemolishTeam : 1;                                		// 0x06BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class ACar_TA*                                     AttachedCar;                                      		// 0x06C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91294 ];

		return pClassPointer;
	};

	void OnHitCar ( class ACar_TA* Car, struct FVector HitLocation, struct FVector HitNormal );
	void OnHitBall ( class ABall_TA* Ball, struct FVector HitLocation, struct FVector HitNormal );
	void eventOnRigidBodyCollision ( struct FAccumulatedRigidBodyCollision Collision );
	void AttachToCar ( class ACar_TA* InCar, unsigned char InSocket );
	void eventDestroyed ( );
};

UClass* ASpecialAttachment_TA::pClassPointer = NULL;

// Class TAGame.SpecialEventErrors_TA
// 0x0014 (0x0068 - 0x0054)
class USpecialEventErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  EventNotFound;                                    		// 0x0054 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  EventStoreCurrencyExpired;                        		// 0x0058 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  EventStorePurchaseError;                          		// 0x005C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  EventStoreNotEnoughCurrency;                      		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UErrorType*                                  EventStoreLimitReached;                           		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91334 ];

		return pClassPointer;
	};

};

UClass* USpecialEventErrors_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Attachment_TA
// 0x0008 (0x0284 - 0x027C)
class ASpecialPickup_Attachment_TA : public ASpecialPickup_TA
{
public:
	class ASpecialAttachment_TA*                       AttachmentArchetype;                              		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ASpecialAttachment_TA*                       Attachment;                                       		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91346 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_Attachment_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BallCarSpring_TA
// 0x0008 (0x03F0 - 0x03E8)
class ASpecialPickup_BallCarSpring_TA : public ASpecialPickup_Spring_TA
{
public:
	struct FName                                       SpringMeshDistanceParam;                          		// 0x03E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91353 ];

		return pClassPointer;
	};

	void ScaleSpringMeshToLocation ( struct FVector NewLocation, struct FVector TargetLocation );
};

UClass* ASpecialPickup_BallCarSpring_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BallVelcro_TA
// 0x0074 (0x02F0 - 0x027C)
class ASpecialPickup_BallVelcro_TA : public ASpecialPickup_TA
{
public:
	struct FVector                                     BallOffset;                                       		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseRealOffset : 1;                               		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHit : 1;                                         		// 0x0288 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBroken : 1;                                      		// 0x0288 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	float                                              AfterHitDuration;                                 		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 Mesh;                                             		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           MeshScaleCurve;                                   		// 0x0294 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           HitMeshScaleCurve;                                		// 0x02A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           BrokenScaleCurve;                                 		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PostBreakDuration;                                		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 BallHitSFX;                                       		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBreakForce;                                    		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBreakTime;                                     		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CheckLastTouchRate;                               		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        SMC;                                              		// 0x02D8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ABall_TA*                                    WeldedBall;                                       		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OldBallMass;                                      		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttachTime;                                       		// 0x02E4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastTouchCheckTime;                               		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BreakTime;                                        		// 0x02EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91360 ];

		return pClassPointer;
	};

	void DoBreak ( );
	void HandleCollision ( class ARBActor_TA* RBActor, struct FAccumulatedRigidBodyCollision Collision );
	void HandleCarTouch ( class ABall_TA* InBall, class ACar_TA* InCar, unsigned char HitType );
	void PickupEnd ( );
	void OnBallHit ( );
	void HandleHitBall ( class ACar_TA* InCar, class ABall_TA* InBall );
	void PickupTick ( float DeltaTime );
	void TickPickupFX ( float DeltaTime );
	void RemovePickupFX ( );
	void InitPickupFX ( );
	void PickupStart ( );
	void eventReplicatedEvent ( struct FName EventName );
};

UClass* ASpecialPickup_BallVelcro_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Basketball_TA
// 0x0024 (0x02A0 - 0x027C)
class ASpecialPickup_Basketball_TA : public ASpecialPickup_TA
{
public:
	struct FVector                                     BallOffset;                                       		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AttachedBallMass;                                 		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LaunchForce;                                      		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABall_TA*                                    WeldedBall;                                       		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OldBallMass;                                      		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91406 ];

		return pClassPointer;
	};

	void HandleCarTouch ( class ABall_TA* InBall, class ACar_TA* InCar, unsigned char HitType );
	void PickupStart ( );
	void HandleHitBall ( class ACar_TA* InCar, class ABall_TA* InBall );
	bool TryActivate ( class ARBActor_TA* TargetOverride );
	void OnCreated ( );
};

UClass* ASpecialPickup_Basketball_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Batarang_TA
// 0x0008 (0x03F8 - 0x03F0)
class ASpecialPickup_Batarang_TA : public ASpecialPickup_BallLasso_TA
{
public:
	float                                              SpinSpeed;                                        		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurRotation;                                      		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91428 ];

		return pClassPointer;
	};

	void UpdateVisual ( float DeltaTime );
};

UClass* ASpecialPickup_Batarang_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BoostMod_TA
// 0x000C (0x0288 - 0x027C)
class ASpecialPickup_BoostMod_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bUnlimitedBoost : 1;                              		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BoostStrength;                                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OldBoostStrength;                                 		// 0x0284 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91435 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_BoostMod_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_BoostOverride_TA
// 0x0018 (0x02B8 - 0x02A0)
class ASpecialPickup_BoostOverride_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_TA*                                 OtherCarFXArchetype;                              		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 BoostSFX;                                         		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BeamPS;                                           		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    BeamPSC;                                          		// 0x02AC (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AFXActor_TA*                                 OtherCarFX;                                       		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ACar_TA*                                     OtherCar;                                         		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91442 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void RemovePickupFX ( );
	void InitPickupFX ( );
	void OnTargetChanged ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_BoostOverride_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_CarGravity_TA
// 0x0014 (0x0290 - 0x027C)
class ASpecialPickup_CarGravity_TA : public ASpecialPickup_TA
{
public:
	float                                              GravityScale;                                     		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AddedForce;                                       		// 0x0280 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              OrigGravityScale;                                 		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91455 ];

		return pClassPointer;
	};

	void PickupTick ( float DeltaTime );
	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_CarGravity_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_CarSpeed_TA
// 0x0030 (0x02AC - 0x027C)
class ASpecialPickup_CarSpeed_TA : public ASpecialPickup_TA
{
public:
	float                                              SpeedMultiplier;                                  		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLinearSpeedMultiplier;                         		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           DriveTorqueCurve;                                 		// 0x0284 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              OriginalTorque;                                   		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OriginalMaxLinearSpeed;                           		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInterpCurveFloat                           OriginalDriveTorqueCurve;                         		// 0x029C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91464 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_CarSpeed_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Demolish_TA
// 0x0004 (0x0280 - 0x027C)
class ASpecialPickup_Demolish_TA : public ASpecialPickup_TA
{
public:
	unsigned char                                      DemolishTarget;                                   		// 0x027C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DemolishSpeed;                                    		// 0x027D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OldTarget;                                        		// 0x027E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      OldSpeed;                                         		// 0x027F (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91474 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_Demolish_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_HandbrakeOverride_TA
// 0x0004 (0x02A4 - 0x02A0)
class ASpecialPickup_HandbrakeOverride_TA : public ASpecialPickup_Targeted_TA
{
public:
	class ACar_TA*                                     OtherCar;                                         		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91482 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_HandbrakeOverride_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_HitForce_TA
// 0x0028 (0x02A4 - 0x027C)
class ASpecialPickup_HitForce_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bBallForce : 1;                                   		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCarForce : 1;                                    		// 0x027C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDemolishCars : 1;                                		// 0x027C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              BallHitForce;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarHitForce;                                      		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_TA*                                 BallHitFXArchetype;                               		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_TA*                                 CarHitFXArchetype;                                		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAkSoundCue*                                 HitSFX;                                           		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFXTime;                                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OrigBallHitForce;                                 		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OrigCarHitForce;                                  		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFXTime;                                       		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91487 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void HandleCollision ( class ARBActor_TA* RB, struct FAccumulatedRigidBodyCollision Collision );
	void HandleCollisionFX ( class ARBActor_TA* RB, struct FAccumulatedRigidBodyCollision Collision );
	void PickupStart ( );
};

UClass* ASpecialPickup_HitForce_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_Swapper_TA
// 0x000C (0x02AC - 0x02A0)
class ASpecialPickup_Swapper_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_TA*                                 OwnCarFX;                                         		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_TA*                                 OtherCarFX;                                       		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACar_TA*                                     OtherCar;                                         		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91510 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void InitPickupFX ( );
	void OnTargetChanged ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_Swapper_TA::pClassPointer = NULL;

// Class TAGame.SpecialPickup_TimeBomb_TA
// 0x0020 (0x029C - 0x027C)
class ASpecialPickup_TimeBomb_TA : public ASpecialPickup_TA
{
public:
	float                                              Radius;                                           		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlmostReadyDuration;                              		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartMatSpeed;                                    		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlmostReadyMatSpeed;                              		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseForce;                                     		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarVerticalForce;                                 		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CarTorque;                                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDemolish : 1;                                    		// 0x0298 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bImpulse : 1;                                     		// 0x0298 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91525 ];

		return pClassPointer;
	};

	void PickupEnd ( );
	void AlmostReady ( );
	void PickupStart ( );
};

UClass* ASpecialPickup_TimeBomb_TA::pClassPointer = NULL;

// Class TAGame.SplineCameraTrack_TA
// 0x0000 (0x024C - 0x024C)
class ASplineCameraTrack_TA : public ASplineActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91541 ];

		return pClassPointer;
	};

	class ASplineActor* GetBestNode ( struct FVector FromLocation );
	struct FVector GetLocationOnSpline ( struct FVector FromLocation, float ExtraDistance );
};

UClass* ASplineCameraTrack_TA::pClassPointer = NULL;

// Class TAGame.SplineFocusTarget_TA
// 0x0008 (0x0204 - 0x01FC)
class ASplineFocusTarget_TA : public ACustomFocusTarget_TA
{
public:
	class ASplineCameraTrack_TA*                       Spline;                                           		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceAhead;                                    		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91558 ];

		return pClassPointer;
	};

	struct FVector GetFocusLocation ( class ACar_TA* ForCar );
};

UClass* ASplineFocusTarget_TA::pClassPointer = NULL;

// Class TAGame.StatFactory_Basketball_TA
// 0x0000 (0x0314 - 0x0314)
class AStatFactory_Basketball_TA : public AStatFactory_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91565 ];

		return pClassPointer;
	};

	class UGoal_TA* CalculateShotGoal ( class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime );
};

UClass* AStatFactory_Basketball_TA::pClassPointer = NULL;

// Class TAGame.StatFactory_Breakout_TA
// 0x001C (0x0330 - 0x0314)
class AStatFactory_Breakout_TA : public AStatFactory_TA
{
public:
	int                                                BreakoutSaveDamageThreshold;                      		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BreakoutDamageLargeThreshold;                     		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShotGoalTimestep;                                 		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AGameEvent_Breakout_TA*                      BreakoutEvent;                                    		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FieldCenter;                                      		// 0x0324 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91574 ];

		return pClassPointer;
	};

	float GetHitDistanceToGoal ( class ABall_TA* Ball, struct FBallHitInfo Hit, class UGoal_TA* Goal );
	class UGoal_TA* CalculateShotGoal ( class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime );
	class UGoal_TA* FindShotGoal ( class ABall_TA* Ball );
	void HandleBallAppliedDamage ( class ABall_Breakout_TA* Ball, struct FAppliedBreakoutDamage Damage );
	void HandlePlatformDamaged ( class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball );
	void UnregisterBall ( class APawn_X* Ball );
	void RegisterBall ( class ABall_TA* Ball );
	void SetGameEvent ( class AGameEvent_Soccar_TA* InGameEvent );
	bool IsInRedZone ( class UGoal_TA* Goal, struct FVector BallLocation );
};

UClass* AStatFactory_Breakout_TA::pClassPointer = NULL;

// Class TAGame.StaticMeshActor_TA
// 0x0004 (0x0200 - 0x01FC)
class AStaticMeshActor_TA : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01FC (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91630 ];

		return pClassPointer;
	};

};

UClass* AStaticMeshActor_TA::pClassPointer = NULL;

// Class TAGame.StaticMeshRBActor_TA
// 0x0040 (0x06DC - 0x069C)
class AStaticMeshRBActor_TA : public ARBActor_TA
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x069C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      ApplyCollisionForceFrom;                          		// 0x06A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TouchBounceForce;                                 		// 0x06A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedBounchForceMultiplier;                       		// 0x06A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearConstraintsLower;                           		// 0x06AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearConstraintsUpper;                           		// 0x06B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AngularConstraintsLower;                          		// 0x06C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AngularConstraintsUpper;                          		// 0x06D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91634 ];

		return pClassPointer;
	};

	void eventOnRigidBodyCollision ( struct FAccumulatedRigidBodyCollision Collision );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};

UClass* AStaticMeshRBActor_TA::pClassPointer = NULL;

// Class TAGame.TMetricsShared_TA
// 0x0008 (0x0044 - 0x003C)
class UTMetricsShared_TA : public UObject
{
public:
	float                                              PreLoadMapTime;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              LevelLoadTime;                                    		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91655 ];

		return pClassPointer;
	};

	struct FString GetGameMode ( class AGameEvent_TA* GameEvent );
	void HandleMatchEnded ( class AGameEvent_Soccar_TA* GameEvent );
	void HandleMatchStarted ( class AGameEvent_TA* GameEvent );
	void HandlePostLoadMap ( );
	void HandlePreLoadMap ( struct FString MapName );
	void InitShared ( );
};

UClass* UTMetricsShared_TA::pClassPointer = NULL;

// Class TAGame.TurnTableActor_GarageComplex_TA
// 0x0000 (0x0288 - 0x0288)
class ATurnTableActor_GarageComplex_TA : public ATurnTableActor_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91673 ];

		return pClassPointer;
	};

};

UClass* ATurnTableActor_GarageComplex_TA::pClassPointer = NULL;

// Class TAGame.Tutorial_AirTilt_TA
// 0x000C (0x01A4 - 0x0198)
class UTutorial_AirTilt_TA : public UTutorial_TA
{
public:
	struct FString                                     ToggleAirRollString;                              		// 0x0198 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91685 ];

		return pClassPointer;
	};

	void AddKeyNameFromAction ( struct FName ActionName, TArray< struct FString >* KeyList );
	struct FString GetMergedAirRollString ( );
	struct FString GetUIReadableString ( struct FString Key );
	void HandleCarHitWorld ( class ACar_TA* Car, class AActor* HitActor );
	void HandleCarLanded ( class ACar_TA* Car );
	void HandleVehicleSetup ( class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car );
};

UClass* UTutorial_AirTilt_TA::pClassPointer = NULL;

// Class TAGame.UnreplicatedRBActor_TA
// 0x0000 (0x06DC - 0x06DC)
class AUnreplicatedRBActor_TA : public AStaticMeshRBActor_TA
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91709 ];

		return pClassPointer;
	};

};

UClass* AUnreplicatedRBActor_TA::pClassPointer = NULL;

// Class TAGame.VehiclePickup_BoostModifier_Randomizer_TA
// 0x0018 (0x0060 - 0x0048)
class UVehiclePickup_BoostModifier_Randomizer_TA : public UVehiclePickup_BoostModifier_TA
{
public:
	float                                              PickupChance;                                     		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AFXActor_TA*                                 FX_PickupReady;                                   		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRandomPickup >                     PossiblePickups;                                  		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ASpecialPickup_TA*                           CurrentPickup;                                    		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91716 ];

		return pClassPointer;
	};

	void PickNew ( );
	void PickupEffect ( class ACar_TA* Car );
	bool CanPickup ( class ACar_TA* Car );
	void InitModifier ( );
};

UClass* UVehiclePickup_BoostModifier_Randomizer_TA::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif